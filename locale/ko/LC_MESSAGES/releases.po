# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-29 22:44\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../releases/0.95.txt:3
# 8ca86ef9ce24401dad7e1c3b4fc2d1ef
msgid "Django version 0.95 release notes"
msgstr ""

#: ../../releases/0.95.txt:5
# 5602467a13c8456aa4d0a44bebf313e7
msgid "Welcome to the Django 0.95 release."
msgstr ""

#: ../../releases/0.95.txt:7
# 0204d995ef5d4634b555a7b79cca13a4
msgid "This represents a significant advance in Django development since the 0.91 release in January 2006. The details of every change in this release would be too extensive to list in full, but a summary is presented below."
msgstr ""

#: ../../releases/0.95.txt:12
# c4f9c5565e214857880e9fa529a2861d
msgid "Suitability and API stability"
msgstr ""

#: ../../releases/0.95.txt:14
# ef581ec41e054cbcb4ddd1e4e7ffd4bc
msgid "This release is intended to provide a stable reference point for developers wanting to work on production-level applications that use Django."
msgstr ""

#: ../../releases/0.95.txt:17
# 7179bfaf3e3945e0a99dcea156bd49b0
msgid "However, it's not the 1.0 release, and we'll be introducing further changes before 1.0. For a clear look at which areas of the framework will change (and which ones will *not* change) before 1.0, see the api-stability.txt file, which lives in the docs/ directory of the distribution."
msgstr ""

#: ../../releases/0.95.txt:22
# 8faabeb0328b4630a4c945d68dbd1bd8
msgid "You may have a need to use some of the features that are marked as \"subject to API change\" in that document, but that's OK with us as long as it's OK with you, and as long as you understand APIs may change in the future."
msgstr ""

#: ../../releases/0.95.txt:26
# a2925332c46b43b8b180d2fdfa6be6d6
msgid "Fortunately, most of Django's core APIs won't be changing before version 1.0. There likely won't be as big of a change between 0.95 and 1.0 versions as there was between 0.91 and 0.95."
msgstr ""

#: ../../releases/0.95.txt:31
# 3e26f6f58aed452e9394db123d21479e
msgid "Changes and new features"
msgstr ""

#: ../../releases/0.95.txt:33
# 8d92269178a64f0799d7c6d305f71a3f
msgid "The major changes in this release (for developers currently using the 0.91 release) are a result of merging the 'magic-removal' branch of development. This branch removed a number of constraints in the way Django code had to be written that were a consequence of decisions made in the early days of Django, prior to its open-source release. It's now possible to write more natural, Pythonic code that works as expected, and there's less \"black magic\" happening behind the scenes."
msgstr ""

#: ../../releases/0.95.txt:41
# 4cb956ef61614248af47d36f5bf449a1
msgid "Aside from that, another main theme of this release is a dramatic increase in usability. We've made countless improvements in error messages, documentation, etc., to improve developers' quality of life."
msgstr ""

#: ../../releases/0.95.txt:45
# 61f0514ea1d4487092d3e284ee22b4bd
msgid "The new features and changes introduced in 0.95 include:"
msgstr ""

#: ../../releases/0.95.txt:47
# 4cd1b8434d034b67b39732a8fea1dff1
msgid "Django now uses a more consistent and natural filtering interface for retrieving objects from the database."
msgstr ""

#: ../../releases/0.95.txt:50
# 6392211f42df4bc1bacadde39549623b
msgid "User-defined models, functions and constants now appear in the module namespace they were defined in. (Previously everything was magically transferred to the django.models.* namespace.)"
msgstr ""

#: ../../releases/0.95.txt:54
# 475038b7af884257aea1fedfe516a80a
msgid "Some optional applications, such as the FlatPage, Sites and Redirects apps, have been decoupled and moved into django.contrib. If you don't want to use these applications, you no longer have to install their database tables."
msgstr ""

#: ../../releases/0.95.txt:59
# b28e2f33eae6471ea7fa39e0223f3a62
msgid "Django now has support for managing database transactions."
msgstr ""

#: ../../releases/0.95.txt:61
# 58011b93a51b4b0c963bd13e82329aeb
msgid "We've added the ability to write custom authentication and authorization backends for authenticating users against alternate systems, such as LDAP."
msgstr ""

#: ../../releases/0.95.txt:65
# 2eda4608e81d47608e42aee001f43b02
msgid "We've made it easier to add custom table-level functions to models, through a new \"Manager\" API."
msgstr ""

#: ../../releases/0.95.txt:68
# 69e5aa81bebe49aabda3b6e5c4be2231
msgid "It's now possible to use Django without a database. This simply means that the framework no longer requires you to have a working database set up just to serve dynamic pages. In other words, you can just use URLconfs/views on their own. Previously, the framework required that a database be configured, regardless of whether you actually used it."
msgstr ""

#: ../../releases/0.95.txt:74
# 92b6d4e0331d485e9d5303b1476c5bb2
msgid "It's now more explicit and natural to override save() and delete() methods on models, rather than needing to hook into the pre_save() and post_save() method hooks."
msgstr ""

#: ../../releases/0.95.txt:78
# 8f96d5cd7f0b469fb46b2a71529406e1
msgid "Individual pieces of the framework now can be configured without requiring the setting of an environment variable. This permits use of, for example, the Django templating system inside other applications."
msgstr ""

#: ../../releases/0.95.txt:82
# 591074c7864247e88707f4529d169cd5
msgid "More and more parts of the framework have been internationalized, as we've expanded internationalization (i18n) support. The Django codebase, including code and templates, has now been translated, at least in part, into 31 languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible to use Django's admin site in your native language."
msgstr ""

#: ../../releases/0.95.txt:88
# 45c90aa8bc464e5db0ddaff4728d6d8a
msgid "The number of changes required to port from 0.91-compatible code to the 0.95 code base are significant in some cases. However, they are, for the most part, reasonably routine and only need to be done once. A list of the necessary changes is described in the `Removing The Magic`_ wiki page. There is also an easy checklist_ for reference when undertaking the porting operation."
msgstr ""

#: ../../releases/0.95.txt:98
# b596d11c2fea49159fd48606eb1e46cf
msgid "Problem reports and getting help"
msgstr ""

#: ../../releases/0.95.txt:100
# 673671dfcc564cf59bfba4d16d78907a
msgid "Need help resolving a problem with Django? The documentation in the distribution is also available :doc:`online </index>` at the `Django Web site`_. The :doc:`FAQ </faq/index>` document is especially recommended, as it contains a number of issues that come up time and again."
msgstr ""

#: ../../releases/0.95.txt:105
# da0355bae4c341d7bed58444a1cd5bd5
msgid "For more personalized help, the `django-users`_ mailing list is a very active list, with more than 2,000 subscribers who can help you solve any sort of Django problem. We recommend you search the archives first, though, because many common questions appear with some regularity, and any particular problem may already have been answered."
msgstr ""

#: ../../releases/0.95.txt:111
# c8dc6ca8d2fc49d0b3b9c329b99b3cf0
msgid "Finally, for those who prefer the more immediate feedback offered by IRC, there's a #django channel on irc.freenode.net that is regularly populated by Django users and developers from around the world. Friendly people are usually available at any hour of the day -- to help, or just to chat."
msgstr ""

#: ../../releases/0.95.txt:119
# 361aa5859a424ec6bdb812c9e14715fe
msgid "Thanks for using Django!"
msgstr ""

#: ../../releases/0.95.txt:121
# ab7072618aca45d79725a63f3a7d8e70
msgid "The Django Team July 2006"
msgstr ""

#: ../../releases/0.96.txt:3
# 1219583cfe4b4cfcbb2fd056196952cb
msgid "Django version 0.96 release notes"
msgstr ""

#: ../../releases/0.96.txt:5
# 8ce998f350cd4fd3a75dc50804145fc7
msgid "Welcome to Django 0.96!"
msgstr ""

#: ../../releases/0.96.txt:7
# 21c0e6eb5c59432b80df01b8d9233fe3
msgid "The primary goal for 0.96 is a cleanup and stabilization of the features introduced in 0.95. There have been a few small `backwards-incompatible changes`_ since 0.95, but the upgrade process should be fairly simple and should not require major changes to existing applications."
msgstr ""

#: ../../releases/0.96.txt:12
# 4bac521f1e104969b346b0c5c18412ce
msgid "However, we're also releasing 0.96 now because we have a set of backwards-incompatible changes scheduled for the near future. Once completed, they will involve some code changes for application developers, so we recommend that you stick with Django 0.96 until the next official release; then you'll be able to upgrade in one step instead of needing to make incremental changes to keep up with the development version of Django."
msgstr ""

#: ../../releases/0.96.txt:21
#: ../../releases/1.0.txt:33
# 1f5c62d86b224fd8b226ab20015f4b2d
# 8586fdb3373d4bdc918752b6e410017f
msgid "Backwards-incompatible changes"
msgstr ""

#: ../../releases/0.96.txt:23
# c74affb33c994d029f2a10c341c58354
msgid "The following changes may require you to update your code when you switch from 0.95 to 0.96:"
msgstr ""

#: ../../releases/0.96.txt:27
# ba6948e1c0a947e780bad803e62c5c51
msgid "``MySQLdb`` version requirement"
msgstr ""

#: ../../releases/0.96.txt:29
# 1ddc320f3883465594b35a5a71b86641
msgid "Due to a bug in older versions of the ``MySQLdb`` Python module (which Django uses to connect to MySQL databases), Django's MySQL backend now requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions if you attempt to use an older version."
msgstr ""

#: ../../releases/0.96.txt:34
# dc64867cc57b4c1485b378504dc2d28e
msgid "If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this requirement, a separate, backwards-compatible backend, called \"mysql_old\", has been added to Django. To use this backend, change the :setting:`DATABASE_ENGINE` setting in your Django settings file from this::"
msgstr ""

#: ../../releases/0.96.txt:42
#: ../../releases/1.2.txt:596
# 014d2e134daf401c9531cf76c5c41aec
# 2b97f954018f4796b1c1ffa37c78f783
msgid "to this::"
msgstr ""

#: ../../releases/0.96.txt:46
# e4b61b5099d54928b3a73df513d599ba
msgid "However, we strongly encourage MySQL users to upgrade to a more recent version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is provided only to ease this transition, and is considered deprecated; aside from any necessary security fixes, it will not be actively maintained, and it will be removed in a future release of Django."
msgstr ""

#: ../../releases/0.96.txt:52
# 494524dc1e5d4c46b94378981533c7c9
msgid "Also, note that some features, like the new :setting:`DATABASE_OPTIONS` setting (see the :doc:`databases documentation </ref/databases>` for details), are only available on the \"mysql\" backend, and will not be made available for \"mysql_old\"."
msgstr ""

#: ../../releases/0.96.txt:58
# ac8a87c778fb4cd8864b3e48880f5e0f
msgid "Database constraint names changed"
msgstr ""

#: ../../releases/0.96.txt:60
# 813d4cc377b541a28645c25a6fcd5c1c
msgid "The format of the constraint names Django generates for foreign key references have changed slightly. These names are generally only used when it is not possible to put the reference directly on the affected column, so they are not always visible."
msgstr ""

#: ../../releases/0.96.txt:65
# 2b90713fd08e4435b0d414fc628809fc
msgid "The effect of this change is that running ``manage.py reset`` and similar commands against an existing database may generate SQL with the new form of constraint name, while the database itself contains constraints named in the old form; this will cause the database server to raise an error message about modifying non-existent constraints."
msgstr ""

#: ../../releases/0.96.txt:71
# 32717b66d48b4a92ad88f50a2a820a24
msgid "If you need to work around this, there are two methods available:"
msgstr ""

#: ../../releases/0.96.txt:73
# 4f6dd4dd023a489b9580cf37b6bc3c7c
msgid "Redirect the output of ``manage.py`` to a file, and edit the generated SQL to use the correct constraint names before executing it."
msgstr ""

#: ../../releases/0.96.txt:77
# 461991d8bf504dba8ba9cdf38c214ccd
msgid "Examine the output of ``manage.py sqlall`` to see the new-style constraint names, and use that as a guide to rename existing constraints in your database."
msgstr ""

#: ../../releases/0.96.txt:82
# 79cc9374b3d0458d8e7b1caba5978724
msgid "Name changes in ``manage.py``"
msgstr ""

#: ../../releases/0.96.txt:84
# 85facc9123934f91981a15803fa9dbac
msgid "A few of the options to ``manage.py`` have changed with the addition of fixture support:"
msgstr ""

#: ../../releases/0.96.txt:87
# 909d7dae65df4e6fab5674e2acbef829
msgid "There are new ``dumpdata`` and ``loaddata`` commands which, as you might expect, will dump and load data to/from the database. These commands can operate against any of Django's supported serialization formats."
msgstr ""

#: ../../releases/0.96.txt:92
# aebd80fe81f44dc6bf3212a1234d5e81
msgid "The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for other custom SQL -- views, stored procedures, etc.)."
msgstr ""

#: ../../releases/0.96.txt:96
# 7a6f474c9e4647aeb800f9cf6c77bc4d
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

#: ../../releases/0.96.txt:99
# 7b96025842084cb7b7d40673f4107077
msgid "Backslash escaping changed"
msgstr ""

#: ../../releases/0.96.txt:101
# d9b17e668b0a4d38bba0072e982d57d0
msgid "The Django database API now escapes backslashes given as query parameters. If you have any database API code that matches backslashes, and it was working before (despite the lack of escaping), you'll have to change your code to \"unescape\" the slashes one level."
msgstr ""

#: ../../releases/0.96.txt:106
# ee15583e4e93469d9b984b66ffbeab76
msgid "For example, this used to work::"
msgstr ""

#: ../../releases/0.96.txt:111
# e3db1542a4c1401b9e906e7984a8268f
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:117
# 9b749427aae649468c234b8b6a7ff8b2
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

#: ../../releases/0.96.txt:119
# 0bed3aa1a5f44335be8e94abf0dc459e
msgid "The ``ENABLE_PSYCO`` setting no longer exists. If your settings file includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we recommend writing a middleware class to activate it."
msgstr ""

#: ../../releases/0.96.txt:126
# f989136a166a4ccf81ac0a4101817963
msgid "What's new in 0.96?"
msgstr ""

#: ../../releases/0.96.txt:128
# 939083666ab84aa4b41aff118d125566
msgid "This revision represents over a thousand source commits and over four hundred bug fixes, so we can't possibly catalog all the changes. Here, we describe the most notable changes in this release."
msgstr ""

#: ../../releases/0.96.txt:133
# f324e2c6312140ffab5a11ddfadf20a0
msgid "New forms library"
msgstr ""

#: ../../releases/0.96.txt:135
# 20eb1c9cf13e49d0884e0c8b75685648
msgid "``django.newforms`` is Django's new form-handling library. It's a replacement for ``django.forms``, the old form/manipulator/validation framework.  Both APIs are available in 0.96, but over the next two releases we plan to switch completely to the new forms system, and deprecate and remove the old system."
msgstr ""

#: ../../releases/0.96.txt:141
# cff980920c27441687a92961f5091160
msgid "There are three elements to this transition:"
msgstr ""

#: ../../releases/0.96.txt:143
# 68564f1a4b0a4869b41ca9d776b9a1e4
msgid "We've copied the current ``django.forms`` to ``django.oldforms``. This allows you to upgrade your code *now* rather than waiting for the backwards-incompatible change and rushing to fix your code after the fact.  Just change your import statements like this::"
msgstr ""

#: ../../releases/0.96.txt:152
# 4fe95c87c0b441769ad8560e4150fbf0
msgid "The next official release of Django will move the current ``django.newforms`` to ``django.forms``. This will be a backwards-incompatible change, and anyone still using the old version of ``django.forms`` at that time will need to change their import statements as described above."
msgstr ""

#: ../../releases/0.96.txt:158
# 17ffa6a3d79748cc8b561695debec204
msgid "The next release after that will completely remove ``django.oldforms``."
msgstr ""

#: ../../releases/0.96.txt:161
# c4e9f76338c14d328022ab40f9372911
msgid "Although the ``newforms`` library will continue to evolve, it's ready for use for most common cases. We recommend that anyone new to form handling skip the old forms system and start with the new."
msgstr ""

#: ../../releases/0.96.txt:165
# 5e0cf77d9cb944ca905575731d77d986
msgid "For more information about ``django.newforms``, read the :doc:`newforms documentation </topics/forms/index>`."
msgstr ""

#: ../../releases/0.96.txt:169
# 92724b7506d5481f90c9e8cfceb9443f
msgid "URLconf improvements"
msgstr ""

#: ../../releases/0.96.txt:171
# d5af535040ef4573a0c1075aa574da71
msgid "You can now use any callable as the callback in URLconfs (previously, only strings that referred to callables were allowed). This allows a much more natural use of URLconfs. For example, this URLconf::"
msgstr ""

#: ../../releases/0.96.txt:181
# 8df21661120041c8a6db71fc862498bf
msgid "can now be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:190
# eed1fd17016848af9c8d3404f8d224af
msgid "One useful application of this can be seen when using decorators; this change allows you to apply decorators to views *in your URLconf*. Thus, you can make a generic view require login very easily::"
msgstr ""

#: ../../releases/0.96.txt:208
# baecfe6aeb334488a811994b64f4dfb2
msgid "Note that both syntaxes (strings and callables) are valid, and will continue to be valid for the foreseeable future."
msgstr ""

#: ../../releases/0.96.txt:212
# 9238255c81e64557b03e571c94396ea6
msgid "The test framework"
msgstr ""

#: ../../releases/0.96.txt:214
# aa937664227e44d4a66cd419afd9aace
msgid "Django now includes a test framework so you can start transmuting fear into boredom (with apologies to Kent Beck). You can write tests based on :mod:`doctest` or :mod:`unittest` and test your views with a simple test client."
msgstr ""

#: ../../releases/0.96.txt:218
# 189358ede0d6432fa38cb93164398bb8
msgid "There is also new support for \"fixtures\" -- initial data, stored in any of the supported :doc:`serialization formats </topics/serialization>`, that will be loaded into your database at the start of your tests. This makes testing with real data much easier."
msgstr ""

#: ../../releases/0.96.txt:223
# f01c466eb6a44b808cf3718257959732
msgid "See :doc:`the testing documentation </topics/testing>` for the full details."
msgstr ""

#: ../../releases/0.96.txt:226
# 99bf95a35ed542fc952a2fe0b86a7f50
msgid "Improvements to the admin interface"
msgstr ""

#: ../../releases/0.96.txt:228
# 5f199c92170246c88a5ad6e904f0954b
msgid "A small change, but a very nice one: dedicated views for adding and updating users have been added to the admin interface, so you no longer need to worry about working with hashed passwords in the admin."
msgstr ""

#: ../../releases/0.96.txt:233
# 1bb88b5f576a41c99398355701d6d069
msgid "Thanks"
msgstr ""

#: ../../releases/0.96.txt:235
# 8db254b6090144858e05fa59ca19e82d
msgid "Since 0.95, a number of people have stepped forward and taken a major new role in Django's development. We'd like to thank these people for all their hard work:"
msgstr ""

#: ../../releases/0.96.txt:239
# df7181a948d94d709917056ae95b5df7
msgid "Russell Keith-Magee and Malcolm Tredinnick for their major code contributions. This release wouldn't have been possible without them."
msgstr ""

#: ../../releases/0.96.txt:242
# aedcd21ae5d14e60bfe6620fe40b2f47
msgid "Our new release manager, James Bennett, for his work in getting out 0.95.1, 0.96, and (hopefully) future release."
msgstr ""

#: ../../releases/0.96.txt:245
# f3b601351ed145e291f0a68f7667c462
msgid "Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael Radziej, and Gary Wilson. They agreed to take on the monumental task of wrangling our tickets into nicely cataloged submission. Figuring out what to work on is now about a million times easier; thanks again, guys."
msgstr ""

#: ../../releases/0.96.txt:251
# fe6292fb0d66438491159a16d309b694
msgid "Everyone who submitted a bug report, patch or ticket comment. We can't possibly thank everyone by name -- over 200 developers submitted patches that went into 0.96 -- but everyone who's contributed to Django is listed in AUTHORS_."
msgstr ""

#: ../../releases/1.0.txt:3
# 3088ed6f5a004771b085af49d5a8c11f
msgid "Django 1.0 release notes"
msgstr ""

#: ../../releases/1.0.txt:5
# 648c38bc33ff4cec802cb74a62466be1
msgid "Welcome to Django 1.0!"
msgstr ""

#: ../../releases/1.0.txt:7
# 6a4a40724f824e30ba912a07f2860a41
msgid "We've been looking forward to this moment for over three years, and it's finally here. Django 1.0 represents a the largest milestone in Django's development to date: a Web framework that a group of perfectionists can truly be proud of."
msgstr ""

#: ../../releases/1.0.txt:11
# 95978eaa1a984fa185ada9293052223d
msgid "Django 1.0 represents over three years of community development as an Open Source project. Django's received contributions from hundreds of developers, been translated into fifty languages, and today is used by developers on every continent and in every kind of job."
msgstr ""

#: ../../releases/1.0.txt:16
# 5140d68daab048a7ac96bbf003880fd2
msgid "An interesting historical note: when Django was first released in July 2005, the initial released version of Django came from an internal repository at revision number 8825. Django 1.0 represents revision 8961 of our public repository. It seems fitting that our 1.0 release comes at the moment where community contributions overtake those made privately."
msgstr ""

#: ../../releases/1.0.txt:23
# f1c1c82cfcb443969d9eecea297d7a8f
msgid "Stability and forwards-compatibility"
msgstr ""

#: ../../releases/1.0.txt:25
# 17e533195ea3439da6c3701fe996dd96
msgid ":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API stability and forwards-compatibility. In a nutshell, this means that code you develop against Django 1.0 will continue to work against 1.1 unchanged, and you should need to make only minor changes for any 1.X release."
msgstr ""

#: ../../releases/1.0.txt:30
# 541f98ecfada4d17baf7aa0d7414734b
msgid "See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

#: ../../releases/1.0.txt:35
# ed53dc3518b6429e906e4a03e7d91d74
msgid "Django 1.0 has a number of backwards-incompatible changes from Django 0.96. If you have apps written against Django 0.96 that you need to port, see our detailed porting guide:"
msgstr ""

#: ../../releases/1.0.txt:44
# 71efce2fbdc04198bbc4164f5fa22b97
msgid "A complete list of backwards-incompatible changes can be found at https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

#: ../../releases/1.0.txt:48
# a3a2bb72e6634397b759293ee38d6d45
msgid "What's new in Django 1.0"
msgstr ""

#: ../../releases/1.0.txt:50
# a116b2a8b7c34aa89a9408324d27c4d6
msgid "A *lot*!"
msgstr ""

#: ../../releases/1.0.txt:52
# dc56db436eda463abebe4fa6cd3ad424
msgid "Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000 bugs, and edited, added, or removed around 350,000 lines of code. We've also added 40,000 lines of new documentation, and greatly improved what was already there."
msgstr ""

#: ../../releases/1.0.txt:57
# 5f2bf6df13f04ef1847c7da27f34383a
msgid "In fact, new documentation is one of our favorite features of Django 1.0, so we might as well start there. First, there's a new documentation site:"
msgstr ""

#: ../../releases/1.0.txt:60
# 2292af23f73e481985512d4e7da2fbd5
msgid "http://docs.djangoproject.com/"
msgstr ""

#: ../../releases/1.0.txt:62
# f4985b0fb87d4479ae1aa5724faac8c7
msgid "The documentation has been greatly improved, cleaned up, and generally made awesome. There's now dedicated search, indexes, and more."
msgstr ""

#: ../../releases/1.0.txt:65
# 866136c932344267af7cd95326b0b1bf
msgid "We can't possibly document everything that's new in 1.0, but the documentation will be your definitive guide. Anywhere you see something like:"
msgstr ""

#: ../../releases/1.0.txt:71
# 65bf2c75bb8447ba89ca7ec11659c4d2
msgid "You'll know that you're looking at something new or changed."
msgstr ""

#: ../../releases/1.0.txt:73
# adcdf3b864464d659d711bb4914d633d
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

#: ../../releases/1.0.txt:76
# 9a410087cb404741bc4789f8104ca047
msgid "Re-factored admin application"
msgstr ""

#: ../../releases/1.0.txt:78
#: ../../releases/1.0-alpha-1.txt:25
# 5be365b708ba4563b252cbdaf0a2ed91
# c3164c6c390148f3a1e18d65487c6a0d
msgid "The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions (no more ``class Admin`` declaration in models!), rewritten to use Django's new form-handling library (introduced in the 0.96 release as ``django.newforms``, and now available as simply ``django.forms``) and redesigned with extensibility and customization in mind. Full documentation for the admin application is available online in the official Django documentation:"
msgstr ""

#: ../../releases/1.0.txt:86
# e4496669c8264eca88af34e5f0899261
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

#: ../../releases/1.0.txt:89
# b683dc24ff954791b8503d6f71892d21
msgid "Improved Unicode handling"
msgstr ""

#: ../../releases/1.0.txt:91
# c30649502eb54bbf8ab8c28d0990cfe9
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation."
msgstr ""

#: ../../releases/1.0.txt:98
# 7cf4f46959d74c348a40eaf65e2fa0d8
msgid "See :doc:`/ref/unicode`."
msgstr ""

#: ../../releases/1.0.txt:101
# 036b3a62954a48d88de591acad992994
msgid "An improved ORM"
msgstr ""

#: ../../releases/1.0.txt:103
# df2a2014116d4a34925a4da92f8c6826
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

#: ../../releases/1.0.txt:115
# 71b262b79d9d4a02bbce3f178451ad6d
msgid "Automatic escaping of template variables"
msgstr ""

#: ../../releases/1.0.txt:117
#: ../../releases/1.0-alpha-1.txt:63
# 91152e5b4b7e4f6aa2aa6f8f1c3f9334
# d1cd8be27a844d759e426e61a9dca8c5
msgid "To provide improved security against cross-site scripting (XSS) vulnerabilities, Django's template system now automatically escapes the output of variables. This behavior is configurable, and allows both variables and larger template constructs to be marked as safe (requiring no escaping) or unsafe (requiring escaping). A full guide to this feature is in the documentation for the :ttag:`autoescape` tag."
msgstr ""

#: ../../releases/1.0.txt:125
# cb2979c99a7f45b28731892526c250b5
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr ""

#: ../../releases/1.0.txt:127
# 4ea617ed9ebe445197c5142eeaace1ba
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application. Its documentation is currently being maintained externally, and will be merged into the main Django documentation shortly. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0.txt:134
# 103eedca95bd4bd8919987333ab2d2db
msgid "See http://geodjango.org/ for details."
msgstr ""

#: ../../releases/1.0.txt:139
# 71f490a3bd044cfa87048e3eae0375c9
msgid "Pluggable file storage"
msgstr ""

#: ../../releases/1.0.txt:141
#: ../../releases/1.0-alpha-2.txt:36
# d705cc112fa543bc8d4ab16df480e2cd
# 2312588eabc84c08971b47010cb7c6e3
msgid "Django's built-in ``FileField`` and ``ImageField`` now can take advantage of pluggable file-storage backends, allowing extensive customization of where and how uploaded files get stored by Django. For details, see :doc:`the files documentation </topics/files>`; big thanks go to Marty Alchin for putting in the hard work to get this completed."
msgstr ""

#: ../../releases/1.0.txt:148
# 196815488f8b4645b22da1e01cbf6be1
msgid "Jython compatibility"
msgstr ""

#: ../../releases/1.0.txt:150
#: ../../releases/1.0-alpha-2.txt:43
# 0689a5c8ffb449bbbbd624068812a770
# 9c5166dfe82f465597db1be81b389979
msgid "Thanks to a lot of work from Leo Soto during a Google Summer of Code project, Django's codebase has been refactored to remove incompatibilities with `Jython`_, an implementation of Python written in Java, which runs Python code on the Java Virtual Machine. Django is now compatible with the forthcoming Jython 2.5 release."
msgstr ""

#: ../../releases/1.0.txt:156
# 5d58fc755a744cea8b09fbf1e0e83470
msgid "See :doc:`/howto/jython`."
msgstr ""

#: ../../releases/1.0.txt:161
# 8ca0edd87fc847418b8f936d8e094079
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../releases/1.0.txt:163
#: ../../releases/1.0-beta.txt:29
# cd36d07d6e684bcfbc505ccd44f5587e
# bd56ee476abb451eaac0706eb6b9cb9a
msgid "Classes are now included in ``django.contrib.contenttypes`` which can be used to support generic relations in both the admin interface and in end-user forms. See :ref:`the documentation for generic relations <generic-relations>` for details."
msgstr ""

#: ../../releases/1.0.txt:168
# 0646b8571fbd4ad78fd477d0cfee62c8
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

#: ../../releases/1.0.txt:170
# b10f917735a544fd99129b7f9fe50228
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation."
msgstr ""

#: ../../releases/1.0.txt:176
# dc7a4e1f3a9649259aee81347cdc3d0f
msgid "See :ref:`ref-models-force-insert` for details."
msgstr ""

#: ../../releases/1.0.txt:179
# 7ceb8c60f26d4fe9b87c09b4827e4ca3
msgid "Split ``CacheMiddleware``"
msgstr ""

#: ../../releases/1.0.txt:181
# f985da381cf5454f9d58bde9a8bdab26
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems."
msgstr ""

#: ../../releases/1.0.txt:188
# f58b007ad93248c99c9a1caf3b9f9f97
msgid "Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0.txt:192
# 043528ca8a0b4870a741175f1a9a5dec
msgid "Refactored ``django.contrib.comments``"
msgstr ""

#: ../../releases/1.0.txt:194
# 0a248dd026114e82ab60f17a4905a591
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as :doc:`an upgrade guide </ref/contrib/comments/upgrade>` if you were using the previous incarnation of the comments application."
msgstr ""

#: ../../releases/1.0.txt:202
# 3b5d760d01be4085863812c70b8edb81
msgid "Removal of deprecated features"
msgstr ""

#: ../../releases/1.0.txt:204
# 990d36b62b8742d3ac2d7c4e860ea23d
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

#: ../../releases/1.0.txt:214
# e0d84df64c01429abbc0ca371ffa2d79
msgid "Known issues"
msgstr ""

#: ../../releases/1.0.txt:216
# dd129d26bd3a4363938c3eee0a831723
msgid "We've done our best to make Django 1.0 as solid as possible, but unfortunately there are a couple of issues that we know about in the release."
msgstr ""

#: ../../releases/1.0.txt:220
# e32e474535b74bf8b76af9dbfd6d4b27
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

#: ../../releases/1.0.txt:222
# 12255eb2a9414d038363fa05e3dab8e8
msgid "If you're using :ref:`multiple table model inheritance <multi-table-inheritance>`, be aware of this caveat: child models using a custom ``parent_link`` and ``to_field`` will cause database integrity errors. A set of models like the following are **not valid**::"
msgstr ""

#: ../../releases/1.0.txt:235
# 2b61c1ff30064ee09e2b488ba739a933
msgid "This bug will be fixed in the next release of Django."
msgstr ""

#: ../../releases/1.0.txt:238
# d9c6ab7122de412a8d1b045118d92a0c
msgid "Caveats with support of certain databases"
msgstr ""

#: ../../releases/1.0.txt:240
# 888c65410cad4d9298fb81e4bfe038d0
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and in particular many of the supported database differ greatly from version to version. It's a good idea to checkout our :doc:`notes on supported database </ref/databases>`:"
msgstr ""

#: ../../releases/1.0.txt:243
# 2c306d0587154578b20c440d43d1a2ef
msgid ":ref:`mysql-notes`"
msgstr ""

#: ../../releases/1.0.txt:244
# 21386b27a3fa48d196545c45f67c56db
msgid ":ref:`sqlite-notes`"
msgstr ""

#: ../../releases/1.0.txt:245
# 46d177706a324aba89bbdd8f8afa65b3
msgid ":ref:`oracle-notes`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:3
# b3824f02302f46669486a65947dbbdbe
msgid "Django 1.0 alpha release notes"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:5
# ac4e0b1b2a51425daa201fb062b06ea4
msgid "Welcome to Django 1.0 alpha!"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:7
# 9b1f68f498934127b7bbd2cfc8efd8af
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This release is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:13
#: ../../releases/1.0-alpha-2.txt:13
# 69b7cfd9f3334eea9d1e774c2c718074
# b0992d1ffa084d94bcd0b88fe8538c52
msgid "As such, this release is *not* intended for production use, and any such use is strongly discouraged."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:18
# cc438fc711514418be2e08c361b0d226
msgid "What's new in Django 1.0 alpha"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:20
# f9f8d5d961524f5aaa4661d36d8cbbed
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. Some of the highlights include:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:35
# 51838d3a00964b1092c80efa42572a7f
msgid ":doc:`admin reference </ref/contrib/admin/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:38
# 1b79d98621ca44ff96e94aaf4b349f46
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:46
# 0741f7185a1044b6bc7b5b64d3a9e735
msgid ":doc:`unicode reference </ref/unicode>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:49
# affd3d66a5ca42a8aefc3b24b6b82597
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is available on the Django wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:60
# 16630b2347e74289bca8e5fa610c4dd9
msgid "https://code.djangoproject.com/wiki/QuerysetRefactorBranch"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:71
# 483f01f8e0e84a0c871314adffa57df6
msgid "There are many more new features, many bugfixes and many enhancements to existing features from previous releases. The ``newforms`` library, for example, has undergone massive improvements including several useful add-ons in ``django.contrib`` which complement and build on Django's form-handling capabilities, and Django's file-uploading handlers have been refactored to allow finer-grained control over the uploading process as well as streaming uploads of large files."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:79
# 5a9c3695f4ab4cb8913a830709398d4c
msgid "Along with these improvements and additions, we've made a number of of backwards-incompatible changes to the framework, as features have been fleshed out and APIs have been finalized for the 1.0 release. A complete guide to these changes will be available as part of the final Django 1.0 release, and a comprehensive list of backwards-incompatible changes is also available on the Django wiki for those who want to begin developing and testing their upgrade process:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:87
# 74986634f6d9436c8504a2fd8f0e3a2b
msgid "https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:91
#: ../../releases/1.0-alpha-2.txt:64
#: ../../releases/1.0-beta.txt:86
#: ../../releases/1.0-beta-2.txt:65
# 8d8e2d53b69c4921830739578cc5a0a9
# 7b04775a8c9440428f78813f35c52cf9
# 07b410b982934574a2a4577e8ec64531
# d0ccd01da239479ebc7653344d36b2dd
msgid "The Django 1.0 roadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:93
# eab6b08cab1b48bcb73c979b8cd7fe76
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of sprints building up to a series of beta releases and a release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:100
# c36f4361114d4286ab38bccf5c710dd8
msgid "August 1, 2008: Sprint (based in Washington, DC, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:102
# 6ce9dd316250416188e87b39de5b3a6d
msgid "August 5, 2008: Django 1.0 beta 1 release. This will also constitute the feature freeze for 1.0. Any feature to be included in 1.0 must be completed and in trunk by this time."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:106
# 0cfd48c1f5e347518df47e1c66e63cee
msgid "August 8, 2008: Sprint (based in Lawrence, KS, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:108
# 27e4194eb4df4fccbbc1a58cbfacd3af
msgid "August 12, 2008: Django 1.0 beta 2 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:110
# 8e858120b14c47e19ecf6518d902bc13
msgid "August 15, 2008: Sprint (based in Austin, TX, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:112
# 46a71558dfe2476993488f61bbbcfe65
msgid "August 19, 2008: Django 1.0 release candidate 1."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:114
# d716d0b022334c1692ba0fb7719f5947
msgid "August 22, 2008: Sprint (based in Portland, OR, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:116
# 086e38ec890443e293cd097252d98f64
msgid "August 26, 2008: Django 1.0 release candidate 2."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:118
# ab01ddaa9f5445d18823a35029584324
msgid "September 2, 2008: Django 1.0 final release. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, CA, September 6-7."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:122
#: ../../releases/1.0-alpha-2.txt:97
#: ../../releases/1.0-beta.txt:114
# 32e46acfa3564e4084ee193eca44d9d9
# be1cbef1da514527bed0bbf4c5875086
# e2e957548b7e4d7e9881fb3a43860246
msgid "Of course, like any estimated timeline, this is subject to change as requirements dictate. The latest information will always be available on the Django project wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:126
#: ../../releases/1.0-alpha-2.txt:101
#: ../../releases/1.0-beta.txt:118
# 6c8cda27016641efacbd426fd239795c
# 071492171b924cea8ff11fd43589dfc7
# 37b9453881624132be3602462e93bdca
msgid "https://code.djangoproject.com/wiki/VersionOneRoadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:130
#: ../../releases/1.0-alpha-2.txt:105
#: ../../releases/1.0-beta.txt:122
#: ../../releases/1.0-beta-2.txt:88
#: ../../releases/1.1-alpha-1.txt:129
#: ../../releases/1.1-beta-1.txt:174
#: ../../releases/1.1-rc-1.txt:78
#: ../../releases/1.2-alpha-1.txt:554
#: ../../releases/1.2-beta-1.txt:137
#: ../../releases/1.2-rc-1.txt:70
#: ../../releases/1.3-alpha-1.txt:368
#: ../../releases/1.3-beta-1.txt:204
#: ../../releases/1.4-alpha-1.txt:1090
#: ../../releases/1.4-beta-1.txt:1162
# d1359e22e57b4fe0b7074a0f0a381dc8
# f89a7220049f41678ac9d976a17f9f1d
# 2800d346369949aa9bbf523c68cb282b
# 781d8099556d43dc8ecff2c7ffc43ae0
# bb686f9e63e04faca634d9f050d44278
# e525ab1dd70b44c988d551b68cc5ba3a
# 27526568bd9b4b36afe1955d7dad2e6c
# 55e8dee7291d48a4b0b8c8f03bf6cd54
# 263a78af1d914a6fa51197b3affcc67c
# 7633eedf83a24adf9deda51e4781a84b
# ecf14ce23285419a994b6bb12db02f64
# 64a1d6a26f844c54b3504799283c62ea
# dabb21c38c6c43d69a4ab3aadac191b2
# 1cf4a8197e904947a2e3c303c3cf67be
msgid "What you can do to help"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:132
#: ../../releases/1.0-alpha-2.txt:107
# d9f61f50a87343afb8f7615909db77f7
# 774b811097bc46c7878c9ef54c1d6dc9
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:139
#: ../../releases/1.0-alpha-2.txt:114
#: ../../releases/1.0-beta.txt:131
#: ../../releases/1.0-beta-2.txt:97
#: ../../releases/1.1-alpha-1.txt:137
#: ../../releases/1.1-beta-1.txt:182
#: ../../releases/1.1-rc-1.txt:87
#: ../../releases/1.2-alpha-1.txt:562
#: ../../releases/1.2-beta-1.txt:146
#: ../../releases/1.2-rc-1.txt:79
#: ../../releases/1.3-alpha-1.txt:376
#: ../../releases/1.3-beta-1.txt:212
#: ../../releases/1.4-alpha-1.txt:1098
#: ../../releases/1.4-beta-1.txt:1170
# f3473eff3e414aaaa6f665e418574f54
# f2248b645b1247019fbf7418b6538fcf
# 36f1a32259174221af99500c4dcebc0a
# 2ece86d968574b97bd2c3ce0e845f832
# 3d0e5a8665624b298ea6bb70a8d6a9ad
# 20cf8d48a7984111a2c8056bc76492de
# 98e10d67c9554fa9861686c942adc512
# a8672ee91eca42eeb8e040dacfb578cf
# 5c20db0aa9cb4caaa4f9fab4f522d328
# eaf6cc3b72e44bc7a27808c6a45248f7
# 5d076e8ae47b4b39a6f07c13114c1734
# 3132ff8d51bc4dc7b6f5b0f52a4276d5
# baf7bcc3b3c94671a711627baea60a1a
# 20e3d6d9b9bb4d789c69cd74742c46aa
msgid "https://code.djangoproject.com/timeline"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:141
#: ../../releases/1.0-alpha-2.txt:116
#: ../../releases/1.0-beta.txt:133
#: ../../releases/1.0-beta-2.txt:99
#: ../../releases/1.1-alpha-1.txt:139
#: ../../releases/1.1-beta-1.txt:184
#: ../../releases/1.2-alpha-1.txt:564
#: ../../releases/1.2-beta-1.txt:148
#: ../../releases/1.3-alpha-1.txt:378
#: ../../releases/1.3-beta-1.txt:214
#: ../../releases/1.4-alpha-1.txt:1100
#: ../../releases/1.4-beta-1.txt:1172
# fdc40c45ad814842a1b214941ad2f32e
# b47721eba3924306b0086917698b44df
# be5326957504412eba5d221727c4e22d
# 1286161a5015475f8b983072ebe09b67
# 20fe07ed9e0c443b8df192fd6d092701
# 7cbb3184481e4c51add728d9401d9e68
# b584e3aeacf34ae8b7f50b34e9220e18
# 89aae06b951b4c0594aa2ccfc0493b71
# f3fb5287fe2c4578844d7cbba3434fbc
# 87907278353c422c9b3e3661e08a417c
# a9745794226a427fb462b4c42af4d52a
# ce1634f41879419d95bd7499059cfdc2
msgid "Please open new tickets if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:144
#: ../../releases/1.0-alpha-2.txt:119
#: ../../releases/1.0-beta.txt:136
#: ../../releases/1.0-beta-2.txt:102
# cf0e93dde0e749938e01868d04c9b643
# 97cfc9bce8a849338eeb6cf1029d0333
# 310502846deb44ae84fa63ed3d7ff116
# cc671bb7ef274b18b41965617c742e1f
msgid "Additionally, discussion of Django development, including progress toward the 1.0 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:148
#: ../../releases/1.0-alpha-2.txt:123
#: ../../releases/1.0-beta.txt:140
#: ../../releases/1.0-beta-2.txt:106
#: ../../releases/1.1.txt:449
#: ../../releases/1.1-alpha-1.txt:145
#: ../../releases/1.1-beta-1.txt:190
#: ../../releases/1.1-rc-1.txt:96
#: ../../releases/1.2-alpha-1.txt:570
#: ../../releases/1.2-beta-1.txt:155
#: ../../releases/1.2-rc-1.txt:88
#: ../../releases/1.3-alpha-1.txt:384
#: ../../releases/1.3-beta-1.txt:220
#: ../../releases/1.4-alpha-1.txt:1106
#: ../../releases/1.4-beta-1.txt:1178
# 05b49ccf91e747159a11e6ee211c760f
# fda0ce2800b04cf8a41fceb17dd0d735
# 93286e00ee0942b0ae9fa502ffc6c960
# cbe8c997fcc841e9ad7b812d7e1b59b4
# 36aca144a2c143ddb3eb4f068bc553f4
# 3a7a6f049b0847ce8946c4a1a6ab496e
# e3ca3186a7aa4cc99965bfded6674203
# 193203ce87d34659885a96d4332dac7a
# a702e250cdc74805925d6024ba5dc18d
# fb82bc2d599348c0bbbac12ad9f1069f
# 22a6d1572eec449eb4d2a662781f11b7
# 5ff83c9d08d74334a28c6ca67504b238
# 26e539873216405380971a20e70fb52d
# 2063f70ebde440a681ee15a0d96e0e74
# 3bc12927b4144d80b617ac3bbb3c17cb
msgid "http://groups.google.com/group/django-developers"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:150
#: ../../releases/1.0-alpha-2.txt:125
#: ../../releases/1.0-beta.txt:142
#: ../../releases/1.0-beta-2.txt:108
# c12d50b6f6a74723994b11fe412e9bea
# 004753cf3ef34be6b5b9485f44f6edb8
# 33338f54e3f64484b731d59c86d11d41
# e4c3502cbd8049e584a5f5c3d76be347
msgid "...and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:154
#: ../../releases/1.0-alpha-2.txt:129
#: ../../releases/1.0-beta.txt:146
#: ../../releases/1.0-beta-2.txt:112
#: ../../releases/1.1.txt:454
#: ../../releases/1.1-alpha-1.txt:151
#: ../../releases/1.1-beta-1.txt:196
#: ../../releases/1.1-rc-1.txt:102
#: ../../releases/1.2-alpha-1.txt:576
#: ../../releases/1.2-beta-1.txt:161
#: ../../releases/1.2-rc-1.txt:94
#: ../../releases/1.3-alpha-1.txt:390
#: ../../releases/1.3-beta-1.txt:226
#: ../../releases/1.4-alpha-1.txt:1112
#: ../../releases/1.4-beta-1.txt:1184
# d017c8eafcc74165bf91e2ea4d458967
# 58f7f68327b249279c5a9ff437d36cc3
# 8f3fd0438083476a9723dc4e8641498f
# 536d9ba057ed40cc8419da941595db8c
# f13563f3c91c4172a2da46acd1d7b065
# 6e166fcbf0c447e0b59e7cd57541a429
# 1f9ac144dbe24319a8345d08cc1c50e5
# cfc8d788ccc042e6aa3149f1fd7b9da5
# 490e7da2b8e341619e9b987438be9885
# 65b2cad91e0a44aa80ee3ef943b55cfb
# 338658ec6a5148bc96fbff0b873385c2
# aab77daa8e6d407db8b3ee46f4fb398a
# 15014df3ac30489c90cd9c97f8a1bd10
# e415c95b847446b79c1342af7e702bc9
# b0c136565bce40fa8d3028dd63fd4978
msgid "Django's online documentation also includes pointers on how to contribute to Django:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:157
#: ../../releases/1.0-alpha-2.txt:132
#: ../../releases/1.0-beta.txt:149
#: ../../releases/1.0-beta-2.txt:115
# 3af756fb562c4d5b9847467730a0fae5
# 5de5b7d19f5746248828a1cb24ede801
# 41e6f5d713b54f1b94a2da956f1ab9dc
# babc5ffb72074c6086268334cee4b804
msgid ":doc:`contributing to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:159
#: ../../releases/1.0-alpha-2.txt:134
#: ../../releases/1.0-beta.txt:151
#: ../../releases/1.0-beta-2.txt:117
#: ../../releases/1.1.txt:459
#: ../../releases/1.1-alpha-1.txt:156
#: ../../releases/1.1-beta-1.txt:201
#: ../../releases/1.1-rc-1.txt:107
#: ../../releases/1.2-alpha-1.txt:581
#: ../../releases/1.2-beta-1.txt:166
#: ../../releases/1.2-rc-1.txt:99
#: ../../releases/1.3-alpha-1.txt:395
#: ../../releases/1.3-beta-1.txt:231
#: ../../releases/1.4-alpha-1.txt:1117
#: ../../releases/1.4-beta-1.txt:1189
# 09a279517df84feeaa8ae5a24bdbb42e
# 5b02f22566bd438fbe04d95e193478ee
# 45d04c5cb14b4ec3ad9a3ddb98221f76
# 4dd49c70d3e240189c16a46681207647
# 4ccdb7425c2341848f0bff1a5c4f0827
# 6dce3a0730c74f75b776fef47f210b29
# e0b9269ff0634ffc954149742853e04a
# 93b82b72119e48f8801f42dc44ddd769
# 6d0f13530101405ab055b35db159ddc3
# 0d85a52fea044fbab9ead4deef962eef
# c1d230d735494bb4bff0d8f99ac4edfb
# c8e04810dfb84bc4b9e78b560fc81215
# 816cf161d2674bf5be5262b94e9b9ed1
# e618936794cc428aa2639f4eea8d6df6
# f79ee13627514705ac2ef98382be8136
msgid "Contributions on any level -- developing code, writing documentation or simply triaging tickets and helping to test proposed bugfixes -- are always welcome and appreciated."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:3
# a8b90efde3b94143a73ba3c90c08abd0
msgid "Django 1.0 alpha 2 release notes"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:5
# ad450587434a41c2bdcd5a9c7d843be8
msgid "Welcome to Django 1.0 alpha 2!"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:7
# f69357d9a7a94328b641b3d04dac5a9f
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:18
# cf6f22c852774d299a7004081552256a
msgid "What's new in Django 1.0 alpha 2"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:20
# 2a2f9cc45fef4dce90f15bfba73acd6c
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. Since the 1.0 alpha 1 release several new features have landed, including:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:27
# 164ee08c1efe46a08a9a4eef4a6b6a5b
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application.  `Its documentation`_ is currently being maintained externally, and will be merged into the main Django documentation prior to the final 1.0 release. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:50
# cbcdc529e62449ed9a2aaf75fac757c1
msgid "There are many other new features and improvements in this release, including two major performance boosts: strings marked for translation using :doc:`Django's internationalization system </topics/i18n/index>` now consume far less memory, and Django's internal dispatcher -- which is invoked frequently during request/response processing and when working with Django's object-relational mapper -- is now significantly faster."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:66
# a2006230c11d4e0eb941832453d4fc19
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the beta and release-candidate stages, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:73
# c501b811d71c477491a1038fa447d422
msgid "**August 14, 2008: Django 1.0 beta release.** Past this point Django will be in a \"feature freeze\" for the 1.0 release; after Django 1.0 beta, the development focus will be solely on bug fixes and stabilization."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:78
#: ../../releases/1.0-beta.txt:95
# 801f53d91abd492c96610f9ccd140699
# 234e51aeb25a474a8a0f5b607d12905e
msgid "August 15, 2008: Sprint (based in Austin, Texas, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:80
#: ../../releases/1.0-beta.txt:97
# a3f23d8b0339454889f99d27f273f680
# a984b443bbe54af7b6edb293d662e660
msgid "August 17, 2008: Sprint (based in Tel Aviv, Israel, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:82
#: ../../releases/1.0-beta.txt:99
# c5804f34e37e482cbd6eb88323cab4ff
# e8cc8ba7569f4ffea3dc4d0e12c68493
msgid "**August 21, 2008: Django 1.0 release candidate 1.** At this point, all strings marked for translation within Django's codebase will be frozen, to provide contributors time to check and finalize all of Django's bundled translation files prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:87
#: ../../releases/1.0-beta.txt:104
# 84a1311a6e3a42878bd1688c8de82a13
# 7d069fce8f67404788af73a74d99adf4
msgid "August 22, 2008: Sprint (based in Portland, Oregon, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:89
#: ../../releases/1.0-beta.txt:106
# aa3fd0e28243462d9084a8ed6588a8a3
# 75292888ba154787bfc12ba4ed18077f
msgid "**August 26, 2008: Django 1.0 release candidate 2.**"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:91
#: ../../releases/1.0-beta.txt:108
# e1398bcb913640f9a63f095fba611a65
# f6e01614283c475abfd3ee041bc3e378
msgid "August 30, 2008: Sprint (based in London, England, UK, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:93
#: ../../releases/1.0-beta.txt:110
# 5df60c99f0574ea5913b4b8f0ec4cab8
# 3f226b17bb7c49049aa939e7159e5969
msgid "**September 2, 2008: Django 1.0 final release.** The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-beta.txt:3
# ac6ec03d8d1948cb9de94abe6a85c6cc
msgid "Django 1.0 beta 1 release notes"
msgstr ""

#: ../../releases/1.0-beta.txt:5
# 648f89cc00014955bca6e4761fdc1d04
msgid "Welcome to Django 1.0 beta 1!"
msgstr ""

#: ../../releases/1.0-beta.txt:7
# e17d4c7052554606b8add0afb814d4c6
msgid "This is the third in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta.txt:13
#: ../../releases/1.0-beta-2.txt:13
#: ../../releases/1.1-alpha-1.txt:15
#: ../../releases/1.1-beta-1.txt:15
#: ../../releases/1.2-alpha-1.txt:15
#: ../../releases/1.2-beta-1.txt:16
#: ../../releases/1.3-alpha-1.txt:15
#: ../../releases/1.3-beta-1.txt:13
#: ../../releases/1.4-alpha-1.txt:15
#: ../../releases/1.4-beta-1.txt:15
# 33769c5c027d4a5abe37bee6ca93b4a2
# e4343cbc017c458e9180fe7193d12585
# 0d932234e98e4f06a6f2b0e6e8ef63e9
# c8f1d75ac0144998b08efdee48673561
# 01452ecd929a432d8646563ed6ae8dfa
# 4013380f6b5044d1bc0e6d41fdaf469a
# d2e92df2bd7e4228ada57f610b8577e1
# 33b18e1326054a23a8f124a078095528
# 00705f76dac244d4b2b7bd06a74633d2
# b351813796d54a21ae39d33f632c871a
msgid "As such, this release is *not* intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.0-beta.txt:17
# 92b58501905b483c9c3941f9ed1e6bcd
msgid "What's new in Django 1.0 beta 1"
msgstr ""

#: ../../releases/1.0-beta.txt:19
# bf197aac905b46af91f811930dbf8b5a
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`."
msgstr ""

#: ../../releases/1.0-beta.txt:25
# b8bb69d8ece54113914d98990ac9bc14
msgid "This beta release does not contain any major new features, but does include several smaller updates and improvements to Django:"
msgstr ""

#: ../../releases/1.0-beta.txt:35
# 0e04bd8327214ce1a32c6b586685284b
msgid "Following up on the refactoring of Django's administrative interface (``django.contrib.admin``), introduced in Django 1.0 alpha 1, two new hooks have been added to allow customized pre- and post-save handling of model instances in the admin. Full details are in :doc:`the admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-beta.txt:42
# e5916fbbc0e940c59dde663660e179a8
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation. Consult the database API documentation for details and important notes about appropriate use of this parameter."
msgstr ""

#: ../../releases/1.0-beta.txt:52
# fdbc6d96da9c44eda3110d280a70a75a
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems. Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0-beta.txt:63
# 01069b089ec54e3ea5630d1e5d658439
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases. A full list of these and all other backwards-incompatible changes is available on `the Django wiki`_."
msgstr ""

#: ../../releases/1.0-beta.txt:75
# 598675865fea46c8b059161575f143aa
msgid "A number of other improvements and bugfixes have also been included: some tricky cases involving case-sensitivity in differing MySQL collations have been resolved, Windows packaging and installation has been improved and the method by which Django generates unique session identifiers has been made much more robust."
msgstr ""

#: ../../releases/1.0-beta.txt:88
# 70759e1f4eb642d2902a904e169f2106
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-beta.txt:124
#: ../../releases/1.0-beta-2.txt:90
# a5ec3517b1724803a857454b4365e9db
# 99e36b1121c14895978217483422cd86
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:3
# 48601ae998934decb53a9420996eb570
msgid "Django 1.0 beta 2 release notes"
msgstr ""

#: ../../releases/1.0-beta-2.txt:5
# 9a1c85dfe8dd431dafcd86f113e3c5d4
msgid "Welcome to Django 1.0 beta 2!"
msgstr ""

#: ../../releases/1.0-beta-2.txt:7
# 8f737f2ab586479cbeb5b7add6101dd1
msgid "This is the fourth in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta-2.txt:17
# 83b7618490d44a00ab71128fa80b4b7e
msgid "What's new in Django 1.0 beta 2"
msgstr ""

#: ../../releases/1.0-beta-2.txt:19
# 55c52f4447f6440c98510bcc2bf400f5
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release.  For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`. For features which were new as of Django 1.0 beta 1, see :doc:`the 1.0 beta 1 release notes </releases/1.0-beta>`."
msgstr ""

#: ../../releases/1.0-beta-2.txt:28
# 6397664c79e9408f9151e2636e921816
msgid "This beta release includes two major features:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:31
# 813d2d42438448c68e6311220fc45129
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as :doc:`an upgrade guide </ref/contrib/comments/upgrade>` if you were using the previous incarnation of the comments application.."
msgstr ""

#: ../../releases/1.0-beta-2.txt:40
# 9f9ba43872e54768bb40fa30acaedcc8
msgid "Django's bundled and online documentation has also been significantly refactored; the new documentation system uses `Sphinx`_ to build the docs and handle such niceties as topical indexes, reference documentation and cross-references within the docs. You can check out the new documentation `online`_ or, if you have Sphinx installed, build the HTML yourself from the documentation files bundled with Django."
msgstr ""

#: ../../releases/1.0-beta-2.txt:51
# 276c5a52a45a4d76a487daf66edb5001
msgid "Along with these new features, the Django team has also been hard at work polishing Django's codebase for the final 1.0 release; this beta release contains a large number of smaller improvements and bugfixes from the ongoing push to 1.0."
msgstr ""

#: ../../releases/1.0-beta-2.txt:56
# 7e2cd4267a9f481c85b5e21a6ccb5038
msgid "Also, as part of its ongoing deprecation process, Django's old form-handling system has been removed; this means ``django.oldforms`` no longer exists, and its various API hooks (such as automatic manipulators) are no longer present in Django. This system has been completely replaced by :doc:`the new form-handling system </topics/forms/index>` in ``django.forms``."
msgstr ""

#: ../../releases/1.0-beta-2.txt:67
# e1cd7b5c91a044798b62dba5ef753797
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. As of this beta release, Django is in its final \"feature freeze\" for 1.0; feature requests will be deferred to later releases, and the development effort will be focused solely on bug-fixing and stability. Django is also now in a \"string freeze\"; translatable strings (labels, error messages, etc.) in Django's codebase will not be changed prior to the release, in order to allow our translators to produce the final 1.0 version of Django's translation files."
msgstr ""

#: ../../releases/1.0-beta-2.txt:78
# b32dca5e87f6485984cd191cc2cbb41a
msgid "Following this release, we'll be conducting a final development sprint on August 30, 2008, based in London and coordinated online; the goal of this sprint will be to squash as many bugs as possible in anticipation of the final 1.0 release, which is currently targeted for **September 2, 2008**. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:3
# 9ae5e8e68e5942388c91a2c1e6aec3fd
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:7
# ab160d1d491b429ca0c13b14f937f69c
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:9
# 221ec9445b204a43ba0625184df460a6
msgid "This guide will help you port 0.96 projects and apps to 1.0. The first part of this document includes the common changes needed to run with 1.0. If after going through the first part your code still breaks, check the section `Less-common Changes`_ for a list of a bunch of less-common compatibility issues."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:16
# 92f0b1a2d19b48059eedb5ea79db58d6
msgid "The :doc:`1.0 release notes </releases/1.0>`. That document explains the new features in 1.0 more deeply; the porting guide is more concerned with helping you quickly update your code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:21
# 56100368c03e41bea14b51fb7f5f9810
msgid "Common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:23
# 3523ccdc6364422c8c1b394e72276914
msgid "This section describes the changes between 0.96 and 1.0 that most users will need to make."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:27
# e1851d6bd71845dbbab2b81f51768dd0
msgid "Use Unicode"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:29
# f020340a66604daea28cc1cab51511ee
msgid "Change string literals (``'foo'``) into Unicode literals (``u'foo'``). Django now uses Unicode strings throughout. In most places, raw strings will continue to work, but updating to use Unicode literals will prevent some obscure problems."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:34
# 131cf3f9bc4048cfa925a836d42414d5
msgid "See :doc:`/ref/unicode` for full details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:37
# 5bb1817e8c964e8a98b89bca9c7f0797
msgid "Models"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:39
# c6e73bb4d5584d31ab179e15901a80cd
msgid "Common changes to your models file:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:42
# 8db1b918d276488cb7772945355611ea
msgid "Rename ``maxlength`` to ``max_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:44
# 288ae663bf1b41d8be8293f548bf9bd0
msgid "Rename your ``maxlength`` argument to ``max_length`` (this was changed to be consistent with form fields):"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:48
# 9fc21b3956a046e2b9543364968a0f30
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:50
# 5583d7184a334ffe988cd58d8f999767
msgid "Replace your model's ``__str__`` function with a ``__unicode__`` method, and make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:54
# b1f7262aa94b45a4a84efd518be3d906
msgid "Remove ``prepopulated_from``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:56
# 48fb4165e84742df8bb5ed749691ef4e
msgid "Remove the ``prepopulated_from`` argument on model fields. It's no longer valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See `the admin`_, below, for more details about changes to the admin."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:61
# aacecf14cc9f4dbfb64b7644da8cc3ea
msgid "Remove ``core``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:63
# bbf175de44ab4da7af08ee278487327d
msgid "Remove the ``core`` argument from your model fields. It is no longer necessary, since the equivalent functionality (part of :ref:`inline editing <admin-inlines>`) is handled differently by the admin interface now. You don't have to worry about inline editing until you get to `the admin`_ section, below. For now, remove all references to ``core``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:70
# 532c3962aa824a4dabb570152a2773c2
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:72
# b1922b9779f6460ebbf719a7dc3ddcff
msgid "Remove all your inner ``class Admin`` declarations from your models. They won't break anything if you leave them, but they also won't do anything. To register apps with the admin you'll move those declarations to an ``admin.py`` file; see `the admin`_ below for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:79
# 2f1cb53ab05541ad8368270136c5369a
msgid "A contributor to djangosnippets__ has written a script that'll `scan your models.py and generate a corresponding admin.py`__."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:86
# 27c34fc6228740a5b999f39c010ce10c
msgid "Example"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:88
# a56e93edb82a47718e9683cc1b5a4f6c
msgid "Below is an example ``models.py`` file with all the changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:90
# 27448edd69cf42f4928ee78798fd2339
msgid "Old (0.96) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:103
# 10450c1dc1f44f51b9d303d5068a5c2e
msgid "New (1.0) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:113
# 3e96cc05edc24c668bd179c62fe7fe55
msgid "New (1.0) ``admin.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:127
# f24e2202496946d59da7f2d0e68a7ba6
msgid "The Admin"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:129
# 4f64d28e379f407d8118912735481069
msgid "One of the biggest changes in 1.0 is the new admin. The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions, the framework has been rewritten to use Django's new form-handling library and redesigned with extensibility and customization in mind."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:135
# 3b78c6f451144da2a955587a47351bfa
msgid "Practically, this means you'll need to rewrite all of your ``class Admin`` declarations. You've already seen in `models`_ above how to replace your ``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` file. Below are some more details on how to rewrite that ``Admin`` declaration into the new syntax."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:142
# 8d99ee13ad444413846c0d88b69af655
msgid "Use new inline syntax"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:144
# 3978673c9e8c4a72987ac5c34fbc1535
msgid "The new ``edit_inline`` options have all been moved to ``admin.py``. Here's an example:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:147
#: ../../releases/1.0-porting-guide.txt:176
#: ../../releases/1.0-porting-guide.txt:482
#: ../../releases/1.0-porting-guide.txt:504
#: ../../releases/1.0-porting-guide.txt:521
#: ../../releases/1.0-porting-guide.txt:647
# cbbca6c3718f4770b6dbfac6b11b2200
# 2259ecd08de342f7974cc0944c76731f
# 2db65353ba424cdb838c8a0f7639e787
# 4a19dfd1197c4a9ca5883d1ad222bfc4
# 0aa99c45d0aa48eb9544c1c5a0c54391
# ed835d002fce4992a249e7e3649c43a5
msgid "Old (0.96)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:156
#: ../../releases/1.0-porting-guide.txt:196
#: ../../releases/1.0-porting-guide.txt:489
#: ../../releases/1.0-porting-guide.txt:510
#: ../../releases/1.0-porting-guide.txt:527
#: ../../releases/1.0-porting-guide.txt:653
# 9843877a552445a09bd36aa24317726a
# 497132f5f6ba46c58277a2898b3f4322
# d5a595ea32f14681a4a0c00be3d67ccb
# 7c9b36399e23490ea6ebf5e551b062d8
# 1c0c34c26dce49ce91170e752c7e0c53
# 00d1178a222d454ab30f2a46c37d4494
msgid "New (1.0)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:168
# 4bc4cecf5ffe4ae28b4e5eb29f8419a5
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:171
# c36a921543a949a78013d7a9a0b9a704
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:173
# e6000974d76e444d804acacc475e072c
msgid "The old ``fields`` syntax was quite confusing, and has been simplified. The old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:210
# e81b65154d5744ca9b4dd65bf81b69d8
msgid "More detailed information about the changes and the reasons behind them can be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:213
# caf9f6944d4d49fc9ef4a708bf408418
msgid "The new admin comes with a ton of new features; you can read about them in the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:219
# c7382169099b41f0bc66a7b95c712657
msgid "URLs"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:222
# add19af4388349d8923ddbbdf8f72b8d
msgid "Update your root ``urls.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:224
# 5c1b42a97d7a4dceaff4923ca334567d
msgid "If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:226
# a667083eaacb47fb99a01faf5cf197c5
msgid "Old (0.96) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:236
# 5918f47b1dc148afa20912009596d369
msgid "New (1.0) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:251
# 7c297e4e65f444a892e0b781665a92ce
msgid "Views"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:254
# 3ebedce013f947d190d0f53bc87b8937
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:256
# 0f8f0e5a1e2b4a4aaee3c284cbb9f740
msgid "Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the ``newforms`` module (introduced in 0.96) to plain old ``forms``. The ``oldforms`` module was also removed."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:260
# 3b611676ccf4483badac1955598bd48d
msgid "If you're already using the ``newforms`` library, and you used our recommended ``import`` statement syntax, all you have to do is change your import statements."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:264
# acaa91101d054108a106c16d39c9946d
msgid "Old::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:268
# f17ca421ca29477fa5738ce873ee4553
msgid "New::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:272
# 952ae2ecd48a4a1f849b2c4ed4a94c4a
msgid "If you're using the old forms system (formerly known as ``django.forms`` and ``django.oldforms``), you'll have to rewrite your forms. A good place to start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:277
# 3f2bcd966c6a4a4d9c0a165bf2ed1791
msgid "Handle uploaded files using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:279
# 1cbd3455dcb54e5296e19388fd8bdd45
msgid "Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as simple dictionaries with the new :class:`~django.core.files.UploadedFile`. The old dictionary syntax no longer works."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:283
# 90654e93ec0f4acd92fa60b5c350bfff
msgid "Thus, in a view like::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:289
# 188d1839ad99496190de08b28fec5e7b
msgid "...you'd need to make the following changes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:292
#: ../../releases/1.0-porting-guide.txt:309
#: ../../releases/1.0-porting-guide.txt:381
#: ../../releases/1.0-porting-guide.txt:739
# c0a79141450d4837a0d48763548196cf
# 76e36e437dce43aa9061bea390cd653f
# aae3bb6047e84889b2e6874bc0eea6fb
# dde5a984c7ed4d3e93614b767c3b18ee
msgid "Old (0.96)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:292
#: ../../releases/1.0-porting-guide.txt:309
#: ../../releases/1.0-porting-guide.txt:381
#: ../../releases/1.0-porting-guide.txt:739
# b8c8c9e450df4eaead50b18f0968dbdb
# 0f36678a7720451d9b80aa33aae010e7
# 1f47260ad5fe441a8d014f19c7fe9ef3
# 93a68358c10a4b338981ea7618a789a7
msgid "New (1.0)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:294
# eb31c6b4fd8d450aa3927b77bf5d55f6
msgid "``f['content']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:294
# 4269ce93af0a416baf4d8cf4b5dfd8cd
msgid "``f.read()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# d88aab7e067c4420a8215edb088b5f8f
msgid "``f['filename']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# 53ff2cb1182b4477b701e105ff3485a2
msgid "``f.name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# 472d682ccc8b45bb9e6f72ec71ec89ae
msgid "``f['content-type']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# 5752487c48a64e04b982e26da110f0a1
msgid "``f.content_type``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:300
# 93da6954f7c641168ff328a3961cf190
msgid "Work with file fields using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:302
# 4306a7034d8a4c08842bb80f1744e50a
msgid "The internal implementation of :class:`django.db.models.FileField` have changed. A visible result of this is that the way you access special attributes (URL, filename, image size, etc) of these model fields has changed. You will need to make the following changes, assuming your model's :class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:311
# e1200ab48e124533a065dc8c64f586d0
msgid "``myfile.get_content_filename()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:311
# 832d05bdcf324cda8348fb0b0c1c0fd1
msgid "``myfile.content.path``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 1da59ac2e51540c5ba1b085e64574188
msgid "``myfile.get_content_url()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 2d171b83d16242979cbcb7bffb6e42a9
msgid "``myfile.content.url``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# ec79300b5732438c909402de68d96411
msgid "``myfile.get_content_size()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# 951d42c9a0c8439ca633b85e39c5ef3e
msgid "``myfile.content.size``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# c983d98198c048daac1d1a7e819b4bfc
msgid "``myfile.save_content_file()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# a378226450364d3cab330971477d4f27
msgid "``myfile.content.save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# be7e1d7f22ce4675bfd61e114cdf152c
msgid "``myfile.get_content_width()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# 275368cefc224b5a91e911f5743ad1e2
msgid "``myfile.content.width``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# 1a3192bf87744a0d86fe4631c29fe569
msgid "``myfile.get_content_height()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# b72962fe92c04723a712c68e1693d11d
msgid "``myfile.content.height``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:319
# 6b9f9c54cafa4ad0892426d148044c72
msgid "Note that the ``width`` and ``height`` attributes only make sense for :class:`~django.db.models.ImageField` fields. More details can be found in the :doc:`model API </ref/models/fields>` documentation."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:324
# bddb4a636685485ca195b2c9b715b4fe
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:326
# 82a42c7b786c48ff88b3faa63182a20f
msgid "The ``ObjectPaginator`` in 0.96 has been removed and replaced with an improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:330
# a86883a398634ab89ae662227d8792b3
msgid "Templates"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:333
# a1f54bef54f44fe889e9d5ba15788b6a
msgid "Learn to love autoescaping"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:335
# 18bd59bafe55440a9cf5ab34b44deeff
msgid "By default, the template system now automatically HTML-escapes the output of every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:338
# 3349214bab944902b30635c4f1fd45ac
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:346
# 2e74f5d7d21e42fa9c0b6231ada5488b
msgid "To disable auto-escaping for an entire template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:356
# df573a243eab447891e500d857414e4a
msgid "Less-common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:358
# 6b9492f5ed524b119a7103f88558df85
msgid "The following changes are smaller, more localized changes. They should only affect more advanced users, but it's probably worth reading through the list and checking your code for these things."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:363
# 20ad1c4bcd7b460ca41fa6c2cd53b8f5
msgid "Signals"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:365
# b45955a9424f490883bc8f87fc6705c8
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:367
# a8f8398d62854fcb9832892c7c2fdc5e
msgid "Connect, disconnect, and send signals via methods on the :class:`~django.dispatch.Signal` object instead of through module methods in ``django.dispatch.dispatcher``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:371
# 6e8ca96bde574a84bfdb291cfba17b38
msgid "Remove any use of the ``Anonymous`` and ``Any`` sender options; they no longer exist. You can still receive signals sent by any sender by using ``sender=None``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:375
# a11b1b162c4443c087fbbd6cd49cd90b
msgid "Make any custom signals you've declared into instances of :class:`django.dispatch.Signal` instead of anonymous objects."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:378
# 5934a1e1aeb546078fc4cb837be51ca8
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:383
# 28d3a7d72f40436dba8f8a0f76ab70c7
msgid "``def callback(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:383
# 10edac51be5f4b3483180016379c67ef
msgid "``def callback(sender, **kwargs)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# e5d7a4a782db4c10bea1fb38a4f2ee20
msgid "``sig = object()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# 9c21a3e3e171473ebfef113708ee872f
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# b03eca89b1bf453bb28d39a32599215a
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# 743c2893b8444ee1b72d04466c7db6ac
msgid "``sig.connect(callback)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 16bcac1762fb49368b3009f2ee9e9acf
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 3d2f99c3811d4e0ba629dacf797cf0f6
msgid "``sig.send(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# 728bba78a9424203a4769b4fc9c6dd8b
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# 3e41f839ab79470796834d65b4f8d071
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:391
# 4a457b7cc62b410baf54344cb6c448d3
msgid "Comments"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:393
# fa7d88b9e9124125a6c8ad5d8197f1dc
msgid "If you were using Django 0.96's ``django.contrib.comments`` app, you'll need to upgrade to the new comments app introduced in 1.0. See :doc:`/ref/contrib/comments/upgrade` for details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:398
# 7f5ee99e08454247b1714bf348a6899d
msgid "Template tags"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:401
# 23f39d0ade724c42bfa789350f3f603f
msgid ":ttag:`spaceless` tag"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:403
# 5e059269c50643d7b7e165aac0f49757
msgid "The spaceless template tag now removes *all* spaces between HTML tags, instead of preserving a single space."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:407
# 0a31f3a1053948aebbd98d1ee643c80b
msgid "Local flavors"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:410
# 2a77e0bdbc474b39940bfab392a8b69e
msgid "U.S. local flavor"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:412
# 91ab9e1e5f9042afb842dee64c3c7477
msgid "``django.contrib.localflavor.usa`` has been renamed to :mod:`django.contrib.localflavor.us`. This change was made to match the naming scheme of other local flavors. To migrate your code, all you need to do is change the imports."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:418
# b929365d8a2d44c3b801c29ebd1a7ee3
msgid "Sessions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:421
# 8bfd1a342735496f9874dff13476aad7
msgid "Getting a new session key"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:423
# 50f869680bda43b592fff4ab2ef9d791
msgid "``SessionBase.get_new_session_key()`` has been renamed to ``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:427
# ebc31b8917d54e738a7ddf0c985615f1
msgid "Fixtures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:430
# f3519bb59f004dee8049a8e3aaaddbd6
msgid "Loading a row no longer calls ``save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:432
# 9e18746ee0ed40d2be5f1cd448d2f8b0
msgid "Previously, loading a row automatically ran the model's ``save()`` method. This is no longer the case, so any fields (for example: timestamps) that were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:437
# 7f5285cb5f334caa9026a3bb94fecf1a
msgid "Settings"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:440
# b6979c873829440eb58c078042c599e1
msgid "Better exceptions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:442
# aae6631c983f428cbcad6b9ef0fd26ba
msgid "The old :exc:`EnvironmentError` has split into an :exc:`ImportError` when Django fails to find the settings module and a :exc:`RuntimeError` when you try to reconfigure settings after having already used them"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:447
# 6ff97c4d2dd54ee486e63efe62ada7a4
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:449
# c8f7d71e82c949459170b67d33d47f6c
msgid "The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into the ``settings`` module. Instead of using ``from django.contrib.auth import LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:454
# 84023adbe18e4e3ba174c3acc6826137
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:456
# b961e059ea55421cacdfdec4c78568f9
msgid "In 0.96, if a URL didn't end in a slash or have a period in the final component of its path, and :setting:`APPEND_SLASH` was True, Django would redirect to the same URL, but with a slash appended to the end. Now, Django checks to see whether the pattern without the trailing slash would be matched by something in your URL patterns. If so, no redirection takes place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:463
# 3602c11db85049b4ad1696156e1f7364
msgid "For most people, this won't require any changes. Some people, though, have URL patterns that look like this::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:468
# a9f756ee604a42f8bcb722cea588d360
msgid "Previously, those patterns would have been redirected to have a trailing slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:474
# 5dda2e5b52a9425fb7b6b4b39d949cbc
msgid "Smaller model changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:477
# 7a8ff46616e0455baf9a4844c89dcf9b
msgid "Different exception from ``get()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:479
# 2f6875d96a014fa093e63cde11c050d0
msgid "Managers now return a :exc:`MultipleObjectsReturned` exception instead of :exc:`AssertionError`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:497
# 80bf9aeec9e3473da3baa27199dae670
msgid "``LazyDate`` has been fired"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:499
# 1701665b2b864edd8311cacf98910884
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:501
# f39c23877810465db07297f23cd877cb
msgid "Default field values and query arguments can both be callable objects, so instances of ``LazyDate`` can be replaced with a reference to ``datetime.datetime.now``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:519
# d7887892ffaa4553b44de545a6d44c81
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:533
# 5eb004f03dbd41fb8146c0cb6948aa13
msgid "If you forget to make this change, you will see errors about ``FloatField`` not taking a ``max_digits`` attribute in ``__init__``, because the new ``FloatField`` takes no precision-related arguments."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:537
# dce91242ea4c42a3a296046583c7d182
msgid "If you're using MySQL or PostgreSQL, no further changes are needed. The database column types for ``DecimalField`` are the same as for the old ``FloatField``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:541
# 4de6f1a4e13c4deb9c6c7ee4eaee2122
msgid "If you're using SQLite, you need to force the database to view the appropriate columns as decimal types, rather than floats. To do this, you'll need to reload your data. Do this after you have made the change to using ``DecimalField`` in your code and updated the Django code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:548
# ab9613f1a7cf4ef1bb6574579f9d224a
msgid "**Back up your database first!**"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:550
# e9911dbff4a844d3b59ba3e62ec9743b
msgid "For SQLite, this means making a copy of the single file that stores the database (the name of that file is the :setting:`DATABASE_NAME` in your settings.py file)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:554
# 095312201f7340e899377813f470c146
msgid "To upgrade each application to use a ``DecimalField``, you can do the following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:563
# 67f33063be234448b54073281d238814
msgid "Notes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:565
# df2059c1db7f4507891623f8f051ee75
msgid "It's important that you remember to use XML format in the first step of this process. We are exploiting a feature of the XML data dumps that makes porting floats to decimals with SQLite possible."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:569
# d6cf15f93ca540ccb9ea1fada76cafc0
msgid "In the second step you will be asked to confirm that you are prepared to lose the data for the application(s) in question. Say yes; we'll restore this data in the third step, of course."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:573
# ca75064e80c641d9b3ec295312059193
msgid "``DecimalField`` is not used in any of the apps shipped with Django prior to this change being made, so you do not need to worry about performing this procedure for any of the standard Django models."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:577
# 642c9ce4b00846319467da58c2f8d979
msgid "If something goes wrong in the above process, just copy your backed up database file over the original file and start again."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:581
# 3d5a3997ea97415c888119e47e09f00e
msgid "Internationalization"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:584
# 148424968d164593834873706f00dc38
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:586
# fe08a62c7aea4d8588413739010b4282
msgid "Previously, a GET request was used. The old behavior meant that state (the locale used to display the site) could be changed by a GET request, which is against the HTTP specification's recommendations. Code calling this view must ensure that a POST request is now made, instead of a GET. This means you can no longer use a link to access the view, but must use a form submission of some kind (e.g. a button)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:594
# a65e46fb6c394620b5e1dce8919594ae
msgid "``_()`` is no longer in builtins"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:596
# 85fe2c5ae2c243c98d5b04ad492b21b3
msgid "``_()`` (the callable object whose name is a single underscore) is no longer monkeypatched into builtins -- that is, it's no longer available magically in every module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:600
# 5dabe2e9b60545f78e089de5fc915615
msgid "If you were previously relying on ``_()`` always being present, you should now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and alias it to ``_`` yourself::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:607
# 4e846597de09452ea3d5752ade958fd2
msgid "HTTP request/response objects"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:610
# f2547449b87b42d09e7236303dc24e60
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:612
# 8bdbb0252d764bf5827ab9b333ebb3eb
msgid "``HttpRequest`` objects no longer directly support dictionary-style access; previously, both ``GET`` and ``POST`` data were directly available on the ``HttpRequest`` object (e.g., you could check for a piece of form data by using ``if 'some_form_key' in request`` or by reading ``request['some_form_key']``. This is no longer supported; if you need access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:620
# dce95de7dd904cac943414033928f5bb
msgid "It is strongly suggested, however, that you always explicitly look in the appropriate dictionary for the type of request you expect to receive (``request.GET`` or ``request.POST``); relying on the combined ``request.REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:626
# 244702d9f161430e911dc8f5406439b4
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:628
# 3c237592c32147f897e8f8f462708527
msgid "``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and :class:`~django.http.HttpResponse` now supports containment checking directly. So use ``if header in response:`` instead of ``if header in response.headers:``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:633
# 3e099ec038c14e5c9d11ed9642400ca7
msgid "Generic relations"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:636
# b53924a03b06415cbaa03e0be12b0423
msgid "Generic relations have been moved out of core"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:638
# 006ab8d76c9f4f5a9b2e828ddfc80f8d
msgid "The generic relation classes -- ``GenericForeignKey`` and ``GenericRelation`` -- have moved into the :mod:`django.contrib.contenttypes` module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:642
# 399a36b22dc14828996eba00764a5bee
msgid "Testing"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:645
# 189551e06e854a34a7a617adaa5e4e92
msgid ":meth:`django.test.Client.login` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:659
# b3cb612662fc43fab10d8c99182b1c3e
msgid "Management commands"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:662
# 71a31b45094848868ed33d6e705c4b69
msgid "Running management commands from your code"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:664
# 329e1ecf14374e56891d8729b038dcf8
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:666
# ebd8171e813e4a32aee0e97930a6d6da
msgid "Calls to management services in your code now need to use ``call_command``. For example, if you have some test code that calls flush and load_data::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:674
# ce2db388dfc447ecacce1a8ca93b3214
msgid "...you'll need to change this code to read::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:681
# 202ba795bc2742249d82c06c288aa9ad
msgid "Subcommands must now precede options"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:683
# 364d66c4af70450ebe8a56ef13d011a5
msgid "``django-admin.py`` and ``manage.py`` now require subcommands to precede options. So:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:690
# f285dd8e01a7429ea5575cd90fae1b00
msgid "...no longer works and should be changed to:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:697
# 0e62850ae4d84799946ff97593412276
msgid "Syndication"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:700
# dad14d282c774b1dbdeb8a8876b68aaa
msgid "``Feed.__init__`` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:702
# 06cbde978b204ed38c02c7135e044850
msgid "The ``__init__()`` method of the syndication framework's ``Feed`` class now takes an ``HttpRequest`` object as its second parameter, instead of the feed's URL. This allows the syndication framework to work without requiring the sites framework. This only affects code that subclasses ``Feed`` and overrides the ``__init__()`` method, and code that calls ``Feed.__init__()`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:709
# 92a58ce6b50d4d2eb45bf941803fa05a
msgid "Data structures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:712
# 13ebe4b231f44673b25af2fa32286166
msgid "``SortedDictFromList`` is gone"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:714
# a35edde9282a41d1adee1d21e6de2539
msgid "``django.newforms.forms.SortedDictFromList`` was removed. :class:`django.utils.datastructures.SortedDict` can now be instantiated with a sequence of tuples."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:718
# 1038211a72b74d29a56b5e712bf572e1
msgid "To update your code:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:720
# 213988bb9087403a8d8a963bfd33b81f
msgid "Use :class:`django.utils.datastructures.SortedDict` wherever you were using ``django.newforms.forms.SortedDictFromList``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:723
# 210ccfa9d21a432b8454670a5a635928
msgid "Because :meth:`django.utils.datastructures.SortedDict.copy` doesn't return a deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:729
# bd639a24ce1a43d58814a30df0f49912
msgid "Database backend functions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:732
# 5025e48cd4f34c1aab8e489d7f3385d7
msgid "Database backend functions have been renamed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:734
# 3245581e10714d76a3f91646f01b0b09
msgid "Almost *all* of the database backend-level functions have been renamed and/or relocated. None of these were documented, but you'll need to change your code if you're using any of these functions, all of which are in :mod:`django.db`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:741
# afb49b81171247859b292fc12285244a
msgid "``backend.get_autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:741
# 3b4f583c48ca4e45a9325f5aa0b0c447
msgid "``connection.ops.autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:742
# b0812226f3714f67a15c850dfe10e82c
msgid "``backend.get_date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:742
# 169cc82813ad4a3a987820b4f7ef8aea
msgid "``connection.ops.date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# 79f22d24d20543229d8dd9f5249b6a8c
msgid "``backend.get_date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# fe7ba1bcc5134279aa5b55bed61ce17d
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 09fd51e6852749f1834c1301344d6355
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 2ab3851ef92241db8c3efc513263c4b6
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# 8aa7f7b5de184274894895788f111ded
msgid "``backend.get_deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# 36541f1eae094e1eb85076150f82ddfb
msgid "``connection.ops.deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# 9d1c36f0390548c3b927c82caeb6ac26
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# 0692c970459b4210ae857efc9549f5b7
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# 416b277cacd54d28b9b6c4acf8d545cd
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# 5159855886a64056ba2c1b7b9a2cd872
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# 88fad12ed7a74f74a3f4e27d5d97e6e3
msgid "``backend.get_last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# df3146f249ed466bbcebc669444f4782
msgid "``connection.ops.last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# 41f9be8241c24baba77a22c5c6929822
msgid "``backend.get_limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# a06b2f23a67e45c3b20f7e1684c649d1
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# fa688aa1e5da4d4c8f91d1241043c647
msgid "``backend.get_max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# ab68acafe2594453a6a3661c3f8d71be
msgid "``connection.ops.max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# c45aa2ec687e425fa16ee1eafcc4f1d9
msgid "``backend.get_pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# 08b9393ca43b4ba9a1ed898449907847
msgid "``connection.ops.pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# 2df56c4171414fa5834e94e4ac984c83
msgid "``backend.get_random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# b3d5c3224989443c80f477936793ef34
msgid "``connection.ops.random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# f3072f6b38b94df99b5b5c855a492528
msgid "``backend.get_sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# 1e13a926f72b4c8f9e5f247f11296b23
msgid "``connection.ops.sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# b447832b4ba0476fbff6f98edfcf9edd
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# eb57e086d7ed48268ec4edbd2a4d8121
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# fb8ea9d164d14aaf8241861806d439c1
msgid "``backend.get_start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# 8d51b99d356a4ce99712cf4c594509b4
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# f327683da07644e885abbede7b556bc9
msgid "``backend.get_tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# 4e743b65ffe24259883ea7fd1b781b47
msgid "``connection.ops.tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# 87af854770e74ad0a00bf30ba1d9f617
msgid "``backend.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# 421dddc42ca34778aa7a27c14e8a0a5f
msgid "``connection.ops.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# cdbfb205fa7c4270a2b30e03def5a4e4
msgid "``backend.get_query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# d9a77b17045549b5b017fd1260defcd1
msgid "``connection.ops.query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# 022fdc4cc35040b29cc71d9dbca09df9
msgid "``backend.get_field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# 1cec239494bb43e08012b3a5d6642263
msgid "``connection.ops.field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# 07fd8c5802114df4bc6025bd2ca10162
msgid "``backend.get_drop_sequence``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# 1814c6e5cf114a5da27c975ceb5bac3b
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 9afe0aba4cd749e2a56aacfa67d771b1
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 427256e4b10d48b29ec4470d76602815
msgid "``connection.operators``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# 49a37cd1f3f840c88cb7e1fd8c637d34
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# be2a25675db542d299d61ca713662a01
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# ffd72bc245544923954a554b59fb752f
msgid "``backend.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# 078aa285ce45465e8ee1866cbd7b2d0b
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# eada21d74a41476cbe4d7adb256c9f7d
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# a27ca7b9e8ba4f5a8dc8d38e823f8284
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# b9bddba020ce4fc9922f11566a2b8e71
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# 0ffd7d5abe084db9b58bf25f788418fe
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# ff9ae5eda09d4a7c85adfd0928e15f31
msgid "``backend.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# e3739046a068467388fbe1206f183c89
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# d129967d0d464a5dbdaec90c2b64fdcd
msgid "``backend.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# 38dc1a3a5162428a87732ba5d2b6579f
msgid "``connection.features.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# 3a69e389de2b4e4cb699ab001735a62a
msgid "``backend.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# 6a993a22a2ae4d77b7455a1ed4dfae60
msgid "``connection.features.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# ad16a592ab9441a5830179d9be3e26c2
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# a2c5f2e966a3497780d9541234cfc5bb
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# 6f0eea4093f4447792ae35c48fe18ae8
msgid "``backend.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# 4b3e25a078eb41b4a376adceaf2dd66d
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0.1.txt:3
# d5bb5584274c4e6bb537971c0df4a023
msgid "Django 1.0.1 release notes"
msgstr ""

#: ../../releases/1.0.1.txt:5
# 875bc2114bb44f108fe1324cd564de7a
msgid "Welcome to Django 1.0.1!"
msgstr ""

#: ../../releases/1.0.1.txt:7
# dec107ce09d543f69897952defc919b9
msgid "This is the first \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.1 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability/>`, maintains backwards compatibility with Django 1.0), but does contain a number of fixes and other improvements. Django 1.0.1 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.1.txt:17
# 9fc14b91b3ad41acb4484641898a973f
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

#: ../../releases/1.0.1.txt:19
# 90f916b4332c4d0b858459985c5fc669
msgid "Django 1.0.1 contains over two hundred fixes to the original Django 1.0 codebase; full details of every fix are available in `the Subversion log of the 1.0.X branch`_, but here are some of the highlights:"
msgstr ""

#: ../../releases/1.0.1.txt:24
# 88f68f7c35484cc8aa2b427da03636b0
msgid "Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of comments, default ordering of comments and the XHTML and internationalization of the default templates for comments."
msgstr ""

#: ../../releases/1.0.1.txt:28
# 9392b568e1884104ab92aa365e6ba8ef
msgid "Multiple fixes for Django's support of Oracle databases, including pagination support for GIS QuerySets, more efficient slicing of results and improved introspection of existing databases."
msgstr ""

#: ../../releases/1.0.1.txt:32
# 41b6572ef7d0431db524781072b48da7
msgid "Several fixes for query support in the Django object-relational mapper, including repeated setting and resetting of ordering and fixes for working with ``INSERT``-only queries."
msgstr ""

#: ../../releases/1.0.1.txt:36
# 0bcb59b94b9d4555b0051658d0d30be5
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

#: ../../releases/1.0.1.txt:38
# ab7fd25796934981a85938828c524ab6
msgid "Multiple fixes for ``unique`` and ``unique_together`` model constraints in automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:41
# 776ca1fe53e14d42a8c876d4e585256e
msgid "Fixed support for custom callable ``upload_to`` declarations when handling file uploads through automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:44
# 3cbf6185486d4cb18502942a9e8b19ca
msgid "Fixed support for sorting an admin change list based on a callable attributes in ``list_display``."
msgstr ""

#: ../../releases/1.0.1.txt:47
# c8b154151cb941a5aa0c7695e7b39957
msgid "A fix to the application of autoescaping for literal strings passed to the ``join`` template filter. Previously, literal strings passed to ``join`` were automatically escaped, contrary to :ref:`the documented behavior for autoescaping and literal strings <string-literals-and-automatic-escaping>`. Literal strings passed to ``join`` are no longer automatically escaped, meaning you must now manually escape them; this is an incompatibility if you were relying on this bug, but not if you were relying on escaping behaving as documented."
msgstr ""

#: ../../releases/1.0.1.txt:57
# 4f3af70784544a8a94b702a750350d53
msgid "Improved and expanded translation files for many of the languages Django supports by default."
msgstr ""

#: ../../releases/1.0.1.txt:60
# b6c9267cf03748bbac50070db72eedd4
msgid "And as always, a large number of improvements to Django's documentation, including both corrections to existing documents and expanded and new documentation."
msgstr ""

#: ../../releases/1.0.2.txt:3
# 057042fceaaa49ff88066084709c9b86
msgid "Django 1.0.2 release notes"
msgstr ""

#: ../../releases/1.0.2.txt:5
# a335b755e6924a4ca8834f1cd130bcc4
msgid "Welcome to Django 1.0.2!"
msgstr ""

#: ../../releases/1.0.2.txt:7
# 146195d179094e33a9e0bd2df98e8d7a
msgid "This is the second \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.2 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability>`, maintains backwards compatibility with Django 1.0.0), but does contain a number of fixes and other improvements. Django 1.0.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.2.txt:17
# 4d9be5f6a5ce46a4ada29e1e5c7adef8
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

#: ../../releases/1.0.2.txt:19
# 3bbddf4b148a42afae917b9fa1932113
msgid "The primary reason behind this release is to remedy an issue in the recently-released Django 1.0.1; the packaging scripts used for Django 1.0.1 omitted some directories from the final release package, including one directory required by ``django.contrib.gis`` and part of Django's unit-test suite."
msgstr ""

#: ../../releases/1.0.2.txt:25
# c6badfe7ccf74812a7d0b165feefb814
msgid "Django 1.0.2 contains updated packaging scripts, and the release package contains the directories omitted from Django 1.0.1. As such, this release contains all of the fixes and improvements from Django 1.0.1; see :doc:`the Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

#: ../../releases/1.0.2.txt:31
# 57b46154a5644b33bcbd2fd080ea6d63
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

#: ../../releases/1.0.2.txt:33
# 0f940b4bd4ca4110953b6fb945fd5957
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

#: ../../releases/1.0.2.txt:35
# c8cdb7e626ae411a9bc8614de4e8ca75
msgid "The default ``__repr__`` method of Django models has been made more robust in the face of bad Unicode data coming from the ``__unicode__`` method; rather than raise an exception in such cases, ``repr()`` will now contain the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

#: ../../releases/1.0.2.txt:41
# fbce4a7ea4eb406fb7b7909d3b1af53b
msgid "A bug involving the interaction of Django's ``SafeUnicode`` class and the MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for example, by template rendering) can now be assigned to model attributes and saved to MySQL without requiring an explicit intermediate cast to ``unicode``."
msgstr ""

#: ../../releases/1.0.2.txt:47
# b8375bd28fc643a49a38a9d34824a4ee
msgid "A bug affecting filtering on a nullable ``DateField`` in SQLite has been resolved."
msgstr ""

#: ../../releases/1.0.2.txt:50
# cba4af3065ab4168a9e3732df6f5ce45
msgid "Several updates and improvements have been made to Django's documentation."
msgstr ""

#: ../../releases/1.1.txt:3
# b7d77bff2a444570b37bbe48f8f6596b
msgid "Django 1.1 release notes"
msgstr ""

#: ../../releases/1.1.txt:6
# 4e57bbc8a1784b0a8523712657b78cd9
msgid "July 29, 2009"
msgstr ""

#: ../../releases/1.1.txt:8
# b2f1aae4da80456d807877e89d2327ba
msgid "Welcome to Django 1.1!"
msgstr ""

#: ../../releases/1.1.txt:10
# 41d2bec3bb494750b0ea08f01ce488d3
msgid "Django 1.1 includes a number of nifty `new features`_, lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""

#: ../../releases/1.1.txt:18
# c3636aea89994f7ebd722e0d1bad3857
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

#: ../../releases/1.1.txt:20
# e4b000649b6545fb8702bbd93eb32b76
msgid "Django has a policy of :doc:`API stability </misc/api-stability>`. This means that, in general, code you develop against Django 1.0 should continue to work against 1.1 unchanged. However, we do sometimes make backwards-incompatible changes if they're necessary to resolve bugs, and there are a handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

#: ../../releases/1.1.txt:26
# 3c8764bb40c74b8e9e506e9f37f8be79
msgid "Before upgrading to Django 1.1 you should double-check that the following changes don't impact you, and upgrade your code if they do."
msgstr ""

#: ../../releases/1.1.txt:30
# 381daf11f40845fc812de7eaa350c25e
msgid "Changes to constraint names"
msgstr ""

#: ../../releases/1.1.txt:32
# 2da653413c88421da450955b7d673219
msgid "Django 1.1 modifies the method used to generate database constraint names so that names are consistent regardless of machine word size. This change is backwards incompatible for some users."
msgstr ""

#: ../../releases/1.1.txt:36
# 8da6d22a3ab345728f2e6e23381aa560
msgid "If you are using a 32-bit platform, you're off the hook; you'll observe no differences as a result of this change."
msgstr ""

#: ../../releases/1.1.txt:39
# 0eee2f5969fe472b93b10a27df42bf25
msgid "However, **users on 64-bit platforms may experience some problems** using the :djadmin:`reset` management command. Prior to this change, 64-bit platforms would generate a 64-bit, 16 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:46
# 0af8478aabcd4a3ca64423cca2fd1480
msgid "Following this change, all platforms, regardless of word size, will generate a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:51
# 140086d59542423fb7cf06ab4fd71b98
msgid "As a result of this change, you will not be able to use the :djadmin:`reset` management command on any table made by a 64-bit machine. This is because the the new generated name will not match the historically generated name; as a result, the SQL constructed by the reset command will be invalid."
msgstr ""

#: ../../releases/1.1.txt:56
# 251b9eaa1e724381afe6c59c70fc3e9f
msgid "If you need to reset an application that was created with 64-bit constraints, you will need to manually drop the old constraint prior to invoking :djadmin:`reset`."
msgstr ""

#: ../../releases/1.1.txt:61
# 0b5056378de64d078e0a7aec72c924e2
msgid "Test cases are now run in a transaction"
msgstr ""

#: ../../releases/1.1.txt:63
# 89659c1d22eb4540a3fb8ea4a31fc50f
msgid "Django 1.1 runs tests inside a transaction, allowing better test performance (see `test performance improvements`_ for details)."
msgstr ""

#: ../../releases/1.1.txt:66
# 8b1ff73f8e0a4af58de193e664d95d09
msgid "This change is slightly backwards incompatible if existing tests need to test transactional behavior, if they rely on invalid assumptions about the test environment, or if they require a specific test case ordering."
msgstr ""

#: ../../releases/1.1.txt:70
# 7267f6ecff15452cb38913037c59dc63
msgid "For these cases, :class:`~django.test.TransactionTestCase` can be used instead. This is a just a quick fix to get around test case errors revealed by the new rollback approach; in the long-term tests should be rewritten to correct the test case."
msgstr ""

#: ../../releases/1.1.txt:78
# c37de16d67be40ff9de1cdddc8d3e894
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

#: ../../releases/1.1.txt:80
# f52f56392108480ea60fdef40b7e2b4e
msgid "For convenience, Django 1.0 included an optional middleware class -- ``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header commonly set by some proxy configurations."
msgstr ""

#: ../../releases/1.1.txt:85
# 0ca800115c344e2cbb019893b2b7e952
msgid "It has been demonstrated that this mechanism cannot be made reliable enough for general-purpose use, and that (despite documentation to the contrary) its inclusion in Django may lead application developers to assume that the value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of authentication."
msgstr ""

#: ../../releases/1.1.txt:90
# 24cdfce2415f4a9a8544f712c9346e11
msgid "While not directly a security issue, we've decided to remove this middleware with the Django 1.1 release. It has been replaced with a class that does nothing other than raise a ``DeprecationWarning``."
msgstr ""

#: ../../releases/1.1.txt:94
# 9c5760fa6ca9401680c476325b8ca9d2
msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

#: ../../releases/1.1.txt:96
# cca5ccb158f34f14998fe41786acf8e4
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

#: ../../releases/1.1.txt:98
# ef42d2ba2d5f4a0d8a86833f7f30d47e
msgid "Verify that it works correctly with your upstream proxy, modifying it to support your particular proxy (if necessary)."
msgstr ""

#: ../../releases/1.1.txt:101
# 0b2a9dd6712948f6b0a7e96bf7cf19b2
msgid "Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a piece of middleware in your own project."
msgstr ""

#: ../../releases/1.1.txt:107
# 6f4b6cfb4a974b8caa243c966ea828b1
msgid "Names of uploaded files are available later"
msgstr ""

#: ../../releases/1.1.txt:111
# fb1cc4b4607e49a3919c88689b9b0133
msgid "In Django 1.0, files uploaded and stored in a model's :class:`FileField` were saved to disk before the model was saved to the database. This meant that the actual file name assigned to the file was available before saving. For example, it was available in a model's pre-save signal handler."
msgstr ""

#: ../../releases/1.1.txt:116
# 46ff25637d71429797b57ecc18e60779
msgid "In Django 1.1 the file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until *after* the model has been saved."
msgstr ""

#: ../../releases/1.1.txt:121
# a21b7e8f42544b49a9459ffdd0ebf2db
msgid "Changes to how model formsets are saved"
msgstr ""

#: ../../releases/1.1.txt:125
# fc7f83d85327475ca0489fcdeada9389
msgid "In Django 1.1, :class:`BaseModelFormSet` now calls :meth:`ModelForm.save()`."
msgstr ""

#: ../../releases/1.1.txt:127
# 7ada5140f6c74cbdb90d567d2487253f
msgid "This is backwards-incompatible if you were modifying ``self.initial`` in a model formset's ``__init__``, or if you relied on the internal ``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. Those attributes are now public methods."
msgstr ""

#: ../../releases/1.1.txt:133
# e8c9cfa83480423b805295c9eabbca5f
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

#: ../../releases/1.1.txt:135
# e21c8137d0404f0493b82828b4aa8049
msgid "The :ttag:`join` filter no longer escapes the literal value that is passed in for the connector."
msgstr ""

#: ../../releases/1.1.txt:138
# 4289baff06834ab2b32fa28ed0909123
msgid "This is backwards incompatible for the special situation of the literal string containing one of the five special HTML characters. Thus, if you were writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;\" }}``."
msgstr ""

#: ../../releases/1.1.txt:142
# 7b899679234141ba93a9332dfff993cd
msgid "The previous behavior was a bug and contrary to what was documented and expected."
msgstr ""

#: ../../releases/1.1.txt:146
# f15e720b7ef548e49bb907e98c29fda2
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

#: ../../releases/1.1.txt:148
# ecc38b4d42754fcb8bd2d170de1f9272
msgid "Django 1.1 adds a ``permanent`` argument to the :func:`django.views.generic.simple.redirect_to()` view. This is technically backwards-incompatible if you were using the ``redirect_to`` view with a format-string key called 'permanent', which is highly unlikely."
msgstr ""

#: ../../releases/1.1.txt:156
# 87bcb7e1e42746399e8619de3eef2903
msgid "Features deprecated in 1.1"
msgstr ""

#: ../../releases/1.1.txt:158
# adbf54735cef40729253d126550031b8
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

#: ../../releases/1.1.txt:160
# c2c1c4a8d12845449696c0bbb18a4831
msgid "You should no longer use ``AdminSite.root()`` to register that admin views. That is, if your URLconf contains the line::"
msgstr ""

#: ../../releases/1.1.txt:165
# 5dce874b6410408aa2fc0349bc8e747f
msgid "You should change it to read::"
msgstr ""

#: ../../releases/1.1.txt:169
# d8f6f075d22545d4b28826ccfdca22fa
msgid "You should begin to remove use of this feature from your code immediately."
msgstr ""

#: ../../releases/1.1.txt:171
# 1e3a11a43cd7422a9bddc6e14bb5af2b
msgid "``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in Django 1.1. This warning is hidden by default. In Django 1.2, this warning will be upgraded to a ``DeprecationWarning``, which will be displayed loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

#: ../../releases/1.1.txt:176
# 95fb28d1666846ce8057a52950c11f8b
msgid "For more details on our deprecation policies and strategy, see :doc:`/internals/release-process`."
msgstr ""

#: ../../releases/1.1.txt:180
# 35aa4e9588be4917b456835cf26f4964
msgid "What's new in Django 1.1"
msgstr ""

#: ../../releases/1.1.txt:182
# 9b9639cf68494b02b480c0b4620c2109
msgid "Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 bugs, and added roughly 10,000 lines of documentation."
msgstr ""

#: ../../releases/1.1.txt:185
# 2b098f38f67f447498d2a4df74fccf1f
msgid "The major new features in Django 1.1 are:"
msgstr ""

#: ../../releases/1.1.txt:188
#: ../../releases/1.1-alpha-1.txt:22
# 4cee2b3a6ceb4d829e9d29df5f34dc92
# 2c5d5657deb84aa791ad637b931ffbf3
msgid "ORM improvements"
msgstr ""

#: ../../releases/1.1.txt:192
# 9b73b07b12fa43819713ee665016709b
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM): aggregate support, and query expressions."
msgstr ""

#: ../../releases/1.1.txt:196
#: ../../releases/1.1-alpha-1.txt:28
# bc0b5d75a5a34eb7b8d98a2c4e83b08f
# 4ea2ebb5806340e2b612b6ad89e9f4e9
msgid "Aggregate support"
msgstr ""

#: ../../releases/1.1.txt:198
#: ../../releases/1.1-alpha-1.txt:32
# 1e62a01a68ab42b58408f0df4b608dd8
# 18a9d9dae9934c9cb7af37f5b62f01b1
msgid "It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, ``MIN()``, etc.) from within Django's ORM. You can choose to either return the results of the aggregate directly, or else annotate the objects in a :class:`QuerySet` with the results of the aggregate query."
msgstr ""

#: ../../releases/1.1.txt:203
# 2f7c40b552a7405b90e67d01b88aec82
msgid "This feature is available as new :meth:`QuerySet.aggregate()`` and :meth:`QuerySet.annotate()`` methods, and is covered in detail in :doc:`the ORM aggregation documentation </topics/db/aggregation>`."
msgstr ""

#: ../../releases/1.1.txt:208
#: ../../releases/1.1-alpha-1.txt:42
# 5fe1e3f6f647474aac30cfafefedcaf9
# 3eeeeb0eb53e402ca38c176f7f203f7c
msgid "Query expressions"
msgstr ""

#: ../../releases/1.1.txt:210
#: ../../releases/1.1-alpha-1.txt:44
# d5cdf3be40394a598eace829f998516c
# 464ed6e067a449aeb633d3467756986b
msgid "Queries can now refer to a another field on the query and can traverse relationships to refer to fields on related models. This is implemented in the new :class:`F` object; for full details, including examples, consult the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

#: ../../releases/1.1.txt:216
#: ../../releases/1.1-beta-1.txt:27
# 25a481bf488e4ee791a75c6b12cdd147
# e220f2e8420f4988853fbfc4b35b9c68
msgid "Model improvements"
msgstr ""

#: ../../releases/1.1.txt:218
#: ../../releases/1.1-beta-1.txt:31
# 95968383a63f48b8854b0113b853e9eb
# 7c01e6ceba9c4dfba0f9e7306bb7df42
msgid "A number of features have been added to Django's model layer:"
msgstr ""

#: ../../releases/1.1.txt:221
#: ../../releases/1.1-beta-1.txt:34
# b69d55cae8784abf933d1f0a582f6d99
# f362aa61aee146bf9c99ae51900083a3
msgid "\"Unmanaged\" models"
msgstr ""

#: ../../releases/1.1.txt:223
# 47d14d08ebd64e619794ef76210677de
msgid "You can now control whether or not Django manages the life-cycle of the database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of the :djadmin:`reset` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1.txt:229
#: ../../releases/1.1-beta-1.txt:42
# 1739d594ed7247a4995bc161bfc556d7
# c885eb03401b409086fd42810b9ed0a4
msgid "If you set this to ``False``, however, no database table creating or deletion will be automatically performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means."
msgstr ""

#: ../../releases/1.1.txt:234
#: ../../releases/1.1-beta-1.txt:47
# b05ac6d93b184be8a20acacb2bfe8983
# c79547d7933f4013b8c672562189c56d
msgid "For more details, see the documentation for the :attr:`~Options.managed` option."
msgstr ""

#: ../../releases/1.1.txt:238
#: ../../releases/1.1-beta-1.txt:51
# a1fa3701743742abbb7729b7657e3002
# f1795c149e474a93beccf140d51036d3
msgid "Proxy models"
msgstr ""

#: ../../releases/1.1.txt:240
# 79f205f35b4d47d6a915fa68b9448eb3
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python-level (rather than database-level) behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1.txt:245
#: ../../releases/1.1-beta-1.txt:58
# 0a2bebfac334428499a62759ebb91f61
# 9262f4093afa4808ba5cc1c92464c8e9
msgid "All the details can be found in the :ref:`proxy models documentation <proxy-models>`. This feature is similar on the surface to unmanaged models, so the documentation has an explanation of :ref:`how proxy models differ from unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

#: ../../releases/1.1.txt:251
#: ../../releases/1.1-beta-1.txt:64
# 9e468341861944679c2bda269e3d9f32
# b0ceb3ab63984a64819be47e81b3d752
msgid "Deferred fields"
msgstr ""

#: ../../releases/1.1.txt:253
#: ../../releases/1.1-beta-1.txt:66
# 6556684ddb9c4abeb305ff1d5d77c4c3
# 02b6510ce1c8497f843d0e2d5307c6f5
msgid "In some complex situations, your models might contain fields which could contain a lot of data (for example, large text fields), or require expensive processing to convert them to Python objects. If you know you don't need those particular fields, you can now tell Django not to retrieve them from the database."
msgstr ""

#: ../../releases/1.1.txt:259
#: ../../releases/1.1-beta-1.txt:72
# 1405761fb3834518a310b051e1c0df34
# de15b030add746a2925e1c310587fba0
msgid "You'll do this with the new queryset methods :meth:`~django.db.models.query.QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

#: ../../releases/1.1.txt:264
#: ../../releases/1.1-beta-1.txt:100
# 7a1254e7dc6c4e1684d03b6b45bff9b5
# 32b73e0f5b264df2bb1314b4ce03a417
msgid "Testing improvements"
msgstr ""

#: ../../releases/1.1.txt:266
# 2cbfa1ebdf614d89944cfe5870a14bd0
msgid "A few notable improvements have been made to the :doc:`testing framework </topics/testing>`."
msgstr ""

#: ../../releases/1.1.txt:270
# 78b6dcda7341402abf2dc1c6e3ccd3a0
msgid "Test performance improvements"
msgstr ""

#: ../../releases/1.1.txt:274
#: ../../releases/1.1-alpha-1.txt:54
# 9265e643c3464e6fbb037f3be6f047cd
# 584d13fa89b44df6ba37f56d8533ff91
msgid "Tests written using Django's :doc:`testing framework </topics/testing>` now run dramatically faster (as much as 10 times faster in many cases)."
msgstr ""

#: ../../releases/1.1.txt:277
#: ../../releases/1.1-alpha-1.txt:57
# 1f5bd0295281414898bf492f6a195980
# 56b21ae58d574530895310b46602672d
msgid "This was accomplished through the introduction of transaction-based tests: when using :class:`django.test.TestCase`, your tests will now be run in a transaction which is rolled back when finished, instead of by flushing and re-populating the database. This results in an immense speedup for most types of unit tests. See the documentation for :class:`TestCase` and :class:`TransactionTestCase` for a full description, and some important notes on database support."
msgstr ""

#: ../../releases/1.1.txt:285
# ec8e1a5928c3422ca24ba717ae863a12
msgid "Test client improvements"
msgstr ""

#: ../../releases/1.1.txt:289
# 5b0aa877f65a48e9993d53caed28d140
msgid "A couple of small -- but highly useful -- improvements have been made to the test client:"
msgstr ""

#: ../../releases/1.1.txt:292
#: ../../releases/1.1-beta-1.txt:107
# 269bbad5290f4b0e9ddab02fef3961f9
# f256ad08bfea477d8a69c656df35bea5
msgid "The test :class:`Client` now can automatically follow redirects with the ``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This makes testing views that issue redirects simpler."
msgstr ""

#: ../../releases/1.1.txt:296
# 3fb34ce99dbb44de86fb625c9d64bf99
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template in the inheritance chain, is still available if you need it."
msgstr ""

#: ../../releases/1.1.txt:303
#: ../../releases/1.1-beta-1.txt:77
# 672bea46051743138dd3e1445a840a3e
# 3ceb29c53e4e45e7a972885e69cfceb7
msgid "New admin features"
msgstr ""

#: ../../releases/1.1.txt:305
# a16b47a012de465ab527c7a678aca40a
msgid "Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

#: ../../releases/1.1.txt:308
#: ../../releases/1.1-beta-1.txt:83
# 76ffc7132f844c4f948839439fa1166a
# 7a2869ff90ca491098aea1271620dc69
msgid "Editable fields on the change list"
msgstr ""

#: ../../releases/1.1.txt:310
#: ../../releases/1.1-beta-1.txt:85
# b00d671d7c334f1096a85533c3e1b803
# c99f8b0831484516a09ce079fdc5f9fd
msgid "You can now make fields editable on the admin list views via the new :ref:`list_editable <admin-list-editable>` admin option. These fields will show up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""

#: ../../releases/1.1.txt:315
#: ../../releases/1.1-beta-1.txt:90
# b39f2bc1d7ed4b199bf9cd17bb01f3b9
# f130eab2539b40939e4c8c9d99bb278e
msgid "Admin \"actions\""
msgstr ""

#: ../../releases/1.1.txt:317
#: ../../releases/1.1-beta-1.txt:92
# a167a6b0cfb84e34b0ce64073753f27e
# 0d2c2c93fca04998a83b32f47230e83a
msgid "You can now define :doc:`admin actions </ref/contrib/admin/actions>` that can perform some action to a group of models in bulk. Users will be able to select objects on the change list page and then apply these bulk actions to all selected objects."
msgstr ""

#: ../../releases/1.1.txt:322
#: ../../releases/1.1-beta-1.txt:96
# fa866b491cf14ece93fd4ea329eab9d8
# 4eba833738a84383902d4144aed47fbd
msgid "Django ships with one pre-defined admin action to delete a group of objects in one fell swoop."
msgstr ""

#: ../../releases/1.1.txt:326
#: ../../releases/1.1-beta-1.txt:118
# ccf191362c0a460b89e012b86ca5ce77
# 5b3c2b6608a04d02abe8cfca9668c708
msgid "Conditional view processing"
msgstr ""

#: ../../releases/1.1.txt:328
#: ../../releases/1.1-beta-1.txt:120
# c88b25ba0e324280a9fed73d04df0366
# 237b793c0a6b41be91676993540ebd5c
msgid "Django now has much better support for :doc:`conditional view processing </topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-Modified`` HTTP headers. This means you can now easily short-circuit view processing by testing less-expensive conditions. For many views this can lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

#: ../../releases/1.1.txt:335
#: ../../releases/1.1-rc-1.txt:36
# cb8b351257e54558a1fb50b484da98ee
# a3258666c9b044009d13575854979cb0
msgid "URL namespaces"
msgstr ""

#: ../../releases/1.1.txt:337
# 074edc3aea0b47cda6ec44f9f90f0fa1
msgid "Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the introduction of URL \"namespaces.\""
msgstr ""

#: ../../releases/1.1.txt:340
# 92e25925a9474ef1ba2e693b84c15036
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. In other words, reusable applications like Django's admin interface may be registered multiple times without URL conflicts."
msgstr ""

#: ../../releases/1.1.txt:346
# 3b306d241be342d18f151b9425775579
msgid "For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1.txt:350
#: ../../releases/1.2.txt:341
#: ../../releases/1.2.txt:1084
#: ../../releases/1.2.4.txt:76
#: ../../releases/1.3.txt:261
#: ../../releases/1.3.txt:805
# bce438f35af248ba94cf30b2b7956c32
# 7f6628fae648475eb31185b02f09f135
# eb98e0f8646a4b59a7c1106a8588b4d5
# 77c6d10f54d846e6b535297637737c13
# 994e567b6aa24dbc9aa6b4e2454cc053
# 7576f725b2af4c558b9701fabfe27899
msgid "GeoDjango"
msgstr ""

#: ../../releases/1.1.txt:352
# a60918c839a648d6b6fe22ada57b0382
msgid "In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new features:"
msgstr ""

#: ../../releases/1.1.txt:355
# c4764ff0e66344bfaf5003a4b5e6c961
msgid "Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial backend."
msgstr ""

#: ../../releases/1.1.txt:358
# 05609c5144984cb395174b4761bec94c
msgid "Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and ``F`` expressions."
msgstr ""

#: ../../releases/1.1.txt:361
# 6796ab891641436a9bd9183ec4b5246a
msgid "New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

#: ../../releases/1.1.txt:364
# 53f34da03206459fbbc92417f5c6033b
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

#: ../../releases/1.1.txt:366
# d3f8632cb639439e966de4839c3152c8
msgid "For more details, see the `GeoDjango documentation`_."
msgstr ""

#: ../../releases/1.1.txt:373
#: ../../releases/1.1-alpha-1.txt:65
#: ../../releases/1.1-beta-1.txt:127
# c59df895431a468aade71dcb8aee6461
# db28c2e4563a4d8e82ad22545b679cb2
# 4888778121a540faa5d90eefe37d9d0c
msgid "Other improvements"
msgstr ""

#: ../../releases/1.1.txt:375
#: ../../releases/1.1-alpha-1.txt:67
# e3e204665db3465abe5e801f7291006c
# c7ba4ea33f5243a0887632d278b9eea6
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

#: ../../releases/1.1.txt:377
#: ../../releases/1.1-alpha-1.txt:69
# 984ea51e76294ef18032ca0b1ca2d245
# ec69b0a6293b417bade833bc7fadee88
msgid "The :doc:`CSRF protection middleware </ref/contrib/csrf>` has been split into two classes -- ``CsrfViewMiddleware`` checks incoming requests, and ``CsrfResponseMiddleware`` processes outgoing responses. The combined ``CsrfMiddleware`` class (which does both) remains for backwards-compatibility, but using the split classes is now recommended in order to allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""

#: ../../releases/1.1.txt:385
#: ../../releases/1.1-alpha-1.txt:77
# 60388512579242d1a5ab9f6807927322
# b2121578666941b885817fb6d6c2955b
msgid ":func:`~django.core.urlresolvers.reverse` and code which uses it (e.g., the ``{% url %}`` template tag) now works with URLs in Django's administrative site, provided that the admin URLs are set up via ``include(admin.site.urls)`` (sending admin requests to the ``admin.site.root`` view still works, but URLs in the admin will not be \"reversible\" when configured this way)."
msgstr ""

#: ../../releases/1.1.txt:391
#: ../../releases/1.1-alpha-1.txt:83
# 45df54206a074c239ed3a531eb8b5ad3
# 26f7cca2ade1422f8cd050b0d0fb3bf2
msgid "The ``include()`` function in Django URLconf modules can now accept sequences of URL patterns (generated by ``patterns()``) in addition to module names."
msgstr ""

#: ../../releases/1.1.txt:394
#: ../../releases/1.1-alpha-1.txt:86
# 3329227f191c46f1bc94a8f65b67162a
# 8b2e9ded611f40c084fb9785610bb7ca
msgid "Instances of Django forms (see :doc:`the forms overview </topics/forms/index>`) now have two additional methods, ``hidden_fields()`` and ``visible_fields()``, which return the list of hidden -- i.e., ``<input type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

#: ../../releases/1.1.txt:399
#: ../../releases/1.1-alpha-1.txt:91
# 6f9a6b4300d548818ae70b815826d417
# 62463f4227364bc19a9926e1e2a5f6c5
msgid "The ``redirect_to`` generic view (see :doc:`the generic views documentation </ref/generic-views>`) now accepts an additional keyword argument ``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP permanent redirect (status code 301). If ``False``, the view will emit an HTTP temporary redirect (status code 302)."
msgstr ""

#: ../../releases/1.1.txt:405
#: ../../releases/1.1-alpha-1.txt:97
# 9b9d108b915d4741a8d70c1e57e3a345
# c5a6351e28da4c1d9d4fe295b075cd13
msgid "A new database lookup type -- ``week_day`` -- has been added for ``DateField`` and ``DateTimeField``. This type of lookup accepts a number between 1 (Sunday) and 7 (Saturday), and returns objects where the field value matches that day of the week. See :ref:`the full list of lookup types <field-lookups>` for details."
msgstr ""

#: ../../releases/1.1.txt:411
#: ../../releases/1.1-alpha-1.txt:103
# 8f35d331172d48ae85ef6444e2d373ce
# dbdc491e5aea4a4ab131508e65f7bcfd
msgid "The ``{% for %}`` tag in Django's template language now accepts an optional ``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop over an empty sequence. See :doc:`the list of built-in template tags </ref/templates/builtins>` for examples of this."
msgstr ""

#: ../../releases/1.1.txt:416
#: ../../releases/1.1-beta-1.txt:132
# 4010588a5a9146779abd838e0ee3c57c
# 7fbf491305924df69212d83b004ddc1d
msgid "The :djadmin:`dumpdata` management command now accepts individual model names as arguments, allowing you to export the data just from particular models."
msgstr ""

#: ../../releases/1.1.txt:420
#: ../../releases/1.1-beta-1.txt:136
# 789d77acb93047599a913cb743ef0d97
# 62d868e23882421593a8e38e8ead3b40
msgid "There's a new :tfilter:`safeseq` template filter which works just like :tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

#: ../../releases/1.1.txt:423
#: ../../releases/1.1-beta-1.txt:139
# 13bd819683d74cbfbb169454818737d5
# fb83cda62f1d46feb3dd04831bf24ccf
msgid ":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` commands to increment and decrement the value of a cache key. On cache backends that support atomic increment/decrement -- most notably, the memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

#: ../../releases/1.1.txt:429
#: ../../releases/1.1-beta-1.txt:145
# fec3fe6cdb3446cab478dd3a590a68c5
# 3794fa09b68240b289af22ede4cfc02c
msgid "Django now can :doc:`easily delegate authentication to the Web server </howto/auth-remote-user>` via a new authentication backend that supports the standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

#: ../../releases/1.1.txt:433
#: ../../releases/1.1-beta-1.txt:149
# 3d991f0681f34a59a164801160560a04
# c473346652fe480d86f52425a1235d13
msgid "There's a new :func:`django.shortcuts.redirect` function that makes it easier to issue redirects given an object, a view name, or a URL."
msgstr ""

#: ../../releases/1.1.txt:436
#: ../../releases/1.1-beta-1.txt:152
# b491b330508f4d02b2eb732409c4a900
# 5779d40a72ec41ef8dda73d37cefb7ac
msgid "The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

#: ../../releases/1.1.txt:442
# f42f795520554f6ba7e5c639a17e5ba2
msgid "What's next?"
msgstr ""

#: ../../releases/1.1.txt:444
# 692e35ffbc9d4cf9b0a2c5e5a74b9a58
msgid "We'll take a short break, and then work on Django 1.2 will begin -- no rest for the weary! If you'd like to help, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1.txt:451
# f7678104731a49c0af4e783ff53cbd03
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel free to join the discussions!"
msgstr ""

#: ../../releases/1.1.txt:457
#: ../../releases/1.1-alpha-1.txt:154
#: ../../releases/1.1-beta-1.txt:199
#: ../../releases/1.1-rc-1.txt:105
#: ../../releases/1.2-alpha-1.txt:579
#: ../../releases/1.2-beta-1.txt:164
#: ../../releases/1.2-rc-1.txt:97
#: ../../releases/1.3-alpha-1.txt:393
#: ../../releases/1.3-beta-1.txt:229
#: ../../releases/1.4-alpha-1.txt:1115
#: ../../releases/1.4-beta-1.txt:1187
# 0f789911aacc42389d302b6dd0225cc3
# 468b7975369943e99fbdf469638fd71d
# 2bdc7007c68b4c1689f4c9712076d225
# 91ba0faae3b949a091d337f233768adc
# 9d2dcf4b2e4a47cfa4a42e73815886b3
# 812f28e5f02142a7be74cab7eccb1ef0
# 89446bed274048e98bd6f774e3a76770
# 1c5b7241ae50446c9735dd1b67ee0cc0
# aa36c3f5dbb64519aba90b5968d3d4a6
# f85a845fccd040e58d0cd28878e58c62
# b0cfb55104cb46bba54ea7a6b52fa409
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.1.txt:463
# 0edbc0c6ffba441bb3241a6b76390c5e
msgid "And that's the way it is."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:3
# dad15e777e974c82bc0615a91f313c4e
msgid "Django 1.1 alpha 1 release notes"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:5
# c93d8e924d8048999c6d8e3bc74b3172
msgid "February 23, 2009"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:7
# 8979bf8938b042dabc36e21de3545738
msgid "Welcome to Django 1.1 alpha 1!"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:9
# 2a04179ee44f4af0babf8e1e7c181cc3
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:19
# 34dfcf50a0544c6eba120b061f65a35e
msgid "What's new in Django 1.1 alpha 1"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:24
# 7689e59c605044eda3f6348182b2feca
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM):"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:37
# 58cbff36a39c4245af8ec9d4cfa9fa80
msgid "This feature is available as new :meth:`QuerySet.aggregate()`` and :meth:`QuerySet.annotate()`` methods, and is covered in detail in :doc:`the ORM aggregation documentation </topics/db/aggregation>`"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:50
# e7ceb426810d48dc93761973d5581794
msgid "Performance improvements"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:109
#: ../../releases/1.1-beta-1.txt:158
#: ../../releases/1.1-rc-1.txt:64
# d516a4aae89642ce89710180071ee9ae
# f6eaf1afd7ae4dc3aeb9acfd4e4260b6
# 28ffdf27cecd47ac9eba239674444586
msgid "The Django 1.1 roadmap"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:111
# 166ac58415aa4c509c5ba165e5295693
msgid "Before Django 1.1 goes final, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:114
# b459a1a9c0ce4acc8fc32b8fe8e673eb
msgid "Week of *March 20, 2009:* Django 1.1 beta 1, at which point Django 1.1 will be in \"feature freeze\": no new features will be implemented for 1.1 past that point, and all new feature work will be deferred to Django 1.2."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:119
#: ../../releases/1.1-beta-1.txt:164
# 5357516497dc465880dc877688ce109f
# c93521d2f922438abf123634f721cf8a
msgid "Week of *April 2, 2009:* Django 1.1 release candidate. At this point all strings marked for translation must freeze to allow translations to be submitted in advance of the final release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:123
#: ../../releases/1.1-beta-1.txt:168
# fbd7cf717a924c8fae47d1a4c0551035
# 748a1b25495b45e8bdc6eab7800e1de7
msgid "Week of *April 13, 2009:* Django 1.1 final."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:125
# 600794e2aafe40af939c8e0a8fcc62e2
msgid "If deemed necessary, additional alpha, beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:131
# b8356163e6024aecaedbeca0f2c47da7
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:142
#: ../../releases/1.1-beta-1.txt:187
#: ../../releases/1.1-rc-1.txt:92
# e8028f6554e44c61ab6db4a806f62d9d
# a54086fa36a941e39668a66be9529d0c
# cb4a610145de43e69bf70b3793432133
msgid "Additionally, discussion of Django development, including progress toward the 1.1 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:147
#: ../../releases/1.1-beta-1.txt:192
#: ../../releases/1.1-rc-1.txt:98
#: ../../releases/1.2-alpha-1.txt:572
#: ../../releases/1.2-beta-1.txt:157
#: ../../releases/1.2-rc-1.txt:90
#: ../../releases/1.3-alpha-1.txt:386
#: ../../releases/1.3-beta-1.txt:222
#: ../../releases/1.4-alpha-1.txt:1108
#: ../../releases/1.4-beta-1.txt:1180
# 7fe92e4f2079421d90116fa954f2b193
# ed524f5c501d491d9d4fd18824526c48
# c27a149948484d2c9cb001e0550154d3
# 404854ffe00447d79af00087ccc0697f
# 1a2352c0180f4e62a9274c2cfd6bc5c1
# 0a789913494d437c9d0a8e141073ed45
# 00e3e72f9db949bfba13246b4933a623
# aff7a5bf626345b08f2584b95d7d47e1
# cb25ee32689c486c93d0cfafa08bbbd4
# c1f5c8423d2441fa9d827ad92363680a
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:160
#: ../../releases/1.1-beta-1.txt:205
# f193a347eb27443d9b1890db445e864a
# 441af883010547d8bfdeaaa0c32100d5
msgid "Development sprints for Django 1.1 will also be taking place at PyCon US 2009, on the dedicated sprint days (March 30 through April 2), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.1-beta-1.txt:3
# d82ecb4b311749d0b59f9ede39e3b33c
msgid "Django 1.1 beta 1 release notes"
msgstr ""

#: ../../releases/1.1-beta-1.txt:5
# 8476043dddae4a4cbb72b6372be6f326
msgid "March 23, 2009"
msgstr ""

#: ../../releases/1.1-beta-1.txt:7
# cf11bef155dd4dbc8911f7167439f2a2
msgid "Welcome to Django 1.1 beta 1!"
msgstr ""

#: ../../releases/1.1-beta-1.txt:9
# 93558a8756024cbdadee695c38439fb2
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:19
# 214e3589328d4ad7af752285c9a4d184
msgid "What's new in Django 1.1 beta 1"
msgstr ""

#: ../../releases/1.1-beta-1.txt:23
# c5a11fcb667e49c4986031f948acaa9f
msgid "The :doc:`1.1 alpha release notes </releases/1.1-alpha-1>`, which has a list of everything new between Django 1.0 and Django 1.1 alpha."
msgstr ""

#: ../../releases/1.1-beta-1.txt:36
# 01798e751c72404a99fea4e9ffbd0e82
msgid "You can now control whether or not Django creates database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of :djadmin:`reset` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1-beta-1.txt:53
# 3289396b25004e31ad873a831cb78285
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1-beta-1.txt:79
# 84a9eb33dfa04642a732473731c964da
msgid "Since 1.1 alpha, a couple of new features have been added to Django's admin application:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:104
# 39964eb56131454a88676c7ad4d23de7
msgid "A couple of small but very useful improvements have been made to the :doc:`testing framework </topics/testing>`:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:111
# c1ed99a994a34e25805e8fde86f4d429
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template, is still available if you need it."
msgstr ""

#: ../../releases/1.1-beta-1.txt:129
# de23ee99af3348c2bde806b8e2ab8f36
msgid "Finally, a grab-bag of other neat features made their way into this beta release, including:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:160
# cf648d93f7d94db99d3bf248c6d52175
msgid "Before Django 1.1 goes final, at least one other preview/development release will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:170
# f0b85def1f03435eb2e0239f02ede2cb
msgid "If deemed necessary, additional beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:176
# da9c7f5508b3457798fe3b9deb32bc8b
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:3
# b8ff0e7001854bc590b5b8e1c77f12fb
msgid "Django 1.1 RC 1 release notes"
msgstr ""

#: ../../releases/1.1-rc-1.txt:6
# 688ddf5e12924fc8a837e5b632ee873e
msgid "July 21, 2009"
msgstr ""

#: ../../releases/1.1-rc-1.txt:8
# 82338af4ce994854aa799a9b93347593
msgid "Welcome to the first Django 1.1 release candidate!"
msgstr ""

#: ../../releases/1.1-rc-1.txt:10
# 8ba2c82978b54659b5f33b623fa763f5
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place approximately one week after this release candidate. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:18
#: ../../releases/1.2-rc-1.txt:17
# adbd5cdb64b345a292e85a9f44e45706
# 684b488b41444f6188120405e1e9ca6b
msgid "As such, this release is not yet intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.1-rc-1.txt:23
# cfbb9a0c5773421c86e7dae1944b7625
msgid "What's new in Django 1.1 RC 1"
msgstr ""

#: ../../releases/1.1-rc-1.txt:25
# b1479aa5b3f2410a8c913439ea736d2f
msgid "The Django codebase has -- with one exception -- been in feature freeze since the first 1.1 beta release, and so this release candidate contains only one new feature (see below); work leading up to this release candidate has instead been focused on bugfixing, particularly on the new features introduced prior to the 1.1 beta."
msgstr ""

#: ../../releases/1.1-rc-1.txt:31
# b2c2386713734ba88db4110f72c98883
msgid "For an overview of those features, consult :doc:`the Django 1.1 beta release notes </releases/1.1-beta-1>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:38
# e31eaabce72744f78bfb3a0094ddd537
msgid "The 1.1 beta release introduced the ability to use reverse URL resolution with Django's admin application, which exposed a set of :ref:`named URLs <naming-url-patterns>`. Unfortunately, achieving consistent and correct reverse resolution for admin URLs proved extremely difficult, and so one additional feature was added to Django to resolve this issue: URL namespaces."
msgstr ""

#: ../../releases/1.1-rc-1.txt:45
# 2fe83a7378d6445d9b6b30a0eb68207d
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:52
# 931a909953114881867691917f37ad9d
msgid "Due to the changes needed to support this feature, the URL pattern names used when reversing admin URLs have changed since the 1.1 beta release; if you were developing applications which took advantage of this new feature, you will need to update your code to reflect the new names (for most purposes, changing ``admin_`` to ``admin:`` in names to be reversed will suffice). For a full list of URL pattern names used by the admin and information on how namespaces are applied to them, consult the documentation on :ref:`reversing admin URLs <admin-reverse-urls>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:66
# 0148c1423272444190965137e5d13cf5
msgid "As of this release candidate, Django 1.1 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.1 release. Only critical release-blocking bugs will receive attention between now and the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:72
# 999db2b778024741b61b4345c346f30b
msgid "If no such bugs are discovered, Django 1.1 will be released approximately one week after this release candidate, on or about July 28, 2009."
msgstr ""

#: ../../releases/1.1-rc-1.txt:80
# d7263667cd0941bbb088b18f0c4f145d
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:89
#: ../../releases/1.2-rc-1.txt:81
# 8f5d67519fe64689acc12e485079dd44
# df8e4be1917346629274f8c874b89957
msgid "Please open a new ticket only if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.1.2.txt:3
# 4a05dbace4734d929ad70a49108a2d91
msgid "Django 1.1.2 release notes"
msgstr ""

#: ../../releases/1.1.2.txt:5
# 639b0c618e9d4cbe89098052bf9802c4
msgid "Welcome to Django 1.1.2!"
msgstr ""

#: ../../releases/1.1.2.txt:7
# 3fc7bfa38b914467bf43da6478c6ce2d
msgid "This is the second \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.2.txt:10
# 08adb057631d4be8835663f0705648cd
msgid "Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but contain a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.2.txt:15
#: ../../releases/1.1.3.txt:15
#: ../../releases/1.1.4.txt:15
# 2ffa139cee1342469c956109eadf6259
# 47dcf72f6e394c389300108ad9e27b20
# a6b3e7dfb00f4b3e9a764c1b33ddba41
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

#: ../../releases/1.1.2.txt:19
# d11d4d59bca84ab9a1143c20c19754b3
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

#: ../../releases/1.1.2.txt:22
#: ../../releases/1.2.txt:675
#: ../../releases/1.2-alpha-1.txt:181
# 89b76294bef8428baaa6f5a9a0df359d
# 88b61be9311347edab1ccbda058eeabd
# 73a10eb8559240da852fb634310d3fc9
msgid "Test runner exit status code"
msgstr ""

#: ../../releases/1.1.2.txt:24
#: ../../releases/1.2-alpha-1.txt:183
# cf81806995e94a7b831f39c3168d4ec8
# e4f969db94964c27bd26e6e62d878ca5
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, since a failure of 256 or more tests resulted in a wrong exit status code.  The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures.  If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.1.2.txt:32
#: ../../releases/1.2.txt:685
#: ../../releases/1.2-beta-1.txt:66
# 0927749ce68d467faf715a9207ea2ee2
# 35795d927adf4d548e7cddca029ff1b8
# f55e6d1f4db3499c8c1c984e83a5824c
msgid "Cookie encoding"
msgstr ""

#: ../../releases/1.1.2.txt:34
# 76dd7fbfd3c147919138945994deec9d
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the characters comma and semi-colon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.1.2.txt:43
#: ../../releases/1.2.2.txt:19
#: ../../releases/1.2.4.txt:53
# 7fb659df3a3a48f28afccba8ec66d0f0
# ec16d6ad61174f06a6d5f86549c91fd9
# d2d9319c3c0147dbbe73ca9e1ca7ccd7
msgid "One new feature"
msgstr ""

#: ../../releases/1.1.2.txt:45
# 0f18a817e2684caa978211f14af3cfe0
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the next major release of Django) will contain a feature that will improve protection against Cross-Site Request Forgery (CSRF) attacks. This feature requires the use of a new :ttag:`csrf_token` template tag in all forms that Django renders."
msgstr ""

#: ../../releases/1.1.2.txt:52
# 752a1724d2e143a0a9d0e32933c434bd
msgid "To make it easier to support both 1.1.X and 1.2.X versions of Django with the same templates, we have decided to introduce the :ttag:`csrf_token` template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` does nothing - it has no effect on templates or form processing. However, it means that the same template will work with Django 1.2."
msgstr ""

#: ../../releases/1.1.3.txt:3
# 50448361155c4a9b9af4d25a7b294a69
msgid "Django 1.1.3 release notes"
msgstr ""

#: ../../releases/1.1.3.txt:5
# c7bc82469c5645408a8771f63d101edf
msgid "Welcome to Django 1.1.3!"
msgstr ""

#: ../../releases/1.1.3.txt:7
# c0dac5fd86734f58bec6b5d33fa8b882
msgid "This is the third \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.3.txt:10
# aeaf7d756dee4e72adf01d86f539112a
msgid "With one exception, Django 1.1.3 maintains backwards compatibility with Django 1.1.2. It also contains a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.3.txt:19
#: ../../releases/1.1.4.txt:19
#: ../../releases/1.2.4.txt:19
#: ../../releases/1.2.5.txt:19
# 6d97528d7a2a4363bdf980b524209162
# 758b9ed0ba7142c8a51dc2bfc5be573c
# 39cdff2ec9df4137b41c54e03a60d482
# dcceec3a32a94806b1ea0dd6f35b57f5
msgid "Backwards incompatible changes"
msgstr ""

#: ../../releases/1.1.3.txt:22
#: ../../releases/1.2.4.txt:22
#: ../../releases/1.3.txt:352
# 23f450f35a9b426999c30f03b1ff4d09
# 1eb0973e85a34650993508bc15819b4a
# d606ae45e5624f51a0f3ac23622001b6
msgid "Restricted filters in admin interface"
msgstr ""

#: ../../releases/1.1.3.txt:24
#: ../../releases/1.2.4.txt:24
# 3583368d2a474243aa5a7b09bd6ea17b
# 810c27d40f0d48909ddad5dc05b82d3e
msgid "The Django administrative interface, django.contrib.admin, supports filtering of displayed lists of objects by fields on the corresponding models, including across database-level relationships. This is implemented by passing lookup arguments in the querystring portion of the URL, and options on the ModelAdmin class allow developers to specify particular fields or relationships which will generate automatic links for filtering."
msgstr ""

#: ../../releases/1.1.3.txt:32
#: ../../releases/1.2.4.txt:32
# b546962841864301b2e3c28059173226
# 6c46d1c912d94c089be5ee3d61d55df6
msgid "One historically-undocumented and -unofficially-supported feature has been the ability for a user with sufficient knowledge of a model's structure and the format of these lookup arguments to invent useful new filters on the fly by manipulating the querystring."
msgstr ""

#: ../../releases/1.1.3.txt:37
#: ../../releases/1.2.4.txt:37
# 2bfdf388aa1046528d14f1a8ebfae98c
# 625790544c7e4a898f3cb46437b131f2
msgid "However, it has been demonstrated that this can be abused to gain access to information outside of an admin user's permissions; for example, an attacker with access to the admin and sufficient knowledge of model structure and relations could construct query strings which -- with repeated use of regular-expression lookups supported by the Django database API -- expose sensitive information such as users' password hashes."
msgstr ""

#: ../../releases/1.1.3.txt:45
#: ../../releases/1.2.4.txt:45
# f971dd8fc4914f0fb36a3155fac0ffe1
# 99b86200fed447d5910e586b0d568b03
msgid "To remedy this, django.contrib.admin will now validate that querystring lookup arguments either specify only fields on the model being viewed, or cross relations which have been explicitly whitelisted by the application developer using the pre-existing mechanism mentioned above. This is backwards-incompatible for any users relying on the prior ability to insert arbitrary lookups."
msgstr ""

#: ../../releases/1.1.4.txt:3
# 8197abf8897d491cb9c5b9b45b10e7d8
msgid "Django 1.1.4 release notes"
msgstr ""

#: ../../releases/1.1.4.txt:5
# 33759e46765b4786a07709498713efa3
msgid "Welcome to Django 1.1.4!"
msgstr ""

#: ../../releases/1.1.4.txt:7
# 9eaadc08c562473e99b88b812c34f331
msgid "This is the fourth \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.4.txt:10
# 75ab3642b770416b94f18a31acdaf018
msgid "With one exception, Django 1.1.4 maintains backwards compatibility with Django 1.1.3. It also contains a number of fixes and other improvements. Django 1.1.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.4.txt:22
#: ../../releases/1.2.5.txt:22
# 860a36b4a8184b8785854d555242dd4a
# c7979619340e4237927f9ca0c98b77f8
msgid "CSRF exception for AJAX requests"
msgstr ""

#: ../../releases/1.1.4.txt:24
#: ../../releases/1.2.5.txt:24
# 3f06356f356243b089ec95f54d8170f3
# 6f65050a1cc74d6c93977110efa5138d
msgid "Django includes a CSRF-protection mechanism, which makes use of a token inserted into outgoing forms. Middleware then checks for the token's presence on form submission, and validates it."
msgstr ""

#: ../../releases/1.1.4.txt:28
#: ../../releases/1.2.5.txt:28
# 8fb05b313bd94b03bd789ffcd0d8e7fc
# 426cee2a39c44e5db09f580e90fbd9b2
msgid "Prior to Django 1.2.5, our CSRF protection made an exception for AJAX requests, on the following basis:"
msgstr ""

#: ../../releases/1.1.4.txt:31
#: ../../releases/1.2.5.txt:31
# 2918442f22a84b61bdede3ab67978508
# acfc3d2be02d4726ab7dd3ed70f66c47
msgid "Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:34
#: ../../releases/1.2.5.txt:34
# 17407430e7be4f3bb1cb459e65b504fd
# 466caad76feb4103a6324d0da8f84142
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:37
#: ../../releases/1.2.5.txt:37
# 3e6f8f204e9e46acac3bbdf48f7f16be
# 40d18da22ee3433fbccf6f9d28394bac
msgid "In the context of a browser, the only way that a custom header of this nature can be added is with XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:40
#: ../../releases/1.2.5.txt:40
# 4a58e7d11ffd4fda89c798f47217e479
# ed3a3bf62e954d15bba2f6e5e10afffe
msgid "Therefore, for ease of use, we did not apply CSRF checks to requests that appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on Rails web framework had a similar exemption."
msgstr ""

#: ../../releases/1.1.4.txt:44
#: ../../releases/1.2.5.txt:44
# 7e8977a29c054d5292603fd3ee37f8ea
# c41d31511c37423eb11e55f5fff2d630
msgid "Recently, engineers at Google made members of the Ruby on Rails development team aware of a combination of browser plugins and redirects which can allow an attacker to provide custom HTTP headers on a request to any website. This can allow a forged request to appear to be an AJAX request, thereby defeating CSRF protection which trusts the same-origin nature of AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:51
#: ../../releases/1.2.5.txt:51
# ff1fb72e57fe4fbfbb4d09cb89e3e01e
# ad4c7e11eb1f4bf3bfb0caeb30a419a6
msgid "Michael Koziarski of the Rails team brought this to our attention, and we were able to produce a proof-of-concept demonstrating the same vulnerability in Django's CSRF handling."
msgstr ""

#: ../../releases/1.1.4.txt:55
#: ../../releases/1.2.5.txt:55
# e312d9ded6bd4b16a3b17ee8fdfe3454
# 82134c94383c444e9f04a6ed5ba6b36e
msgid "To remedy this, Django will now apply full CSRF validation to all requests, regardless of apparent AJAX origin. This is technically backwards-incompatible, but the security risks have been judged to outweigh the compatibility concerns in this case."
msgstr ""

#: ../../releases/1.1.4.txt:60
#: ../../releases/1.2.5.txt:60
# dae765a89bbc41d18e938d488a0cd556
# c83f5efa5b5e4d759f078a2ea2f5f2f6
msgid "Additionally, Django will now accept the CSRF token in the custom HTTP header X-CSRFTOKEN, as well as in the form submission itself, for ease of use with popular JavaScript toolkits which allow insertion of custom headers into all AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:65
#: ../../releases/1.2.5.txt:65
# ee526df624cc4c988792bce3b4d8d9ba
# 2d42fc2f91b0442fbf5b5058fee97aba
msgid "Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that demonstrates this technique, ensuring that you are looking at the documentation for your version of Django, as the exact code necessary is different for some older versions of Django."
msgstr ""

#: ../../releases/1.2.txt:3
# cd0dd3fb8b0b4bbe97ab09f29a704f24
msgid "Django 1.2 release notes"
msgstr ""

#: ../../releases/1.2.txt:5
# d294062bc2d3462b966633b8ab8a84ff
msgid "*May 17, 2010.*"
msgstr ""

#: ../../releases/1.2.txt:7
# 3b185f705a594151861131407d6e0d39
msgid "Welcome to Django 1.2!"
msgstr ""

#: ../../releases/1.2.txt:9
# ef34dda33c324cbe8bc3c96ba318c5f5
msgid "Nearly a year in the making, Django 1.2 packs an impressive list of `new features`_ and lots of bug fixes. These release notes cover the new features, as well as important changes you'll want to be aware of when upgrading from Django 1.1 or older versions."
msgstr ""

#: ../../releases/1.2.txt:17
#: ../../releases/1.3.txt:16
#: ../../releases/1.4.txt:21
# dfbca9386d7044e3b1430cc0215eaec9
# 8d2b9050c30c444d828518cf0027b6eb
# f279d8739aa34c0f839a2f218940e715
msgid "Overview"
msgstr ""

#: ../../releases/1.2.txt:19
# afae64eed0984a839b4c05d814b1c0d7
msgid "Django 1.2 introduces several large, important new features, including:"
msgstr ""

#: ../../releases/1.2.txt:21
# 328f0d5e58be4c8bb65f28312f0f2f34
msgid "Support for `multiple database connections`_ in a single Django instance."
msgstr ""

#: ../../releases/1.2.txt:23
# 03a8476fe94044cfa2217cb9bbf27abf
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

#: ../../releases/1.2.txt:25
# a4323fd88e524719a58ce3656d5dcd1b
msgid "Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

#: ../../releases/1.2.txt:27
# 57f56ad931d2400aa3fe16c5384e4770
msgid "A new `user \"messages\" framework`_ with support for cookie- and session-based message for both anonymous and authenticated users."
msgstr ""

#: ../../releases/1.2.txt:30
# 20645e7425a3413ca66a75153a29f1c9
msgid "Hooks for `object-level permissions`_, `permissions for anonymous users`_, and `more flexible username requirements`_."
msgstr ""

#: ../../releases/1.2.txt:33
# 68c1b6ef6eb8489ab269cdcf83cf6e35
msgid "Customization of email sending via `email backends`_."
msgstr ""

#: ../../releases/1.2.txt:35
# baa7bfdd71634b078303cc191743a061
msgid "New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports comparison operators."
msgstr ""

#: ../../releases/1.2.txt:43
# c808749548194f799222d257ba86c966
msgid "These are just the highlights; full details and a complete list of features `may be found below`_."
msgstr ""

#: ../../releases/1.2.txt:50
# 5167c598b57d4c879830a57004d87f38
msgid "`Django Advent`_ covered the release of Django 1.2 with a series of articles and tutorials that cover some of the new features in depth."
msgstr ""

#: ../../releases/1.2.txt:55
# 6f68fa074a0b4db299a904a152477a1f
msgid "Wherever possible these features have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy."
msgstr ""

#: ../../releases/1.2.txt:58
# 294032100c4a469e90de1d592e386334
msgid "However, a handful of features *have* changed in ways that, for some users, will be backwards-incompatible. The big changes are:"
msgstr ""

#: ../../releases/1.2.txt:61
# 1747081522104a04948540b5749ce752
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

#: ../../releases/1.2.txt:64
# df15bf7e56604bb3abed3f8ede03c7fa
msgid "The new CSRF protection framework is not backwards-compatible with the old system. Users of the old system will not be affected until the old system is removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:68
# c130ca8de46b48028e65889b3d0ca088
msgid "However, upgrading to the new CSRF protection framework requires a few important backwards-incompatible changes, detailed in `CSRF Protection`_, below."
msgstr ""

#: ../../releases/1.2.txt:72
# ad83d54bb6ed4543b94c1a03352dc50e
msgid "Authors of custom :class:`~django.db.models.Field` subclasses should be aware that a number of methods have had a change in prototype, detailed under `get_db_prep_*() methods on Field`_, below."
msgstr ""

#: ../../releases/1.2.txt:76
# 1565319694cf446c9141c4b814c4564b
msgid "The internals of template tags have changed somewhat; authors of custom template tags that need to store state (e.g. custom control flow tags) should ensure that their code follows the new rules for `stateful template tags`_"
msgstr ""

#: ../../releases/1.2.txt:81
# 9683de2e0f124a2ebf390a7539b49d4a
msgid "The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django.contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth.decorators.permission_required`, decorators from :mod:`django.contrib.auth` only apply to functions and no longer work on methods. There's a simple one-line fix `detailed below`_."
msgstr ""

#: ../../releases/1.2.txt:89
# ceb6d50110a241dab0e34b8a43fe0e39
msgid "Again, these are just the big features that will affect the most users. Users upgrading from previous versions of Django are heavily encouraged to consult the complete list of :ref:`backwards-incompatible changes <backwards-incompatible-changes-1.2>` and the list of :ref:`deprecated features <deprecated-features-1.2>`."
msgstr ""

#: ../../releases/1.2.txt:96
#: ../../releases/1.2-rc-1.txt:28
#: ../../releases/1.3.txt:54
#: ../../releases/1.4.txt:63
#: ../../releases/1.4-alpha-1.txt:28
#: ../../releases/1.4-beta-1.txt:44
# 57433d546c104740bbd915593e589e0a
# 0129fa52dc3f4ec08d702e8dc6d3b018
# 475e5a1ac295483983cb43bdf6e96a43
# a23f67e007354d7b997adf71118dd14f
# 835070fabf814e93b56411315d7e7ccc
# 6e399c1a5921487b88abe6466db07033
msgid "Python compatibility"
msgstr ""

#: ../../releases/1.2.txt:98
#: ../../releases/1.2-rc-1.txt:30
# 71967e8c83244e1fa5c643f3c647a6f9
# eeecad309cb642238dc70ffd5128b3dd
msgid "While not a new feature, it's important to note that Django 1.2 introduces the first shift in our Python compatibility policy since Django's initial public debut. Previous Django releases were tested and supported on 2.x Python versions from 2.3 up; Django 1.2, however, drops official support for Python 2.3. As such, the minimum Python version required for Django is now 2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will be supported on the as-yet-unreleased Python 2.7."
msgstr ""

#: ../../releases/1.2.txt:107
#: ../../releases/1.2-rc-1.txt:39
# 1dc9a397c1c843db80a9cad84adfab5f
# abc7c7cd20784921bf312e982468b445
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.4 or newer as their default version. If you're still using Python 2.3, however, you'll need to stick to Django 1.1 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.1 will continue to receive security support until the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:114
#: ../../releases/1.2-rc-1.txt:46
# a35ec8b10688401eb0a70c7d67ecbb12
# 85eff840441e4d5891597aefe4fa1ea7
msgid "A roadmap for Django's overall 2.x Python support, and eventual transition to Python 3.x, is currently being developed, and will be announced prior to the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:119
# cb5b7efd0b8e4cad84deeb482da4f399
msgid "What's new in Django 1.2"
msgstr ""

#: ../../releases/1.2.txt:122
#: ../../releases/1.2-alpha-1.txt:427
# 08b168c7fd024787a212c1bbfe980d73
# 9e48ac9c6905410baca7d3ebfade461e
msgid "Support for multiple databases"
msgstr ""

#: ../../releases/1.2.txt:124
# 97c0f3be683242479f6e6a47d4b19797
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the `using()` method on ``QuerySet`` objects. Individual objects can be saved to a specific database by providing a ``using`` argument when you call ``save()``."
msgstr ""

#: ../../releases/1.2.txt:131
# 1123aff2615b48fc9d5e44de9c85dc75
msgid "Model validation"
msgstr ""

#: ../../releases/1.2.txt:133
# 78cb3b90416042839f326ff2af322c97
msgid "Model instances now have support for :ref:`validating their own data <validating-objects>`, and both model and form fields now accept configurable lists of :doc:`validators </ref/validators>` specifying reusable, encapsulated validation behavior. Note, however, that validation must still be performed explicitly. Simply invoking a model instance's ``save()`` method will not perform any validation of the instance's data."
msgstr ""

#: ../../releases/1.2.txt:141
# 9fcab11c99334c7c8609437574f80c7e
msgid "Improved CSRF protection"
msgstr ""

#: ../../releases/1.2.txt:143
# e9e692a622074211ac15ed81a0a0d9fc
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some JavaScript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, \"login CSRF,\" where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2.txt:152
# 1959835e877c4632b598f2a347262184
msgid "Messages framework"
msgstr ""

#: ../../releases/1.2.txt:154
#: ../../releases/1.2-alpha-1.txt:419
# 3732941e995a4647a439c02295d77734
# b30a138b7e0049ceb1474505078127ee
msgid "Django now includes a robust and configurable :doc:`messages framework </ref/contrib/messages>` with built-in support for cookie- and session-based messaging, for both anonymous and authenticated clients. The messages framework replaces the deprecated user message API and allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one)."
msgstr ""

#: ../../releases/1.2.txt:162
#: ../../releases/1.2-beta-1.txt:87
# 7d80dbdd0875483abe47509633cde643
# df1cae8aae2a409184845a73fd5770ef
msgid "Object-level permissions"
msgstr ""

#: ../../releases/1.2.txt:164
# 4166e7a1d33446cab636fab355408a5e
msgid "A foundation for specifying permissions at the per-object level has been added. Although there is no implementation of this in core, a custom authentication backend can provide this implementation and it will be used by :class:`django.contrib.auth.models.User`. See the :doc:`authentication docs </topics/auth>` for more information."
msgstr ""

#: ../../releases/1.2.txt:171
#: ../../releases/1.2-beta-1.txt:99
# 7df51100c39c43e3b87e5d877add2860
# aa6378e37e1e46d499af1b400df95bd1
msgid "Permissions for anonymous users"
msgstr ""

#: ../../releases/1.2.txt:173
# 84107623710a4eec9855e54b43534e22
msgid "If you provide a custom auth backend with ``supports_anonymous_user`` set to ``True``, AnonymousUser will check the backend for permissions, just like User already did.  This is useful for centralizing permission handling - apps can always delegate the question of whether something is allowed or not to the authorization/authentication backend. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.2.txt:181
# d891703c3ba74a9b9f428979b02ab1a2
msgid "Relaxed requirements for usernames"
msgstr ""

#: ../../releases/1.2.txt:183
# 93ed0e1804ee46b7b9d72d23a5bd1013
msgid "The built-in :class:`~django.contrib.auth.models.User` model's :attr:`~django.contrib.auth.models.User.username` field now allows a wider range of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../releases/1.2.txt:188
# 459fcd72f4f64ae789e5dbc1f7c82710
msgid "Email backends"
msgstr ""

#: ../../releases/1.2.txt:190
#: ../../releases/1.2-alpha-1.txt:401
# 3514186f60e24d4db389b4b4c6d75ab1
# 7fbd4b2eb8f3478f9f063858a817ebc8
msgid "You can now :ref:`configure the way that Django sends email <topic-email-backends>`. Instead of using SMTP to send all email, you can now choose a configurable email backend to send messages. If your hosting provider uses a sandbox or some other non-SMTP technique for sending mail, you can now construct an email backend that will allow Django's standard :doc:`mail sending methods</topics/email>` to use those facilities."
msgstr ""

#: ../../releases/1.2.txt:198
# 33a1f535a761419491191598d9a0e67c
msgid "This also makes it easier to debug mail sending. Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>`. You can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2.txt:208
# c0cf3864196a43bb84b53156f4c3a97b
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

#: ../../releases/1.2.txt:210
# 7c4f355e8197456caa90b6698cd5bb6e
msgid "The :ttag:`if` tag has been upgraded to be much more powerful. First, we've added support for comparison operators. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2.txt:219
# 9effb9fc297f45a0b3f4e810f70e96cd
msgid "You can now do this:"
msgstr ""

#: ../../releases/1.2.txt:227
# ce3a3d15148445b6b35865de819f0205
msgid "There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` anymore, unless you're the nostalgic type."
msgstr ""

#: ../../releases/1.2.txt:230
# 09977e6f490a46e7abb8c50cfad097f6
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, ``in`` and ``not in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

#: ../../releases/1.2.txt:234
#: ../../releases/1.2-alpha-1.txt:459
# 8863a59f8f0049c1adf3d0b0ec38b2a1
# 39c25811263a48fe986861eb0c414f49
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

#: ../../releases/1.2.txt:245
#: ../../releases/1.2-alpha-1.txt:470
# d985e837ec224a668e54815f819045f0
# 444970f7bb594ce18ce9d1acfdfe96d4
msgid "Template caching"
msgstr ""

#: ../../releases/1.2.txt:247
# 4c6b7b9f3e084328912eced21051f90a
msgid "In previous versions of Django, every time you rendered a template, it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then cache the result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2.txt:255
#: ../../releases/1.2-alpha-1.txt:480
# 2fc137fbd61e4aacbfca4bcadef9d088
# c57ea18d63da4ae6a0d321128ae63b1c
msgid "As a side effect, it is now much easier to support non-Django template languages. For more details, see the :ref:`notes on supporting non-Django template languages<topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2.txt:260
# 0c96732fa338456ea9b1da40c745dfdf
msgid "Class-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:262
# 1fe18f3ca24a4f93aa26c65526554f6f
msgid "As part of the changes made to introduce `Template caching`_  and following a general trend in Django, the template loaders API has been modified to use template loading mechanisms that are encapsulated in Python classes as opposed to functions, the only method available until Django 1.1."
msgstr ""

#: ../../releases/1.2.txt:267
# 1d66c2feb2a5470c84e7aff2934a3da3
msgid "All the template loaders :ref:`shipped with Django <template-loaders>` have been ported to the new API but they still implement the function-based API and the template core machinery still accepts function-based loaders (builtin or third party) so there is no immediate need to modify your :setting:`TEMPLATE_LOADERS` setting in existing projects, things will keep working if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

#: ../../releases/1.2.txt:274
# b4ad64fc8bd0430189965b6d2c7d7142
msgid "If you have developed your own custom template loaders we suggest to consider porting them to a class-based implementation because the code for backwards compatibility with function-based loaders starts its deprecation process in Django 1.2 and will be removed in Django 1.4.  There is a description of the API these loader classes must implement :ref:`here <topic-template-alternate-language>` and you can also examine the source code of the loaders shipped with Django."
msgstr ""

#: ../../releases/1.2.txt:283
#: ../../releases/1.2-alpha-1.txt:485
# 188d03c376eb470bb86d0ad81fa40cdf
# c5ab5580f9274fffa542dcf9e66e78e5
msgid "Natural keys in fixtures"
msgstr ""

#: ../../releases/1.2.txt:285
# e7ca8e4374c844aa8e0b6830273a0178
msgid "Fixtures can now refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2.txt:292
# b1175e43d3ed41ccb2b6c524d7ae820c
msgid "Fast failure for tests"
msgstr ""

#: ../../releases/1.2.txt:294
# 6ac0d4ef51f74270ad2b44efa1510a98
msgid "Both the :djadmin:`test` subcommand of ``django-admin.py`` and the ``runtests.py`` script used to run Django's own test suite now support a ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run. In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests that were run before the interruption."
msgstr ""

#: ../../releases/1.2.txt:303
#: ../../releases/1.2-alpha-1.txt:494
# 181e7f1f0a9a475d9d93f7c5be64d5c1
# 6d0776eeac594865801b48d4ef51c79f
msgid "``BigIntegerField``"
msgstr ""

#: ../../releases/1.2.txt:305
# 969ea756ebc6493b9b1919c2f1389d6d
msgid "Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2.txt:308
#: ../../releases/1.2-alpha-1.txt:509
# 013b3e8e253040388f79755d4759e9c9
# c4fd525538ad469f904c5e387af9b6b8
msgid "Improved localization"
msgstr ""

#: ../../releases/1.2.txt:310
# ab21bc82c53448c48866450c2ee97edb
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded with locale-aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2.txt:317
# 3677326367d8458496d18be26a4815cc
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2.txt:319
# 70d7415160e7467090024e50a273468f
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed alongside editable fields."
msgstr ""

#: ../../releases/1.2.txt:324
#: ../../releases/1.2-alpha-1.txt:526
# 946b166500604874a4613626206684ff
# b5cf3da81ff74d769d16168f6cbc7ded
msgid "Customizable syntax highlighting"
msgstr ""

#: ../../releases/1.2.txt:326
# c9f3d7ceb79142d8a18b51130178adc8
msgid "You can now use a ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2.txt:331
# 2eed451002054a4b827d1723c769a133
msgid "Syndication feeds as views"
msgstr ""

#: ../../releases/1.2.txt:333
# 8585f8a8695342c2b21d42772f5e3004
msgid ":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly as views in your :doc:`URLconf </topics/http/urls>`. This means that you can maintain complete control over the URL structure of your feeds. Like any other view, feeds views are passed a ``request`` object, so you can do anything you would normally do with a view, like user based access control, or making a feed a named URL."
msgstr ""

#: ../../releases/1.2.txt:343
# 0eca28f783ca498e994a38895abbc1e6
msgid "The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/index>` in 1.2 is support for multiple spatial databases.  As a result, the following :ref:`spatial database backends <spatial-backends>` are now included:"
msgstr ""

#: ../../releases/1.2.txt:348
# eb18ec7d662d4c31ac916beed7a715f3
msgid ":mod:`django.contrib.gis.db.backends.postgis`"
msgstr ""

#: ../../releases/1.2.txt:349
# 36befab469f740598732f78fcf3dae14
msgid ":mod:`django.contrib.gis.db.backends.mysql`"
msgstr ""

#: ../../releases/1.2.txt:350
# 222f89dabe5244d5984a99e650cb68fd
msgid ":mod:`django.contrib.gis.db.backends.oracle`"
msgstr ""

#: ../../releases/1.2.txt:351
# a6e9a3e35d3247c5a03e0c50100eb17b
msgid ":mod:`django.contrib.gis.db.backends.spatialite`"
msgstr ""

#: ../../releases/1.2.txt:353
# 92cd8362c25f4d8299bee6e2fcb09f33
msgid "GeoDjango now supports the rich capabilities added in the `PostGIS 1.5 release <http://postgis.refractions.net/documentation/manual-1.5/>`_. New features include suppport for the :ref:`geography type <geography-type>` and enabling of :ref:`distance queries <distance-queries>` with non-point geometries on geographic coordinate systems."
msgstr ""

#: ../../releases/1.2.txt:359
# b113f689020f4704ab0238d5d375ded5
msgid "Support for 3D geometry fields was added, and may be enabled by setting the :attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django.contrib.gis.db.models.Extent3D` aggregate and :meth:`~django.contrib.gis.db.models.GeoQuerySet.extent3d` ``GeoQuerySet`` method were added as a part of this feature."
msgstr ""

#: ../../releases/1.2.txt:366
# 173cd13c34f24ceb89d074093b3a09af
msgid "The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are new in 1.2:"
msgstr ""

#: ../../releases/1.2.txt:369
# 9fbd2fb7625847f98311c28eceb2a2c3
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

#: ../../releases/1.2.txt:370
# 1f3ec005080d474cace760339df63520
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../releases/1.2.txt:371
# d0a4c31113f64b05a559450348654583
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

#: ../../releases/1.2.txt:373
# 0661031243404930966c6a973bcd73a1
msgid "The :ref:`GEOS interface <ref-geos>` was updated to use thread-safe C library functions when available on the platform."
msgstr ""

#: ../../releases/1.2.txt:376
# 8cc7b4fe912f400fbaebe98844de3e5c
msgid "The :ref:`GDAL interface <ref-gdal>` now allows the user to set a :attr:`~django.contrib.gis.gdal.Layer.spatial_filter` on the features returned when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../releases/1.2.txt:381
# 134e7c08732a48c2b5a7492cbddc87aa
msgid "Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now included with Django's and is no longer hosted separately at `geodjango.org <http://geodjango.org/>`_."
msgstr ""

#: ../../releases/1.2.txt:388
# 4c74438d01d548d8a8a5f732be5a79ec
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

#: ../../releases/1.2.txt:390
# ece3fa3d832745a6846a888feef89dd5
msgid "If a user has JavaScript enabled in their browser, the interface for inline objects in the admin now allows inline objects to be dynamically added and removed. Users without JavaScript-enabled browsers will see no change in the behavior of inline objects."
msgstr ""

#: ../../releases/1.2.txt:396
# 8badc9969cad4812be83b521283a4ffd
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

#: ../../releases/1.2.txt:398
# d0e2b3903cf2494a8114f3a8f1ceda25
msgid "The argument to the :ttag:`now` has gained two new format characters: ``c`` to specify that a datetime value should be formatted in ISO 8601 format, and ``u`` that allows output of the microseconds part of a datetime or time value."
msgstr ""

#: ../../releases/1.2.txt:403
# 2f6429e8bc2c48239a579cc7e99fc8e8
msgid "These are also available in others parts like the :tfilter:`date` and :tfilter:`time` template filters, the ``humanize`` template tag library and the new `format localization`_ framework."
msgstr ""

#: ../../releases/1.2.txt:412
#: ../../releases/1.2-alpha-1.txt:20
# 2a0a85967e684d389ba5903e8594a680
# f220f84010c24e63b3f597fd9411e742
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

#: ../../releases/1.2.txt:414
# ea504362dc4b4cf4bc7932ed9c911aea
msgid "Wherever possible the new features above have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. This means that practically all existing code which worked with Django 1.1 will continue to work with Django 1.2; such code will, however, begin issuing warnings (see below for details)."
msgstr ""

#: ../../releases/1.2.txt:421
# a0e8d68439fd403faff798af686f44db
msgid "However, a handful of features *have* changed in ways that, for some users, will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""

#: ../../releases/1.2.txt:426
#: ../../releases/1.2-alpha-1.txt:23
# 13b3ca3ac4304a409e31534a208d9f0e
# e7a1c4abd6cc4ea4b2cc35e47e125252
msgid "CSRF Protection"
msgstr ""

#: ../../releases/1.2.txt:428
# 42be6ff12ba84e19b46b70017c761b4a
msgid "We've made large changes to the way CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`. Here are the major changes you should be aware of:"
msgstr ""

#: ../../releases/1.2.txt:432
# db1baf2edf0648ce87ab9f66e97f6617
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and will be removed completely in Django 1.4, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2.txt:436
# a8224c3fd4e84df3ae0753ed73634f14
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template. If you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2.txt:443
#: ../../releases/1.2.txt:871
#: ../../releases/1.2-alpha-1.txt:40
#: ../../releases/1.2-alpha-1.txt:208
# 513dd7ed675c4eb1a1dfcadb20ce0aed
# fb30d80c970143d5b819537b05171d3e
# 3495dc327dae49b98dfa69e260ee8ffd
# dbb899ee30aa461280ba066754f6d4c5
msgid "The upgrade notes have been removed in current Django docs. Please refer to the docs for Django 1.3 or older to find these instructions."
msgstr ""

#: ../../releases/1.2.txt:446
# 5ce1f953405b4130bb6341a7c7b5f73c
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2.txt:451
# 174b51fe1b6d422e98594df48e8aa7a2
msgid "All of the CSRF has moved from contrib to core (with backwards compatible imports in the old locations, which are deprecated and will cease to be supported in Django 1.4)."
msgstr ""

#: ../../releases/1.2.txt:456
# 8c15327c46ee4dcaa356e8f33d4f84c4
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

#: ../../releases/1.2.txt:458
# 7058474c870e402185e73872a6dabcec
msgid "Prior to Django 1.2, a custom ``Field`` had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2.txt:476
#: ../../releases/1.2-alpha-1.txt:117
# 28d3fd77572146d1af5a2261a2a2e536
# e471be9b25294042b223d9ccb4a29fcd
msgid "In 1.2, these three methods have undergone a change in prototype, and two extra methods have been introduced::"
msgstr ""

#: ../../releases/1.2.txt:500
# 8f5db977b12d4edf9775e1c0449222b3
msgid "These changes are required to support multiple databases -- ``db_type`` and ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2.txt:506
# 9988c0e75d73428b9cabf6b12b498ebc
msgid "The two new methods exist to differentiate general data-preparation requirements from requirements that are database-specific. The ``prepared`` argument is used to indicate to the database-preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2.txt:514
# da49f0a9bffc4a35816962014a0f654b
msgid "We've provided conversion functions that will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, these conversion functions will be removed in Django 1.4, so you should upgrade your ``Field`` definitions to use the new prototype as soon as possible."
msgstr ""

#: ../../releases/1.2.txt:520
# d0eaaf1020dd4823ab266f3785000c32
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2.txt:529
#: ../../releases/1.2-alpha-1.txt:167
# d302c2e48c77454d8c37f514a15a4794
# f01d129c4b0b4003b6bde51cff105c0f
msgid "Stateful template tags"
msgstr ""

#: ../../releases/1.2.txt:531
# 0e30cee998b34ce88230daf25ac8d051
msgid "Template tags that store rendering state on their ``Node`` subclass have always been vulnerable to thread-safety and other issues; as of Django 1.2, however, they may also cause problems when used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2.txt:536
# 6908f04719784b3a9d0a6b81b16b7342
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or from your own code, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2.txt:543
# 957072e6d6424def9b9deea6f0276535
msgid "You may also need to update your templates if you were relying on the implementation of Django's template tags *not* being thread safe. The :ttag:`cycle` tag is the most likely to be affected in this way, especially when used in conjunction with the :ttag:`include` tag. Consider the following template fragment::"
msgstr ""

#: ../../releases/1.2.txt:553
# ca90309fbba646be976685d72852b43d
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

#: ../../releases/1.2.txt:557
# 35009bfac0a84704be5db3eaac20ca85
msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

#: ../../releases/1.2.txt:561
# cb6eb5617f1c4fc5ba9fa2f1d1122652
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

#: ../../releases/1.2.txt:565
# 259ac72add8640f490ed343a80caf15e
msgid "This is because each rendering of the :ttag:`include` tag is an independent rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :ttag:`cycle` tag would leak between multiple renderings of the same :ttag:`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no longer occurs."
msgstr ""

#: ../../releases/1.2.txt:572
# c2402a74fe7b467d8b5fd44413687509
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

#: ../../releases/1.2.txt:574
# dce478a6bdae482fbbf8dcab04a8c717
msgid "``django.contrib.auth.decorators`` provides the decorators ``login_required``, ``permission_required`` and ``user_passes_test``. Previously it was possible to use these decorators both on functions (where the first argument is 'request') and on methods (where the first argument is 'self', and the second argument is 'request'). Unfortunately, flaws were discovered in the code supporting this: it only works in limited circumstances, and produces errors that are very difficult to debug when it does not work."
msgstr ""

#: ../../releases/1.2.txt:584
# a64903d950154fca888bf24f488c949e
msgid "For this reason, the 'auto adapt' behavior has been removed, and if you are using these decorators on methods, you will need to manually apply :func:`django.utils.decorators.method_decorator` to convert the decorator to one that works with methods. For example, you would change code from this::"
msgstr ""

#: ../../releases/1.2.txt:606
# 5c0e9e111ec7438bb768f758cc740ebe
msgid "or::"
msgstr ""

#: ../../releases/1.2.txt:618
# e3df75fb93524027a974f64bb3e46186
msgid "For those of you who've been following the development trunk, this change also applies to other decorators introduced since 1.1, including ``csrf_protect``, ``cache_control`` and anything created using ``decorator_from_middleware``."
msgstr ""

#: ../../releases/1.2.txt:624
#: ../../releases/1.2-alpha-1.txt:53
# 915216d1a32645baa0faea221a800c91
# 8a6206f52f07472c888130eca209d993
msgid ":ttag:`if` tag changes"
msgstr ""

#: ../../releases/1.2.txt:626
# bc301679f9ad4421a7a26a44019cd248
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names. Previously, these strings could be used as variable names. Now, the keyword status is always enforced, and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a ``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid variable name in this tag."
msgstr ""

#: ../../releases/1.2.txt:634
#: ../../releases/1.2-alpha-1.txt:62
# a646afca98974adc89ab53df1beed424
# 0371a25346f44a31be193864833049c5
msgid "``LazyObject``"
msgstr ""

#: ../../releases/1.2.txt:636
# 64cc61c3a5244aabae91afb3b983ffd1
msgid "``LazyObject`` is an undocumented-but-often-used utility class used for lazily wrapping other objects of unknown type."
msgstr ""

#: ../../releases/1.2.txt:639
# 77aaa33966b34628b459465ae3f05386
msgid "In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method named ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard Python introspection method, involving ``__members__`` and ``__dir__()``."
msgstr ""

#: ../../releases/1.2.txt:645
# 01c7da24d2f54256b35360db2d70dd17
msgid "If you used ``LazyObject`` in your own code and implemented the ``get_all_members()`` method for wrapped objects, you'll need to make a couple of changes:"
msgstr ""

#: ../../releases/1.2.txt:649
# c78be4c6e2a74554820268a9a2017b92
msgid "First, if your class does not have special requirements for introspection (i.e., you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method. The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2.txt:655
# 6ee7391064e04c92b3a64a21a79b57b6
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``. This is the standard introspection method for Python 2.6 and above. If you require support for Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2.txt:663
# dd9f878786074b03b39bee1f1f304a85
msgid "``__dict__`` on model instances"
msgstr ""

#: ../../releases/1.2.txt:665
#: ../../releases/1.2-alpha-1.txt:89
# 0046f4b876974e23b7304d71f300b28c
# fea86dfe4a664114a1a10d1cdc6891e0
msgid "Historically, the ``__dict__`` attribute of a model instance has only contained attributes corresponding to the fields on a model."
msgstr ""

#: ../../releases/1.2.txt:668
# e612a316696b456fae2585575286db1d
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over ``__dict__`` to obtain a list of fields, you must now be prepared to handle or filter out the ``_state`` attribute."
msgstr ""

#: ../../releases/1.2.txt:677
# f2b79c80792844e0b0887a06a42c1371
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, because a failure of 256 or more tests resulted in a wrong exit status code. The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures. If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.2.txt:687
# 18f3a770121248dd83428a44aa09b1a8
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the comma and semicolon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.2.txt:696
# c5ae05da06024b97857b7382995779d4
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

#: ../../releases/1.2.txt:698
# 69a4dff30c5a4564942b898719aa682c
msgid "Much of the validation work for ModelForms has been moved down to the model level. As a result, the first time you call ``ModelForm.is_valid()``, access ``ModelForm.errors`` or otherwise trigger form validation, your model will be cleaned in-place. This conversion used to happen when the model was saved. If you need an unmodified instance of your model, you should pass a copy to the ``ModelForm`` constructor."
msgstr ""

#: ../../releases/1.2.txt:706
# 0351aadcdc2b433fb9b14c0c09707dfa
msgid "``BooleanField`` on MySQL"
msgstr ""

#: ../../releases/1.2.txt:708
# 790e5652755941bda4613b17dc71ca24
msgid "In previous versions of Django, a model's ``BooleanField`` under MySQL would return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; for most people this wasn't a problem because ``bool`` is a subclass of ``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL correctly returns a real ``bool``.  The only time this should ever be an issue is if you were expecting the ``repr`` of a ``BooleanField`` to print ``1`` or ``0``."
msgstr ""

#: ../../releases/1.2.txt:717
# 2a04f2d818fe4ae6b289745b408f58b2
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

#: ../../releases/1.2.txt:719
# 0e3b3fe4e2cd42699e528476c4a869a4
msgid "As part of enhancements made to the handling of FormSets, the default value and interpretation of the ``max_num`` parameter to the :ref:`django.forms.formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models.modelformset_factory() <model-formsets-max-num>` functions has changed slightly. This change also affects the way the ``max_num`` argument is :ref:`used for inline admin objects <ref-contrib-admin-inline-max-num>`"
msgstr ""

#: ../../releases/1.2.txt:727
# 8bf533f46b834976b7dd7efa2cce576a
msgid "Previously, the default value for ``max_num`` was ``0`` (zero). FormSets then used the boolean value of ``max_num`` to determine if a limit was to be imposed on the number of generated forms. The default value of ``0`` meant that there was no default limit on the number of forms in a FormSet."
msgstr ""

#: ../../releases/1.2.txt:733
# 3fc03836dd0a43528c13669ebc6b72b4
msgid "Starting with 1.2, the default value for ``max_num`` has been changed to ``None``, and FormSets will differentiate between a value of ``None`` and a value of ``0``. A value of ``None`` indicates that no limit on the number of forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms should be imposed. This doesn't necessarily mean that no forms will be displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-num>` for more details."
msgstr ""

#: ../../releases/1.2.txt:742
# 3f2e1459ee4a4bc39c2f5d232b00cca4
msgid "If you were manually specifying a value of ``0`` for ``max_num``, you will need to update your FormSet and/or admin definitions."
msgstr ""

#: ../../releases/1.2.txt:747
# 98330619d8a64344a639a8ea63c80573
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

#: ../../releases/1.2.txt:750
# 6ca1c6910f1a461eaceb246ab1af09c2
msgid "``email_re``"
msgstr ""

#: ../../releases/1.2.txt:752
# 27c60e4d68bc47d3a32a649b82dcef56
msgid "An undocumented regular expression for validating email addresses has been moved from ``django.form.fields`` to ``django.core.validators``. You will need to update your imports if you are using it."
msgstr ""

#: ../../releases/1.2.txt:759
#: ../../releases/1.2-alpha-1.txt:191
# 585d7ae8e0aa4483abc02fad44e7a7f5
# 94eebd60f29f4776b353183fd41d9b02
msgid "Features deprecated in 1.2"
msgstr ""

#: ../../releases/1.2.txt:761
# fa6dc2674b1548e89ed28bae6c34478f
msgid "Finally, Django 1.2 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.2.txt:765
# 62cf98335c384e2d9c9b199a9deeaca6
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or `-Wall` flag."
msgstr ""

#: ../../releases/1.2.txt:770
# 91bbe8401cc944a2a9c9661028db2203
msgid "In Django 1.3, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.4 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.2.txt:776
# 7d703f0a72e942879664c39251ee3614
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`.`"
msgstr ""

#: ../../releases/1.2.txt:783
#: ../../releases/1.2-alpha-1.txt:248
# 8cc80d30e2f04fa4981647b6ddfa0451
# f275ecc92b3049a5b16326e9257419da
msgid "Specifying databases"
msgstr ""

#: ../../releases/1.2.txt:785
# 325914e8d73645f8b3c2847d648a9109
msgid "Prior to Django 1.2, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2.txt:790
# 6088efbe0fa348c090cf85d920d11bf8
msgid "Any existing Django settings file will continue to work as expected until Django 1.4. Until then, old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2.txt:794
# 059fc0ca35a04ab98c1a5dfe4c2851d3
msgid "In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` settings in your settings file. For example::"
msgstr ""

#: ../../releases/1.2.txt:802
# d8bf531694d54a6ca1a72c91a679f254
msgid "These settings are now in a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened. The previous sample settings would now look like this::"
msgstr ""

#: ../../releases/1.2.txt:817
#: ../../releases/1.2-alpha-1.txt:283
# 65e3869cefb044958154ef12a47503e8
# ed316e10304c4621b00a3c291bd76cb9
msgid "This affects the following settings:"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# 5d710da5de964459b784d52c2ac4cbcb
# b594301f8c7c46eea370505f9403ef02
msgid "Old setting"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# b412fe75d50f4acca414b2ccef28560e
# 762f072d1b964355b532cdfce5b1dcb0
msgid "New Setting"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# bcc4f18bea7a4bbabe4963bc2835f29d
# 84df7d67320c4b6ab11b149662e7de5a
msgid ":setting:`DATABASE_ENGINE`"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# b3f87ad83a14479fb8f9400433580c19
# 73afea69a594454bb1fd3dbdcf69cd9d
msgid ":setting:`ENGINE`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# b25a30132fbe4e859656a0ebf8b2b2fc
# aa08b8dab4a641bc8e414b53bbf5d8a8
msgid ":setting:`DATABASE_HOST`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# 97a51327eec14186b5c8f1d26197e9c4
# 8420dde835d44a54ba402cee9ef558ec
msgid ":setting:`HOST`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# fc9640d505fd41eab7b103e4ff5771e0
# 32da12ab3f044496a592b24dc4f7cc35
msgid ":setting:`DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 2b4dfa610faf4d26837374f7fa290fe7
# 3dc51dabdc9f4814bf4469d7c36692c0
msgid ":setting:`NAME`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# cab4943d7d414cefa825a4c200764a92
# 94a8a72ea39f469792400de5089b94d2
msgid ":setting:`DATABASE_OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# ad0cb3239d214946a3c39cead73702a3
# 3e51dd9736d646f3a0ed82ade9e40611
msgid ":setting:`OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# 97648f60fe2e4171b3b2f92b14cabc29
# 2a8dd6a002b7423d84946f10f6398497
msgid ":setting:`DATABASE_PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# c99cc32f360b4505a2643ce606e6146f
# d76b6fac7f2a4bb99b51d7f28db41577
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# 5c1829413fc346a496aeb8362cd03c96
# 56bbdf6a65c84d6ea8e9b78c0644e491
msgid ":setting:`DATABASE_PORT`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# 7883e2ff162447338fa5dec9c392cde8
# 2ccd860684f94fe0a3e683df023b1622
msgid ":setting:`PORT`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# 95e7b069853444baa5e9374dbf670176
# 915a91a22a274914903f49d832447e69
msgid ":setting:`DATABASE_USER`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# ec1607070f874f92a1ebc185476f49e9
# 585a9698d0d44da7bca7b167461af8ad
msgid ":setting:`USER`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# 729d63628a544a58a74a488c4c8b596f
# d05a3517fef041b0956235f6a98c75c1
msgid ":setting:`TEST_DATABASE_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# 76ddf17c1d2f4f15a772067fb9cc1b31
# 61931d7465074fc3b49ab4a0d8402141
msgid ":setting:`TEST_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# e5705515a823427d852adf527a532c6c
# fbddca4965e249d3997eb8db829619d4
msgid ":setting:`TEST_DATABASE_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# 168133e6731b42c182836b98a288783f
# 022efacef25c4f0489294785f55ee524
msgid ":setting:`TEST_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# ae4799ef1e454cb1ada3e688e30e5cb4
# 12adb904e68c4061b5baefcb9babb95d
msgid ":setting:`TEST_DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# 25c48b6fd9c04ac5b61d04bb64219292
# 05c84a8068a440918d0e4c38e75503ee
msgid ":setting:`TEST_NAME`"
msgstr ""

#: ../../releases/1.2.txt:834
#: ../../releases/1.2-alpha-1.txt:300
# 0814f057e8bc4e8a8afe0ee1b8f86daa
# 7a3de38c216f40a682ceb11d1d3d24c3
msgid "These changes are also required if you have manually created a database connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

#: ../../releases/1.2.txt:837
#: ../../releases/1.2-alpha-1.txt:303
# bbdeb1756a354639a36c4544486480d5
# 7fca1f3790b34d72b223bc16c65a286d
msgid "In addition to the change in structure, Django 1.2 removes the special handling for the built-in database backends. All database backends must now be specified by a fully qualified module name (i.e., ``django.db.backends.postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""

#: ../../releases/1.2.txt:844
# 791d3a63843242f8a3512ae01592fe37
msgid "``postgresql`` database backend"
msgstr ""

#: ../../releases/1.2.txt:846
# c7eb0c72902a44a8b89af158cc540cf3
msgid "The ``psycopg1`` library has not been updated since October 2005. As a result, the ``postgresql`` database backend, which uses this library, has been deprecated."
msgstr ""

#: ../../releases/1.2.txt:850
# 6aca2bcf9086490fb0893f6903f07ba1
msgid "If you are currently using the ``postgresql`` backend, you should migrate to using the ``postgresql_psycopg2`` backend. To update your code, install the ``psycopg2`` library and change the :setting:`DATABASE_ENGINE` setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

#: ../../releases/1.2.txt:857
# b18026944f44493488bd2d6598ac0eae
msgid "CSRF response-rewriting middleware"
msgstr ""

#: ../../releases/1.2.txt:859
# 28e648cca4c745e298bca914dce7913e
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into ``POST`` forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been deprecated."
msgstr ""

#: ../../releases/1.2.txt:866
#: ../../releases/1.2-alpha-1.txt:203
# 3ef92e2605eb4a8daf474efc77359bb4
# 79d124fbb9724a9db6dc03251a06fac3
msgid "Also, the CSRF module has moved from contrib to core, and the old imports are deprecated, as described in the upgrading notes."
msgstr ""

#: ../../releases/1.2.txt:875
#: ../../releases/1.2-alpha-1.txt:212
# 8c740e85431749dc8cded5b6fa03d3b2
# 95631d92ab6f4fb0ae8eb609fff9c3fb
msgid "``SMTPConnection``"
msgstr ""

#: ../../releases/1.2.txt:877
# bf1d5332afe14506ad9d5321fd042b09
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2.txt:886
# bdf1937e40af49d295341ddec4c5962e
msgid "...should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2.txt:894
#: ../../releases/1.2-alpha-1.txt:231
# 82bf651a71334271a65025c33555ff83
# 8e204cd586df4f6a92073b7d36221f49
msgid "Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not return an SMTP connection. If you explicitly require an SMTP connection with which to send email, you can explicitly request an SMTP connection::"
msgstr ""

#: ../../releases/1.2.txt:904
#: ../../releases/1.2-alpha-1.txt:241
# 256fc066fb1945d0b3d9e8198d5578f2
# ba6e4a5869dd4c15b942895f21519f46
msgid "If your call to construct an instance of ``SMTPConnection`` required additional arguments, those arguments can be passed to the :meth:`~django.core.mail.get_connection()` call::"
msgstr ""

#: ../../releases/1.2.txt:911
#: ../../releases/1.2-alpha-1.txt:310
# 7f25d47ebc20467ba9d16618256add27
# 7fe6bd98c2ab4c91baf64eced7c6f012
msgid "User Messages API"
msgstr ""

#: ../../releases/1.2.txt:913
#: ../../releases/1.2-alpha-1.txt:312
# 99a3cb631dd54a1a989fcb6f9770c0e1
# 96a9fd7c199e4c8ba867bb28aa2bdcbf
msgid "The API for storing messages in the user ``Message`` model (via ``user.message_set.create``) is now deprecated and will be removed in Django 1.4 according to the standard :doc:`release process </internals/release-process>`."
msgstr ""

#: ../../releases/1.2.txt:917
# b3c7e4f54f54487a825e0d79a1572d38
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

#: ../../releases/1.2.txt:921
# 5da82df0b02c4cb980a85ac2f4f94e7e
msgid "...with the following::"
msgstr ""

#: ../../releases/1.2.txt:926
#: ../../releases/1.2-alpha-1.txt:325
# 9bd0addab3424d01b841c208750d39b4
# 4c4716140c3b4a0d9949f4554573fe0f
msgid "Additionally, if you make use of the method, you need to replace the following::"
msgstr ""

#: ../../releases/1.2.txt:932
# 1c7f4b61f49046e598adf6ee1c13ae10
msgid "...with::"
msgstr ""

#: ../../releases/1.2.txt:938
#: ../../releases/1.2-alpha-1.txt:337
# 30d5800544b54f11ba0e921bef1483d0
# 8cafab0edcea406a926b900bdbae5496
msgid "For more information, see the full :doc:`messages documentation </ref/contrib/messages>`. You should begin to update your code to use the new API immediately."
msgstr ""

#: ../../releases/1.2.txt:943
#: ../../releases/1.2-alpha-1.txt:342
# a2236f8d278e487287fac81d2cb9d28e
# 51990ce864b84243a6408a0be7a230fb
msgid "Date format helper functions"
msgstr ""

#: ../../releases/1.2.txt:945
# 952ab2d8fccc48bc9d49d7d895c898e5
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()``, which is locale-aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2.txt:951
# 3f076d8c1b564e0a938c45418de49c05
msgid "To get the different date formats, instead of writing this::"
msgstr ""

#: ../../releases/1.2.txt:956
# 4724a4472d774c89901cae52ddec0fd0
msgid "...use::"
msgstr ""

#: ../../releases/1.2.txt:963
# 882fec98ce0e450c9be0c373d58cd21a
msgid "Or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2.txt:968
#: ../../releases/1.2-alpha-1.txt:368
# 87d948d92a164065889f9e349966e402
# bf06ea30b340492ab22eedd4223c1fd0
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

#: ../../releases/1.2.txt:970
#: ../../releases/1.2-alpha-1.txt:370
# f3d0d0bfc1864ce883f28747201ecf6c
# 6028ed44f52b45a983771475ba6fc60f
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:971
#: ../../releases/1.2-alpha-1.txt:371
# e8a09d26ee2748119d2ebb86f96de48c
# 9e19a3694bd94cb09ec6c101ebb4c14d
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:972
#: ../../releases/1.2-alpha-1.txt:372
# 521f2070b830461ebafc5aa09eb43989
# bbbdd3c67fc04e69992cc3a63063a5cf
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:974
#: ../../releases/1.2-alpha-1.txt:374
# 6187d7a16597459c8a5c632e0984e09d
# 3ccecfa052014c258d91a10d02143caf
msgid "Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../releases/1.2.txt:977
# 4d0e86be6c7044398df90fc89968005f
msgid "Function-based test runners"
msgstr ""

#: ../../releases/1.2.txt:979
#: ../../releases/1.2-beta-1.txt:41
# 78cd5e319e7845589c369101cfa1de62
# 572690b8dacd4c5b9fb17b1db9fde142
msgid "Django 1.2 changes the test runner tools to use a class-based approach. Old style function-based test runners will still work, but should be updated to use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

#: ../../releases/1.2.txt:987
# 29229a70df9240538d7c86427a0d6706
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

#: ../../releases/1.2.txt:989
# 80c98d62fd65456aace3aa5a9844f40d
msgid "The :class:`django.contrib.syndication.feeds.Feed` class has been replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:994
# 50400bb18194451a815d42137c7e0014
msgid "The new class has an almost identical API, but allows instances to be used as views. For example, consider the use of the old framework in the following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../releases/1.2.txt:1013
# 9a156eeb47d34b45b2eb0c7b859da64a
msgid "Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

#: ../../releases/1.2.txt:1025
# 96597087d48c4cd6a930a12f08addd29
msgid "If you currently use the ``feed()`` view, the ``LatestEntries`` class would often not need to be modified apart from subclassing the new :class:`~django.contrib.syndication.views.Feed` class. The exception is if Django was automatically working out the name of the template to use to render the feed's description and title elements (if you were not specifying the ``title_template`` and ``description_template`` attributes). You should ensure that you always specify ``title_template`` and ``description_template`` attributes, or provide ``item_title()`` and ``item_description()`` methods."
msgstr ""

#: ../../releases/1.2.txt:1034
# e938e9db810d494faff3755b8989448e
msgid "However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with the ``bits`` argument to specify a specific category to show. In the new :class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` method takes a ``request`` and arguments from the URL, so it would look like this::"
msgstr ""

#: ../../releases/1.2.txt:1050
# ba887660a5a64b9d8553300bab1e5400
msgid "Additionally, the ``get_feed()`` method on ``Feed`` classes now take different arguments, which may impact you if you use the ``Feed`` classes directly. Instead of just taking an optional ``url`` argument, it now takes two arguments: the object returned by its own ``get_object()`` method, and the current ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1056
# e46738d9281b4afdb5fc0ccec286f8a3
msgid "To take into account ``Feed`` classes not being initialized for each request, the ``__init__()`` method now takes no arguments by default. Previously it would have taken the ``slug`` from the URL and the ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1061
# 0ad7bc7b75dd44d98ae976e5df32f6dc
msgid "In accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2.txt:1065
#: ../../releases/1.2-beta-1.txt:59
# b590b25a5b714b1d94cb8cb479aa9147
# 8853efa558cb45798daf620ca205f2f4
msgid "For more information, see the full :doc:`syndication framework documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../releases/1.2.txt:1071
# fd61feb9f9dd4277bf161fbdc8cc189a
msgid "Technical message IDs"
msgstr ""

#: ../../releases/1.2.txt:1073
# e9440d0046aa47889988b214b17ac74c
msgid "Up to version 1.1 Django used technical message IDs to provide localizers the possibility to translate date and time formats. They were translatable :term:`translation strings <translation string>` that could be recognized because they were all upper case (for example :setting:`DATETIME_FORMAT`, :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in favor of the new :ref:`Format localization <format-localization>` infrastructure that allows localizers to specify that information in a ``formats.py`` file in the corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""

#: ../../releases/1.2.txt:1086
# 7e4bea7660fb42058d10b28137d77546
msgid "To allow support for multiple databases, the GeoDjango database internals were changed substantially.  The largest backwards-incompatible change is that the module ``django.contrib.gis.db.backend`` was renamed to :mod:`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial database backends <spatial-backends>` now exist.  The following sections provide information on the most-popular APIs that were affected by these changes."
msgstr ""

#: ../../releases/1.2.txt:1095
# 7af0e66151dc436cb3f06c44b3123484
msgid "``SpatialBackend``"
msgstr ""

#: ../../releases/1.2.txt:1097
# c31f5ccf807c4a02a0bac97243d172c0
msgid "Prior to the creation of the separate spatial backends, the ``django.contrib.gis.db.backend.SpatialBackend`` object was provided as an abstraction to introspect on the capabilities of the spatial database.  All of the attributes and routines provided by ``SpatialBackend`` are now a part of the ``ops`` attribute of the database backend."
msgstr ""

#: ../../releases/1.2.txt:1104
# 2121cf9c55594d369284f6c443991d94
msgid "The old module ``django.contrib.gis.db.backend`` is still provided for backwards-compatibility access to a ``SpatialBackend`` object, which is just an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""

#: ../../releases/1.2.txt:1109
# 21b34c3bd7ca43c780e5b0a359435640
msgid "Users that were relying on undocumented modules and objects within ``django.contrib.gis.db.backend``, rather the abstractions provided by ``SpatialBackend``, are required to modify their code. For example, the following import which would work in 1.1 and below::"
msgstr ""

#: ../../releases/1.2.txt:1117
# ce8e9f742d844b30ac00bb39c561f2e5
msgid "Would need to be changed::"
msgstr ""

#: ../../releases/1.2.txt:1123
# 89708e4121694fa299ea5ea62dc9e46c
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

#: ../../releases/1.2.txt:1125
# 65a81bd812df4d4eb916f6059f16ab97
msgid "In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had ``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, respectively."
msgstr ""

#: ../../releases/1.2.txt:1130
# e4c1f50a2a22458299ffa43cf2f6cd30
msgid "While these aliases are still provided, they are only for the *default* database connection and exist only if the default connection is using a supported spatial database backend."
msgstr ""

#: ../../releases/1.2.txt:1136
# 5ef29fbcc4a040b5a633d5b1490d12ff
msgid "Because the table structure of the OGC spatial metadata tables differs across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` models can no longer be associated with the ``gis`` application name.  Thus, no models will be returned when using the ``get_models`` method in the following example::"
msgstr ""

#: ../../releases/1.2.txt:1146
# f8247f6269654a87b9364325040a3a21
msgid "To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your spatial database use the methods provided by the spatial backend::"
msgstr ""

#: ../../releases/1.2.txt:1155
# c13b884615b44f99b8d8c106753f7ae7
msgid "When using the models returned from the ``spatial_ref_sys()`` and ``geometry_columns()`` method, you'll still need to use the correct database alias when querying on the non-default connection. In other words, to ensure that the models in the example above use the correct database::"
msgstr ""

#: ../../releases/1.2.txt:1165
# 8470f4a5e61b43f58aba5b6bb3538546
msgid "Language code ``no``"
msgstr ""

#: ../../releases/1.2.txt:1167
# e4da0a6d9f80422c8b1827c33bc9de23
msgid "The currently used language code for Norwegian Bokmål ``no`` is being replaced by the more common language code ``nb``."
msgstr ""

#: ../../releases/1.2.txt:1171
# 4864a0c5c3364802bb02021a3993f410
msgid "Function-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:1173
# afda22f4b84347aba22aecab9b9b1b3f
msgid "Django 1.2 changes the template loading mechanism to use a class-based approach. Old style function-based template loaders will still work, but should be updated to use the new :ref:`class-based template loaders <topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:3
# a846b7ff701e40d58c664413366006c1
msgid "Django 1.2 alpha 1 release notes"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:5
# 66bb7b8d57584b0db09b177fa25b60f1
msgid "January 5, 2010"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:7
# 1b381e42c49a49efba03a0a565871da8
msgid "Welcome to Django 1.2 alpha 1!"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:9
# f991e92dafe442a38da8d3ee4ebc29fe
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:25
# 45a12e136a124dfc8b363db90a552d99
msgid "There have been large changes to the way that CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`.  The following are the major changes that developers must be aware of:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:29
# 1b758eaf78f84f0ba4ea02f98d0d15d6
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated, and **will be removed completely in Django 1.4**, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:33
# 8bf332c372ef4870912f6c366ffdaa36
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template, so if you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:43
# dff1e8e20d814843bdcbd7b72281ed4a
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so that views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:48
# 2a5e082e93d04cefa05a4ac11fe21214
msgid "CSRF-related code has moved from ``contrib`` to ``core`` (with backwards compatible imports in the old locations, which are deprecated)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:55
# de0c05a2a7224b4eb7658c4794d794af
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names.  Previously that worked in some cases even though these strings were normally treated as keywords.  Now, the keyword status is always enforced, and template code like ``{% if not %}`` or ``{% if and %}`` will throw a TemplateSyntaxError."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:64
# 7dbdd9c671de43368c433ca043722354
msgid "``LazyObject`` is an undocumented utility class used for lazily wrapping other objects of unknown type.  In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard method, involving ``__members__`` and ``__dir__()``. If you used ``LazyObject`` in your own code, and implemented the ``get_all_members()`` method for wrapped objects, you need to make the following changes:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:73
# 1e0814f6f2f2430ebe40b18471a25851
msgid "If your class does not have special requirements for introspection (i.e. you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method.  The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:79
# 53b0815c99de46299b133d9dbb9a597d
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``.  This is the standard method, from Python 2.6 onwards, for supporting introspection.  If you are require support for Python < 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:87
# 7f1d39a9b8854922934b9561f24e9222
msgid "``__dict__`` on Model instances"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:92
# 771af447d61e4b7f9f4812fa08be1533
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over __dict__ to obtain a list of fields, you must now filter the ``_state`` attribute of out ``__dict__``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:99
# e17a661d694b4278981c9b983e1fa5b3
msgid "``get_db_prep_*()`` methods on Field"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:101
# 1c714b604ddc40fe8f636ac4d7ae61ef
msgid "Prior to v1.2, a custom field had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:138
# 51af9891d8474d3892184568468235a5
msgid "These changes are required to support multiple databases: ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:144
# aea7e344805543beb46be3795c081910
msgid "The two new methods exist to differentiate general data preparation requirements, and requirements that are database-specific. The ``prepared`` argument is used to indicate to the database preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:152
# b8eeb89733f449369f31d8a9e3894cd2
msgid "Conversion functions has been provided which will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, this conversion function will be removed in Django 1.4, so you should upgrade your Field definitions to use the new prototype."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:158
# c5f4c64fffe94961bcadaede85307902
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()`. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:169
# 606943e80e1a4f9a9b2026bd8b220afd
msgid "Template tags that store rendering state on the node itself may experience problems if they are used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:173
# 47f396c407fe429281432fc57e6e5da1
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:194
# 0d7752f6313349b28cadd957e067b04b
msgid "CSRF response rewriting middleware"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:196
# 9d444fbbd2e640a28b687aa84ed27cbb
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into POST forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware`` has likewise been deprecated."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:214
# 7cca3f835f644bbfbfc98e86846ae5c7
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic Email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:223
# 674eb97e19904447a0bb9d4a2448e4b2
msgid "should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:250
# 11001f39fc634af395e3cfa8231baa07
msgid "Prior to Django 1.1, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result, the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:254
# 39c26bc4f63944a7a5f8eec36af995b3
msgid "**Any existing Django settings file will continue to work as expected until Django 1.4.** Old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:258
# 4389bab4ac6f4ae7ba11f959e83d9d09
msgid "In the old-style (pre 1.2) format, there were a number of ``DATABASE_`` settings at the top level of your settings file. For example::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:267
# 9918644c0db3479da321b0884fb1a4cb
msgid "These settings are now contained inside a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened to reflect the fact that they are stored in a dictionary. The sample settings given previously would now be stored using::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:316
# d1dfa77d47e345cf84ceccb958eb2297
msgid "To upgrade your code, you need to replace any instances of::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:320
# 8ce817b8e8b34c759ea93c49fc996f26
msgid "with the following::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:331
# 1c07a144bec44eb8bd1fa56f3421a7e1
msgid "with::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:344
# 990b0183165b42978c7d99982d89f060
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()`` which is locale aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:350
# 2e033997c83f484c8df9fdc0ba128a11
msgid "To get the different date formats, instead of writing::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:355
# 5a6873e80f99453bb8df91b7c9d1d4e5
msgid "use::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:363
# 53c2b239c7474986bea463e1759ac277
msgid "or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:378
# 582beefeb8684c47953768d1f00a66e1
msgid "What's new in Django 1.2 alpha 1"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:380
# d0b94760d8264770b30566347be492ed
msgid "The following new features are present as of this alpha release; this release also marks the end of major feature development for the 1.2 release cycle. Some minor features will continue development until the 1.2 beta release, however."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:387
# a332adb48196442ab894812d755050ed
msgid "CSRF support"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:389
# 119f5f2206114a81a3dbd9b9f0eaf52a
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:399
# 6b4d3308910d44ad842ae50605ac76a6
msgid "Email Backends"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:409
# 7e0a6903a28d42dc91907748b99e6904
msgid "This also makes it easier to debug mail sending - Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>` - you can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:417
# 52ae28d86b814f19930bce73a6ceee5c
msgid "Messages Framework"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:429
# 30a51ba3b46d45d8bf30b3f57cc567a9
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the `using()` method on querysets; individual objects can be saved to a specific database by providing a ``using`` argument when you save the instance."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:436
# 4d791f6e2e8a4f56b8fe2030620d0e54
msgid "'Smart' if tag"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:438
# f45e643b26714eb9a0701f12f0cc0695
msgid "The :ttag:`if` tag has been upgraded to be much more powerful.  First, support for comparison operators has been added. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:447
# 0c5bd5e57d3e40dd88b86df6b1e2f5ed
msgid "...as you can now do:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:455
# 3a46a61c7d1a4b80b50d5d2a9fb05ee7
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not`` which were already supported."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:472
# fde16a7c871d4dbbbece1f21fc9c7a36
msgid "In previous versions of Django, every time you rendered a template it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then use the cached result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:487
# 005cc710e9e74e99bb5884d2f444d045
msgid "Fixtures can refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability, and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:496
# 67ce3bbe1f9d43e9be74d76ac8f75a88
msgid "Models can now use a 64 bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:499
# af99f6426c9a4c02bfa954a313d4d945
msgid "Fast Failure for Tests"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:501
# 463df5165b1a41ecb1e2afb3a93ab802
msgid "The :djadmin:`test` subcommand of ``django-admin.py``, and the ``runtests.py`` script used to run Django's own test suite, support a new ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run.  In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests run before the interruption."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:511
# c93784a604e94f5fa3a287cafe03d640
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded by locale aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:519
# a2048640e9134500802c49331ecb1a7d
msgid "Added ``readonly_fields`` to ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:521
# 45d939611b06439a9f160aa86294b7b6
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed along side editable fields."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:528
# 4010b235ba0d4b33aefc7934577c769c
msgid "You can now use the ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:534
#: ../../releases/1.2-beta-1.txt:120
#: ../../releases/1.2-rc-1.txt:52
# e19122626cf14227b8ced1cf65db8135
# 0533c2c3fd434b4f90b200baa7399c57
# cb6e88e5bf5240239d35e12372016310
msgid "The Django 1.2 roadmap"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:536
# 5f2978c9db4d4e72bd7409dad2070738
msgid "Before the final Django 1.2 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:540
# 4610e510c9d442c1bd74e61c382c232e
msgid "Week of **January 26, 2010**: First Django 1.2 beta release. Final feature freeze for Django 1.2."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:543
#: ../../releases/1.2-beta-1.txt:126
# af5019df6ca64dd5972f402b2c31b3e6
# c5c4dbb11e2748d4b0d4babbd3591935
msgid "Week of **March 2, 2010**: First Django 1.2 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:546
#: ../../releases/1.2-beta-1.txt:129
# 6fa1642d1e084235a790311b85ad420b
# 2e746f7fb41d41fe93ecc4f651fcf0a0
msgid "Week of **March 9, 2010**: Django 1.2 final release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:548
# 0a9dbd51792e4440a4fe79ec8ca411fc
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:556
# 8203b06a795e45378da4e2fb945cb789
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:567
#: ../../releases/1.2-beta-1.txt:151
#: ../../releases/1.2-rc-1.txt:84
# 383df07058064fd4bc90b291c53fab01
# 87bd6064824645caabe9d9694cd53e80
# 1135f1aff734488b9095c7e046516565
msgid "Additionally, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:585
#: ../../releases/1.2-beta-1.txt:170
# 6346b2a4ddde4c298783a1349360a312
# 6bc91381318c41f6a2db911e5eb46698
msgid "Development sprints for Django 1.2 will also be taking place at PyCon US 2010, on the dedicated sprint days (February 22 through 25), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.2-beta-1.txt:3
# c99ffd1555c248458b7035ef9a53a77a
msgid "Django 1.2 beta 1 release notes"
msgstr ""

#: ../../releases/1.2-beta-1.txt:5
# cf1f7a1a7acf470f98b7a97ef5ad9492
msgid "February 5, 2010"
msgstr ""

#: ../../releases/1.2-beta-1.txt:7
# ac5d9ebd6e4348b5bd7cee078e28376f
msgid "Welcome to Django 1.2 beta 1!"
msgstr ""

#: ../../releases/1.2-beta-1.txt:9
# 20784d4b332e435a82c3ee7b24d039b2
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:19
# a6c723b3ebee44c4812b73cf2ab5321a
msgid "This document covers changes since the Django 1.2 alpha release; the :doc:`1.2 alpha release notes </releases/1.2-alpha-1>` cover new and updated features in Django between 1.1 and 1.2 alpha."
msgstr ""

#: ../../releases/1.2-beta-1.txt:25
# 22993a6fd11b4cdea269f641fc6660bb
msgid "Deprecations and other changes in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:27
# 3c9b3d7dc5ca4072842dda705aec0ead
msgid "This beta release deprecates two portions of public API, and introduces a potentially backwards-incompatible change to another. Under :doc:`our API stability policy </misc/api-stability>`, deprecation proceeds over multiple release cycles: initially, the deprecated API will raise ``PendingDeprecationWarning``, followed by raising ``DeprecationWarning`` in the next release, and finally removal of the deprecated API in the release after that. APIs beginning the deprecation process in Django 1.2 will be removed in the Django 1.4 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:39
# b094d7e3c84749258bff7a876d4ec01d
msgid "Unit test runners"
msgstr ""

#: ../../releases/1.2-beta-1.txt:48
# a34236a30499410295f33e18275aa0ff
msgid "Syndication feeds"
msgstr ""

#: ../../releases/1.2-beta-1.txt:50
# c997a1b9d9784142912251b7ec50faee
msgid "The :class:`django.contrib.syndication.feeds.Feed` class is being replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated. The new class has an almost identical API, but allows instances to be used as views."
msgstr ""

#: ../../releases/1.2-beta-1.txt:55
# db482c87bd3b4db9b8192252283ea0ce
msgid "Also, in accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2-beta-1.txt:68
# 891beb7056fc4da784e4cf28a8787456
msgid "Due to cookie-handling bugs in Internet Explorer, Safari, and possibly other browsers, Django's encoding of cookie values was changed so that the characters comma (',') and semi-colon (';') are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively. This could produce backwards incompatibilities if you are relying on the ability to set these characters directly in cookie values."
msgstr ""

#: ../../releases/1.2-beta-1.txt:78
# 15741df8ad25431fa0d3ad45325a424d
msgid "What's new in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:80
# 5135e9ca32d24972ae9b26e417ea05b8
msgid "This 1.2 beta release marks the final feature freeze for Django 1.2; while most feature development was completed for 1.2 alpha (which constituted a freeze on major features), a few other new features were added afterward and so are new as of 1.2 beta."
msgstr ""

#: ../../releases/1.2-beta-1.txt:89
# 66dc1086ab804a14beec5f5981918692
msgid "A foundation for specifying permissions at the per-object level was added in Django 1.2 alpha but not documented with the alpha release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:92
# 0c2410dc2dad4103b13182b2e840264f
msgid "The default authentication backends shipped with Django do not currently make use of this, but third-party authentication backends are free to do so. See the :doc:`authentication docs </topics/auth>` for more information."
msgstr ""

#: ../../releases/1.2-beta-1.txt:101
# 85150bf4588f49999dbeecc3aefca6cd
msgid "If you provide a custom authentication backend with the attribute ``supports_anonymous_user`` set to ``True``, the ``AnonymousUser`` class will check the backend for permissions, just as the normal ``User`` does. This is intended to help centralize permission handling; apps can always delegate the question of whether something is allowed or not to the authorization/authentication system. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.2-beta-1.txt:111
# c7d54724ac954a24bf86885b61e50bfb
msgid "``select_related()`` improvements"
msgstr ""

#: ../../releases/1.2-beta-1.txt:113
# 25377914fd9c4575abb2e2541aa14255
msgid "The ``select_related()`` method of ``QuerySet`` now accepts the ``related_name`` of a reverse one-to-one relation in the list of fields to select. One-to-one relations will not, however, be traversed by a depth-based ``select_related()`` call."
msgstr ""

#: ../../releases/1.2-beta-1.txt:122
# 0c42344774474d84b297ff8bd3a46cac
msgid "Before the final Django 1.2 release, at least one additional preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-beta-1.txt:131
# 6b318a1626bd468c92961f675a1598e7
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-beta-1.txt:139
# 418c00b3af0046e78620a913131e1fec
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-rc-1.txt:3
# a107354652e14e00b23b11d22d798af9
msgid "Django 1.2 RC 1 release notes"
msgstr ""

#: ../../releases/1.2-rc-1.txt:6
# 7f4a94bb90664d91b00b0ed675b16513
msgid "May 5, 2010"
msgstr ""

#: ../../releases/1.2-rc-1.txt:8
# 640120351abe4d62829f2f25798cb7a0
msgid "Welcome to the first Django 1.2 release candidate!"
msgstr ""

#: ../../releases/1.2-rc-1.txt:10
# 928ec99ee83d40238e1c71724630d3e2
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.2. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-rc-1.txt:20
# 6e24bf142e38493eadf322960caee9e7
msgid "Django has been feature frozen since the 1.2 beta release, so this release candidate contains no new features, only bugfixes; for a summary of features new to Django 1.2, consult the :doc:`1.2 alpha </releases/1.2-alpha-1>` and :doc:`1.2 beta </releases/1.2-beta-1>` release notes."
msgstr ""

#: ../../releases/1.2-rc-1.txt:54
# f09b0177878842259c167f1fcff5f0cc
msgid "As of this release candidate, Django 1.2 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.2 release. Only critical release-blocking bugs, documentation and updated translation files will receive attention between now and the final 1.2 release. Note that Django's localization infrastructure has been expanded for 1.2, and translation packages should now include a ``formats.py`` file containing data for localized formatting of numbers and dates."
msgstr ""

#: ../../releases/1.2-rc-1.txt:64
# c5f6d27d031f432fbe4b6c47d450641d
msgid "If no critical bugs are discovered, Django 1.2 will be released approximately one week after this release candidate, on or about May 12, 2010."
msgstr ""

#: ../../releases/1.2-rc-1.txt:72
# c47d3cbf39db4f91a5bea5df5fe29d9b
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2.1.txt:3
# 232fd1f8cbd44d63b8f6e8a8c98ad8ed
msgid "Django 1.2.1 release notes"
msgstr ""

#: ../../releases/1.2.1.txt:5
# 5b602ebb98124ef3b3d0a326bc26bb91
msgid "Django 1.2.1 was released almost immediately after 1.2.0 to correct two small bugs: one was in the documentation packaging script, the other was a bug_ that affected datetime form field widgets when localisation was enabled."
msgstr ""

#: ../../releases/1.2.2.txt:3
# 3de65d68018642f6848b7363a4ca6109
msgid "Django 1.2.2 release notes"
msgstr ""

#: ../../releases/1.2.2.txt:5
# 9bc6f2932b5d4ac9a2d17677e74e11ae
msgid "Welcome to Django 1.2.2!"
msgstr ""

#: ../../releases/1.2.2.txt:7
# ac5d073801724c29be90fa7d2b134173
msgid "This is the second \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.2.txt:10
# 08568e27923b4eb0a099475fc5af0e9e
msgid "Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but contain a number of fixes and other improvements. Django 1.2.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.2.txt:15
#: ../../releases/1.2.4.txt:15
#: ../../releases/1.2.5.txt:15
# 2b7e91e852c34f87b279d82d97b94783
# eef60d04d8c14c668c7343e40fa4b091
# 4374021a66fb4aa19f5bf488e86c1577
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

#: ../../releases/1.2.2.txt:21
# c6e0a9a0c9bc4d25aa6f2a30d6879fef
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.2, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.2.txt:24
# 83cd732d373f4b9aa0a85a3ccbaba213
msgid "In order to test a bug fix that forms part of the 1.2.2 release, it was necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the :mod:`test client <django.test.client>`. This flag forces the test client to perform full CSRF checks on forms. The default behavior of the test client hasn't changed, but if you want to do CSRF checks with the test client, it is now possible to do so."
msgstr ""

#: ../../releases/1.2.3.txt:3
# cce7fe0488be4319aea65acf321cff88
msgid "Django 1.2.3 release notes"
msgstr ""

#: ../../releases/1.2.3.txt:5
# 88e086a2748d46e1bb13b05b27b6f6e2
msgid "Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was released two days after 1.2.2."
msgstr ""

#: ../../releases/1.2.3.txt:8
# 9671d917207e4b27bb6de723cc8eab3c
msgid "This release corrects the following problems:"
msgstr ""

#: ../../releases/1.2.3.txt:10
# 4b40cb14e00a4fb1a144f42c3d41b97e
msgid "The patch_ applied for the security issue covered in Django 1.2.2 caused issues with non-ASCII responses using CSRF tokens."
msgstr ""

#: ../../releases/1.2.3.txt:13
# 815160cb3c924708b994e10921fc35a5
msgid "The patch also caused issues with some forms, most notably the user-editing forms in the Django administrative interface."
msgstr ""

#: ../../releases/1.2.3.txt:16
# facf2b2e2bef48c1b60c955c7da79256
msgid "The packaging manifest did not contain the full list of required files."
msgstr ""

#: ../../releases/1.2.4.txt:3
# ccc167181b7f416e9dcf063b647f1af3
msgid "Django 1.2.4 release notes"
msgstr ""

#: ../../releases/1.2.4.txt:5
# 069b954bfde04710af7603f3f9fb99dc
msgid "Welcome to Django 1.2.4!"
msgstr ""

#: ../../releases/1.2.4.txt:7
# 628dd83f4ae64536acfcb3509b0dec7f
msgid "This is the fourth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.4.txt:10
# fc34a2b2a9d24955b7d7efbe579db080
msgid "With one exception, Django 1.2.4 maintains backwards compatibility with Django 1.2.3. It also contains a number of fixes and other improvements. Django 1.2.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.4.txt:55
# cfcc93d4460a4ff2a58ba9157d8dd4c9
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.4, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.4.txt:58
# 176a737b8de54050b2a7bc4aeba07004
msgid "One of the bugs fixed in Django 1.2.4 involves a set of circumstances whereby a running a test suite on a multiple database configuration could cause the original source database (i.e., the actual production database) to be dropped, causing catastrophic loss of data. In order to provide a fix for this problem, it was necessary to introduce a new setting -- :setting:`TEST_DEPENDENCIES` -- that allows you to define any creation order dependencies in your database configuration."
msgstr ""

#: ../../releases/1.2.4.txt:67
# 79c744882790498ca29666bcb177ec44
msgid "Most users -- even users with multiple-database configurations -- need not be concerned about the data loss bug, or the manual configuration of :setting:`TEST_DEPENDENCIES`. See the `original problem report`_ documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../releases/1.2.4.txt:78
# cb082573b8d64bdf944ce8eae0c44851
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, :func:`django.contrib.gis.tests.run_gis_tests`, was finally deprecated in favor of a class-based test runner, :class:`django.contrib.gis.tests.GeoDjangoTestSuiteRunner`, added in this release."
msgstr ""

#: ../../releases/1.2.4.txt:84
# e1a0ecf7daf642ed8e864475588398ed
msgid "In addition, the GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` and using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.2.5.txt:3
# 444329fd0fd84246b0ad74daa8eb303d
msgid "Django 1.2.5 release notes"
msgstr ""

#: ../../releases/1.2.5.txt:5
# bd0bba641ee04b8db14c83e27d202db9
msgid "Welcome to Django 1.2.5!"
msgstr ""

#: ../../releases/1.2.5.txt:7
# 87a7b86ed788419ab9836535e163d662
msgid "This is the fifth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.5.txt:10
# cee2f23a56d34ec182a87e20e29c4c57
msgid "With four exceptions, Django 1.2.5 maintains backwards compatibility with Django 1.2.4. It also contains a number of fixes and other improvements. Django 1.2.5 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.5.txt:71
# b7c5d480eb754b71b0b0ee37026bf782
msgid "FileField no longer deletes files"
msgstr ""

#: ../../releases/1.2.5.txt:73
# 847a5967b3e04bc88229b9fe96233ef3
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several potentially serious data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.2.5, :class:`~django.db.models.FileField` will never delete files from the backend storage. If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.2.5.txt:85
#: ../../releases/1.3.txt:537
# cb9ac6e1da854b508cd45c2e1c355ce2
# db058f0d50684feaac6c377eb0730d1a
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

#: ../../releases/1.2.5.txt:87
#: ../../releases/1.3.txt:539
# 44ac6e32d9754ab7ac1cf806be9bd5be
# 40a481f9aeac40e480808d7204f3775d
msgid "Django provides a custom SQL hooks as a way to inject hand-crafted SQL into the database synchronization process. One of the possible uses for this custom SQL is to insert data into your database. If your custom SQL contains ``INSERT`` statements, those insertions will be performed every time your database is synchronized. This includes the synchronization of any test databases that are created when you run a test suite."
msgstr ""

#: ../../releases/1.2.5.txt:95
#: ../../releases/1.3.txt:547
# 703126ae9e7c4271b66844789b6a571c
# eeaafb8458f54607b46c94075afde044
msgid "However, in the process of testing the Django 1.3, it was discovered that this feature has never completely worked as advertised. When using database backends that don't support transactions, or when using a TransactionTestCase, data that has been inserted using custom SQL will not be visible during the testing process."
msgstr ""

#: ../../releases/1.2.5.txt:101
#: ../../releases/1.3.txt:553
# 42403a13a64b4f88830afb3f4454d151
# 0f8f91029b0b4ff8b672b74d91ad8d29
msgid "Unfortunately, there was no way to rectify this problem without introducing a backwards incompatibility. Rather than leave SQL-inserted initial data in an uncertain state, Django now enforces the policy that data inserted by custom SQL will *not* be visible during testing."
msgstr ""

#: ../../releases/1.2.5.txt:107
#: ../../releases/1.3.txt:559
# 316749d9be9a470c8c464d55ae30c46a
# c8a2e90184014df98728321461f667f7
msgid "This change only affects the testing process. You can still use custom SQL to load data into your production database as part of the syncdb process. If you require data to exist during test conditions, you should either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or using the ``setUp()`` method of your test case."
msgstr ""

#: ../../releases/1.2.5.txt:115
# d880a4a5b4774d84ac6b56b4cfb75e19
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

#: ../../releases/1.2.5.txt:117
# 08d2ef8d9d244be89c71c853f6c3a4e8
msgid "Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to cope with a security issue (changeset `[15033] <https://code.djangoproject.com/changeset/15033>`_). Although this method was never documented, it seems some people have overridden ``lookup_allowed``, especially to cope with regressions introduced by that changeset. While the method is still undocumented and not marked as stable, it may be helpful to know that the signature of this function has changed."
msgstr ""

#: ../../releases/1.2.6.txt:3
# e9539bcd0e0d4cc096380f6ca26e8ae2
msgid "Django 1.2.6 release notes"
msgstr ""

#: ../../releases/1.2.6.txt:5
#: ../../releases/1.3.1.txt:5
# 80bbd828f992451783a9f54c24100cbc
# a26c1b76774641fb85e318129ad46388
msgid "*September 9, 2011*"
msgstr ""

#: ../../releases/1.2.6.txt:7
# 9368ec19ffc949519d7cc5a1961f6215
msgid "Welcome to Django 1.2.6!"
msgstr ""

#: ../../releases/1.2.6.txt:9
# 188f44809375436c8817c2eda932df8b
msgid "This is the sixth bugfix/security release in the Django 1.2 series, fixing several security issues present in Django 1.2.5.  Django 1.2.6 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.6.txt:13
#: ../../releases/1.3.1.txt:13
# 7e0bd457020f4ee484f3b14b0a0008a2
# 133d597286df412482ba8c40dbd5265f
msgid "For a full list of issues addressed in this release, see the `security advisory`_."
msgstr ""

#: ../../releases/1.2.7.txt:3
# d11cc04469b045729ff251f16dbe08f5
msgid "Django 1.2.7 release notes"
msgstr ""

#: ../../releases/1.2.7.txt:5
# 6e647aeb456b4d6988d2f7127ad3ba40
msgid "*September 10, 2011*"
msgstr ""

#: ../../releases/1.2.7.txt:7
# cf848bad0eef4f33bc254909e210217e
msgid "Welcome to Django 1.2.7!"
msgstr ""

#: ../../releases/1.2.7.txt:9
# 016f5e0a98be4beabcc2006f0e31c130
msgid "This is the seventh bugfix/security release in the Django 1.2 series. It replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django 1.2.7 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.7.txt:14
# 2349a217118c48369865a69bda5193bd
msgid "For more information, see the `release advisory`_."
msgstr ""

#: ../../releases/1.3.txt:3
# 2158932920234819a1f2325f271eb5e5
msgid "Django 1.3 release notes"
msgstr ""

#: ../../releases/1.3.txt:5
# 178b575b1e2c4e65a14c53c4c207e309
msgid "*March 23, 2011*"
msgstr ""

#: ../../releases/1.3.txt:7
# 6c1458e2e8b64b60a5cc1cfd79cdb14d
msgid "Welcome to Django 1.3!"
msgstr ""

#: ../../releases/1.3.txt:9
# 20815227184c4a8c977273be2e80c3da
msgid "Nearly a year in the making, Django 1.3 includes quite a few `new features`_ and plenty of bug fixes and improvements to existing features. These release notes cover the new features in 1.3, as well as some `backwards-incompatible changes`_ you'll want to be aware of when upgrading from Django 1.2 or older versions."
msgstr ""

#: ../../releases/1.3.txt:18
# bc701aabb5d541a0a80c76d294a46098
msgid "Django 1.3's focus has mostly been on resolving smaller, long-standing feature requests, but that hasn't prevented a few fairly significant new features from landing, including:"
msgstr ""

#: ../../releases/1.3.txt:22
# 3edbaa19c9d74f3d947c6c32817ebe8d
msgid "A framework for writing `class-based views`_."
msgstr ""

#: ../../releases/1.3.txt:24
# 2d288b8a8c3a4ee1bf1616daf274347d
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

#: ../../releases/1.3.txt:26
# 7be98816198e4df38c9cb9151d14e358
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

#: ../../releases/1.3.txt:28
# bbe28be0a4bf408d98a758934e4b037f
msgid "Django's testing framework now supports (and ships with a copy of) `the unittest2 library`_."
msgstr ""

#: ../../releases/1.3.txt:31
# 874d8292ba404d7b9cddeadfa0f50b04
msgid "There's plenty more, of course; see the coverage of `new features`_ below for a full rundown and details."
msgstr ""

#: ../../releases/1.3.txt:34
# 31b070abec0148ba85866ac64af67b69
msgid "Wherever possible, of course, new features are introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. As a result of this policy, Django 1.3 `begins the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.3.txt:39
# 86aa943615504a62b19644783ada9763
msgid "Some changes, unfortunately, are genuinely backwards-incompatible; in most cases these are due to security issues or bugs which simply couldn't be fixed any other way. Django 1.3 includes a few of these, and descriptions of them -- along with the (minor) modifications you'll need to make to handle them -- are documented in the list of `backwards-incompatible changes`_ below."
msgstr ""

#: ../../releases/1.3.txt:56
# 69f84bedbc004297b76a6270af18d8d8
msgid "The release of Django 1.2 was notable for having the first shift in Django's Python compatibility policy; prior to Django 1.2, Django supported any 2.x version of Python from 2.3 up. As of Django 1.2, the minimum requirement was raised to Python 2.4."
msgstr ""

#: ../../releases/1.3.txt:61
# b321adf833404e1b8eb3964f0e8609e0
msgid "Django 1.3 continues to support Python 2.4, but will be the final Django release series to do so; beginning with Django 1.4, the minimum supported Python version will be 2.5. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published shortly after the release of Django 1.3."
msgstr ""

#: ../../releases/1.3.txt:68
# ec084b760d8347cfab349e7db6b0d328
msgid "What's new in Django 1.3"
msgstr ""

#: ../../releases/1.3.txt:71
#: ../../releases/1.3-alpha-1.txt:30
# 127fb401115b49d3a58befb2fa447c41
# 12be04ee354942f3a539fa765890eafa
msgid "Class-based views"
msgstr ""

#: ../../releases/1.3.txt:73
#: ../../releases/1.3-alpha-1.txt:32
# 22473997a6944c34a5b93d56ea0face7
# 95696f1783fa46dca64087a5175cba63
msgid "Django 1.3 adds a framework that allows you to use a class as a view. This means you can compose a view out of a collection of methods that can be subclassed and overridden to provide common views of data without having to write too much code."
msgstr ""

#: ../../releases/1.3.txt:78
#: ../../releases/1.3-alpha-1.txt:37
# 7caae1cdb5b6498ea2bf208fffee1b84
# a98bf78023584a4a8145afc297d84caf
msgid "Analogs of all the old function-based generic views have been provided, along with a completely generic view base class that can be used as the basis for reusable applications that can be easily extended."
msgstr ""

#: ../../releases/1.3.txt:83
# 1a8b402c4ba74f3687ddbf722e1c2c54
msgid "See :doc:`the documentation on class-based generic views</topics/class-based-views>` for more details. There is also a document to help you :doc:`convert your function-based generic views to class-based views</topics/generic-views-migration>`."
msgstr ""

#: ../../releases/1.3.txt:89
#: ../../releases/1.3-alpha-1.txt:47
# ae558da6b29e44db973ba9d28032f0d4
# 58c4028992944198ba1115e43a30e3c9
msgid "Logging"
msgstr ""

#: ../../releases/1.3.txt:91
# a2ed47e7b5994984b5aba7b4afa10afd
msgid "Django 1.3 adds framework-level support for Python's ``logging`` module.  This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3.txt:100
#: ../../releases/1.3-alpha-1.txt:58
# ec91c8a6faca449881b448f2c679727f
# 66843f417fa54db391d3900a638420b7
msgid "Extended static files handling"
msgstr ""

#: ../../releases/1.3.txt:102
# e9ec82078add4061b78c89087a90b109
msgid "Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3.txt:107
# 58b818f833824f58a3e7596d44999ade
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files. Static assets should now go in ``static/`` subdirectories of your apps or in other static assets directories listed in :setting:`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

#: ../../releases/1.3.txt:116
#: ../../releases/1.3-alpha-1.txt:74
# 4d74c54a5c204265be7d2fae9a047f43
# 6e5656e30c9a4e479a5910a21717af7e
msgid "See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` for more details or learn how to :doc:`manage static files </howto/static-files>`."
msgstr ""

#: ../../releases/1.3.txt:121
# 31325e877e89411faf64bf420e2be9d4
msgid "unittest2 support"
msgstr ""

#: ../../releases/1.3.txt:123
# 3dd3e137dd2d4198ae4701806b44095a
msgid "Python 2.7 introduced some major changes to the ``unittest`` library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3.txt:129
# 276b42610aa244cb80e88ee0b413b220
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed ``unittest2`` locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3.txt:135
# 27e0c5fd47534df482566a1cf975d573
msgid "To take advantage of this alias, simply use::"
msgstr ""

#: ../../releases/1.3.txt:139
#: ../../releases/1.3-alpha-1.txt:97
# 54f80c2dba9b4d31b1749d202c451b6c
# 6e7ba092c1b249c1ab89c3d078b827f2
msgid "wherever you would have historically used::"
msgstr ""

#: ../../releases/1.3.txt:143
# 1f9ddc725e5d49c9a7db2235aabf47f6
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3.txt:149
#: ../../releases/1.3-alpha-1.txt:107
# edbfc49ac05943f6b0db2aa99885e050
# 6c4416c9e81a4963b4ff106e7bd41a2a
msgid "Transaction context managers"
msgstr ""

#: ../../releases/1.3.txt:151
#: ../../releases/1.3-alpha-1.txt:109
# 1758df559bd147e38da96746a2a642da
# a6209aafc35441b4aa1178a4f2447ced
msgid "Users of Python 2.5 and above may now use :ref:`transaction management functions <transaction-management-functions>` as `context managers`_. For example::"
msgstr ""

#: ../../releases/1.3.txt:159
#: ../../releases/1.3-alpha-1.txt:117
# 77c80a80f40c47ec87492534acb82feb
# 9ae0ae35c7b040979a61f2e6d47a059d
msgid "For more information, see :ref:`transaction-management-functions`."
msgstr ""

#: ../../releases/1.3.txt:162
#: ../../releases/1.3-alpha-1.txt:120
# 17dbc437181c48b6a58646b4421c3fb5
# 81c3ceb66cd5443ca8a86c1f3e47892c
msgid "Configurable delete-cascade"
msgstr ""

#: ../../releases/1.3.txt:164
#: ../../releases/1.3-alpha-1.txt:122
# da97c54f81ef4ccca1046f4ac2673c9f
# 0458e4dd7d5b404499973b8f4f6c0224
msgid ":class:`~django.db.models.ForeignKey` and :class:`~django.db.models.OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize behavior when the referenced object is deleted. Previously, deletes were always cascaded; available alternatives now include set null, set default, set to any value, protect, or do nothing."
msgstr ""

#: ../../releases/1.3.txt:171
#: ../../releases/1.3-alpha-1.txt:129
# f961aed9424541259bb3dbaa1d8d038c
# f49d0b7647be42fab35d0899e80ac153
msgid "For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` documentation."
msgstr ""

#: ../../releases/1.3.txt:175
# 60a7afed43594e67bdceddaad4e3a0c8
msgid "Contextual markers and comments for translatable strings"
msgstr ""

#: ../../releases/1.3.txt:177
#: ../../releases/1.3-alpha-1.txt:135
# dfff3ba31107484ba111db388d928a29
# 498e31f4829e4677883592499b026e25
msgid "For translation strings with ambiguous meaning, you can now use the ``pgettext`` function to specify the context of the string."
msgstr ""

#: ../../releases/1.3.txt:180
# 66595dfec9644122bd4625f93e1bfada
msgid "And if you just want to add some information for translators, you can also add special translator comments in the source."
msgstr ""

#: ../../releases/1.3.txt:183
# a7f5c9251a6c42d4a4c2bb0852b23595
msgid "For more information, see :ref:`contextual-markers` and :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3.txt:187
# 14f37328cfd340a28823d419437c7556
msgid "Improvements to built-in template tags"
msgstr ""

#: ../../releases/1.3.txt:189
# 9cec389d24cb46faad03ba89bbbed3c0
msgid "A number of improvements have been made to Django's built-in template tags:"
msgstr ""

#: ../../releases/1.3.txt:191
# 7d55370f13ed4c97ad19f97f61c980b9
msgid "The :ttag:`include` tag now accepts a ``with`` option, allowing you to specify context variables to the included template"
msgstr ""

#: ../../releases/1.3.txt:194
# cd0fa9cf538f4e11adefa42ecfa9fc43
msgid "The :ttag:`include` tag now accepts an ``only`` option, allowing you to exclude the current context from the included context"
msgstr ""

#: ../../releases/1.3.txt:197
# 8eaac429253442dcbe9ee3ec32fb4bff
msgid "The :ttag:`with` tag now allows you to define multiple context variables in a single :ttag:`with` block."
msgstr ""

#: ../../releases/1.3.txt:200
# 896d62a3c9784a00a794f713362af6bb
msgid "The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a single tag or filter from a library."
msgstr ""

#: ../../releases/1.3.txt:204
# 074ba178229e4bb4ab0df5389ed9c934
msgid "TemplateResponse"
msgstr ""

#: ../../releases/1.3.txt:206
# df55215fbea54df1a80ff2fac4030d88
msgid "It can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../releases/1.3.txt:211
# b83b2032fcba4665a36dda91da3acee6
msgid "However, you can't (easily) modify the content of a basic :class:`~django.http.HttpResponse` after it has been constructed. To overcome this limitation, Django 1.3 adds a new :class:`~django.template.response.TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` objects, :class:`~django.template.response.TemplateResponse` objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../releases/1.3.txt:221
# bb70caaf527240c5aaed08261fdcf73c
msgid "For more details, see the :doc:`documentation </ref/template-response>` on the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

#: ../../releases/1.3.txt:225
# 1c446a6542cf4fd9aa85f06ccd104f31
msgid "Caching changes"
msgstr ""

#: ../../releases/1.3.txt:227
# 2dbf106d09a44d02b56f7748522664e9
msgid "Django 1.3 sees the introduction of several improvements to the Django's caching infrastructure."
msgstr ""

#: ../../releases/1.3.txt:230
# 20031228dc4a42a4a107e25a80768e16
msgid "Firstly, Django now supports multiple named caches. In the same way that Django 1.2 introduced support for multiple database connections, Django 1.3 allows you to use the new :setting:`CACHES` setting to define multiple named cache connections."
msgstr ""

#: ../../releases/1.3.txt:235
# f62a6b77963043dab51e5018df225d49
msgid "Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing <cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` have been added to the cache API."
msgstr ""

#: ../../releases/1.3.txt:239
# 2f953fe601c44b5c88c83325b62bb994
msgid "Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to take the request query string into account on ``GET`` requests."
msgstr ""

#: ../../releases/1.3.txt:243
# 1dcb5e883af94565b3f5d59425166f34
msgid "Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

#: ../../releases/1.3.txt:246
# c7dfe6bec2a24d169e749a673bc65427
msgid "For more details, see the :doc:`documentation on caching in Django</topics/cache>`."
msgstr ""

#: ../../releases/1.3.txt:252
#: ../../releases/1.3-beta-1.txt:59
# 8646cb85a3534d8593e7cd7d6a6be94d
# aca2489fa073442a8fc85599c21c13d3
msgid "Permissions for inactive users"
msgstr ""

#: ../../releases/1.3.txt:254
# 6dee1e2a8ddf465987737b2067e028fe
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive ``User`` instance will check the backend for permissions.  This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.3.txt:263
# 2d1fcf18d6ef49a8af91038d34e535f7
msgid "The GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.3.txt:268
# 0730c1ce7bad427082cac3b849cf1789
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

#: ../../releases/1.3.txt:270
# 66acefc3bccc40a6a8d818be9fa3161c
msgid "Previously, the :setting:`MEDIA_URL` setting only required a trailing slash if it contained a suffix beyond the domain name."
msgstr ""

#: ../../releases/1.3.txt:273
# ad5352e2011042548bfca266d87a9183
msgid "A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :setting:`STATIC_URL` setting as long as it is not blank. This ensures there is a consistent way to combine paths in templates."
msgstr ""

#: ../../releases/1.3.txt:277
# ae21fb8fe2c74cf99c3ce9b7797864a1
msgid "Project settings which provide either of both settings without a trailing slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

#: ../../releases/1.3.txt:280
# 9a448679bac74dabb90d127a98ba535b
msgid "In Django 1.4 this same condition will raise ``DeprecationWarning``, and in Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

#: ../../releases/1.3.txt:284
#: ../../releases/1.3-alpha-1.txt:141
# ef537c215fe14d4699ba5f544b288b3e
# 2f3311d776df431fa2318897cfcad707
msgid "Everything else"
msgstr ""

#: ../../releases/1.3.txt:286
#: ../../releases/1.3-alpha-1.txt:143
# 8b85f8c2fa8c419b9e00ab245e4e4764
# 9bbe3bd7f8cf48d5ab4b928dc25252d3
msgid "Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items to Django, like multiple-database support, model validation, and a session-based messages framework. However, this focus on big features came at the cost of lots of smaller features."
msgstr ""

#: ../../releases/1.3.txt:292
#: ../../releases/1.3-alpha-1.txt:149
# 3451ad673ccd48d8962280cef288dea8
# 5faa8fa483084e70a1481c3608fbf7ac
msgid "To compensate for this, the focus of the Django 1.3 development process has been on adding lots of smaller, long standing feature requests. These include:"
msgstr ""

#: ../../releases/1.3.txt:296
# ccd1491bc4a34ad9966586ab7e8592d5
msgid "Improved tools for accessing and manipulating the current :class:`~django.contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/sites>`."
msgstr ""

#: ../../releases/1.3.txt:300
#: ../../releases/1.3-alpha-1.txt:156
# 8a77ff650980444295ac27c481d7dc8d
# 6ed618610fe34d90a5c717c2d4d22bec
msgid "A :class:`~django.test.client.RequestFactory` for mocking requests in tests."
msgstr ""

#: ../../releases/1.3.txt:303
# cec0935625404eb4990da9ce32a0847e
msgid "A new test assertion -- :meth:`~django.test.TestCase.assertNumQueries` -- making it easier to test the database activity associated with a view."
msgstr ""

#: ../../releases/1.3.txt:307
# 140a4b93b6d64595b6dd7f775c8a41d4
msgid "Support for lookups spanning relations in admin's :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.3.txt:310
# e8e959427011476b833f66e3e85e8c11
msgid "Support for HTTPOnly_ cookies."
msgstr ""

#: ../../releases/1.3.txt:312
# 8d117f3fcc57483d9f3fc88f2be10a40
msgid ":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail.mail_managers()` now support easily attaching HTML content to messages."
msgstr ""

#: ../../releases/1.3.txt:316
# f4ce2a33f28b458688b063460a9b8580
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

#: ../../releases/1.3.txt:318
# 847ccb3520f24143a8c35dcafbad1c92
msgid "Error emails now include more of the detail and formatting of the debug server error page."
msgstr ""

#: ../../releases/1.3.txt:321
# 9fa8ab26722b47d5a963dc189b537d70
msgid ":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` argument, making it easier to write simple template tags that require access to template context."
msgstr ""

#: ../../releases/1.3.txt:325
# f9c5ba98e3c845f5b0c1d9e86929a252
msgid "A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to :meth:`~django.shortcuts.render_to_response()` providing a :class:`~django.template.RequestContext` by default."
msgstr ""

#: ../../releases/1.3.txt:329
# c09509d37a644d30ab936cf6b4b9c01e
msgid "Support for combining :ref:`F() expressions <query-expressions>` with timedelta values when retrieving or updating database values."
msgstr ""

#: ../../releases/1.3.txt:337
# f894586ed0784218b0054428d7d56b0c
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

#: ../../releases/1.3.txt:340
# 0948d0697e474b8184aeffb4b2e44ac4
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

#: ../../releases/1.3.txt:342
# 23ba2c119e754dc6a6ebcdcdecf05b71
msgid "Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX requests from CSRF verification; due to `security issues`_ reported to us, however, *all* requests are now subjected to CSRF verification. Consult :doc:`the Django CSRF documentation </ref/contrib/csrf>` for details on how to handle CSRF verification in AJAX requests."
msgstr ""

#: ../../releases/1.3.txt:354
# 1b783331ce234288a748653eb6846064
msgid "Prior to Django 1.2.5, the Django administrative interface allowed filtering on any model field or relation -- not just those specified in ``list_filter`` -- via query string manipulation. Due to security issues reported to us, however, query string lookup arguments in the admin must be for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

#: ../../releases/1.3.txt:362
# 5a5e3d41209c42fdaf092481c16fbaec
msgid "Deleting a model doesn't delete associated files"
msgstr ""

#: ../../releases/1.3.txt:364
# 591451068d944ac5a28778782e224f59
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.3, when a model is deleted the :class:`~django.db.models.FileField`'s :func:`~django.db.models.FileField.delete` method won't be called.  If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.3.txt:377
#: ../../releases/1.3-alpha-1.txt:170
# 586d0e4d6ab34e62b6d90f87f6f2cf32
# a8fb3ac026074dd5b63a23c79d05ecdf
msgid "PasswordInput default rendering behavior"
msgstr ""

#: ../../releases/1.3.txt:379
#: ../../releases/1.3-alpha-1.txt:172
# 9a2b4849a328435895367ef17014787d
# 2bd8f627bd7949f3afe7955daf260114
msgid "The :class:`~django.forms.PasswordInput` form widget, intended for use with form fields which represent passwords, accepts a boolean keyword argument ``render_value`` indicating whether to send its data back to the browser when displaying a submitted form with errors. Prior to Django 1.3, this argument defaulted to ``True``, meaning that the submitted password would be sent back to the browser as part of the form. Developers who wished to add a bit of additional security by excluding that value from the redisplayed form could instantiate a :class:`~django.forms.PasswordInput` passing ``render_value=False`` ."
msgstr ""

#: ../../releases/1.3.txt:389
#: ../../releases/1.3-alpha-1.txt:182
# 1b0d1c0a8c6e40a39b2101f762cce3ae
# d382798c57814398846f06138e7ea658
msgid "Due to the sensitive nature of passwords, however, Django 1.3 takes this step automatically; the default value of ``render_value`` is now ``False``, and developers who want the password value returned to the browser on a submission with errors (the previous behavior) must now explicitly indicate this. For example::"
msgstr ""

#: ../../releases/1.3.txt:400
#: ../../releases/1.3-alpha-1.txt:194
# 1e71560e6fd3446ba6e649efc8bc564e
# 2c048b4bef7d4a03883aeb218a59303e
msgid "Clearable default widget for FileField"
msgstr ""

#: ../../releases/1.3.txt:402
# 2e5dcd7f74614203bcd04cadaf483fd0
msgid "Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form widget in addition to :class:`~django.forms.FileInput`. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3.txt:408
#: ../../releases/1.3-alpha-1.txt:201
# 7df7bc75b2224e868a0b5112fe8100f9
# 5ecc95ec42e24a1bb47dbc47482ec92b
msgid "``ClearableFileInput`` is now the default widget for a ``FileField``, so existing forms including ``FileField`` without assigning a custom widget will need to account for the possible extra checkbox in the rendered form output."
msgstr ""

#: ../../releases/1.3.txt:412
#: ../../releases/1.3-alpha-1.txt:205
# 21885531886d4663bf780e6cdc03eab5
# 52ac8a81f8074613a47e2629a8f7cdbc
msgid "To return to the previous rendering (without the ability to clear the ``FileField``), use the ``FileInput`` widget in place of ``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical ``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

#: ../../releases/1.3.txt:426
#: ../../releases/1.3-alpha-1.txt:219
# afd832e84841469c91074e1e1a993ef4
# 95d0940896094f4cb3b6f03b59824343
msgid "New index on database session table"
msgstr ""

#: ../../releases/1.3.txt:428
#: ../../releases/1.3-alpha-1.txt:221
# 3b82437e865345bf8596d137d9eec4e0
# 6f7f8b3ca47a4f929e090c09d881d263
msgid "Prior to Django 1.3, the database table used by the database backend for the :doc:`sessions </topics/http/sessions>` app had no index on the ``expire_date`` column. As a result, date-based queries on the session table -- such as the query that is needed to purge old sessions -- would be very slow if there were lots of sessions."
msgstr ""

#: ../../releases/1.3.txt:434
#: ../../releases/1.3-alpha-1.txt:227
# 5b9f6b7ab6eb4ac2b88a015a88c33f28
# 1aa930aee307418e8365f781304c3e60
msgid "If you have an existing project that is using the database session backend, you don't have to do anything to accommodate this change. However, you may get a significant performance boost if you manually add the new index to the session table. The SQL that will add the index can be found by running the :djadmin:`sqlindexes` admin command::"
msgstr ""

#: ../../releases/1.3.txt:444
#: ../../releases/1.3-alpha-1.txt:237
# 4350e21763c2467bbc9da3e638c45f22
# 1c52459129b54a8c950186f4551c1afb
msgid "No more naughty words"
msgstr ""

#: ../../releases/1.3.txt:446
#: ../../releases/1.3-alpha-1.txt:239
# c82f61bb67fb4130aa22d13592a54db4
# affca050621c4a45ab2713545bd246c1
msgid "Django has historically provided (and enforced) a list of profanities. The :doc:`comments app </ref/contrib/comments/index>` has enforced this list of profanities, preventing people from submitting comments that contained one of those profanities."
msgstr ""

#: ../../releases/1.3.txt:451
# e9bb0815e17043d18a863c95fb571be3
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3.txt:458
#: ../../releases/1.3-alpha-1.txt:251
# a21030109a9a454991e3ae3cabe96a87
# a9ab6f6c30524ef6b4d165e52ecf2545
msgid "If you want to restore the old behavior, simply put a :setting:`PROFANITIES_LIST` setting in your settings file that includes the words that you want to prohibit (see the `commit that implemented this change`_ if you want to see the list of words that was historically prohibited). However, if avoiding profanities is important to you, you would be well advised to seek out a better, less naive approach to the problem."
msgstr ""

#: ../../releases/1.3.txt:470
#: ../../releases/1.3-alpha-1.txt:263
# 8020e519caa14d66aa2649adee8f8b2c
# e251b82a9de94afeaede7a5d08c9035e
msgid "Localflavor changes"
msgstr ""

#: ../../releases/1.3.txt:472
#: ../../releases/1.3-alpha-1.txt:265
# 81c71a0513b244fdaaa43912cf3a9d80
# 1668a4824f9f4e9b8bb4df2f23b5fbdb
msgid "Django 1.3 introduces the following backwards-incompatible changes to local flavors:"
msgstr ""

#: ../../releases/1.3.txt:475
# a46ca5d12cd24ebb805f42d93e2c8597
msgid "Canada (ca) -- The province \"Newfoundland and Labrador\" has had its province code updated to \"NL\", rather than the older \"NF\". In addition, the Yukon Territory has had its province code corrected to \"YT\", instead of \"YK\"."
msgstr ""

#: ../../releases/1.3.txt:480
#: ../../releases/1.3-alpha-1.txt:268
# 05e16a052a8a48679e7e591ab36e0251
# 56c96ae5cfe3489a945d1fbde8c83717
msgid "Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been removed from the province list in favor of the new official designation \"Aceh (ACE)\"."
msgstr ""

#: ../../releases/1.3.txt:484
# 3ec5702cab2b41198436da45b24fbb69
msgid "United States of America (us) -- The list of \"states\" used by ``USStateField`` has expanded to include Armed Forces postal codes. This is backwards-incompatible if you were relying on ``USStateField`` not including them."
msgstr ""

#: ../../releases/1.3.txt:490
# fe011f27059d4d3ba6007b1c085f79f6
msgid "FormSet updates"
msgstr ""

#: ../../releases/1.3.txt:492
# de2e5cd11e9447c792dcab7ee32b33bd
msgid "In Django 1.3 ``FormSet`` creation behavior is modified slightly. Historically the class didn't make a distinction between not being passed data and being passed empty dictionary. This was inconsistent with behavior in other parts of the framework. Starting with 1.3 if you pass in empty dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

#: ../../releases/1.3.txt:498
# a9b731cb6dea49ffa893b5c2aeb11996
msgid "For example with a ``FormSet``::"
msgstr ""

#: ../../releases/1.3.txt:505
# 1e476df95a454bacb2cf97faf221d257
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

#: ../../releases/1.3.txt:512
# 40aaab14d173427e97486cefaf77c4c1
msgid "if you need to instantiate an empty ``FormSet``, don't pass in the data or use ``None``::"
msgstr ""

#: ../../releases/1.3.txt:519
# 35e81a78402f4bf38fc51c9c03d1c02d
msgid "Callables in templates"
msgstr ""

#: ../../releases/1.3.txt:521
# e5b20ae5a12745b3b70621c8438d7603
msgid "Previously, a callable in a template would only be called automatically as part of the variable resolution process if it was retrieved via attribute lookup. This was an inconsistency that could result in confusing and unhelpful behavior::"
msgstr ""

#: ../../releases/1.3.txt:531
# 1c6cabd11d7449f39c6c20cb3bccb45f
msgid "This has been resolved in Django 1.3 - the result in both cases will be ``u'Joe Bloggs'``. Although the previous behavior was not useful for a template language designed for web designers, and was never deliberately supported, it is possible that some templates may be broken by this change."
msgstr ""

#: ../../releases/1.3.txt:567
# 7fa09aa09e3e4f16a2d22d5c5d18c4d5
msgid "Changed priority of translation loading"
msgstr ""

#: ../../releases/1.3.txt:569
# 133ea043378a4918986d21281a0097cd
msgid "Work has been done to simplify, rationalize and properly document the algorithm used by Django at runtime to build translations from the different translations found on disk, namely:"
msgstr ""

#: ../../releases/1.3.txt:573
# a852be330af7490bad82e0216c6d5148
msgid "For translatable literals found in Python code and templates (``'django'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:576
# 4cb136419d11410c8de0f1ce6604186e
msgid "Priorities of translations included with applications listed in the :setting:`INSTALLED_APPS` setting were changed. To provide a behavior consistent with other parts of Django that also use such setting (templates, etc.) now, when building the translation that will be made available, the apps listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:582
# deb5beeb0029408b999305d542827d5d
msgid "Now it is possible to override the translations shipped with applications by using the :setting:`LOCALE_PATHS` setting whose translations have now higher precedence than the translations of :setting:`INSTALLED_APPS` applications. The relative priority among the values listed in this setting has also been modified so the paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:589
# 9ec133c221364a8faad07aef2a1295f9
msgid "The ``locale`` subdirectory of the directory containing the settings, that usually coincides with and is know as the *project directory* is being deprecated in this release as a source of translations. (the precedence of these translations is intermediate between applications and :setting:`LOCALE_PATHS` translations). See the `corresponding deprecated features section`_ of this document."
msgstr ""

#: ../../releases/1.3.txt:596
# c514367a1361454cb443a04294396779
msgid "For translatable literals found in Javascript code (``'djangojs'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:599
# eeb16b33a92b4b96a5137d839af4c63a
msgid "Similarly to the ``'django'`` domain translations: Overriding of translations shipped with applications by using the :setting:`LOCALE_PATHS` setting is now possible for this domain too. These translations have higher precedence than the translations of Python packages passed to the :ref:`javascript_catalog view <javascript_catalog-view>`.  Paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:606
# 5b4c91b5d27c4226b39317c9ef204d42
msgid "Translations under the ``locale`` subdirectory of the *project directory* have never been taken in account for JavaScript translations and remain in the same situation considering the deprecation of such location."
msgstr ""

#: ../../releases/1.3.txt:613
# 63c9e720f12b4345955c1a52562a5452
msgid "Transaction management"
msgstr ""

#: ../../releases/1.3.txt:615
# 4a6e66fa4a0c4d1882afbe7578da20f8
msgid "When using managed transactions -- that is, anything but the default autocommit mode -- it is important when a transaction is marked as \"dirty\". Dirty transactions are committed by the :func:`~django.db.transaction.commit_on_success` decorator or the :class:`~django.middleware.transaction.TransactionMiddleware`, and :func:`~django.db.transaction.commit_manually` forces them to be closed explicitly; clean transactions \"get a pass\", which means they are usually rolled back at the end of a request when the connection is closed."
msgstr ""

#: ../../releases/1.3.txt:625
# 66fbc447d56a4f7ebde6a191d0d76e59
msgid "Until Django 1.3, transactions were only marked dirty when Django was aware of a modifying operation performed in them; that is, either some model was saved, some bulk update or delete was performed, or the user explicitly called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked dirty when *any* database operation is performed."
msgstr ""

#: ../../releases/1.3.txt:632
# 9b5a305b94e8493d88eef3b87333ad1c
msgid "As a result of this change, you no longer need to set a transaction dirty explicitly when you execute raw SQL or use a data-modifying ``SELECT``. However, you *do* need to explicitly close any read-only transactions that are being managed using :func:`~django.db.transaction.commit_manually`. For example::"
msgstr ""

#: ../../releases/1.3.txt:643
# 9cd48629e8e54f2cb89ddce47afa1c26
msgid "Prior to Django 1.3, this would work without error. However, under Django 1.3, this will raise a :class:`~django.db.transaction.TransactionManagementError` because the read operation that retrieves the ``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""

#: ../../releases/1.3.txt:650
# 43a18e1a633549a7a19584d2bfd3c8e6
msgid "No password reset for inactive users"
msgstr ""

#: ../../releases/1.3.txt:652
# 08845bec0f3e4d09b8a354662d7b4732
msgid "Prior to Django 1.3, inactive users were able to request a password reset email and reset their password. In Django 1.3 inactive users will receive the same message as a nonexistent account."
msgstr ""

#: ../../releases/1.3.txt:659
#: ../../releases/1.3-alpha-1.txt:274
# 479638663ba54f5ebd23967e3ed65c3c
# e544e2d8d46d4300bfae8de7f36f6e17
msgid "Features deprecated in 1.3"
msgstr ""

#: ../../releases/1.3.txt:661
#: ../../releases/1.3-alpha-1.txt:276
# bd4bee6d7a9b46d2b5531bee6bc975ee
# 21053a6b6076413f82be79a823b46e92
msgid "Django 1.3 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.3.txt:665
#: ../../releases/1.3-alpha-1.txt:280
# 5134ae31dc484f7c8836b5db79d08ef9
# ab0e3119cf9647bf8619f2396d47b048
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or `-Wall` flag."
msgstr ""

#: ../../releases/1.3.txt:670
#: ../../releases/1.3-alpha-1.txt:285
# 347fab1b08db4736888c320ef4d1b02d
# 194f233853034532bf75fabec6da2202
msgid "In Django 1.4, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.5 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.3.txt:676
#: ../../releases/1.3-alpha-1.txt:291
# a6d42954e03e4ce582d10e167aff026a
# 14727b07b1fd4e8e9cbe12ca47a30c16
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`."
msgstr ""

#: ../../releases/1.3.txt:681
#: ../../releases/1.3-alpha-1.txt:296
# 2bfdbd645d0d4b75ab682737bb65fd87
# 8545f412a8c545ada394d17c883c26cc
msgid "``mod_python`` support"
msgstr ""

#: ../../releases/1.3.txt:683
#: ../../releases/1.3-alpha-1.txt:298
# 2747e496569148c2b1992c976b1b12ca
# 85f278b44ad3489996d0d525e3cbbc8f
msgid "The ``mod_python`` library has not had a release since 2007 or a commit since 2008. The Apache Foundation board voted to remove ``mod_python`` from the set of active projects in its version control repositories, and its lead developer has shifted all of his efforts toward the lighter, slimmer, more stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

#: ../../releases/1.3.txt:689
# 41070c5b0a5540538fdbce3e33da79dd
msgid "If you are currently using the ``mod_python`` request handler, you should redeploy your Django projects using another request handler. :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` is the request handler recommended by the Django project, but :doc:`FastCGI </howto/deployment/fastcgi>` is also supported. Support for ``mod_python`` deployment will be removed in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:697
#: ../../releases/1.3-alpha-1.txt:309
# 7ff18bb47c66494ca934b01c7fcffbc1
# d47ef233933d4440bbcec1301fb7b1d7
msgid "Function-based generic views"
msgstr ""

#: ../../releases/1.3.txt:699
#: ../../releases/1.3-alpha-1.txt:311
# 2bce874988ad40bd940a4405af9d4230
# 79c7b609b9fd4b59bbb1cf867300d51e
msgid "As a result of the introduction of class-based generic views, the function-based generic views provided by Django have been deprecated. The following modules and the views they contain have been deprecated:"
msgstr ""

#: ../../releases/1.3.txt:703
#: ../../releases/1.3-alpha-1.txt:315
# 242cecc57ea74f4daa78d073ce7153e0
# f840d8277c154bdeb99f1d7f7f147728
msgid ":mod:`django.views.generic.create_update`"
msgstr ""

#: ../../releases/1.3.txt:705
#: ../../releases/1.3-alpha-1.txt:316
# 76f4c4bca8f04396926c847c8013162b
# 4a580a622c96406b8325679a3f8a7e0f
msgid ":mod:`django.views.generic.date_based`"
msgstr ""

#: ../../releases/1.3.txt:707
#: ../../releases/1.3-alpha-1.txt:317
# ddd465b8266f4750bb47de4c110b2aec
# 6541642a21eb4b9aa49b7f73bdfdb3ab
msgid ":mod:`django.views.generic.list_detail`"
msgstr ""

#: ../../releases/1.3.txt:709
#: ../../releases/1.3-alpha-1.txt:318
# 96ec5996b6cd46c7acea7950dd9e30ea
# 9e1f2ea10093485bbfe427bee51d43d7
msgid ":mod:`django.views.generic.simple`"
msgstr ""

#: ../../releases/1.3.txt:712
#: ../../releases/1.3-alpha-1.txt:321
# 2440f1499ef44ab9a45a4b039c7f97a7
# 9a3743a65d484ea2b0c48f0771748213
msgid "Test client response ``template`` attribute"
msgstr ""

#: ../../releases/1.3.txt:714
#: ../../releases/1.3-alpha-1.txt:323
# 1992d70bab60407398967d40b154afca
# 2c11c6e0745a4b36b56530572e8d0c10
msgid "Django's :ref:`test client <test-client>` returns :class:`~django.test.client.Response` objects annotated with extra testing information. In Django versions prior to 1.3, this included a :attr:`~django.test.client.Response.template` attribute containing information about templates rendered in generating the response: either None, a single :class:`~django.template.Template` object, or a list of :class:`~django.template.Template` objects. This inconsistency in return values (sometimes a list, sometimes not) made the attribute difficult to work with."
msgstr ""

#: ../../releases/1.3.txt:723
#: ../../releases/1.3-alpha-1.txt:332
# 7734a0ce297644559fbd0cac5df909dd
# f4eb56566a4843c5a2aa5a810a624e4a
msgid "In Django 1.3 the :attr:`~django.test.client.Response.template` attribute is deprecated in favor of a new :attr:`~django.test.client.Response.templates` attribute, which is always a list, even if it has only a single element or no elements."
msgstr ""

#: ../../releases/1.3.txt:729
#: ../../releases/1.3-alpha-1.txt:338
# 5b80dc12a6514b3ab95e7ada1ed2f796
# d91e922ea0fc42aab55b2915684c0b87
msgid "``DjangoTestRunner``"
msgstr ""

#: ../../releases/1.3.txt:731
#: ../../releases/1.3-alpha-1.txt:340
# 348d56c29c574a2cb991a8a9214bcb49
# d6e88ffc449d4c0083a329d03f6675ca
msgid "As a result of the introduction of support for unittest2, the features of :class:`django.test.simple.DjangoTestRunner` (including fail-fast and Ctrl-C test termination) have been made redundant. In view of this redundancy, :class:`~django.test.simple.DjangoTestRunner` has been turned into an empty placeholder class, and will be removed entirely in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:739
# 7d76f0849bcb41bdae66ee9c5250a746
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

#: ../../releases/1.3.txt:741
# 5ce24febd1d74ab38cda6a408ea59e9b
msgid "Most template tags will allow you to pass in either constants or variables as arguments -- for example::"
msgstr ""

#: ../../releases/1.3.txt:746
# 1df229685481471a83585debf961217a
msgid "allows you to specify a base template as a constant, but if you have a context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

#: ../../releases/1.3.txt:751
# dc1d69710e6e4f869c67f80229d7ca4c
msgid "is also legal."
msgstr ""

#: ../../releases/1.3.txt:753
# 6259f3c7404b465b9f50c61fbb9b1d54
msgid "However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are different. These tags use the second, quoteless syntax, but interpret the argument as a constant. This means it isn't possible to use a context variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

#: ../../releases/1.3.txt:759
# 829a3253c0db484ab2617f37d9bb7319
msgid "Django 1.3 marks the start of the process to correct this historical accident. Django 1.3 adds a new template library -- ``future`` -- that provides alternate implementations of the :ttag:`url` and :ttag:`ssi` template tags. This ``future`` library implement behavior that makes the handling of the first argument consistent with the handling of all other variables. So, an existing template that contains::"
msgstr ""

#: ../../releases/1.3.txt:768
# e7c449032cce408d8904d0b4798dad11
msgid "should be replaced with::"
msgstr ""

#: ../../releases/1.3.txt:773
# 5decb8d3f66c48cda51bf7c1a75531e9
msgid "The tags implementing the old behavior have been deprecated, and in Django 1.5, the old behavior will be replaced with the new behavior. To ensure compatibility with future versions of Django, existing templates should be modified to use the new ``future`` libraries and syntax."
msgstr ""

#: ../../releases/1.3.txt:780
#: ../../releases/1.3-beta-1.txt:124
# c349fe59ef484fb197edb14244d29e2b
# c4f467c43abb4dc7beefdd07485a0787
msgid "Changes to the login methods of the admin"
msgstr ""

#: ../../releases/1.3.txt:782
#: ../../releases/1.3-beta-1.txt:126
# 4a8cd45939dd4c5ba961aa6cf1224967
# 990feffad08d489cbf017ed0e94c72db
msgid "In previous version the admin app defined login methods in multiple locations and ignored the almost identical implementation in the already used auth app. A side effect of this duplication was the missing adoption of the changes made in r12634_ to support a broader set of characters for usernames."
msgstr ""

#: ../../releases/1.3.txt:787
#: ../../releases/1.3-beta-1.txt:131
# 0381c32381c745328bcfc6589778c170
# 4f7b5afc4f9541229d9fde9312c90719
msgid "This release refactors the admin's login mechanism to use a subclass of the :class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual form validation. The previously undocumented method ``'django.contrib.admin.sites.AdminSite.display_login_form'`` has been removed in favor of a new :attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""

#: ../../releases/1.3.txt:797
# 0487a8c5cf7f43a7a31be95ad771be76
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

#: ../../releases/1.3.txt:799
# 80ea6e586b9847309a0b470a7e8cb99d
msgid "Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands can be used to delete everything. You can also use ALTER TABLE or DROP TABLE statements manually."
msgstr ""

#: ../../releases/1.3.txt:807
# 17fd20decf4148fcaf513f6776e86fed
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, :func:`django.contrib.gis.tests.run_gis_tests`, was deprecated for the class-based runner, :class:`django.contrib.gis.tests.GeoDjangoTestSuiteRunner`."
msgstr ""

#: ../../releases/1.3.txt:813
# 896b64a1f45044e19f1d533ec3916eb3
msgid "Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` would silently do nothing when GDAL wasn't available.  Now, a :class:`~django.contrib.gis.geos.GEOSException` is properly raised to indicate possible faulty application code.  A warning is now raised if :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the geometry is less than 0 or ``None``."
msgstr ""

#: ../../releases/1.3.txt:822
# aae3147b11ad4d74b4ea3ed6ff102ebe
msgid "``CZBirthNumberField.clean``"
msgstr ""

#: ../../releases/1.3.txt:824
# abbdc06a94b24fe68423f7c0818aec28
msgid "Previously this field's ``clean()`` method accepted a second, gender, argument which allowed stronger validation checks to be made, however since this argument could never actually be passed from the Django form machinery it is now pending deprecation."
msgstr ""

#: ../../releases/1.3.txt:830
# 081402d9ed074bc8ab0727b66072f0c9
msgid "``CompatCookie``"
msgstr ""

#: ../../releases/1.3.txt:832
# 81a289431ab349b8a6f74253c6976303
msgid "Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, which was a bug-fix wrapper around the standard library ``SimpleCookie``. As the fixes are moving upstream, this is now deprecated - you should use ``from django.http import SimpleCookie`` instead."
msgstr ""

#: ../../releases/1.3.txt:840
# a406d0e620654b009820d514a55c6edb
msgid "Loading of *project-level* translations"
msgstr ""

#: ../../releases/1.3.txt:842
# f9e14eb0d0e14bb8b54580bea140b5a1
msgid "This release of Django starts the deprecation process for inclusion of translations located under the so-called *project path* in the translation building process performed at runtime. The :setting:`LOCALE_PATHS` setting can be used for the same task by adding the filesystem path to a ``locale`` directory containing project-level translations to the value of that setting."
msgstr ""

#: ../../releases/1.3.txt:848
# cfa80707c3a343a99ed15fba0d184204
msgid "Rationale for this decision:"
msgstr ""

#: ../../releases/1.3.txt:850
# 986e038989a24cc2860172fd8a58321b
msgid "The *project path* has always been a loosely defined concept (actually, the directory used for locating project-level translations is the directory containing the settings module) and there has been a shift in other parts of the framework to stop using it as a reference for location of assets at runtime."
msgstr ""

#: ../../releases/1.3.txt:856
# ae1dd0a0ee564a9a93816183f150b492
msgid "Detection of the ``locale`` subdirectory tends to fail when the deployment scenario is more complex than the basic one. e.g. it fails when the settings module is a directory (ticket #10765)."
msgstr ""

#: ../../releases/1.3.txt:860
# 488f11815a30429db7c8235acf250bc5
msgid "There are potential strange development- and deployment-time problems like the fact that the ``project_dir/locale/`` subdir can generate spurious error messages when the project directory is added to the Python path (``manage.py runserver`` does this) and then it clashes with the equally named standard library module, this is a typical warning message::"
msgstr ""

#: ../../releases/1.3.txt:870
# 448a15b65b07433ab7a734dd7e185502
msgid "This location wasn't included in the translation building process for JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

#: ../../releases/1.3.txt:875
# 5df48b657ea14055bc8b77ce5943ffa3
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

#: ../../releases/1.3.txt:877
# b822823b92514f07aa01538a9168766e
msgid "In Django 1.2, we began the process of changing the location of the ``auth`` context processor from ``django.core.context_processors`` to ``django.contrib.auth.context_processors``. However, the ``PermWrapper`` support class was mistakenly omitted from that migration. In Django 1.3, the ``PermWrapper`` class has also been moved to ``django.contrib.auth.context_processors``, along with the ``PermLookupDict`` support class. The new classes are functionally identical to their old versions; only the module location has changed."
msgstr ""

#: ../../releases/1.3.txt:887
# 907ba23ba4644e949f65447014504b0a
msgid "Removal of ``XMLField``"
msgstr ""

#: ../../releases/1.3.txt:889
# 36c6c4d73760453dbdca3f24a0feb42e
msgid "When Django was first released, Django included an :class:`~django.db.models.XMLField` that performed automatic XML validation for any field input. However, this validation function hasn't been performed since the introduction of ``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as currently implemented is functionally indistinguishable from a simple :class:`~django.db.models.TextField`."
msgstr ""

#: ../../releases/1.3.txt:896
# d835e3586ae246c2b93e6afcfeb024f6
msgid "For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` -- instead of a two-release deprecation, ``XMLField`` will be removed entirely in Django 1.4."
msgstr ""

#: ../../releases/1.3.txt:900
# 7701f6bd297a4ae382a4929f059992ce
msgid "It's easy to update your code to accommodate this change -- just replace all uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` keyword argument (if it is specified)."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:3
# 8b645305d6fd40ddb66f510d47c56794
msgid "Django 1.3 alpha 1 release notes"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:5
# 0310ea466c224f4f9b335eb0752a799d
msgid "November 11, 2010"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:7
# b953d3ff87a84f68bda8f1d068cacc16
msgid "Welcome to Django 1.3 alpha 1!"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:9
# 94c33b5e3cf44ed3a9821f6044c6b8d3
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:18
# 6bf8c8db4d53495880b13a5d80933c6a
msgid "As of this alpha release, Django 1.3 contains a number of nifty `new features`_, lots of bug fixes, some minor `backwards incompatible changes`_ and an easy upgrade path from Django 1.2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:27
# 7a90a702daa44ee08e204964c5cad7eb
msgid "What's new in Django 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:41
# 40f31f2d1968497b8db3718a42e644ff
msgid "See :doc:`the documentation on Class-based Generic Views </topics/class-based-views>` for more details. There is also a document to help you :doc:`convert your function-based generic views to class-based views</topics/generic-views-migration>`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:49
# 42a16b05fb7c41279a3b369d2bb4ed50
msgid "Django 1.3 adds framework-level support for Python's logging module. This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:60
# 36adc62c29fd47ed8e34a400be64fa61
msgid "Django 1.3 ships with a new contrib app ``'django.contrib.staticfiles'`` to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:64
# 52cfd4d5849c4cffa3fa616252dd90e8
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files. For this reason, you will probably want to make your :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` different from your :setting:`STATICFILES_ROOT` and :setting:`STATICFILES_URL`. You will need to arrange for serving of files in :setting:`MEDIA_ROOT` yourself; ``staticfiles`` does not deal with user-uploaded media at all."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:79
# fbfda230dcba4823b2cdafcd415e5d9e
msgid "``unittest2`` support"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:81
# 78cff8be11c746ad878f40a01a39625c
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:87
# 32fcad47b8674406acfc5679e1ee4097
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use it's own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:93
# d3421443bc0d44698c0610cc4e374812
msgid "To use this alias, simply use::"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:101
# a7845d1dec4e4d0887403adbc8b36fb7
msgid "If you want to continue to use the base unittest libary, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:133
# 2a91706a76504f738a4fc3436ef2ae7a
msgid "Contextual markers in translatable strings"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:138
# 54e19a924caf4a92bf454896da66285a
msgid "For more information, see :ref:`contextual-markers`"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:153
# 220b44a7f475420b96efb1380f0e8270
msgid "Improved tools for accessing and manipulating the current Site via :func:`django.contrib.sites.models.get_current_site`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:159
# 0bbe30a56e494c68ba316613a5be5e60
msgid "A new test assertion -- :meth:`~django.test.client.Client.assertNumQueries` -- making it easier to test the database activity associated with a view."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:167
# 1e5c48498771438689b58289c2e79f2c
msgid "Backwards-incompatible changes in 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:196
# ce0289ab6f98490584e9658532a6d66b
msgid "Django 1.3 now includes a ``ClearableFileInput`` form widget in addition to ``FileInput``. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:244
# d9c2d2f8495a446da037c47ef37df3e2
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Fixing the built in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:304
# 272b65003f9e4fc8bb8143a08c42f4e6
msgid "If you are currently using the ``mod_python`` request handler, you are strongly encouraged to redeploy your Django instances using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:348
#: ../../releases/1.3-beta-1.txt:187
# cb3e9f609d874e3abb1e6e51dba12f46
# 884aa33f12fe41839b2dd78396fdef01
msgid "The Django 1.3 roadmap"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:350
#: ../../releases/1.3-beta-1.txt:189
# d185bf5044a54aff82a90788b4ce0fea
# 107c94f715044ef7983edab0fb77f601
msgid "Before the final Django 1.3 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:354
# 811ea503b52e47daaaa681bfec220286
msgid "Week of **November 29, 2010**: First Django 1.3 beta release. Final feature freeze for Django 1.3."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:357
# 01aad22ae24845789026a0838fa522cb
msgid "Week of **January 10, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:360
# 157d784b300e46c6a200018b66910652
msgid "Week of **January 17, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:362
# edc1c13704fd42f1a01a36ff16fb8de9
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:370
# 6d9045f678ae4045855e9badd7f214f7
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:381
#: ../../releases/1.3-beta-1.txt:217
#: ../../releases/1.4-alpha-1.txt:1103
# d36a4d385c764e87910e6c3e6cecda1a
# 7df4c9db5e274499936dc4d954b79187
# e57d5a994043414086751af1fc8faa61
msgid "Additionally, discussion of Django development, including progress toward the 1.3 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:399
# 1bc333e583ad4417b27d35356ae99247
msgid "Several development sprints will also be taking place before the 1.3 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.3-beta-1.txt:3
# 48174dc5a4564faea7ea572c1129c081
msgid "Django 1.3 beta 1 release notes"
msgstr ""

#: ../../releases/1.3-beta-1.txt:5
# 0af4332bf8f74168b18927709cca829c
msgid "Welcome to Django 1.3 beta 1!"
msgstr ""

#: ../../releases/1.3-beta-1.txt:7
# f131c71731514a89a666a409ebc99c26
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:17
# e26db10cbba0421c89bac7f4b6cf9269
msgid "What's new in Django 1.3 beta 1"
msgstr ""

#: ../../releases/1.3-beta-1.txt:20
# 4b0cc8318c824974a07e2901f34d2f73
msgid "Further tweaks to the staticfiles app"
msgstr ""

#: ../../releases/1.3-beta-1.txt:22
# cbd8e723cd054e40aa6432c4e56083d3
msgid "Django 1.3 ships with a new contrib app :mod:`django.contrib.staticfiles` to help developers handle the static media files (images, CSS, JavaScript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-beta-1.txt:26
# c2eb2140e4a74432b72f6f62920ac576
msgid "The :mod:`~django.contrib.staticfiles` app ships with the ability to automatically serve static files during development (if the :setting:`DEBUG` setting is ``True``) when using the :djadmin:`runserver` management command. Based on feedback from the community this release adds two new options to the :djadmin:`runserver` command to modify this behavior:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:32
# e6b0f2965101488daba8d1d25ed1553f
msgid "``--nostatic``: prevents the :djadmin:`runserver` command from serving files completely."
msgstr ""

#: ../../releases/1.3-beta-1.txt:35
# 9a6d1601a8504f888f74a8e0f169c853
msgid "``--insecure``: enables serving of static files even if running with :setting:`DEBUG` set to False. (This is **not** recommended!)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:38
# 37a2607314344169b46d97d90405da11
msgid "See the :doc:`staticfiles reference documentation </ref/contrib/staticfiles>` for more details, or learn :doc:`how to manage static files </howto/static-files>`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:43
# fd1a1ae973b547b1adbad4fae78a6411
msgid "Translation comments"
msgstr ""

#: ../../releases/1.3-beta-1.txt:45
# 4490962de8f149498a7496281a1f3086
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../releases/1.3-beta-1.txt:53
# d151d7edfbb047a89d475fc3cd04721a
msgid "The comment will appear in the resulting .po file and should also be displayed by most translation tools."
msgstr ""

#: ../../releases/1.3-beta-1.txt:56
# d93ace4ec4f44265a7ac8c3f6bc7c6e5
msgid "For more information, see :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:61
# 9ad6af708c3d4b4e9ac4f03a1f5ca010
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive user model will check the backend for permissions. This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:67
# 7a025f0c546a40da9b45916f385a7ab9
msgid "Backwards-incompatible changes in 1.3 alpha 2"
msgstr ""

#: ../../releases/1.3-beta-1.txt:70
# cfaa870a65d541e596aa8711c245d27d
msgid "Change to admin lookup filters"
msgstr ""

#: ../../releases/1.3-beta-1.txt:72
# 7e69a11fc2e54292b951c367d35b2be4
msgid "The Django admin has long had an undocumented \"feature\" allowing savvy users to manipulate the query string of changelist pages to filter the list of objects displayed. However, this also creates a security issue, as a staff user with sufficient knowledge of model structure could use this \"feature\" to gain access to information he or she would not normally have."
msgstr ""

#: ../../releases/1.3-beta-1.txt:79
# 702ba06ddb6e47179ae1574d8a4689bb
msgid "As a result, changelist filtering now explicitly validates all lookup arguments in the query string, and permits only fields which are directly on the model, or relations explicitly permitted by the ``ModelAdmin`` definition. If you were relying on this undocumented feature, you will need to update your ``ModelAdmin`` definitions to whitelist the relations you choose to expose for filtering."
msgstr ""

#: ../../releases/1.3-beta-1.txt:87
# 8d7d5ced41b84cf18e95da091eb1a012
msgid "Introduction of STATIC_URL and STATIC_ROOT settings"
msgstr ""

#: ../../releases/1.3-beta-1.txt:89
# efed0e6e30bf4725a111eca786ab1ac5
msgid "The newly introduced :mod:`~django.contrib.staticfiles` app -- which extends Django's abilities to handle static files for apps and projects -- required the additon of two new settings to refer to those files in templates and code, especially in contrast to the :setting:`MEDIA_URL` and :setting:`MEDIA_ROOT` settings that refer to user-uploaded files."
msgstr ""

#: ../../releases/1.3-beta-1.txt:95
# b39ab6c0f1bb4bc2a9b8ccfb0aca92f2
msgid "Prior to 1.3 alpha 2 these settings were called ``STATICFILES_URL`` and ``STATICFILES_ROOT`` to follow the naming scheme for app-centric settings. Based on feedback from the community it became apparent that those settings created confusion, especially given the fact that handling static files is also desired outside the use of the optional :mod:`~django.contrib.staticfiles` app."
msgstr ""

#: ../../releases/1.3-beta-1.txt:101
# b43cc25bc35b4c828a696b3e12a2398c
msgid "As a result, we took the following steps to rectify the issue:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:103
# 2520ad36bb76460da59585c4ddc5fc2d
msgid "Two new global settings were added that will be used by, **but are not limited to**, the :doc:`staticfiles</ref/contrib/staticfiles>` app:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:106
# c8c4b8716a384e9682b8e2585a115aec
msgid ":setting:`STATIC_ROOT` (formally ``STATICFILES_ROOT``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:108
# 9147508d1bdb4d59813e1348af50ee2f
msgid ":setting:`STATIC_URL` (formally ``STATICFILES_URL``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:110
# e61f10edfdb348bd91435bdc7638d917
msgid "The ``django.contrib.staticfiles.templatetags.staticfiles.get_staticfiles_prefix`` template tag was moved to Django's core (``django.templatetags.static``) and renamed to :ttag:`get_static_prefix`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:114
# 08dacf5743104a9397243e02dde2a370
msgid "The ``django.contrib.staticfiles.context_processors.staticfiles`` context processor was moved to Django's core (``django.core.context_processors.static``) and renamed to :func:`~django.core.context_processors.static`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:119
# c8da5cb9f02c4d5eb63b2fb97f518cd9
msgid ":ref:`form-media-paths` now uses :setting:`STATIC_URL` as the prefix **if the value is not None**, and falls back to the previously used :setting:`MEDIA_URL` setting otherwise."
msgstr ""

#: ../../releases/1.3-beta-1.txt:141
# 42980a08af994ab88d476a9d0d44b0f3
msgid "Changes to ``USStateField``"
msgstr ""

#: ../../releases/1.3-beta-1.txt:143
# 8fcff8bf5a1f4701ad38d8d49c21ad3c
msgid "The :mod:`django.contrib.localflavor` application contains collections of code relevant to specific countries or cultures. One such is :class:`~django.contrib.localflavor.us.models.USStateField`, which provides a field for storing the two-letter postal abbreviation of a U.S. state. This field has consistently caused problems, however, because it is often used to store the state portion of a U.S postal address, but not all \"states\" recognized by the U.S Postal Service are actually states of the U.S. or even U.S. territory. Several compromises over the list of choices resulted in some users feeling the field supported too many locations, while others felt it supported too few."
msgstr ""

#: ../../releases/1.3-beta-1.txt:155
# 9523c6b5aab14e46a4ce4880ee18e4c2
msgid "In Django 1.3 we're taking a new approach to this problem, implemented as a pair of changes:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:158
# 6dd6a2c02a424159b2a18932f4695efc
msgid "The choice list for `USStateField` has changed. Previously, it consisted of the 50 U.S. states, the District of Columbia and U.S. overseas territories. As of Django 1.3 it includes all previous choices, plus the U.S. Armed Forces postal codes."
msgstr ""

#: ../../releases/1.3-beta-1.txt:163
# 836a7661ff8c43c9a55bc3cd7c0d0edd
msgid "A new model field, :class:`django.contrib.localflavor.us.models.USPostalCodeField`, has been added which draws its choices from a list of all postal abbreviations recognized by the U.S Postal Service. This includes all abbreviations recognized by `USStateField`, plus three independent nations -- the Federated States of Micronesia, the Republic of the Marshall Islands and the Republic of Palau -- which are serviced under treaty by the U.S. postal system. A new form widget, :class:`django.contrib.localflavor.us.forms.USPSSelect`, is also available and provides the same set of choices."
msgstr ""

#: ../../releases/1.3-beta-1.txt:174
# 015a572e65e44a039cfa989330f1fb16
msgid "Additionally, several finer-grained choice tuples are provided which allow mixing and matching of subsets of the U.S. states and territories, and other locations serviced by the U.S. postal system. Consult the :mod:`django.contrib.localflavor` documentation for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:180
# c1293f4fa39d4cafba6d531e4870decb
msgid "The change to `USStateField` is technically backwards-incompatible for users who expect this field to exclude Armed Forces locations. If you need to support U.S. mailing addresses without Armed Forces locations, see the list of choice tuples available in the localflavor documentation."
msgstr ""

#: ../../releases/1.3-beta-1.txt:193
# ea5415642d50441aab03a2e7b6eabbf4
msgid "Week of **January 24, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-beta-1.txt:196
# 7410c7d1e7a445b0a04c99bed2d01177
msgid "Week of **January 31, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:198
# 896af7bad3294660a0b2b82989ca2487
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-beta-1.txt:206
# 52952027ce524098afcacb7cb51eb5b2
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3.1.txt:3
# 841d5ba0b2e04ab6a9f8e8c9a1c17d64
msgid "Django 1.3.1 release notes"
msgstr ""

#: ../../releases/1.3.1.txt:7
# f794e0038ef34403ba534978bd5a56f9
msgid "Welcome to Django 1.3.1!"
msgstr ""

#: ../../releases/1.3.1.txt:9
# 75f3fad9c7c548dea7848b40ec968890
msgid "This is the first security release in the Django 1.3 series, fixing several security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.4.txt:3
# 28c6cff6ebf14c81973eb9b5a991d446
msgid "Django 1.4 release notes"
msgstr ""

#: ../../releases/1.4.txt:5
# 1fb191a842954cf597bb50c1e8fa0a7c
msgid "*March 23, 2012*"
msgstr ""

#: ../../releases/1.4.txt:7
# 96c8fcb9b50640b3bd81d22755b92bab
msgid "Welcome to Django 1.4!"
msgstr ""

#: ../../releases/1.4.txt:9
# fef348d6efb14a128cad6d7e4fb6f3a8
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.3 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4.txt:23
# 8ee4324d0877469993ec891dfbd76c01
msgid "The biggest new feature in Django 1.4 is `support for time zones`_ when handling date/times. When enabled, this Django will store date/times in UTC, use timezone-aware objects internally, and translate them to users' local timezones for display."
msgstr ""

#: ../../releases/1.4.txt:28
# 1a4660f8b8304fdd96b563aaeb64aaea
msgid "If you're upgrading an existing project to Django 1.4, switching to the time- zone aware mode may take some care: the new mode disallows some rather sloppy behavior that used to be accepted. We encourage anyone who's upgrading to check out the :ref:`timezone migration guide <time-zones-migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful pointers."
msgstr ""

#: ../../releases/1.4.txt:34
# 87812971d84b4515b273d365f91c7753
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

#: ../../releases/1.4.txt:36
# 0a3010ba718745abafc187df6c92ead5
msgid "A number of ORM improvements, including `SELECT FOR UPDATE support`_, the ability to `bulk insert <Model.objects.bulk_create in the ORM>`_ large datasets for improved performance, and `QuerySet.prefetch_related`_, a method to batch-load related objects in areas where :meth:`~django.db.models.QuerySet.select_related` does't work."
msgstr ""

#: ../../releases/1.4.txt:43
# 8695e57ebd2a414fb7d252368edbdb46
msgid "Some nice security additions, including `improved password hashing`_ (featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic signing`_, several `CSRF improvements`_, and `simple clickjacking protection`_."
msgstr ""

#: ../../releases/1.4.txt:48
# fd3524d2ae9540a4be93d45fa10ea379
msgid "An `updated default project layout and manage.py`_ that removes the \"magic\" from prior versions. And for those who don't like the new layout, you can use `custom project and app templates`_ instead!"
msgstr ""

#: ../../releases/1.4.txt:52
# dd658c4c305f4979870741ad9c12efcd
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

#: ../../releases/1.4.txt:54
# fa3dd98eb8a6448e9180c7bf60e10fd5
msgid "... and a whole lot more; `see below <what's new in django 1.4>`_!"
msgstr ""

#: ../../releases/1.4.txt:56
# 40fc2bc1739e47da8a4e6a590704facf
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.4 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.4.txt:65
# fa10b6c83ea34696a13a5f2adc86be5e
msgid "Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum required Python version. Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4.txt:69
# d213fd5fc5dd4f119bb39cc28490b0a7
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4.txt:76
# 8a225a2fb1504cd3a2040085fe953dda
msgid "Django does not support Python 3.x at this time. At some point before the release of Django 1.4, we plan to publish a document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

#: ../../releases/1.4.txt:81
#: ../../releases/1.4-alpha-1.txt:48
#: ../../releases/1.4-beta-1.txt:64
# 08af4d9031494a4db31df9fe55d1d026
# db4b7a224aeb4b99b685c62320e22728
# 8f4233e9c5604ed7b5c1b49cc7c50b10
msgid "What's new in Django 1.4"
msgstr ""

#: ../../releases/1.4.txt:84
#: ../../releases/1.4-alpha-1.txt:470
#: ../../releases/1.4-beta-1.txt:508
# 27a88723ee06454cbea8ed64e3bfcbd3
# 4c8a9286086b4a8fae41d469aab4e092
# a160fe8575094571b3dfe0bd250cb062
msgid "Support for time zones"
msgstr ""

#: ../../releases/1.4.txt:86
# 76dac4dbaf6d49c887b8aa8364b1397a
msgid "In previous versions, Django used \"naive\" date/times (that is, date/times without an associated time zone), leaving it up to each developer to interpret what a given date/time \"really means\". This can cause all sorts of subtle timezone-related bugs."
msgstr ""

#: ../../releases/1.4.txt:91
# 43af4a25dc67465b9a42d3d2f3f9681b
msgid "In Django 1.4, you can now switch Django into a more correct, time-zone aware mode. In this mode, Django stores date and  time information in UTC in the database, uses time-zone-aware datetime objects internally and translates them to the end user's time zone in templates and forms. Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4.txt:97
#: ../../releases/1.4-alpha-1.txt:479
#: ../../releases/1.4-beta-1.txt:517
# fe5da70994524bf8828ca9857fed89f5
# cc4c292d3fc141feb14897140073b963
# 1d459587739248e2b18cc87ff01f2b98
msgid "Customizing date and time display for users around the world."
msgstr ""

#: ../../releases/1.4.txt:99
#: ../../releases/1.4-alpha-1.txt:480
#: ../../releases/1.4-beta-1.txt:518
# 9094dd67d5214a6fa0aa19d5a861cf8c
# 5a0f61fac2ea4883849a9ce86c879f70
# d9430125ead942dc9b2a24c6292bfd24
msgid "Storing datetimes in UTC for database portability and interoperability. (This argument doesn't apply to PostgreSQL, because it already stores timestamps with time zone information in Django 1.3.)"
msgstr ""

#: ../../releases/1.4.txt:103
#: ../../releases/1.4-alpha-1.txt:483
#: ../../releases/1.4-beta-1.txt:521
# 2edfef17b3da4b6fa229d10706650c95
# edd46a09e83a40d2b55c8237ef976a2a
# e4336350f54f4a4fb94a73321fd0c525
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

#: ../../releases/1.4.txt:105
# de1ee93d25c04bafa2388b0b3febacfe
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, read the :ref:`migration guide <time-zones-migration-guide>`. If you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

#: ../../releases/1.4.txt:111
#: ../../releases/1.4-alpha-1.txt:51
#: ../../releases/1.4-beta-1.txt:67
# cb86ac79fb8a481493c4cbb49b0d0689
# 106da461e7ce475fb598cd332203bab5
# 96411a97b59a4d5c89a645609239d3b4
msgid "Support for in-browser testing frameworks"
msgstr ""

#: ../../releases/1.4.txt:113
#: ../../releases/1.4-alpha-1.txt:53
#: ../../releases/1.4-beta-1.txt:69
# ea259e52004c4b1baaaf069ef4b59bbb
# 6c9133bad3694425bdda1bd51345e5f6
# 0b48db47d9324a62b9246f622bd414b5
msgid "Django 1.4 supports integration with in-browser testing frameworks like Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets you test the interactions between your site's front and back ends more comprehensively. See the :class:`documentation<django.test.LiveServerTestCase>` for more details and concrete examples."
msgstr ""

#: ../../releases/1.4.txt:123
#: ../../releases/1.4-alpha-1.txt:366
#: ../../releases/1.4-beta-1.txt:404
# c33691878e604055bc073f9739a5fdc1
# dd24de61be1d4df499aa201476f0f94b
# e9be1d1a2a654b78893b69e38bfb0763
msgid "Updated default project layout and ``manage.py``"
msgstr ""

#: ../../releases/1.4.txt:125
#: ../../releases/1.4-alpha-1.txt:368
#: ../../releases/1.4-beta-1.txt:406
# eec986c446dc43ed82961fe59ecb8006
# 5cccb1582bc24853a639d05c9da449d8
# 7f62b8fa2c2f46699f02b71499207e0b
msgid "Django 1.4 ships with an updated default project layout and ``manage.py`` file for the :djadmin:`startproject` management command. These fix some issues with the previous ``manage.py`` handling of Python import paths that caused double imports, trouble moving from development to deployment, and other difficult-to-debug path issues."
msgstr ""

#: ../../releases/1.4.txt:131
# dcd48b663d704063b74b745c09dff955
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4.txt:136
#: ../../releases/1.4-alpha-1.txt:379
#: ../../releases/1.4-beta-1.txt:417
# b97cd7c6b2b54385b7d11f118be03f16
# 5f16ffa37c0b40b39a474ff9769d633e
# 32d1dd2e19b14b2e8cb5db3d4c7c8dfd
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

#: ../../releases/1.4.txt:148
#: ../../releases/1.4-alpha-1.txt:391
#: ../../releases/1.4-beta-1.txt:429
# 6c608e8af6e34cb18fc56217250e7572
# 42ddce2a1e08495eb0d8d194a53aa683
# ebe54282650f498e98420869bf0c2a3f
msgid "``{{ project_name }}`` should be replaced with the Python package name of the actual project."
msgstr ""

#: ../../releases/1.4.txt:151
# ba9ef60226a942899ac38175c26e4357
msgid "If settings, URLconfs and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4.txt:157
#: ../../releases/1.4-alpha-1.txt:400
#: ../../releases/1.4-beta-1.txt:438
# c0f7aeebb24c4a4b9c30752fed19b0df
# af0b8c4cf810435d858ca2a62e5667ab
# aaf41077586e4360bc9f487f5bd7b5c3
msgid "For instance, with the following layout::"
msgstr ""

#: ../../releases/1.4.txt:168
#: ../../releases/1.4-alpha-1.txt:411
#: ../../releases/1.4-beta-1.txt:449
# ff12d4e45bec40f58a6aadc6a2d4a56e
# 2691ddd07df146a1803ddcf1c2acaff3
# f870658ef9a84ab88d6fad7d98043379
msgid "You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

#: ../../releases/1.4.txt:171
#: ../../releases/1.4-alpha-1.txt:414
#: ../../releases/1.4-beta-1.txt:452
# 35bcf2f49d0746f589a086df8f6f690a
# a77240eb872941b78ecce89813430b5a
# ffa8c71c6e7f4c44924929876f95b599
msgid "Anything imported as a top-level module can be placed adjacent to the new ``manage.py``. For instance, to decouple \"myapp\" from the project module and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

#: ../../releases/1.4.txt:184
#: ../../releases/1.4-alpha-1.txt:427
#: ../../releases/1.4-beta-1.txt:465
# dda78366f4ff4992938192874454c23a
# db270888dbb24a99b059bde41e2ad2d8
# 62b67b62e62b4fbbbb5a63285a793521
msgid "If the same code is imported inconsistently (some places with the project prefix, some places without it), the imports will need to be cleaned up when switching to the new ``manage.py``."
msgstr ""

#: ../../releases/1.4.txt:189
#: ../../releases/1.4-alpha-1.txt:449
#: ../../releases/1.4-beta-1.txt:487
# c68bc7b071a84e10808b5514b278e249
# 5328816269df4311a01f2d81292b779e
# b69d226129d84bcf8934aeab0a5f2f25
msgid "Custom project and app templates"
msgstr ""

#: ../../releases/1.4.txt:191
# 63b80f50f6464f8380b514cb3754534c
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands now have a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4.txt:195
# 8abe69470b4e4b3ba909230880622ef1
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when you run the following command::"
msgstr ""

#: ../../releases/1.4.txt:200
#: ../../releases/1.4-alpha-1.txt:460
#: ../../releases/1.4-beta-1.txt:498
# 5b837f29e7944310b5c03c92b6343e09
# 96e1f94530fc45fdb6e51a1fa4551f6d
# 9ea0147e906645998c3088a946826e42
msgid "You can also now provide a destination directory as the second argument to both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

#: ../../releases/1.4.txt:206
#: ../../releases/1.4-alpha-1.txt:466
#: ../../releases/1.4-beta-1.txt:504
# de52829c9afd4be896465a48d7e10d4c
# 4b83615009bb4433b2906b0de9b63ace
# 648bece9307940ad9487037d25a253df
msgid "For more information, see the :djadmin:`startapp` and :djadmin:`startproject` documentation."
msgstr ""

#: ../../releases/1.4.txt:210
#: ../../releases/1.4-alpha-1.txt:432
#: ../../releases/1.4-beta-1.txt:470
# 92754a5e9c3b47619410a37f2e0139bd
# d13c7f1a91a34a7b85c2c6ae542d5780
# 8119c513e04e407486167b3fe3bd9bd1
msgid "Improved WSGI support"
msgstr ""

#: ../../releases/1.4.txt:212
#: ../../releases/1.4-alpha-1.txt:434
#: ../../releases/1.4-beta-1.txt:472
# 1c2bdbe6f41d47f1bcfc912bd6ca168e
# 976b0881ed304b4caefc0faadb9f7952
# 979979b7e17342959d9c200c756ceafb
msgid "The :djadmin:`startproject` management command now adds a :file:`wsgi.py` module to the initial project layout, containing a simple WSGI application that can be used for :doc:`deploying with WSGI app servers</howto/deployment/wsgi/index>`."
msgstr ""

#: ../../releases/1.4.txt:217
# c4b1e06457364d27b1dd5d16d0d7a14c
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, which makes it possible to run runserver with the same WSGI configuration that is used for deployment. The new :setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4.txt:223
#: ../../releases/1.4-alpha-1.txt:445
#: ../../releases/1.4-beta-1.txt:483
# c3821f24ff3b40a59283426cfba9332d
# 0712d3886c3b4a92b1466c35ab9537ac
# 414b482fae274ae08b236a8f0854456e
msgid "(The :djadmin:`runfcgi` management command also internally wraps the WSGI callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

#: ../../releases/1.4.txt:227
#: ../../releases/1.4-alpha-1.txt:63
#: ../../releases/1.4-beta-1.txt:79
# 6ae63e752bfc4696b2258661b7eedf6d
# 80b9a37681c5493c8d96ea6a289790e8
# e6fbaa64a04f41a39490e12cd6a30589
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

#: ../../releases/1.4.txt:229
# a1665dd048ab4210aaecda505e275b2b
msgid "Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method, which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4.txt:235
#: ../../releases/1.4-alpha-1.txt:71
#: ../../releases/1.4-beta-1.txt:87
# b90a14692025453293d518890accacc8
# 670f1df68b2a4406aed711b2a9289a3e
# 6a9b4c50856948f7a468684efdf8c209
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.select_for_update`."
msgstr ""

#: ../../releases/1.4.txt:239
#: ../../releases/1.4-alpha-1.txt:75
#: ../../releases/1.4-beta-1.txt:91
# 31c314e593824ed29f53a679d450511f
# 2e387882e2ee44c9993f29fe88042920
# 02b0e7431cd442f08e5a3dbc65fd6101
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

#: ../../releases/1.4.txt:241
# f1c38a7be8cb409b879e3b4165f142be
msgid "This method lets you create multiple objects more efficiently. It can result in significant performance increases if you have many objects."
msgstr ""

#: ../../releases/1.4.txt:244
# d2ce90b15f904f17916fc97aa06d5b42
msgid "Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4.txt:247
#: ../../releases/1.4-alpha-1.txt:82
#: ../../releases/1.4-beta-1.txt:98
# af9dc79f0f51467c9d5a55a86f45ac3a
# e6c2ca1ef4884889a7ab4d612d153108
# d8ff0c0b18764adb95c030cbdb190bf4
msgid "See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:251
#: ../../releases/1.4-alpha-1.txt:86
#: ../../releases/1.4-beta-1.txt:102
# 73748c20314544d1ab93b190829f7de7
# 27954131f0b541a7913dea63e8d408ba
# aad25fb4e5a5408e9f6d7e996460c29c
msgid "``QuerySet.prefetch_related``"
msgstr ""

#: ../../releases/1.4.txt:253
# 5c480233a6294c5ab473a941aad65911
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need to fetch."
msgstr ""

#: ../../releases/1.4.txt:267
#: ../../releases/1.4-alpha-1.txt:102
#: ../../releases/1.4-beta-1.txt:118
# cdfaabd3cab044a6a21b698d307b70ac
# 3dc95d83ad7b4c9586b99b553da504bd
# d5f84f00ec344dc1baf9cfecdcfad9e8
msgid "Improved password hashing"
msgstr ""

#: ../../releases/1.4.txt:269
#: ../../releases/1.4-alpha-1.txt:104
#: ../../releases/1.4-beta-1.txt:120
# 5879f524bbc94f2ea4f387f1193b0bb4
# 3c1721fd2da04f3892634b88cf148fc0
# a914ef1db57c4e7ea958b87668f7efdd
msgid "Django's auth system (``django.contrib.auth``) stores passwords using a one-way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor speeds and theoretical attacks have revealed that SHA1 isn't as secure as we'd like. Thus, Django 1.4 introduces a new password storage system: by default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You can also easily choose a different algorithm (including the popular bcrypt_ algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

#: ../../releases/1.4.txt:283
# 485f90fab42f41be98b72f44d230256a
msgid "HTML5 doctype"
msgstr ""

#: ../../releases/1.4.txt:285
#: ../../releases/1.4-alpha-1.txt:121
#: ../../releases/1.4-beta-1.txt:152
# 2027d863e60644129ba4e851fd23919a
# c6d767e5a123491895a1b592dfb88b9c
# c854ea43b1774867b7d561246aebe91a
msgid "We've switched the admin and other bundled templates to use the HTML5 doctype. While Django will be careful to maintain compatibility with older browsers, this change means that you can use any HTML5 features you need in admin pages without having to lose HTML validity or override the provided templates to change the doctype."
msgstr ""

#: ../../releases/1.4.txt:292
#: ../../releases/1.4-alpha-1.txt:128
#: ../../releases/1.4-beta-1.txt:159
# 1c7b4ea518624da0a4b8f88ed704ad04
# 7b21f2b7df8144908618756d531f8e06
# 2e9e85b0fa61478cbec6ab9a0f60c4f7
msgid "List filters in admin interface"
msgstr ""

#: ../../releases/1.4.txt:294
# 21e8c2894e264ff3b1cf161efc798c9c
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify change list filters by specifying a field lookup, but it didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4.txt:301
#: ../../releases/1.4-alpha-1.txt:137
#: ../../releases/1.4-beta-1.txt:168
# 04495280f5244c7f8f62cf9d879a5d70
# 7aa9b327485e43d38b8e79138c8d1f20
# 87d9ad1549174781a1b845cb3d910546
msgid "Multiple sort in admin interface"
msgstr ""

#: ../../releases/1.4.txt:303
# be0e59e790604516a10f505032ecddb5
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. We also added a :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (i.e., depending on the request)."
msgstr ""

#: ../../releases/1.4.txt:311
#: ../../releases/1.4-alpha-1.txt:147
#: ../../releases/1.4-beta-1.txt:178
# 2e6598cbd1d3421e9f398c9e69414414
# 30f4db679f7347bea1724647ab7cd702
# 4fb096808f464034b812f5c11a59065f
msgid "New ``ModelAdmin`` methods"
msgstr ""

#: ../../releases/1.4.txt:313
# 158500402d04427fa8b3b7cbaf20b4b9
msgid "We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4.txt:317
# 00627b3517c04dcf8352e731a716aea7
msgid "Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` enable dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4.txt:324
#: ../../releases/1.4-alpha-1.txt:160
#: ../../releases/1.4-beta-1.txt:191
# e28643ec18f74510aafaebd7e3c1d2b0
# 369bd87a00474db0995d706900aa7eca
# 58a55693889044a880e80431e606857d
msgid "Admin inlines respect user permissions"
msgstr ""

#: ../../releases/1.4.txt:326
# 2f019c077fb8461a92b911799e701b56
msgid "Admin inlines now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4.txt:333
#: ../../releases/1.4-alpha-1.txt:169
#: ../../releases/1.4-beta-1.txt:200
# 4b3362f168044a6eae8908f2311bd347
# d11524bfc9af4f5094290038b51a8e45
# eaf31eaad694471e80bdea39a917d934
msgid "Tools for cryptographic signing"
msgstr ""

#: ../../releases/1.4.txt:335
#: ../../releases/1.4-alpha-1.txt:171
#: ../../releases/1.4-beta-1.txt:202
# 4199076791b4445c9c82147c946bf355
# 99169545a8da4c578f99db436afbba18
# 18608c6fa5d14f8a9225f237401ee460
msgid "Django 1.4 adds both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../releases/1.4.txt:339
#: ../../releases/1.4-alpha-1.txt:175
#: ../../releases/1.4-beta-1.txt:206
# 64ab7a148c9e413ba0ea41dc022b27ba
# 4991054055c748048dad5e3d5c065a11
# b0f1013bfe494b5cbba8ee5e92f097c0
msgid "See the :doc:`cryptographic signing </topics/signing>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:343
#: ../../releases/1.4-alpha-1.txt:179
#: ../../releases/1.4-beta-1.txt:210
# 064ed4bc372048a7b551201fb562e475
# 74ebb1ad3efd43898a8b363a38eafecd
# 407c106db48b4d5095fa18614413bd5a
msgid "Cookie-based session backend"
msgstr ""

#: ../../releases/1.4.txt:345
# 7fd3c5dc8a344eca8fc79073d9e5ec43
msgid "Django 1.4 introduces a cookie-based session backend that uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4.txt:351
# 045b64869ff443eb87e6041eb6ca8566
msgid "Session data is signed and validated by the server, but it's not encrypted. This means a user can view any data stored in the session but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4.txt:356
#: ../../releases/1.4-alpha-1.txt:185
#: ../../releases/1.4-beta-1.txt:223
# 5eb48c7571444682af00c119a83bf71a
# 8c08c8d0e806448482920d9832de781b
# 0a3ec4fb6d0748eab8fd5b8d999e1e14
msgid "See the :ref:`cookie-based session backend <cookie-session-backend>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:360
#: ../../releases/1.4-alpha-1.txt:189
#: ../../releases/1.4-beta-1.txt:227
# cc9a26c2542647db92f38f0486511de7
# 4b9821e513cb417999d4d9316f65bd63
# fe60d077bcc94d7197cc4e36e053d820
msgid "New form wizard"
msgstr ""

#: ../../releases/1.4.txt:362
# d37b60a10fea4ba48022738f603ab7ce
msgid "The previous ``FormWizard`` from :mod:`django.contrib.formtools` has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4.txt:367
#: ../../releases/1.4-alpha-1.txt:196
#: ../../releases/1.4-beta-1.txt:234
# 188a6eaf505e4db28ab4b2f1d1df3c7b
# a3c0e4e95ef442fdbf84790887871e73
# 245ceab22b1c4640954798a06bdb5a45
msgid "Django 1.4 ships with a session-based storage backend and a cookie-based storage backend. The latter uses the tools for :doc:`cryptographic signing </topics/signing>` also introduced in Django 1.4 to store the wizard's state in the user's cookies."
msgstr ""

#: ../../releases/1.4.txt:372
#: ../../releases/1.4-alpha-1.txt:201
#: ../../releases/1.4-beta-1.txt:239
# d218208fc3d349429c5c616cb90d9aea
# 2fde230ccc8a49538282f6cd893693bc
# 45954e5411174cd6afc89c3802e51abe
msgid "See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:376
#: ../../releases/1.4-alpha-1.txt:205
#: ../../releases/1.4-beta-1.txt:243
# 11e8966bc1b54b26a1f70ae272878069
# fe09ac744ef541df92414ec7d02432a4
# 32a1eff15f5b43099ecc9752a4697f93
msgid "``reverse_lazy``"
msgstr ""

#: ../../releases/1.4.txt:378
# d4337322db354d16924c32ea026fd90a
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

#: ../../releases/1.4.txt:382
#: ../../releases/1.4-alpha-1.txt:211
#: ../../releases/1.4-beta-1.txt:249
# 5a16a813bb3e436d8073bc81fe0bf3cf
# fe5198f55158499e87c800fa001058e1
# 0a337521c19949e1a277f68065ac332c
msgid "Translating URL patterns"
msgstr ""

#: ../../releases/1.4.txt:384
# aecd80b3fab64f3f9a0bd208a2c92dbf
msgid "Django can now look for a language prefix in the URLpattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4.txt:392
#: ../../releases/1.4-alpha-1.txt:221
#: ../../releases/1.4-beta-1.txt:259
# 5ee09d90658340688cf41e40c00b62bb
# c41f562b0a204f908af1648aa631b94c
# 9f35a43d8637416699bccdc595fb976b
msgid "Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

#: ../../releases/1.4.txt:394
#: ../../releases/1.4-alpha-1.txt:223
#: ../../releases/1.4-beta-1.txt:261
# db33cf353e6b47c1a9b987cde84cc552
# b01bee6dc3da4bbb8d9aac53779470ef
# a5095e6862504733b0863f3b28c0bc30
msgid "The :ref:`contextual translation<contextual-markers>` support introduced in Django 1.3 via the ``pgettext`` function has been extended to the :ttag:`trans` and :ttag:`blocktrans` template tags using the new ``context`` keyword."
msgstr ""

#: ../../releases/1.4.txt:400
#: ../../releases/1.4-alpha-1.txt:229
#: ../../releases/1.4-beta-1.txt:267
# a760f8453f2948b2b7bff98edee8e535
# 4b214c162333451c9295a727ef8ce2c9
# d769014968e04ed18168b8859d041c3c
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

#: ../../releases/1.4.txt:402
# 757b03508d554de3bde8ad31e07f4fc2
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLconf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4.txt:411
#: ../../releases/1.4-alpha-1.txt:240
#: ../../releases/1.4-beta-1.txt:278
# af11b8d0b83c46d8bc6a37cda36d5d41
# 0e58f1f4b3e74801a579584283e306ca
# 1fbb3e7d4bf8467f916578198d1cbe1c
msgid "Assignment template tags"
msgstr ""

#: ../../releases/1.4.txt:413
#: ../../releases/1.4-alpha-1.txt:242
#: ../../releases/1.4-beta-1.txt:280
# 4bb0acf2823947419dbc74e84e780076
# 1926d2603ac74967a43d51dc7dbf0d40
# f09eb7db8b434c7fa678bb64cfaefaf8
msgid "A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` helper function was added to ``template.Library`` to ease the creation of template tags that store data in a specified context variable."
msgstr ""

#: ../../releases/1.4.txt:418
#: ../../releases/1.4-alpha-1.txt:247
#: ../../releases/1.4-beta-1.txt:285
# 5e7eabcbe7cf42b4b73b27ef41fb8606
# f96f4ed837cf4e6caa5c39df6bc5ab18
# 5c598c1d4dd942c581e3130ea855c61b
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

#: ../../releases/1.4.txt:420
#: ../../releases/1.4-alpha-1.txt:249
#: ../../releases/1.4-beta-1.txt:287
# 52e097ce630d4066b620fee18639dd16
# 79c7b64eb13d462aaed36c99e0aaf8e0
# ad230a1bae9445f589c53904b1668265
msgid "The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` template helper functions may now accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../releases/1.4.txt:436
# efc1e63c59614eef84dde4297bf8edfd
msgid "Then, in the template, any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4.txt:444
#: ../../releases/1.4-alpha-1.txt:273
#: ../../releases/1.4-beta-1.txt:311
# 014e2d484306486f9232ee27027cdc01
# 48022c78d20040358fed6b2922dc6b1a
# 9311ea9bebcf4e48909cdb4f932462cd
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

#: ../../releases/1.4.txt:446
#: ../../releases/1.4-alpha-1.txt:275
#: ../../releases/1.4-beta-1.txt:313
# c6c887b8a0584cb58db66831dadd0da7
# 627ecef160464da99c454e4d033595d8
# b6e64ee38e80444d8bc26702d5fd1271
msgid "In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` setting was ``True``, any exception raised during template rendering (even exceptions unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and re-raised. This was done in order to provide detailed template source location information in the debug 500 page."
msgstr ""

#: ../../releases/1.4.txt:452
#: ../../releases/1.4-alpha-1.txt:281
#: ../../releases/1.4-beta-1.txt:319
# fc8a84fd457e4f00ad50ac2faf716f45
# 32a883befbbc44b581d10a0f856e7ce9
# 1c3e6ff0894d4fbf9459eea13e62cf05
msgid "In Django 1.4, exceptions are no longer wrapped. Instead, the original exception is annotated with the source information. This means that catching exceptions from template rendering is now consistent regardless of the value of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap ``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

#: ../../releases/1.4.txt:459
#: ../../releases/1.4-alpha-1.txt:288
#: ../../releases/1.4-beta-1.txt:326
# ecfc08e8fd8d41eda2cfed58c8159c2c
# 5def6920dc6c4c91b2aab8850e061e8b
# cee803499d9045098c468629b7806dbb
msgid "``truncatechars`` template filter"
msgstr ""

#: ../../releases/1.4.txt:461
# f906cae65b174e14996bae3675baf2da
msgid "This new filter truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4.txt:467
#: ../../releases/1.4-alpha-1.txt:296
#: ../../releases/1.4-beta-1.txt:334
# 4b3d4b5a2bc4464e8726975e05dc156b
# 5c30909bd1c2476cba228ff7b0cfca48
# a1ca125259034c6fb0de2b222cd748ff
msgid "``static`` template tag"
msgstr ""

#: ../../releases/1.4.txt:469
#: ../../releases/1.4-alpha-1.txt:298
#: ../../releases/1.4-beta-1.txt:336
# b5ebe7d543764feeb7f173bac15ad2d5
# eea66f238ad649a0a97a000b9d87206f
# f22bf30c979940668aa817f0848e974b
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :ttag:`static<staticfiles-static>` template tag to refer to files saved with the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage backend's ``url`` method and therefore supports advanced features such as :ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

#: ../../releases/1.4.txt:476
#: ../../releases/1.4-alpha-1.txt:305
#: ../../releases/1.4-beta-1.txt:343
# 2f0b27f6ae6446749e1612d12214dccc
# 1d573a974984469aa549021d1a33d4df
# 89fb6f5f0a6a4851ada307cffbea148a
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

#: ../../releases/1.4.txt:478
# 908944541abd43d8a827982fcd3caa1a
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend that caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4.txt:485
#: ../../releases/1.4-alpha-1.txt:315
#: ../../releases/1.4-beta-1.txt:353
# dd83c48cbd5b4c5ab8ac12458a2275c6
# 63556080f21244e9ab00c03e486eefec
# f8266e19d2ff44aeab567745cfbbd100
msgid "See the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:489
#: ../../releases/1.4-alpha-1.txt:319
#: ../../releases/1.4-beta-1.txt:357
# 992be3491dbf4f83a51d4676400f9cae
# 1de327a6488a4ebab4b7807027cdd8f8
# 25f9bd99dc4f485ab0c00a143ffcd54e
msgid "Simple clickjacking protection"
msgstr ""

#: ../../releases/1.4.txt:491
#: ../../releases/1.4-alpha-1.txt:321
#: ../../releases/1.4-beta-1.txt:359
# 77653af3f6d5478b937a21d501317e73
# 4d29fc5c78a14633ba4bc4e9c7884fed
# 1dca4ba3c91643f6ad3bff29ede067c9
msgid "We've added a middleware to provide easy protection against `clickjacking <http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` header. It's not enabled by default for backwards compatibility reasons, but you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to help plug that security hole for browsers that support the header."
msgstr ""

#: ../../releases/1.4.txt:498
#: ../../releases/1.4-alpha-1.txt:328
#: ../../releases/1.4-beta-1.txt:366
# a5588133251d4a14914d7af0bb178451
# d1a1e57275414f448ed240c9e8cfa77c
# 2198bc348d0c4cefab1e1e7397919fbb
msgid "CSRF improvements"
msgstr ""

#: ../../releases/1.4.txt:500
# 54ba6ad473804e739f8bedfa3fc7ba3e
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help with AJAX-heavy sites; protection for PUT and DELETE requests; and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which can improve the security and usefulness of CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4.txt:508
#: ../../releases/1.4-alpha-1.txt:338
#: ../../releases/1.4-beta-1.txt:376
# 2dbc5229ad2c4770a76c57f5c26bf616
# 7a3e848617fe45d89b2739512e157cb2
# d6685b5bb4c24bcd8dc25b09f492b2b8
msgid "Error report filtering"
msgstr ""

#: ../../releases/1.4.txt:510
# 6e3c642e4f2f457aaf4867c2b1ce61ec
msgid "We added two function decorators, :func:`sensitive_variables` and :func:`sensitive_post_parameters`, to allow designating the local variables and POST parameters that may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4.txt:515
# 9e11716bbfdd47b59d8f327b56c341f6
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change`` and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4.txt:521
# 891ac7d50cc24a1fbf31214bb78b6c3d
msgid "You can override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4.txt:526
#: ../../releases/1.4-alpha-1.txt:356
#: ../../releases/1.4-beta-1.txt:394
# bef8019b70884b70a3ed28327c065b15
# d360d99f25784e01bf28f4307df1ddea
# 43fb4f5992d94af3b7f20bb1476a58b7
msgid "Extended IPv6 support"
msgstr ""

#: ../../releases/1.4.txt:528
# 46f7768201b441babe5b709effd67ca7
msgid "Django 1.4 can now better handle IPv6 addresses with the new :class:`~django.db.models.fields.GenericIPAddressField` model field, :class:`~django.forms.fields.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`."
msgstr ""

#: ../../releases/1.4.txt:535
# 9ec18268f79243d7bee840f6726be885
msgid "HTML comparisons in tests"
msgstr ""

#: ../../releases/1.4.txt:537
# 7cf805d357b34fa09bdc986151e7fe77
msgid "The base classes in :mod:`django.test` now have some helpers to compare HTML without tripping over irrelevant differences in whitespace, argument quoting/ordering and closing of self-closing tags. You can either compare HTML directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or use the ``html=True`` flag with :meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase.assertNotContains` to test whether the client's response contains a given HTML fragment. See the :ref:`assertions documentation <assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:550
#: ../../releases/1.4-beta-1.txt:528
# b3541618e6bf45b481a9b580a2100e94
# 276ad8a0e73e486bb9d6b7e96e9207f2
msgid "Two new date format strings"
msgstr ""

#: ../../releases/1.4.txt:552
#: ../../releases/1.4-beta-1.txt:530
# c4839c4268c34b5582bd4d1962819e3c
# 45934d8e7e3b473eba525e3fd8d17c94
msgid "Two new :tfilter:`date` formats were added for use in template filters, template tags and :ref:`format-localization`:"
msgstr ""

#: ../../releases/1.4.txt:555
#: ../../releases/1.4-beta-1.txt:533
# d948067363ed45ddbbb7faff26412477
# 67383190ea2e47ccae46db58c5b941c6
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

#: ../../releases/1.4.txt:556
#: ../../releases/1.4-beta-1.txt:534
# bd77155edae2431d912cb8db99a43dfc
# 7b0533163eb34f31abe08c9691ac1f51
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

#: ../../releases/1.4.txt:558
#: ../../releases/1.4-beta-1.txt:536
# e9de41c6cb0246dfbb529ebf9a6ac332
# 19dcbb0db01d482f9aa3b2a749428d54
msgid "Please make sure to update your :ref:`custom format files <custom-format-files>` if they contain either ``e`` or ``o`` in a format string. For example a Spanish localization format previously only escaped the ``d`` format character::"
msgstr ""

#: ../../releases/1.4.txt:565
#: ../../releases/1.4-beta-1.txt:543
# 4fa468bda7e44610a3e0b70d46340c7b
# 0d38256991614898a2eff374a6bc7763
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

#: ../../releases/1.4.txt:569
#: ../../releases/1.4-beta-1.txt:547
# 96f85824047342829c9b06e0f8d0b6e4
# dfbbe02507164c3a91457841b85e7123
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

#: ../../releases/1.4.txt:572
#: ../../releases/1.4-alpha-1.txt:490
#: ../../releases/1.4-beta-1.txt:550
# 1badcd4bd00b4d0fa08efc5b94cc611f
# 58a39e8e84cb4c90a4c3142700fd98df
# a29d586e85c244149f330f10dfe7c7ba
msgid "Minor features"
msgstr ""

#: ../../releases/1.4.txt:574
#: ../../releases/1.4-alpha-1.txt:492
#: ../../releases/1.4-beta-1.txt:552
# e4366d28ffce4f5381b0f312cd196371
# 0fb57c1d896b4b1faa4bc8583845dc84
# 08cc3beea3234531ab43dd8b9e2ba49d
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.4.txt:576
# cd373e93858b491ca75ca17a2df72e3d
msgid "A more usable stacktrace in the technical 500 page. Frames in the stack trace that reference Django's framework code are dimmed out, while frames in application code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in application code."
msgstr ""

#: ../../releases/1.4.txt:581
#: ../../releases/1.4-alpha-1.txt:499
#: ../../releases/1.4-beta-1.txt:559
# ce27b4639e564ca89d36b4b5cad86e66
# 211e185672814b9d909f9522838c5fa6
# cf10056e8628403c888c797469f2ecfa
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:583
#: ../../releases/1.4-alpha-1.txt:501
#: ../../releases/1.4-beta-1.txt:561
# 6d93761691bf4c779610fc1c3c4e9e6e
# aae37f9d9dad40dd959a5ee55b4aecd3
# e2fbc509c65d4183a2938807599b04d5
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

#: ../../releases/1.4.txt:585
#: ../../releases/1.4-alpha-1.txt:503
#: ../../releases/1.4-beta-1.txt:563
# 64cb2beba8174b8bb5e1c55bc0043120
# a553f43c07c54dd698bb4e0c26b3fea7
# b51cbd3f617d4891abd5538ace410410
msgid "In the documentation, a helpful :doc:`security overview </topics/security>` page."
msgstr ""

#: ../../releases/1.4.txt:588
# 190133ac5d1048b29c02642feb172770
msgid "The :func:`django.contrib.auth.models.check_password` function has been moved to the :mod:`django.contrib.auth.hashers` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4.txt:592
# ff21cee8f77743a1a457b215f42dc1ef
msgid "The :djadmin:`collectstatic` management command now has a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4.txt:596
# 71610e5614ba4f6e94265d2fa120fe03
msgid "It's now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4.txt:599
#: ../../releases/1.4-alpha-1.txt:517
#: ../../releases/1.4-beta-1.txt:577
# 1e09618bb73e4ba9aa068e5ca76b02ad
# 31dbab41622e491a975c92e0c57c88a8
# 4d2006cf46cf4204b767ae5f6e7bb1b5
msgid "A new 403 response handler has been added as ``'django.views.defaults.permission_denied'``. You can set your own handler by setting the value of :data:`django.conf.urls.handler403`. See the documentation about :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

#: ../../releases/1.4.txt:605
# 1e225c2fb3944d3f96e256b9109d5ab5
msgid "The :djadmin:`makemessages` command uses a new and more accurate lexer, `JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

#: ../../releases/1.4.txt:610
#: ../../releases/1.4-alpha-1.txt:523
#: ../../releases/1.4-beta-1.txt:583
# 358c1413f42844558c60cc69113a612a
# a20e232476e24a349e25102aa37b9409
# 24feab51b8544aeabb7508d97a25cbde
msgid "The :ttag:`trans` template tag now takes an optional ``as`` argument to be able to retrieve a translation string without displaying it but setting a template context variable instead."
msgstr ""

#: ../../releases/1.4.txt:614
#: ../../releases/1.4-alpha-1.txt:527
#: ../../releases/1.4-beta-1.txt:587
# 7bd1bc9436374a74b954da3117dc4b76
# f8bc53acfb1e41359194b73d4bb551e8
# 10033853c96349798fd241071258defc
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../releases/1.4.txt:616
# f54a40fd86364f12932fb1970dc4268a
msgid "If your Django app is behind a proxy, you might find the new :setting:`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your proxy \"eating\" the fact that a request came in via HTTPS. But only use this setting if you know what you're doing."
msgstr ""

#: ../../releases/1.4.txt:621
# 3f502e6e71f7438790cff76fa70343a9
msgid "A new, plain-text, version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code. (:meth:`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

#: ../../releases/1.4.txt:626
# 3a35fe3c542f4b08863941e83fa54c2d
msgid "Like its HTML counterpart, it contains a collection of different pieces of information about the state of the application."
msgstr ""

#: ../../releases/1.4.txt:629
# f5100b0bd38f468b96ff014539257642
msgid "This should make it easier to read when debugging interaction with client-side JavaScript."
msgstr ""

#: ../../releases/1.4.txt:632
#: ../../releases/1.4-alpha-1.txt:540
#: ../../releases/1.4-beta-1.txt:600
# b5185645dd994c5b8cc1e736eea6ee7f
# b8015dc203da46c0bbae29130476e48a
# a3c384a0e7a943ec91177333d96ddfda
msgid "Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` command."
msgstr ""

#: ../../releases/1.4.txt:635
#: ../../releases/1.4-alpha-1.txt:543
#: ../../releases/1.4-beta-1.txt:603
# fe9408b9ba934bf49cd3ee54376f036a
# fd5f11c9d9d74b1bbe334b341fd4ba79
# 9a0c40cf798d4f3793532bd9baef6883
msgid "Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for better compatibility with the other cache backends."
msgstr ""

#: ../../releases/1.4.txt:639
#: ../../releases/1.4-alpha-1.txt:547
#: ../../releases/1.4-beta-1.txt:607
# 03845c73a04c4e1ab8aa6d17a5701137
# 154a20a6d392498b84f4f55681ee760a
# c57c57b5f6ef4a889484734a575144f1
msgid "Added support in the ORM for generating ``SELECT`` queries containing ``DISTINCT ON``."
msgstr ""

#: ../../releases/1.4.txt:642
#: ../../releases/1.4-alpha-1.txt:550
#: ../../releases/1.4-beta-1.txt:610
# d3a474a89e97497d9f4d5944786d5429
# 0b4c8c7cbc964b469252fe690c0b789a
# 8d5e60a57b3243f0b67c030ace76bdcd
msgid "The ``distinct()`` ``QuerySet`` method now accepts an optional list of model field names. If specified, then the ``DISTINCT`` statement is limited to these fields. This is only supported in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:646
#: ../../releases/1.4-alpha-1.txt:554
#: ../../releases/1.4-beta-1.txt:614
# d54379e67bee4861b004987013ada07c
# 5e0100068f674dcdbd3a231d8c1a2a92
# 57ccab3e2e9b463583da8a1ab054c3fa
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.distinct`."
msgstr ""

#: ../../releases/1.4.txt:649
# 70c5f11460034e9abf0cac5901066065
msgid "The admin login page will add a password reset link if you include a URL with the name `'admin_password_reset'` in your urls.py, so plugging in the built-in password reset mechanism and making it available is now much easier. For details, see :ref:`auth_password_reset`."
msgstr ""

#: ../../releases/1.4.txt:654
# b56a1472537e4770a7c32d0d7f83327a
msgid "The MySQL database backend can now make use of the savepoint feature implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

#: ../../releases/1.4.txt:657
# 4878c205a30b491384f971a2583b5438
msgid "It's now possible to pass initial values to the model forms that are part of both model formsets and inline model formsets as returned from factory functions ``modelformset_factory`` and ``inlineformset_factory`` respectively just like with regular formsets. However, initial values only apply to extra forms, i.e. those which are not bound to an existing model instance."
msgstr ""

#: ../../releases/1.4.txt:663
# 687c7b23e1dc436b885f7f0a1cb1b9fc
msgid "The sitemaps framework can now handle HTTPS links using the new :attr:`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class attribute."
msgstr ""

#: ../../releases/1.4.txt:667
# ed5b65f70fa34106ae1b6429c2d98dbc
msgid "A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest.TestCase` that's lighter than :class:`django.test.TestCase` and company. It can be useful in tests that don't need to hit a database. See :ref:`testcase_hierarchy_diagram`."
msgstr ""

#: ../../releases/1.4.txt:674
#: ../../releases/1.4-alpha-1.txt:558
#: ../../releases/1.4-beta-1.txt:626
# 161747156d0e4166ab94c5d41099e360
# e9fa0a0e75b5446e887f62ef2fb325c7
# 58b36427dc14423a8297aae6b5ba2649
msgid "Backwards incompatible changes in 1.4"
msgstr ""

#: ../../releases/1.4.txt:677
# e72dd68d3500450fb9a4c754a611d101
msgid "SECRET_KEY setting is required"
msgstr ""

#: ../../releases/1.4.txt:679
# 8c36a096ce524ac281fc7c988348b555
msgid "Running Django with an empty or known :setting:`SECRET_KEY` disables many of Django's security protections and can lead to remote-code-execution vulnerabilities. No Django site should ever be run without a :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:684
# 11529a035cb54c1693a52e0a09c79d50
msgid "In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and Django will refuse to start. This is slightly accelerated from the usual deprecation path due to the severity of the consequences of running Django with no :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:691
#: ../../releases/1.4-alpha-1.txt:561
#: ../../releases/1.4-beta-1.txt:629
# 9efa357c5e5643ceb9e7c5ce0881fd6c
# 17ad275333214c8cb41627f9f398e32e
# 82d0d7b0f1e9413d844a57b12427ac9e
msgid "django.contrib.admin"
msgstr ""

#: ../../releases/1.4.txt:693
#: ../../releases/1.4-alpha-1.txt:563
#: ../../releases/1.4-beta-1.txt:631
# 50dade92edc6493a9af4fa653a47db6f
# dc16fc4c803e4f42afa177699f28004c
# 25a30624ed50470c95937e710ad719c4
msgid "The included administration app ``django.contrib.admin`` has for a long time shipped with a default set of static files such as JavaScript, images and stylesheets. Django 1.3 added a new contrib app ``django.contrib.staticfiles`` to handle such files in a generic way and defined conventions for static files included in apps."
msgstr ""

#: ../../releases/1.4.txt:699
# bfe4f3e340da42d9a28e736269ba473b
msgid "Starting in Django 1.4, the admin's static files also follow this convention, to make the files easier to deploy. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files live on a Web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4.txt:707
# 216f9643c12842888b9d27f95a40991d
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your Web server serves those files correctly. The development server continues to serve the admin files just like before. Read the :doc:`static files howto </howto/static-files>` for more details."
msgstr ""

#: ../../releases/1.4.txt:713
# 02135fda18044ab6b56e9cc84695fcb8
msgid "If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``), make sure to also set your :setting:`STATIC_URL` setting to the correct URL -- for example, ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4.txt:720
# 3e07a58209f24ab3aba001477d548044
msgid "If you're implicitly relying on the path of the admin static files within Django's source code, you'll need to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4.txt:726
#: ../../releases/1.4-alpha-1.txt:597
#: ../../releases/1.4-beta-1.txt:665
# 787d6117742f440d81337b0c966dadcb
# 07eb55040e2643ce9ef7ba0642e04aad
# 9365e83d6fba436585abc8a9c8750158
msgid "Supported browsers for the admin"
msgstr ""

#: ../../releases/1.4.txt:728
# 6fe36d5e6c39446cbd928b7bd614258a
msgid "Django hasn't had a clear policy on which browsers are supported by the admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

#: ../../releases/1.4.txt:733
# 84a3ed6a7d1c49d6b472399f22372318
msgid "Released over 10 years ago, IE6 imposes many limitations on modern Web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4.txt:737
# a3d3b92041004799943fe660fac8ee34
msgid "Obviously, this new policy **has no impact** on sites you develop using Django. It only applies to the Django admin. Feel free to develop apps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4.txt:744
#: ../../releases/1.4-alpha-1.txt:614
#: ../../releases/1.4-beta-1.txt:682
# ba9819b8bf4a4de78d630f3a091b8a8b
# e3ee59018f7948f1a93729f1d078b7de
# e8ecfa3def454c5ab69b08850937c57b
msgid "Removed admin icons"
msgstr ""

#: ../../releases/1.4.txt:746
# 5b787ea7099743818c65b1989e8bf70a
msgid "As part of an effort to improve the performance and usability of the admin's change-list sorting interface and :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4.txt:752
#: ../../releases/1.4-alpha-1.txt:622
#: ../../releases/1.4-beta-1.txt:690
# 5e174aad7b6b499eb509fb895452847e
# 817299b71d8348acbb374b967f0f16d1
# 1191587a55354a10afc936ec18943f9d
msgid "Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and ``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-icons.gif``."
msgstr ""

#: ../../releases/1.4.txt:758
# 6907bc1a3cf44f12be0b396f4a5b6762
msgid "If you used those icons to customize the admin, then you'll need to replace them with your own icons or get the files from a previous release."
msgstr ""

#: ../../releases/1.4.txt:762
#: ../../releases/1.4-alpha-1.txt:632
#: ../../releases/1.4-beta-1.txt:700
# f9b11a55271746f5aa43d2f110abbe10
# d6fd0ba7aa8b48d2bc980daf59ed79c8
# 93270570a2144bccbda7b28e2b75a318
msgid "CSS class names in admin forms"
msgstr ""

#: ../../releases/1.4.txt:764
# 9b4c886a9b43433ca39296954284fe47
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), we added a prefix (\"field-\") to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You'll need to take that prefix into account in your custom style sheets or JavaScript files if you previously used plain field names as selectors for custom styles or JavaScript transformations."
msgstr ""

#: ../../releases/1.4.txt:772
#: ../../releases/1.4-alpha-1.txt:642
#: ../../releases/1.4-beta-1.txt:710
# 0b3cc2e112c74d18bda4364b42600e7b
# 1f859777b925421682136ebf73ea3ba4
# 475d0d0486fd4803be55f5cea8ff286e
msgid "Compatibility with old signed data"
msgstr ""

#: ../../releases/1.4.txt:774
#: ../../releases/1.4-alpha-1.txt:644
#: ../../releases/1.4-beta-1.txt:712
# 1bf9af17ba6e43a9ba8e08e3acec3aba
# f34b5c90b37840829444d4c0baddee76
# 941794a0232744d6ba6fa7d8ac352b84
msgid "Django 1.3 changed the cryptographic signing mechanisms used in a number of places in Django. While Django 1.3 kept fallbacks that would accept hashes produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

#: ../../releases/1.4.txt:778
#: ../../releases/1.4-alpha-1.txt:648
#: ../../releases/1.4-beta-1.txt:716
# fc63658ef9164ba8b4f1d6dc70bf8b50
# 1801b7d8c2d54a698d0152923cc41622
# 76f2f19373dc42a989d41a22541798af
msgid "So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/invalidate certain pieces of data that have been cryptographically signed using an old method. To avoid this, use Django 1.3 first for a period of time to allow the signed data to expire naturally. The affected parts are detailed below, with 1) the consequences of ignoring this advice and 2) the amount of time you need to run Django 1.3 for the data to expire or become irrelevant."
msgstr ""

#: ../../releases/1.4.txt:785
#: ../../releases/1.4-alpha-1.txt:655
#: ../../releases/1.4-beta-1.txt:723
# 1cb063dc7e2945b4bb60b559026648e7
# c3aa91d32a0e4057947f446cba1bf9d5
# f70733f8b3b6403ea1fdd01b431e8986
msgid "``contrib.sessions`` data integrity check"
msgstr ""

#: ../../releases/1.4.txt:787
# 340f2d7c24eb40c49c1ac686d1b1c4f2
msgid "Consequences: The user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4.txt:789
# 33ca1d35919c4172b4006f66245b0743
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4.txt:791
#: ../../releases/1.4-alpha-1.txt:661
#: ../../releases/1.4-beta-1.txt:729
# 3f79f16382664466925864ecff0d2022
# f9dd33140e5f4fe49f5359bab168e586
# 4e773dd36bd446c8aa424615751c2279
msgid "``contrib.auth`` password reset hash"
msgstr ""

#: ../../releases/1.4.txt:793
# 2d8854e4084f4c4cbb7ba005e16dfeea
msgid "Consequences: Password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4.txt:795
# 3096a97397554558bc6ce1e06384daba
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4.txt:797
# 14b3f4d645534aae89cc2e694be5b69b
msgid "Form-related hashes: these have a are much shorter lifetime and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4.txt:802
#: ../../releases/1.4-alpha-1.txt:671
#: ../../releases/1.4-beta-1.txt:739
# 0ea8d870402c4362a01fe9e1e50f61d7
# 78cb52f4b7064ad189b1965824d3c848
# ddab0535f4f74d2ba194f90d10c3d744
msgid "``contrib.comments`` form security hash"
msgstr ""

#: ../../releases/1.4.txt:804
# 49fca64138ed49068f6f2ddaf32c54e9
msgid "Consequences: The user will see the validation error \"Security hash failed.\""
msgstr ""

#: ../../releases/1.4.txt:806
# 6737e13add504efea82e40ed3dcc9548
msgid "Time period: The amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4.txt:809
#: ../../releases/1.4-alpha-1.txt:678
#: ../../releases/1.4-beta-1.txt:746
# f141374ae7074d43be8960f43d4627df
# c4467f207afa477d868c3503b2e9befe
# 071298513c4d4446a603c0be1fbf896b
msgid "``FormWizard`` security hash"
msgstr ""

#: ../../releases/1.4.txt:811
# e873bb59dc2e491ca6e0a84870ffe78a
msgid "Consequences: The user will see an error about the form having expired and will be sent back to the first page of the wizard, losing the data he has entered so far."
msgstr ""

#: ../../releases/1.4.txt:815
# b00423684edd4504be923fc6a2d8006f
msgid "Time period: The amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4.txt:818
#: ../../releases/1.4-alpha-1.txt:687
#: ../../releases/1.4-beta-1.txt:755
# 871fbc12a18c490b9c9fc657865bd242
# 0d0a50a6e3ee4a8ab5bfa3e1a1021783
# 926eb712233f420fbb1e8c4ee9ddaa79
msgid "CSRF check"
msgstr ""

#: ../../releases/1.4.txt:820
# d5b59d7423b14f04acd669994411b626
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies only if you're upgrading from 1.1."
msgstr ""

#: ../../releases/1.4.txt:823
# 3f6cf052bb4f47189c80f4cf5555f228
msgid "Consequences: The user will see a 403 error with any CSRF-protected POST form."
msgstr ""

#: ../../releases/1.4.txt:826
# 97445a8e4d2d42a88c3f2eea44630d33
msgid "Time period: The amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4.txt:829
# 71ead2b0a83d47a98ff08f6687bef512
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

#: ../../releases/1.4.txt:831
# e979284018c0468ebfcbf56a79e03b91
msgid "Consequences: Each user's password will be updated to a stronger password hash when it's written to the database in 1.4. This means that if you upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able to read the updated passwords."
msgstr ""

#: ../../releases/1.4.txt:836
# 6a33553073104d5ea94b9c0bfbccac14
msgid "Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password hashing when you initially upgrade to 1.4. After you confirm your app works well with Django 1.4 and you won't have to roll back to 1.3, enable the new password hashes."
msgstr ""

#: ../../releases/1.4.txt:842
#: ../../releases/1.4-alpha-1.txt:699
#: ../../releases/1.4-beta-1.txt:767
# 095236fb49224b49975ff7ecf6d599a5
# c3027fd51ae448b38bbbd27dc14a5eb6
# a9cfa47a34174902b8f0125fccad4ee7
msgid "django.contrib.flatpages"
msgstr ""

#: ../../releases/1.4.txt:844
# f69bac0c0abe47ee9d28f46a96fa1c8c
msgid "Starting in 1.4, the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""

#: ../../releases/1.4.txt:852
# 752e6d5cb294446481cc4eb50ba8ecf5
msgid "Also, redirects returned by flatpages are now permanent (with 301 status code), to match the behavior of :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4.txt:856
#: ../../releases/1.4-alpha-1.txt:712
#: ../../releases/1.4-beta-1.txt:780
# 94ebc92a889248af8579b6cc7e0e1910
# d917fe9af2364a4299d5f84fbdbf6650
# e038ce37f06049399ffb80cf88624562
msgid "Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

#: ../../releases/1.4.txt:858
# 1ccf08c7394a45b4a6c90b5ecce91344
msgid "As a consequence of time-zone support, and according to the ECMA-262 specification, we made changes to the JSON serializer:"
msgstr ""

#: ../../releases/1.4.txt:861
#: ../../releases/1.4-alpha-1.txt:717
#: ../../releases/1.4-beta-1.txt:785
# 41919e5614ad4fa1bb4e2276300128a8
# 6156d75e6cd04baeaa819af2ecd1b2c0
# 9ad7a7d31ccb460e9e6ae3ab4b196a3a
msgid "It includes the time zone for aware datetime objects. It raises an exception for aware time objects."
msgstr ""

#: ../../releases/1.4.txt:863
#: ../../releases/1.4-alpha-1.txt:719
#: ../../releases/1.4-beta-1.txt:787
# a37e3283e5104010802e14fb8986551f
# 2b5e7a1e9aee48ceb1ec63c8c3a33cc2
# 335809ac554b4e5e92679e49045e02ac
msgid "It includes milliseconds for datetime and time objects. There is still some precision loss, because Python stores microseconds (6 digits) and JSON only supports milliseconds (3 digits). However, it's better than discarding microseconds entirely."
msgstr ""

#: ../../releases/1.4.txt:868
# 8d30183d22e2437cbd57ed2e145bf8f8
msgid "We changed the XML serializer to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4.txt:872
# 33aab4c45fa74e83bdc991e80adf8293
msgid "Though the serializers now use these new formats when creating fixtures, they can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4.txt:876
#: ../../releases/1.4-alpha-1.txt:732
#: ../../releases/1.4-beta-1.txt:800
# 259d9f5666ea47b8a86443828228c6ef
# 62b527164b314840992940fd8c48935d
# ff8b0b8c9c6f41598f71e8e564723b5c
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

#: ../../releases/1.4.txt:878
#: ../../releases/1.4-alpha-1.txt:734
#: ../../releases/1.4-beta-1.txt:802
# ea5c4375a0ca4cdcb5cbc4c83915d9c6
# 84ebf3ba14b84a6bbc81913dee91cea2
# 91a6f19d23eb4eed861232617b1c26b5
msgid "The database feature ``supports_timezone`` used to be ``True`` for SQLite. Indeed, if you saved an aware datetime object, SQLite stored a string that included an UTC offset. However, this offset was ignored when loading the value back from the database, which could corrupt the data."
msgstr ""

#: ../../releases/1.4.txt:883
# 68323f3810f94cc6abf7401ed2b4dbe3
msgid "In the context of time-zone support, this flag was changed to ``False``, and datetimes are now stored without time-zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4.txt:889
# 0556949f4f1b4dcb9ca30720abb11c10
msgid "``MySQLdb``-specific exceptions"
msgstr ""

#: ../../releases/1.4.txt:891
# 6e3ffc0adc5b478db5effe709c9943e0
msgid "The MySQL backend historically has raised :class:`MySQLdb.OperationalError` when a query triggered an exception. We've fixed this bug, and we now raise :class:`django.db.utils.DatabaseError` instead. If you were testing for :class:`MySQLdb.OperationalError`, you'll need to update your ``except`` clauses."
msgstr ""

#: ../../releases/1.4.txt:898
#: ../../releases/1.4-alpha-1.txt:745
#: ../../releases/1.4-beta-1.txt:813
# e857cc5aaf2140fcb0146cf9c9f60eb6
# 51420f9b1f064790b93e1ecd87d99c22
# 6e3d8702465445d2b4743782e0d262b7
msgid "Database connection's thread-locality"
msgstr ""

#: ../../releases/1.4.txt:900
#: ../../releases/1.4-alpha-1.txt:747
#: ../../releases/1.4-beta-1.txt:815
# 57bf43b250194d60ba3653da926a142c
# 0039be5a18e947af9da87d1c2b9fa946
# 6e0c0862c4b84857b858e6faa0104a92
msgid "``DatabaseWrapper`` objects (i.e. the connection objects referenced by ``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used to be thread-local. They are now global objects in order to be potentially shared between multiple threads. While the individual connection objects are now global, the ``django.db.connections`` dictionary referencing those objects is still thread-local. Therefore if you just use the ORM or ``DatabaseWrapper.cursor()`` then the behavior is still the same as before. Note, however, that ``django.db.connection`` does not directly reference the default ``DatabaseWrapper`` object anymore and is now a proxy to access that object's attributes. If you need to access the actual ``DatabaseWrapper`` object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

#: ../../releases/1.4.txt:912
#: ../../releases/1.4-alpha-1.txt:759
#: ../../releases/1.4-beta-1.txt:827
# 8caa1c8f672f499f88ab083279c9b76c
# 88b6a82ddb564e719e3875b0a61a9db8
# 2474da63dbe74ca7937eb10436946895
msgid "As part of this change, all underlying SQLite connections are now enabled for potential thread-sharing (by passing the ``check_same_thread=False`` attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous behavior by disabling thread-sharing by default, so this does not affect any existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()``."
msgstr ""

#: ../../releases/1.4.txt:918
# fa0773ee0bba492b9499623d53c25c1a
msgid "Finally, while it's now possible to pass connections between threads, Django doesn't make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4.txt:924
#: ../../releases/1.4-alpha-1.txt:771
#: ../../releases/1.4-beta-1.txt:839
# e61a70e8aa83433384b3a5617a93b4b4
# d8c68c636cb444dca79a22fab226e2bb
# f09f9a316380486f9dbc861d9c163ebb
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

#: ../../releases/1.4.txt:926
#: ../../releases/1.4-alpha-1.txt:773
#: ../../releases/1.4-beta-1.txt:841
# 73526b4bff16406494967a83e5bfeebb
# cd9f89b06d374d8896eea9602d42d964
# ed95ab667fd04a7191976371ff8df2fe
msgid "Django's :doc:`comments app </ref/contrib/comments/index>` has historically supported excluding the comments of a special user group, but we've never documented the feature properly and didn't enforce the exclusion in other parts of the app such as the template tags. To fix this problem, we removed the code from the feed class."
msgstr ""

#: ../../releases/1.4.txt:932
# 13ea10e251fa4c95a4718e33e345005a
msgid "If you rely on the feature and want to restore the old behavior, use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4.txt:947
# 6f7fd85163444b49af00f18604632430
msgid "Save this model manager in your custom comment app (e.g., in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4.txt:961
#: ../../releases/1.4-alpha-1.txt:808
#: ../../releases/1.4-beta-1.txt:876
# 0496363e6b734d5481470b230cdd1a9c
# 9c59ee7cb91247ea903fe1bdca7f9373
# 22ac370a8d3743aca2514941fd6c1e67
msgid "For more details, see the documentation about :doc:`customizing the comments framework </ref/contrib/comments/custom>`."
msgstr ""

#: ../../releases/1.4.txt:965
#: ../../releases/1.4-alpha-1.txt:812
#: ../../releases/1.4-beta-1.txt:880
# 74e770bd02054b8cab3abfeb2b91639c
# 612d1e0e7bb64a2d89ba6fb2aa19e1e5
# 6db3e64b31874f72ae0a2ec3e919f15b
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

#: ../../releases/1.4.txt:967
#: ../../releases/1.4-alpha-1.txt:814
#: ../../releases/1.4-beta-1.txt:882
# a8b5586861f94bbba479b58822e8d773
# af74b3495b364aef8467d8fef92ace39
# da61a755998b478e80cb31aabacb96f0
msgid "Until Django 1.3, it was possible to exclude some URLs from Django's :doc:`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

#: ../../releases/1.4.txt:971
#: ../../releases/1.4-alpha-1.txt:818
#: ../../releases/1.4-beta-1.txt:886
# 47e6033967f94e5388c11d3480771f09
# 164aa7b6871740f498241e7a9fd488a9
# 99ba4f4465fd4b30924d05ffe72dbebe
msgid "In Django 1.4, these two settings are superseded by :setting:`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

#: ../../releases/1.4.txt:975
#: ../../releases/1.4-alpha-1.txt:822
#: ../../releases/1.4-beta-1.txt:890
# fc38f28d443f4dfbbe473a6d2a15cdc6
# e6d1d3c4d72f4da4b8c516c6478638fd
# 27aa90c999524b719a6460d2e5be56ef
msgid "Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

#: ../../releases/1.4.txt:981
#: ../../releases/1.4-alpha-1.txt:828
#: ../../releases/1.4-beta-1.txt:896
# 228b68a21d4446d4b4750241e8734c61
# 1b58dbe7044a4e79a620346918bc02ff
# a8734515b7f146e180efb0e8b03e414c
msgid "It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` section or a ``favicon.ico``. As a consequence, the default values of :setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

#: ../../releases/1.4.txt:986
#: ../../releases/1.4-alpha-1.txt:833
#: ../../releases/1.4-beta-1.txt:901
# 0ab9e0f04bb346a28230fc406b9f4acf
# f8af54a983514a2b8f84957cc9d121f8
# 0025d5a667f242bd9256bb98c7cd6c1c
msgid "If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you should add the following lines in your settings file::"
msgstr ""

#: ../../releases/1.4.txt:998
# 4b2cec78203c499d810862f6c53f9cd7
msgid "Don't forget to escape characters that have a special meaning in a regular expression, such as periods."
msgstr ""

#: ../../releases/1.4.txt:1002
#: ../../releases/1.4-alpha-1.txt:849
#: ../../releases/1.4-beta-1.txt:917
# a563d371bacf41f2ab79ae198bbf2758
# 65a0316872b04eb39d4181d7526abee0
# e4d3351ba80049b4a9cce3ecca0f5814
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

#: ../../releases/1.4.txt:1004
# 788dacd48f4941b6926fc1e16c7a0c13
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection only against POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and we enforce protection on everything else."
msgstr ""

#: ../../releases/1.4.txt:1010
# 57ab132eb2554712a642d47434788c86
msgid "If you're using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4.txt:1014
# b3e4691b9e754000a4ed22ee75c9e471
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

#: ../../releases/1.4.txt:1016
# 4a6c7e2b5f044a74b6d09cf3818f0557
msgid "The ``password_reset`` view in ``django.contrib.auth`` now accepts a ``subject_template_name`` parameter, which is passed to the password save form as a keyword argument. If you are using this view with a custom password reset form, then you will need to ensure your form's ``save()`` method accepts this keyword argument."
msgstr ""

#: ../../releases/1.4.txt:1023
#: ../../releases/1.4-alpha-1.txt:861
#: ../../releases/1.4-beta-1.txt:929
# 66cb60d386d242ca93bea6b437c03955
# e61a336acd2d431e9613e5b297df6612
# 716e5220244e4953ae138e67488fcc39
msgid "``django.core.template_loaders``"
msgstr ""

#: ../../releases/1.4.txt:1025
# 7e6ee91bf0704996b7324c0344ed70de
msgid "This was an alias to ``django.template.loader`` since 2005, and we've removed it without emitting a warning due to the length of the deprecation. If your code still referenced this, please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4.txt:1030
#: ../../releases/1.4-alpha-1.txt:868
#: ../../releases/1.4-beta-1.txt:936
# 43a4de78234f46cea0ef367c9528725b
# 38d2ffc87b624191b5d17f904197aa12
# bef85b6bf9374097b234a9e387bbbc2b
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

#: ../../releases/1.4.txt:1032
#: ../../releases/1.4-alpha-1.txt:870
#: ../../releases/1.4-beta-1.txt:938
# 2b25d9f62e87432eab9640ec05d9a788
# eb585ae70ac64a88ab9a0f6675d2a0f8
# 8c9e1944dba24fc1a033403198a71d84
msgid "This functionality has been removed due to intractable performance and security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

#: ../../releases/1.4.txt:1037
#: ../../releases/1.4-alpha-1.txt:875
#: ../../releases/1.4-beta-1.txt:943
# 0059eb161a054e45a915e99f89efd5db
# ad6e2c9e4fce458ea5353ae548a58885
# 6d1d57a0a90740219c79a8155c45641e
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

#: ../../releases/1.4.txt:1039
# 04ee27db19bb456fa57ea9c2859ec8ca
msgid "The ``open`` method of the base Storage class used to take an obscure parameter ``mixin`` that allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the `mixin` parameter, you can easily achieve the same by overriding the `open` method, like this::"
msgstr ""

#: ../../releases/1.4.txt:1063
#: ../../releases/1.4-alpha-1.txt:901
#: ../../releases/1.4-beta-1.txt:969
# 56a3b50f78394d2ea46eb83a4ec7da2f
# 81781832494a47d88ec53d9488906037
# 4a39ce404097486aba2db97f28942564
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

#: ../../releases/1.4.txt:1065
# 20220287ddff4e6da1f21a4a7bf86b79
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, the YAML deserializer now uses ``yaml.safe_load`` for additional security."
msgstr ""

#: ../../releases/1.4.txt:1073
#: ../../releases/1.4-alpha-1.txt:1044
#: ../../releases/1.4-beta-1.txt:1112
# 7f58240b873048fc99b2f101e1921773
# cde9ae1bda424febb29a499b34ee4d09
# 51197c2f775c49ad809f97f8214f58e7
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

#: ../../releases/1.4.txt:1075
# 44998b92ce59444e848e6eb48b490e4a
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from JavaScript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4.txt:1083
# 4b7075d6cfb24bf78ec7e413bc03794e
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

#: ../../releases/1.4.txt:1085
# e94935ae765c47f4a1b493ae4b92a3bc
msgid "When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal digits, :tfilter:`urlize` now assumes that the URL is already escaped and doesn't apply URL escaping again. This is wrong for URLs whose unquoted form contains a ``%xx`` sequence, but such URLs are very unlikely to happen in the wild, because they would confuse browsers too."
msgstr ""

#: ../../releases/1.4.txt:1092
# 21409ff7524d456aa939dfb95bf3c0f6
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

#: ../../releases/1.4.txt:1094
# 64009b4534c34889bba317783fe5506c
msgid "It's now possible to check whether a template was used within a block of code with :meth:`~django.test.test.TestCase.assertTemplateUsed` and :meth:`~django.test.test.TestCase.assertTemplateNotUsed`. And they can be used as a context manager::"
msgstr ""

#: ../../releases/1.4.txt:1104
# 8d422516efc54b2098779075e7413cbc
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:1107
# f57c10bde8b640c98fafa0729673e87b
msgid "Database connections after running the test suite"
msgstr ""

#: ../../releases/1.4.txt:1109
# d0aa5132968d4f3baa9d627a1751a1e6
msgid "The default test runner no longer restores the database connections after tests' execution. This prevents the production database from being exposed to potential threads that would still be running and attempting to create new connections."
msgstr ""

#: ../../releases/1.4.txt:1114
# e1ca6ba2f4174e0aa8bb9c7cf6e7fbfb
msgid "If your code relied on connections to the production database being created after tests' execution, then you can restore the previous behavior by subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` method."
msgstr ""

#: ../../releases/1.4.txt:1120
# e2d83582b5f546f2aafe6f580d2016a3
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

#: ../../releases/1.4.txt:1122
# 81a2267fa9e64ccfaa413b18d063a097
msgid ":djadmin:`manage.py help <help>` now groups available commands by application. If you depended on the output of this command -- if you parsed it, for example -- then you'll need to update your code. To get a list of all available management commands in a script, use :djadmin:`manage.py help --commands <help>` instead."
msgstr ""

#: ../../releases/1.4.txt:1129
# d6dcec84045c4fbb9965244a369ff744
msgid "``extends`` template tag"
msgstr ""

#: ../../releases/1.4.txt:1131
# 1ddd4ee3aad6435fb60a653ffefc9cab
msgid "Previously, the :ttag:`extends` tag used a buggy method of parsing arguments, which could lead to it erroneously considering an argument as a string literal when it wasn't. It now uses ``parser.compile_filter``, like other tags."
msgstr ""

#: ../../releases/1.4.txt:1135
# c552f7cfb2f646cf872b813bb19ca3aa
msgid "The internals of the tag aren't part of the official stable API, but in the interests of full disclosure, the ``ExtendsNode.__init__`` definition has changed, which may break any custom tags that use this class."
msgstr ""

#: ../../releases/1.4.txt:1140
# 30e440b37c2d455989349bc48c48dc5e
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

#: ../../releases/1.4.txt:1142
# 48da2468ba21477183c31e6b8c23d88a
msgid "Prior to 1.4, a default value was inserted for fixture objects that were missing a specific date or datetime value when auto_now or auto_now_add was set for the field. This was something that should not have worked, and in 1.4 loading such incomplete fixtures will fail. Because fixtures are a raw import, they should explicitly specify all field values, regardless of field options on the model."
msgstr ""

#: ../../releases/1.4.txt:1149
# b7503acb94cc43d7903853ec8523b694
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

#: ../../releases/1.4.txt:1151
# 1b2051a75b2043bab7f82a6d9b71a65d
msgid "Prior to Django 1.4, attributes were included in any markdown output regardless of safe mode setting of the filter. With version > 2.1 of the Python-Markdown library, an enable_attributes option was added. When the safe argument is passed to the markdown filter, both the ``safe_mode=True`` and ``enable_attributes=False`` options are set. If using a version of the Python-Markdown library less than 2.1, a warning is issued that the output is insecure."
msgstr ""

#: ../../releases/1.4.txt:1160
# ce6e48c6c4fd459eacf10e09aa7691af
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

#: ../../releases/1.4.txt:1162
# 3b5737cf71c54236b9349e4f2f0b078b
msgid "In Django 1.3, the ``get_initial`` method of the :class:`django.views.generic.edit.FormMixin` class was returning the class ``initial`` dictionary. This has been fixed to return a copy of this dictionary, so form instances can modify their initial data without messing with the class variable."
msgstr ""

#: ../../releases/1.4.txt:1169
#: ../../releases/1.4-alpha-1.txt:911
#: ../../releases/1.4-beta-1.txt:979
# 7327ddc45a954ffda34a704088b92972
# 46f9f25d216e4a2e9b6b4722f34d9f8d
# 861ea01b252a49728401ceaf9592fd46
msgid "Features deprecated in 1.4"
msgstr ""

#: ../../releases/1.4.txt:1172
#: ../../releases/1.4-alpha-1.txt:914
#: ../../releases/1.4-beta-1.txt:982
# a952c29ac59a43ada72bea0595030e3f
# e99b84080e8640a5b75898939a99ca50
# 4bf1e53c4c7c4044bb5442ea120d6269
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

#: ../../releases/1.4.txt:1174
# 4f6c84b8197946ca8bed3e3e35fe1e78
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated. Please see the documentation for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4.txt:1179
#: ../../releases/1.4-alpha-1.txt:921
#: ../../releases/1.4-beta-1.txt:989
# ae95d79574f7437c9cb9706e8266828d
# bef09b4872b14e0fb645d6590e63559c
# 5a79aee0c6ad49a3a0494a3273c1afcc
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

#: ../../releases/1.4.txt:1181
# e400ec857dce4b339a4b393370191c5f
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we suggested using a more recent version because of performance improvements and, more importantly, the end of upstream support periods for 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4.txt:1186
#: ../../releases/1.4-alpha-1.txt:928
#: ../../releases/1.4-beta-1.txt:996
# 908f28a1987045978b94048f99df2491
# f4f2b59e6bdc4779b7cdae986940aaad
# 0efc2346938342c190cc9f0392b795e4
msgid "Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL version it officially supports."
msgstr ""

#: ../../releases/1.4.txt:1190
#: ../../releases/1.4-alpha-1.txt:932
#: ../../releases/1.4-beta-1.txt:1000
# 17b08d9901b6407e9e41008a4a5934ec
# c11b7516bce44659a12e811c12c84a92
# 4d35026dd688424d913d08b2d9ea6223
msgid "Request exceptions are now always logged"
msgstr ""

#: ../../releases/1.4.txt:1192
# d95ac9b0b80c4eca9463d94d511c80d5
msgid "When we added :doc:`logging support </topics/logging/>` in Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4.txt:1199
#: ../../releases/1.4-alpha-1.txt:941
#: ../../releases/1.4-beta-1.txt:1009
# 4a2aa9e7021c47ae912d16556fad7a72
# 208619e8a8e5478d82ec2c29c1bf8a3c
# bbe30725661b48ceb1b24fe0b5cba375
msgid "To increase the flexibility of error logging for requests, the ``'django.request'`` logger is now called regardless of the value of :setting:`DEBUG`, and the default settings file for new projects now includes a separate filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent admin error emails in ``DEBUG`` mode::"
msgstr ""

#: ../../releases/1.4.txt:1218
# 46f8b1382192498e85ba997460a483a1
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4.txt:1226
#: ../../releases/1.4-alpha-1.txt:968
#: ../../releases/1.4-beta-1.txt:1036
# 5fd49a68260444019c3049ca04abd905
# d5f276e8d3734549baca1554d3ba84e8
# fc5c3514832b46559c3d8026d57f5c08
msgid "The existence of any ``'filters'`` key under the ``'mail_admins'`` handler will disable this backward-compatibility shim and deprecation warning."
msgstr ""

#: ../../releases/1.4.txt:1230
#: ../../releases/1.4-alpha-1.txt:972
#: ../../releases/1.4-beta-1.txt:1040
# 3f6a91b84e1c415ea832390c7a4ca152
# f3ab7ac042104511b47308d735a8a7bc
# 7a04c890b201481e8efc0bded8eddacb
msgid "``django.conf.urls.defaults``"
msgstr ""

#: ../../releases/1.4.txt:1232
# b708a331264f468f860901221063cab7
msgid "Until Django 1.3, the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4.txt:1237
# 37e05db0303f4961b6619adafbafb8fc
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4.txt:1240
#: ../../releases/1.4-alpha-1.txt:982
#: ../../releases/1.4-beta-1.txt:1050
# 01f4ebd8d31e4e2bb31012a0b4e6183c
# 2b93cd9f3c084d81823e1fd67c853f23
# f406e7eabeb34023b04095ff50d807b2
msgid "``django.contrib.databrowse``"
msgstr ""

#: ../../releases/1.4.txt:1242
#: ../../releases/1.4-alpha-1.txt:984
#: ../../releases/1.4-beta-1.txt:1052
# 0bc5c7d5b107488898057bc66f5ca647
# e9178d6f6fb14d809f81d4977ee3abe9
# 9617624063614405bdd0d9cbb235bba4
msgid "Databrowse has not seen active development for some time, and this does not show any sign of changing. There had been a suggestion for a `GSOC project`_ to integrate the functionality of databrowse into the admin, but no progress was made. While Databrowse has been deprecated, an enhancement of ``django.contrib.admin`` providing a similar feature set is still possible."
msgstr ""

#: ../../releases/1.4.txt:1250
# 8ba00de009204269b7a1314243e2f9c4
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, so it's available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4.txt:1255
#: ../../releases/1.4-alpha-1.txt:997
#: ../../releases/1.4-beta-1.txt:1065
# 7dba7073f08a45b5b6c3e6cb81a09502
# d8852f70faf34725af5656dd7c93cc99
# 86c4acbc52c04c128248f85c41b5a5cb
msgid "``django.core.management.setup_environ``"
msgstr ""

#: ../../releases/1.4.txt:1257
#: ../../releases/1.4-alpha-1.txt:999
#: ../../releases/1.4-beta-1.txt:1067
# 9a27516a4aa04ee6b45e616361f20aa0
# 714a0415414546989de382ae8bf2d3a4
# dd50b4e2b0f142c69872561b830ee0d0
msgid "This function temporarily modified ``sys.path`` in order to make the parent \"project\" directory importable under the old flat :djadmin:`startproject` layout. This function is now deprecated, as its path workarounds are no longer needed with the new ``manage.py`` and default project layout."
msgstr ""

#: ../../releases/1.4.txt:1262
# 5787a60268c543c2ad11164df7017927
msgid "This function was never documented or part of the public API, but it was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4.txt:1268
#: ../../releases/1.4-alpha-1.txt:1010
#: ../../releases/1.4-beta-1.txt:1078
# 5a6f312a254b42b1a2d7964b66596ff7
# a95d000355234375b6fce22bf19d1df9
# b3e869cec29a415ea50427f69e956c87
msgid "``django.core.management.execute_manager``"
msgstr ""

#: ../../releases/1.4.txt:1270
#: ../../releases/1.4-alpha-1.txt:1012
#: ../../releases/1.4-beta-1.txt:1080
# 6d0b7c3e0989441bbf951f279665fbc6
# 8ad9cd2810904d2981ff409e874a2199
# dff4bb55d8cb4faeb1330b542e6aba2c
msgid "This function was previously used by ``manage.py`` to execute a management command. It is identical to ``django.core.management.execute_from_command_line``, except that it first calls ``setup_environ``, which is now deprecated. As such, ``execute_manager`` is also deprecated; ``execute_from_command_line`` can be used instead. Neither of these functions is documented as part of the public API, but a deprecation path is needed due to use in existing ``manage.py`` files."
msgstr ""

#: ../../releases/1.4.txt:1279
#: ../../releases/1.4-alpha-1.txt:1021
#: ../../releases/1.4-beta-1.txt:1089
# a680621b8f114283a07eb50b551668d6
# ee3e5dde2fb74eedaa39205dd32c5339
# 7d5aaf77f07e41aba7484613c4afd157
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

#: ../../releases/1.4.txt:1281
#: ../../releases/1.4-alpha-1.txt:1023
#: ../../releases/1.4-beta-1.txt:1091
# ca6c06c6420647de8770ceadce71fd39
# 49131e9976d24de19b7c84278f180281
# cfad2169ff704822aeea12191c42a9d8
msgid "Two flags, ``is_safe`` and ``needs_autoescape``, define how each template filter interacts with Django's auto-escaping behavior. They used to be attributes of the filter function::"
msgstr ""

#: ../../releases/1.4.txt:1290
#: ../../releases/1.4-alpha-1.txt:1032
#: ../../releases/1.4-beta-1.txt:1100
# a8ebfaa1516b4dd6851d4e04ba4b10fc
# 23455a43d9be4601980bd84c660d03db
# 35221a1e5a7b469b95e8aafacda63d9d
msgid "However, this technique caused some problems in combination with decorators, especially :func:`@stringfilter <django.template.defaultfilters.stringfilter>`. Now, the flags are keyword arguments of :meth:`@register.filter <django.template.Library.filter>`::"
msgstr ""

#: ../../releases/1.4.txt:1299
#: ../../releases/1.4-alpha-1.txt:1041
#: ../../releases/1.4-beta-1.txt:1109
# 86d26eeba44e462a84eb05b0aa31b061
# 7137834d7f0f457e8db74e778c9bda90
# 7eec7175d8d14cdb8e20f9225bddc2ef
msgid "See :ref:`filters and auto-escaping <filters-auto-escaping>` for more information."
msgstr ""

#: ../../releases/1.4.txt:1302
#: ../../releases/1.4-alpha-1.txt:1051
#: ../../releases/1.4-beta-1.txt:1122
# 30b2369ad85546a2aa0421667afea1bf
# 886f5806af024a19aca13f56d02d5237
# dc0fcec6730e49999ff7b946ab189bee
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

#: ../../releases/1.4.txt:1304
#: ../../releases/1.4-alpha-1.txt:1053
#: ../../releases/1.4-beta-1.txt:1124
# 1fc65e7a7f8843d2a040f990bf2323c0
# 55a5f9e4f3d7432a91b2984ce35c7540
# e9e8a2d42da54d8a839d18df89cae9b6
msgid "Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in application names, like ``django.contrib.*``. The expansion was performed by a filesystem-based implementation of ``from <package> import *``. Unfortunately, `this can't be done reliably`_."
msgstr ""

#: ../../releases/1.4.txt:1309
#: ../../releases/1.4-alpha-1.txt:1058
#: ../../releases/1.4-beta-1.txt:1129
# a7f6daafa9c24fd0a8fc120284cc6f95
# 21323d5008b849a68e4d6ede8110a938
# 41864bcd2d5343518bcda4b48f40ca91
msgid "This behavior was never documented. Since it is un-pythonic and not obviously useful, it was removed in Django 1.4. If you relied on it, you must edit your settings file to list all your applications explicitly."
msgstr ""

#: ../../releases/1.4.txt:1316
#: ../../releases/1.4-alpha-1.txt:1065
#: ../../releases/1.4-beta-1.txt:1136
# 08677c5cddf043ff93514a543a5a5d8b
# c135564c69e64570ba970ee132766605
# 6c5f30d0cd8047bab154e76ff9b4dcb1
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

#: ../../releases/1.4.txt:1318
#: ../../releases/1.4-alpha-1.txt:1067
#: ../../releases/1.4-beta-1.txt:1138
# 7f85cc5cc130466db4bd2761c09727c9
# c0f36a5d768c4be88d5939cee5abc779
# 7bb57417b68b499d8960979fad148a24
msgid "This attribute was confusingly named ``HttpRequest.raw_post_data``, but it actually provided the body of the HTTP request. It's been renamed to ``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

#: ../../releases/1.4.txt:1323
# d4c9f02a4551474eb353db0ff2cbe94b
msgid "``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

#: ../../releases/1.4.txt:1325
# 8511290fde3446a8b427a046a58eecae
msgid "In previous versions, ``Paginator`` objects used in sitemap classes were cached, which could result in stale site maps. We've removed the caching, so each request to a site map now creates a new Paginator object and calls the :attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your ``items()`` method is doing, this may have a negative performance impact. To mitigate the performance impact, consider using the :doc:`caching framework </topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

#: ../../releases/1.4.txt:1335
# 524eae11faa34871a4df2f912fbaaa4c
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

#: ../../releases/1.4.txt:1337
# aa11d35adf3a4e4fbb084071bccb4754
msgid "Versions of Python-Markdown earlier than 2.1 do not support the option to disable attributes. As a security issue, earlier versions of this library will not be supported by the markup contrib app in 1.5 under an accelerated deprecation timeline."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:3
# 2280af8ccb26485e95036d309ec6e5e6
msgid "Django 1.4 alpha release notes"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:5
# 66c5e81d094b42ffabdc211a74246d6f
msgid "December 22, 2011."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:7
# 58bdeb08079245b2ad88848f0dec862d
msgid "Welcome to Django 1.4 alpha!"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:9
# 36695deebe5744a4ad5580e07bd0ffe7
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:18
# c85eebdfd6af468fbb6097c0bef39dfa
msgid "Django 1.4 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:30
#: ../../releases/1.4-beta-1.txt:46
# 934bab74621d4dd88fb0d8b3a1806cc5
# cd763664d8b04e379f809282ac802b94
msgid "While not a new feature, it's important to note that Django 1.4 introduces the second shift in our Python compatibility policy since Django's initial public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 drops support for Python 2.4. As such, the minimum Python version required for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:36
#: ../../releases/1.4-beta-1.txt:52
# 0fa3aed58fc14ca38eb241e0655ad16a
# 91178e14b4954342900c62d412e884d8
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:43
#: ../../releases/1.4-beta-1.txt:59
# 99f08838c0b046b68a026ee4db97908c
# 71962cfdf2884cbe971c2e4e1f3c3183
msgid "Django does not support Python 3.x at this time. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published before the release of Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:65
#: ../../releases/1.4-beta-1.txt:81
# 413768552c384ec7a825e7831a3e96eb
# ac300d03b48849a9bf63ac1c5c7a1027
msgid "Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning that other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:77
#: ../../releases/1.4-beta-1.txt:93
# dfd4644ddaeb4bff86bcf9986e301fd9
# 05a7977e809e40a2bfd087b03ba22544
msgid "This method allows for more efficient creation of multiple objects in the ORM. It can provide significant performance increases if you have many objects. Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:88
#: ../../releases/1.4-beta-1.txt:104
# 1ffb33d63c1b4d62800d29651b0e4449
# 6af5768a41b54e968ced10493fe4d052
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:119
#: ../../releases/1.4-beta-1.txt:150
# e8b1471ee4994e748fcf3c4856b6592c
# f14c2c391dd14b0299c4d1eb401be7a4
msgid "HTML5 Doctype"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:130
#: ../../releases/1.4-beta-1.txt:161
# 8f11c03919fb44e8af1ffbdbd77d5ffe
# 1bfa2b9b953945fc9439215188ef5e10
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to specify change list filters by specifying a field lookup, but didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:139
#: ../../releases/1.4-beta-1.txt:170
# 22b5b83e112e4c91ba310f465bef1c0e
# d1f9f9492a3549758298ae08e1270d1a
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (e.g. depending on the request) has also been added."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:149
#: ../../releases/1.4-beta-1.txt:180
# 09c4413720a64c9eb65c2141b2983196
# c711f896c7d2426eb2220efb6a4c84eb
msgid "A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:153
#: ../../releases/1.4-beta-1.txt:184
# 55b987a1f5e14460a1d5263605744c44
# f93074d3ad1f488898b8a1876cc140c2
msgid "Two other new methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` were added to :class:`~django.contrib.admin.ModelAdmin` to enable the dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:162
#: ../../releases/1.4-beta-1.txt:193
# 8d6e343f2fe945dda95a609fbcb2c100
# c068cf20b97f43c2a9140c44488e766d
msgid "Admin inlines will now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:181
#: ../../releases/1.4-beta-1.txt:212
# 497c26da307e4eafaa23093cd260490a
# 83f6144112ed4584bae56dd1f8c3ab5b
msgid "Django 1.4 introduces a new cookie-based backend for the session framework which uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:191
#: ../../releases/1.4-beta-1.txt:229
# 987515bc8ba94048a1b58236195c0c06
# e31f07514eb0488083ecaaf27d027e5d
msgid "The previous ``FormWizard`` from the formtools contrib app has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:207
#: ../../releases/1.4-beta-1.txt:245
# a2a664be40cc4ec3bcee43a0ca10be7b
# be11b33baa264ef98757b5817976496a
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:213
#: ../../releases/1.4-beta-1.txt:251
# 60104dfe3fa94bc4bfdad1e203f0adad
# a6aa71b5c668433aaefd883014555c2d
msgid "Django 1.4 gained the ability to look for a language prefix in the URL pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. Additionally, it's now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:231
#: ../../releases/1.4-beta-1.txt:269
# dc1070ce03f04f95a97458132ad7d37d
# 3594f11d59ed4a2285b25c06b2c67440
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLConf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:265
#: ../../releases/1.4-beta-1.txt:303
# 81d1f68e9893453e8c854c9a62acca26
# e4e7963532fe4937b9d7f3cfba80f236
msgid "Then in the template any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:290
#: ../../releases/1.4-beta-1.txt:328
# 2c3d484c25774e349e0860f0475f34e4
# 9a02aa3ef7564bf89bfefcc8fb54ed9d
msgid "Added a filter which truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:307
#: ../../releases/1.4-beta-1.txt:345
# d816d89a40b74d86b796a909a6cad19e
# 8ee79f70ad1c4af5a365ebab25e56706
msgid "In addition to the `static template tag`_, the :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend which caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:330
#: ../../releases/1.4-beta-1.txt:368
# 38b8b6e13ac343288a079ceb0952e08e
# e3ceafa701b846e7840bc0c94c8e6e6e
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help with AJAX heavy sites, protection for PUT and DELETE requests, and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which can improve the security and usefulness of the CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:340
#: ../../releases/1.4-beta-1.txt:378
# fd3545fad07342e48a1e39ebc511eeb0
# 78e97a0a2bfa4260b1e895b396a9b88b
msgid "Two new function decorators, :func:`sensitive_variables` and :func:`sensitive_post_parameters`, were added to allow designating the local variables and POST parameters which may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:345
#: ../../releases/1.4-beta-1.txt:383
# 12d82bbcd43e4b9791138a2586739b87
# dca908957d7d4b568dee73c021b20177
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:351
#: ../../releases/1.4-beta-1.txt:389
# 96934eb1de7a455fa190b16aff12798f
# 0f583709058b47f881cb2eb819da5d63
msgid "You may override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:358
#: ../../releases/1.4-beta-1.txt:396
# 0e0d787591d847e081d7a4ab5ffc35c3
# 96fef267f8464caabaad63889a525977
msgid "The previously added support for IPv6 addresses when using the runserver management command in Django 1.3 has now been further extended by adding a :class:`~django.db.models.fields.GenericIPAddressField` model field, a :class:`~django.forms.fields.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:374
#: ../../releases/1.4-beta-1.txt:412
# 3988185727634ef3941339008f768c4b
# 62ecf87021174fc8b80a5df013f70988
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:394
#: ../../releases/1.4-beta-1.txt:432
# 4b9968ad7a844cd8b1f353ce7c612947
# d7644271f53e4a30a311835f3778c6eb
msgid "If settings, URLconfs, and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:439
#: ../../releases/1.4-beta-1.txt:477
# 5f6bfc9ff50746d1a7901ffd8cc76937
# 215834dbcee642b895927523a48d5aa0
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, so as to make it possible to run runserver with the same WSGI configuration that is used for deployment. A new :setting:`WSGI_APPLICATION` setting is available to configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:451
#: ../../releases/1.4-beta-1.txt:489
# ff55645ad9874d0396b3bc6d6d08704d
# c218ef660b444fcdaedfe83bc6b51616
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands got a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:455
#: ../../releases/1.4-beta-1.txt:493
# 7b28ef67687e4ccd8bdc3252e0dafa30
# d10f83719bea439196e46c9ba0b144fe
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when running the following command::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:472
#: ../../releases/1.4-beta-1.txt:510
# 997d79d460fa40e79edb643c0174e88e
# 7aa1d5b6135f444981f1e7155b0ad2e9
msgid "Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's enabled, Django stores date and time information in UTC in the database, uses time zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:477
#: ../../releases/1.4-beta-1.txt:515
# 971850cbb6fd496d81ed7e6bd97867a2
# 9bd3f86c2a4c41a29cb94e10bf68aeb6
msgid "Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:485
#: ../../releases/1.4-beta-1.txt:523
# 809e1fb41fc54ce6a51e120ec68f578c
# 394f8a72cc8442d1ac23b18c14ded624
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:494
#: ../../releases/1.4-beta-1.txt:554
# b8ea64aca87e434994c0d37e163b4a2d
# 1091ac285e0b4f578d05b8f0ff94fb22
msgid "A more usable stacktrace in the technical 500 page: frames in the stack trace which reference Django's code are dimmed out, while frames in user code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in user code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:506
#: ../../releases/1.4-beta-1.txt:566
# 6576601bdc9047c0b096cf2716d4cc80
# 0bf702775daf4fafaa24bac232e49f08
msgid "The :func:`django.contrib.auth.models.check_password` function has been moved to the :mod:`django.contrib.auth.utils` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:510
#: ../../releases/1.4-beta-1.txt:570
# c43db1eb3e3c4ea08f4986c09a426ba8
# d5f6a7feb30a4c1a818b4ade6cfd8763
msgid "The :djadmin:`collectstatic` management command gained a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:514
#: ../../releases/1.4-beta-1.txt:574
# 45c7a346e3974b33bc8573e7af53aa58
# 8117cd76713447eb80cc166dc2283116
msgid "It is now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:529
#: ../../releases/1.4-beta-1.txt:589
# a01c36c830b04fe08ec36b8d4be7b368
# 5417b405887a4f60aa895a930fb33d6b
msgid "A new plain text version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code (:meth:`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:534
#: ../../releases/1.4-beta-1.txt:594
# 6e9d7053f1f64754b0feefd2a4ab30bd
# e145310fa584442d872459b81ca38a70
msgid "Similarly to its HTML counterpart, it contains a collection of different pieces of information about the state of the web application."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:537
#: ../../releases/1.4-beta-1.txt:597
# c4318b4d72a44bceb2b69583e88546b1
# b0835543278b481ca24a95cf4c9c58ac
msgid "This should make it easier to read when debugging interaction with client-side Javascript code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:569
#: ../../releases/1.4-beta-1.txt:637
# 7b9abb307da74d5499db9d8f799e4705
# 69a489745e8c47c9adcc5cc423c8f6c6
msgid "Starting in Django 1.4 the admin's static files also follow this convention to make it easier to deploy the included files. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files are served by a web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:577
#: ../../releases/1.4-beta-1.txt:645
# e2c85a2bf57242c6b22220572d802792
# ffa1578086864cbcb206c45777e58427
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your web server serves the files correctly. The development server continues to serve the admin files just like before. Don't hesitate to consult the :doc:`static files howto </howto/static-files>` for further details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:584
#: ../../releases/1.4-beta-1.txt:652
# b1150f7b8bc04f208c080ef0ba8bd2b3
# 1df884944f9f4ddcbe54ea2af8277ee7
msgid "In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``) make sure to also set your :setting:`STATIC_URL` setting to the correct URL, for example ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:591
#: ../../releases/1.4-beta-1.txt:659
# e961776ff6d148e4a903086449f83051
# 8b5a2f2e26684c6ca6ebd933b59ebaed
msgid "If you're implicitly relying on the path of the admin static files on your server's file system when you deploy your site, you have to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:599
#: ../../releases/1.4-beta-1.txt:667
# 54c7451823544c9885ba35eaf12447d4
# d65acf201fbc4ae4aa399e81dea51b9c
msgid "Django hasn't had a clear policy on which browsers are supported for using the admin app. Django's new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of IE6, which is no longer supported."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:604
#: ../../releases/1.4-beta-1.txt:672
# 4c5435542d7e48e1b59b904e0346b678
# cc4676daf35d45ae8b4d7d6c73050651
msgid "Released over ten years ago, IE6 imposes many limitations on modern web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:608
#: ../../releases/1.4-beta-1.txt:676
# b0cfa672e27d46e09edc28ccc23e7456
# 561c46acd24d40eda6d3db5f24e88c19
msgid "This new policy **has no impact** on development outside of the admin. Users of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:616
#: ../../releases/1.4-beta-1.txt:684
# 19f760b488b74428ba9b03e48efa9bed
# 042e526b9d4141619ff86ad01cfdec75
msgid "As part of an effort to improve the performance and usability of the admin's changelist sorting interface and of the admin's :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:628
#: ../../releases/1.4-beta-1.txt:696
# c8ee5e3531a64804b1ad51f6bf05c27f
# 1b0efe9c7f924f58bf058bb87e31931d
msgid "If you used those icons to customize the admin then you will want to replace them with your own icons or retrieve them from a previous release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:634
#: ../../releases/1.4-beta-1.txt:702
# 43da42bad1d04cd4837fad091122b87e
# fdb9c3db97664f198deb6531f39a6571
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), a prefix \"field-\" has been added to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You will need to take that prefix into account in your custom style sheets or javascript files if you previously used plain field names as selectors for custom styles or javascript transformations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:657
#: ../../releases/1.4-beta-1.txt:725
# 9a8e9928f7cd4aaf8fe08fabee32237b
# f18743b964fa449e968b90a389c9f406
msgid "consequences: the user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:659
#: ../../releases/1.4-beta-1.txt:727
# 5293cd1d8e404c8b993341f1f3a3e525
# b62dc67986114ffdb2b6cfb02c112a23
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:663
#: ../../releases/1.4-beta-1.txt:731
# a1bff16952d64753939816a84d79e12d
# 78bd82763168405d97de3cdfaaf12f08
msgid "consequences: password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:665
#: ../../releases/1.4-beta-1.txt:733
# b265c5698e00419cb87cb2d271459c9b
# 133956fe3eee44d8afbda8abbf04fd7e
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:667
#: ../../releases/1.4-beta-1.txt:735
# ad17d298aa014b9f835e97ae9f57f3bb
# 05a3045c7bba4180a6483f7d81489bf9
msgid "Form-related hashes — these are much shorter lifetime, and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance, and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:673
#: ../../releases/1.4-beta-1.txt:741
# ff40170de55a4d30b2f0038c0ac8c1c1
# f185310006a74490a19c964f5ed80f18
msgid "consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:675
#: ../../releases/1.4-beta-1.txt:743
# 04dc4c793eed4e6081b540afdc1366af
# 8b1d693356574690bd7200ff9c769877
msgid "time period: the amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:680
#: ../../releases/1.4-beta-1.txt:748
# e46523d730524de5a81c69235dd601ef
# d106ff86f05246b8a686ba0b0dd1d132
msgid "consequences: the user will see an error about the form having expired, and will be sent back to the first page of the wizard, losing the data they have entered so far."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:684
#: ../../releases/1.4-beta-1.txt:752
# e3f43cff74194fb4ae3856a6730f1ddd
# 9ac5c1fc6cd24d45be18e756067a4e38
msgid "time period: the amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:689
#: ../../releases/1.4-beta-1.txt:757
# 7265af30b1264520801844aa755bfe7d
# b313fa29e79d4d6ca0cdc1492ecca28d
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies only if you are upgrading from 1.1."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:692
#: ../../releases/1.4-beta-1.txt:760
# d6ea1f023a644c5096e538dbc0ed9499
# 0b6b9e588e444e17989de23eb03434f2
msgid "consequences: the user will see a 403 error with any CSRF protected POST form."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:695
#: ../../releases/1.4-beta-1.txt:763
# 28bf654e3ac944f48b49a20740f222d5
# 5683c4d157a94b54808e69ae547adbe5
msgid "time period: the amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:701
#: ../../releases/1.4-beta-1.txt:769
# 5d98001973cc4bad85fe8a9c76c15fbc
# d97aa45028e245679733fc3a9ebc554c
msgid "Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally redirects returned by flatpages are now permanent (301 status code) to match the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:714
#: ../../releases/1.4-beta-1.txt:782
# 87b56c99eb7a41828819becc058808a4
# 59ed33d0b7a24daa90d8fd06a59aa8c6
msgid "As a consequence of time zone support, and according to the ECMA-262 specification, some changes were made to the JSON serializer:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:724
#: ../../releases/1.4-beta-1.txt:792
# 3d38532fad0544f1bc2da7bc3535d5e4
# 4aca2a74ef39467088ad9215e81c95b5
msgid "The XML serializer was also changed to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:728
#: ../../releases/1.4-beta-1.txt:796
# b0717ddf03d344f0abc87a943c66b2cb
# 45dffdac3fda4c0c9e91fabd5911c30a
msgid "The serializers will dump datetimes in fixtures with these new formats. They can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:739
#: ../../releases/1.4-beta-1.txt:807
# 3ff27303d22f42f9848802c45dd2b5d1
# 204bfc1852834e338a08be0957cec9e3
msgid "In the context of time zone support, this flag was changed to ``False``, and datetimes are now stored without time zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:765
#: ../../releases/1.4-beta-1.txt:833
# 88a464d345ef421ebab36972167cdcc2
# 793cc8c217c245c3b2eeb7e08ff78ee6
msgid "Finally, while it is now possible to pass connections between threads, Django does not make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:779
#: ../../releases/1.4-beta-1.txt:847
# 12729de12c5e472290a922f2497775ca
# 4da3272abc0546a28e5d3dc9b2819fea
msgid "If you rely on the feature and want to restore the old behavior, simply use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:794
#: ../../releases/1.4-beta-1.txt:862
# 39b61a311b5749f9944d6d71c8cef656
# a0bd4d2afb0244f59c5a29596962a33b
msgid "Save this model manager in your custom comment app (e.g. in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:845
#: ../../releases/1.4-beta-1.txt:913
# 3ce4f91d50504f9191aa502853e6f694
# 116f5e1ff2484e199359a53f7f7e7e6c
msgid "Don't forget to escape characters that have a special meaning in a regular expression."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:851
#: ../../releases/1.4-beta-1.txt:919
# dc500ee1b3ba43b98a4055561a4b0db6
# 1029543985924ebd9ddd8c1e1d1bde82
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection against only POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, and enforce protection on everything else."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:857
#: ../../releases/1.4-beta-1.txt:925
# 7236a9160e7c4d5a86d6b51fc2af4903
# f547aacaf6d044ceaf28eb653bfd2f72
msgid "If you are using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:863
#: ../../releases/1.4-beta-1.txt:931
# 347bbf0afe6c4da784bdb078ec7f1314
# ffec20bbfbb146d0be3bbd5b143852d7
msgid "This was an alias to ``django.template.loader`` since 2005, it has been removed without emitting a warning due to the length of the deprecation. If your code still referenced this please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:877
#: ../../releases/1.4-beta-1.txt:945
# 9678eab7cc2144f2b290fb514737fffd
# d7f209e7cb024f53acf8fb59a887977f
msgid "The ``open`` method of the base Storage class took an obscure parameter ``mixin`` which allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the `mixin` parameter, you can easily achieve the same by overriding the `open` method, e.g.::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:903
#: ../../releases/1.4-beta-1.txt:971
# 5c51f4f244104032b40908ff3a36daee
# 0802f54fee8b475f998877832b057dde
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, for additional security, the YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:916
#: ../../releases/1.4-beta-1.txt:984
# 93eaf1ec438345f7ad79724a9eb8f0ac
# 8bd710c18a4f472292c89fdb2f7259f0
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated, please see the docs for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:923
#: ../../releases/1.4-beta-1.txt:991
# eb2915e7bdca43aa9b49528dc86295bd
# d9a134bbc2604474aaa74afa47a1249a
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the relevant documents suggested to use a recent version because of performance reasons but more importantly because end of the upstream support periods for releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:934
#: ../../releases/1.4-beta-1.txt:1002
# e0a74b8eda1448558db0b52ead4c2c9e
# cbe06712e8e3405b98869d10d5272343
msgid "When :doc:`logging support </topics/logging/>` was added to Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:960
#: ../../releases/1.4-beta-1.txt:1028
# 2105dcc2db1c4596a39a56481b38eb0a
# b32a4e0ee8854e78ae4aa18a2bbd3d66
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section, and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:974
#: ../../releases/1.4-beta-1.txt:1042
# 5e480507f50d4f4d9484d0554677ca57
# 30cc28d6432443c39482f46a97d9f253
msgid "Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:979
#: ../../releases/1.4-beta-1.txt:1047
# c1be94ad86054f479476add5317e2ebf
# 1fece65b698d49e09ea435b2324731b8
msgid "Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:992
#: ../../releases/1.4-beta-1.txt:1060
# 37cb04307c2648f3ace2698e61558723
# 776da41fe62e4196aebbf408e9e7c317
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, and so is available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1004
#: ../../releases/1.4-beta-1.txt:1072
# c07d6fdf5c1844b8b101b6f3077b7cb4
# dada7e1979c94a8f84cd720bd09dff56
msgid "This function was never documented or part of the public API, but was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1046
# d903121ffdf143608be2a9747014c7d7
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1072
#: ../../releases/1.4-beta-1.txt:1144
# 86b90bd44c764761856316c55317628e
# 736be124defa4d119d3e38581f56c695
msgid "The Django 1.4 roadmap"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1074
#: ../../releases/1.4-beta-1.txt:1146
# e73f2eadcb5a41b1ae98e373e453ef94
# 24df79f58d964250b0cb70a94d5f894a
msgid "Before the final Django 1.4 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1077
# 1200deb094f34f51ad877db8f1e9af21
msgid "Week of **January 30, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1080
#: ../../releases/1.4-beta-1.txt:1152
# dd29b77f28f24503b8efccbc2f8c3de1
# 4cd13322a86b49ca83e129ecdc980a41
msgid "Week of **February 27, 2012**: First Django 1.4 release candidate; string freeze for translations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1083
#: ../../releases/1.4-beta-1.txt:1155
# fbff666c4a9d42bf8a661897a05ae6ed
# 145de75aa5f54f7c9e891cb8bac9ac9f
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1085
#: ../../releases/1.4-beta-1.txt:1157
# 560867a20110438db915d4fff98f866e
# fa5571dc782f467cb35ef7d1c802414e
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.4 release. Django 1.4 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1092
# 330926cc61b246dabb023f54acca3221
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1121
#: ../../releases/1.4-beta-1.txt:1193
# c3cda843a15143bf8d9f881d5eff25d8
# 0a394f64165644e9a09c592ef20c2be8
msgid "Several development sprints will also be taking place before the 1.4 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.4-beta-1.txt:3
# 11808edb18704d69bdf6d23da963922c
msgid "Django 1.4 beta release notes"
msgstr ""

#: ../../releases/1.4-beta-1.txt:5
# a4127ea40760478b8d7fce7248c3eb64
msgid "February 15, 2012."
msgstr ""

#: ../../releases/1.4-beta-1.txt:7
# 4a350d37be4a4de7930d1aca5d62f26d
msgid "Welcome to Django 1.4 beta!"
msgstr ""

#: ../../releases/1.4-beta-1.txt:9
# fca261c748fe4d738400bf6e3f16a6a7
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-beta-1.txt:18
# 6eea5ff025b74f34ad5482d48ec5e728
msgid "Django 1.4 beta includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:29
# 6e957ceecc4548dea375dd83071d10a2
msgid "Version numbering"
msgstr ""

#: ../../releases/1.4-beta-1.txt:31
# d1a15d558f694a2eb43a50c3fb7529c1
msgid "Internally, Django's version number is represented by the tuple ``django.VERSION``. This is used to generate human-readable version number strings; as of Django 1.4 beta 1, the algorithm for generating these strings has been changed to match the recommendations of :pep:`386`. This only affects the human-readable strings identifying Django alphas, betas and release candidates, and should not affect end users in any way."
msgstr ""

#: ../../releases/1.4-beta-1.txt:38
# 3b1f899bc3824c76ba8ff7bd1daa17a5
msgid "For example purposes, the old algorithm would give Django 1.4 beta 1 a version string of the form \"1.4 beta 1\". The new algorithm generates the version string \"1.4b1\"."
msgstr ""

#: ../../releases/1.4-beta-1.txt:135
# 47f8b5a12a994c329c6b3848fc425539
msgid "Django 1.4 alpha contained a bug that corrupted PBKDF2 hashes. To determine which accounts are affected, run :djadmin:`manage.py shell <shell>` and paste this snippet::"
msgstr ""

#: ../../releases/1.4-beta-1.txt:147
# b429a587c9ab4f23a00a28927a166001
msgid "These users should reset their passwords."
msgstr ""

#: ../../releases/1.4-beta-1.txt:218
# 6106dd4177a1425ba0cbbde9437f823a
msgid "Session data is signed and validated by the server, but is not encrypted.  This means that a user can view any data stored in the session, but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4-beta-1.txt:617
# aa667463fbf5430db2408284000d9a6d
msgid "New phrases added to ``HIDDEN_SETTINGS`` regex in `django/views/debug.py`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:619
# 077129295267454cb61489f7eba72190
msgid "``'API'``, ``'TOKEN'``, ``'KEY'`` were added, ``'PASSWORD'`` was changed to ``'PASS'``."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1114
# 71a5599e50c340b780f9a33a2475370f
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from Javascript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1149
# 6c2645cd85f44f55903bc2fbb0036b0f
msgid "Week of **January 13, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1164
# 2987f4ff6deb4cd78e9679e03f4d0422
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-beta-1.txt:1175
# bd6c9875636b496096e795c32c53b54a
msgid "Additionally, discussion of Django development, including progress toward the 1.4 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/index.txt:3
# c4bff82e537146eda79c6b8aa55e5f0c
msgid "Release notes"
msgstr ""

#: ../../releases/index.txt:5
# 5e824805753e4d5fb69dfc5b9962130b
msgid "Release notes for the official Django releases. Each release note will tell you what's new in each version, and will also describe any backwards-incompatible changes made in that version."
msgstr ""

#: ../../releases/index.txt:9
# ba80c2a20fbc4e178452adb3a4991090
msgid "For those upgrading to a new version of Django, you will need to check all the backwards-incompatible changes and deprecated features for each 'final' release from the one after your current Django version, up to and including the new version."
msgstr ""

#: ../../releases/index.txt:15
# 655bc64fd0954001b02ee2ced45558dd
msgid "Final releases"
msgstr ""

#: ../../releases/index.txt:19
# 24ea3e42a6e9453589a2ea8f5811ab63
msgid "1.4 release"
msgstr ""

#: ../../releases/index.txt:26
# fdb1a722951e4fac871ba5d9397ba4c5
msgid "1.3 release"
msgstr ""

#: ../../releases/index.txt:34
# b2183daaeb9748338096943cd376d847
msgid "1.2 release"
msgstr ""

#: ../../releases/index.txt:48
# 5533b39e9aa94540b0fb5bd522c6f301
msgid "1.1 release"
msgstr ""

#: ../../releases/index.txt:58
# 376f8206661c47eb81cf3c8120f936c4
msgid "1.0 release"
msgstr ""

#: ../../releases/index.txt:67
# 59d31bf9a46040278b327623c6657c9d
msgid "Pre-1.0 releases"
msgstr ""

#: ../../releases/index.txt:75
# 86dcbe01401c4ce8b18e8f5fe89d54d0
msgid "Development releases"
msgstr ""

#: ../../releases/index.txt:77
# 9ac8b0c0d72143ee9622c4c0b52ce1f0
msgid "These notes are retained for historical purposes. If you are upgrading between formal Django releases, you don't need to worry about these notes."
msgstr ""

