# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-29 22:44\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../faq/admin.txt:2
# 33a7a1cb61d4432ba1d5e2425e256523
msgid "FAQ: The admin"
msgstr ""

#: ../../faq/admin.txt:5
# 7a41f027cc7348afb6897ab8ae68efe1
msgid "I can't log in. When I enter a valid username and password, it just brings up the login page again, with no error messages."
msgstr ""

#: ../../faq/admin.txt:7
# 82271163da6947c5a4a8ece5764b204c
msgid "The login cookie isn't being set correctly, because the domain of the cookie sent out by Django doesn't match the domain in your browser. Try these two things:"
msgstr ""

#: ../../faq/admin.txt:11
# cf5aedb1078b4fd395f492ed7668852a
msgid "Set the :setting:`SESSION_COOKIE_DOMAIN` setting in your admin config file to match your domain. For example, if you're going to \"http://www.example.com/admin/\" in your browser, in \"myproject.settings\" you should set ``SESSION_COOKIE_DOMAIN = 'www.example.com'``."
msgstr ""

#: ../../faq/admin.txt:16
# b80b7e3189004bd9a5ebbd6a4d59103b
msgid "Some browsers (Firefox?) don't like to accept cookies from domains that don't have dots in them. If you're running the admin site on \"localhost\" or another domain that doesn't have a dot in it, try going to \"localhost.localdomain\" or \"127.0.0.1\". And set :setting:`SESSION_COOKIE_DOMAIN` accordingly."
msgstr ""

#: ../../faq/admin.txt:23
# cc5fda1134d2407ea9a5c200b996f5b6
msgid "I can't log in. When I enter a valid username and password, it brings up the login page again, with a \"Please enter a correct username and password\" error."
msgstr ""

#: ../../faq/admin.txt:25
# b81f2716ef724342beeeb53361b5c4c9
msgid "If you're sure your username and password are correct, make sure your user account has ``is_active`` and ``is_staff`` set to True. The admin site only allows access to users with those two fields both set to True."
msgstr ""

#: ../../faq/admin.txt:30
# b895c9fa44814a02960516c9bdc3362c
msgid "How can I prevent the cache middleware from caching the admin site?"
msgstr ""

#: ../../faq/admin.txt:32
# 77c54d6a46f94739a0ace18af9e51805
msgid "Set the :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting to ``True``. See the :doc:`cache documentation </topics/cache>` for more information."
msgstr ""

#: ../../faq/admin.txt:36
# e9132fec2d2a495680d323a8ede552ae
msgid "How do I automatically set a field's value to the user who last edited the object in the admin?"
msgstr ""

#: ../../faq/admin.txt:38
# b4ec90a31cf64bd99aa807127758c2e8
msgid "The :class:`~django.contrib.admin.ModelAdmin` class provides customization hooks that allow you to transform an object as it saved, using details from the request. By extracting the current user from the request, and customizing the :meth:`~django.contrib.admin.ModelAdmin.save_model` hook, you can update an object to reflect the user that edited it. See :ref:`the documentation on ModelAdmin methods <model-admin-methods>` for an example."
msgstr ""

#: ../../faq/admin.txt:46
# bf2a5234602d4cf3aaff294f773ac1b5
msgid "How do I limit admin access so that objects can only be edited by the users who created them?"
msgstr ""

#: ../../faq/admin.txt:48
# 0bd7fb8dd3db44938e75e5d09f8e2aeb
msgid "The :class:`~django.contrib.admin.ModelAdmin` class also provides customization hooks that allow you to control the visibility and editability of objects in the admin. Using the same trick of extracting the user from the request, the :meth:`~django.contrib.admin.ModelAdmin.queryset` and :meth:`~django.contrib.admin.ModelAdmin.has_change_permission` can be used to control the visibility and editability of objects in the admin."
msgstr ""

#: ../../faq/admin.txt:56
# fddb2f6072f042c7ad9367c92bf28ecd
msgid "My admin-site CSS and images showed up fine using the development server, but they're not displaying when using mod_wsgi."
msgstr ""

#: ../../faq/admin.txt:58
# fc2aca9c48f8438b8f2d5707647f4da9
msgid "See :ref:`serving the admin files <serving-the-admin-files>` in the \"How to use Django with mod_wsgi\" documentation."
msgstr ""

#: ../../faq/admin.txt:62
# 6674d568c95c4abe872b1ca9a227e200
msgid "My \"list_filter\" contains a ManyToManyField, but the filter doesn't display."
msgstr ""

#: ../../faq/admin.txt:64
# 74e6a8f40a62485091166a786c64a805
msgid "Django won't bother displaying the filter for a ``ManyToManyField`` if there are fewer than two related objects."
msgstr ""

#: ../../faq/admin.txt:67
# 773fd5082c8749fcbe2ed3256a18540a
msgid "For example, if your ``list_filter`` includes ``sites``, and there's only one site in your database, it won't display a \"Site\" filter. In that case, filtering by site would be meaningless."
msgstr ""

#: ../../faq/admin.txt:72
# 8bf72e77e7ab41eabea8c6851f129376
msgid "How can I customize the functionality of the admin interface?"
msgstr ""

#: ../../faq/admin.txt:74
# 79cc247511f941d6900844035ad320ee
msgid "You've got several options. If you want to piggyback on top of an add/change form that Django automatically generates, you can attach arbitrary JavaScript modules to the page via the model's ``class Admin`` ``js`` parameter. That parameter is a list of URLs, as strings, pointing to JavaScript modules that will be included within the admin form via a ``<script>`` tag."
msgstr ""

#: ../../faq/admin.txt:80
# 8e4d181b43d64b99aae822e80a606781
msgid "If you want more flexibility than simply tweaking the auto-generated forms, feel free to write custom views for the admin. The admin is powered by Django itself, and you can write custom views that hook into the authentication system, check permissions and do whatever else they need to do."
msgstr ""

#: ../../faq/admin.txt:85
# f0dd22860eda44f5a63bd188fdc3ebc6
msgid "If you want to customize the look-and-feel of the admin interface, read the next question."
msgstr ""

#: ../../faq/admin.txt:89
# 0a0f0b03b0c94e98b17fc0ac7c41340e
msgid "The dynamically-generated admin site is ugly! How can I change it?"
msgstr ""

#: ../../faq/admin.txt:91
# edd9a067c4da45c4b5232dd904049042
msgid "We like it, but if you don't agree, you can modify the admin site's presentation by editing the CSS stylesheet and/or associated image files. The site is built using semantic HTML and plenty of CSS hooks, so any changes you'd like to make should be possible by editing the stylesheet. We've got a :doc:`guide to the CSS used in the admin </obsolete/admin-css>` to get you started."
msgstr ""

#: ../../faq/admin.txt:98
# 92148ddd7c8946988bf91fe7de02ed8c
msgid "What browsers are supported for using the admin?"
msgstr ""

#: ../../faq/admin.txt:100
# 41c2412cf209476fa1588c6ed1f5d64d
msgid "The admin provides a fully-functional experience to `YUI's A-grade`_ browsers, with the notable exception of IE6, which is not supported."
msgstr ""

#: ../../faq/admin.txt:103
# 98788af58c324fa2b3ab79bae0fc7405
msgid "There *may* be minor stylistic differences between supported browsersâ€”for example, some browsers may not support rounded corners. These are considered acceptable variations in rendering."
msgstr ""

#: ../../faq/contributing.txt:2
# 83f4f9eca53442c3ae2dbd56600dfb7e
msgid "FAQ: Contributing code"
msgstr ""

#: ../../faq/contributing.txt:5
# 08204260323749ef9860123a65a1a531
msgid "How can I get started contributing code to Django?"
msgstr ""

#: ../../faq/contributing.txt:7
# 09bd2ab6c75148dd960ee9388edcd069
msgid "Thanks for asking! We've written an entire document devoted to this question. It's titled :doc:`Contributing to Django </internals/contributing/index>`."
msgstr ""

#: ../../faq/contributing.txt:11
# 3b5844d8291c43dd9fcb0ed39b24384a
msgid "I submitted a bug fix in the ticket system several weeks ago. Why are you ignoring my patch?"
msgstr ""

#: ../../faq/contributing.txt:13
# e9f4a52d244e4a40aee4d4d1bf22accd
msgid "Don't worry: We're not ignoring you!"
msgstr ""

#: ../../faq/contributing.txt:15
# c04ccb1c03ae44399093f075828e3d94
msgid "It's important to understand there is a difference between \"a ticket is being ignored\" and \"a ticket has not been attended to yet.\" Django's ticket system contains hundreds of open tickets, of various degrees of impact on end-user functionality, and Django's developers have to review and prioritize."
msgstr ""

#: ../../faq/contributing.txt:20
# e29b4fa73ac04923b229592cb437bfc4
msgid "On top of that: the people who work on Django are all volunteers. As a result, the amount of time that we have to work on the framework is limited and will vary from week to week depending on our spare time. If we're busy, we may not be able to spend as much time on Django as we might want."
msgstr ""

#: ../../faq/contributing.txt:25
# be4e1b8f8e8e497fb20deba3affaaf96
msgid "The best way to make sure tickets do not get hung up on the way to checkin is to make it dead easy, even for someone who may not be intimately familiar with that area of the code, to understand the problem and verify the fix:"
msgstr ""

#: ../../faq/contributing.txt:29
# 15442027f9a64191926cfaea68aa24f7
msgid "Are there clear instructions on how to reproduce the bug? If this touches a dependency (such as PIL), a contrib module, or a specific database, are those instructions clear enough even for someone not familiar with it?"
msgstr ""

#: ../../faq/contributing.txt:34
# 5e2078e539d94884bb5e65c8d4e521e4
msgid "If there are several patches attached to the ticket, is it clear what each one does, which ones can be ignored and which matter?"
msgstr ""

#: ../../faq/contributing.txt:37
# 76cbf8cfe084458689420b04f507e165
msgid "Does the patch include a unit test? If not, is there a very clear explanation why not? A test expresses succinctly what the problem is, and shows that the patch actually fixes it."
msgstr ""

#: ../../faq/contributing.txt:41
# 8c3848813a154c7e8cf962384de0ab04
msgid "If your patch stands no chance of inclusion in Django, we won't ignore it -- we'll just close the ticket. So if your ticket is still open, it doesn't mean we're ignoring you; it just means we haven't had time to look at it yet."
msgstr ""

#: ../../faq/contributing.txt:46
# fadc09a1bbf641aeac28dc126b0af624
msgid "When and how might I remind the core team of a patch I care about?"
msgstr ""

#: ../../faq/contributing.txt:48
# cb9ce91aee3d4cddb5648a35c5e72409
msgid "A polite, well-timed message to the mailing list is one way to get attention. To determine the right time, you need to keep an eye on the schedule. If you post your message when the core developers are trying to hit a feature deadline or manage a planning phase, you're not going to get the sort of attention you require. However, if you draw attention to a ticket when the core developers are paying particular attention to bugs -- just before a bug fixing sprint, or in the lead up to a beta release for example -- you're much more likely to get a productive response."
msgstr ""

#: ../../faq/contributing.txt:57
# 39180fbe33834a74bec6784a8a6b6ee8
msgid "Gentle IRC reminders can also work -- again, strategically timed if possible. During a bug sprint would be a very good time, for example."
msgstr ""

#: ../../faq/contributing.txt:60
# dc439c255f324ba18911c6fcf9c6d7f7
msgid "Another way to get traction is to pull several related tickets together. When the core developers sit down to fix a bug in an area they haven't touched for a while, it can take a few minutes to remember all the fine details of how that area of code works. If you collect several minor bug fixes together into a similarly themed group, you make an attractive target, as the cost of coming up to speed on an area of code can be spread over multiple tickets."
msgstr ""

#: ../../faq/contributing.txt:67
# e00a5b10905843c7826b6e0c0a577ee8
msgid "Please refrain from emailing core developers personally, or repeatedly raising the same issue over and over. This sort of behavior will not gain you any additional attention -- certainly not the attention that you need in order to get your pet bug addressed."
msgstr ""

#: ../../faq/contributing.txt:73
# 8c6b0fd550eb49ab81f2d00f05d0214a
msgid "But I've reminded you several times and you keep ignoring my patch!"
msgstr ""

#: ../../faq/contributing.txt:75
# 9bff412c02574d53ab11a01f57333b3d
msgid "Seriously - we're not ignoring you. If your patch stands no chance of inclusion in Django, we'll close the ticket. For all the other tickets, we need to prioritize our efforts, which means that some tickets will be addressed before others."
msgstr ""

#: ../../faq/contributing.txt:80
# 1689f886f03a44f7ae6bd8a1066da045
msgid "One of the criteria that is used to prioritize bug fixes is the number of people that will likely be affected by a given bug. Bugs that have the potential to affect many people will generally get priority over those that are edge cases."
msgstr ""

#: ../../faq/contributing.txt:85
# 18fbffb506c24d8dbd9002a232bf6b7e
msgid "Another reason that bugs might be ignored for while is if the bug is a symptom of a larger problem. While we can spend time writing, testing and applying lots of little patches, sometimes the right solution is to rebuild. If a rebuild or refactor of a particular component has been proposed or is underway, you may find that bugs affecting that component will not get as much attention. Again, this is just a matter of prioritizing scarce resources. By concentrating on the rebuild, we can close all the little bugs at once, and hopefully prevent other little bugs from appearing in the future."
msgstr ""

#: ../../faq/contributing.txt:94
# 0de53947b40842bbaf3a3f54fc0f744f
msgid "Whatever the reason, please keep in mind that while you may hit a particular bug regularly, it doesn't necessarily follow that every single Django user will hit the same bug. Different users use Django in different ways, stressing different parts of the code under different conditions. When we evaluate the relative priorities, we are generally trying to consider the needs of the entire community, not just the severity for one particular user. This doesn't mean that we think your problem is unimportant -- just that in the limited time we have available, we will always err on the side of making 10 people happy rather than making 1 person happy."
msgstr ""

#: ../../faq/general.txt:2
# b7e1f7e37f9f4c438e76e601587c4ed6
msgid "FAQ: General"
msgstr ""

#: ../../faq/general.txt:5
# 04d9df17056743978eed611ff25afbfa
msgid "Why does this project exist?"
msgstr ""

#: ../../faq/general.txt:7
# 253d32bc36484428b5c13e6859480960
msgid "Django grew from a very practical need: World Online, a newspaper Web operation, is responsible for building intensive Web applications on journalism deadlines. In the fast-paced newsroom, World Online often has only a matter of hours to take a complicated Web application from concept to public launch."
msgstr ""

#: ../../faq/general.txt:12
# 22b69a6cfc1e43909f1cbb7f20bceaf8
msgid "At the same time, the World Online Web developers have consistently been perfectionists when it comes to following best practices of Web development."
msgstr ""

#: ../../faq/general.txt:15
# 821b951ff02f489aa3f88cad732aa131
msgid "In fall 2003, the World Online developers (Adrian Holovaty and Simon Willison) ditched PHP and began using Python to develop its Web sites. As they built intensive, richly interactive sites such as Lawrence.com, they began to extract a generic Web development framework that let them build Web applications more and more quickly. They tweaked this framework constantly, adding improvements over two years."
msgstr ""

#: ../../faq/general.txt:22
# e6f70edf67cc450faa78eb308d51953a
msgid "In summer 2005, World Online decided to open-source the resulting software, Django. Django would not be possible without a whole host of open-source projects -- `Apache`_, `Python`_, and `PostgreSQL`_ to name a few -- and we're thrilled to be able to give something back to the open-source community."
msgstr ""

#: ../../faq/general.txt:32
# ac00678c2d4d4e629bc823ccb5a83db1
msgid "What does \"Django\" mean, and how do you pronounce it?"
msgstr ""

#: ../../faq/general.txt:34
# 1254c86ceca84bdcabc65fcedeec853d
msgid "Django is named after `Django Reinhardt`_, a gypsy jazz guitarist from the 1930s to early 1950s. To this day, he's considered one of the best guitarists of all time."
msgstr ""

#: ../../faq/general.txt:37
# 262d623ea42e49ecadfec2187c9505a8
msgid "Listen to his music. You'll like it."
msgstr ""

#: ../../faq/general.txt:39
# 87e8e2c516dd46eea32be0d00f6fafd1
msgid "Django is pronounced **JANG**-oh. Rhymes with FANG-oh. The \"D\" is silent."
msgstr ""

#: ../../faq/general.txt:41
# 042720d72e6b494cbb1ffa1c0cda4f0b
msgid "We've also recorded an `audio clip of the pronunciation`_."
msgstr ""

#: ../../faq/general.txt:47
# 289fa18b7e7e4a81b6070afd4500bb0b
msgid "Is Django stable?"
msgstr ""

#: ../../faq/general.txt:49
# 2d5d1a7c5fe247fb9f9d4ae45ebff853
msgid "Yes. World Online has been using Django for more than three years. Sites built on Django have weathered traffic spikes of over one million hits an hour and a number of Slashdottings. Yes, it's quite stable."
msgstr ""

#: ../../faq/general.txt:54
# 86490bbeb96243edb58a9faef62264d9
msgid "Does Django scale?"
msgstr ""

#: ../../faq/general.txt:56
# eb3cb690ff1743d88cd9cd162e3501bf
msgid "Yes. Compared to development time, hardware is cheap, and so Django is designed to take advantage of as much hardware as you can throw at it."
msgstr ""

#: ../../faq/general.txt:59
# 3f3082e869934c6ba58a0292c67505da
msgid "Django uses a \"shared-nothing\" architecture, which means you can add hardware at any level -- database servers, caching servers or Web/application servers."
msgstr ""

#: ../../faq/general.txt:62
# 778f4dc00ea644ebb36c0d43eeab4aea
msgid "The framework cleanly separates components such as its database layer and application layer. And it ships with a simple-yet-powerful :doc:`cache framework </topics/cache>`."
msgstr ""

#: ../../faq/general.txt:67
# 9818ffac4ae04fce948fabc00b17cf53
msgid "Who's behind this?"
msgstr ""

#: ../../faq/general.txt:69
# 4348f245d35145b28ab71bc1ffb394c4
msgid "Django was originally developed at World Online, the Web department of a newspaper in Lawrence, Kansas, USA. Django's now run by an international team of volunteers; you can read all about them over at the :doc:`list of committers </internals/committers>`"
msgstr ""

#: ../../faq/general.txt:75
# 500659e1d30b45b0ac37691e8d99bfd5
msgid "Which sites use Django?"
msgstr ""

#: ../../faq/general.txt:77
# a8720c51c8bf477084bd813bc38e4dbf
msgid "`DjangoSites.org`_ features a constantly growing list of Django-powered sites."
msgstr ""

#: ../../faq/general.txt:84
# 461dafb53f724235a85f80929ed49156
msgid "Django appears to be a MVC framework, but you call the Controller the \"view\", and the View the \"template\". How come you don't use the standard names?"
msgstr ""

#: ../../faq/general.txt:86
# ee6ac658a50945c094287d281bb9cec1
msgid "Well, the standard names are debatable."
msgstr ""

#: ../../faq/general.txt:88
# 2b8eee3acb9d4ad6a686f4a1dc9fd385
msgid "In our interpretation of MVC, the \"view\" describes the data that gets presented to the user. It's not necessarily *how* the data *looks*, but *which* data is presented. The view describes *which data you see*, not *how you see it.* It's a subtle distinction."
msgstr ""

#: ../../faq/general.txt:93
# 81caf7be95af4af5b8fc93349ca5b633
msgid "So, in our case, a \"view\" is the Python callback function for a particular URL, because that callback function describes which data is presented."
msgstr ""

#: ../../faq/general.txt:96
# 2b07890547974a19896ab879c7e149de
msgid "Furthermore, it's sensible to separate content from presentation -- which is where templates come in. In Django, a \"view\" describes which data is presented, but a view normally delegates to a template, which describes *how* the data is presented."
msgstr ""

#: ../../faq/general.txt:101
# 8336ef03f90243b8877f63e392b8215a
msgid "Where does the \"controller\" fit in, then? In Django's case, it's probably the framework itself: the machinery that sends a request to the appropriate view, according to the Django URL configuration."
msgstr ""

#: ../../faq/general.txt:105
# ad436c2f61d04c57904b77fc655a460c
msgid "If you're hungry for acronyms, you might say that Django is a \"MTV\" framework -- that is, \"model\", \"template\", and \"view.\" That breakdown makes much more sense."
msgstr ""

#: ../../faq/general.txt:109
# 9b4235ef22cb424da0240e097da279fc
msgid "At the end of the day, of course, it comes down to getting stuff done. And, regardless of how things are named, Django gets stuff done in a way that's most logical to us."
msgstr ""

#: ../../faq/general.txt:114
# ace46ece0a0743ffbee9da1cdc555c6b
msgid "<Framework X> does <feature Y> -- why doesn't Django?"
msgstr ""

#: ../../faq/general.txt:116
# 16c2cb500b5a474ca28fc7f7ddc20686
msgid "We're well aware that there are other awesome Web frameworks out there, and we're not averse to borrowing ideas where appropriate. However, Django was developed precisely because we were unhappy with the status quo, so please be aware that \"because <Framework X> does it\" is not going to be sufficient reason to add a given feature to Django."
msgstr ""

#: ../../faq/general.txt:123
# db9f65cf85d7488c8990e8e95e8bf3ef
msgid "Why did you write all of Django from scratch, instead of using other Python libraries?"
msgstr ""

#: ../../faq/general.txt:125
# 2e75e009fdb74a11929bae2571d20ddf
msgid "When Django was originally written a couple of years ago, Adrian and Simon spent quite a bit of time exploring the various Python Web frameworks available."
msgstr ""

#: ../../faq/general.txt:129
# 09131173b58040589b201f9e9f2571ed
msgid "In our opinion, none of them were completely up to snuff."
msgstr ""

#: ../../faq/general.txt:131
# e7b080915e444221b505261f1d238586
msgid "We're picky. You might even call us perfectionists. (With deadlines.)"
msgstr ""

#: ../../faq/general.txt:133
# bc3825f255b04e03ba46362816ebc2e9
msgid "Over time, we stumbled across open-source libraries that did things we'd already implemented. It was reassuring to see other people solving similar problems in similar ways, but it was too late to integrate outside code: We'd already written, tested and implemented our own framework bits in several production settings -- and our own code met our needs delightfully."
msgstr ""

#: ../../faq/general.txt:139
# 92a16faa848a4933a34cd428c79dccd2
msgid "In most cases, however, we found that existing frameworks/tools inevitably had some sort of fundamental, fatal flaw that made us squeamish. No tool fit our philosophies 100%."
msgstr ""

#: ../../faq/general.txt:143
# 6cb3f41591f14aac82b1a8693a83f6fd
msgid "Like we said: We're picky."
msgstr ""

#: ../../faq/general.txt:145
# 0fc7868f49904c4bbe981400e8f8fd89
msgid "We've documented our philosophies on the :doc:`design philosophies page </misc/design-philosophies>`."
msgstr ""

#: ../../faq/general.txt:149
# 817f5c41ca5e4286b7d25fdce32d9a1a
msgid "Is Django a content-management-system (CMS)?"
msgstr ""

#: ../../faq/general.txt:151
# 957c88544319433489553c315809576f
msgid "No, Django is not a CMS, or any sort of \"turnkey product\" in and of itself. It's a Web framework; it's a programming tool that lets you build Web sites."
msgstr ""

#: ../../faq/general.txt:154
# fc2be91aafff4ec7937abb56d4ea468d
msgid "For example, it doesn't make much sense to compare Django to something like Drupal_, because Django is something you use to *create* things like Drupal."
msgstr ""

#: ../../faq/general.txt:157
# 96e3b5d48d9343ceaa2ac3fec06ced8a
msgid "Of course, Django's automatic admin site is fantastic and timesaving -- but the admin site is one module of Django the framework. Furthermore, although Django has special conveniences for building \"CMS-y\" apps, that doesn't mean it's not just as appropriate for building \"non-CMS-y\" apps (whatever that means!)."
msgstr ""

#: ../../faq/general.txt:166
# f252fb34e55f4e4fa6285859941fb97e
msgid "How can I download the Django documentation to read it offline?"
msgstr ""

#: ../../faq/general.txt:168
# 5658514b7f5b4933b6dad8cc0ab9d04b
msgid "The Django docs are available in the ``docs`` directory of each Django tarball release. These docs are in reST (reStructuredText) format, and each text file corresponds to a Web page on the official Django site."
msgstr ""

#: ../../faq/general.txt:172
# 87409d4a73864020b44b7ad5afaf8f5c
msgid "Because the documentation is `stored in revision control`_, you can browse documentation changes just like you can browse code changes."
msgstr ""

#: ../../faq/general.txt:175
# 5d62494c9bac4007a2680a70128ea967
msgid "Technically, the docs on Django's site are generated from the latest development versions of those reST documents, so the docs on the Django site may offer more information than the docs that come with the latest Django release."
msgstr ""

#: ../../faq/general.txt:182
# aaf17601a66342b68f6df9b78c1c14c0
msgid "Where can I find Django developers for hire?"
msgstr ""

#: ../../faq/general.txt:184
# 593d87d3412148a494ca662fec9e41e5
msgid "Consult our `developers for hire page`_ for a list of Django developers who would be happy to help you."
msgstr ""

#: ../../faq/general.txt:187
# 90a9a3e10c6c4400aeb38f30664d3226
msgid "You might also be interested in posting a job to http://djangogigs.com/ . If you want to find Django-capable people in your local area, try http://djangopeople.net/ ."
msgstr ""

#: ../../faq/help.txt:2
# eb4078ff7f9b4b7393cc01eee6c07774
msgid "FAQ: Getting Help"
msgstr ""

#: ../../faq/help.txt:5
# 5c6192fb513049ad87aa5884224078d5
msgid "How do I do X? Why doesn't Y work? Where can I go to get help?"
msgstr ""

#: ../../faq/help.txt:7
# 58966988cf5a4df6b7178f9bfb164661
msgid "If this FAQ doesn't contain an answer to your question, you might want to try the `django-users mailing list`_. Feel free to ask any question related to installing, using, or debugging Django."
msgstr ""

#: ../../faq/help.txt:11
# 0ccec7d1c21b4dbdba49112c61c5a2b8
msgid "If you prefer IRC, the `#django IRC channel`_ on the Freenode IRC network is an active community of helpful individuals who may be able to solve your problem."
msgstr ""

#: ../../faq/help.txt:18
# 89892e782a5442019ac14b48eb16a717
msgid "Why hasn't my message appeared on django-users?"
msgstr ""

#: ../../faq/help.txt:20
# 4ecb1aa52d54411ead0564584483cdcf
msgid "django-users_ has a lot of subscribers. This is good for the community, as it means many people are available to contribute answers to questions. Unfortunately, it also means that django-users_ is an attractive target for spammers."
msgstr ""

#: ../../faq/help.txt:25
# fa151ae7346d4fe1b074276698209a92
msgid "In order to combat the spam problem, when you join the django-users_ mailing list, we manually moderate the first message you send to the list. This means that spammers get caught, but it also means that your first question to the list might take a little longer to get answered. We apologize for any inconvenience that this policy may cause."
msgstr ""

#: ../../faq/help.txt:34
# 8981eff61316471394dfb84a36a3990b
msgid "Nobody on django-users answered my question! What should I do?"
msgstr ""

#: ../../faq/help.txt:36
# 3683217720134dad900db22e747a5079
msgid "Try making your question more specific, or provide a better example of your problem."
msgstr ""

#: ../../faq/help.txt:39
# 03ddabe6c4db470ba07093ba52b7797a
msgid "As with most open-source mailing lists, the folks on django-users_ are volunteers. If nobody has answered your question, it may be because nobody knows the answer, it may be because nobody can understand the question, or it may be that everybody that can help is busy. One thing you might try is to ask the question on IRC -- visit the `#django IRC channel`_ on the Freenode IRC network."
msgstr ""

#: ../../faq/help.txt:46
# 6cb60971f7d349faa96ba7ed97621c0e
msgid "You might notice we have a second mailing list, called django-developers_ -- but please don't email support questions to this mailing list. This list is for discussion of the development of Django itself. Asking a tech support question there is considered quite impolite."
msgstr ""

#: ../../faq/help.txt:54
# a8f00921e9fa41fcba4e483667ceac6d
msgid "I think I've found a bug! What should I do?"
msgstr ""

#: ../../faq/help.txt:56
# a7b76ea4cd8344668574eee0a8f29107
msgid "Detailed instructions on how to handle a potential bug can be found in our :ref:`Guide to contributing to Django <reporting-bugs>`."
msgstr ""

#: ../../faq/help.txt:60
# 891f7219a3084db1811e9f19b92f0620
msgid "I think I've found a security problem! What should I do?"
msgstr ""

#: ../../faq/help.txt:62
# f5e52ad6a6284fb6b3ba12ead1c4b358
msgid "If you think you've found a security problem with Django, please send a message to security@djangoproject.com. This is a private list only open to long-time, highly trusted Django developers, and its archives are not publicly readable."
msgstr ""

#: ../../faq/help.txt:66
# 801a2f93a396484ea3564655e4a7f6ea
msgid "Due to the sensitive nature of security issues, we ask that if you think you have found a security problem, *please* don't send a message to one of the public mailing lists. Django has a :ref:`policy for handling security issues <reporting-security-issues>`; while a defect is outstanding, we would like to minimize any damage that could be inflicted through public knowledge of that defect."
msgstr ""

#: ../../faq/index.txt:3
# f4560e4b4d564f45900dcd926f362e08
msgid "Django FAQ"
msgstr ""

#: ../../faq/install.txt:2
# f1984c6b1a014069a59a7750e9e7149f
msgid "FAQ: Installation"
msgstr ""

#: ../../faq/install.txt:5
# 9966ddeaa5ea4ec79d17d0d7698a6e72
msgid "How do I get started?"
msgstr ""

#: ../../faq/install.txt:7
# 2797b343ab764a469e74bd079ea51bb1
msgid "`Download the code`_."
msgstr ""

#: ../../faq/install.txt:8
# c3bb16f109e24d68bb5946d2b0b40c6c
msgid "Install Django (read the :doc:`installation guide </intro/install>`)."
msgstr ""

#: ../../faq/install.txt:9
# e1d401a9cfe6425486e764bb5ee0a4a3
msgid "Walk through the :doc:`tutorial </intro/tutorial01>`."
msgstr ""

#: ../../faq/install.txt:10
# 876a0cdc89924e7eaff2ff1d8700c9a3
msgid "Check out the rest of the :doc:`documentation </index>`, and `ask questions`_ if you run into trouble."
msgstr ""

#: ../../faq/install.txt:17
# e60f16a95c564a9c8e9c47b6cd378841
msgid "What are Django's prerequisites?"
msgstr ""

#: ../../faq/install.txt:19
# 56fc49d8e0e6430ab0d0c2f905b0f8aa
msgid "Django requires Python_, specifically any version of Python from 2.5 through 2.7. No other Python libraries are required for basic Django usage."
msgstr ""

#: ../../faq/install.txt:23
# dd3ec9a931364bfab3c61ac0d51a80cb
msgid "For a development environment -- if you just want to experiment with Django -- you don't need to have a separate Web server installed; Django comes with its own lightweight development server. For a production environment, Django follows the WSGI spec, :pep:`3333`, which means it can run on a variety of server platforms. See :doc:`Deploying Django </howto/deployment/index>` for some popular alternatives. Also, the `server arrangements wiki page`_ contains details for several deployment strategies."
msgstr ""

#: ../../faq/install.txt:31
# 097ebd2c75374806a4f6b84e1bf6403c
msgid "If you want to use Django with a database, which is probably the case, you'll also need a database engine. PostgreSQL_ is recommended, because we're PostgreSQL fans, and MySQL_, `SQLite 3`_, and Oracle_ are also supported."
msgstr ""

#: ../../faq/install.txt:43
# f91ae62e781c44039c1dac9ffb1d64c4
msgid "Do I lose anything by using Python 2.5 versus newer Python versions, such as Python 2.6 or 2.7?"
msgstr ""

#: ../../faq/install.txt:45
# 06e44d39ba34414b822a5ec905f5950b
msgid "Not in the core framework. Currently, Django itself officially supports any version of Python from 2.5 through 2.7, inclusive. However, newer versions of Python are often faster, have more features, and are better supported. If you use a newer version of Python you will also have access to some APIs that aren't available under older versions of Python. For example, since Python 2.6, you can use the advanced string formatting described in :pep:`3101`."
msgstr ""

#: ../../faq/install.txt:52
# c4c7dcbcb4914f40847410a5d72cb8e7
msgid "Third-party applications for use with Django are, of course, free to set their own version requirements."
msgstr ""

#: ../../faq/install.txt:55
# c12ecc3d3acb4883bf58277b5688fc15
msgid "Over the next year or two Django will begin dropping support for older Python versions as part of a migration which will end with Django running on Python 3 (see below for details)."
msgstr ""

#: ../../faq/install.txt:59
# 4eb77fd8b13b4c26aeb286787d172f26
msgid "All else being equal, we recommend that you use the latest 2.x release (currently Python 2.7). This will let you take advantage of the numerous improvements and optimizations to the Python language since version 2.5, and will help ease the process of dropping support for older Python versions on the road to Python 3."
msgstr ""

#: ../../faq/install.txt:66
# 639f0db424f14a15b5eb27c86423ced6
msgid "What Python version can I use with Django?"
msgstr ""

#: ../../faq/install.txt:69
# d36ed3529e5a4551a5fd30b2a13e9f2b
msgid "Django version"
msgstr ""

#: ../../faq/install.txt:69
# 4a15ec6c22144442afc9176c6870b67e
msgid "Python versions"
msgstr ""

#: ../../faq/install.txt:71
# db57fa07a44f4e88af78149959333071
msgid "1.0"
msgstr ""

#: ../../faq/install.txt:71
#: ../../faq/install.txt:72
# a357061ee37547588dd2658e7df3099f
# 0b215cea21a345ccba5e9cdde4fffb32
msgid "2.3, 2.4, 2.5, 2.6"
msgstr ""

#: ../../faq/install.txt:72
# f01a39f096a144b2b7d00a519faedac9
msgid "1.1"
msgstr ""

#: ../../faq/install.txt:73
# 7afe347bba1247f3b13148e9c5113992
msgid "1.2"
msgstr ""

#: ../../faq/install.txt:73
#: ../../faq/install.txt:74
# e4db5e7e15b74784bc22dbbb3a8d7b4c
# a1d3f566dd514ad6ae8320b783b88eeb
msgid "2.4, 2.5, 2.6, 2.7"
msgstr ""

#: ../../faq/install.txt:74
# cdd5d075f146487ca9a9467cd9064705
msgid "1.3"
msgstr ""

#: ../../faq/install.txt:75
# 74c82fc67683496da7b0e6712d62089b
msgid "**1.4**"
msgstr ""

#: ../../faq/install.txt:75
# 5d7ac95f70de40cca55ef7a585c9c888
msgid "**2.5, 2.6, 2.7**"
msgstr ""

#: ../../faq/install.txt:76
# 0cd301b3c5b2481c93c720b9ce4b97c2
msgid "*1.5 (future)*"
msgstr ""

#: ../../faq/install.txt:76
# 6a75168bb6cc47cab32435be1d4259d1
msgid "*2.6, 2.7, 3.x (experimental)*"
msgstr ""

#: ../../faq/install.txt:80
# d35e9659506e4f1881868bf780c840a3
msgid "Can I use Django with Python 3?"
msgstr ""

#: ../../faq/install.txt:82
# 2372ef33851b42bc968f5a9b6711396a
msgid "Not at the moment. Python 3.0 introduced a number of backwards-incompatible changes to the Python language, and although these changes are generally a good thing for Python's future, it will be a while before most Python software catches up and is able to run on Python 3.0. For larger Python-based software like Django, the transition is expected to take at least a year or two (since it involves dropping support for older Python releases and so must be done gradually)."
msgstr ""

#: ../../faq/install.txt:91
# ffe4de0e4626471dabc7a039e29c00fd
msgid "In the meantime, Python 2.x releases will be supported and provided with bug fixes and security updates by the Python development team, so continuing to use a Python 2.x release during the transition should not present any risk."
msgstr ""

#: ../../faq/install.txt:97
# d3293302f76641fcb751e8b9f1f8cc69
msgid "Will Django run under shared hosting (like TextDrive or Dreamhost)?"
msgstr ""

#: ../../faq/install.txt:99
# 42d40b2d98c54c47ab65afa0d870a55c
msgid "See our `Django-friendly Web hosts`_ page."
msgstr ""

#: ../../faq/install.txt:104
# 1c9072d7e4ac4d36b4d73801bf3471f3
msgid "Should I use the stable version or development version?"
msgstr ""

#: ../../faq/install.txt:106
# 5dc88e07cfcf44deb7191d06f37d14c8
msgid "Generally, if you're using code in production, you should be using a stable release. The Django project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn't have any problems upgrading when the next official version is released."
msgstr ""

#: ../../faq/models.txt:2
# 801139dfb3384b73ab9e713474d63b29
msgid "FAQ: Databases and models"
msgstr ""

#: ../../faq/models.txt:7
# f771038b13f744e680b31f69803bfcaa
msgid "How can I see the raw SQL queries Django is running?"
msgstr ""

#: ../../faq/models.txt:9
# 89dac90ef5af47b2bb802fdc21191bea
msgid "Make sure your Django :setting:`DEBUG` setting is set to ``True``. Then, just do this::"
msgstr ""

#: ../../faq/models.txt:17
# 29c5746b7fb34bd3a813fca91d10e1b9
msgid "``connection.queries`` is only available if :setting:`DEBUG` is ``True``. It's a list of dictionaries in order of query execution. Each dictionary has the following::"
msgstr ""

#: ../../faq/models.txt:24
# 96b696ad8f6344bdb528651c06309743
msgid "``connection.queries`` includes all SQL statements -- INSERTs, UPDATES, SELECTs, etc. Each time your app hits the database, the query will be recorded. Note that the SQL recorded here may be :ref:`incorrectly quoted under SQLite <sqlite-connection-queries>`."
msgstr ""

#: ../../faq/models.txt:31
# 1d6e11f5079946a59e476c3e69a48f14
msgid "If you are using :doc:`multiple databases</topics/db/multi-db>`, you can use the same interface on each member of the ``connections`` dictionary::"
msgstr ""

#: ../../faq/models.txt:38
# d9d84b1ec2c94eb690b4862840d0eb5d
msgid "Can I use Django with a pre-existing database?"
msgstr ""

#: ../../faq/models.txt:40
# 2bef15faf9be440096fd4acc26b9dace
msgid "Yes. See :doc:`Integrating with a legacy database </howto/legacy-databases>`."
msgstr ""

#: ../../faq/models.txt:43
# 86433db9bcb543738fbc5dd498bcf3d6
msgid "If I make changes to a model, how do I update the database?"
msgstr ""

#: ../../faq/models.txt:45
# b54250a432ff47a1b52b72d0bbfe5f75
msgid "If you don't mind clearing data, your project's ``manage.py`` utility has an option to reset the SQL for a particular application::"
msgstr ""

#: ../../faq/models.txt:50
# 184f86a6edd4470489d794969d572a4c
msgid "This drops any tables associated with ``appname`` and recreates them."
msgstr ""

#: ../../faq/models.txt:52
# 5697e39d7d9e4c54b1c02cd63eca697a
msgid "If you do care about deleting data, you'll have to execute the ``ALTER TABLE`` statements manually in your database."
msgstr ""

#: ../../faq/models.txt:55
# 532165cbe1684e78943ca1f724838b54
msgid "There are `external projects which handle schema updates <http://djangopackages.com/grids/g/database-migration/>`_, of which the current defacto standard is `south <http://south.aeracode.org/>`_."
msgstr ""

#: ../../faq/models.txt:60
# 3bd4cba5e9f444b4aedf37ca1e85106b
msgid "Do Django models support multiple-column primary keys?"
msgstr ""

#: ../../faq/models.txt:62
# 8099129b6eb0416b930cb08b6542dc87
msgid "No. Only single-column primary keys are supported."
msgstr ""

#: ../../faq/models.txt:64
# ce9272eb6c2343aa90675fe57e0ccf01
msgid "But this isn't an issue in practice, because there's nothing stopping you from adding other constraints (using the ``unique_together`` model option or creating the constraint directly in your database), and enforcing the uniqueness at that level. Single-column primary keys are needed for things such as the admin interface to work; e.g., you need a simple way of being able to specify an object to edit or delete."
msgstr ""

#: ../../faq/models.txt:72
# 2a5c99ad0ae94bc2a37ce749cca721a9
msgid "How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type?"
msgstr ""

#: ../../faq/models.txt:74
# b5d2d5351e894fd7811a82041812778f
msgid "We try to avoid adding special cases in the Django code to accommodate all the database-specific options such as table type, etc. If you'd like to use any of these options, create an :ref:`SQL initial data file <initial-sql>` that contains ``ALTER TABLE`` statements that do what you want to do. The initial data files are executed in your database after the ``CREATE TABLE`` statements."
msgstr ""

#: ../../faq/models.txt:80
# 15cf68a1d90946ec921fdfc2d5e20942
msgid "For example, if you're using MySQL and want your tables to use the MyISAM table type, create an initial data file and put something like this in it::"
msgstr ""

#: ../../faq/models.txt:85
# 2b52953e96944d73a2393f7bb8e664ce
msgid "As explained in the :ref:`SQL initial data file <initial-sql>` documentation, this SQL file can contain arbitrary SQL, so you can make any sorts of changes you need to make."
msgstr ""

#: ../../faq/models.txt:90
# 4647b55940f44e9880b3262f0cf60fe3
msgid "Why is Django leaking memory?"
msgstr ""

#: ../../faq/models.txt:92
# 744a0e236fb34ec79c5ce85f0c6a5e97
msgid "Django isn't known to leak memory. If you find your Django processes are allocating more and more memory, with no sign of releasing it, check to make sure your :setting:`DEBUG` setting is set to ``False``. If :setting:`DEBUG` is ``True``, then Django saves a copy of every SQL statement it has executed."
msgstr ""

#: ../../faq/models.txt:97
# d9f7ebf554754f74893cd8018f327266
msgid "(The queries are saved in ``django.db.connection.queries``. See `How can I see the raw SQL queries Django is running?`_.)"
msgstr ""

#: ../../faq/models.txt:100
# d1fbf15db4be4c8eb196aca21c88f7e0
msgid "To fix the problem, set :setting:`DEBUG` to ``False``."
msgstr ""

#: ../../faq/models.txt:102
# d4a11adf75f4476097572f1caca2069d
msgid "If you need to clear the query list manually at any point in your functions, just call ``reset_queries()``, like this::"
msgstr ""

#: ../../faq/usage.txt:2
# 516dc662d4a54bcc88b98cc352e88613
msgid "FAQ: Using Django"
msgstr ""

#: ../../faq/usage.txt:5
# d897ae5d71524e17b2b3e216d0c224a4
msgid "Why do I get an error about importing DJANGO_SETTINGS_MODULE?"
msgstr ""

#: ../../faq/usage.txt:7
# a19a815974724ee6ac579d669c0af3f1
msgid "Make sure that:"
msgstr ""

#: ../../faq/usage.txt:9
# 72522c9f75ca4701a05eeedeecce96d4
msgid "The environment variable DJANGO_SETTINGS_MODULE is set to a fully-qualified Python module (i.e. \"mysite.settings\")."
msgstr ""

#: ../../faq/usage.txt:12
# 8916d232fa3041a4b1dcedfda5c3a498
msgid "Said module is on ``sys.path`` (``import mysite.settings`` should work)."
msgstr ""

#: ../../faq/usage.txt:14
# 957a0f93372d4fda821bbf7a36fca8fa
msgid "The module doesn't contain syntax errors (of course)."
msgstr ""

#: ../../faq/usage.txt:16
# d29f53db676047bea3f415b5f8216a37
msgid "If you're using mod_python but *not* using Django's request handler, you'll need to work around a mod_python bug related to the use of ``SetEnv``; before you import anything from Django you'll need to do the following::"
msgstr ""

#: ../../faq/usage.txt:23
# 26f3ee17cb7d438285599ee7c284035a
msgid "(where ``req`` is the mod_python request object)."
msgstr ""

#: ../../faq/usage.txt:26
# c9da789a5b874d678dc277fd5314f6d0
msgid "I can't stand your template language. Do I have to use it?"
msgstr ""

#: ../../faq/usage.txt:28
# 3af3662356bb4682a31bd4edfd279ca8
msgid "We happen to think our template engine is the best thing since chunky bacon, but we recognize that choosing a template language runs close to religion. There's nothing about Django that requires using the template language, so if you're attached to ZPT, Cheetah, or whatever, feel free to use those."
msgstr ""

#: ../../faq/usage.txt:34
# f7205156f0df4032b44d418e4f9985bd
msgid "Do I have to use your model/database layer?"
msgstr ""

#: ../../faq/usage.txt:36
# cac16dad770b4606adbcdbed4de870a1
msgid "Nope. Just like the template system, the model/database layer is decoupled from the rest of the framework."
msgstr ""

#: ../../faq/usage.txt:39
# e5a769feaab146d6b6b308045e0f5815
msgid "The one exception is: If you use a different database library, you won't get to use Django's automatically-generated admin site. That app is coupled to the Django database layer."
msgstr ""

#: ../../faq/usage.txt:44
# 256c2875288c479ab3e2366a56043c3b
msgid "How do I use image and file fields?"
msgstr ""

#: ../../faq/usage.txt:46
# 2d3e056ca06c400ebc990b5962d89d2c
msgid "Using a :class:`~django.db.models.FileField` or an :class:`~django.db.models.ImageField` in a model takes a few steps:"
msgstr ""

#: ../../faq/usage.txt:49
# 95aeb79d8ff04c2a84f754b9d9a6d54b
msgid "In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the full path to a directory where you'd like Django to store uploaded files. (For performance, these files are not stored in the database.) Define :setting:`MEDIA_URL` as the base public URL of that directory. Make sure that this directory is writable by the Web server's user account."
msgstr ""

#: ../../faq/usage.txt:56
# 64c52bd07f2f430c8903998716e18577
msgid "Add the :class:`~django.db.models.FileField` or :class:`~django.db.models.ImageField` to your model, making sure to define the :attr:`~django.db.models.FileField.upload_to` option to tell Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload files."
msgstr ""

#: ../../faq/usage.txt:62
# fe3984686b4e4e7e8331cca4593b12bf
msgid "All that will be stored in your database is a path to the file (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:`~django.core.files.File.url` attribute provided by Django. For example, if your :class:`~django.db.models.ImageField` is called ``mug_shot``, you can get the absolute path to your image in a template with ``{{ object.mug_shot.url }}``."
msgstr ""

#: ../../faq/usage.txt:70
# 93c8b63dc0c14226811229646cee5b1a
msgid "How do I make a variable available to all my templates?"
msgstr ""

#: ../../faq/usage.txt:72
# c4f46f0217024ce886ca44800ed365b5
msgid "Sometimes your templates just all need the same thing. A common example would be dynamically-generated menus. At first glance, it seems logical to simply add a common dictionary to the template context."
msgstr ""

#: ../../faq/usage.txt:76
# b97b1b41d7104f20b0a28d58a169266e
msgid "The correct solution is to use a ``RequestContext``. Details on how to do this are here: :ref:`subclassing-context-requestcontext`."
msgstr ""

