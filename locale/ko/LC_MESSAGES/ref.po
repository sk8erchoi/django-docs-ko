# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-29 22:44\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/authbackends.txt:3
# 33e4f7d9e90f4136bf8abea8d6fb8951
msgid "Authentication backends"
msgstr ""

#: ../../ref/authbackends.txt:8
# b1a822619d8f464cb64850eecd651243
msgid "This document details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the :ref:`Other authentication sources section <authentication-backends>` of the :doc:`User authentication guide </topics/auth>`."
msgstr ""

#: ../../ref/authbackends.txt:16
# e7783fdc625c4932a833ff53f76c7347
msgid "Available authentication backends"
msgstr ""

#: ../../ref/authbackends.txt:18
# ebf7cb4fb6bb41f4bb7e98258272863b
msgid "The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""

#: ../../ref/authbackends.txt:22
# 927d916bc4634b6689e79318dbc111e6
msgid "This is the default authentication backend used by Django.  It authenticates using usernames and passwords stored in the :class:`~django.contrib.auth.models.User` model."
msgstr ""

#: ../../ref/authbackends.txt:29
# bae8361ca67046a2975fcd5ce101b0fe
msgid "Use this backend to take advantage of external-to-Django-handled authentication.  It authenticates using usernames passed in :attr:`request.META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""

#: ../../ref/class-based-views.txt:3
# a23bcca32c5148a0b931effc88b8041f
msgid "Class-based generic views"
msgstr ""

#: ../../ref/class-based-views.txt:8
# 75b026aa55cf4da989b5eea2ca38232e
msgid "Prior to Django 1.3, generic views were implemented as functions. The function-based implementation has been deprecated in favor of the class-based approach described here."
msgstr ""

#: ../../ref/class-based-views.txt:12
# 857de9b8142243c5a7688b6018243cf4
msgid "For details on the previous generic views implementation, see the :doc:`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/generic-views>`."
msgstr ""

#: ../../ref/class-based-views.txt:16
# 10f9b05f56de43418a0fdee2ac7898a6
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but Web developers also experience this boredom at the view level."
msgstr ""

#: ../../ref/class-based-views.txt:21
# d82dc9a52d8843ddaf3832be63437a5c
msgid "A general introduction to class-based generic views can be found in the :doc:`topic guide </topics/class-based-views>`."
msgstr ""

#: ../../ref/class-based-views.txt:24
# e7b6e60e8e8646b083e707afa987bd61
msgid "This reference contains details of Django's built-in generic views, along with a list of the keyword arguments that each generic view expects. Remember that arguments may either come from the URL pattern or from the ``extra_context`` additional-information dictionary."
msgstr ""

#: ../../ref/class-based-views.txt:29
#: ../../ref/generic-views.txt:28
# 86bc7461acdb422b8fb6a779ddda3e17
# c6c9ce6b6348400fb722679b406ff62a
msgid "Most generic views require the ``queryset`` key, which is a ``QuerySet`` instance; see :doc:`/topics/db/queries` for more information about ``QuerySet`` objects."
msgstr ""

#: ../../ref/class-based-views.txt:34
# ba9a7c4785b743a7836799b8646a81b9
msgid "Mixins"
msgstr ""

#: ../../ref/class-based-views.txt:36
# 881b73f69cf94a3db6b3d9fc5704299d
msgid "A mixin class is a way of using the inheritance capabilities of classes to compose a class out of smaller pieces of behavior. Django's class-based generic views are constructed by composing mixins into usable generic views."
msgstr ""

#: ../../ref/class-based-views.txt:41
# f3152e0fd7634b74b9447b1d68e9bb30
msgid "For example, the :class:`~django.views.generic.base.detail.DetailView` is composed from:"
msgstr ""

#: ../../ref/class-based-views.txt:44
# 0832ec4e39de484fb18e4960b67dfc18
msgid ":class:`~django.db.views.generic.base.View`, which provides the basic class-based behavior"
msgstr ""

#: ../../ref/class-based-views.txt:46
# 8539e3cabaa7481c96068a3b1caec943
msgid ":class:`~django.db.views.generic.detail.SingleObjectMixin`, which provides the utilities for retrieving and displaying a single object"
msgstr ""

#: ../../ref/class-based-views.txt:48
# c7a05b7998094e108265cf1ffa6a583f
msgid ":class:`~django.db.views.generic.detail.SingleObjectTemplateResponseMixin`, which provides the tools for rendering a single object into a template-based response."
msgstr ""

#: ../../ref/class-based-views.txt:52
# b7519650b5cc47e6880da4ca2d6a3947
msgid "When combined, these mixins provide all the pieces necessary to provide a view over a single object that renders a template to produce a response."
msgstr ""

#: ../../ref/class-based-views.txt:56
# 035bdf045c34428187f2a30fefea53e3
msgid "Django provides a range of mixins. If you want to write your own generic views, you can build classes that compose these mixins in interesting ways. Alternatively, you can just use the pre-mixed `Generic views`_ that Django provides."
msgstr ""

#: ../../ref/class-based-views.txt:63
# bdb7a04aca044c54896a61b93b2ce626
msgid "When the documentation for a view gives the list of mixins, that view inherits all the properties and methods of that mixin."
msgstr ""

#: ../../ref/class-based-views.txt:67
# 9b078c4eef81479694cfc89e59e25cd9
msgid "Simple mixins"
msgstr ""

#: ../../ref/class-based-views.txt:72
# f72026714d3f4448abe3b3f278f83e48
msgid "TemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views.txt:77
# cbf1ae97527646219049f724f7da36b3
msgid "The path to the template to use when rendering the view."
msgstr ""

#: ../../ref/class-based-views.txt:81
# 041101010acc43268fd9641cb2cd7ee3
msgid "The response class to be returned by ``render_to_response`` method. Default is :class:`TemplateResponse <django.template.response.TemplateResponse>`. The template and context of ``TemplateResponse`` instances can be altered later (e.g. in :ref:`template response middleware <template-response-middleware>`)."
msgstr ""

#: ../../ref/class-based-views.txt:88
# 4ee0e8271872421c8552ba3c0aaa2d63
msgid "If you need custom template loading or custom context object instantiation, create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""

#: ../../ref/class-based-views.txt:94
# 0deb126e0dbc4f36acbff0b369a51172
msgid "Returns a ``self.response_class`` instance."
msgstr ""

#: ../../ref/class-based-views.txt:96
# 8773c94d1f274565849014c2520d659f
msgid "If any keyword arguments are provided, they will be passed to the constructor of the response class."
msgstr ""

#: ../../ref/class-based-views.txt:99
# 73b87f9699ca4d9cb8647f5ea4119c45
msgid "Calls :meth:`~TemplateResponseMixin.get_template_names()` to obtain the list of template names that will be searched looking for an existent template."
msgstr ""

#: ../../ref/class-based-views.txt:105
# a139d82103b645dcb6486defdbe639aa
msgid "Returns a list of template names to search for when rendering the template."
msgstr ""

#: ../../ref/class-based-views.txt:108
# 17dab46a591e4942aecd2ab2242ab62a
msgid "If :attr:`TemplateResponseMixin.template_name` is specified, the default implementation will return a list containing :attr:`TemplateResponseMixin.template_name` (if it is specified)."
msgstr ""

#: ../../ref/class-based-views.txt:114
# c5fcb5a89b364802932a13ea779c81e6
msgid "Single object mixins"
msgstr ""

#: ../../ref/class-based-views.txt:119
# 0651f13ae5f5405b8f28a87b87682db2
msgid "SingleObjectMixin"
msgstr ""

#: ../../ref/class-based-views.txt:124
#: ../../ref/class-based-views.txt:287
# 217f9260ee534151bdd1127fc23f1d4a
# 09f1e936afd04f048529680e771536a9
msgid "The model that this view will display data for. Specifying ``model = Foo`` is effectively the same as specifying ``queryset = Foo.objects.all()``."
msgstr ""

#: ../../ref/class-based-views.txt:130
# b1b3ab4535964de9925bbe778450a3fb
msgid "A ``QuerySet`` that represents the objects. If provided, the value of :attr:`SingleObjectMixin.queryset` supersedes the value provided for :attr:`SingleObjectMixin.model`."
msgstr ""

#: ../../ref/class-based-views.txt:136
# e9495eb4b9894346bf98f10fe648357f
msgid "The name of the field on the model that contains the slug. By default, ``slug_field`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views.txt:143
# eba4eb199713464793b2fec349f6681d
msgid "The name of the URLConf keyword argument that contains the slug. By default, ``slug_url_kwarg`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views.txt:150
# 25e49847161243e3ba72fe833282e374
msgid "The name of the URLConf keyword argument that contains the primary key. By default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""

#: ../../ref/class-based-views.txt:155
#: ../../ref/class-based-views.txt:315
# c98ce300000645f7a424ebfc695a83e8
# aecbb29d22c64df8b4a8d9caa6f24892
msgid "Designates the name of the variable to use in the context."
msgstr ""

#: ../../ref/class-based-views.txt:159
# 5c57aaab48224605b6dcefe367bb52d0
msgid "Returns the single object that this view will display. If ``queryset`` is provided, that queryset will be used as the source of objects; otherwise, :meth:`~SingleObjectMixin.get_queryset` will be used. ``get_object()`` looks for a :attr:`SingleObjectMixin.pk_url_kwarg` argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a :attr:`SingleObjectMixin.slug_url_kwarg` argument, and performs a slug lookup using the :attr:`SingleObjectMixin.slug_field`."
msgstr ""

#: ../../ref/class-based-views.txt:173
# 923039ab8f8d4fdfa8a3417e219db3cb
msgid "Returns the queryset that will be used to retrieve the object that this view will display. By default, :meth:`~SingleObjectMixin.get_queryset` returns the value of the :attr:`~SingleObjectMixin.queryset` attribute if it is set, otherwise it constructs a :class:`QuerySet` by calling the `all()` method on the :attr:`~SingleObjectMixin.model` attribute's default manager."
msgstr ""

#: ../../ref/class-based-views.txt:182
# 8203fcdfe6a94e3e97165362e34cdf1a
msgid "Return the context variable name that will be used to contain the data that this view is manipulating. If :attr:`~SingleObjectMixin.context_object_name` is not set, the context name will be constructed from the ``object_name`` of the model that the queryset is composed from. For example, the model ``Article`` would have context object named ``'article'``."
msgstr ""

#: ../../ref/class-based-views.txt:191
#: ../../ref/class-based-views.txt:362
# 2d67050164f7491784baad3e23bfce79
# a9d6d6e2fc5b4e82878b9334c8b992fc
msgid "Returns context data for displaying the list of objects."
msgstr ""

#: ../../ref/class-based-views.txt:193
#: ../../ref/class-based-views.txt:364
#: ../../ref/class-based-views.txt:477
#: ../../ref/class-based-views.txt:907
#: ../../ref/class-based-views.txt:1155
#: ../../ref/class-based-views.txt:1194
#: ../../ref/class-based-views.txt:1240
#: ../../ref/class-based-views.txt:1276
# b11fefff503a44c49379ca9e0c4b324a
# c05cdaf6d7194cf898c3dbe5de67100d
# 2399841478904c108f46b493349830d7
# 3b504afeec7744cb92acb55453e5623e
# 110a684d5b3b451a8a47babe2764ca60
# 5c27947981794a9593b5c94a2de808c0
# 706269d317a24350b5cda2e733e150a6
# 4afbc015e329497ba8dbb28fa7b7c732
msgid "**Context**"
msgstr ""

#: ../../ref/class-based-views.txt:195
# fc609ef9e0b9441aad49c3d788cb5179
msgid "``object``: The object that this view is displaying. If ``context_object_name`` is specified, that variable will also be set in the context, with the same value as ``object``."
msgstr ""

#: ../../ref/class-based-views.txt:200
# de7d6d74fd8948a488aa6a02ce75eb24
msgid "SingleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views.txt:204
# 2b026271c15049e7b1a82f4f28227d3b
msgid "A mixin class that performs template-based response rendering for views that operate upon a single object instance. Requires that the view it is mixed with provides ``self.object``, the object instance that the view is operating on. ``self.object`` will usually be, but is not required to be, an instance of a Django model. It may be ``None`` if the view is in the process of constructing a new instance."
msgstr ""

#: ../../ref/class-based-views.txt:211
#: ../../ref/class-based-views.txt:393
# 7c592092057b41c49e0b34818fbb4112
# c6ed8d78cc144851bf2ae0b63ce498c0
msgid "**Extends**"
msgstr ""

#: ../../ref/class-based-views.txt:213
#: ../../ref/class-based-views.txt:395
# c5c4fcb529014b6c82f5717cc42cb11d
# 5a60ce7742444fac8503ebfee9d0e25c
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:217
# 4536b368ff0f4cf8b978e2ed3b2232dc
msgid "The field on the current object instance that can be used to determine the name of a candidate template. If either ``template_name_field`` or the value of the ``template_name_field`` on the current object instance is ``None``, the object will not be interrogated for a candidate template name."
msgstr ""

#: ../../ref/class-based-views.txt:225
# acec54eee75e4f3e898f79197e102c31
msgid "The suffix to append to the auto-generated candidate template name. Default suffix is ``_detail``."
msgstr ""

#: ../../ref/class-based-views.txt:230
#: ../../ref/class-based-views.txt:404
# f4252e8220bc4e2cbb41cb833cd12daa
# dacfc35448c04732a10f77f35a1be217
msgid "Returns a list of candidate template names. Returns the following list:"
msgstr ""

#: ../../ref/class-based-views.txt:232
#: ../../ref/class-based-views.txt:406
# 08fe3c20674a430d98fa7314ec7766f3
# 49d881aa92d2416fb2470c99726a4f51
msgid "the value of ``template_name`` on the view (if provided)"
msgstr ""

#: ../../ref/class-based-views.txt:233
# 47dee13c5a8f4a0ea4d845d4cfde137c
msgid "the contents of the ``template_name_field`` field on the object instance that the view is operating upon (if available)"
msgstr ""

#: ../../ref/class-based-views.txt:235
#: ../../ref/class-based-views.txt:407
# 2516b8e85d6f41148c6f3dcd185ce01c
# 0345a9e004f8492bb90f302123637b6b
msgid "``<app_label>/<object_name><template_name_suffix>.html``"
msgstr ""

#: ../../ref/class-based-views.txt:238
# 30a1038877b442319ea08ab0f47e3943
msgid "Multiple object mixins"
msgstr ""

#: ../../ref/class-based-views.txt:243
# 6d0f3c7184ce40e2882627215991286d
msgid "MultipleObjectMixin"
msgstr ""

#: ../../ref/class-based-views.txt:246
# 81491402eef44bfd8697d4d5e4313d7e
msgid "A mixin that can be used to display a list of objects."
msgstr ""

#: ../../ref/class-based-views.txt:248
# e4de360d058a4a55af1f725207e395dc
msgid "If ``paginate_by`` is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:"
msgstr ""

#: ../../ref/class-based-views.txt:251
#: ../../ref/generic-views.txt:771
# ac04b720be7f47ab9a4051dc1565f7a9
# bd9e5b62a8b24a0dacc33ed97ab8e45d
msgid "Use the ``page`` parameter in the URLconf. For example, this is what your URLconf might look like::"
msgstr ""

#: ../../ref/class-based-views.txt:256
#: ../../ref/generic-views.txt:776
# 008a00b2cbab475b85930d62ebe816ea
# 3fb95a3579124b6ebbdb6d5155c086c6
msgid "Pass the page number via the ``page`` query-string parameter. For example, a URL would look like this::"
msgstr ""

#: ../../ref/class-based-views.txt:261
#: ../../ref/generic-views.txt:785
# a53912445c4c4450bf937da9c32216ef
# b9682062209d467a8402261d2bc041a7
msgid "These values and lists are 1-based, not 0-based, so the first page would be represented as page ``1``."
msgstr ""

#: ../../ref/class-based-views.txt:264
#: ../../ref/generic-views.txt:788
# 85ae0366740a4a969ecad1ee2898058a
# ceedc1eb7b4f4d0aac9b07903036a3e3
msgid "For more on pagination, read the :doc:`pagination documentation </topics/pagination>`."
msgstr ""

#: ../../ref/class-based-views.txt:267
#: ../../ref/generic-views.txt:791
# 24a016044b5d44c28fb9fc28990fdc9b
# bc2b706282e74aa18260d0ac43295974
msgid "As a special case, you are also permitted to use ``last`` as a value for ``page``::"
msgstr ""

#: ../../ref/class-based-views.txt:272
#: ../../ref/generic-views.txt:796
# 34c7db8ff1944f3485188207273a347b
# e58b45d41ce34605837cab7dadf9bcae
msgid "This allows you to access the final page of results without first having to determine how many pages there are."
msgstr ""

#: ../../ref/class-based-views.txt:275
#: ../../ref/generic-views.txt:799
# 02e4021b2487480b84ff6f6c21709f89
# 792ccf80a03d4224b7169d5188e7817d
msgid "Note that ``page`` *must* be either a valid page number or the value ``last``; any other value for ``page`` will result in a 404 error."
msgstr ""

#: ../../ref/class-based-views.txt:280
# ca9408f11ffe49c39590fade0ae4e50b
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:293
# 53ac4e5dc4f54f2cb941f664ea2c3201
msgid "A ``QuerySet`` that represents the objects. If provided, the value of :attr:`MultipleObjectMixin.queryset` supersedes the value provided for :attr:`MultipleObjectMixin.model`."
msgstr ""

#: ../../ref/class-based-views.txt:299
# e72b534b169c4feb80314b605e9ca008
msgid "An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with :attr:`MultipleObjectMixin.paginate_by` objects per page. The view will expect either a ``page`` query string parameter (via ``GET``) or a ``page`` variable specified in the URLconf."
msgstr ""

#: ../../ref/class-based-views.txt:307
# ed47a22cc4854b16bbd49309cb15dfc4
msgid "The paginator class to be used for pagination. By default, :class:`django.core.paginator.Paginator` is used. If the custom paginator class doesn't have the same constructor interface as :class:`django.core.paginator.Paginator`, you will also need to provide an implementation for :meth:`MultipleObjectMixin.get_paginator`."
msgstr ""

#: ../../ref/class-based-views.txt:319
# 6e62d261bd7d43c3ac2911774f7bef20
msgid "Returns the queryset that represents the data this view will display."
msgstr ""

#: ../../ref/class-based-views.txt:323
# 36ea5fa988db432e95471c7b7a057644
msgid "Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, ``is_paginated``)."
msgstr ""

#: ../../ref/class-based-views.txt:326
# 28bad9f6b51842cca401663efc20ea97
msgid "Constructed by paginating ``queryset`` into pages of size ``page_size``. If the request contains a ``page`` argument, either as a captured URL argument or as a GET argument, ``object_list`` will correspond to the objects from that page."
msgstr ""

#: ../../ref/class-based-views.txt:333
# 9e2ef80cf79840a7b18612048a34cf7a
msgid "Returns the number of items to paginate by, or ``None`` for no pagination. By default this simply returns the value of :attr:`MultipleObjectMixin.paginate_by`."
msgstr ""

#: ../../ref/class-based-views.txt:339
# 692bf87a8c094ec7ba2dfc969e9141ae
msgid "Returns an instance of the paginator to use for this view. By default, instantiates an instance of :attr:`paginator_class`."
msgstr ""

#: ../../ref/class-based-views.txt:344
# 6f14fae066374e24adb9fa3ffcc62f14
msgid "Return a boolean specifying whether to display the page if no objects are available. If this method returns ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:351
# 150f6117c6de481886eeb63d189c223d
msgid "Return the context variable name that will be used to contain the list of data that this view is manipulating. If ``object_list`` is a queryset of Django objects and :attr:`~MultipleObjectMixin.context_object_name` is not set, the context name will be the ``object_name`` of the model that the queryset is composed from, with postfix ``'_list'`` appended. For example, the model ``Article`` would have a context object named ``article_list``."
msgstr ""

#: ../../ref/class-based-views.txt:366
# df926530573b4fd9a96f3311943f4059
msgid "``object_list``: The list of objects that this view is displaying. If ``context_object_name`` is specified, that variable will also be set in the context, with the same value as ``object_list``."
msgstr ""

#: ../../ref/class-based-views.txt:370
# 5a926a13d54c4b53a7fb74ecce2a2b74
msgid "``is_paginated``: A boolean representing whether the results are paginated. Specifically, this is set to ``False`` if no page size has been specified, or if the available objects do not span multiple pages."
msgstr ""

#: ../../ref/class-based-views.txt:375
# a1a1d311a4a541e795cab56e11f7fd2b
msgid "``paginator``: An instance of :class:`django.core.paginator.Paginator`. If the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:379
# 4e57c83d52e9409a8e0713d3db02ff16
msgid "``page_obj``: An instance of :class:`django.core.paginator.Page`. If the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:384
# 3442649c58ea47f68f20fc699695401c
msgid "MultipleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views.txt:387
# 019fa8d289ba4398ba5016356dc28a97
msgid "A mixin class that performs template-based response rendering for views that operate upon a list of object instances. Requires that the view it is mixed with provides ``self.object_list``, the list of object instances that the view is operating on. ``self.object_list`` may be, but is not required to be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../ref/class-based-views.txt:399
# bfcbed8b55cf4f48b9bc2f20e4b74a44
msgid "The suffix to append to the auto-generated candidate template name. Default suffix is ``_list``."
msgstr ""

#: ../../ref/class-based-views.txt:410
# 540eb361523c4c5a97ced1910a4a2f81
msgid "Editing mixins"
msgstr ""

#: ../../ref/class-based-views.txt:415
# 98392403f1e84cc9986db8a6494da6a7
msgid "FormMixin"
msgstr ""

#: ../../ref/class-based-views.txt:418
# cbb9ef2e808342c08c412c25afdec15f
msgid "A mixin class that provides facilities for creating and displaying forms."
msgstr ""

#: ../../ref/class-based-views.txt:422
# 4aec56997ce74890804a0bc6c02867cf
msgid "A dictionary containing initial data for the form."
msgstr ""

#: ../../ref/class-based-views.txt:426
# 045176a611e14951a9e564630cca5da4
msgid "The form class to instantiate."
msgstr ""

#: ../../ref/class-based-views.txt:430
#: ../../ref/class-based-views.txt:508
# 817c0c3969d94d0886d9a7bb63b6e7b1
# 3978ba27170c42bb976107bd143450b7
msgid "The URL to redirect to when the form is successfully processed."
msgstr ""

#: ../../ref/class-based-views.txt:434
# c2cd6598587649e4a9c2adcd2742ffc3
msgid "Retrieve initial data for the form. By default, returns a copy of :attr:`.initial`."
msgstr ""

#: ../../ref/class-based-views.txt:439
# bfafc44d7851485ca9b489d3883dd3da
msgid "In Django 1.3, this method was returning the :attr:`initial` class variable itself."
msgstr ""

#: ../../ref/class-based-views.txt:444
# 78a8fc82ef3744e0befbefa38f43c5f1
msgid "Retrieve the form class to instantiate. By default :attr:`.form_class`."
msgstr ""

#: ../../ref/class-based-views.txt:449
# 59c68f375c154f08994397cb8e27b6a2
msgid "Instantiate an instance of ``form_class`` using :meth:`.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views.txt:454
# 7816bd3860c44c87ada4307651780a4f
msgid "Build the keyword arguments required to instantiate the form."
msgstr ""

#: ../../ref/class-based-views.txt:456
# 8e3eedc744774feab5ed33854f292ca3
msgid "The ``initial`` argument is set to :meth:`.get_initial`. If the request is a ``POST`` or ``PUT``, the request data (``request.POST`` and ``request.FILES``) will also be provided."
msgstr ""

#: ../../ref/class-based-views.txt:462
# 8a78607c8b374a30988099a34ebb3672
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`.success_url` by default."
msgstr ""

#: ../../ref/class-based-views.txt:467
# dabf54b684ec4f96b4227cd207d34c66
msgid "Redirects to :meth:`.get_success_url`."
msgstr ""

#: ../../ref/class-based-views.txt:471
#: ../../ref/class-based-views.txt:542
# ead14ac8f4914b349158892d601c054a
# b02847a86fd44d8da4848ebaf00f06ad
msgid "Renders a response, providing the invalid form as context."
msgstr ""

#: ../../ref/class-based-views.txt:475
# dcbe082903684e13b348c27222326a9f
msgid "Populates a context containing the contents of ``kwargs``."
msgstr ""

#: ../../ref/class-based-views.txt:479
# b8f13d01912f4fa8bf90fa9fff34559a
msgid "``form``: The form instance that was generated for the view."
msgstr ""

#: ../../ref/class-based-views.txt:483
# 86d49ba95f82432f812d78fc7759ac32
msgid "Views mixing :class:`FormMixin` must provide an implementation of :meth:`.form_valid` and :meth:`.form_invalid`."
msgstr ""

#: ../../ref/class-based-views.txt:488
# 6a07f6120b894b8cafbb5e47efb53f3e
msgid "ModelFormMixin"
msgstr ""

#: ../../ref/class-based-views.txt:491
# 4e26471e587c491091939729cdf95fc7
msgid "A form mixin that works on ModelForms, rather than a standalone form."
msgstr ""

#: ../../ref/class-based-views.txt:493
# d8caa4f1990f43cbbd2228f8e4f7ac4d
msgid "Since this is a subclass of :class:`~django.views.generic.detail.SingleObjectMixin`, instances of this mixin have access to the :attr:`~SingleObjectMixin.model` and :attr:`~SingleObjectMixin.queryset` attributes, describing the type of object that the ModelForm is manipulating. The view also provides ``self.object``, the instance being manipulated. If the instance is being created, ``self.object`` will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:501
#: ../../ref/class-based-views.txt:788
#: ../../ref/class-based-views.txt:894
#: ../../ref/class-based-views.txt:977
#: ../../ref/class-based-views.txt:1003
#: ../../ref/class-based-views.txt:1026
#: ../../ref/class-based-views.txt:1043
#: ../../ref/class-based-views.txt:1062
#: ../../ref/class-based-views.txt:1081
#: ../../ref/class-based-views.txt:1113
#: ../../ref/class-based-views.txt:1137
#: ../../ref/class-based-views.txt:1187
#: ../../ref/class-based-views.txt:1233
#: ../../ref/class-based-views.txt:1268
#: ../../ref/class-based-views.txt:1317
#: ../../ref/class-based-views.txt:1336
# caa6f460ce3a4be0bee03ac91f07d0a8
# 5410b3d044bb4b2c9a94d3c8c524fcf4
# 0396ebbe7abe44a9b8f24b9cc93d756c
# 918d81399d5747808168684bd2f9aee2
# 30832308d727471580b134d638205210
# d28435d2c3a8495c9b3a06947b291e50
# ff1ee9f9438847f5a8fa96a6594417e3
# d5b21e6b1d454ae3b16fdae2fd6babe3
# bbdde2d58f894547a36041a83bddedc3
# b93e5887fb544ab5ba3157969ff9a5fe
# 4ca3c9466049423b89f8a554425876e1
# 987333e8616f4bada9f821b7fee9f8b3
# 7b90b978eb2a4e9ab33d6041d4f62458
# 7559ba5d60094aaf9ce0833d2b49d2b7
# 7ce63f714c01430f9be244edf7f001c7
# f8f67c08379f45c18799d5e832f1f26e
msgid "**Mixins**"
msgstr ""

#: ../../ref/class-based-views.txt:503
#: ../../ref/class-based-views.txt:1028
# 3bd91a25d6c04e598909e88e06fb27cd
# df4cb4d2ef2246f6991cf4f6f4237917
msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:504
#: ../../ref/class-based-views.txt:979
# e8e977ab0a2d4585b054be724c46513a
# c4ea82bd4ab5440eade3d432126baa13
msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:510
# 22392e93d3d64200986ee27cfa58c0a0
msgid "``success_url`` may contain dictionary string formatting, which will be interpolated against the object's field attributes. For example, you could use ``success_url=\"/polls/%(slug)s/\"`` to redirect to a URL composed out of the ``slug`` field on a model."
msgstr ""

#: ../../ref/class-based-views.txt:517
# 9074dbc322b64b8d83e997a8e5152bec
msgid "Retrieve the form class to instantiate. If :attr:`FormMixin.form_class` is provided, that class will be used. Otherwise, a ModelForm will be instantiated using the model associated with the :attr:`~SingleObjectMixin.queryset`, or with the :attr:`~SingleObjectMixin.model`, depending on which attribute is provided."
msgstr ""

#: ../../ref/class-based-views.txt:526
# 1ad6cab66fd14b8fbda663f81a4c5dbb
msgid "Add the current instance (``self.object``) to the standard :meth:`FormMixin.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views.txt:531
# 05c3a29337074d5fa4b936703817b8a0
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`FormMixin.success_url` if it is provided; otherwise, attempts to use the ``get_absolute_url()`` of the object."
msgstr ""

#: ../../ref/class-based-views.txt:537
# d31c5e7b645c409282152034a769eb15
msgid "Saves the form instance, sets the current object for the view, and redirects to :meth:`.get_success_url`."
msgstr ""

#: ../../ref/class-based-views.txt:545
# 6461363c2f38484da4d0a90c16a5815a
msgid "ProcessFormView"
msgstr ""

#: ../../ref/class-based-views.txt:548
# 69c3cdd0ec5b4b57b61f2d1e1c0bf542
msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr ""

#: ../../ref/class-based-views.txt:552
# b1bf4b3c8dec4ae69b0c1433a6ff6c0e
msgid "Constructs a form, then renders a response using a context that contains that form."
msgstr ""

#: ../../ref/class-based-views.txt:557
# abaa78d9e4364f25abdbcb45a95244ce
msgid "Constructs a form, checks the form for validity, and handles it accordingly."
msgstr ""

#: ../../ref/class-based-views.txt:560
# 1f5e8f93dfc0468597e65e46318898a1
msgid "The PUT action is also handled, as an analog of POST."
msgstr ""

#: ../../ref/class-based-views.txt:563
# 9b348d26e75943369461b4835ab2ad94
msgid "DeletionMixin"
msgstr ""

#: ../../ref/class-based-views.txt:566
# ff5b7795ae3447249fdffdf199a2cb14
msgid "Enables handling of the ``DELETE`` http action."
msgstr ""

#: ../../ref/class-based-views.txt:570
# b3a83dff05a141739a7f72795d7d76f9
msgid "The url to redirect to when the nominated object has been successfully deleted."
msgstr ""

#: ../../ref/class-based-views.txt:575
# 013c3757d9554d839b83fd8007123095
msgid "Returns the url to redirect to when the nominated object has been successfully deleted. Returns :attr:`~django.views.generic.edit.DeletionMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views.txt:581
# 52d5129b8f4044599cc17aa15f20edb8
msgid "Date-based mixins"
msgstr ""

#: ../../ref/class-based-views.txt:586
# 372867036b9a4a658b69599359d82622
msgid "YearMixin"
msgstr ""

#: ../../ref/class-based-views.txt:589
# 1d2bd3ffa19240b290aba025cef569c7
msgid "A mixin that can be used to retrieve and provide parsing information for a year component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:594
# 562696607731493aa63525ea5ae28040
msgid "The :func:`~time.strftime` format to use when parsing the year. By default, this is ``'%Y'``."
msgstr ""

#: ../../ref/class-based-views.txt:599
# 3e740e88fe944af6aaa34e0ddb2f3809
msgid "**Optional** The value for the year (as a string). By default, set to ``None``, which means the year will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:604
# eb2dd3ab6d8848b897fe0a56c9e0e8dc
msgid "Returns the :func:`~time.strftime` format to use when parsing the year. Returns :attr:`YearMixin.year_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:609
# 902e8c9a18b342e6a9d7c1e972a07e10
msgid "Returns the year for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:612
# 92639a8c26634ddba6f4bf9409ec399a
msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:613
# 868f4bdee5cb4f7cb9c897d402bababa
msgid "The value of the `year` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:614
# 7555fbe9164244239fb54664cf924247
msgid "The value of the `year` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:616
# e666a412d447418ab8042c1444394dd0
msgid "Raises a 404 if no valid year specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:619
# ef83d24958d84ed7826a247f265508c5
msgid "MonthMixin"
msgstr ""

#: ../../ref/class-based-views.txt:622
# 826e19052aeb4bc6b8cc84f2d011b262
msgid "A mixin that can be used to retrieve and provide parsing information for a month component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:627
# 1572aa36d257473bb4beb27ed90b91db
msgid "The :func:`~time.strftime` format to use when parsing the month. By default, this is ``'%b'``."
msgstr ""

#: ../../ref/class-based-views.txt:632
# 3bb89ad770924d418b49ff35fb3c7df6
msgid "**Optional** The value for the month (as a string). By default, set to ``None``, which means the month will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:637
# 8a40acfee8c64bd9893ec04807459fa0
msgid "Returns the :func:`~time.strftime` format to use when parsing the month. Returns :attr:`MonthMixin.month_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:642
# 7458e42618434953b689317e30547f59
msgid "Returns the month for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:645
# 63d0d04b4e0748df9447260c9ecbe79f
msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:646
# cfe381150108479eb0a75dcb8bb86b79
msgid "The value of the `month` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:647
# 388e768866524f39afea608f7024c1a5
msgid "The value of the `month` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:649
# 7c8f28b2432f48de95d8dd7b4648ec08
msgid "Raises a 404 if no valid month specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:653
# a889af8c31d148ca9879ceb026bd64f8
msgid "Returns a date object containing the first day of the month after the date provided. Returns ``None`` if mixed with a view that sets ``allow_future = False``, and the next month is in the future. If ``allow_empty = False``, returns the next month that contains data."
msgstr ""

#: ../../ref/class-based-views.txt:660
# af0819a88835422facb167cd961e01a4
msgid "Returns a date object containing the first day of the month before the date provided. If ``allow_empty = False``, returns the previous month that contained data."
msgstr ""

#: ../../ref/class-based-views.txt:665
# 7882b1053d9941baad925ef12224d976
msgid "DayMixin"
msgstr ""

#: ../../ref/class-based-views.txt:668
# 7e31f6efd6d34d79bb957e8a952f849b
msgid "A mixin that can be used to retrieve and provide parsing information for a day component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:673
# bbcb8ad112cc4d6988e61efc29547584
msgid "The :func:`~time.strftime` format to use when parsing the day. By default, this is ``'%d'``."
msgstr ""

#: ../../ref/class-based-views.txt:678
# e48d7c2f1a6148208a19ece6b6421ef5
msgid "**Optional** The value for the day (as a string). By default, set to ``None``, which means the day will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:683
# 7d73b5a0b8cb41f79ee1373328a5ea58
msgid "Returns the :func:`~time.strftime` format to use when parsing the day. Returns :attr:`DayMixin.day_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:688
# 1d5c8b026a75439d8a873ae75629f423
msgid "Returns the day for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:691
# 594b44acf45e4513bc7c776d93c2c69d
msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:692
# f1d892c693a746a68036a49fa21b274a
msgid "The value of the `day` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:693
# 91feba75ed8a4bea9fd12b42f3bc8832
msgid "The value of the `day` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:695
# 2c918d70874c4e0597277781b2d1831b
msgid "Raises a 404 if no valid day specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:699
# 88386d51be8d4fdebbdc16ff21808573
msgid "Returns a date object containing the next day after the date provided. Returns ``None`` if mixed with a view that sets ``allow_future = False``, and the next day is in the future. If ``allow_empty = False``, returns the next day that contains data."
msgstr ""

#: ../../ref/class-based-views.txt:706
# b87944de7f9a446e951749b0848770a9
msgid "Returns a date object containing the previous day. If ``allow_empty = False``, returns the previous day that contained data."
msgstr ""

#: ../../ref/class-based-views.txt:710
# 3238f7cc064f4cff95eb6f44c3c86165
msgid "WeekMixin"
msgstr ""

#: ../../ref/class-based-views.txt:713
# e6ecfb32deaf41079bb2f0a84ef2de9a
msgid "A mixin that can be used to retrieve and provide parsing information for a week component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:718
# 3aded8b62ec146e78c63f9cac5e79ae8
msgid "The :func:`~time.strftime` format to use when parsing the week. By default, this is ``'%U'``."
msgstr ""

#: ../../ref/class-based-views.txt:723
# 7005659d9d27406ba7c3eccd73e7410f
msgid "**Optional** The value for the week (as a string). By default, set to ``None``, which means the week will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:728
# 47d0668111264854a74b4009bcaa29aa
msgid "Returns the :func:`~time.strftime` format to use when parsing the week. Returns :attr:`WeekMixin.week_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:733
# ee05758aa87c497b9f6ae59430e3c722
msgid "Returns the week for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:736
# 02cb3276fe924dd586689a8f32a9dde1
msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:737
# d416655568634ee096b8d8b7c8ef8aa0
msgid "The value of the `week` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:738
# 84e90cfe54694184a58a03396bc56659
msgid "The value of the `week` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:740
# c69f29fc56dd47f6bbc2bba10a4485d9
msgid "Raises a 404 if no valid week specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:744
# a4ef1d184c7a4999bdebc188bbfdd592
msgid "DateMixin"
msgstr ""

#: ../../ref/class-based-views.txt:747
# 46fd0ae8ae634607bfeb1de3b548b0a6
msgid "A mixin class providing common behavior for all date-based views."
msgstr ""

#: ../../ref/class-based-views.txt:751
# 8d922d301a2f4da4a40e1d94901687d7
msgid "The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the date-based archive should use to determine the objects on the page."
msgstr ""

#: ../../ref/class-based-views.txt:757
# 4426984f610a4f92838746f233589385
msgid "A boolean specifying whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:764
# 54baaf5e196c443987196297e4c71a43
msgid "Returns the name of the field that contains the date data that this view will operate on. Returns :attr:`DateMixin.date_field` by default."
msgstr ""

#: ../../ref/class-based-views.txt:769
# 86bd536a9e884ab1b19ac5663360a76f
msgid "Determine whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. Returns :attr:`DateMixin.allow_future` by default."
msgstr ""

#: ../../ref/class-based-views.txt:775
# 333718661d664624acbcc1d7fe537a0d
msgid "BaseDateListView"
msgstr ""

#: ../../ref/class-based-views.txt:778
# f86bcdc109fc443ea9c0c124dc70a243
msgid "A base class that provides common behavior for all date-based views. There won't normally be a reason to instantiate :class:`~django.views.generic.dates.BaseDateListView`; instantiate one of the subclasses instead."
msgstr ""

#: ../../ref/class-based-views.txt:783
# 1936fce5c0b1438f8c305ac5ed6393ec
msgid "While this view (and it's subclasses) are executing, ``self.object_list`` will contain the list of objects that the view is operating upon, and ``self.date_list`` will contain the list of dates for which data is available."
msgstr ""

#: ../../ref/class-based-views.txt:790
# 8fd1cd80929b4726be6ae06e685ed9d6
msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:791
# ec89325e7adb4de8893f09e9f65dd758
msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:795
# c6e79e4f68234980843b348d30714003
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``True`` and no objects are available, the view will display an empty page instead of raising a 404. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:802
# d65f53f5b871495ca0894d781f992881
msgid "Returns a 3-tuple containing (``date_list``, ``object_list``, ``extra_context``)."
msgstr ""

#: ../../ref/class-based-views.txt:805
# 64531214c17244589e6d34c085a07571
msgid "``date_list`` is the list of dates for which data is available. ``object_list`` is the list of objects. ``extra_context`` is a dictionary of context data that will be added to any context data provided by the :class:`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:813
# 7518981ade384d66a3190dd5325df9a8
msgid "Returns a queryset, filtered using the query arguments defined by ``lookup``. Enforces any restrictions on the queryset, such as ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../ref/class-based-views.txt:819
# ad8d49623ce14334b933ecb80a570584
msgid "Returns the list of dates of type ``date_type`` for which ``queryset`` contains entries. For example, ``get_date_list(qs, 'year')`` will return the list of years for which ``qs`` has entries. See :meth:`~django.db.models.query.QuerySet.dates()` for the ways that the ``date_type`` argument can be used."
msgstr ""

#: ../../ref/class-based-views.txt:827
#: ../../ref/generic-views.txt:3
# dcf7517ef46948fa94d0e7c6a3f36818
# 10f17cb202a146eda87ce73c222756a0
msgid "Generic views"
msgstr ""

#: ../../ref/class-based-views.txt:830
# b5c8288396fc4d3f9ab2fc4442d883ca
msgid "Simple generic views"
msgstr ""

#: ../../ref/class-based-views.txt:835
# 26408ac1e3134ca5af495be0db873619
msgid "View"
msgstr ""

#: ../../ref/class-based-views.txt:838
# ba8c8db2d00d40038153f04bad0276b9
msgid "The master class-based base view. All other generic class-based views inherit from this base class."
msgstr ""

#: ../../ref/class-based-views.txt:841
# 4c910719c1ad46e995339b225205a5e3
msgid "Each request served by a :class:`~django.views.generic.base.View` has an independent state; therefore, it is safe to store state variables on the instance (i.e., ``self.foo = 3`` is a thread-safe operation)."
msgstr ""

#: ../../ref/class-based-views.txt:845
# ccd2f16f67944612bd4e07606e008631
msgid "A class-based view is deployed into a URL pattern using the :meth:`~View.as_view()` classmethod::"
msgstr ""

#: ../../ref/class-based-views.txt:852
# 0bdb79c8bec0430a880049de73616ae7
msgid "Any argument passed into :meth:`~View.as_view()` will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on ``MyView`` is able to interrogate ``self.size``."
msgstr ""

#: ../../ref/class-based-views.txt:859
# d5d8ad001b5a4d5ab46666cb2e32addd
msgid "Arguments passed to a view are shared between every instance of a view. This means that you shoudn't use a list, dictionary, or any other variable object as an argument to a view. If you did, the actions of one user visiting your view could have an effect on subsequent users visiting the same view."
msgstr ""

#: ../../ref/class-based-views.txt:867
# e93b8d47e1864a41a8277d8d842ece56
msgid "The ``view`` part of the view -- the method that accepts a ``request`` argument plus arguments, and returns a HTTP response."
msgstr ""

#: ../../ref/class-based-views.txt:870
# 150d515bb13341f1b346269b44d24f59
msgid "The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a ``GET`` will be delegated to :meth:`~View.get()`, a ``POST`` to :meth:`~View.post()`, and so on."
msgstr ""

#: ../../ref/class-based-views.txt:875
# 2ebe8d9360d04f0ba8658fbf39bb2dae
msgid "The default implementation also sets ``request``, ``args`` and ``kwargs`` as instance variables, so any method on the view can know the full details of the request that was made to invoke the view."
msgstr ""

#: ../../ref/class-based-views.txt:881
# 991b8110b0f6484588b0f2c7f72bb300
msgid "If the view was called with HTTP method it doesn't support, this method is called instead."
msgstr ""

#: ../../ref/class-based-views.txt:884
# 5467f0dee30a4a8ab68236f25b841c77
msgid "The default implementation returns ``HttpResponseNotAllowed`` with list of allowed methods in plain text."
msgstr ""

#: ../../ref/class-based-views.txt:888
# 6ae221758eaa47df8e6db81f4ad9d844
msgid "TemplateView"
msgstr ""

#: ../../ref/class-based-views.txt:891
#: ../../ref/generic-views.txt:46
# 90b4407c3c2146a48b322055b37fc9ad
# 866fbfb01c29434f9d007d3f1a5a0b16
msgid "Renders a given template, passing it a ``{{ params }}`` template variable, which is a dictionary of the parameters captured in the URL."
msgstr ""

#: ../../ref/class-based-views.txt:896
# 528ac161a483477f9e3b0ea2b8a8994e
msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:900
# b1634424ce5a47b9b9cc3791c655b8a4
msgid "The full name of a template to use."
msgstr ""

#: ../../ref/class-based-views.txt:904
# abf4025ea2a046a7af82a63c4501a9d6
msgid "Return a context data dictionary consisting of the contents of ``kwargs`` stored in the context variable ``params``."
msgstr ""

#: ../../ref/class-based-views.txt:909
# 9c6532b2fae64c4e94b668fabc650c01
msgid "``params``: The dictionary of keyword arguments captured from the URL pattern that served the view."
msgstr ""

#: ../../ref/class-based-views.txt:913
# c19a4ae7d7a9455e84570fc39674d126
msgid "RedirectView"
msgstr ""

#: ../../ref/class-based-views.txt:916
#: ../../ref/generic-views.txt:83
# 114aa0e85aeb45ea993cd2faf53ce7c6
# cd489de0dccb4987a869d233a8ed5c23
msgid "Redirects to a given URL."
msgstr ""

#: ../../ref/class-based-views.txt:918
#: ../../ref/generic-views.txt:85
# 76187cf11e104c138b96b72c638675b2
# 4ee4c1c05161427789a56602ed6287b9
msgid "The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is *always* done (even if no arguments are passed in), any ``\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python will convert them to a single percent sign on output."
msgstr ""

#: ../../ref/class-based-views.txt:924
#: ../../ref/generic-views.txt:91
# 15d85c756522477d88a73d8fc479b48e
# bfaff5d8b44f456f80fa58563098ead1
msgid "If the given URL is ``None``, Django will return an ``HttpResponseGone`` (410)."
msgstr ""

#: ../../ref/class-based-views.txt:929
# e75c180b7c014eeaa96400c36ecced4f
msgid "The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP error."
msgstr ""

#: ../../ref/class-based-views.txt:934
# 8a6e2fd7370d4092bdeeb1543df3fae3
msgid "Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If ``True``, then the redirect will use status code 301. If ``False``, then the redirect will use status code 302. By default, ``permanent`` is ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:941
# 2068a20399434342887ee952def4659d
msgid "Whether to pass along the GET query string to the new location. If ``True``, then the query string is appended to the URL. If ``False``, then the query string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:948
# abbae49f7302426196023c48b8816eb6
msgid "Constructs the target URL for redirection."
msgstr ""

#: ../../ref/class-based-views.txt:950
# e00b0d0d4c3a4d79acbfe21dc8b3de38
msgid "The default implementation uses :attr:`~RedirectView.url` as a starting string, performs expansion of ``%`` parameters in that string, as well as the appending of query string if requested by :attr:`~RedirectView.query_string`. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string."
msgstr ""

#: ../../ref/class-based-views.txt:958
# 811fd850cb9a463eb3190d8a5dc3333b
msgid "Detail views"
msgstr ""

#: ../../ref/class-based-views.txt:963
# 135c6c121a5c4c1bb42caa0faa92be33
msgid "DetailView"
msgstr ""

#: ../../ref/class-based-views.txt:967
#: ../../ref/generic-views.txt:805
#: ../../ref/generic-views.txt:809
# 8ba0114b65e94881b07cc3e53fdc38cc
# dac7f8868af24c41b22c86c8de37caa0
# 7409a065f0594b8ab573c954eaadc553
msgid "A page representing an individual object."
msgstr ""

#: ../../ref/class-based-views.txt:969
# da1f33ad5b5e40298336d4b397b17718
msgid "While this view is executing, ``self.object`` will contain the object that the view is operating upon."
msgstr ""

#: ../../ref/class-based-views.txt:972
# 50c1d0f93514445ebe33f13e8f001b78
msgid ":class:`~django.views.generic.base.BaseDetailView` implements the same behavior as :class:`~django.views.generic.base.DetailView`, but doesn't include the :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:980
#: ../../ref/class-based-views.txt:1338
# 451be8b5cb8f4acd99b8a321e32c4402
# f40c6a381fec45dba9ad16f43aff77e5
msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:983
# b521242c815c4b41a89953f648d662d6
msgid "List views"
msgstr ""

#: ../../ref/class-based-views.txt:988
# 185a94ef0d3a4740a7f7bf1ebb85d3b8
msgid "ListView"
msgstr ""

#: ../../ref/class-based-views.txt:992
#: ../../ref/generic-views.txt:697
# 522c1615dab3413ead8306836e6adde8
# bdd35ef40fbe4ea292023ec3625ad73d
msgid "A page representing a list of objects."
msgstr ""

#: ../../ref/class-based-views.txt:994
# 042b6367403b4cb08ec5c7ec50fcd1f1
msgid "While this view is executing, ``self.object_list`` will contain the list of objects (usually, but not necessarily a queryset) that the view is operating upon."
msgstr ""

#: ../../ref/class-based-views.txt:998
# d052d9ca6c40424b993b554bb92368a2
msgid ":class:`~django.views.generic.list.BaseListView` implements the same behavior as :class:`~django.views.generic.list.ListView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1005
# 60a0b914da3449e7bc9a886941a5bb8c
msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1006
#: ../../ref/class-based-views.txt:1116
#: ../../ref/class-based-views.txt:1139
#: ../../ref/class-based-views.txt:1189
#: ../../ref/class-based-views.txt:1235
#: ../../ref/class-based-views.txt:1270
#: ../../ref/class-based-views.txt:1319
# a0050897de264be19025823d30baed36
# 68e4564e544d4f578ebbdd5a5d914ae4
# 3135adabe4994497968a399dd67b2e2c
# 9c38d05be27f491bbf6e11a4bfb4a058
# 72e6aa9165444abdb9550f9db96e999b
# 8a93f16edd6745f1b0eac0f209bc27ad
# a7461d5371544781b492c9492cec72ed
msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1010
# 4013e1e4e2cf4c49a0f86be918a27f7a
msgid "Editing views"
msgstr ""

#: ../../ref/class-based-views.txt:1015
# c85f5278a7d849efa228c329de0bc8fb
msgid "FormView"
msgstr ""

#: ../../ref/class-based-views.txt:1019
# 6f4a108055284aa9b16dfb3099915aa2
msgid "A view that displays a form. On error, redisplays the form with validation errors; on success, redirects to a new URL."
msgstr ""

#: ../../ref/class-based-views.txt:1022
# 237cda1fc82243009003fc0d7d6009c2
msgid ":class:`~django.views.generic.edit.BaseFormView` implements the same behavior as :class:`~django.views.generic.edit.FormView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1029
#: ../../ref/class-based-views.txt:1046
#: ../../ref/class-based-views.txt:1065
# 48e746cb745f489f9b4835f1e8207318
# 9e40fe88d52742c3b5f550113329b026
# d093066ada154b7db380c40b8ee842bd
msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ""

#: ../../ref/class-based-views.txt:1032
# 1f39f59d37e54c349380f438c8255282
msgid "CreateView"
msgstr ""

#: ../../ref/class-based-views.txt:1036
# 75ee13bb7b414faf9dcc6d963ae4b1ed
msgid "A view that displays a form for creating an object, redisplaying the form with validation errors (if there are any) and saving the object."
msgstr ""

#: ../../ref/class-based-views.txt:1039
# 874c9412e9c644b9906fcec5cffb4922
msgid ":class:`~django.views.generic.edit.BaseCreateView` implements the same behavior as :class:`~django.views.generic.edit.CreateView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1045
#: ../../ref/class-based-views.txt:1064
# fddae10295f34a67bc427e00131887e8
# 0120cf47638b4059a9c2919c78935857
msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1049
# ed3ddce633464cb8bbc396aa36505054
msgid "UpdateView"
msgstr ""

#: ../../ref/class-based-views.txt:1053
# 84e57144d0d94d38900ae58f6a10027c
msgid "A view that displays a form for editing an existing object, redisplaying the form with validation errors (if there are any) and saving changes to the object. This uses a form automatically generated from the object's model class (unless a form class is manually specified)."
msgstr ""

#: ../../ref/class-based-views.txt:1058
# 34a4220e17bb4910827ca51ce06c4891
msgid ":class:`~django.views.generic.edit.BaseUpdateView` implements the same behavior as :class:`~django.views.generic.edit.UpdateView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1068
# d0699853ba35413499a285e1e3227bbd
msgid "DeleteView"
msgstr ""

#: ../../ref/class-based-views.txt:1072
#: ../../ref/generic-views.txt:1050
# 7414cee735504be8b0393a6da5e44eab
# 352f638a826a4d10b03127f09a913ee7
msgid "A view that displays a confirmation page and deletes an existing object. The given object will only be deleted if the request method is ``POST``. If this view is fetched via ``GET``, it will display a confirmation page that should contain a form that POSTs to the same URL."
msgstr ""

#: ../../ref/class-based-views.txt:1077
# f5c37d9a317544d2a04daa7a8749b569
msgid ":class:`~django.views.generic.edit.BaseDeleteView` implements the same behavior as :class:`~django.views.generic.edit.DeleteView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1083
# c7982fc1005d40ab957377479684fb44
msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1084
#: ../../ref/class-based-views.txt:1339
# 7e96207bfed84e9e9fe54184b446c978
# 485b36469fcf43c0b2a0fac99ad691ce
msgid ":class:`django.views.generic.detail.BaseDetailView`"
msgstr ""

#: ../../ref/class-based-views.txt:1086
#: ../../ref/class-based-views.txt:1118
#: ../../ref/class-based-views.txt:1168
#: ../../ref/class-based-views.txt:1215
#: ../../ref/class-based-views.txt:1250
#: ../../ref/class-based-views.txt:1299
# 7c391a1aeeda42eca54f061450081102
# 3e63823cef5040a588fd32b6c5792418
# 8dc71f49c9a84d3d8145bda23a93cdd1
# 3576ac391c614cd3966773189f712983
# b84d64e21e4445f9b70ae5b36097231b
# 2e2f65fe52c74045b20fb6df7c5a8819
msgid "**Notes**"
msgstr ""

#: ../../ref/class-based-views.txt:1088
# 806fcccfc2324552a1c4cbcd23fc9f45
msgid "The delete confirmation page displayed to a GET request uses a ``template_name_suffix`` of ``'_confirm_delete'``."
msgstr ""

#: ../../ref/class-based-views.txt:1092
# 397d298606264dfb8755edb195099c76
msgid "Date-based views"
msgstr ""

#: ../../ref/class-based-views.txt:1094
# 1b2c835693c64ce88120f805530e4976
msgid "Date-based generic views (in the module :mod:`django.views.generic.dates`) are views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/class-based-views.txt:1100
# 38878a79231c4f04a3ef72bcac0d16d6
msgid "ArchiveIndexView"
msgstr ""

#: ../../ref/class-based-views.txt:1104
#: ../../ref/generic-views.txt:164
# 90e6eefe681b40809168101bd910217a
# 80132abc119f4237b941aa249893beec
msgid "A top-level index page showing the \"latest\" objects, by date. Objects with a date in the *future* are not included unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1108
# af78ccf17aea42fa914b763cbfb885f6
msgid ":class:`~django.views.generic.dates.BaseArchiveIndexView` implements the same behavior as :class:`~django.views.generic.dates.ArchiveIndexView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1115
#: ../../ref/class-based-views.txt:1141
#: ../../ref/class-based-views.txt:1192
#: ../../ref/class-based-views.txt:1238
#: ../../ref/class-based-views.txt:1274
# fbac12c27b07411caa22206ab776f9ba
# 04e2685ee2a14c14a1f3858521ae605c
# bc28730289354324ab79903f9be367cc
# 4fa1f1cc6146456dbef7b9d6071ecc41
# 98c537b340ed44dab1bcc1e1968f58ac
msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ""

#: ../../ref/class-based-views.txt:1120
# 4bf5ed89b4694e03b6e2e9c41fcff047
msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr ""

#: ../../ref/class-based-views.txt:1121
# e9312274e9ca4311aabbb0b41342ae2f
msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr ""

#: ../../ref/class-based-views.txt:1124
# 9f75b6ed9e5b4cb395fb581a3e1621db
msgid "YearArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1128
#: ../../ref/generic-views.txt:245
# 3c90b475387e48268b4d95cdfa6833d5
# 79fc5720532c47c6832f1e72d86ebf62
msgid "A yearly archive page showing all available months in a given year. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1132
# 1342a19f343242999b3ef43f4dd2ba6b
msgid ":class:`~django.views.generic.dates.BaseYearArchiveView` implements the same behavior as :class:`~django.views.generic.dates.YearArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1140
#: ../../ref/class-based-views.txt:1190
#: ../../ref/class-based-views.txt:1236
#: ../../ref/class-based-views.txt:1271
#: ../../ref/class-based-views.txt:1341
# 399624ea2110404284ea6e5d17290919
# 85f986a811cf4fbbba4f93d5d6283daa
# e52be3d8319e42e3b31a33df02bb8e6b
# 3c064a7f1c4841548053d95f09706e7a
# 1fa58592d76b405ebe0a0885a307b208
msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1145
# 4b8c0e303b9945f793b23138a6329f4f
msgid "A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If ``True``, the list of objects will be made available to the context. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:1152
# 709306c1f26342ccb22d9810c9ea51f7
msgid "Determine if an object list will be returned as part of the context. If ``False``, the ``None`` queryset will be used as the object list."
msgstr ""

#: ../../ref/class-based-views.txt:1157
# ce722f9ad2e749c2a3176e7a505466f9
msgid "In addition to the context provided by :class:`django.views.generic.list.MultipleObjectMixin` (via :class:`django.views.generic.dates.BaseDateListView`), the template's context will be:"
msgstr ""

#: ../../ref/class-based-views.txt:1162
# 375709a0dd7a49249dc638a592f462fe
msgid "``date_list``: A ``DateQuerySet`` object containing all months that have objects available according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views.txt:1166
#: ../../ref/generic-views.txt:313
# 8d35b07ffaf34463b7fba6c38ff62755
# 12373b7f8d4d47fe927fee70eb0c71fa
msgid "``year``: The given year, as a four-character string."
msgstr ""

#: ../../ref/class-based-views.txt:1170
# 7c9ff179453c4d8daeb621ab52b59d94
msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr ""

#: ../../ref/class-based-views.txt:1173
# 674c6f154efc40928b5482a1b3e10e41
msgid "MonthArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1177
#: ../../ref/generic-views.txt:330
# ac72a4cd0c7543fe9cea7da083bbba11
# 73dd4618cb5944f4b03b2570834865c9
msgid "A monthly archive page showing all objects in a given month. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1181
# f50760dc219f4aa88d33abb4c82bd822
msgid ":class:`~django.views.generic.dates.BaseMonthArchiveView` implements the same behavior as :class:`~django.views.generic.dates.MonthArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1191
#: ../../ref/class-based-views.txt:1237
#: ../../ref/class-based-views.txt:1272
#: ../../ref/class-based-views.txt:1342
# fcf90865d8084f7aabe33597706fb088
# 416d303237b84c5fbb693d855a8ecac1
# e91886410f564ff9ae23fb843777f3e8
# 6226d936272a4ae3bc897722ab07efc1
msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1196
#: ../../ref/class-based-views.txt:1242
#: ../../ref/class-based-views.txt:1278
# 7224e70863574889941012c356904e38
# 21063c14165b47bdab7f660a84954596
# a1d3550ec2174ef2b41715928997f550
msgid "In addition to the context provided by :class:`~django.views.generic.list.MultipleObjectMixin` (via :class:`~django.views.generic.dates.BaseDateListView`), the template's context will be:"
msgstr ""

#: ../../ref/class-based-views.txt:1201
# 0908041bc0734ab58a867f7e6e4358de
msgid "``date_list``: A ``DateQuerySet`` object containing all days that have objects available in the given month, according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views.txt:1205
#: ../../ref/generic-views.txt:403
# a0d6c14ab6384c42b6e58a682b11fbd8
# 131a8652d8c3449f862231c54dbd666e
msgid "``month``: A ``datetime.date`` object representing the given month."
msgstr ""

#: ../../ref/class-based-views.txt:1207
#: ../../ref/class-based-views.txt:1291
#: ../../ref/generic-views.txt:405
# cd69d3914bb545ac86174d1679c9e3f4
# b2ac8b3db1a64bc6aeebda8f969fc7d0
# f5fdb42b580145dbb6b3fc1b93319fce
msgid "``next_month``: A ``datetime.date`` object representing the first day of the next month. If the next month is in the future, this will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1211
#: ../../ref/class-based-views.txt:1295
#: ../../ref/generic-views.txt:409
# 6a2cc8811082449089ae2de2535ed700
# c52bcf77b85e4c03ae7f70d59e6321a5
# 9ad03530422043859a2e27b7747d4523
msgid "``previous_month``: A ``datetime.date`` object representing the first day of the previous month. Unlike ``next_month``, this will never be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1217
# c1778cac40ae48fbacff82dc3f6a1199
msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr ""

#: ../../ref/class-based-views.txt:1220
# 76e6c40228f741fcafdb6f776edf1192
msgid "WeekArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1224
#: ../../ref/generic-views.txt:423
# 503c31d2d7614a4ba7319f613364be2a
# 05987399fd58493cb5b849c06fabcc88
msgid "A weekly archive page showing all objects in a given week. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1228
# 4c181fc2b27a41cab0deacb998889102
msgid ":class:`~django.views.generic.dates.BaseWeekArchiveView` implements the same behavior as :class:`~django.views.generic.dates.WeekArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1247
#: ../../ref/generic-views.txt:482
# 5d39c9ac857d4919b3d51b02a1b7cfd3
# 5f6fe77dcfe8453a900d0eebb33143da
msgid "``week``: A ``datetime.date`` object representing the first day of the given week."
msgstr ""

#: ../../ref/class-based-views.txt:1252
# 6926a24e8ee644e0b57f6f854e8d97e5
msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr ""

#: ../../ref/class-based-views.txt:1255
# e24e7a326aca412ebbbf98e8143e6b3c
msgid "DayArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1259
#: ../../ref/generic-views.txt:495
# 2c576becff8c4ecca3f310a5c844d68f
# 3c5295b74877458f8bac6fa5d72a09b4
msgid "A day archive page showing all objects in a given day. Days in the future throw a 404 error, regardless of whether any objects exist for future days, unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1263
# c58739a1e97d4ac29948572ede76afea
msgid ":class:`~django.views.generic.dates.BaseDayArchiveView` implements the same behavior as :class:`~django.views.generic.dates.DayArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1273
#: ../../ref/class-based-views.txt:1343
# 06e704f9bfbf4f22bb2ed834c2eb8ba6
# 7b8ee4a3ae2b44828c5e6c35176e6797
msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1283
#: ../../ref/generic-views.txt:567
# c674842ea7ee4ddbba5da1db455353ad
# b40a40597d7a47cda90dd8d78c40c9e0
msgid "``day``: A ``datetime.date`` object representing the given day."
msgstr ""

#: ../../ref/class-based-views.txt:1285
#: ../../ref/generic-views.txt:569
# 9268df83145b445eb8ff4cc5c163f551
# 9f407ebf7fb548109ef27cfe0c6f2d26
msgid "``next_day``: A ``datetime.date`` object representing the next day. If the next day is in the future, this will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1288
#: ../../ref/generic-views.txt:572
# 706b8f22d43a4e75be128ac988fc7896
# a73eeb9304c6468dba5380cac4266a63
msgid "``previous_day``: A ``datetime.date`` object representing the previous day. Unlike ``next_day``, this will never be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1301
# e812ccbea0604bea97f2130d4918990d
msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr ""

#: ../../ref/class-based-views.txt:1304
# 4b5eec468abc402c8be504375ef9f1a4
msgid "TodayArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1308
# 42dbf2f73850474f884269edd6cd8749
msgid "A day archive page showing all objects for *today*. This is exactly the same as :class:`django.views.generic.dates.DayArchiveView`, except today's date is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""

#: ../../ref/class-based-views.txt:1312
# 1123b383a9744d79a4ca7e9a337ce5b0
msgid ":class:`~django.views.generic.dates.BaseTodayArchiveView` implements the same behavior as :class:`~django.views.generic.dates.TodayArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1320
# 87b83f6af7c843c4b9bc963eebd56e3b
msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ""

#: ../../ref/class-based-views.txt:1323
# 6d6c874e868442b084e932fddcfa6e2d
msgid "DateDetailView"
msgstr ""

#: ../../ref/class-based-views.txt:1327
#: ../../ref/generic-views.txt:594
# 59c6e31dd6574f4482eee08e006088c2
# be50e99b144d49a3a837f346780531ce
msgid "A page representing an individual object. If the object has a date value in the future, the view will throw a 404 error by default, unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1331
# 5475655b294e479cb9eabd0b061b46db
msgid ":class:`~django.views.generic.dates.BaseDateDetailView` implements the same behavior as :class:`~django.views.generic.dates.DateDetailView`, but doesn't include the :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1340
# f117e67d94a34db7a50417cbe6487b1f
msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/clickjacking.txt:3
# 8d77a3d38d2b42a085df47af520d2e6a
msgid "Clickjacking Protection"
msgstr ""

#: ../../ref/clickjacking.txt:8
# 369541648c884369b1d8c888babf048d
msgid "The clickjacking middleware and decorators provide easy-to-use protection against `clickjacking`_.  This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe."
msgstr ""

#: ../../ref/clickjacking.txt:19
# cd15acbe4e3745428dfd31524182095f
msgid "An example of clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:21
# 1bf8393da8e64c5d82315eedb5b0499c
msgid "Suppose an online store has a page where a logged in user can click \"Buy Now\" to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an \"I Like Ponies\" button on one of their own pages, and load the store's page in a transparent iframe such that the \"Buy Now\" button is invisibly overlaid on the \"I Like Ponies\" button. If the user visits the attacker site and clicks \"I Like Ponies\" he will inadvertently click on the online store's \"Buy Now\" button and unknowingly purchase the item."
msgstr ""

#: ../../ref/clickjacking.txt:32
# c69c0003f76246eab2cc6183747a4ce2
msgid "Preventing clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:34
# 8da9a9ecaf34412587834b55c39518dd
msgid "Modern browsers honor the `X-Frame-Options`_ HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of SAMEORIGIN then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to DENY then the browser will block the resource from loading in a frame no matter which site made the request."
msgstr ""

#: ../../ref/clickjacking.txt:43
# 0452fc71ea804445aaea2b665fee122f
msgid "Django provides a few simple ways to include this header in responses from your site:"
msgstr ""

#: ../../ref/clickjacking.txt:46
# 91707592044c48f6a3e5e7709d775837
msgid "A simple middleware that sets the header in all responses."
msgstr ""

#: ../../ref/clickjacking.txt:48
# 7a9498058d894c6cadc026b3e4d55513
msgid "A set of view decorators that can be used to override the middleware or to only set the header for certain views."
msgstr ""

#: ../../ref/clickjacking.txt:52
#: ../../ref/contrib/csrf.txt:27
# 02460b9bdda944fc979556ca825d65b8
# 57567e46abd740f8a055537e47f15ad0
msgid "How to use it"
msgstr ""

#: ../../ref/clickjacking.txt:55
# ff67281b552e4042a5ab64225b203110
msgid "Setting X-Frame-Options for all responses"
msgstr ""

#: ../../ref/clickjacking.txt:57
# 03f4727046ce460cb23c16d2fe88761a
msgid "To set the same X-Frame-Options value for all responses in your site, add ``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../ref/clickjacking.txt:67
# db7bdf9e574641cea8e41f407bbca558
msgid "By default, the middleware will set the X-Frame-Options header to SAMEORIGIN for every outgoing ``HttpResponse``. If you want DENY instead, set the :setting:`X_FRAME_OPTIONS` setting::"
msgstr ""

#: ../../ref/clickjacking.txt:73
# 5d701227067d4003b3bd7c911e64ca36
msgid "When using the middleware there may be some views where you do **not** want the X-Frame-Options header set. For those cases, you can use a view decorator that tells the middleware not to set the header::"
msgstr ""

#: ../../ref/clickjacking.txt:86
# f2b6c8ea41bd4399ad037e4d9c7cadcc
msgid "Setting X-Frame-Options per view"
msgstr ""

#: ../../ref/clickjacking.txt:88
# fb234d8c7a3e45968d857f9e61663bfb
msgid "To set the X-Frame-Options header on a per view basis, Django provides these decorators::"
msgstr ""

#: ../../ref/clickjacking.txt:103
# 8b59f6ff06c94dbc8fac057f07259f6d
msgid "Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware."
msgstr ""

#: ../../ref/clickjacking.txt:107
#: ../../ref/contrib/csrf.txt:299
# b7d8590e45994754967deb82b7e84106
# 443a16e082cc4e198846a75386a58134
msgid "Limitations"
msgstr ""

#: ../../ref/clickjacking.txt:109
# be0d6aeb97724226816bcce9f2cdb2aa
msgid "The `X-Frame-Options` header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need `other clickjacking prevention techniques`_."
msgstr ""

#: ../../ref/clickjacking.txt:114
# 1bf26134c5de462f853a6082574d51f2
msgid "Browsers that support X-Frame-Options"
msgstr ""

#: ../../ref/clickjacking.txt:116
# 3c9cecb57bed46f7a0142918d1bc27d9
msgid "Internet Explorer 8+"
msgstr ""

#: ../../ref/clickjacking.txt:117
# 237f909295424fa98de47553c4e55ce0
msgid "Firefox       3.6.9+"
msgstr ""

#: ../../ref/clickjacking.txt:118
# 8e78d760d33845f1a559649feb678cfb
msgid "Opera 10.5+"
msgstr ""

#: ../../ref/clickjacking.txt:119
# 85baf5d797b547f1bdf08fdbf487eeff
msgid "Safari        4+"
msgstr ""

#: ../../ref/clickjacking.txt:120
# 6c8f2774c6544fcd9fc1cd786a5bc8a7
msgid "Chrome        4.1+"
msgstr ""

#: ../../ref/clickjacking.txt:123
# 595e3bf9be81441ea1f5184e1831492d
msgid "See also"
msgstr ""

#: ../../ref/clickjacking.txt:125
# 04029f48863c419881f87dd1289c82a2
msgid "A `complete list`_ of browsers supporting X-Frame-Options."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:3
# b9b7867e1da849dd969bcf4ce0b9ac25
msgid "Admin actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:7
# a5df1a27440649d4baf34502744a1257
msgid "The basic workflow of Django's admin is, in a nutshell, \"select an object, then change it.\" This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:12
# 4574e82c0a7f45d9a4e4bcc4fffb651d
msgid "In these cases, Django's admin lets you write and register \"actions\" -- simple functions that get called with a list of objects selected on the change list page."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:16
# eb032eec485140df968d4a9e2e07c9f2
msgid "If you look at any change list in the admin, you'll see this feature in action; Django ships with a \"delete selected objects\" action available to all models. For example, here's the user module from Django's built-in :mod:`django.contrib.auth` app:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:25
# 625c2721fe0d4fd3bee5d5ac8a5ef764
msgid "The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` for efficiency reasons, which has an important caveat: your model's ``delete()`` method will not be called."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:30
# 7f7a6683d7f74f01b47f4552752bd3b6
msgid "If you wish to override this behavior, simply write a custom action which accomplishes deletion in your preferred manner -- for example, by calling ``Model.delete()`` for each of the selected items."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:34
# 0ce2e156e4bd4daf8a146e2d6274d81a
msgid "For more background on bulk deletion, see the documentation on :ref:`object deletion <topics-db-queries-delete>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:37
# 8c0db6b8ba7d4db8a12c37436dc74430
msgid "Read on to find out how to add your own actions to this list."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:40
# 1c6410e914534ebfa36ca25122bf8c25
msgid "Writing actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:42
# 366a642a021140a99404ef1a73bd9bfe
msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:44
# 74552a753bbb4702b51781e4b482c01a
msgid "A common use case for admin actions is the bulk updating of a model. Imagine a simple news application with an ``Article`` model::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:63
# 1fb39b0bd6d84d45a2a4001536458fee
msgid "A common task we might perform with a model like this is to update an article's status from \"draft\" to \"published\". We could easily do this in the admin one article at a time, but if we wanted to bulk-publish a group of articles, it'd be tedious. So, let's write an action that lets us change an article's status to \"published.\""
msgstr ""

#: ../../ref/contrib/admin/actions.txt:70
# 2671116c71714ce2a1eca07d6a010e97
msgid "Writing action functions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:72
# f618f4376dd6440790fd027389d7cde3
msgid "First, we'll need to write a function that gets called when the action is trigged from the admin. Action functions are just regular functions that take three arguments:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:76
# 5ab65e11fe03432184200ac801b5e591
msgid "The current :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:77
# 320eac45e5694214b8c6eb50c75ba42a
msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:78
# 7cf6f0416d7542e6986dac5be64ea0a9
msgid "A :class:`~django.db.models.query.QuerySet` containing the set of objects selected by the user."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:81
# f1b2ae08631b4baeb6e6d7e602b50b95
msgid "Our publish-these-articles function won't need the :class:`ModelAdmin` or the request object, but we will use the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:89
# 70d8c3e0bbba43709429ad6acbc23c51
msgid "For the best performance, we're using the queryset's :ref:`update method <topics-db-queries-update>`. Other types of actions might need to deal with each object individually; in these cases we'd just iterate over the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:97
# 3adc3d75afab43ef9c90399c32ab3bf6
msgid "That's actually all there is to writing an action! However, we'll take one more optional-but-useful step and give the action a \"nice\" title in the admin. By default, this action would appear in the action list as \"Make published\" -- the function name, with underscores replaced by spaces. That's fine, but we can provide a better, more human-friendly name by giving the ``make_published`` function a ``short_description`` attribute::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:110
# af510e24a486426182e04a542bcd484c
msgid "This might look familiar; the admin's ``list_display`` option uses the same technique to provide human-readable descriptions for callback functions registered there, too."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:115
# d4e68f782cfb48b4be9a6edd04f5e1a2
msgid "Adding actions to the :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:117
# 10ec960a5efc48d588c013e97287aae3
msgid "Next, we'll need to inform our :class:`ModelAdmin` of the action. This works just like any other configuration option. So, the complete ``admin.py`` with the action and its registration would look like::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:135
# 4d151727c0294d55abc2da8762a9a36f
msgid "That code will give us an admin change list that looks something like this:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:139
# 357afd746b16422895d3af5fb4156a2e
msgid "That's really all there is to it! If you're itching to write your own actions, you now know enough to get started. The rest of this document just covers more advanced techniques."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:144
# 951d2fa3ccc04ff99d204a4e73185fff
msgid "Advanced action techniques"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:146
# 8560e34cc36147d29d7b7249c4c707c3
msgid "There's a couple of extra options and possibilities you can exploit for more advanced options."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:150
# fb62461c2cb64e2384b401d8c9ef65e0
msgid "Actions as :class:`ModelAdmin` methods"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:152
# a80eb474cb4349bcbc4d59cfac1d9324
msgid "The example above shows the ``make_published`` action defined as a simple function. That's perfectly fine, but it's not perfect from a code design point of view: since the action is tightly coupled to the ``Article`` object, it makes sense to hook the action to the ``ArticleAdmin`` object itself."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:157
# 777cc411295a4fd3bf16862e5de918a7
msgid "That's easy enough to do::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:168
# 30eb6e4ed7454f0786fd2932a2c7e221
msgid "Notice first that we've moved ``make_published`` into a method and renamed the `modeladmin` parameter to `self`, and second that we've now put the string ``'make_published'`` in ``actions`` instead of a direct function reference. This tells the :class:`ModelAdmin` to look up the action as a method."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:173
# f7d8cf381f71488895a6c68437800159
msgid "Defining actions as methods gives the action more straightforward, idiomatic access to the :class:`ModelAdmin` itself, allowing the action to call any of the methods provided by the admin."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:179
# ba38c8ab24c145358dc5b32c2e7207c1
msgid "For example, we can use ``self`` to flash a message to the user informing her that the action was successful::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:193
# d29c1462b0f143159671394c811cc286
msgid "This make the action match what the admin itself does after successfully performing an action:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:199
# 6765ca7329034a4381356bdc36b4d264
msgid "Actions that provide intermediate pages"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:201
# 3303db28c16945d79b6d53c1431e0f3f
msgid "By default, after an action is performed the user is simply redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:207
# c7696467a0f043cb8939935bd9b0e3df
msgid "To provide an intermediary page, simply return an :class:`~django.http.HttpResponse` (or subclass) from your action. For example, you might write a simple export function that uses Django's :doc:`serialization functions </topics/serialization>` to dump some selected objects as JSON::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:221
# 679cd9e00c1b49b4bd692c87f391cb56
msgid "Generally, something like the above isn't considered a great idea. Most of the time, the best practice will be to return an :class:`~django.http.HttpResponseRedirect` and redirect the user to a view you've written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you'd want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that simply redirects to your custom export view::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:240
# 15244722c07c447d8822a57f7df4f195
msgid "As you can see, the action is the simple part; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the ``ContentType``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:244
# 2d525adab76f40eabccffc7eae894294
msgid "Writing this view is left as an exercise to the reader."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:249
# 1353cf56172a48fbae63355c595070a7
msgid "Making actions available site-wide"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:253
# 6c55305204f646b3a12ef39fb4b4f260
msgid "Some actions are best if they're made available to *any* object in the admin site -- the export action defined above would be a good candidate. You can make an action globally available using :meth:`AdminSite.add_action()`. For example::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:262
# 9b8d765ced034a05a44cc664de38446f
msgid "This makes the `export_selected_objects` action globally available as an action named `\"export_selected_objects\"`. You can explicitly give the action a name -- good if you later want to programatically :ref:`remove the action <disabling-admin-actions>` -- by passing a second argument to :meth:`AdminSite.add_action()`::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:273
# f31c15e60e9648e98e458bb7a109d98b
msgid "Disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:275
# 559a2b5e6ef14fa5a4f3db5d47ef3a51
msgid "Sometimes you need to disable certain actions -- especially those :ref:`registered site-wide <adminsite-actions>` -- for particular objects. There's a few ways you can disable actions:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:280
# 613f5f903911468eaa60946a15ec7ef1
msgid "Disabling a site-wide action"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:284
# 6ad766adf40a42b7b74de78963b5fc89
msgid "If you need to disable a :ref:`site-wide action <adminsite-actions>` you can call :meth:`AdminSite.disable_action()`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:287
# 60ad0344322040daad6ce604217f61ad
msgid "For example, you can use this method to remove the built-in \"delete selected objects\" action::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:292
# e39ac21342b94e6fa9b5a0960b55c6aa
msgid "Once you've done the above, that action will no longer be available site-wide."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:295
# 5545e755f2774b13ab5a84e8575548ea
msgid "If, however, you need to re-enable a globally-disabled action for one particular model, simply list it explicitly in your ``ModelAdmin.actions`` list::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:314
# 7e7b30de8769477ab569541c303240de
msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:316
# 00c0009a80524db9b4000cfd98b21bbc
msgid "If you want *no* bulk actions available for a given :class:`ModelAdmin`, simply set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:322
# 0be3afe274294f24acdadfda8a5653e1
msgid "This tells the :class:`ModelAdmin` to not display or allow any actions, including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:326
# 6650952499a94dedb2ce95cb9d49bf5e
msgid "Conditionally enabling or disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:330
# d9c3179543ea40d29d47f0eaf2850373
msgid "Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:333
# d13997b6f2094f168f000d74711ceba1
msgid "This returns a dictionary of actions allowed. The keys are action names, and the values are ``(function, name, short_description)`` tuples."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:336
# 62ad9385d48048dcb6dc8991256cde99
msgid "Most of the time you'll use this method to conditionally remove actions from the list gathered by the superclass. For example, if I only wanted users whose names begin with 'J' to be able to delete objects in bulk, I could do the following::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:3
# 1710632f8cf740c9bb5e2a196380e069
msgid "The Django admin documentation generator"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:10
# 547866f681224e708028e41f2bc6e22d
msgid "Django's :mod:`~django.contrib.admindocs` app pulls documentation from the docstrings of models, views, template tags, and template filters for any app in :setting:`INSTALLED_APPS` and makes that documentation available from the :mod:`Django admin <django.contrib.admin>`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:15
# 2c51488cde474ccba8c3ed082c628a9e
msgid "In addition to providing offline documentation for all template tags and template filters that ship with Django, you may utilize admindocs to quickly document your own code."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:20
#: ../../ref/contrib/admin/index.txt:15
#: ../../ref/contrib/comments/moderation.txt:19
#: ../../ref/contrib/contenttypes.txt:13
#: ../../ref/contrib/formtools/form-preview.txt:18
#: ../../ref/contrib/gis/gdal.txt:30
#: ../../ref/contrib/gis/install.txt:10
#: ../../ref/contrib/sitemaps.txt:14
#: ../../ref/contrib/syndication.txt:34
# ce4e4b219460452db0607d4a91e5f260
# 5d4c2775aba3411aa612f30171798a5a
# 7d3a36644ed4457eb3a69fe031725401
# d4d8139392a94162a57a192cfd6b19e6
# 60843cc274b34130beaff185929214a3
# c6ea4b68dbe14b01b8008022398b3c1a
# 5b894aec77f6401eadc36c9d04fd5637
# cbbe22c037cf497cb838df4e1525e2a2
# 4f00eeb308bd4b3abe4c01ce37c7d7dd
msgid "Overview"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:22
# 3b1b5a89ee6e43bc9c5ba1515468d926
msgid "To activate the :mod:`~django.contrib.admindocs`, you will need to do the following:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:25
# fd0ab4946ee74a76b7fdce9a06a58b4d
msgid "Add :mod:`django.contrib.admindocs` to your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:26
# 30d7d4c388d649c785231ac78cf9767e
msgid "Add ``(r'^admin/doc/', include('django.contrib.admindocs.urls'))`` to your :data:`urlpatterns`. Make sure it's included *before* the ``r'^admin/'`` entry, so that requests to ``/admin/doc/`` don't get handled by the latter entry."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:30
# 28a9c9e182274925877643e008d8315d
msgid "Install the docutils Python module (http://docutils.sf.net/)."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:31
# ced5034200fa42f496bdfcd357490aac
msgid "**Optional:** Linking to templates requires the :setting:`ADMIN_FOR` setting to be configured."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:33
# 6d6daffb867b41e8a0826049d0949a42
msgid "**Optional:** Using the admindocs bookmarklets requires the :mod:`XViewMiddleware<django.middleware.doc>` to be installed."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:36
# dacf9d6f9d0045e08140a267dac0ef78
msgid "Once those steps are complete, you can start browsing the documentation by going to your admin interface and clicking the \"Documentation\" link in the upper right of the page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:41
# 30faed90b6014504b5b41562fe183f87
msgid "Documentation helpers"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:43
# b5ba5d17a9c04c11b5d7e629dff79b13
msgid "The following special markup can be used in your docstrings to easily create hyperlinks to other components:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:47
# a12a00f82f2c4617abd4feb5062734b5
msgid "Django Component"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:47
# 13a24015dc0241e09188e3ff84e2e49f
msgid "reStructuredText roles"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:49
#: ../../ref/models/index.txt:3
#: ../../ref/unicode.txt:207
# 589af53f23e24273bf12268136895920
# 0a56ab45cd2943af96140022f244deb5
# 79852186ca6f4a5faf830f07ea2d8f63
msgid "Models"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:49
# 02e1ca7979334febbda5b4d825612b50
msgid "``:model:`appname.ModelName```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
# 4a9517c4f79745ef890d6ea95c9dda17
msgid "Views"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
# 38373199e4654c648ea4d024b3ba5f37
msgid "``:view:`appname.view_name```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:51
#: ../../ref/contrib/staticfiles.txt:359
#: ../../ref/contrib/webdesign.txt:19
# f2aecced468d44db8fc8f206257c90e2
# a84c98ed1c094820ab5b485b8c9e562f
# d31e5be305cf4420aba690efe5d0dd0b
msgid "Template tags"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:51
# fdf5cbbb875a408094bee644823c9766
msgid "``:tag:`tagname```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
# bc744e39d3984eaf89ad9fecbbd39078
msgid "Template filters"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
# 87f9781b70d34be5a8e5e31e9be85469
msgid "``:filter:`filtername```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
#: ../../ref/templates/index.txt:3
#: ../../ref/unicode.txt:275
# 287c02b6fafd4d30a61eb2bfd0bc047e
# 992e4909f56542cfb1008d2046d42ebb
# 519befdfb0524ed2945a77568b8f5fe2
msgid "Templates"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
# be98eec0a3f14167b70af5a922a6abf1
msgid "``:template:`path/to/template.html```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:57
# 138349b042224e4ca557e10f5620e333
msgid "Model reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:59
# 864d065f552e4bf7a2ec1dc2a8ee3aa9
msgid "The **models** section of the ``admindocs`` page describes each model in the system along with all the fields and methods available on it. Relationships to other models appear as hyperlinks. Descriptions are pulled from ``help_text`` attributes on fields or from docstrings on model methods."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:64
# d95c3fd36b70435bb99feec8ac1c235d
msgid "A model with useful documentation might look like this::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:82
# e19a8455392e43e4944fa6b9d1adcb3c
msgid "View reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:84
# 6e49a9f808fb416c9f8f82ae46693675
msgid "Each URL in your site has a separate entry in the ``admindocs`` page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:88
# 2a5924be58f34f78b798b10e54ee8fb8
msgid "A short description of what the view does."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:89
# d46fb1fc714e40d1bf7bc9476e2c2df4
msgid "The **context**, or a list of variables available in the view's template."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:90
# 02f3b67135a142dea9fc860e9c26a628
msgid "The name of the template or templates that are used for that view."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:92
#: ../../ref/contrib/admin/index.txt:514
#: ../../ref/contrib/comments/index.txt:101
#: ../../ref/contrib/comments/index.txt:117
#: ../../ref/contrib/comments/index.txt:151
#: ../../ref/contrib/comments/index.txt:177
#: ../../ref/contrib/comments/index.txt:200
#: ../../ref/contrib/gis/db-api.txt:107
#: ../../ref/contrib/gis/geos.txt:709
#: ../../ref/contrib/staticfiles.txt:214
#: ../../ref/django-admin.txt:930
#: ../../ref/django-admin.txt:1000
#: ../../ref/forms/widgets.txt:134
#: ../../ref/models/instances.txt:374
#: ../../ref/models/instances.txt:420
#: ../../ref/models/querysets.txt:467
#: ../../ref/models/querysets.txt:1008
#: ../../ref/models/querysets.txt:1166
#: ../../ref/models/querysets.txt:1184
#: ../../ref/request-response.txt:268
#: ../../ref/templates/builtins.txt:1143
#: ../../ref/templates/builtins.txt:1162
#: ../../ref/templates/builtins.txt:1192
#: ../../ref/templates/builtins.txt:1225
#: ../../ref/templates/builtins.txt:1239
#: ../../ref/templates/builtins.txt:1252
#: ../../ref/templates/builtins.txt:1265
#: ../../ref/templates/builtins.txt:1368
#: ../../ref/templates/builtins.txt:1408
#: ../../ref/templates/builtins.txt:1425
#: ../../ref/templates/builtins.txt:1439
#: ../../ref/templates/builtins.txt:1479
#: ../../ref/templates/builtins.txt:1517
#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1545
#: ../../ref/templates/builtins.txt:1563
#: ../../ref/templates/builtins.txt:1640
#: ../../ref/templates/builtins.txt:1658
#: ../../ref/templates/builtins.txt:1671
#: ../../ref/templates/builtins.txt:1685
#: ../../ref/templates/builtins.txt:1699
#: ../../ref/templates/builtins.txt:1712
#: ../../ref/templates/builtins.txt:1727
#: ../../ref/templates/builtins.txt:1742
#: ../../ref/templates/builtins.txt:1756
#: ../../ref/templates/builtins.txt:1781
#: ../../ref/templates/builtins.txt:1794
#: ../../ref/templates/builtins.txt:1810
#: ../../ref/templates/builtins.txt:1829
#: ../../ref/templates/builtins.txt:1880
#: ../../ref/templates/builtins.txt:1893
#: ../../ref/templates/builtins.txt:1914
#: ../../ref/templates/builtins.txt:1979
#: ../../ref/templates/builtins.txt:1997
#: ../../ref/templates/builtins.txt:2010
#: ../../ref/templates/builtins.txt:2032
#: ../../ref/templates/builtins.txt:2103
#: ../../ref/templates/builtins.txt:2121
#: ../../ref/templates/builtins.txt:2136
#: ../../ref/templates/builtins.txt:2156
#: ../../ref/templates/builtins.txt:2199
#: ../../ref/templates/builtins.txt:2212
#: ../../ref/templates/builtins.txt:2258
#: ../../ref/templates/builtins.txt:2287
#: ../../ref/templates/builtins.txt:2304
#: ../../ref/templates/builtins.txt:2319
#: ../../ref/templates/builtins.txt:2338
#: ../../ref/utils.txt:373
# df6c3a00a9c64317bd8019a0adbcac3d
# 0d1ed82ecd5a4418b174eea01ea64356
# 8c38973a8a5e414b935286d2bfed980f
# 247d042b31e246b3836a368388c70c63
# 336172f961634e72811f87e7c6301978
# 9f325a0fb944434f8df8330b4f83af6e
# a871825a08484f8b9495e3dfcaeb1c89
# 3017f02ee76c48c2954671b5552adee7
# e583fc05eeb84159bcde8d2132453de2
# c25bfd1732f240a1a20be33c8152a67b
# 283e330da184499fbadd90bd9d104a1a
# 9f248e1855124617a127e35b3f459494
# 460910d8befa45c89b69083d6fbc46ef
# 928b57dec60f44caa595600147e70c3b
# ec9ad790ab4b4105b71d5241481d26b4
# a3d57679d0c24dd4b8ea1f08579a1f02
# 686e371a995948eaacb893397bd15f37
# aa13a38a089d43e7b552d8fb2a3e2934
# c89a31d13725481dbf730465a66bda0e
# 27da32c2bcf546208c9cdda937d99937
# d01311e77b3a4f868bc22cbc63cc7c8d
# c8e71495f9d94ce182fb9a7b211aceb6
# f962b37559fa4755a70df76f4eb0eaf9
# 1447daf2f356404e87834b04445b6910
# ecfadc163eda4eea92b83c62cfe9de82
# 1f330c6dae8b4ca1b903e506477c1c53
# e7b00a7d25fd469ba8ab00d74f8e39e3
# e589ae222cd14cde9527f9f62e7a4a76
# 2f161499a89d4bd9875fb8849ab08f7d
# cf8854a54da145e19fd05db955dcd615
# cc1155c2dd694bc788a7fb08d9d3d182
# 7b70af47b68e478a90aef480940d5e9d
# d872f9526f934d3e853c1e89919eed22
# 2ca3038055e74221843979621b937879
# cad4fc053040432dadf18e04e5eac68b
# 44a704744b444a94b96a8c45278d078c
# 8b65f4dbeba24ec0969aa69d288d5b81
# 0974f110f83b4c3a96e629d40f2d6267
# ee103f29219041b9ac7837c6849147e0
# 2205319223ad46d2aa27f63b2dfeaf28
# 29ee458de88b42f9a37fa721e41a6a13
# 5a7fef83678a499e9a7ecbde0c7f13dd
# 630bd2cc1cdd475ea49ab9e98ea8f3b3
# d320334a0ca64fdeb7e5cee3101ded93
# 3663602d58a144c28885d86a60ba942c
# 8a723c4f962c433ea54a901e67239455
# 131092ab96e1480aa3d07e356874c539
# 2a74b64381274ce9ae8db110e25c4801
# 13e6943e6dab4a8f815bffd2b7d27ef2
# 5a674f1a58d84c0cbedf7d8cdbcf5941
# 08fdf44a7e6b48b48f6711fde3c88b14
# 3039d385e2d3482c930a0ea165a1ffc4
# c504e4e9259c43c2b12fb3dbd5018ffc
# 012a4201ec044f29af1a890b3f0adbef
# 734fb56df06a49cc85a80c04447d915f
# 83293fe7150648209ea79ecf14e9946b
# ea1215b2b60a456da82cf2292e8d087b
# f99ac175a2ef4633b470b38f670d23a7
# 8b95625851024ee8b9101416948f6558
# 06192542bc7640da8049010eb6174bbb
# e058f549ebf84a9ea9da8ac60430b762
# 82a8f95a4c974a3696cbdb44c7d6b68c
# fa0a9b8760c04092bca878b6a167b58b
# 92c5bc317fc0498981fbf422eab23de1
# 213e4f8359d2493b85a354acde6f7edd
# ff505052f7e44f888a4ec4f85802774b
# 73a2ffff35094b2cbb446a5004778f60
# b0a93d56f48943fb8e62d9b9b4589f9b
msgid "For example::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:118
# 3e06200341dc4d09a3f84cd4f075444c
msgid "Template tags and filters reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:120
# 29683f78bd5145418023af927c2bf317
msgid "The **tags** and **filters** ``admindocs`` sections describe all the tags and filters that come with Django (in fact, the :ref:`built-in tag reference <ref-templates-builtins-tags>` and :ref:`built-in filter reference <ref-templates-builtins-filters>` documentation come directly from those pages). Any tags or filters that you create or are added by a third-party app will show up in these sections as well."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:129
# d655d8e493fe466383ba2ef0ec2e6ce9
msgid "Template reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:131
# 235f712d47e74605a4c5c59f5181bee4
msgid "While ``admindocs`` does not include a place to document templates by themselves, if you use the ``:template:`path/to/template.html``` syntax in a docstring the resulting page will verify the path of that template with Django's :ref:`template loaders <template-loaders>`. This can be a handy way to check if the specified template exists and to show where on the filesystem that template is stored."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:140
# 960608937c1b460dae2497760eb1a742
msgid "Included Bookmarklets"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:142
# f4706fab03f045d3aa2bcc873b9dd79f
msgid "Several useful bookmarklets are available from the ``admindocs`` page:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:145
# 7923c4a6047d426586b8add734af4d3f
msgid "Jumps you from any page to the documentation for the view that generates that page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:149
# 10f6400bf3b34abcbb3fd13dcb55dc07
msgid "Shows the content-type and unique ID for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:153
# 12dc4c5b676b46b4811e0d1af1cb796a
msgid "Jumps to the admin page for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:155
# 810671b2899f47cbb496cdc829310e36
msgid "Using these bookmarklets requires that you are either logged into the :mod:`Django admin <django.contrib.admin>` as a :class:`~django.contrib.auth.models.User` with :attr:`~django.contrib.auth.models.User.is_staff` set to `True`, or that the :mod:`django.middleware.doc` middleware and :mod:`XViewMiddleware <django.middleware.doc>` are installed and you are accessing the site from an IP address listed in :setting:`INTERNAL_IPS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:3
# 47a063c1ce7749ffbcb8b6bda5c05ab0
msgid "The Django admin site"
msgstr ""

#: ../../ref/contrib/admin/index.txt:8
# e5203164c3904d81babf9342f471af69
msgid "One of the most powerful parts of Django is the automatic admin interface. It reads metadata in your model to provide a powerful and production-ready interface that content producers can immediately use to start adding content to the site. In this document, we discuss how to activate, use and customize Django's admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:17
# 6ff4ce1428a4496ea1cb73fc65de7af2
msgid "There are seven steps in activating the Django admin site:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:19
# 8e48b2efa32e4374911dba93ca394513
msgid "Add ``'django.contrib.admin'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/admin/index.txt:22
# 7839518fd00249dab1dcfa06ee596634
msgid "The admin has four dependencies - :mod:`django.contrib.auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages` and :mod:`django.contrib.sessions`.  If these applications are not in your :setting:`INSTALLED_APPS` list, add them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:28
# 0aeb7fc02b75448f9e219caee558b7e4
msgid "Add ``django.contrib.messages.context_processors.messages`` to :setting:`TEMPLATE_CONTEXT_PROCESSORS` and :class:`~django.contrib.messages.middleware.MessageMiddleware` to :setting:`MIDDLEWARE_CLASSES`. (These are both active by default, so you only need to do this if you've manually tweaked the settings.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:34
# 84ff2589662545149e97f336c98e48a1
msgid "Determine which of your application's models should be editable in the admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:37
# e1cecc8b0b2a4cb7a85d10636210b294
msgid "For each of those models, optionally create a ``ModelAdmin`` class that encapsulates the customized admin functionality and options for that particular model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:41
# c0e58fa2ad3b4078a03fcccdb2cd4443
msgid "Instantiate an ``AdminSite`` and tell it about each of your models and ``ModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:44
# 291badc38ef8404f870cfdfabb7bff2b
msgid "Hook the ``AdminSite`` instance into your URLconf."
msgstr ""

#: ../../ref/contrib/admin/index.txt:46
# 27701bf8e1064a11a49d851bb1a2ecf2
msgid "After you've taken these steps, you'll be able to use your Django admin site by visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:50
# 5abef8d0d0a24c57b8fc74fed21a1523
msgid "Other topics"
msgstr ""

#: ../../ref/contrib/admin/index.txt:60
# 7b4dcbee91dd4f57890d12e2460af605
msgid "For information about serving the static files (images, JavaScript, and CSS) associated with the admin in production, see :ref:`serving-files`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:64
# 8ba6a70d7a3746039e12310b761c3bb5
msgid "``ModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:68
# 590433618e8b46ada1812e9bd487222e
msgid "The ``ModelAdmin`` class is the representation of a model in the admin interface. These are stored in a file named ``admin.py`` in your application. Let's take a look at a very simple example of the ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:82
# 593a30967ad74d72b47f95d897e24b26
msgid "In the preceding example, the ``ModelAdmin`` class doesn't define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don't need to define a ``ModelAdmin`` object at all -- you can register the model class without providing a ``ModelAdmin`` description. The preceding example could be simplified to::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:95
# cad4cb4c1b0943ca98a65481aae3c729
msgid "``ModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:97
# 724dd3a2a7f54f5f84b556edf87a08f5
msgid "The ``ModelAdmin`` is very flexible. It has several options for dealing with customizing the interface. All options are defined on the ``ModelAdmin`` subclass::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:106
# 423eae45f1bc4b639cd6db16600cbb10
msgid "A list of actions to make available on the change list page. See :doc:`/ref/contrib/admin/actions` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:112
# 28dcd5c81f2145ebac6ed60458fa5dfd
msgid "Controls where on the page the actions bar appears. By default, the admin changelist displays actions at the top of the page (``actions_on_top = True; actions_on_bottom = False``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:120
# 9ec778b8cdae4d84bb235ea44ee586dd
msgid "Controls whether a selection counter is display next to the action dropdown. By default, the admin changelist will display it (``actions_selection_counter = True``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:126
# 273ec38fc9f941849499bd20bf0898e9
msgid "Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` in your model, and the change list page will include a date-based drilldown navigation by that field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:130
#: ../../ref/contrib/admin/index.txt:250
#: ../../ref/contrib/admin/index.txt:273
#: ../../ref/contrib/admin/index.txt:398
#: ../../ref/contrib/csrf.txt:339
#: ../../ref/contrib/gis/deployment.txt:33
#: ../../ref/contrib/gis/deployment.txt:68
#: ../../ref/contrib/gis/gdal.txt:904
#: ../../ref/contrib/gis/geoquerysets.txt:37
#: ../../ref/contrib/gis/geoquerysets.txt:59
#: ../../ref/contrib/gis/geoquerysets.txt:81
#: ../../ref/contrib/gis/geoquerysets.txt:102
#: ../../ref/contrib/gis/geoquerysets.txt:131
#: ../../ref/contrib/gis/geoquerysets.txt:151
#: ../../ref/contrib/gis/geoquerysets.txt:172
#: ../../ref/contrib/gis/geoquerysets.txt:192
#: ../../ref/contrib/gis/geoquerysets.txt:212
#: ../../ref/contrib/gis/geoquerysets.txt:247
#: ../../ref/contrib/gis/geoquerysets.txt:287
#: ../../ref/contrib/gis/geoquerysets.txt:311
#: ../../ref/contrib/gis/geoquerysets.txt:328
#: ../../ref/contrib/gis/geoquerysets.txt:350
#: ../../ref/contrib/gis/geoquerysets.txt:373
#: ../../ref/contrib/gis/geoquerysets.txt:391
#: ../../ref/contrib/gis/geoquerysets.txt:409
#: ../../ref/contrib/gis/geoquerysets.txt:428
#: ../../ref/contrib/gis/geoquerysets.txt:446
#: ../../ref/contrib/gis/geoquerysets.txt:464
#: ../../ref/contrib/gis/geoquerysets.txt:482
#: ../../ref/contrib/gis/geoquerysets.txt:500
#: ../../ref/contrib/gis/geoquerysets.txt:541
#: ../../ref/contrib/gis/geoquerysets.txt:561
#: ../../ref/contrib/gis/geoquerysets.txt:581
#: ../../ref/contrib/gis/geoquerysets.txt:601
#: ../../ref/contrib/gis/geoquerysets.txt:621
#: ../../ref/contrib/gis/geoquerysets.txt:873
#: ../../ref/contrib/gis/geoquerysets.txt:990
#: ../../ref/contrib/gis/geoquerysets.txt:1023
#: ../../ref/contrib/gis/geoquerysets.txt:1128
#: ../../ref/contrib/gis/geoquerysets.txt:1146
#: ../../ref/contrib/gis/geoquerysets.txt:1162
#: ../../ref/contrib/gis/geoquerysets.txt:1184
#: ../../ref/contrib/gis/geoquerysets.txt:1203
#: ../../ref/contrib/gis/geos.txt:742
#: ../../ref/contrib/gis/geos.txt:755
#: ../../ref/contrib/gis/geos.txt:771
#: ../../ref/contrib/gis/geos.txt:780
#: ../../ref/contrib/gis/geos.txt:835
#: ../../ref/contrib/gis/geos.txt:858
#: ../../ref/models/instances.txt:71
#: ../../ref/models/options.txt:90
#: ../../ref/models/querysets.txt:261
#: ../../ref/models/querysets.txt:449
#: ../../ref/models/querysets.txt:900
#: ../../ref/models/querysets.txt:969
#: ../../ref/models/querysets.txt:1027
#: ../../ref/models/querysets.txt:1397
#: ../../ref/models/querysets.txt:1423
#: ../../ref/models/querysets.txt:1683
#: ../../ref/models/querysets.txt:1708
#: ../../ref/models/querysets.txt:1733
#: ../../ref/models/querysets.txt:1754
#: ../../ref/models/querysets.txt:1827
#: ../../ref/models/querysets.txt:1863
#: ../../ref/models/querysets.txt:1881
#: ../../ref/models/querysets.txt:1902
#: ../../ref/models/querysets.txt:1923
#: ../../ref/models/querysets.txt:1944
#: ../../ref/models/querysets.txt:1964
#: ../../ref/models/querysets.txt:1982
#: ../../ref/models/querysets.txt:1999
#: ../../ref/models/querysets.txt:2022
#: ../../ref/models/querysets.txt:2048
#: ../../ref/models/querysets.txt:2064
#: ../../ref/models/querysets.txt:2091
#: ../../ref/models/querysets.txt:2115
#: ../../ref/models/relations.txt:41
#: ../../ref/settings.txt:1284
#: ../../ref/templates/builtins.txt:621
#: ../../ref/templates/builtins.txt:742
#: ../../ref/templates/builtins.txt:1843
#: ../../ref/templates/builtins.txt:1853
#: ../../ref/templates/builtins.txt:1860
#: ../../ref/templates/builtins.txt:1964
# a2bf193f14f8400baea2d89f879dbbb4
# eb48a7646fdf4f9f8035db6da2be1cfb
# 464e2e66989947e1b54afec4a96f938f
# 37cd90ab882a489aaeecf55065067589
# 420e8c7a2eb049e8beb08882c882dd3a
# b0b9a285fa574631822c72679a773fc4
# 530f4f763dc54dffbab301147cec3103
# 3421f1417428486588d258a9039d048c
# 0c56a4c9c7bb464fb22dbe455899c5e4
# b1fa91930a5f4063863ecde11348a174
# f82c8cda498f4286b5ba9b50004f2e1a
# b173bdd43a2a4f24b4f98dad2905998c
# be60d6f60d4242cea5192963f773f240
# 96a217ebbf0a427fb412afe26c494f63
# f6b9072d5f1146f2bc70f36e08451f68
# bf394d3f52d449eea6156e8720fb846d
# 3ad75728ac7a458ea2e7024f6b12b1a0
# 7537c7ec12d7412da040b44db270eb5e
# cacc4e303c7d4ac793afd9ea34e32618
# 2b135929852947e293b1f83afc46ccaa
# 48c413a392bc40519685b5ed922d3c9d
# 9f03f6f0215b47b8b98a3a93dd65038a
# 3db08a5e91fa4694a5895a1bb9e49471
# ecca5d13ce394aec8c5e4e2c616b22c3
# e10c1fb461ea4319b2ccea4488f1383c
# 8061f6f3eb824d88bbbc44d0934cce38
# 7ad6d518129b4e02b35917c9c602c3f1
# c1ff3f3b6d944b278e67eb8f6fbf6b69
# ddef062b96e249db8c8575eaecf0342a
# 40ba7c0fa54d4ef6ba9bd5c9c9ccb48e
# 02248ccdfc71414eac7655d3a93dc8a7
# 015db923c3bf4dcdaa5f82ef5c4dbe7f
# 58798070240e46b39cd4145bfd388902
# 52a925ab6858455a840f612239697628
# fe14d985e44046c5a4c61147781f3808
# 2a659547fb2e448fbcf692fec49ca192
# 2b0cce102d4f41e0aa42d4dc7ad6046f
# 01819cda2ea94834a46df42b7b1917d8
# a4fe58db47ce4d2185d7c71fa407c2b8
# b2bd066e5bc64df19ea142837cbd86d2
# 12404eefbe9d4f429ee057e998dce6ae
# 13b37d599cfa42949e19606d88de43e8
# a36e25090f2d40908e6655a675fb63a9
# c90bae4511ff487ba64d36eaf0637b7b
# e9c9c5fa822b4fd4bf9ef51ac28fa7a2
# 1db250ef0f2048278bbc8f1f342ebca9
# e2c8d4acb1654b78b932a9dcca9521e3
# c05940acd4114a1cb1feb561f62f97cb
# 33321d98d9844e699a8c2849c21e8514
# b20e61a33ff14fc7ad381f87ec834b43
# a02c2f45012c43b9922784be8d3cd5c1
# c1b33a72dd2d4284b051cb12964cfc6c
# 73a7f92aa0d34c63b688ad77e1d06a6f
# f86c8bde78064a80bb3ceea75309282d
# 6706660dab6f44588607c0d74eb4597b
# 2ea26e4699d74efc92b7f2e32f7ae83a
# 19fa0a75ec0a47a7aaed24ce41e3bb81
# 2025e10e08e643a893775e4f456145b1
# 387c6af13f614f65a072fe2d15102cd9
# 0b9166db675b4830bd6f7b06714749de
# 7ba284443ba94deeb9574a773a33288e
# 33a16b0b94624981b02b0424653f652c
# f2b01bbb93a04ea8acf416b6f0c10e38
# d9199194d3b74eee99aa66e4d207d9e3
# 6974413b844041d8a7a2bfcbe311774a
# dc58325af32b44c59c3e3a6e24a39689
# ce709894d7054693bbbb1b8e24b94029
# 294d97568a5a43608037b54b3b0a599a
# 70595612aae048a3822ce4c56b1b0cc6
# ba9637dd94ca439ea80b99b788568ddb
# 578dbe0748214e868d7b2fd851dcf323
# ba40e37a9dc54d5fb3b098ed3ba9fd5d
# 828de8d84d284e18bb9e3cd3cf41e8ec
# f3bdc1f2292f4b38a2f67238500e1d4e
# ab703d54cfbd4e98b97b86136e7fc72d
# c3262a6e6d6d441eb4872b40bfbf2f4e
# 50b1cd55d3764342ab9ba95964a9152f
# 5903b2fc5a034a319f000f02b089fa5f
# ab9c217f402a4c9fa85105c088e3d00d
# f763290286344aa9851e1b7ee4196e5e
# 6d3ca113a82a44b299b46cdc55f11092
# 82f91e5e24774d45be0c73ad6fe1eeff
# b4e661c008c14b75a8c80f85c9c95e3e
# 3b3eed7747534d36a1f92730b899cfbd
msgid "Example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:136
# ceb4d336b99e40d6a07eb993ad47fabe
msgid "This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it'll show the day-level drill-down only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:142
# 69569d9014b649dd9cd2a0b860a39b8d
msgid "This attribute, if given, should be a list of field names to exclude from the form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:145
# 1292f5ddef6a409bb7419680e31e9c64
msgid "For example, let's consider the following model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:152
# a9fca18b437e45359d169275604c1d2b
msgid "If you want a form for the ``Author`` model that includes only the ``name`` and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:162
# 05d90819b7b441acbae65899e566cf04
msgid "Since the Author model only has three fields, ``name``, ``title``, and ``birth_date``, the forms resulting from the above declarations will contain exactly the same fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:168
# 3fc7f1dfde54461fa8ae492a6396f490
msgid "If you need to achieve simple changes in the layout of fields in the forms of the \"add\" and \"change\" pages like only showing a subset of the available fields, modifying their order or grouping them in rows you can use the ``fields`` option (for more complex layout needs see the :attr:`~ModelAdmin.fieldsets` option described in the next section). For example, you could define a simpler version of the admin form for the ``django.contrib.flatpages.FlatPage`` model as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:179
# d20b54e3e6944946999845752cd14465
msgid "In the above example, only the fields ``url``, ``title`` and ``content`` will be displayed, sequentially, in the form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:184
# 52bbf457405e4e40aaf470ae86e0f361
msgid "``fields`` can contain values defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:189
# 2f03c71e3929422fbbfabc63b11e9050
msgid "To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the ``url`` and ``title`` fields will display on the same line and the ``content`` field will be displayed below them in its own line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:199
# 657a0e3bfef54936bb6d9de1d64fa3db
msgid "This ``fields`` option should not be confused with the ``fields`` dictionary key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in the next section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:203
# a730fafd90c14795bc37edcbcf0e5ba7
msgid "If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, Django will default to displaying each field that isn't an ``AutoField`` and has ``editable=True``, in a single fieldset, in the same order as the fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:210
# dcad9fdc56fb4329b4d58f1a329e8b65
msgid "Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:212
# e4763fb3a0f5457b8c73f281d31cb689
msgid "``fieldsets`` is a list of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of the form.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:216
# 33d2978f0c874b38b35a054025285b7a
msgid "The two-tuples are in the format ``(name, field_options)``, where ``name`` is a string representing the title of the fieldset and ``field_options`` is a dictionary of information about the fieldset, including a list of fields to be displayed in it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:221
# 6d9903b0a96e44cca591754f047d15fb
msgid "A full example, taken from the :class:`django.contrib.flatpages.FlatPage` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:235
# e24855d2a3434fd8a796b96f7bf22658
msgid "This results in an admin page that looks like:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:239
# 7fb1f54f6ccc45e99fb6217fa7a3c317
msgid "If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, Django will default to displaying each field that isn't an ``AutoField`` and has ``editable=True``, in a single fieldset, in the same order as the fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:244
# 10d281bd8b074827bb1e9d4cdec1774c
msgid "The ``field_options`` dictionary can have the following keys:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:247
# 7e47066fd6064f01998a71ed9940a648
msgid "A tuple of field names to display in this fieldset. This key is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:256
# 0b3b8ff25ae840d5b6f2570674321d77
msgid "Just like with the :attr:`~ModelAdmin.fields` option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the ``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:267
# 243a165553fe497bbeaa8a3e0e8400d0
msgid "``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:271
# 88d4a96678224aa79809b25583ed707b
msgid "A list containing extra CSS classes to apply to the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:279
# ebe61b433de7467c8bfff1ef2e237a81
msgid "Two useful classes defined by the default admin site stylesheet are ``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be initially collapsed in the admin and replaced with a small \"click to expand\" link. Fieldsets with the ``wide`` style will be given extra horizontal space."
msgstr ""

#: ../../ref/contrib/admin/index.txt:286
# b576cb04938a4226b56621cc2d4f0c68
msgid "A string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:289
# 5bb56a5744b54e5fbae48c2327edfac3
msgid "Note that this value is *not* HTML-escaped when it's displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and ``django.utils.html.escape()`` to escape any HTML special characters."
msgstr ""

#: ../../ref/contrib/admin/index.txt:297
# 2e372d1266cb476baad6cc8d4e5a3db7
msgid "By default, a :class:`~django.db.models.ManyToManyField` is displayed in the admin site with a ``<select multiple>``. However, multiple-select boxes can be difficult to use when selecting many items. Adding a :class:`~django.db.models.ManyToManyField` to this list will instead use a nifty unobtrusive JavaScript \"filter\" interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See :attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:308
# 4b7585c8872141a1ad23b0f37e0c7769
msgid "Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display of the filter interface with the box of unselected options appearing above the box of selected options."
msgstr ""

#: ../../ref/contrib/admin/index.txt:314
# 4d7d4f2423ac4211b9a7d7f9d18a4e77
msgid "By default a ``ModelForm`` is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own ``ModelForm`` to override any default form behavior on the add/change pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:319
# 6fb742a7a3f1460ea66fe8c490c03457
msgid "For an example see the section `Adding custom validation to the admin`_."
msgstr ""

#: ../../ref/contrib/admin/index.txt:323
# b6bdeec4371544b09dd277ac2ae38da5
msgid "If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option then ``ModelAdmin`` takes precedence::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:336
# 850fdb00e88d4c319299beadd401b0d7
msgid "In the above example, the \"age\" field will be excluded but the \"name\" field will be included in the generated form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:341
# 9023524bed1d4093b42ed60f76fe3751
msgid "This provides a quick-and-dirty way to override some of the :class:`~django.forms.Field` options for use in the admin. ``formfield_overrides`` is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time."
msgstr ""

#: ../../ref/contrib/admin/index.txt:346
# 4f82fcdc0574426d97316c8bb7fcc337
msgid "Since that's a bit abstract, let's look at a concrete example. The most common use of ``formfield_overrides`` is to add a custom widget for a certain type of field. So, imagine we've written a ``RichTextEditorWidget`` that we'd like to use for large text fields instead of the default ``<textarea>``. Here's how we'd do that::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:364
# 3b72e79330ac4ef69ae3f34161af0992
msgid "Note that the key in the dictionary is the actual field class, *not* a string. The value is another dictionary; these arguments will be passed to :meth:`~django.forms.Field.__init__`. See :doc:`/ref/forms/api` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:371
# fd540cc466cc4e8895ec99bee573892d
msgid "If you want to use a custom widget with a relation field (i.e. :class:`~django.db.models.ForeignKey` or :class:`~django.db.models.ManyToManyField`), make sure you haven't included that field's name in ``raw_id_fields`` or ``radio_fields``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:376
# 807ca0726e234f63b47492431142f29e
msgid "``formfield_overrides`` won't let you change the widget on relation fields that have ``raw_id_fields`` or ``radio_fields`` set. That's because ``raw_id_fields`` and ``radio_fields`` imply custom widgets of their own."
msgstr ""

#: ../../ref/contrib/admin/index.txt:385
# 1c8b4658a1b949e4ac9d2b93b7591314
msgid "Returns the Changelist class to be used for listing. By default, ``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this class you can change the behavior of the listing."
msgstr ""

#: ../../ref/contrib/admin/index.txt:391
# 5ae9a95cbd8d482b9f449a358d8a0307
msgid "See :class:`InlineModelAdmin` objects below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:395
# 6b047cda3e594dfd92d7c334cd5d06fb
msgid "Set ``list_display`` to control which fields are displayed on the change list page of the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:402
# f1fbeccc4c0b4299b600960bca97de04
msgid "If you don't set ``list_display``, the admin site will display a single column that displays the ``__unicode__()`` representation of each object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:405
# 1bb3180059c44bb3a9c52697b81210f9
msgid "You have four possible values that can be used in ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:407
# e18f775ff9ad436fb9cb4f021f18ac97
msgid "A field of the model. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:412
# 72491bcd0906421e88b43eca73b4f994
msgid "A callable that accepts one parameter for the model instance. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:422
# fea14fa6a8974657b8d759f630261e1c
msgid "A string representing an attribute on the ``ModelAdmin``. This behaves same as the callable. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:432
# f6d00bb719244c4cacbf7ccf4c4b993a
msgid "A string representing an attribute on the model. This behaves almost the same as the callable, but ``self`` in this context is the model instance. Here's a full model example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:447
# 5b59a9ab031347ba900501c70150bd3c
msgid "A few special cases to note about ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:449
# 02a74421573b48c5a73c6d7503495b99
msgid "If the field is a ``ForeignKey``, Django will display the ``__unicode__()`` of the related object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:452
# f52de4b59f0f4ee3b2aa3021d118c3d2
msgid "``ManyToManyField`` fields aren't supported, because that would entail executing a separate SQL statement for each row in the table. If you want to do this nonetheless, give your model a custom method, and add that method's name to ``list_display``. (See below for more on custom methods in ``list_display``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:458
# 4a567ba744e442f1a6548cf58a39bbaa
msgid "If the field is a ``BooleanField`` or ``NullBooleanField``, Django will display a pretty \"on\" or \"off\" icon instead of ``True`` or ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:462
# 20ec839506bb47e99ec9e910b52cca84
msgid "If the string given is a method of the model, ``ModelAdmin`` or a callable, Django will HTML-escape the output by default. If you'd rather not escape the output of the method, give the method an ``allow_tags`` attribute whose value is ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:467
#: ../../ref/contrib/admin/index.txt:486
# ed8bacfaa2b846db9de581ec8c9f466f
# 9fa791c248284e72a40ce1cc019ebb42
msgid "Here's a full example model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:481
# 4419dfe4c2d94758abdead208a60167a
msgid "If the string given is a method of the model, ``ModelAdmin`` or a callable that returns True or False Django will display a pretty \"on\" or \"off\" icon if you give the method a ``boolean`` attribute whose value is ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:500
# 693baf4d9c3e4125becab123c9fe4a61
msgid "The ``__str__()`` and ``__unicode__()`` methods are just as valid in ``list_display`` as any other model method, so it's perfectly OK to do this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:506
# a5574f73a5024b3fa8945124fdd668f1
msgid "Usually, elements of ``list_display`` that aren't actual database fields can't be used in sorting (because Django does all the sorting at the database level)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:510
# 56dc305e044a4487b2c166b49ac517da
msgid "However, if an element of ``list_display`` represents a certain database field, you can indicate this fact by setting the ``admin_order_field`` attribute of the item."
msgstr ""

#: ../../ref/contrib/admin/index.txt:528
# 30fd20d0474c4ed1a27b8c3cb341c842
msgid "The above will tell Django to order by the ``first_name`` field when trying to sort by ``colored_first_name`` in the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:533
# eda8f955380f4f0b9bc3fd9cb230de1d
msgid "Set ``list_display_links`` to control which fields in ``list_display`` should be linked to the \"change\" page for an object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:536
# 7b2ebaa336674bb88070be60d695f4f3
msgid "By default, the change list page will link the first column -- the first field specified in ``list_display`` -- to the change page for each item. But ``list_display_links`` lets you change which columns are linked. Set ``list_display_links`` to a list or tuple of fields (in the same format as ``list_display``) to link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:542
# 8a3012d58a4a4038b6471a1e560d708a
msgid "``list_display_links`` can specify one or many fields. As long as the fields appear in ``list_display``, Django doesn't care how many (or how few) fields are linked. The only requirement is: If you want to use ``list_display_links``, you must define ``list_display``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:547
# df578757294c4b3cac76d7acc49b28b2
msgid "In this example, the ``first_name`` and ``last_name`` fields will be linked on the change list page::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:558
# 4946250ae7264142a78937a9b66079b3
msgid "Set ``list_editable`` to a list of field names on the model which will allow editing on the change list page. That is, fields listed in ``list_editable`` will be displayed as form widgets on the change list page, allowing users to edit and save multiple rows at once."
msgstr ""

#: ../../ref/contrib/admin/index.txt:565
# 8cc0caca74b7491cac195e287c22c0a6
msgid "``list_editable`` interacts with a couple of other options in particular ways; you should note the following rules:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:568
# 08345f1b1afb411ab691620b123fafd2
msgid "Any field in ``list_editable`` must also be in ``list_display``. You can't edit a field that's not displayed!"
msgstr ""

#: ../../ref/contrib/admin/index.txt:571
# d991f57316614a22b311801e65b295bc
msgid "The same field can't be listed in both ``list_editable`` and ``list_display_links`` -- a field can't be both a form and a link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:575
# 39d5f7ec29a344648fbe1e9d444a24cc
msgid "You'll get a validation error if either of these rules are broken."
msgstr ""

#: ../../ref/contrib/admin/index.txt:581
# 23f2425574bb4466891e28b578ef3001
msgid "Set ``list_filter`` to activate filters in the right sidebar of the change list page of the admin, as illustrated in the following screenshot:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:586
# 76d2953da87541e9a75d06e3eefc1ce5
msgid "``list_filter`` should be a list of elements, where each element should be of one of the following types:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:589
# 8867640037ae4fde96ecf065c2d3a086
msgid "a field name, where the specified field should be either a ``BooleanField``, ``CharField``, ``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` or ``ManyToManyField``, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:598
# fece0b4f1c624dffb228b7cb14777c8d
msgid "Field names in ``list_filter`` can also span relations using the ``__`` lookup, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:604
# 44fda3c1f4b940eab5043a274bcb4ba9
msgid "a class inheriting from :mod:`django.contrib.admin.SimpleListFilter`, which you need to provide the ``title`` and ``parameter_name`` attributes to and override the ``lookups`` and ``queryset`` methods, e.g.::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:655
# e38f73aa10694ce7b04fe861daa1cfea
msgid "As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` and ``queryset`` methods, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:670
# d2e24861fa704739bf8cb2cdfd1a5006
msgid "Also as a convenience, the ``ModelAdmin`` object is passed to the ``lookups`` method, for example if you want to base the lookups on the available data::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:689
# 822773b87f804781b8583093ecb6666b
msgid "a tuple, where the first element is a field name and the second element is a class inheriting from :mod:`django.contrib.admin.FieldListFilter`, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:702
# 6966cbf1737a42d38e2fd7b2712b73ef
msgid "The ``FieldListFilter`` API is considered internal and might be changed."
msgstr ""

#: ../../ref/contrib/admin/index.txt:707
# adaa300369284617b33fe9c0cc420cd6
msgid "It is possible to specify a custom template for rendering a list filter::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:712
# a0f2e57f17b4402b8efd52df06dd8308
msgid "See the default template provided by django (``admin/filter.html``) for a concrete example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:719
# 09d828c561344ebcb34d585b5b0ab702
msgid "Set ``list_max_show_all`` to control how many items can appear on a \"Show all\" admin change list page. The admin will display a \"Show all\" link on the change list only if the total result count is less than or equal to this setting. By default, this is set to ``200``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:726
# 6d7664855c1e4c329bf327b5c9753cce
msgid "Set ``list_per_page`` to control how many items appear on each paginated admin change list page. By default, this is set to ``100``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:731
# fb25300fabd040999af0dea19fbaacc4
msgid "Set ``list_select_related`` to tell Django to use :meth:`~django.db.models.query.QuerySet.select_related` in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries."
msgstr ""

#: ../../ref/contrib/admin/index.txt:736
# 61a2775af2ba44359d3777eb8d9c5f55
msgid "The value should be either ``True`` or ``False``. Default is ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:738
# 33a816e62d2743e5a5b9a7b7b7d0bc81
msgid "Note that Django will use :meth:`~django.db.models.query.QuerySet.select_related`, regardless of this setting if one of the ``list_display`` fields is a ``ForeignKey``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:745
# b0d8598bd93c423297b6c95ae8e9f3c9
msgid "Set ``ordering`` to specify how lists of objects should be ordered in the Django admin views. This should be a list or tuple in the same format as a model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""

#: ../../ref/contrib/admin/index.txt:749
# 436398ed1d6c4477a6e35efb0c902214
msgid "If this isn't provided, the Django admin will use the model's default ordering."
msgstr ""

#: ../../ref/contrib/admin/index.txt:754
# 4e92b0fdbee547b5b2aaf0cfd6dd89d0
msgid "If you need to specify a dynamic order (for example depending on user or language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:759
# 627bdea1a8bd4d2b84d8e58b009b4185
msgid "Django honors all elements in the list/tuple; before 1.4, only the first was respected."
msgstr ""

#: ../../ref/contrib/admin/index.txt:766
# c0bf7f34fe1a4fe2aeeb2b795b739a1c
msgid "The paginator class to be used for pagination. By default, :class:`django.core.paginator.Paginator` is used. If the custom paginator class doesn't have the same constructor interface as :class:`django.core.paginator.Paginator`, you will also need to provide an implementation for :meth:`ModelAdmin.get_paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:774
# c2684b5a660a406fa388b2c50cb636cc
msgid "Set ``prepopulated_fields`` to a dictionary mapping field names to the fields it should prepopulate from::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:780
# 4f051a5c4a6644e285fd4e6ef146dd58
msgid "When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for ``SlugField`` fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:787
# a0de3b04f05945e6bfc029b83eaace03
msgid "``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, nor ``ManyToManyField`` fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:792
# 0175c3dc955e4a7f8d8210c7f0c6a414
msgid "By default, Django's admin uses a select-box interface (<select>) for fields that are ``ForeignKey`` or have ``choices`` set. If a field is present in ``radio_fields``, Django will use a radio-button interface instead. Assuming ``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:800
# 28fef73c77dd4ab993f4a480dcd3caa5
msgid "You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the ``django.contrib.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:803
# 3d74681526e9425295a3c7656c6d9838
msgid "Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or has ``choices`` set."
msgstr ""

#: ../../ref/contrib/admin/index.txt:808
#: ../../ref/contrib/admin/index.txt:1481
# fa4b20b2a02b4e01af73a39083ed32a0
# 7148bb45fd5e44f69dbe3c50eb212e8f
msgid "By default, Django's admin uses a select-box interface (<select>) for fields that are ``ForeignKey``. Sometimes you don't want to incur the overhead of having to select all the related instances to display in the drop-down."
msgstr ""

#: ../../ref/contrib/admin/index.txt:813
# e21f62c0a10a4a28a77bd5ddf0739886
msgid "``raw_id_fields`` is a list of fields you would like to change into an ``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:824
# 42014fa8b29a43c4926c96642bf8ad0d
msgid "By default the admin shows all fields as editable. Any fields in this option (which should be a ``list`` or ``tuple``) will display its data as-is and non-editable. This option behaves nearly identical to :attr:`ModelAdmin.list_display`. Usage is the same, however, when you specify :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields must be present to be shown (they are ignored otherwise)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:831
# efb61a8b872f4b869caea310c5a7ea32
msgid "If ``readonly_fields`` is used without defining explicit ordering through :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added last after all editable fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:837
# c01e655f01754daaae97f264723037a3
msgid "Set ``save_as`` to enable a \"save as\" feature on admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:839
# d014b721c95b44a9b3335dcd5ec37082
msgid "Normally, objects have three save options: \"Save\", \"Save and continue editing\" and \"Save and add another\". If ``save_as`` is ``True``, \"Save and add another\" will be replaced by a \"Save as\" button."
msgstr ""

#: ../../ref/contrib/admin/index.txt:843
# b90f617dfbfc49efa61d3e3832af6185
msgid "\"Save as\" means the object will be saved as a new object (with a new ID), rather than the old object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:846
# 167e143cd1a542ceb2e76fd6d541f539
msgid "By default, ``save_as`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:850
# e8989984479f4fbe850d45fbf9561f37
msgid "Set ``save_on_top`` to add save buttons across the top of your admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:853
# 1b7223af81854a47a0b67f138fb3a555
msgid "Normally, the save buttons appear only at the bottom of the forms. If you set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""

#: ../../ref/contrib/admin/index.txt:857
# c98f7a8d420b43a196ae7bc1f234a415
msgid "By default, ``save_on_top`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:861
# a13e10c50853437d9d37d77baee938b8
msgid "Set ``search_fields`` to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:865
# d20f554c42eb42ab804f32d4d91d8540
msgid "These fields should be some kind of text field, such as ``CharField`` or ``TextField``. You can also perform a related lookup on a ``ForeignKey`` or ``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:871
# 0c87084a3d9b495a8693f50cbdd1a1de
msgid "For example, if you have a blog entry with an author, the following definition would enable search blog entries by the email address of the author::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:877
# d575cadfe12b42efae41ca1ca974b710
msgid "When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case insensitive, where each word must be in at least one of ``search_fields``. For example, if ``search_fields`` is set to ``['first_name', 'last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:887
# 606d5e5b75e44a7a9877079a4869b60e
msgid "For faster and/or more restrictive searches, prefix the field name with an operator:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:891
# c64214abc34642b6ab435e02b567af70
msgid "Matches the beginning of the field. For example, if ``search_fields`` is set to ``['^first_name', '^last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:899
# 6950543a25c3453285a3731e817581ff
msgid "This query is more efficient than the normal ``'%john%'`` query, because the database only needs to check the beginning of a column's data, rather than seeking through the entire column's data. Plus, if the column has an index on it, some databases may be able to use the index for this query, even though it's a ``LIKE`` query."
msgstr ""

#: ../../ref/contrib/admin/index.txt:906
# 4d110138d15d4b029d634a0ca379769d
msgid "Matches exactly, case-insensitive. For example, if ``search_fields`` is set to ``['=first_name', '=last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:914
# 50b55a24139d482fa37baeb35725e690
msgid "Note that the query input is split by spaces, so, following this example, it's currently not possible to search for all records in which ``first_name`` is exactly ``'john winston'`` (containing a space)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:919
# 97f6c5186b4346d3a447f1f2c5f387f5
msgid "Performs a full-text match. This is like the default search method but uses an index. Currently this is only available for MySQL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:923
# 65c390ff35564d9aa1efdec45d884244
msgid "Custom template options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:925
# 0152de4fd83945ef9fd0069127841b7b
msgid "The `Overriding Admin Templates`_ section describes how to override or extend the default admin templates.  Use the following options to override the default templates used by the :class:`ModelAdmin` views:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:933
# 664cb3e7a3a24c9ebe0ac5719096023f
msgid "Path to a custom template, used by :meth:`add_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:937
# 1058ba3e898d4f64865d53e4dd5a83bd
msgid "Path to a custom template, used by :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:941
# ef0c7bf2a7c8423fa21a6528b7e77beb
msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:945
# ca629945592b4d8d83c189355f23e62a
msgid "Path to a custom template, used by :meth:`delete_view` for displaying a confirmation page when deleting one or more objects."
msgstr ""

#: ../../ref/contrib/admin/index.txt:952
# d70e64d223dd47a8b1010e02dde2b883
msgid "Path to a custom template, used by the :meth:`delete_selected` action method for displaying a confirmation page when deleting one or more objects. See the :doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:959
# b3207f31814941f5978ad29d8660a4a7
msgid "Path to a custom template, used by :meth:`history_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:965
# 04cb39b6129c4c25937e8a0b52224af4
msgid "``ModelAdmin`` methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:969
# cd1e256af08847e0bd5def9ee90abb84
msgid ":meth:`ModelAdmin.save_model` and :meth:`ModelAdmin.delete_model` must save/delete the object, they are not for veto purposes, rather they allow you to perform extra operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:975
# 14c6bfcf125c432a9a51d75c3cde72e8
msgid "The ``save_model`` method is given the ``HttpRequest``, a model instance, a ``ModelForm`` instance and a boolean value based on whether it is adding or changing the object. Here you can do any pre- or post-save operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:979
# ab5ea3f6c64f4764931991ecc237bea2
msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:990
# 61be3a66226d4751a7593a482c51126c
msgid "The ``delete_model`` method is given the ``HttpRequest`` and a model instance. Use this method to do pre- or post-delete operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:995
# 53735759b64843c7b3930b4464b58b01
msgid "The ``save_formset`` method is given the ``HttpRequest``, the parent ``ModelForm`` instance and a boolean value based on whether it is adding or changing the parent object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:999
# f0d0da5b599a4c2ca1c94c4737cdba3c
msgid "For example to attach ``request.user`` to each changed formset model instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1014
# 69e86168c57a439fb83668f983fbf015
msgid "The ``get_ordering`` method takes a``request`` as parameter and is expected to return a ``list`` or ``tuple`` for ordering similar to the :attr:`ordering` attribute. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1030
# 83c55bc2255347eeb0fa765826732d9f
msgid "The ``save_related`` method is given the ``HttpRequest``, the parent ``ModelForm`` instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1040
# 7279b40441054c16bd4a786a8d437876
msgid "The ``get_readonly_fields`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``list`` or ``tuple`` of field names that will be displayed as read-only, as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1049
# d7e06709d8be4b6fafae97a5cfefb1f5
msgid "The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``dictionary``, as described above in the :attr:`ModelAdmin.prepopulated_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1058
# b91ba0e4165244af8ac6dfdd1f6e1130
msgid "The ``get_list_display`` method is given the ``HttpRequest`` and is expected to return a ``list`` or ``tuple`` of field names that will be displayed on the changelist view as described above in the :attr:`ModelAdmin.list_display` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1067
# 38f44cb7c2f34605bf0e5fb5b5e6fdb1
msgid "The ``get_list_display_links`` method is given the ``HttpRequest`` and the ``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is expected to return a ``list`` or ``tuple`` of field names on the changelist that will be linked to the change view, as described in the :attr:`ModelAdmin.list_display_links` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1075
# b6d879358a774e059d574cfea201f231
msgid "The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for that ModelAdmin in the same way as a URLconf.  Therefore you can extend them as documented in :doc:`/topics/http/urls`::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1093
# 4ef47d0316f04e4584edf137a78e6a40
msgid "Notice that the custom patterns are included *before* the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you'll usually want to prepend your custom URLs to the built-in ones."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1098
# 3164d6ed8f73422481fab8c5abf123be
msgid "In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1102
# 4e5bd257010b4749aa562f9c83f9350f
msgid "However, the ``self.my_view`` function registered above suffers from two problems:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1105
# 8a91ca4f2bf14c84a503105d6ee92edb
msgid "It will *not* perform any permission checks, so it will be accessible to the general public."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1107
# 38c3315d2e1749f089f1c84e6e61adb7
msgid "It will *not* provide any header details to prevent caching. This means if the page retrieves data from the database, and caching middleware is active, the page could show outdated information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1111
# d330093f8a2144e3ace1f1244e679f6b
msgid "Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is :meth:`AdminSite.admin_view` (i.e. ``self.admin_site.admin_view`` inside a ``ModelAdmin`` instance); use it like so::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1125
# 234123cd4a16444498ad95cd0a175215
msgid "Notice the wrapped view in the fifth line above::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1129
# f7d0101afb774cd6bd32ea52f991a3e7
msgid "This wrapping will protect ``self.my_view`` from unauthorized access and will apply the ``django.views.decorators.cache.never_cache`` decorator to make sure it is not cached if the cache middleware is active."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1133
# 57f155016652407e9c483ee671626376
msgid "If the page is cacheable, but you still want the permission check to be performed, you can pass a ``cacheable=True`` argument to :meth:`AdminSite.admin_view`::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1141
# 13f65d733301411aac2fe665aded8304
msgid "The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1151
# 7e767a68a47445e292869df73c90131b
msgid "This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key field to only display the cars owned by the ``User`` instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1156
# 0b908ab09da54cb980c7ac56fa1ff24e
msgid "Like the ``formfield_for_foreignkey`` method, the ``formfield_for_manytomany`` method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners -- a many to many relationship -- you could filter the ``Car`` foreign key field to only display the cars owned by the ``User``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1171
# ea6c9c2a07854b1285c9fd924090b1af
msgid "Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` methods, the ``formfield_for_choice_field`` method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1190
# 7d6116056f144b1f9c6005007532036c
msgid "Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1195
# 9906609ecf7442629d8cb914960ce3ec
msgid "Should return ``True`` if editing obj is permitted, ``False`` otherwise. If obj is ``None``, should return ``True`` or ``False`` to indicate whether editing of objects of this type is permitted in general (e.g., ``False`` will be interpreted as meaning that the current user is not permitted to edit any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1203
# 01e28cd82ce74b43b147873fcf7ad889
msgid "Should return ``True`` if deleting obj is permitted, ``False`` otherwise. If obj is ``None``, should return ``True`` or ``False`` to indicate whether deleting objects of this type is permitted in general (e.g., ``False`` will be interpreted as meaning that the current user is not permitted to delete any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1211
# 59e46571902a46399f5e42083e3d7db1
msgid "The ``queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db.models.query.QuerySet` of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1225
# 620066dc07994d67b0cc5a20b87d1fba
msgid "Sends a message to the user. The default implementation creates a message using the :mod:`django.contrib.messages` backend. See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1233
# abb1a6a1074b4897ab58bf34a56c820f
msgid "Returns an instance of the paginator to use for this view. By default, instantiates an instance of :attr:`paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1237
# 3603c1a5ed114b458693533c454a50ac
msgid "Other methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1241
# 4c422e69f6774d498b6878a9141407f0
msgid "Django view for the model instance addition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1245
# bbbf7a99c1ae4d2fa191b00e19ff7c64
msgid "Django view for the model instance edition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1249
# 9d3d26a261fa4436bac8a910958198ce
msgid "Django view for the model instances change list/actions page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1254
# 2c6be70069054256a8f4b6908db9f734
msgid "Django view for the model instance(s) deletion confirmation page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1259
# 79879d6c1a124403911e50170d82dc43
msgid "Django view for the page that shows the modification history for a given model instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1262
# 8833ab59fdd64394a3264bfef2fc295d
msgid "Unlike the hook-type ``ModelAdmin`` methods detailed in the previous section, these five methods are in reality designed to be invoked as Django views from the admin application URL dispatching handler to render the pages that deal with model instances CRUD operations. As a result, completely overriding these methods will significantly change the behavior of the admin application."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1268
# 7800d4017755410d866f743234e3825d
msgid "One common reason for overriding these methods is to augment the context data that is provided to the template that renders the view. In the following example, the change view is overridden so that the rendered template is provided some extra mapping data that would not otherwise be available::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1290
# 29e8d337305447e6b896a7c217996336
msgid "These views now return :class:`~django.template.response.TemplateResponse` instances which allow you to easily customize the response data before rendering. For more details, see the :doc:`TemplateResponse documentation </ref/template-response>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1296
# e94f61ec83e3431a9719f37648e44af6
msgid "``ModelAdmin`` media definitions"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1298
# 35f9d1074c81443d9eb861418fa2b81d
msgid "There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a Media inner class on your ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1311
# c562df2900eb48fda3b1b8678a774548
msgid "The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) to any media paths. The same rules apply as :ref:`regular media definitions on forms <form-media-paths>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1316
# 57d338432abc4732864556897e6669cd
msgid "Django admin Javascript makes use of the `jQuery`_ library. To avoid conflicts with user-supplied scripts or libraries, Django's jQuery is namespaced as ``django.jQuery``. If you want to use jQuery in your own admin JavaScript without including a second copy, you can use the ``django.jQuery`` object on changelist and add/edit views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1322
# be1e106092744595806320ba38636baa
msgid "If you require the jQuery library to be in the global namespace, for example when using third-party jQuery plugins, or need a newer version of jQuery, you will have to include your own copy of jQuery."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1329
# 140878b22a664eb99c7186ac89689951
msgid "Adding custom validation to the admin"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1331
# 4fe1eda69f734fcfb7ff47740c057aab
msgid "Adding custom validation of data in the admin is quite easy. The automatic admin interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class gives you the ability define your own form::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1338
# ee7d4eac36c4442b87a104e4fc22d292
msgid "``MyArticleAdminForm`` can be defined anywhere as long as you import where needed. Now within your form you can add your own custom validation for any field::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1350
# f8d9bc19441e49b08b135dbc120ea38c
msgid "It is important you use a ``ModelForm`` here otherwise things can break. See the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation </ref/forms/validation>` and, more specifically, the :ref:`model form validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1359
# 56e9492e694e4daf924727b13daee6d4
msgid "``InlineModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1365
# 0638a9b190a048d7be3d56f380b14f2f
msgid "The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1375
# 5ee663bb4557403094b4ed9412dda9d1
msgid "You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1386
# d15e2bd9987f4750aedf24843fa94bab
msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1388
# 2297c7ee5d2a4aa0a3674611eb6beaf9
msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1389
# 83ab6facfffe4e12b04079ae13fff04d
msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1391
# 15248accdfc6434ba8b0b2a60aa21f20
msgid "The difference between these two is merely the template used to render them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1395
# e27ff8291bae4b79885545274a10623c
msgid "``InlineModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1397
# f7ecbeb346104e56996c6fd81fcc2dc5
msgid "``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and adds some of its own (the shared features are actually defined in the ``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1401
# e80f5ec2bbff4a17b39f284c4c2af672
msgid ":attr:`~InlineModelAdmin.form`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1402
# 89e34d1b89494002a0beba63a89ad342
msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1403
# 82f7497bb3b64fdb994e11ff1b1834f5
msgid ":attr:`~ModelAdmin.fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1404
# 83e501c56edc471c902a8da65e2959ec
msgid ":attr:`~ModelAdmin.exclude`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1405
# 92d049d5f0a44a07bb2102f7ac141169
msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1406
# 22ec0adb3f69484fb765657b1babfad3
msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1407
# 108ff25329d141f48338b935a8bce41a
msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1408
# a80993a577bd47c5aae42832f44660db
msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1409
# f9c3c38d8d56486ebafa8d3595114c55
msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1410
# 0e6cf0cac2e94854b9469ce5ef0fc2cc
msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1411
# e590b9d27aea43c7925557584739b025
msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1415
# a0d19dc132164c329845ac27fdefa258
msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1416
# d8b5232eedbe4fbfb3a137080e5db9af
msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1420
# 80abac3c6cdf4f6aa43e36f35d97f297
msgid ":attr:`~ModelAdmin.ordering`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1421
# b1569fc9751d4773b9ac30e784a5deb5
msgid ":meth:`~ModelAdmin.queryset`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1425
# 1a742a05c57e4971b068fc34af59e778
msgid ":meth:`~ModelAdmin.has_add_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1426
# 6a71f7e319184db183fb7865a4632ab1
msgid ":meth:`~ModelAdmin.has_change_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1427
# e49ab3bd29e64f478782576611de6c0f
msgid ":meth:`~ModelAdmin.has_delete_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1429
# c3e435c9a79a47b4862e05fbab909635
msgid "The ``InlineModelAdmin`` class adds:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1433
# 0af809e891234847ac16c96808a99c5e
msgid "The model which the inline is using. This is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1437
# f3ab45a33c0645e7bd9ac23054d58e15
msgid "The name of the foreign key on the model. In most cases this will be dealt with automatically, but ``fk_name`` must be specified explicitly if there are more than one foreign key to the same parent model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1443
# 30aa9caaa4af4b768d8c3cd9edcf9cbf
msgid "This defaults to ``BaseInlineFormSet``. Using your own formset can give you many possibilities of customization. Inlines are built around :ref:`model formsets <model-formsets>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1449
# d30885d883a547938467711ca392fe18
msgid "The value for ``form`` defaults to ``ModelForm``. This is what is passed through to ``inlineformset_factory`` when creating the formset for this inline."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1457
# 60e9df6d13134b48bd59eb132a511307
msgid "This controls the number of extra forms the formset will display in addition to the initial forms. See the :doc:`formsets documentation </topics/forms/formsets>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1464
# 4fa512e7b21d41dba3f5b61c624d07e2
msgid "For users with JavaScript-enabled browsers, an \"Add another\" link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the ``extra`` argument."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1468
# c75e66835d494e13ae7e482495b029f3
msgid "The dynamic link will not appear if the number of currently displayed forms exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1475
# ab0ccd5dd5b94c4ba599b0d248555251
msgid "This controls the maximum number of forms to show in the inline. This doesn't directly correlate to the number of objects, but can if the value is small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1486
# 75937f2fe15b4d20b953fb3d447bca61
msgid "``raw_id_fields`` is a list of fields you would like to change into a ``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1496
# 090e2334ce5b4d98b050aa1c48452356
msgid "The template used to render the inline on the page."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1500
# 63f0a622a1544604b10fbcd9d8b48bb9
msgid "An override to the ``verbose_name`` found in the model's inner ``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1505
# 3964f3561d654dab94b44efb16cb5202
msgid "An override to the ``verbose_name_plural`` found in the model's inner ``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1510
# 961535402eee472c9c5430f33238ff53
msgid "Specifies whether or not inline objects can be deleted in the inline. Defaults to ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1515
# 8c7b47f94bc44559b88db6fc5ba69dfd
msgid "Working with a model with two or more foreign keys to the same parent model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1517
# 0e9484b0114543a8ad8feb393bb72cc1
msgid "It is sometimes possible to have more than one foreign key to the same model. Take this model for instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1524
# 400e6f85dc0641cc81a391a335d9aae2
msgid "If you wanted to display an inline on the ``Person`` admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1538
# cea193309a324bbb8c287c9a625bb16e
msgid "Working with many-to-many models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1542
# 0dd203c6c060477bbf9be2d5b19a9eed
msgid "By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the :class:`~django.db.models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each many-to-many field in your model will be represented by a standard HTML ``<select multiple>``, a horizontal or vertical filter, or a ``raw_id_admin`` widget. However, it is also possible to replace these widgets with inlines."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1550
# 678eaa6ef7ad4545ab786f8459885a66
msgid "Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1559
# a34866b68acd4a5d986482c86044af3f
msgid "If you want to display many-to-many relations using an inline, you can do so by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1576
# 1186814bf03249b3b5b82ebf9c20638e
msgid "There are two features worth noting in this example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1578
# a205b801aa1f4b01a37adca31a035f67
msgid "Firstly - the ``MembershipInline`` class references ``Group.members.through``. The ``through`` attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1583
# e58d14c139a94a76a11d5901554cb371
msgid "Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. Django displays an admin widget for a many-to-many field on the model that defines the relation (in this case, ``Group``). If you want to use an inline model to represent the many-to-many relationship, you must tell Django's admin to *not* display this widget - otherwise you will end up with two widgets on your admin page for managing the relation."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1590
# ee72a026a7664e1ba239a5c5f91970fb
msgid "In all other respects, the ``InlineModelAdmin`` is exactly the same as any other. You can customize the appearance using any of the normal ``ModelAdmin`` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1595
# a1b39987e79d497ead6490851a80227d
msgid "Working with many-to-many intermediary models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1597
# f23212f3df9e4b71a3d44cc779948b28
msgid "When you specify an intermediary model using the ``through`` argument to a :class:`~django.db.models.ManyToManyField`, the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1604
# 43532e4f62774368ba3b63aaa91ff6c3
msgid "However, we still want to be able to edit that information inline. Fortunately, this is easy to do with inline admin models. Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1621
# cd317f36aec04625999dee9d3c8267f1
msgid "The first step in displaying this intermediate model in the admin is to define an inline class for the ``Membership`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1628
# a8ac137dfc0e41c7877aa275436defb0
msgid "This simple example uses the default ``InlineModelAdmin`` values for the ``Membership`` model, and limits the extra add forms to one. This could be customized using any of the options available to ``InlineModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1632
# 596cf756ed3145cea28c8b00fd9f2c66
msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1640
# 42587533a0c444e7886cf9451e3b16da
msgid "Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1645
# 437aba02590642d7a91c926f7a7b3d86
msgid "Now your admin site is set up to edit ``Membership`` objects inline from either the ``Person`` or the ``Group`` detail pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1651
# 273be3c96cc44464966dc68877de9dda
msgid "Using generic relations as an inline"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1653
# a378b63a776645aca5a70e02fc89ad25
msgid "It is possible to use an inline with generically related objects. Let's say you have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1665
# 43c406bf92eb4f55949db172818e7958
msgid "If you want to allow editing and creating ``Image`` instance on the ``Product`` add/change views you can use ``GenericTabularInline`` or ``GenericStackedInline`` (both subclasses of ``GenericInlineModelAdmin``) provided by ``django.contrib.contenttypes.generic``, they implement tabular and stacked visual layouts for the forms representing the inline objects respectively just like their non-generic counterparts and behave just like any other inline. In your ``admin.py`` for this example app::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1688
# 703e117131554797afa505b2a7c2a90f
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for more specific information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1692
# 9e969e71e29d4a829299c6dbb9e07bab
msgid "Overriding admin templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1694
# c4f9f6f0f1d643c8bbf8e1a7fcf3f009
msgid "It is relatively easy to override many of the templates which the admin module uses to generate the various pages of an admin site. You can even override a few of these templates for a specific app, or a specific model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1699
# 27c883729c044d6781ebfcaa22bcfbd8
msgid "Set up your projects admin template directories"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1701
# 445090bddefc47049b7d9eb9fc3f1ece
msgid "The admin template files are located in the ``contrib/admin/templates/admin`` directory."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1704
# 9e51b79e18fd4928bbf996258aedf571
msgid "In order to override one or more of them, first create an ``admin`` directory in your project's ``templates`` directory. This can be any of the directories you specified in :setting:`TEMPLATE_DIRS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1708
# 78f0e442f9774f26acebc871618f6472
msgid "Within this ``admin`` directory, create sub-directories named after your app. Within these app subdirectories create sub-directories named after your models. Note, that the admin app will lowercase the model name when looking for the directory, so make sure you name the directory in all lowercase if you are going to run your app on a case-sensitive filesystem."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1714
# 07cd5a1c15dd4cc2bc4254322da11a39
msgid "To override an admin template for a specific app, copy and edit the template from the ``django/contrib/admin/templates/admin`` directory, and save it to one of the directories you just created."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1718
# a8501e9322c540f0aa4265f920cf35da
msgid "For example, if we wanted to add a tool to the change list view for all the models in an app named ``my_app``, we would copy ``contrib/admin/templates/admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our project, and make any necessary changes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1724
# 911b0a1abe80447cb356ae53d5a540c6
msgid "If we wanted to add a tool to the change list view for only a specific model named 'Page', we would copy that same file to the ``templates/admin/my_app/page`` directory of our project."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1729
# 26ad713d94f24a68abfd63ecebef6368
msgid "Overriding vs. replacing an admin template"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1731
# 54d4ad5c971549b689c6aaa4aeee18c5
msgid "Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1735
# d5879a1c8576476da04f4923995eb939
msgid "To continue the example above, we want to add a new link next to the ``History`` tool for the ``Page`` model. After looking at ``change_form.html`` we determine that we only need to override the ``object-tools`` block. Therefore here is our new ``change_form.html`` :"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1758
# 559df999862246b2b0298bc1c3c7fe6f
msgid "And that's it! If we placed this file in the ``templates/admin/my_app`` directory, our link would appear on every model's change form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1762
# 374c520d2cbb452cacb8b96a74200411
msgid "Templates which may be overridden per app or model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1764
# 002910ed394b4c4fb54eef108003762b
msgid "Not every template in ``contrib/admin/templates/admin`` may be overridden per app or per model. The following can:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1767
# 9ab74f9765c148f49e2a99e9d158b9bb
msgid "``app_index.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1768
# 385ba93f43a44dbbbcd971e8a39a8e9e
msgid "``change_form.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1769
# dd15b20a01a941e09d92401b3bb51bbd
msgid "``change_list.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1770
# 720f410f660448ed8f913453269ec432
msgid "``delete_confirmation.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1771
# 5422788489624d44afe0ee59e061a291
msgid "``object_history.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1773
# 465b9e9324bc4a0ca10149c7f65e07ae
msgid "For those templates that cannot be overridden in this way, you may still override them for your entire project. Just place the new version in your ``templates/admin`` directory. This is particularly useful to create custom 404 and 500 pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1780
# c413939561a94a8180f47a1bb7dd2c72
msgid "Some of the admin templates, such as ``change_list_request.html`` are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1787
# 3a097be57c1145f2894d0df14b10f914
msgid "Root and login templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1789
# 2fe74b46887648fe9a544c4cffdd3667
msgid "If you wish to change the index, login or logout templates, you are better off creating your own ``AdminSite`` instance (see below), and changing the :attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:`AdminSite.logout_template` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1795
# a6310b2f22804367bf555f50c2a2d1f8
msgid "``AdminSite`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1799
# f2b86cad68ac4d4691f8a8eadfdd98ae
msgid "A Django administrative site is represented by an instance of ``django.contrib.admin.sites.AdminSite``; by default, an instance of this class is created as ``django.contrib.admin.site`` and you can register your models and ``ModelAdmin`` instances with it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1804
# ebca230d68f44a5fbd0d160222ccf467
msgid "If you'd like to set up your own administrative site with custom behavior, however, you're free to subclass ``AdminSite`` and override or add anything you like. Then, simply create an instance of your ``AdminSite`` subclass (the same way you'd instantiate any other Python class), and register your models and ``ModelAdmin`` subclasses with it instead of using the default."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1811
# 7ce57d1b5c1c47bbad6bc810ed78e782
msgid "When constructing an instance of an ``AdminSite``, you are able to provide a unique instance name using the ``name`` argument to the constructor. This instance name is used to identify the instance, especially when :ref:`reversing admin URLs <admin-reverse-urls>`. If no instance name is provided, a default instance name of ``admin`` will be used."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1818
# 751c8ab6867f4e03b0f2cd5f9b76052f
msgid "``AdminSite`` attributes"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1820
# 41ad5dbdf05e496e9e54e2d49cc8be7a
msgid "Templates can override or extend base admin templates as described in `Overriding Admin Templates`_."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1825
# ec62884132fa457e82352e955157b090
msgid "Path to a custom template that will be used by the admin site main index view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1830
# 3f307ca3d27c4c33bd873901bff54fe0
msgid "Path to a custom template that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1836
# 5d1938a8784f44fbaf21ca10ca1b6bc2
msgid "Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1843
# 30bb314f30624605a6a153121e4ccb71
msgid "Path to a custom template that will be used by the admin site logout view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1849
# 4861d53f73a849c798963eab6a88d1a0
msgid "Path to a custom template that will be used by the admin site password change view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1856
# 9e016fbcf668465cb789a2adb0eec234
msgid "Path to a custom template that will be used by the admin site password change done view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1860
# cfdb318cbca94da58717f0b5e5ac0745
msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1862
# 0103fe53f69c44c68fa15cd8d421a7b6
msgid "The last step in setting up the Django admin is to hook your ``AdminSite`` instance into your URLconf. Do this by pointing a given URL at the ``AdminSite.urls`` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1866
# b1fd8f1787c94a2fb0e5ad482263a131
msgid "In this example, we register the default ``AdminSite`` instance ``django.contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1879
# af91101b19ec458b9beccf58700d58a5
msgid "Above we used ``admin.autodiscover()`` to automatically load the :setting:`INSTALLED_APPS` admin.py modules."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1882
# 621e542253fe456e9df977769a5a98b4
msgid "In this example, we register the ``AdminSite`` instance ``myproject.admin.admin_site`` at the URL ``/myadmin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1893
# 4c5e82b5cf664e9f83f2d41458621369
msgid "There is really no need to use autodiscover when using your own ``AdminSite`` instance since you will likely be importing all the per-app admin.py modules in your ``myproject.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1898
# a5b8b4682f3945f38a83d5991fbc4ed2
msgid "Multiple admin sites in the same URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1900
# 897e623ecd424cb197ed40906c71f545
msgid "It's easy to create multiple instances of the admin site on the same Django-powered Web site. Just create multiple instances of ``AdminSite`` and root each one at a different URL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1904
# 1b166fffa865495d83c473a11173fc26
msgid "In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature separate versions of the admin site -- using the ``AdminSite`` instances ``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, respectively::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1918
# 01eb05ac2c5b4211a5df36d2a307df9e
msgid "``AdminSite`` instances take a single argument to their constructor, their name, which can be anything you like. This argument becomes the prefix to the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. This is only necessary if you are using more than one ``AdminSite``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1924
# 61ae0fcc4cb74346ac83af1cd95c6652
msgid "Adding views to admin sites"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1926
# cb73080d82244ea0b594bde2cfb1c0a6
msgid "Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to include a pattern for your new view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1935
# 1137de9a6bfe418eaf91f9acd0a2bbb1
msgid "Any view you render that uses the admin templates, or extends the base admin template, should provide the ``current_app`` argument to :class:`~django.template.RequestContext` or :class:`~django.template.Context` when rendering the template.  It should be set to either ``self.name`` if your view is on an ``AdminSite`` or ``self.admin_site.name`` if your view is on a ``ModelAdmin``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1945
# 2f078ed0ebd84203ae9c6aa80a805a30
msgid "Adding a password-reset feature"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1947
# 70b624afef084b73a1cb82c13a879606
msgid "You can add a password-reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1957
# aca83d3b042746269ac2c2768aede12e
msgid "(This assumes you've added the admin at ``admin/`` and requires that you put the URLs starting with ``^admin/`` before the line that includes the admin app itself)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1963
# 5008bfa284814ec49c0016a6a5ce701c
msgid "The presence of the ``admin_password_reset`` named URL will cause a \"forgotten your password?\" link to appear on the default admin log-in page under the password box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1970
# 62cb73233dd449c190d762e0117b882d
msgid "Reversing admin URLs"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1972
# 0547e5a18d7347b29eaf332f5c0c3766
msgid "When an :class:`AdminSite` is deployed, the views provided by that site are accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1975
# c911189590b447948a5da537b8c55386
msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1978
#: ../../ref/contrib/admin/index.txt:1991
# 02e51ac764e54658afa775a67d45fd39
# d02b99df37084c19a8d2708fc7fac269
msgid "Page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1978
#: ../../ref/contrib/admin/index.txt:1991
# 4a3a076ea28d401589484f56cc140b9d
# 04797bb6913c4f408f9868b358d95949
msgid "URL name"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1978
#: ../../ref/contrib/admin/index.txt:1991
# fee552487ccf4d1dae9312132efa4c22
# 06fb2cdb4dd94e3f9a47ea4fe28ba52f
msgid "Parameters"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1980
#: ../../ref/contrib/sitemaps.txt:366
# 57c26bd78db44406adef2b4cd1097ccb
# c3eebd4dd54c4eae86de2712108454c8
msgid "Index"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1980
# 0a011bf079b347929c2c203486fb04f1
msgid "``index``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1981
# 10a285231cd24a2585445d0baac0f04b
msgid "Logout"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1981
# f94c0e1599694d6488f36f0348102d86
msgid "``logout``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1982
# db3355fc96fb49238af43d27c892e1a6
msgid "Password change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1982
# 5cbe72497cd24e2ca1dc8705f9e0261c
msgid "``password_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1983
# 24833fc29e064b4587206bd209a4744e
msgid "Password change done"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1983
# 6383500cebc04cfb951f834350fc32dd
msgid "``password_change_done``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1984
# 7e6a9db3800a43c3b5b9d460e7f1e5ae
msgid "i18n javascript"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1984
# b368a0d3fa674b71bfe30be1d243181e
msgid "``jsi18n``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1985
# 8d8f89397a8143e281111e039442fa90
msgid "Application index page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1985
# 1e5dfb0a24264e4094729aa13dcfc453
msgid "``app_list``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1985
#: ../../ref/models/options.txt:23
# 7634a16180b34a24b47409b240fab1fd
# ad0937c88da94d40a97f8645efbf8b22
msgid "``app_label``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1988
# de4dd925c15044e18cec6e7a351b39c3
msgid "Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1993
# 765283f8796b41b5b22c1073dd44f297
msgid "Changelist"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1993
# 32d8cb1f68eb43d1b7cd51aed3831a23
msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1994
# c4d418f3449b45a88a68795832234f00
msgid "Add"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1994
# ae9ee0b6c55e4176bcf53efeb0dac56e
msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1995
# 42c9b2ec41a14717aaf30c858e6d06f6
msgid "History"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1995
# 156f93bd4c0749dca9352a5e98f5f7aa
msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1995
#: ../../ref/contrib/admin/index.txt:1996
#: ../../ref/contrib/admin/index.txt:1997
# ed557cedf95c403c9e8858a7f13aaf28
# 6eddae08cd814889b0d5d8ded5525e55
# 24db62f864f74e60bf46da847ac3ea61
msgid "``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1996
# fe8967f7fa2e4fee8eaf4207632093d5
msgid "Delete"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1996
# 6067304ded804a78ad8784da342bc5c1
msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1997
# 6120f52688e54be2989bba1d7086bdab
msgid "Change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1997
# 92f552e7045a4479b10d8a17de247d1f
msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2000
# e6bef52e311a4cdcb5a44e55a6844528
msgid "These named URLs are registered with the application namespace ``admin``, and with an instance namespace corresponding to the name of the Site instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2003
# eef42d13197d4bc6833b2049968c1f67
msgid "So - if you wanted to get a reference to the Change view for a particular ``Choice`` object (from the polls application) in the default admin, you would call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2011
# d4571be5a7c44ec181214f040117752d
msgid "This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing ``poll.Choice`` instances in that instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2015
# 1dcfa9b58b5f4ecb95e6cd8b352c67f7
msgid "If you want to find a URL in a specific admin instance, provide the name of that instance as a ``current_app`` hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named ``custom``, you would need to call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2022
# aebe048ee12147d48f5f83a7e5d31980
msgid "For more details, see the documentation on :ref:`reversing namespaced URLs <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2027
# 912337ae273e4befb97c0b34859bb767
msgid "To allow easier reversing of the admin urls in templates, Django provides an ``admin_urlname`` filter which takes an action as argument:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2037
# 23d7c8facf534f4c91f466596c91793a
msgid "The action in the examples above match the last part of the URL names for :class:`ModelAdmin` instances described above. The ``opts`` variable can be any object which has an ``app_label`` and ``module_name`` and is usually supplied by the admin views for the current model."
msgstr ""

#: ../../ref/contrib/auth.txt:2
#: ../../ref/django-admin.txt:1183
# 305af714092946d095c90698ed03dbaf
# 05c4095ba85a44b48d3e87d0261ca26d
msgid "``django.contrib.auth``"
msgstr ""

#: ../../ref/contrib/auth.txt:4
#: ../../ref/contrib/index.txt:59
# 985dc3c50bb84228ad94f0f0482059dc
# 78a50d902ee14cbc8bb52f6fa1a03947
msgid "See :doc:`/topics/auth`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:3
# 399e536534bf43cdbdb26b91960e7af9
msgid "Customizing the comments framework"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:7
# 661449a8dc004af7a3267e41a9dc9656
msgid "If the built-in comment framework doesn't quite fit your needs, you can extend the comment app's behavior to add custom data and logic. The comments framework lets you extend the built-in comment model, the built-in comment form, and the various comment views."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:12
# ac651235ad51402fb36269484d601415
msgid "The :setting:`COMMENTS_APP` setting is where this customization begins. Set :setting:`COMMENTS_APP` to the name of the app you'd like to use to provide custom behavior. You'll use the same syntax as you'd use for :setting:`INSTALLED_APPS`, and the app given must also be in the :setting:`INSTALLED_APPS` list."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:18
# 7d05d6ddefad459aa651416ecd984a9f
msgid "For example, if you wanted to use an app named ``my_comment_app``, your settings file would contain::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:29
# 786892a805254c7da4b23a8a91170fc9
msgid "The app named in :setting:`COMMENTS_APP` provides its custom behavior by defining some module-level functions in the app's ``__init__.py``. The :ref:`complete list of these functions <custom-comment-app-api>` can be found below, but first let's look at a quick example."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:35
# 8d8ef69cf4ab4416a4c36dc608e49cf2
msgid "An example custom comments app"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:37
# 53037555d77d4d1a9ba1c973bf0d1ebb
msgid "One of the most common types of customization is modifying the set of fields provided on the built-in comment model. For example, some sites that allow comments want the commentator to provide a title for their comment; the built-in comment model has no field for that title."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:42
# 23fb7906cb4a4bce89328a65ebd821c0
msgid "To make this kind of customization, we'll need to do three things:"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:44
# 0b12fef2769c475cb981f1e60c44447a
msgid "Create a custom comment :class:`~django.db.models.Model` that adds on the \"title\" field."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:47
# 7129be594d06495797cd6d8e3fe6090a
msgid "Create a custom comment :class:`~django.forms.Form` that also adds this \"title\" field."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:50
# 1cc9624afd4b47c898ae113127143bc8
msgid "Inform Django of these objects by defining a few functions in a custom :setting:`COMMENTS_APP`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:53
# e0d31b696c5047249f382277e27fb726
msgid "So, carrying on the example above, we're dealing with a typical app structure in the ``my_custom_app`` directory::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:61
# 8bfb4f536b0d4c4db05b29b6b516b23d
msgid "In the ``models.py`` we'll define a ``CommentWithTitle`` model::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:69
# 4765cf420195434a836d93b671aafaf6
msgid "Most custom comment models will subclass the :class:`Comment` model. However, if you want to substantially remove or change the fields available in the :class:`Comment` model, but don't want to rewrite the templates, you could try subclassing from :class:`BaseCommentAbstractModel`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:74
# ca209fa2586e4ba4a44efb1bca124665
msgid "Next, we'll define a custom comment form in ``forms.py``. This is a little more tricky: we have to both create a form and override :meth:`CommentForm.get_comment_model` and :meth:`CommentForm.get_comment_create_data` to return deal with our custom title field::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:97
# 8ba3d7b39ccf4084ac7c66721a369830
msgid "Django provides a couple of \"helper\" classes to make writing certain types of custom comment forms easier; see :mod:`django.contrib.comments.forms` for more."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:101
# 6d4de53c71db4ca9a370368b8465825e
msgid "Finally, we'll define a couple of methods in ``my_custom_app/__init__.py`` to point Django at these classes we've created::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:116
# 5ca747e3daf94989910bf474fa927140
msgid "Be careful not to create cyclic imports in your custom comments app. If you feel your comment configuration isn't being used as defined -- for example, if your comment moderation policy isn't being applied -- you may have a cyclic import problem."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:121
# b867666c3307400abfbc8ac8ad96cfe3
msgid "If you are having unexplained problems with comments behavior, check if your custom comments application imports (even indirectly) any module that itself imports Django's comments module."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:125
# a23c47a211bf4fb3bfdab116821c3bc2
msgid "The above process should take care of most common situations. For more advanced usage, there are additional methods you can define. Those are explained in the next section."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:132
# b115667710fd4fc192e9a015126b5015
msgid "Custom comment app API"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:134
# 993e91e33e434b02b76a0bf8434644cf
msgid "The :mod:`django.contrib.comments` app defines the following methods; any custom comment app must define at least one of them. All are optional, however."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:140
# e428eee742ea471fb3221d474f60f5de
msgid "Return the :class:`~django.db.models.Model` class to use for comments. This model should inherit from :class:`django.contrib.comments.models.BaseCommentAbstractModel`, which defines necessary core fields."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:145
# 9b4dad75236b4af88772419bd7a599a4
msgid "The default implementation returns :class:`django.contrib.comments.models.Comment`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:150
# 8e6eb00947b940ac9697d6555e2aa910
msgid "Return the :class:`~django.forms.Form` class you want to use for creating, validating, and saving your comment model.  Your custom comment form should accept an additional first argument, ``target_object``, which is the object the comment will be attached to."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:156
# 25dff7ae7064432793371c8a91c1ee91
msgid "The default implementation returns :class:`django.contrib.comments.forms.CommentForm`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:161
# a533066b60f44c56a9bc3dcadfa89fd1
msgid "The default comment form also includes a number of unobtrusive spam-prevention features (see :ref:`notes-on-the-comment-form`).  If replacing it with your own form, you may want to look at the source code for the built-in form and consider incorporating similar features."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:169
# 1ab2013ccdcd40de8981c649fe3bfe42
msgid "Return the URL for POSTing comments. This will be the ``<form action>`` attribute when rendering your comment form."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:172
# df8483c91c0248eb96accd889ec3a0c1
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`post_comment` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:177
# 67508455f7414e1081cf3a802132f037
msgid "If you provide a custom comment model and/or form, but you want to use the default :func:`post_comment` view, you will need to be aware that it requires the model and form to have certain additional attributes and methods: see the :func:`post_comment` view documentation for details."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:185
# 7e14757cb7024a3fa075a06b0253b690
msgid "Return the URL for the \"flag this comment\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:187
# 7c758913932743c892ac27d0005960b8
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`django.contrib.comments.views.moderation.flag` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:192
# 6622d98b3d3e43398c32c98ac7cebcb3
msgid "Return the URL for the \"delete this comment\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:194
# e0e329f6e8f94ba2b32e07c5ab0bc9ca
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`django.contrib.comments.views.moderation.delete` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:199
# 5eefe818e41c43c2b1729aaa3561b7b5
msgid "Return the URL for the \"approve this comment from moderation\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:201
# e4855f1a0fea401ca3642853c897429a
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`django.contrib.comments.views.moderation.approve` view."
msgstr ""

#: ../../ref/contrib/comments/example.txt:5
# 2a4fe590c1024fb8aab98e68cfc07a9a
msgid "Example of using the built-in comments app"
msgstr ""

#: ../../ref/contrib/comments/example.txt:7
# c1370b97996743ce87a9eabb75ff8c21
msgid "Follow the first three steps of the quick start guide in the :doc:`documentation </ref/contrib/comments/index>`."
msgstr ""

#: ../../ref/contrib/comments/example.txt:10
# 1f747457416d4c44b370a50af038406e
msgid "Now suppose, you have an app (``blog``) with a model (``Post``) to which you want to attach comments. Let's also suppose that you have a template called ``blog_detail.html`` where you want to display the comments list and comment form."
msgstr ""

#: ../../ref/contrib/comments/example.txt:16
#: ../../ref/templates/builtins.txt:1586
#: ../../ref/templates/builtins.txt:1597
#: ../../ref/templates/builtins.txt:1609
# 5d4ddf25fbbd48f1a83d151ad3bb33f7
# 420682719e6c49a7a3ce50fd9284a138
# 35788789c1c84ddda4c8b37bc274f764
# 315734fef7584dc1bd2c17887017c911
msgid "Template"
msgstr ""

#: ../../ref/contrib/comments/example.txt:18
# 8cdf3924c9c345c6bd49cb38504d56e1
msgid "First, we should load the ``comment`` template tags in the ``blog_detail.html`` so that we can use its functionality. So just like all other custom template tag libraries::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:24
# 79dcafcc4c234be19cef65c91c3d40a5
msgid "Next, let's add the number of comments attached to the particular model instance of ``Post``. For this we assume that a context variable ``object_pk`` is present which gives the ``id`` of the instance of ``Post``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:29
# 2bbd46a5872a4db28f5532358835b90e
msgid "The usage of the :ttag:`get_comment_count` tag is like below::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:34
# a628144ce6f3484ca4f83958a6c571b4
msgid "If you have the instance (say ``entry``) of the model (``Post``) available in the context, then you can refer to it directly::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:42
# 2456ae6a8f684fa7a913aaaa5150e99f
msgid "Next, we can use the :ttag:`render_comment_list` tag, to render all comments to the given instance (``entry``) by using the ``comments/list.html`` template::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:47
# a16e9a9a4926415a9ddd923b3165628b
msgid "Django will will look for the ``list.html`` under the following directories (for our example)::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:54
# 7859a02635a941399ab98c19e6693da8
msgid "To get a list of comments, we make use of the :ttag:`get_comment_list` tag. Using this tag is very similar to the :ttag:`get_comment_count` tag. We need to remember that :ttag:`get_comment_list` returns a list of comments and hence we have to iterate through them to display them::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:67
# f89d454ac2cd4e3bb2075be8596866aa
msgid "Finally, we display the comment form, enabling users to enter their comments. There are two ways of doing so. The first is when you want to display the comments template available under your ``comments/form.html``. The other method gives you a chance to customize the form."
msgstr ""

#: ../../ref/contrib/comments/example.txt:72
# 5998c2f62e194b58aac3fea4aaeb5170
msgid "The first method makes use of the :ttag:`render_comment_form` tag. Its usage too is similar to the other three tags we have discussed above::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:77
# ac8b82c330ae4ebc90e5f2c56a5928e1
msgid "It looks for the ``form.html`` under the following directories (for our example)::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:84
# 6368b92604bf4519b649b318eeeddcee
msgid "Since we customize the form in the second method, we make use of another tag called :ttag:`comment_form_target`. This tag on rendering gives the URL where the comment form is posted. Without any :doc:`customization </ref/contrib/comments/custom>`, :ttag:`comment_form_target` evaluates to ``/comments/post/``. We use this tag in the form's ``action`` attribute."
msgstr ""

#: ../../ref/contrib/comments/example.txt:90
# 8c5a039c17ee43138852159b57145161
msgid "The :ttag:`get_comment_form` tag renders a ``form`` for a model instance by creating a context variable. One can iterate over the ``form`` object to get individual fields. This gives you fine-grain control over the form::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:100
# e04efa3803bc4cedafff4f940a9b4822
msgid "But let's look at a simple example::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:119
# 480ba839e9a9418db09215b28eb48a67
msgid "Flagging"
msgstr ""

#: ../../ref/contrib/comments/example.txt:121
# 4c9defa3b53e411ea60916b3e5cca894
msgid "If you want your users to be able to flag comments (say for profanity), you can just direct them (by placing a link in your comment list) to ``/flag/{{ comment.id }}/``. Similarly, a user with requisite permissions (``\"Can moderate comments\"``) can approve and delete comments. This can also be done through the ``admin`` as you'll see later. You might also want to customize the following templates:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:128
# 52785bb513bd488bb6635457308479e4
msgid "``flag.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:129
# 15d939da68ea4121833e1fa5502f34b7
msgid "``flagged.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:130
# 87543a71db3d4f33baf1564074751e59
msgid "``approve.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:131
# 1b5e3712e341434eac93682ddcda5420
msgid "``approved.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:132
# 3401cb4a4ef7437783189d139e042a76
msgid "``delete.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:133
# b89f218c795c453c81bbd0d45c87ebee
msgid "``deleted.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:135
# 3c6e85552f434622813270dd16abc8cd
msgid "found under the directory structure we saw for ``form.html``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:138
# f9dd32b7c38a4190a72bbcf9900938d2
msgid "Feeds"
msgstr ""

#: ../../ref/contrib/comments/example.txt:140
# c096eb55512a46da949d989b64580e42
msgid "Suppose you want to export a :doc:`feed </ref/contrib/syndication>` of the latest comments, you can use the built-in :class:`LatestCommentFeed`. Just enable it in your project's ``urls.py``:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:155
# 97430dc92d3a408c9bf2199f9d3a2706
msgid "Now you should have the latest comment feeds being served off ``/feeds/latest/``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:159
# 75da4e6c98ba47d398f47e75963eb9fc
msgid "Prior to Django 1.3, the LatestCommentFeed was deployed using the syndication feed view:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:180
# 3c9959b4afa344058474674cc7fdebc5
msgid "Moderation"
msgstr ""

#: ../../ref/contrib/comments/example.txt:182
# 878471040cbd47a3b9743dda8def3120
msgid "Now that we have the comments framework working, we might want to have some moderation setup to administer the comments. The comments framework comes built-in with :doc:`generic comment moderation </ref/contrib/comments/moderation>`. The comment moderation has the following features (all of which or only certain can be enabled):"
msgstr ""

#: ../../ref/contrib/comments/example.txt:188
# b06d0f14fc0143e49da8ab363093439f
msgid "Enable comments for a particular model instance."
msgstr ""

#: ../../ref/contrib/comments/example.txt:189
# f870d573ea7e47b1a125b5b571abad4c
msgid "Close comments after a particular (user-defined) number of days."
msgstr ""

#: ../../ref/contrib/comments/example.txt:190
# 6fa3cf21b14e4cef93f2b008a834009d
msgid "Email new comments to the site-staff."
msgstr ""

#: ../../ref/contrib/comments/example.txt:192
# 35d41c1c1a884e278e97c959a2ee5b90
msgid "To enable comment moderation, we subclass the :class:`CommentModerator` and register it with the moderation features we want. Let's suppose we want to close comments after 7 days of posting and also send out an email to the site staff. In ``blog/models.py``, we register a comment moderator in the following way:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:216
# 263340d0de6f4347849adcdd2a1feeea
msgid "The generic comment moderation also has the facility to remove comments. These comments can then be moderated by any user who has access to the ``admin`` site and the ``Can moderate comments`` permission (can be set under the ``Users`` page in the ``admin``)."
msgstr ""

#: ../../ref/contrib/comments/example.txt:221
# 495563e9f0f7486784381399827a4657
msgid "The moderator can ``Flag``, ``Approve`` or ``Remove`` comments using the ``Action`` drop-down in the ``admin`` under the ``Comments`` page."
msgstr ""

#: ../../ref/contrib/comments/example.txt:226
# ad00445a08624abb88dc0f3c744080db
msgid "Only a super-user will be able to delete comments from the database. ``Remove Comments`` only sets the ``is_public`` attribute to ``False``."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:3
# 13f000444f794f50b12e3489adff5000
msgid "Comment form classes"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:8
# 6574958edbc34510ae70d8a9d7395eb9
msgid "The ``django.contrib.comments.forms`` module contains a handful of forms you'll use when writing custom views dealing with comments, or when writing :doc:`custom comment apps </ref/contrib/comments/custom>`."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:14
# 6a82edc3480e4918b7d9e0c5c65d44f7
msgid "The main comment form representing the standard, built-in way of handling submitted comments. This is the class used by all the views :mod:`django.contrib.comments` to handle submitted comments."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:18
# 681f45fe4f3f4468bdf718eb462d430b
msgid "If you want to build custom views that are similar to Django's built-in comment handling views, you'll probably want to use this form."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:22
# 224d06eb46e0437896dc14f3f6b2f58f
msgid "Abstract comment forms for custom comment apps"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:24
# 515ce39aad1e41629f2a9996c2871f62
msgid "If you're building a :doc:`custom comment app </ref/contrib/comments/custom>`, you might want to replace *some* of the form logic but still rely on parts of the existing form."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:28
# 6651f38e607b49168afcb27d4a73b7f8
msgid ":class:`CommentForm` is actually composed of a couple of abstract base class forms that you can subclass to reuse pieces of the form handling logic:"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:33
# 0fed402b42ab430aa56eebae4ea3b6dc
msgid "Handles the anti-spoofing protection aspects of the comment form handling."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:35
# c188e2d935e7433ebc64d3c303ed434a
msgid "This class contains the ``content_type`` and ``object_pk`` fields pointing to the object the comment is attached to, along with a ``timestamp`` and a ``security_hash`` of all the form data. Together, the timestamp and the security hash ensure that spammers can't \"replay\" form submissions and flood you with comments."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:43
# 981e93b9dea541d382c35ca7ca662424
msgid "Handles the details of the comment itself."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:45
# aed5ae8889d04dae9abb3f1a0fb92335
msgid "This class contains the ``name``, ``email``, ``url``, and the ``comment`` field itself, along with the associated validation logic."
msgstr ""

#: ../../ref/contrib/comments/index.txt:3
# 6182d1b812b249d69ae3913be7c79bff
msgid "Django's comments framework"
msgstr ""

#: ../../ref/contrib/comments/index.txt:10
# 2fec8663ec0b4f049906b4f0fa64d437
msgid "Django includes a simple, yet customizable comments framework. The built-in comments framework can be used to attach comments to any model, so you can use it for comments on blog entries, photos, book chapters, or anything else."
msgstr ""

#: ../../ref/contrib/comments/index.txt:16
# 2f2229553c664706a66687454e7a039d
msgid "If you used to use Django's older (undocumented) comments framework, you'll need to upgrade. See the :doc:`upgrade guide </ref/contrib/comments/upgrade>` for instructions."
msgstr ""

#: ../../ref/contrib/comments/index.txt:21
# 76fd76e3c3024e77ab21329dc66ae1cc
msgid "Quick start guide"
msgstr ""

#: ../../ref/contrib/comments/index.txt:23
# b7f4101dc6e54386bb605d973296dd2d
msgid "To get started using the ``comments`` app, follow these steps:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:25
# 54d35c3c10bb4c97894373703ec89e85
msgid "Install the comments framework by adding ``'django.contrib.comments'`` to :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:28
# 48b51be777b44f069b2f86f94da75df4
msgid "Run ``manage.py syncdb`` so that Django will create the comment tables."
msgstr ""

#: ../../ref/contrib/comments/index.txt:30
# 5428b07e85814db19c11f2f06803a1d2
msgid "Add the comment app's URLs to your project's ``urls.py``:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:40
# 959419223f9b43209a265d878429763e
msgid "Use the `comment template tags`_ below to embed comments in your templates."
msgstr ""

#: ../../ref/contrib/comments/index.txt:43
# 209df6181b564df781ba1e86cfbda38a
msgid "You might also want to examine :doc:`/ref/contrib/comments/settings`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:46
# 2fb5b719a8fe4d148e6f73fb69754bc9
msgid "Comment template tags"
msgstr ""

#: ../../ref/contrib/comments/index.txt:48
# 41c336e07e5c45da933ca5c2fc627925
msgid "You'll primarily interact with the comment system through a series of template tags that let you embed comments and generate forms for your users to post them."
msgstr ""

#: ../../ref/contrib/comments/index.txt:51
# e3d35217c40147bc8ba79c7d6db2b908
msgid "Like all custom template tag libraries, you'll need to :ref:`load the custom tags <loading-custom-template-libraries>` before you can use them::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:56
# 6da5b28acefa400383cdfcd3df3533fb
msgid "Once loaded you can use the template tags below."
msgstr ""

#: ../../ref/contrib/comments/index.txt:59
# d44e9ece95ce42498f45e868bd66a361
msgid "Specifying which object comments are attached to"
msgstr ""

#: ../../ref/contrib/comments/index.txt:61
# e9372584f2034937bb5a9b2af7c05c09
msgid "Django's comments are all \"attached\" to some parent object. This can be any instance of a Django model. Each of the tags below gives you a couple of different ways you can specify which object to attach to:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:65
# 7436bec3bbe24278812eaf1d6273fd84
msgid "Refer to the object directly -- the more common method. Most of the time, you'll have some object in the template's context you want to attach the comment to; you can simply use that object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:69
# d01acf2b32254c7e9ede5bef42759bcd
msgid "For example, in a blog entry page that has a variable named ``entry``, you could use the following to load the number of comments::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:74
# 877c72da2df646a990e9e6ea02796116
msgid "Refer to the object by content-type and object id. You'd use this method if you, for some reason, don't actually have direct access to the object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:77
# 005bfedf7f4b4504a72a0e23da3138f4
msgid "Following the above example, if you knew the object ID was ``14`` but didn't have access to the actual object, you could do something like::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:82
# 6ff5039f9c554549b53924534a421972
msgid "In the above, ``blog.entry`` is the app label and (lower-cased) model name of the model class."
msgstr ""

#: ../../ref/contrib/comments/index.txt:86
# 582dc329fdc84379856cfa7d51d2af09
msgid "Displaying comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:88
# 907aa703bae742d183893e99beef312f
msgid "To display a list of comments, you can use the template tags :ttag:`render_comment_list` or :ttag:`get_comment_list`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:94
# 69709d1f0497426eb6e990c1a6e49da4
msgid "Quickly rendering a comment list"
msgstr ""

#: ../../ref/contrib/comments/index.txt:96
# 18d258fb6a9240e6934749010d47c8ff
msgid "The easiest way to display a list of comments for some object is by using :ttag:`render_comment_list`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:105
# db971aa4ef864a38a0d7e2af0ba4749c
msgid "This will render comments using a template named ``comments/list.html``, a default version of which is included with Django."
msgstr ""

#: ../../ref/contrib/comments/index.txt:111
# d2d5eef77d1f4f5887b03b04d665406a
msgid "Rendering a custom comment list"
msgstr ""

#: ../../ref/contrib/comments/index.txt:113
# 48c6286c8f244e7fb32054b0c64317a0
msgid "To get the list of comments for some object, use :ttag:`get_comment_list`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:124
# 2d621390630842ddb352e99e28a96094
msgid "This returns a list of :class:`~django.contrib.comments.models.Comment` objects; see :doc:`the comment model documentation </ref/contrib/comments/models>` for details."
msgstr ""

#: ../../ref/contrib/comments/index.txt:131
# 29962c597def4cf196422bbf1c944a26
msgid "Linking to comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:135
# 0fd124dd967a4299b947fdbf25f9e74c
msgid "To provide a permalink to a specific comment, use :ttag:`get_comment_permalink`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:139
# 6e4a0b84018c41ba97ab1472b9451bb2
msgid "By default, the named anchor that will be appended to the URL will be the letter 'c' followed by the comment id, for example 'c82'. You may specify a custom format string if you wish to override this behavior::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:145
# c4b6fe168d7f40eeb1ebe4b4fc48135a
msgid "The format string is a standard python format string. Valid mapping keys include any attributes of the comment object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:148
# 596e9839f9194b84983bee29f261b220
msgid "Regardless of whether you specify a custom anchor pattern, you must supply a matching named anchor at a suitable place in your template."
msgstr ""

#: ../../ref/contrib/comments/index.txt:163
# bce8aa2e1b514c8780233aec81fbebfd
msgid "There's a known bug in Safari/Webkit which causes the named anchor to be forgotten following a redirect. The practical impact for comments is that the Safari/webkit browsers will arrive at the correct page but will not scroll to the named anchor."
msgstr ""

#: ../../ref/contrib/comments/index.txt:171
# c79d72014f8a4678a1a087c4888eaf76
msgid "Counting comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:173
# d3d06f1430874e4684199bceabfca0b7
msgid "To count comments attached to an object, use :ttag:`get_comment_count`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:185
# 539eace1949a4637a5c0d4a8514aa825
msgid "Displaying the comment post form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:187
# af216d5454b84610a602b4a61b114675
msgid "To show the form that users will use to post a comment, you can use :ttag:`render_comment_form` or :ttag:`get_comment_form`"
msgstr ""

#: ../../ref/contrib/comments/index.txt:193
# 96bce538d18b4055ab4f89928b0aeaaf
msgid "Quickly rendering the comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:195
# 1fb3dec7774f409ab9b8b837da1c8141
msgid "The easiest way to display a comment form is by using :ttag:`render_comment_form`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:204
# d723e61c96d448b09524498a511fc23c
msgid "This will render comments using a template named ``comments/form.html``, a default version of which is included with Django."
msgstr ""

#: ../../ref/contrib/comments/index.txt:210
# fad76e142a534a8a898cbf7324b84b6a
msgid "Rendering a custom comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:212
# 55dee9b662cb4f4e95f0324771d589d3
msgid "If you want more control over the look and feel of the comment form, you use use :ttag:`get_comment_form` to get a :doc:`form object </topics/forms/index>` that you can use in the template::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:218
# 8e052fc0677e43e7901b295a1882eacc
msgid "A complete form might look like::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:234
# 6482552b0c5740e8a5aa6cdcf8d2b3da
msgid "Be sure to read the `notes on the comment form`_, below, for some special considerations you'll need to make if you're using this approach."
msgstr ""

#: ../../ref/contrib/comments/index.txt:240
# aaae762f5f894739bd3a6645aa5ea42a
msgid "Getting the comment form target"
msgstr ""

#: ../../ref/contrib/comments/index.txt:242
# ff185d221bb24060a59adefedfee77c0
msgid "You may have noticed that the above example uses another template tag -- :ttag:`comment_form_target` -- to actually get the ``action`` attribute of the form. This will always return the correct URL that comments should be posted to; you'll always want to use it like above::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:250
# 989aec6d87554832b3c4859bccfc8d7a
msgid "Redirecting after the comment post"
msgstr ""

#: ../../ref/contrib/comments/index.txt:252
# 158591137191453495baa7592cd20386
msgid "To specify the URL you want to redirect to after the comment has been posted, you can include a hidden form input called ``next`` in your comment form. For example::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:260
# 567f061cad3d4d57bdfe18ddf2d3d1e5
msgid "Notes on the comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:262
# 8727b66c04994199afb7ec1ebe10819f
msgid "The form used by the comment system has a few important anti-spam attributes you should know about:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:265
# 465580786a0a42de9b47d9a01659d015
msgid "It contains a number of hidden fields that contain timestamps, information about the object the comment should be attached to, and a \"security hash\" used to validate this information. If someone tampers with this data -- something comment spammers will try -- the comment submission will fail."
msgstr ""

#: ../../ref/contrib/comments/index.txt:270
# 04194ea17f744fd3b6b466805721b162
msgid "If you're rendering a custom comment form, you'll need to make sure to pass these values through unchanged."
msgstr ""

#: ../../ref/contrib/comments/index.txt:273
# 21191ecf9b2c46b6bc6c96219f0fbc38
msgid "The timestamp is used to ensure that \"reply attacks\" can't continue very long. Users who wait too long between requesting the form and posting a comment will have their submissions refused."
msgstr ""

#: ../../ref/contrib/comments/index.txt:277
# 3baba769476a49348e8828d89ef12d90
msgid "The comment form includes a \"honeypot_\" field. It's a trap: if any data is entered in that field, the comment will be considered spam (spammers often automatically fill in all fields in an attempt to make valid submissions)."
msgstr ""

#: ../../ref/contrib/comments/index.txt:281
# c53ff1820e7e42b5985852045dd077a0
msgid "The default form hides this field with a piece of CSS and further labels it with a warning field; if you use the comment form with a custom template you should be sure to do the same."
msgstr ""

#: ../../ref/contrib/comments/index.txt:285
# a2c1ed368987482b84999c12e2130270
msgid "The comments app also depends on the more general :doc:`Cross Site Request Forgery protection </ref/contrib/csrf>` that comes with Django.  As described in the documentation, it is best to use ``CsrfViewMiddleware``.  However, if you are not using that, you will need to use the ``csrf_protect`` decorator on any views that include the comment form, in order for those views to be able to output the CSRF token and cookie."
msgstr ""

#: ../../ref/contrib/comments/index.txt:295
# 95519ba5e7684e78ba5993733b7f24ff
msgid "More information"
msgstr ""

#: ../../ref/contrib/comments/models.txt:3
# 015dba4a76ab4f73b097d416388172ec
msgid "The built-in comment models"
msgstr ""

#: ../../ref/contrib/comments/models.txt:10
# ab76a60835cf484b9406f89066689682
msgid "Django's built-in comment model. Has the following fields:"
msgstr ""

#: ../../ref/contrib/comments/models.txt:14
# b38a39546ba142c3a4154d67576599de
msgid "A :class:`~django.contrib.contettypes.generic.GenericForeignKey` attribute pointing to the object the comment is attached to. You can use this to get at the related object (i.e. ``my_comment.content_object``)."
msgstr ""

#: ../../ref/contrib/comments/models.txt:18
# be0eaa5b29a1438cad6f9fa54a99cc41
msgid "Since this field is a :class:`~django.contrib.contettypes.generic.GenericForeignKey`, it's actually syntactic sugar on top of two underlying attributes, described below."
msgstr ""

#: ../../ref/contrib/comments/models.txt:25
# 564a56a09986446e94e22f07d006541c
msgid "A :class:`~django.db.models.ForeignKey` to :class:`~django.contrib.contenttypes.models.ContentType`; this is the type of the object the comment is attached to."
msgstr ""

#: ../../ref/contrib/comments/models.txt:31
# 6dbd6ed47ca146648d47438eb799c63f
msgid "A :class:`~django.db.models.TextField` containing the primary key of the object the comment is attached to."
msgstr ""

#: ../../ref/contrib/comments/models.txt:36
# bcd4e2a519214ac5bed20c1d3dc54f8a
msgid "A :class:`~django.db.models.ForeignKey` to the :class:`~django.contrib.sites.models.Site` on which the comment was posted."
msgstr ""

#: ../../ref/contrib/comments/models.txt:42
# 48917ef32f4d4d06b5c4f4ba4e46a709
msgid "A :class:`~django.db.models.ForeignKey` to the :class:`~django.contrib.auth.models.User` who posted the comment. May be blank if the comment was posted by an unauthenticated user."
msgstr ""

#: ../../ref/contrib/comments/models.txt:48
# 6e5e50ec8ac34824ad9fd03dca531014
msgid "The name of the user who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:52
# 59206d805e924aa88da3e568704cd82f
msgid "The email of the user who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:56
# 4770e112833d495d9b25705a600004ce
msgid "The URL entered by the person who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:60
# 446e3e98f7f54150a8c1abce3aa15d46
msgid "The actual content of the comment itself."
msgstr ""

#: ../../ref/contrib/comments/models.txt:64
# 88c329c7890e497f9188ae510b259931
msgid "The date the comment was submitted."
msgstr ""

#: ../../ref/contrib/comments/models.txt:68
# 0162319045fe406a84704c3a79ecee9e
msgid "The IP address of the user posting the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:72
# d2369b3d6add4275baa355b9dd9b7ef3
msgid "``False`` if the comment is in moderation (see :doc:`/ref/contrib/comments/moderation`); If ``True``, the comment will be displayed on the site."
msgstr ""

#: ../../ref/contrib/comments/models.txt:78
# 872b191a7f784610b9d2e14a5af94759
msgid "``True`` if the comment was removed. Used to keep track of removed comments instead of just deleting them."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:3
# 3f1ebbeca62e474f827fa258bb9be8eb
msgid "Generic comment moderation"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:8
# b85ab08ef1c04db196bc4cbb08531f15
msgid "Django's bundled comments application is extremely useful on its own, but the amount of comment spam circulating on the Web today essentially makes it necessary to have some sort of automatic moderation system in place for any application which makes use of comments. To make this easier to handle in a consistent fashion, ``django.contrib.comments.moderation`` provides a generic, extensible comment-moderation system which can be applied to any model or set of models which want to make use of Django's comment system."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:21
# 4c19fcdbee524ff68396283dfe7aea57
msgid "The entire system is contained within ``django.contrib.comments.moderation``, and uses a two-step process to enable moderation for any given model:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:24
# 5338d7d92d1a4b29be08ab5caecd113d
msgid "A subclass of :class:`CommentModerator` is defined which specifies the moderation options the model wants to enable."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:28
# 4df932ccbed44464acf4b75a04ec5b15
msgid "The model is registered with the moderation system, passing in the model class and the class which specifies its moderation options."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:31
# f3cafd91f45c4bf0b487d9670b8040e5
msgid "A simple example is the best illustration of this. Suppose we have the following model, which would represent entries in a Weblog::"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:42
# 8e9c493fed6349dfb95dcda2bb9f8554
msgid "Now, suppose that we want the following steps to be applied whenever a new comment is posted on an ``Entry``:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:45
# ecefb8bba9ba405d8490ed0c76b51940
msgid "If the ``Entry``'s ``enable_comments`` field is ``False``, the comment will simply be disallowed (i.e., immediately deleted)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:48
# 51b5f06d907c425cbb80180e7e058d4a
msgid "If the ``enable_comments`` field is ``True``, the comment will be allowed to save."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:51
# 25e5731d4aaf4800aa1a2316df24f79d
msgid "Once the comment is saved, an email should be sent to site staff notifying them of the new comment."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:54
# 37372c30b7dd4c75821542e31bc15609
msgid "Accomplishing this is fairly straightforward and requires very little code::"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:65
# cfb5a841147f415a804244ee355ed79b
msgid "The :class:`CommentModerator` class pre-defines a number of useful moderation options which subclasses can enable or disable as desired, and ``moderator`` knows how to work with them to determine whether to allow a comment, whether to moderate a comment which will be allowed to post, and whether to email notifications of new comments."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:72
# d4bc476e0aff4d78b734e3a98416037e
msgid "Built-in moderation options"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:76
# eaaca0745d80434b91ef17e07cd8a4d3
msgid "Most common comment-moderation needs can be handled by subclassing :class:`CommentModerator` and changing the values of pre-defined attributes; the full range of built-in options is as follows."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:83
# 0ab38765d85c45008cc30400db350c07
msgid "If this is set to the name of a :class:`~django.db.models.fields.DateField` or :class:`~django.db.models.fields.DateTimeField` on the model for which comments are being moderated, new comments for objects of that model will be disallowed (immediately deleted) when a certain number of days have passed after the date specified in that field. Must be used in conjunction with :attr:`close_after`, which specifies the number of days past which comments should be disallowed. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:95
# 4d19b15ab0b14538bfc1b6f2558a2e0c
msgid "Like :attr:`auto_close_field`, but instead of outright deleting new comments when the requisite number of days have elapsed, it will simply set the ``is_public`` field of new comments to ``False`` before saving them. Must be used in conjunction with :attr:`moderate_after`, which specifies the number of days past which comments should be moderated. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:104
# e442745aa9e045b58b6486f63172c07b
msgid "If :attr:`auto_close_field` is used, this must specify the number of days past the value of the field specified by :attr:`auto_close_field` after which new comments for an object should be disallowed. Allowed values are ``None``, 0 (which disallows comments immediately), or any positive integer. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:113
# 3b315b7504d4443ea753192535027555
msgid "If ``True``, any new comment on an object of this model which survives moderation (i.e., is not deleted) will generate an email to site staff. Default value is ``False``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:119
# e25bb8ac40f74067b53a27e0c7212103
msgid "If this is set to the name of a :class:`~django.db.models.fields.BooleanField` on the model for which comments are being moderated, new comments on objects of that model will be disallowed (immediately deleted) whenever the value of that field is ``False`` on the object the comment would be attached to. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:128
# 05e9a1f7ed7c4fd6ac125929aff04e74
msgid "If :attr:`auto_moderate_field` is used, this must specify the number of days past the value of the field specified by :attr:`auto_moderate_field` after which new comments for an object should be marked non-public. Allowed values are ``None``, 0 (which moderates comments immediately), or any positive integer. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:135
# 9853160037284c6eabfd9825dfe4426b
msgid "Simply subclassing :class:`CommentModerator` and changing the values of these options will automatically enable the various moderation methods for any models registered using the subclass."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:141
# e58237110cd142debd9514fcb4d55ea8
msgid "``moderate_after`` and ``close_after`` now accept 0 as a valid value."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:144
# 009c23514a0d4ad29e099b2621ea1202
msgid "Adding custom moderation methods"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:146
# 7019225698f1481fa7c88cd6e264ef80
msgid "For situations where the built-in options listed above are not sufficient, subclasses of :class:`CommentModerator` can also override the methods which actually perform the moderation, and apply any logic they desire.  :class:`CommentModerator` defines three methods which determine how moderation will take place; each method will be called by the moderation system and passed two arguments: ``comment``, which is the new comment being posted, ``content_object``, which is the object the comment will be attached to, and ``request``, which is the :class:`~django.http.HttpRequest` in which the comment is being submitted:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:158
# d8ab53844a014c1d9bee681a42e22d09
msgid "Should return ``True`` if the comment should be allowed to post on the content object, and ``False`` otherwise (in which case the comment will be immediately deleted)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:164
# 55edf870a619490db4661f40803efb79
msgid "If email notification of the new comment should be sent to site staff or moderators, this method is responsible for sending the email."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:170
# d83975a67a6946b1a59dfd82f8dc20c4
msgid "Should return ``True`` if the comment should be moderated (in which case its ``is_public`` field will be set to ``False`` before saving), and ``False`` otherwise (in which case the ``is_public`` field will not be changed)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:177
# 5fc2531dd9174f01a21005242a5f2222
msgid "Registering models for moderation"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:179
# 010d1cc930c1446ca94c03c4184af893
msgid "The moderation system, represented by ``django.contrib.comments.moderation.moderator`` is an instance of the class :class:`Moderator`, which allows registration and \"unregistration\" of models via two methods:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:186
# c78d059fbde74f6bbe30bafd9c81d367
msgid "Takes two arguments: the first should be either a model class or list of model classes, and the second should be a subclass of ``CommentModerator``, and register the model or models to be moderated using the options defined in the ``CommentModerator`` subclass. If any of the models are already registered for moderation, the exception :exc:`AlreadyModerated` will be raised."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:196
# e8a95609706846afa213ab3f5a7df487
msgid "Takes one argument: a model class or list of model classes, and removes the model or models from the set of models which are being moderated. If any of the models are not currently being moderated, the exception :exc:`NotModerated` will be raised."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:204
# c54268208d9f4d53a3d18daff693d7cf
msgid "Customizing the moderation system"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:206
# bda8ed1aef5f4f96b5c16f532fa4a449
msgid "Most use cases will work easily with simple subclassing of :class:`CommentModerator` and registration with the provided :class:`Moderator` instance, but customization of global moderation behavior can be achieved by subclassing :class:`Moderator` and instead registering models with an instance of the subclass."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:214
# 36920c5375854800b53e3b39f0edcfcf
msgid "In addition to the :meth:`Moderator.register` and :meth:`Moderator.unregister` methods detailed above, the following methods on :class:`Moderator` can be overridden to achieve customized behavior:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:220
# 51403073fff5426596e0ae9a531d816f
msgid "Determines how moderation is set up globally. The base implementation in :class:`Moderator` does this by attaching listeners to the :data:`~django.contrib.comments.signals.comment_will_be_posted` and :data:`~django.contrib.comments.signals.comment_was_posted` signals from the comment models."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:229
# b671907a6b8c4bf18a870a1bd03d9ebe
msgid "In the base implementation, applies all pre-save moderation steps (such as determining whether the comment needs to be deleted, or whether it needs to be marked as non-public or generate an email)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:236
# bb4d5f9cb544484d846d3ddf3d45c0a6
msgid "In the base implementation, applies all post-save moderation steps (currently this consists entirely of deleting comments which were disallowed)."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:3
# bc164c990e6c4c96a4a27e7c11b790bf
msgid "Comment settings"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:5
# 6e90ceec5b994d8f909f2f386b1dca9e
msgid "These settings configure the behavior of the comments framework:"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:10
# 5871d8ca4b22453bbf41440aefcbe92b
msgid "COMMENTS_HIDE_REMOVED"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:12
# 7da56e3f7eaf40c2ab8ed8d0eb607046
msgid "If ``True`` (default), removed comments will be excluded from comment lists/counts (as taken from template tags). Otherwise, the template author is responsible for some sort of a \"this comment has been removed by the site staff\" message."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:20
# ca616778b94a42b88dfc3927209803fd
msgid "COMMENT_MAX_LENGTH"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:22
# 16ee9b2eb944473795de5ce276501d10
msgid "The maximum length of the comment field, in characters. Comments longer than this will be rejected. Defaults to 3000."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:28
# b962921f7f74437ea0b22c32496b79e4
msgid "COMMENTS_APP"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:30
# 135411cb595d4825921172c807b79dae
msgid "An app which provides :doc:`customization of the comments framework </ref/contrib/comments/custom>`.  Use the same dotted-string notation as in :setting:`INSTALLED_APPS`.  Your custom :setting:`COMMENTS_APP` must also be listed in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:3
# eb768f792a3249e9a8346e901c81dcad
msgid "Signals sent by the comments app"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:8
# 2bf4e072725342fb95c9520c00e533cc
msgid "The comment app sends a series of :doc:`signals </topics/signals>` to allow for comment moderation and similar activities. See :doc:`the introduction to signals </topics/signals>` for information about how to register for and receive these signals."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:14
# ddf9cf79e4d7479e898f2229f4eacf32
msgid "comment_will_be_posted"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:19
# 289f166696fb4f8385eae9700f0adbbd
msgid "Sent just before a comment will be saved, after it's been sanity checked and submitted. This can be used to modify the comment (in place) with posting details or other such actions."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:23
# 4583c60168584261a56d7b22338baa99
msgid "If any receiver returns ``False`` the comment will be discarded and a 403 (not allowed) response will be returned."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:26
# 338f0095bcab4ab7975870226865082b
msgid "This signal is sent at more or less the same time (just before, actually) as the ``Comment`` object's :data:`~django.db.models.signals.pre_save` signal."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:29
#: ../../ref/contrib/comments/signals.txt:50
#: ../../ref/contrib/comments/signals.txt:73
#: ../../ref/signals.txt:52
#: ../../ref/signals.txt:90
#: ../../ref/signals.txt:107
#: ../../ref/signals.txt:135
#: ../../ref/signals.txt:166
#: ../../ref/signals.txt:189
#: ../../ref/signals.txt:219
#: ../../ref/signals.txt:372
#: ../../ref/signals.txt:428
#: ../../ref/signals.txt:443
#: ../../ref/signals.txt:456
#: ../../ref/signals.txt:487
#: ../../ref/signals.txt:508
#: ../../ref/signals.txt:542
# 2f461b6a9e52457a93dde87876c30c7b
# 841f27236826463b868cd9925291465d
# 2b1804e373774cfa80ddbc5c614caa91
# d2244ac021b544cb80784759671327f7
# faaeb731ec0d40d5b58276968d0507a7
# 6e0a2a151d4d4773a05a831cf81cd100
# 8ded30b9900c49118e903d112e530e33
# 2bf61987b71a4f82b6ade4fa190d0813
# e7ab424bc0b7477db5adb0a71d234213
# 2a57942504b548949e921ccf6e7de6d6
# cff5811fd3064648980ff8e15ade61a7
# 147e2042876f44ab8bd8475881383e9b
# 8d3c0a77fb6d49048054673890290abc
# 23b89d60c74442ad83996a6c298ad6a4
# 3b7a31de64094b4e9ee22565516b0b14
# 6ae26b809a174e8fbe994bdb5ec9d383
# c3594e3c56674115aa01fdd316237611
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:32
#: ../../ref/contrib/comments/signals.txt:53
#: ../../ref/contrib/comments/signals.txt:76
# fe288f5e7e2045e68d22b60e3f89f4df
# c454027704184f008b9cb93ea4cc8702
# e073d3a9539849149b6e66e1c675d4ea
msgid "The comment model."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:35
# 056dc2444de848beb6804289c93b4ca4
msgid "The comment instance about to be posted. Note that it won't have been saved into the database yet, so it won't have a primary key, and any relations might not work correctly yet."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:40
#: ../../ref/contrib/comments/signals.txt:61
#: ../../ref/contrib/comments/signals.txt:91
# 9808f6372b0e45e3b884ea4b2aeff99e
# c7a914436917417598dd8b5166e3dc92
# 6246006a824a46f7a3b1b6b4b50aa16c
msgid "The :class:`~django.http.HttpRequest` that posted the comment."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:43
# eae5c1ab90324639b4892e19b09d8069
msgid "comment_was_posted"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:48
# 8980a90b6b88428d9d2ee43b7ed8b162
msgid "Sent just after the comment is saved."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:56
#: ../../ref/contrib/comments/signals.txt:79
# 3f83149a12b144b996aa22686e791afd
# 2604187977d448d994621911dfe1cd71
msgid "The comment instance that was posted. Note that it will have already been saved, so if you modify it you'll need to call :meth:`~django.db.models.Model.save` again."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:64
# 94e124bf282d4908bd11316a93630c6f
msgid "comment_was_flagged"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:69
# d46fa820c67940a5b518f1d178a311ca
msgid "Sent after a comment was \"flagged\" in some way. Check the flag to see if this was a user requesting removal of a comment, a moderator approving/removing a comment, or some other custom user flag."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:84
# 17116e3a82f645948f322a1e3f95a46f
msgid "The :class:`~django.contrib.comments.models.CommentFlag` that's been attached to the comment."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:88
# aec2a7b881064e508a2cc7c09154ba77
msgid "``True`` if this is a new flag; ``False`` if it's a duplicate flag."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:3
# 5bffc80ceaf24c1693e397955fe879c8
msgid "Upgrading from Django's previous comment system"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:5
# c583ad21ec2944f9b2695d95f01b4627
msgid "Prior versions of Django included an outdated, undocumented comment system. Users who reverse-engineered this framework will need to upgrade to use the new comment system; this guide explains how."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:8
# 94ac858cbb96404292fd4f07437082f5
msgid "The main changes from the old system are:"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:10
# d9acad9cd12945adabb6697f4ac32db3
msgid "This new system is documented."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:12
# 2e25fde7b9ec4c0da0ec9ed8b60b262b
msgid "It uses modern Django features like :doc:`forms </topics/forms/index>` and :doc:`modelforms </topics/forms/modelforms>`."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:15
# f4faba28acaa4aac822212611fcf2e23
msgid "It has a single ``Comment`` model instead of separate ``FreeComment`` and ``Comment`` models."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:18
# c672ed754c2a461daf54e0568cc6d3bc
msgid "Comments have \"email\" and \"URL\" fields."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:20
# 0c2d994f71ba4790b69f68dc08c67b53
msgid "No ratings, photos and karma. This should only effect World Online."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:22
# 7f7f7425c1bc4acc9c1b66a6c83b6fdc
msgid "The ``{% comment_form %}`` tag no longer exists. Instead, there's now two functions: ``{% get_comment_form %}``, which returns a form for posting a new comment, and ``{% render_comment_form %}``, which renders said form using the ``comments/form.html`` template."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:27
# 5d7a2f7c96404c4ea9dc7bb20a4b9023
msgid "The way comments are include in your URLconf have changed; you'll need to replace::"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:32
# 3f98b60ad2804dae9b94cf311f0b2064
msgid "with::"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:37
# edbc6d86f7734454a95bc27ff5b02254
msgid "Upgrading data"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:39
# f5ce1178e77a4947bb1c4e492cb2a3a8
msgid "The data models for Django's comment system have changed, as have the table names. Before you transfer your existing data into the new comments system, make sure that you have installed the new comments system as explained in the :doc:`quick start guide </ref/contrib/comments/index>`. This will ensure that the new tables have been properly created."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:46
# a27ed77f45f149368af7c78de2bae840
msgid "To transfer your data into the new comments system, you'll need to directly run the following SQL:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:3
# 12f6bf8deba5467ba933efcb3f173238
msgid "The contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:8
# 10b6ba29b9a1453d9b8e02dae1ce0ac0
msgid "Django includes a :mod:`~django.contrib.contenttypes` application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:15
# 0ca1613a0fd84e2cb2945380779f3f96
msgid "At the heart of the contenttypes application is the :class:`~django.contrib.contenttypes.models.ContentType` model, which lives at ``django.contrib.contenttypes.models.ContentType``. Instances of :class:`~django.contrib.contenttypes.models.ContentType` represent and store information about the models installed in your project, and new instances of :class:`~django.contrib.contenttypes.models.ContentType` are automatically created whenever new models are installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:23
# 8689f8d4c2d64917beba4cb235088a68
msgid "Instances of :class:`~django.contrib.contenttypes.models.ContentType` have methods for returning the model classes they represent and for querying objects from those models. :class:`~django.contrib.contenttypes.models.ContentType` also has a :ref:`custom manager <custom-managers>` that adds methods for working with :class:`~django.contrib.contenttypes.models.ContentType` and for obtaining instances of :class:`~django.contrib.contenttypes.models.ContentType` for a particular model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:31
# dc66f66771714c16818ebd83de41f842
msgid "Relations between your models and :class:`~django.contrib.contenttypes.models.ContentType` can also be used to enable \"generic\" relationships between an instance of one of your models and instances of any model you have installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:37
# 643c6f7c773b4128bb99cd4bed62cdd7
msgid "Installing the contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:39
# b8b49c2942ef43c0b664ff59149c8bac
msgid "The contenttypes framework is included in the default :setting:`INSTALLED_APPS` list created by ``django-admin.py startproject``, but if you've removed it or if you manually set up your :setting:`INSTALLED_APPS` list, you can enable it by adding ``'django.contrib.contenttypes'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:45
# 07e6d224be8943f099d9bbf6f2ac8106
msgid "It's generally a good idea to have the contenttypes framework installed; several of Django's other bundled applications require it:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:48
# 458ebc5e24fd4d96bcfd3ae3070ae2aa
msgid "The admin application uses it to log the history of each object added or changed through the admin interface."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:51
# 94121737582e4e5e9d405bca5496436f
msgid "Django's :mod:`authentication framework <django.contrib.auth>` uses it to tie user permissions to specific models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:54
# 3bdc81d454e447dcad633a1524def4b2
msgid "Django's comments system (:mod:`django.contrib.comments`) uses it to \"attach\" comments to any installed model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:60
# 5abd0d7ded2b46baacc885d345871a54
msgid "The ``ContentType`` model"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:64
# 21b7c32189b24ba397154743f118ab53
msgid "Each instance of :class:`~django.contrib.contenttypes.models.ContentType` has three fields which, taken together, uniquely describe an installed model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:70
# 0f90686f688c4fe6bb3795cb563079d1
msgid "The name of the application the model is part of. This is taken from the :attr:`app_label` attribute of the model, and includes only the *last* part of the application's Python import path; \"django.contrib.contenttypes\", for example, becomes an :attr:`app_label` of \"contenttypes\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:78
# bd89db6d9be94a9d943947dfd97a7cf4
msgid "The name of the model class."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:82
# 41fb18334cc14011a14c91721cd48f14
msgid "The human-readable name of the model. This is taken from the :attr:`verbose_name <django.db.models.Field.verbose_name>` attribute of the model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:86
# 26e908f9c1124bc9a64491dc6f023107
msgid "Let's look at an example to see how this works. If you already have the :mod:`~django.contrib.contenttypes` application installed, and then add :mod:`the sites application <django.contrib.sites>` to your :setting:`INSTALLED_APPS` setting and run ``manage.py syncdb`` to install it, the model :class:`django.contrib.sites.models.Site` will be installed into your database. Along with it a new instance of :class:`~django.contrib.contenttypes.models.ContentType` will be created with the following values:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:95
# 63def9e352134f6580ac6f1433341524
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be set to ``'sites'`` (the last part of the Python path \"django.contrib.sites\")."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:99
# 4cbb1c0fbbde459aa52b6db1147eff3c
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:102
# 40518459ebe7469689b51f93f2af78c4
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.name` will be set to ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:108
# ccc70827b8404c6aa51f89906b44f836
msgid "Methods on ``ContentType`` instances"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:110
# 21923b9f25f84164a3ac27c0c0694f2f
msgid "Each :class:`~django.contrib.contenttypes.models.ContentType` instance has methods that allow you to get from a :class:`~django.contrib.contenttypes.models.ContentType` instance to the model it represents, or to retrieve objects from that model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:117
# ea6ad71101594af89e7ebd23f1a82701
msgid "Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the model the :class:`~django.contrib.contenttypes.models.ContentType` represents, and does :meth:`a get() lookup <django.db.models.query.QuerySet.get>` on that model, returning the corresponding object."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:125
# afd1b7862bb347779a8ee17f444abce8
msgid "Returns the model class represented by this :class:`~django.contrib.contenttypes.models.ContentType` instance."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:128
# 56a75b948fc944bb8af56658046facd5
msgid "For example, we could look up the :class:`~django.contrib.contenttypes.models.ContentType` for the :class:`~django.contrib.auth.models.User` model::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:137
# e323384839614373b1ed842ef23c3dd5
msgid "And then use it to query for a particular :class:`~django.contrib.auth.models.User`, or to get access to the ``User`` model class::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:146
# 1c7eebcb31e24cbb8640812e5ae60afe
msgid "Together, :meth:`~django.contrib.contenttypes.models.ContentType.get_object_for_this_type` and :meth:`~django.contrib.contenttypes.models.ContentType.model_class` enable two extremely important use cases:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:151
# 6173b9d02829425592e0752c40b12dbb
msgid "Using these methods, you can write high-level generic code that performs queries on any installed model -- instead of importing and using a single specific model class, you can pass an ``app_label`` and ``model`` into a :class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, and then work with the model class or retrieve objects from it."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:158
# dbf169e4178645ca9936865b445d6eec
msgid "You can relate another model to :class:`~django.contrib.contenttypes.models.ContentType` as a way of tying instances of it to particular model classes, and use these methods to get access to those model classes."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:163
# 7ab239b20ed24883862e389119403aed
msgid "Several of Django's bundled applications make use of the latter technique. For example, :class:`the permissions system <django.contrib.auth.models.Permission>` in Django's authentication framework uses a :class:`~django.contrib.auth.models.Permission` model with a foreign key to :class:`~django.contrib.contenttypes.models.ContentType`; this lets :class:`~django.contrib.auth.models.Permission` represent concepts like \"can add blog entry\" or \"can delete news story\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:173
# 17f4701c0d6f4ebfbd1d3e7c334dbb0f
msgid "The ``ContentTypeManager``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:177
# 9d01a59a1250404c858f79d8b1b7d094
msgid ":class:`~django.contrib.contenttypes.models.ContentType` also has a custom manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, which adds the following methods:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:183
# a3a96760adb849eb81f61d319749695c
msgid "Clears an internal cache used by :class:`~django.contrib.contenttypes.models.ContentType` to keep track of which models for which it has created :class:`~django.contrib.contenttypes.models.ContentType` instances. You probably won't ever need to call this method yourself; Django will call it automatically when it's needed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:192
# 6ad599c7b8184bbea98c5e95e30f3c06
msgid "Takes either a model class or an instance of a model, and returns the :class:`~django.contrib.contenttypes.models.ContentType` instance representing that model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:198
# e68f905ef8124d52b67890e755579268
msgid "Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the :class:`~django.contrib.contenttypes.models.ContentType` instances representing them."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:205
# 7ff10a8db8a64bb3b6efd816c25ac467
msgid "Returns the :class:`~django.contrib.contenttypes.models.ContentType` instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow :class:`~django.contrib.contenttypes.models.ContentType` objects to be referenced via a :ref:`natural key<topics-serialization-natural-keys>` during deserialization."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:212
# 43e8dbe808624992a7f755bdcc937068
msgid "The :meth:`~ContentTypeManager.get_for_model()` method is especially useful when you know you need to work with a :class:`ContentType <django.contrib.contenttypes.models.ContentType>` but don't want to go to the trouble of obtaining the model's metadata to perform a manual lookup::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:228
# 4298163a224c4e4f9e1798dc87a3cb3e
msgid "Generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:230
# a0901999a6684c34847623aa8fbcc090
msgid "Adding a foreign key from one of your own models to :class:`~django.contrib.contenttypes.models.ContentType` allows your model to effectively tie itself to another model class, as in the example of the :class:`~django.contrib.auth.models.Permission` model above. But it's possible to go one step further and use :class:`~django.contrib.contenttypes.models.ContentType` to enable truly generic (sometimes called \"polymorphic\") relationships between models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:238
# 3f225cf1acc24e8b829e88aee16c55b5
msgid "A simple example is a tagging system, which might look like this::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:253
# b218e1ed56ed44bf9ae077216076cda9
msgid "A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one other model, which means that if the ``TaggedItem`` model used a :class:`~django.db.models.ForeignKey` it would have to choose one and only one model to store tags for. The contenttypes application provides a special field type which works around this and allows the relationship to be with any model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:263
# 7cacb20e9e3e4853a741ef265ac9a09f
msgid "There are three parts to setting up a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:266
# 707f3cb1881a493a9259bbe380add4d7
msgid "Give your model a :class:`~django.db.models.ForeignKey` to :class:`~django.contrib.contenttypes.models.ContentType`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:269
# b804ced92a03447bbc9e75a259e94a20
msgid "Give your model a field that can store primary key values from the models you'll be relating to. For most models, this means a :class:`~django.db.models.PositiveIntegerField`. The usual name for this field is \"object_id\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:274
# b58fdc4b0f06475690a6842f262234fc
msgid "Give your model a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`, and pass it the names of the two fields described above. If these fields are named \"content_type\" and \"object_id\", you can omit this -- those are the default field names :class:`~django.contrib.contenttypes.generic.GenericForeignKey` will look for."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:284
# b5c434a4da134985a166986ee4979738
msgid "The \"object_id\" field doesn't have to be the same type as the primary key fields on the related models, but their primary key values must be coercible to the same type as the \"object_id\" field by its :meth:`~django.db.models.Field.get_db_prep_value` method."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:289
# a53d58a57aa74ccf94509325da13e24b
msgid "For example, if you want to allow generic relations to models with either :class:`~django.db.models.IntegerField` or :class:`~django.db.models.CharField` primary key fields, you can use :class:`~django.db.models.CharField` for the \"object_id\" field on your model since integers can be coerced to strings by :meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:296
# 40ce38e76c4941038b5664e143c5ddcc
msgid "For maximum flexibility you can use a :class:`~django.db.models.TextField` which doesn't have a maximum length defined, however this may incur significant performance penalties depending on your database backend."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:301
# 3ed39d5ec8144380949fe6e9b5177d1c
msgid "There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:307
# dd74caeed4154436ab7a8e9b598863e4
msgid "If you're serializing data (for example, when generating :class:`~django.test.TestCase.fixtures`) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related :class:`~django.contrib.contenttypes.models.ContentType` objects. See :ref:`natural keys<topics-serialization-natural-keys>` and :djadminopt:`dumpdata --natural <--natural>` for more information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:314
# ee75d000293b4b5f9a973dbb11ddc155
msgid "This will enable an API similar to the one used for a normal :class:`~django.db.models.ForeignKey`; each ``TaggedItem`` will have a ``content_object`` field that returns the object it's related to, and you can also assign to that field or use it when creating a ``TaggedItem``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:327
# 7f3ac09d11a14f338275ae23bbf20b6f
msgid "Due to the way :class:`~django.contrib.contenttypes.generic.GenericForeignKey` is implemented, you cannot use such fields directly with filters (``filter()`` and ``exclude()``, for example) via the database API. Because a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` isn't a normal field objects, these examples will *not* work::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:339
# 1898b2b00be4427bb65ef46d23875667
msgid "Reverse generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:343
# 1d032cbf6cc94887b4633b930fac17e3
msgid "If you know which models you'll be using most often, you can also add a \"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:350
# 6166d3db7a3648ba84116ff0b337d0ce
msgid "``Bookmark`` instances will each have a ``tags`` attribute, which can be used to retrieve their associated ``TaggedItems``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:362
# 85efe9837ee741b4b668a085199d7c4a
msgid "Just as :class:`~django.contrib.contenttypes.generic.GenericForeignKey` accepts the names of the content-type and object-ID fields as arguments, so too does :class:`~django.contrib.contenttypes.generic.GenericRelation`; if the model which has the generic foreign key is using non-default names for those fields, you must pass the names of the fields when setting up a :class:`.GenericRelation` to it. For example, if the ``TaggedItem`` model referred to above used fields named ``content_type_fk`` and ``object_primary_key`` to create its generic foreign key, then a :class:`.GenericRelation` back to it would need to be defined like so::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:377
# 7df28f225d0c4943a666bf2ba5cc9184
msgid "Of course, if you don't add the reverse relationship, you can do the same types of lookups manually::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:386
# 39e0ed30242f44a3b7f30b1cf48d24f1
msgid "Note that if the model in a :class:`~django.contrib.contenttypes.generic.GenericRelation` uses a non-default value for ``ct_field`` or ``fk_field`` in its :class:`~django.contrib.contenttypes.generic.GenericForeignKey` (e.g. the :mod:`django.contrib.comments` app uses ``ct_field=\"object_pk\"``), you'll need to set ``content_type_field`` and/or ``object_id_field`` in the :class:`~django.contrib.contenttypes.generic.GenericRelation` to match the ``ct_field`` and ``fk_field``, respectively, in the :class:`~django.contrib.contenttypes.generic.GenericForeignKey`::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:398
# 9503357d0e154678b4b3700e91e30265
msgid "Note also, that if you delete an object that has a :class:`~django.contrib.contenttypes.generic.GenericRelation`, any objects which have a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` pointing at it will be deleted as well. In the example above, this means that if a ``Bookmark`` object were deleted, any ``TaggedItem`` objects pointing at it would be deleted at the same time."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:407
# 3d2e79eb477648e88dbdf5727169e471
msgid "Unlike :class:`~django.db.models.ForeignKey`, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` does not accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize this behavior; if desired, you can avoid the cascade-deletion simply by not using :class:`~django.contrib.contenttypes.generic.GenericRelation`, and alternate behavior can be provided via the :data:`~django.db.models.signals.pre_delete` signal."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:416
# ef5cf7b6553148a2981eff488e60064b
msgid "Generic relations and aggregation"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:418
# 676399745e2947f1b48cc417990ab1fa
msgid ":doc:`Django's database aggregation API </topics/db/aggregation>` doesn't work with a :class:`~django.contrib.contenttypes.generic.GenericRelation`. For example, you might be tempted to try something like::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:425
# 50491ccaaecc4a918ccb324c38c6fc7d
msgid "This will not work correctly, however. The generic relation adds extra filters to the queryset to ensure the correct content type, but the :meth:`~django.db.models.query.QuerySet.aggregate` method doesn't take them into account. For now, if you need aggregates on generic relations, you'll need to calculate them without using the aggregation API."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:432
# ec5eae9188434ee88742b3c13928db23
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:434
# 129baaa2633f40da97c6d1c23203011f
msgid "The :mod:`django.contrib.contenttypes.generic` module provides :class:`~django.contrib.contenttypes.generic.BaseGenericInlineFormSet`, :class:`~django.contrib.contenttypes.generic.GenericTabularInline` and :class:`~django.contrib.contenttypes.generic.GenericStackedInline` (the last two are subclasses of :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin`). This enables the use of generic relations in forms and the admin. See the :doc:`model formset </topics/forms/modelforms>` and :ref:`admin <using-generic-relations-as-an-inline>` documentation for more information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:447
# ade6a60705d84de7bcbf7da333842f7c
msgid "The :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin` class inherits all properties from an :class:`~django.contrib.admin.InlineModelAdmin` class. However, it adds a couple of its own for working with the generic relation:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:454
# 9e9a3051803f4fc990ff9bd4be2d4c9f
msgid "The name of the :class:`~django.contrib.contenttypes.models.ContentType` foreign key field on the model. Defaults to ``content_type``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:460
# c6359032584647019476d5f68a3e0d1e
msgid "The name of the integer field that represents the ID of the related object. Defaults to ``object_id``."
msgstr ""

#: ../../ref/contrib/csrf.txt:3
# d3186277f925477da53d99bb9509dd1b
msgid "Cross Site Request Forgery protection"
msgstr ""

#: ../../ref/contrib/csrf.txt:8
# 68000a579c6d427298afdc07f49d7c8e
msgid "The CSRF middleware and template tag provides easy-to-use protection against `Cross Site Request Forgeries`_.  This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser.  A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../ref/contrib/csrf.txt:16
# e9c40c62965a4846bf4cebe4ea8bc62a
msgid "The first defense against CSRF attacks is to ensure that GET requests (and other 'safe' methods, as defined by 9.1.1 Safe Methods, HTTP 1.1, :rfc:`2616#section-9.1.1`) are side-effect free. Requests via 'unsafe' methods, such as POST, PUT and DELETE, can then be protected by following the steps below."
msgstr ""

#: ../../ref/contrib/csrf.txt:29
# 0fe562aea9c94c8cbcfb3d2dd1f9015a
msgid "To enable CSRF protection for your views, follow these steps:"
msgstr ""

#: ../../ref/contrib/csrf.txt:31
# 48a286aee9184972919446c2456a42b5
msgid "Add the middleware ``'django.middleware.csrf.CsrfViewMiddleware'`` to your list of middleware classes, :setting:`MIDDLEWARE_CLASSES`.  (It should come before any view middleware that assume that CSRF attacks have been dealt with.)"
msgstr ""

#: ../../ref/contrib/csrf.txt:37
# 90d2f0f237f64d129129772f4aec6c34
msgid "Alternatively, you can use the decorator :func:`~django.views.decorators.csrf.csrf_protect` on particular views you want to protect (see below)."
msgstr ""

#: ../../ref/contrib/csrf.txt:41
# 8d34f382bde540c29eea5e2f65162fec
msgid "In any template that uses a POST form, use the :ttag:`csrf_token` tag inside the ``<form>`` element if the form is for an internal URL, e.g.::"
msgstr ""

#: ../../ref/contrib/csrf.txt:46
# efe7f8f54cbd4088a81f5d4e90a7c0ac
msgid "This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""

#: ../../ref/contrib/csrf.txt:49
# c727e08285b747d8a70f12cf43be7292
msgid "In the corresponding view functions, ensure that the ``'django.core.context_processors.csrf'`` context processor is being used. Usually, this can be done in one of two ways:"
msgstr ""

#: ../../ref/contrib/csrf.txt:53
# 45057d35461f4a05971d77ed5fcec572
msgid "Use RequestContext, which always uses ``'django.core.context_processors.csrf'`` (no matter what your TEMPLATE_CONTEXT_PROCESSORS setting).  If you are using generic views or contrib apps, you are covered already, since these apps use RequestContext throughout."
msgstr ""

#: ../../ref/contrib/csrf.txt:59
# 4095fea14e484dc0918c66c2a2c3fbb9
msgid "Manually import and use the processor to generate the CSRF token and add it to the template context. e.g.::"
msgstr ""

#: ../../ref/contrib/csrf.txt:71
# b55be0ff1e1540baac42df3e8691a806
msgid "You may want to write your own :func:`~django.shortcuts.render_to_response()` wrapper that takes care of this step for you."
msgstr ""

#: ../../ref/contrib/csrf.txt:75
# cbb831efd53142298f9387231c7828f9
msgid "The utility script ``extras/csrf_migration_helper.py`` can help to automate the finding of code and templates that may need these steps. It contains full help on how to use it."
msgstr ""

#: ../../ref/contrib/csrf.txt:82
# d1b8eca9b6ff48568cd241dad3be7edd
msgid "AJAX"
msgstr ""

#: ../../ref/contrib/csrf.txt:84
# 8be496922c954985867346f79c0fce94
msgid "While the above method can be used for AJAX POST requests, it has some inconveniences: you have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom `X-CSRFToken` header to the value of the CSRF token. This is often easier, because many javascript frameworks provide hooks that allow headers to be set on every request. In jQuery, you can use the ``ajaxSend`` event as follows:"
msgstr ""

#: ../../ref/contrib/csrf.txt:133
# 4233e6b956804a1584abb30342f8a7c5
msgid "Due to a bug introduced in jQuery 1.5, the example above will not work correctly on that version. Make sure you are running at least jQuery 1.5.1."
msgstr ""

#: ../../ref/contrib/csrf.txt:136
# b6f3fa76e7b5407ba82040d8384a298b
msgid "Adding this to a javascript file that is included on your site will ensure that AJAX POST requests that are made via jQuery will not be caught by the CSRF protection."
msgstr ""

#: ../../ref/contrib/csrf.txt:140
# 5040ff8697ea4720b5b4fa9f0611e7a4
msgid "The above code could be simplified by using the `jQuery cookie plugin <http://plugins.jquery.com/project/Cookie>`_ to replace ``getCookie``, and `settings.crossDomain <http://api.jquery.com/jQuery.ajax>`_ in jQuery 1.5 and later to replace ``sameOrigin``."
msgstr ""

#: ../../ref/contrib/csrf.txt:145
# 497febcc31dc428288b8a68ceeb8a710
msgid "In addition, if the CSRF cookie has not been sent to the client by use of :ttag:`csrf_token`, you may need to ensure the client receives the cookie by using :func:`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""

#: ../../ref/contrib/csrf.txt:150
# cd4a27a66bde436a8bbc2721ddf903e2
msgid "Other template engines"
msgstr ""

#: ../../ref/contrib/csrf.txt:152
# eca6472c07574fc8b470f3f90256eb7d
msgid "When using a different template engine than Django's built-in engine, you can set the token in your forms manually after making sure it's available in the template context."
msgstr ""

#: ../../ref/contrib/csrf.txt:156
# 7df803a659154f088a7ad3bc8b2bda2a
msgid "For example, in the Cheetah template language, your form could contain the following:"
msgstr ""

#: ../../ref/contrib/csrf.txt:165
# b9d1c029a0ee437c93eb817883f66bc6
msgid "You can use JavaScript similar to the :ref:`AJAX code <csrf-ajax>` above to get the value of the CSRF token."
msgstr ""

#: ../../ref/contrib/csrf.txt:169
# 7da430300201493bb349bdae8666d4f1
msgid "The decorator method"
msgstr ""

#: ../../ref/contrib/csrf.txt:173
# 110264cdbbb544d1b4ed740880f54c72
msgid "Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can use the ``csrf_protect`` decorator, which has exactly the same functionality, on particular views that need the protection. It must be used **both** on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always)."
msgstr ""

#: ../../ref/contrib/csrf.txt:179
# 0bcb8cb29ff84ce1a611156898367cd9
msgid "Use of the decorator by itself is **not recommended**, since if you forget to use it, you will have a security hole. The 'belt and braces' strategy of using both is fine, and will incur minimal overhead."
msgstr ""

#: ../../ref/contrib/csrf.txt:185
# 81cbf1b36bad4b16a868ebc5d541bce9
msgid "Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr ""

#: ../../ref/contrib/csrf.txt:187
#: ../../ref/contrib/webdesign.txt:32
# 3d13c28011fb46139abec3f0b876bef1
# aaf3df709eda49f4939fbf066e513a7a
msgid "Usage::"
msgstr ""

#: ../../ref/contrib/csrf.txt:199
# 3a9ae77fe168464e8ff7fa6868c673f6
msgid "Rejected requests"
msgstr ""

#: ../../ref/contrib/csrf.txt:201
# b2bc66f12c054670a5a441007539d1ba
msgid "By default, a '403 Forbidden' response is sent to the user if an incoming request fails the checks performed by ``CsrfViewMiddleware``.  This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form."
msgstr ""

#: ../../ref/contrib/csrf.txt:207
# 409f3a9c9c78477e82adf5f185968d4b
msgid "The error page, however, is not very friendly, so you may want to provide your own view for handling this condition.  To do this, simply set the :setting:`CSRF_FAILURE_VIEW` setting."
msgstr ""

#: ../../ref/contrib/csrf.txt:214
#: ../../ref/contrib/flatpages.txt:53
#: ../../ref/contrib/formtools/form-wizard.txt:23
#: ../../ref/contrib/redirects.txt:23
# 769ddd196f6d4685b36b1f97ef12b96f
# 95aaeaac8c6640c8aff32b84ab55f533
# fb6a3619fd9a4040a1efb81432808cea
# 25a70b13120d4aa0a7fc7880bfb6b854
msgid "How it works"
msgstr ""

#: ../../ref/contrib/csrf.txt:216
# f85368321a1448ef9c75666354d94fd1
msgid "The CSRF protection is based on the following things:"
msgstr ""

#: ../../ref/contrib/csrf.txt:218
# 44a2bb50224b4f66bbb7ffab4655b5af
msgid "A CSRF cookie that is set to a random value (a session independent nonce, as it is called), which other sites will not have access to."
msgstr ""

#: ../../ref/contrib/csrf.txt:221
# 0bd5810001f44d0ca4c9738e7bbcfdd6
msgid "This cookie is set by ``CsrfViewMiddleware``.  It is meant to be permanent, but since there is no way to set a cookie that never expires, it is sent with every response that has called ``django.middleware.csrf.get_token()`` (the function used internally to retrieve the CSRF token)."
msgstr ""

#: ../../ref/contrib/csrf.txt:226
# 3f312aee2c71449499521a56106a4d1f
msgid "A hidden form field with the name 'csrfmiddlewaretoken' present in all outgoing POST forms.  The value of this field is the value of the CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:230
# 9cecd267807b4dd5b4849473d7f6d7f0
msgid "This part is done by the template tag."
msgstr ""

#: ../../ref/contrib/csrf.txt:232
# 9974db1a303f48768f3b723af55e7011
msgid "For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""

#: ../../ref/contrib/csrf.txt:236
# e8902175d8a94f3591132c8d53c1eb8d
msgid "This check is done by ``CsrfViewMiddleware``."
msgstr ""

#: ../../ref/contrib/csrf.txt:238
# 00eccb57898b40b38c7bf38cac89a1e1
msgid "In addition, for HTTPS requests, strict referer checking is done by ``CsrfViewMiddleware``.  This is necessary to address a Man-In-The-Middle attack that is possible under HTTPS when using a session independent nonce, due to the fact that HTTP 'Set-Cookie' headers are (unfortunately) accepted by clients that are talking to a site under HTTPS.  (Referer checking is not done for HTTP requests because the presence of the Referer header is not reliable enough under HTTP.)"
msgstr ""

#: ../../ref/contrib/csrf.txt:246
# fbce0164e2a14827af34be7b5995ae45
msgid "This ensures that only forms that have originated from your Web site can be used to POST data back."
msgstr ""

#: ../../ref/contrib/csrf.txt:249
# 02a58fb93d9541dbac87c9ec19cb0a74
msgid "It deliberately ignores GET requests (and other requests that are defined as 'safe' by :rfc:`2616`). These requests ought never to have any potentially dangerous side effects , and so a CSRF attack with a GET request ought to be harmless. :rfc:`2616` defines POST, PUT and DELETE as 'unsafe', and all other methods are assumed to be unsafe, for maximum protection."
msgstr ""

#: ../../ref/contrib/csrf.txt:256
# a4451984e5c44edbae1859466a13abc0
msgid "Caching"
msgstr ""

#: ../../ref/contrib/csrf.txt:258
# 225f73c3b649473a9bbab0c149071efb
msgid "If the :ttag:`csrf_token` template tag is used by a template (or the ``get_token`` function is called some other way), ``CsrfViewMiddleware`` will add a cookie and a ``Vary: Cookie`` header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""

#: ../../ref/contrib/csrf.txt:264
# fc7a55f830eb440d99075e60f4c275a5
msgid "However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the :func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""

#: ../../ref/contrib/csrf.txt:280
# 12a12b95a0a247baa611bd78e24b3f01
msgid "Testing"
msgstr ""

#: ../../ref/contrib/csrf.txt:282
# 0bc3d0454026419daee2f875f4cdcc0b
msgid "The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request.  For this reason, Django's HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the ``csrf_protect`` decorator so that they no longer rejects requests.  In every other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""

#: ../../ref/contrib/csrf.txt:289
# a8a63d5f070049e085dd80c6e21a9430
msgid "If, for some reason, you *want* the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks::"
msgstr ""

#: ../../ref/contrib/csrf.txt:301
# f017531c529047578bb1f904ff037c15
msgid "Subdomains within a site will be able to set cookies on the client for the whole domain.  By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection.  The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies).  Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers."
msgstr ""

#: ../../ref/contrib/csrf.txt:310
# 3d4922e2f64241efa235cf801dc56879
msgid "Edge cases"
msgstr ""

#: ../../ref/contrib/csrf.txt:312
# 4798c08751e04a1f8eb3200e437e79c5
msgid "Certain views can have unusual requirements that mean they don't fit the normal pattern envisaged here. A number of utilities can be useful in these situations. The scenarios they might be needed in are described in the following section."
msgstr ""

#: ../../ref/contrib/csrf.txt:318
# 5a77cc86c17c4598bc27c384222b63b7
msgid "Utilities"
msgstr ""

#: ../../ref/contrib/csrf.txt:322
# 3b6718eea8fc4cfca170aff5cb49a83b
msgid "This decorator marks a view as being exempt from the protection ensured by the middleware. Example::"
msgstr ""

#: ../../ref/contrib/csrf.txt:333
# 04830d1eb14a4e21bad3e2d4627df1bd
msgid "Normally the :ttag:`csrf_token` template tag will not work if ``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` has not run. The view decorator ``requires_csrf_token`` can be used to ensure the template tag does work. This decorator works similarly to ``csrf_protect``, but never rejects an incoming request."
msgstr ""

#: ../../ref/contrib/csrf.txt:354
# d1ce11a411304ee6beb8ecb4f6a35a71
msgid "This decorator forces a view to send the CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:357
# c67f17067f344f59845116b3987967e3
msgid "Scenarios"
msgstr ""

#: ../../ref/contrib/csrf.txt:360
# 7bbc29718dc4419081ad9384c937c88b
msgid "CSRF protection should be disabled for just a few views"
msgstr ""

#: ../../ref/contrib/csrf.txt:362
# 9a820a3e718a4db89f333068a34dc0ad
msgid "Most views requires CSRF protection, but a few do not."
msgstr ""

#: ../../ref/contrib/csrf.txt:364
# 4faebde76cdf4151b54ff91cbb0c2b89
msgid "Solution: rather than disabling the middleware and applying ``csrf_protect`` to all the views that need it, enable the middleware and use :func:`~django.views.decorators.csrf.csrf_exempt`."
msgstr ""

#: ../../ref/contrib/csrf.txt:369
# b8f94ae1648f4a98bc60e4557f6030f8
msgid "CsrfViewMiddleware.process_view not used"
msgstr ""

#: ../../ref/contrib/csrf.txt:371
# be07151245a545acbd8aade43ecc279b
msgid "There are cases when ``CsrfViewMiddleware.process_view`` may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form."
msgstr ""

#: ../../ref/contrib/csrf.txt:375
# c1d649571c6d44d988ab4250bdd4129f
msgid "Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""

#: ../../ref/contrib/csrf.txt:378
# c1be0d68a3cd42e1b4d694469b790be0
msgid "Unprotected view needs the CSRF token"
msgstr ""

#: ../../ref/contrib/csrf.txt:380
# 73b94fffc1644ee08eaf4733c753037a
msgid "There may be some views that are unprotected and have been exempted by ``csrf_exempt``, but still need to include the CSRF token."
msgstr ""

#: ../../ref/contrib/csrf.txt:383
# 60d28f31b79f4fdc8f8685eb00faf090
msgid "Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by :func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. ``requires_csrf_token`` should be the innermost decorator)."
msgstr ""

#: ../../ref/contrib/csrf.txt:388
# 1f501d9d0ec5423eae4b0947f83e295e
msgid "View needs protection for one path"
msgstr ""

#: ../../ref/contrib/csrf.txt:390
# 4fc1a3249fa94503a504226ba6807dbc
msgid "A view needs CRSF protection under one set of conditions only, and mustn't have it for the rest of the time."
msgstr ""

#: ../../ref/contrib/csrf.txt:393
# caa7269f01c1473aa2d7aafb3bb1438d
msgid "Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` for the path within it that needs protection. Example::"
msgstr ""

#: ../../ref/contrib/csrf.txt:412
# 43a1947ec65e403c8525d88cd71bdb9a
msgid "Page uses AJAX without any HTML form"
msgstr ""

#: ../../ref/contrib/csrf.txt:414
# 96a954528f0e4de1bec3af9e99c95718
msgid "A page makes a POST request via AJAX, and the page does not have an HTML form with a :ttag:`csrf_token` that would cause the required CSRF cookie to be sent."
msgstr ""

#: ../../ref/contrib/csrf.txt:417
# 3055c6e0d41340f9b92a85688883b8f4
msgid "Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on the view that sends the page."
msgstr ""

#: ../../ref/contrib/csrf.txt:421
# 22cf0cae38a54ca384c5f97f2e919a17
msgid "Contrib and reusable apps"
msgstr ""

#: ../../ref/contrib/csrf.txt:423
# 3daf3dec1e6d48beae52d1b00365abe5
msgid "Because it is possible for the developer to turn off the ``CsrfViewMiddleware``, all relevant views in contrib apps use the ``csrf_protect`` decorator to ensure the security of these applications against CSRF.  It is recommended that the developers of other reusable apps that want the same guarantees also use the ``csrf_protect`` decorator on their views."
msgstr ""

#: ../../ref/contrib/csrf.txt:430
#: ../../ref/contrib/gis/gdal.txt:1097
#: ../../ref/contrib/gis/geos.txt:903
#: ../../ref/contrib/gis/testing.txt:20
#: ../../ref/contrib/gis/testing.txt:123
#: ../../ref/contrib/messages.txt:319
#: ../../ref/contrib/staticfiles.txt:22
#: ../../ref/settings.txt:3
# cfcbe86aa0494c01a2f3718e476bf93d
# 6a1a6d65fcf94ec7a0c1081bc8f2e0f1
# 718f1be8b86b40bfbae79f350c88dc5a
# e74b1717b5b2472684a2853c39be3414
# 0d767f8058f444c7bf8667bc9e49beda
# 346cd95ccdcf4562bae7f2992c9ae26d
# 130f8d19ede8494fa69f711f70465ca4
# e69c832def4948cd9a6cbe9a0bc56478
msgid "Settings"
msgstr ""

#: ../../ref/contrib/csrf.txt:432
# f42d2ca3e6c545f69dc9bc344e5c286f
msgid "A number of settings can be used to control Django's CSRF behavior."
msgstr ""

#: ../../ref/contrib/csrf.txt:435
#: ../../ref/settings.txt:308
# a086c9ed773b4fe0ba623b2ee49e0769
# 6705f9835f764e5b943b1b80c618f214
msgid "CSRF_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/contrib/csrf.txt:439
#: ../../ref/contrib/messages.txt:390
#: ../../ref/settings.txt:312
#: ../../ref/settings.txt:520
#: ../../ref/settings.txt:537
#: ../../ref/settings.txt:565
#: ../../ref/settings.txt:580
#: ../../ref/settings.txt:607
#: ../../ref/settings.txt:631
#: ../../ref/settings.txt:643
#: ../../ref/settings.txt:655
#: ../../ref/settings.txt:1050
#: ../../ref/settings.txt:1076
#: ../../ref/settings.txt:1118
#: ../../ref/settings.txt:1132
#: ../../ref/settings.txt:1600
#: ../../ref/settings.txt:1703
#: ../../ref/settings.txt:1797
#: ../../ref/settings.txt:1910
#: ../../ref/settings.txt:2265
# 2f8e1ff929f4451c88efbbb2fda033e8
# e583a4084679415892689e920c9197ae
# 7194928bfc4741fcae54ba14ae6da49f
# ddacaafc1d284312857ebdaf8db1238e
# 51ff53bd2bce41eda76c8871ab60d5d8
# cbe34f41570f44249c09716bb27e72b8
# 9390501726b24d2091c195dc9f6ded59
# 96016fbe6c544e978c5f9bcd1d46480b
# 901ce1fe5e0844509ee69fca8ccc34fe
# 9bc16f1fdcc2420788803cc1633e0ca7
# 7225ebadbf13407fbe49ca3bfa53630e
# a017903a776e487cb12ec2122a1f1281
# 36b67eaf20e24b39a47aa50da9df40f7
# 4a48647078694965ab9b28e0a2a80c33
# 76f566706f624a1cbe14993dacff7163
# 1adc36ac29c24532834118d4784e48cd
# 0a07a56e95b84632ae01907af6f2e79f
# cc4a1f60ab0844e8a330c46bcf0f753c
# 12003ce7f269475da6ece8f316e5aa75
# f9d536236b6749808a90dc7b0e615ace
msgid "Default: ``None``"
msgstr ""

#: ../../ref/contrib/csrf.txt:441
# 77c24064aaef4c2bb6f6b06889e2bb46
msgid "The domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as ``\".lawrence.com\"`` to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/contrib/csrf.txt:447
# 31d3da5d797741699fb7c1e5fe8d5848
msgid "Please note that, with or without use of this setting, this CSRF protection mechanism is not safe against cross-subdomain attacks -- see `Limitations`_."
msgstr ""

#: ../../ref/contrib/csrf.txt:451
#: ../../ref/settings.txt:327
# 51fc21364b3f450e88db529ef99f417c
# 8f3169b4bc2e4943896c1c3090679aab
msgid "CSRF_COOKIE_NAME"
msgstr ""

#: ../../ref/contrib/csrf.txt:455
#: ../../ref/settings.txt:331
# 0369ab373cb54c4281b44f521bbe0249
# da28011bd18846efaa48ff7a94d89f3f
msgid "Default: ``'csrftoken'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:457
# e6f8dafb2cc34fbe8fcf02c5db3f317b
msgid "The name of the cookie to use for the CSRF authentication token. This can be whatever you want."
msgstr ""

#: ../../ref/contrib/csrf.txt:461
#: ../../ref/settings.txt:339
# baa7661d44c04e8e9a9cd7c724e9b5f7
# 647eda2e25f4475f9b32c2f0dc552f52
msgid "CSRF_COOKIE_PATH"
msgstr ""

#: ../../ref/contrib/csrf.txt:465
#: ../../ref/settings.txt:343
#: ../../ref/settings.txt:1744
# 02b5b3989a654e9191f91a76cf334f8e
# 26cd4e9cde8f45c0abcc549f37f3fd41
# 041c890299be458bb0a11610c83cf13f
msgid "Default: ``'/'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:467
#: ../../ref/settings.txt:345
# fbf553f6a9c9427b9c42abd89710cb2f
# 66f380905c8b4c04964dd803450dd0c1
msgid "The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path."
msgstr ""

#: ../../ref/contrib/csrf.txt:470
#: ../../ref/settings.txt:348
# ebab9578e0364eeaa759e6aafbff6741
# a9732204c3ed4831a56f03dbd35fb8ae
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:475
#: ../../ref/settings.txt:355
# 3db364493ad84b6bbc3c7260c715b8c9
# 3b0b8f83cd2a4074bbfcfc6b67859155
msgid "CSRF_COOKIE_SECURE"
msgstr ""

#: ../../ref/contrib/csrf.txt:479
#: ../../ref/settings.txt:271
#: ../../ref/settings.txt:359
#: ../../ref/settings.txt:766
#: ../../ref/settings.txt:814
#: ../../ref/settings.txt:1009
#: ../../ref/settings.txt:1540
#: ../../ref/settings.txt:1658
#: ../../ref/settings.txt:1714
#: ../../ref/settings.txt:1758
#: ../../ref/settings.txt:1787
#: ../../ref/settings.txt:1809
#: ../../ref/settings.txt:1966
#: ../../ref/settings.txt:2166
#: ../../ref/settings.txt:2194
#: ../../ref/settings.txt:2214
#: ../../ref/settings.txt:2231
#: ../../ref/settings.txt:2252
# e7fc229a42b4447994c61e13f8afa82f
# 5571ea44ef184f8082ea0d3fb95ed029
# 355a4f09846d4c91b2cc58dde34a026b
# 7384b4d2ea124029add3aa229dae540c
# 4f86cff767cf4254b57fb45d36270e42
# 6c38c70936664b1e8e9349df3118b6f7
# 562111d7bb8a41699d077267af772a3f
# 8af742cfff5840afb620565ec8586eb2
# b5f8ede78145473c969d379cae2aed14
# 6c0ed6cae1aa4c8fa7313fbfc5463c23
# 28ac73385dc44f06beb4aace567c79d0
# 15a37592f25247a58cb8ec65b8b1945a
# ccad84ccf69f478ea5357f7aad656d38
# d4a7b59f260a4c29a13b81ced76340ba
# 6930f14fe78f4d4f9275404ab8b8a3cd
# 4b6639f2798c42d5b3a202120e2e96f5
# b9ba2d56d1df4179a8d26064113c47f9
# d6d8b64d0104402986ca2a2974f7fa0c
msgid "Default: ``False``"
msgstr ""

#: ../../ref/contrib/csrf.txt:481
#: ../../ref/settings.txt:361
# 0b81b7ff2aaf474c908daad41daf076d
# e81cb2e1d5df4a8d8841155e244feb40
msgid "Whether to use a secure cookie for the CSRF cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../ref/contrib/csrf.txt:486
#: ../../ref/settings.txt:368
# 2a97806fca0b4839969071a0306cb1c6
# fd7848145c8d4d8aa0d79792890f0a9d
msgid "CSRF_FAILURE_VIEW"
msgstr ""

#: ../../ref/contrib/csrf.txt:490
#: ../../ref/settings.txt:372
# fe8fa36b72b444f5960ead95c423de6b
# 52fa9aa1629d40d6b696c17aa050cf7c
msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:492
#: ../../ref/settings.txt:374
# 578e8f1f4aed44feb7b109b6449f2d9c
# 5be1dff3ef13436da5138c1a9601de86
msgid "A dotted path to the view function to be used when an incoming request is rejected by the CSRF protection.  The function should have this signature::"
msgstr ""

#: ../../ref/contrib/csrf.txt:497
# 7b47a966892a4e7380dc9807113ad39a
msgid "where ``reason`` is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected."
msgstr ""

#: ../../ref/contrib/databrowse.txt:3
# e425147b647345229a1555e65fad1fea
msgid "Databrowse"
msgstr ""

#: ../../ref/contrib/databrowse.txt:11
# 786c67f5427c4cdc82d6079d7e909809
msgid "Databrowse is a Django application that lets you browse your data."
msgstr ""

#: ../../ref/contrib/databrowse.txt:13
# f4c1ee1194764543a5ecde83b5a92847
msgid "As the Django admin dynamically creates an admin interface by introspecting your models, Databrowse dynamically creates a rich, browsable Web site by introspecting your models."
msgstr ""

#: ../../ref/contrib/databrowse.txt:18
# 9ffa3c11be0a4301ad1dfd8eac898dda
msgid "How to use Databrowse"
msgstr ""

#: ../../ref/contrib/databrowse.txt:20
# 129f30a9f61d48cab3441d6e70b81469
msgid "Point Django at the default Databrowse templates. There are two ways to do this:"
msgstr ""

#: ../../ref/contrib/databrowse.txt:23
# 38c270a814ad420685cb8245c0153a19
msgid "Add ``'django.contrib.databrowse'`` to your :setting:`INSTALLED_APPS` setting. This will work if your :setting:`TEMPLATE_LOADERS` setting includes the ``app_directories`` template loader (which is the case by default). See the :ref:`template loader docs <template-loaders>` for more."
msgstr ""

#: ../../ref/contrib/databrowse.txt:29
# efa49247102f421f815e8539adeada4d
msgid "Otherwise, determine the full filesystem path to the :file:`django/contrib/databrowse/templates` directory, and add that directory to your :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/contrib/databrowse.txt:33
# 2ca30ea4ff8242a385f8c3490437950f
msgid "Register a number of models with the Databrowse site::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:41
# b390c111ae0e477180d94ea97f76b456
msgid "Note that you should register the model *classes*, not instances."
msgstr ""

#: ../../ref/contrib/databrowse.txt:45
# a4740a0f95c64b3bb6524cc1c7ad7883
msgid "Since Django 1.4, it is possible to register several models in the same call to :func:`~databrowse.site.register`."
msgstr ""

#: ../../ref/contrib/databrowse.txt:48
# b9ff1139de4a4e088761f66c48dc2b9b
msgid "It doesn't matter where you put this, as long as it gets executed at some point. A good place for it is in your :doc:`URLconf file </topics/http/urls>` (``urls.py``)."
msgstr ""

#: ../../ref/contrib/databrowse.txt:52
# c008b57f1fcb4b6398e6b0e7f6e7e793
msgid "Change your URLconf to import the :mod:`~django.contrib.databrowse` module::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:56
# a49de3e8f4f94b24ad40f86b2207a05c
msgid "...and add the following line to your URLconf::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:60
# ac1ed20559f84bf9bda4c87cda5ded86
msgid "The prefix doesn't matter -- you can use ``databrowse/`` or ``db/`` or whatever you'd like."
msgstr ""

#: ../../ref/contrib/databrowse.txt:63
# 25193ea2b18f4fee90281c8c70de68d1
msgid "Run the Django server and visit ``/databrowse/`` in your browser."
msgstr ""

#: ../../ref/contrib/databrowse.txt:66
# 6dab94c0160c492dbb6114794e6ab406
msgid "Requiring user login"
msgstr ""

#: ../../ref/contrib/databrowse.txt:68
# b620d3bd61cc4bafbe0498dc87cd8d18
msgid "You can restrict access to logged-in users with only a few extra lines of code. Simply add the following import to your URLconf::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:73
# 45f6fdad01d4403b9bf0c39d1af0e183
msgid "Then modify the :doc:`URLconf </topics/http/urls>` so that the :func:`databrowse.site.root` view is decorated with :func:`django.contrib.auth.decorators.login_required`::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:79
# 94fd3f0d89e84c8d9d804caa80ae0a81
msgid "If you haven't already added support for user logins to your :doc:`URLconf </topics/http/urls>`, as described in the :doc:`user authentication docs </ref/contrib/auth>`, then you will need to do so now with the following mapping::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:86
# 87ceb03640b44b68b4b1b300dc8170a6
msgid "The final step is to create the login form required by :func:`django.contrib.auth.views.login`. The :doc:`user authentication docs </ref/contrib/auth>` provide full details and a sample template that can be used for this purpose."
msgstr ""

#: ../../ref/contrib/flatpages.txt:3
# 216944fb39154f5ba55522f4a7faf4df
msgid "The flatpages app"
msgstr ""

#: ../../ref/contrib/flatpages.txt:8
# e1485221687748ad8e254dd81764f020
msgid "Django comes with an optional \"flatpages\" application. It lets you store simple \"flat\" HTML content in a database and handles the management for you via Django's admin interface and a Python API."
msgstr ""

#: ../../ref/contrib/flatpages.txt:12
# fd6de9faf4934f49845148b28db8e76f
msgid "A flatpage is a simple object with a URL, title and content. Use it for one-off, special-case pages, such as \"About\" or \"Privacy Policy\" pages, that you want to store in a database but for which you don't want to develop a custom Django application."
msgstr ""

#: ../../ref/contrib/flatpages.txt:17
# bdf72896bc114d258c0a21783237e155
msgid "A flatpage can use a custom template or a default, systemwide flatpage template. It can be associated with one, or multiple, sites."
msgstr ""

#: ../../ref/contrib/flatpages.txt:20
# 02b2d4338d9040bb9e0fec0dc3ec8a88
msgid "The content field may optionally be left blank if you prefer to put your content in a custom template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:23
# 893654f95bde4482bfc3e38c6a44de9a
msgid "Here are some examples of flatpages on Django-powered sites:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:25
# 5241774803314404aa7e5fcb665cc525
msgid "http://www.lawrence.com/about/contact/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:26
# a929bce3df574293991976d19695fde2
msgid "http://www2.ljworld.com/site/rules/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:29
#: ../../ref/contrib/redirects.txt:12
#: ../../ref/contrib/sitemaps.txt:30
# 08e808ec2aa34a1fa249d63935ddeea7
# 2023b125affe4ac9807f98651d950d9b
# 7ba568f586274ec9bafe1e02b8db6285
msgid "Installation"
msgstr ""

#: ../../ref/contrib/flatpages.txt:31
# e0a8b4b8ea414f75816adab150293bf1
msgid "To install the flatpages app, follow these steps:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:33
# 25ae982d10624557b01835b5f76597d8
msgid "Install the :mod:`sites framework <django.contrib.sites>` by adding ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting, if it's not already in there."
msgstr ""

#: ../../ref/contrib/flatpages.txt:37
# fd72edc83f0c4b468d939d867299dfb5
msgid "Also make sure you've correctly set :setting:`SITE_ID` to the ID of the site the settings file represents. This will usually be ``1`` (i.e. ``SITE_ID = 1``, but if you're using the sites framework to manage multiple sites, it could be the ID of a different site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:42
# 8970b1551aa5463e83e7c2a1581a8542
msgid "Add ``'django.contrib.flatpages'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:45
# f629cae10a274c799cc7ce79732a6864
msgid "Add ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:48
#: ../../ref/contrib/redirects.txt:20
# f65712d1666947ff8ac3fa54e0249ad7
# d6ff41a49e1246789075821f4e02466c
msgid "Run the command :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:55
# 7b61b7e6f2f340a18248d9e884b87497
msgid "``manage.py syncdb`` creates two tables in your database: ``django_flatpage`` and ``django_flatpage_sites``. ``django_flatpage`` is a simple lookup table that simply maps a URL to a title and bunch of text content. ``django_flatpage_sites`` associates a flatpage with a site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:60
# d4f5b26548534f55af967a294ba9cb2a
msgid "The :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` does all of the work."
msgstr ""

#: ../../ref/contrib/flatpages.txt:65
# a52b7a07f0b34ee99e91ec0e6571b66a
msgid "Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:70
# f4e1625df1b549c7a1ab247aafcc3c27
msgid "If it finds a match, it follows this algorithm:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:72
# e52d4563304c44538ce3a8026b56645e
msgid "If the flatpage has a custom template, it loads that template. Otherwise, it loads the template :file:`flatpages/default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:75
# 3741638707ba4be881faedf8dd58bf23
msgid "It passes that template a single context variable, ``flatpage``, which is the flatpage object. It uses :class:`~django.template.RequestContext` in rendering the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:92
#: ../../ref/contrib/redirects.txt:38
# c2edc87bf612441b8d54c8c5c6a9aa19
# abd3ad9b26764c2da051faac28946a40
msgid "If it doesn't find a match, the request continues to be processed as usual."
msgstr ""

#: ../../ref/contrib/flatpages.txt:94
#: ../../ref/contrib/redirects.txt:41
# 4caaecb392a6421aaa7ca896ad04035a
# be2114baf9e14048a1c7536a4292d72e
msgid "The middleware only gets activated for 404s -- not for 500s or responses of any other status code."
msgstr ""

#: ../../ref/contrib/flatpages.txt:99
# edd607a41dc943e0aadc5976bd245792
msgid "Because the ``FlatpageFallbackMiddleware`` is applied only after URL resolution has failed and produced a 404, the response it returns will not apply any :ref:`view middleware <view-middleware>` methods. Only requests which are successfully routed to a view via normal URL resolution apply view middleware."
msgstr ""

#: ../../ref/contrib/flatpages.txt:105
# 3fc5bcc84acb4ac99ebdd38953261606
msgid "Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you can put :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middlewares see the real flatpage response rather than the 404."
msgstr ""

#: ../../ref/contrib/flatpages.txt:112
#: ../../ref/contrib/redirects.txt:48
# a5cfd1dc1d144b18ae8ec45d9d3d127a
# 68e04ce3a67f43edb0b32c52ce4d113e
msgid "For more on middleware, read the :doc:`middleware docs </topics/http/middleware>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:117
# d929a2a9aacf47ee9e8d3620205a41dd
msgid "Note that the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead (such as a ``TemplateDoesNotExist`` exception if your site does not have an appropriate template to use for HTTP 404 responses), the response will become an HTTP 500 (\"Internal Server Error\") and the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` will not attempt to serve a flat page."
msgstr ""

#: ../../ref/contrib/flatpages.txt:131
# 9abe32289a9a4c88a2086c08873213f0
msgid "How to add, change and delete flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:134
#: ../../ref/contrib/redirects.txt:55
# 9fe00a6e9b9b48598f2107ec109a36b0
# 9bd6222e4599421080406bee0d427020
msgid "Via the admin interface"
msgstr ""

#: ../../ref/contrib/flatpages.txt:136
# 38ea374a40f44466a3fcfaabaa9f785d
msgid "If you've activated the automatic Django admin interface, you should see a \"Flatpages\" section on the admin index page. Edit flatpages as you edit any other object in the system."
msgstr ""

#: ../../ref/contrib/flatpages.txt:141
#: ../../ref/contrib/redirects.txt:62
# cc221f20f3f448fd95b2246f64fe2ff9
# db37d264affb4d339f11645c86623c25
msgid "Via the Python API"
msgstr ""

#: ../../ref/contrib/flatpages.txt:145
# 1c20eabaf28d40a68f2a3423cf12751e
msgid "Flatpages are represented by a standard :doc:`Django model </topics/db/models>`, which lives in `django/contrib/flatpages/models.py`_. You can access flatpage objects via the :doc:`Django database API </topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:156
# 0ddebb2f21e04a268daa67cb9ccaeda6
msgid "If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from :class:`django.contrib.flatpages.forms.FlatPageForm` and used in your own views."
msgstr ""

#: ../../ref/contrib/flatpages.txt:163
# ed347cb57e184fc6bab0c66d6a28b0d4
msgid "Flatpage templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:165
# be4a4af0c7ab4f65af454c0aecea8cda
msgid "By default, flatpages are rendered via the template :file:`flatpages/default.html`, but you can override that for a particular flatpage: in the admin, a collapsed fieldset titled \"Advanced options\" (clicking will expand it) contains a field for specifying a template name. If you're creating a flat page via the Python API you can simply set the template name as the field ``template_name`` on the ``FlatPage`` object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:173
# 83be7005788144ad8462a3c3a40ee2ff
msgid "Creating the :file:`flatpages/default.html` template is your responsibility; in your template directory, just create a :file:`flatpages` directory containing a file :file:`default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:177
# 4be7379f25b2478a92d76aab96472ca0
msgid "Flatpage templates are passed a single context variable, ``flatpage``, which is the flatpage object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:180
# dff436aae2d04a11a317e1757a7ab352
msgid "Here's a sample :file:`flatpages/default.html` template:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:194
# 492f574046d4459ea258c37188679f20
msgid "Since you're already entering raw HTML into the admin page for a flatpage, both ``flatpage.title`` and ``flatpage.content`` are marked as **not** requiring :ref:`automatic HTML escaping <automatic-html-escaping>` in the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:200
# d0aca94b4dec4d6ba8df91b7a367cbca
msgid "Getting a list of :class:`~django.contrib.flatpages.models.FlatPage` objects in your templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:204
# 1ec8a6c1ab6e4ec7a6b08d623f722808
msgid "The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the :ref:`current site <hooking-into-current-site-from-views>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:208
# bf88b5b1be974d8e87cb3534c328e56a
msgid "Like all custom template tags, you'll need to :ref:`load its custom tag library <loading-custom-template-libraries>` before you can use it. After loading the library, you can retrieve all current flatpages via the :ttag:`get_flatpages` tag:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:226
# 0bde2207b5ff4625ac3664334f557a64
msgid "Displaying ``registration_required`` flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:228
# e42da5a911584ab8bda34d9bffabcfd0
msgid "By default, the :ttag:`get_flatpages` templatetag will only show flatpages that are marked ``registration_required = False``. If you want to display registration-protected flatpages, you need to specify an authenticated user using a``for`` clause."
msgstr ""

#: ../../ref/contrib/flatpages.txt:233
#: ../../ref/contrib/flatpages.txt:251
# e22d27fc1cd3476480157ffd7b450ba8
# 5ae97eba069b420c92f8f48c47625081
msgid "For example:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:239
# 59268c7ee37c4e3892a962d8c5a5b3fd
msgid "If you provide an anonymous user, :ttag:`get_flatpages` will behave the same as if you hadn't provided a user -- i.e., it will only show you public flatpages."
msgstr ""

#: ../../ref/contrib/flatpages.txt:244
# f420574edd4c4c56a411e6d6dcc35b9d
msgid "Limiting flatpages by base URL"
msgstr ""

#: ../../ref/contrib/flatpages.txt:246
# 97e350ce7f14482dad1beb2965a1ab14
msgid "An optional argument, ``starts_with``, can be applied to limit the returned pages to those beginning with a particular base URL. This argument may be passed as a string, or as a variable to be resolved from the context."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:3
# 9de9ac8487e54d2091f4e5f45ccfe4b4
msgid "Form preview"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:9
# d038a66a8acf4ef4957b233ab80d37fc
msgid "Django comes with an optional \"form preview\" application that helps automate the following workflow:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:12
#: ../../ref/contrib/index.txt:100
# f2ec441230bf438f852261e52ccd29fb
# f032240dd15f4323b00eed58c12132d9
msgid "\"Display an HTML form, force a preview, then do something with the submission.\""
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:14
# cb6e834531664017bc2ba6b09e6b79ca
msgid "To force a preview of a form submission, all you have to do is write a short Python class."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:20
# 88889f4353754c53884859bf4d5abe99
msgid "Given a :class:`django.forms.Form` subclass that you define, this application takes care of the following workflow:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:23
# 9d581ecba4fc4da896f381f0b8736b66
msgid "Displays the form as HTML on a Web page."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:24
# 3bce2bedda464d5caf102c3ad870129f
msgid "Validates the form data when it's submitted via POST. a. If it's valid, displays a preview page. b. If it's not valid, redisplays the form with error messages."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:27
# 2d84a7fa7e3d4dcfaf26099ac058fff0
msgid "When the \"confirmation\" form is submitted from the preview page, calls a hook that you define -- a :meth:`~django.contrib.formtools.preview.FormPreview.done()` method that gets passed the valid data."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:32
# d36eecd2c5c140c4a594751a8c6e5bf0
msgid "The framework enforces the required preview by passing a shared-secret hash to the preview page via hidden form fields. If somebody tweaks the form parameters on the preview page, the form submission will fail the hash-comparison test."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:37
# 5d896494968d4d9da09daea363784a83
msgid "How to use ``FormPreview``"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:39
# c0efbbbc1eb0421da844f50b0966b485
msgid "Point Django at the default FormPreview templates. There are two ways to do this:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:42
# adf396c5d6da4d3fbacc6cff88e7e057
msgid "Add ``'django.contrib.formtools'`` to your :setting:`INSTALLED_APPS` setting. This will work if your :setting:`TEMPLATE_LOADERS` setting includes the ``app_directories`` template loader (which is the case by default). See the :ref:`template loader docs <template-loaders>` for more."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:49
# 850f644bdd194147a75e98298dbf6122
msgid "Otherwise, determine the full filesystem path to the :file:`django/contrib/formtools/templates` directory, and add that directory to your :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:53
# fcdb6836730f4c39a5f568aa6f19f8c5
msgid "Create a :class:`~django.contrib.formtools.preview.FormPreview` subclass that overrides the :meth:`~django.contrib.formtools.preview.FormPreview.done()` method::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:67
# 0384e8fb20234b38ae29cbd63dd53e47
msgid "This method takes an :class:`~django.http.HttpRequest` object and a dictionary of the form data after it has been validated and cleaned. It should return an :class:`~django.http.HttpResponseRedirect` that is the end result of the form being submitted."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:72
# 5b1ff450ce5d4975b0ceca4e965b7dad
msgid "Change your URLconf to point to an instance of your :class:`~django.contrib.formtools.preview.FormPreview` subclass::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:79
# 4dc726d4288c4db1bfaf203dc1d9dca5
msgid "...and add the following line to the appropriate model in your URLconf::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:83
# 01f8ea3dfe5f4a18ac455ce8a56b4cea
msgid "where ``SomeModelForm`` is a Form or ModelForm class for the model."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:85
# 37895317374845feae9aa7f83a2214bf
msgid "Run the Django server and visit :file:`/post/` in your browser."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:88
# 351574042dd044c39aba8aa76dcf3051
msgid "``FormPreview`` classes"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:92
# 4be984e73a10499083177d1222c49c56
msgid "A :class:`~django.contrib.formtools.preview.FormPreview` class is a simple Python class that represents the preview workflow. :class:`~django.contrib.formtools.preview.FormPreview` classes must subclass ``django.contrib.formtools.preview.FormPreview`` and override the :meth:`~django.contrib.formtools.preview.FormPreview.done()` method. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:100
# b56b0cd200814d3e8dc91986e3d37b08
msgid "``FormPreview`` templates"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:102
# 1061bdee376e48e49f5c1936737110ef
msgid "By default, the form is rendered via the template :file:`formtools/form.html`, and the preview page is rendered via the template :file:`formtools/preview.html`. These values can be overridden for a particular form preview by setting :attr:`~django.contrib.formtools.preview.FormPreview.preview_template` and :attr:`~django.contrib.formtools.preview.FormPreview.form_template` attributes on the FormPreview subclass. See :file:`django/contrib/formtools/templates` for the default templates."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:111
# 65035114e844417e8ce392b5dfc760ab
msgid "Advanced ``FormPreview`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:117
# 7f0d04621c0e4cdbb8e4c232254225f9
msgid "Given a validated form, performs any extra processing before displaying the preview page, and saves any extra data in context."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:120
# 1793440f1be24707b48b086cc4924687
msgid "By default, this method is empty.  It is called after the form is validated, but before the context is modified with hash information and rendered."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:3
# 4bf09896b27449eea23ab5e6b6782505
msgid "Form wizard"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:8
# 91ab12e700354782a0cb5c101842927b
msgid "Django comes with an optional \"form wizard\" application that splits :doc:`forms </topics/forms/index>` across multiple Web pages. It maintains state in one of the backends so that the full server-side processing can be delayed until the submission of the final form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:13
# eef287cbe296408db924bd3b4cca8a44
msgid "You might want to use this if you have a lengthy form that would be too unwieldy for display on a single page. The first page might ask the user for core information, the second page might ask for less important information, etc."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:18
# b6b7e6dc1f224e03adcea37902b06a16
msgid "The term \"wizard\", in this context, is `explained on Wikipedia`_."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:25
# 8ccdf02a2ec74aa7a6491c2b5db55773
msgid "Here's the basic workflow for how a user would use a wizard:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:27
# a1e7c440e41d49abbccf5e4237dffceb
msgid "The user visits the first page of the wizard, fills in the form and submits it."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:29
# a611ccb9a372438fa45a7313f32ca071
msgid "The server validates the data. If it's invalid, the form is displayed again, with error messages. If it's valid, the server saves the current state of the wizard in the backend and redirects to the next step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:32
# 4053ae121ba348b5981a67ddf6410c9d
msgid "Step 1 and 2 repeat, for every subsequent form in the wizard."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:33
# 115bd2e3289c4a528d5716d903d8d62a
msgid "Once the user has submitted all the forms and all the data has been validated, the wizard processes the data -- saving it to the database, sending an email, or whatever the application needs to do."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:38
#: ../../ref/django-admin.txt:36
#: ../../ref/request-response.txt:537
# 8c1c2f7d17ea42ebbb6876fd1f5a92a7
# 458beabcaabf4ead8b36f36c38b124ef
# 12f5d84f5e934028bdb6f7b3e445192e
msgid "Usage"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:40
# 916522cb7a114a65b1cafad8c34c3936
msgid "This application handles as much machinery for you as possible. Generally, you just have to do these things:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:43
# b470979758304f6084cbf840010d8631
msgid "Define a number of :class:`~django.forms.Form` classes -- one per wizard page."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:46
# e1dc527642fc4e99abe98ad63468f465
msgid "Create a :class:`WizardView` subclass that specifies what to do once all of your forms have been submitted and validated. This also lets you override some of the wizard's behavior."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:50
# 17b0159b17d043d39f06c923b100900f
msgid "Create some templates that render the forms. You can define a single, generic template to handle every one of the forms, or you can define a specific template for each form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:54
# 3912ea7085714958898fad3d0a4e8a14
msgid "Add ``django.contrib.formtools`` to your :setting:`INSTALLED_APPS` list in your settings file."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:57
# 9795088145c749bebb76dd60dfeeae82
msgid "Point your URLconf at your :class:`WizardView` :meth:`~WizardView.as_view` method."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:60
# 810e54367ed742c6a770cca4e7edcc80
msgid "Defining ``Form`` classes"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:62
# e9634cf6a4304b3f894208038a12476d
msgid "The first step in creating a form wizard is to create the :class:`~django.forms.Form` classes.  These should be standard :class:`django.forms.Form` classes, covered in the :doc:`forms documentation </topics/forms/index>`.  These classes can live anywhere in your codebase, but convention is to put them in a file called :file:`forms.py` in your application."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:69
# b3fa3aa3677e403f938671bca4dcdde2
msgid "For example, let's write a \"contact form\" wizard, where the first page's form collects the sender's email address and subject, and the second page collects the message itself. Here's what the :file:`forms.py` might look like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:85
# 917468958e494c53a6d6c6866e7ecc36
msgid "In order to use :class:`~django.forms.FileField` in any form, see the section :ref:`Handling files <wizard-files>` below to learn more about what to do."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:90
# 181de6de412b4461a44ddee3d15d35f2
msgid "Creating a ``WizardView`` class"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:92
# 49e1de719e3a43649f97b9c371e0ecaf
msgid "The next step is to create a :class:`django.contrib.formtools.wizard.views.WizardView` subclass. You can also use the :class:`SessionWizardView` or :class:`CookieWizardView` classes which preselect the backend used for storing information during execution of the wizard (as their names indicate, server-side sessions and browser cookies respectively)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:101
# ba4fbb64ce4d488eb3106f40f1fb484e
msgid "To use the :class:`SessionWizardView` follow the instructions in the :doc:`sessions documentation </topics/http/sessions>` on how to enable sessions."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:105
# 8e95f6226bf841d2a51c76a07cc77d5d
msgid "We will use the :class:`SessionWizardView` in all examples but is is completely fine to use the :class:`CookieWizardView` instead. As with your :class:`~django.forms.Form` classes, this :class:`WizardView` class can live anywhere in your codebase, but convention is to put it in :file:`views.py`."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:110
# c0fafddd87334571949dc7492b9d8032
msgid "The only requirement on this subclass is that it implement a :meth:`~WizardView.done()` method."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:115
# c6f83e7ffadc495e85f1c6d62d52584d
msgid "This method specifies what should happen when the data for *every* form is submitted and validated. This method is passed a list of validated :class:`~django.forms.Form` instances."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:119
# ab0b6ca4afa7429d8b1c25e189efad60
msgid "In this simplistic example, rather than performing any database operation, the method simply renders a template of the validated data::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:131
# 54448bd0fac5477d872fd7308922baab
msgid "Note that this method will be called via ``POST``, so it really ought to be a good Web citizen and redirect after processing the data. Here's another example::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:143
# 9f2970c8ba2e4fb5b40f38bbbc4c70f3
msgid "See the section :ref:`Advanced WizardView methods <wizardview-advanced-methods>` below to learn about more :class:`WizardView` hooks."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:147
# bcbc70e4d18049e2a71fb928a6f91116
msgid "Creating templates for the forms"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:149
# 9a273daaf5d54e67aea9fc2423011553
msgid "Next, you'll need to create a template that renders the wizard's forms. By default, every form uses a template called :file:`formtools/wizard/wizard_form.html`. You can change this template name by overriding either the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` attribute or the :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()` method, which are documented in the :class:`~django.views.generic.base.TemplateResponseMixin` documentation.  The latter one allows you to use a different template for each form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:160
# 0f5f26b9f1c64b60911ec843e9d82dbb
msgid "This template expects a ``wizard`` object that has various items attached to it:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:163
# ba1a35e9c2bb419aaa09ff213e00d148
msgid "``form`` -- The :class:`~django.forms.Form` or :class:`~django.forms.formset.BaseFormSet` instance for the current step (either empty or with errors)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:167
# 395016fa0f654f12b2607ea1c6911218
msgid "``steps`` -- A helper object to access the various steps related data:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:169
# fb2bf49adcff407bba41159f8502b803
msgid "``step0`` -- The current step (zero-based)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:170
# 35cdbd05347942bda447c78283835038
msgid "``step1`` -- The current step (one-based)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:171
# 9d6288f466f943f48af5e9f7241a88cf
msgid "``count`` -- The total number of steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:172
# 384b6abd1318464b8b9d8066bc5ccffd
msgid "``first`` -- The first step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:173
# 1a07e97b4b3947f89d6a7d5d1356c976
msgid "``last`` -- The last step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:174
# 4e600a045fcf4733a24deb266e737007
msgid "``current`` -- The current (or first) step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:175
# 6c4da302a888449a96fbdd5655263c0b
msgid "``next`` -- The next step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:176
# 21660794ea3d4bcaa4068f92f6e36f5d
msgid "``prev`` -- The previous step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:177
# 280558a48cdf4b5fa61085ac8f0ab5d9
msgid "``index`` -- The index of the current step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:178
# 559e0491df2f4ef3bf33610a2d64c76f
msgid "``all`` -- A list of all steps of the wizard."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:180
# 6536a1dca0f1476cba2d89da56c6cf5e
msgid "You can supply additional context variables by using the :meth:`~WizardView.get_context_data` method of your :class:`WizardView` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:184
# c9b983c604dd498f9fc7f33132df63c8
msgid "Here's a full example template:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:218
# 2ad99c0eaabb48e28c070fa91f937af7
msgid "Note that ``{{ wizard.management_form }}`` **must be used** for the wizard to work properly."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:224
# afbeffca58a346538d3aa985832df5c9
msgid "Hooking the wizard into a URLconf"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:226
# dc85e35f38d14f64a8aa060caed0a05c
msgid "Finally, we need to specify which forms to use in the wizard, and then deploy the new :class:`WizardView` object at an URL in the ``urls.py``. The wizard's :meth:`as_view` method takes a list of your :class:`~django.forms.Form` classes as an argument during instantiation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:243
# fc4b55601fc5462c9159d2c317198bcc
msgid "Advanced ``WizardView`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:247
# 4dd0d562d62747228a967c3998871ec9
msgid "Aside from the :meth:`~done()` method, :class:`WizardView` offers a few advanced method hooks that let you customize how your wizard works."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:250
# 860323665c914eeb95dbcaefc5668834
msgid "Some of these methods take an argument ``step``, which is a zero-based counter as string representing the current step of the wizard. (E.g., the first form is ``'0'`` and the second form is ``'1'``)"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:256
# 2a9322edd9f043f0a8491f19adcbd4e9
msgid "Given the step, returns a form prefix to use. By default, this simply uses the step itself. For more, see the :ref:`form prefix documentation <form-prefix>`."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:262
# 9e9387838e974d75a69addd20a91e67a
msgid "Returns a dictionary which will be passed as the :attr:`~django.forms.Form.initial` argument when instantiating the Form instance for step ``step``. If no initial data was provided while initializing the form wizard, an empty dictionary should be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:267
#: ../../ref/contrib/formtools/form-wizard.txt:277
#: ../../ref/contrib/formtools/form-wizard.txt:292
#: ../../ref/contrib/formtools/form-wizard.txt:367
# 0c2ed4ebb11243a6936cc9f9d00eb939
# bf3c4fdffeb24140a0e9e504a2ece551
# 12f1f35f5f3c485eb9dac8bc5a6cc4a8
# e2394b889a544829a410552b340149d4
msgid "The default implementation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:274
# cc7a6243dc4d42b9a488e39ef91bbf05
msgid "Returns a dictionary which will be used as the keyword arguments when instantiating the form instance on given ``step``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:284
# a6c6d379e49b4ded8ac0138f9d0dbdcb
msgid "This method will be called only if a :class:`~django.forms.ModelForm` is used as the form for step ``step``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:287
# e38f4644c98147f78a5f541434b67a2b
msgid "Returns an :class:`~django.db.models.Model` object which will be passed as the :attr:`~django.forms.ModelForm.instance` argument when instantiating the ModelForm for step ``step``.  If no instance object was provided while initializing the form wizard, ``None`` will be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:299
# 6dc8144b254e4a92ac5de3d3372d395f
msgid "Returns the template context for a step. You can overwrite this method to add more data for all or some steps. This method returns a dictionary containing the rendered form step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:303
# 6a5cb1b6e917442393a603ee37fa317c
msgid "The default template context variables are:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:305
# 4e2cde54d1bc46e0869e1e70c8157221
msgid "Any extra data the storage backend has stored"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:306
# c318cd4d5c434f6788b4a7aad13defdf
msgid "``form`` -- form instance of the current step"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:307
# 4dff2a2289a14fc886bb7fc6a23f4e19
msgid "``wizard`` -- the wizard instance itself"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:309
# 1058cdcd36fd4d1ebbd31c1a01081f1f
msgid "Example to add extra variables for a specific step::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:319
# d65d6312318f4a28ba5a2430798446be
msgid "This method returns a prefix for use by the storage backends. Backends use the prefix as a mechanism to allow data to be stored separately for each wizard. This allows wizards to store their data in a single backend without overwriting each other."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:324
# f8772778244b4b1ca344ffd52fc3b2df
msgid "You can change this method to make the wizard data prefix more unique to, e.g. have multiple instances of one wizard in one session."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:327
#: ../../ref/contrib/formtools/form-wizard.txt:380
#: ../../ref/contrib/formtools/form-wizard.txt:396
#: ../../ref/contrib/formtools/form-wizard.txt:408
#: ../../ref/contrib/formtools/form-wizard.txt:418
#: ../../ref/contrib/formtools/form-wizard.txt:428
#: ../../ref/contrib/formtools/form-wizard.txt:606
# c8a7a94ca43e47d6b3655439d9241eab
# a440213002e6409e98bcfa17c3cc2fb9
# 87a2299e6904485cb34701ba82cf7199
# 2d629385e1c944d38e3ea1141f9dfbd0
# 5198347538724f53beadf85074162716
# c3c5a2532a85476b8e7e76c9e2e7b368
# 8509a5be116044639569cd17e321df2c
msgid "Default implementation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:335
# 81f536eb111649809b5fcfd3ca42471f
msgid "This method constructs the form for a given ``step``. If no ``step`` is defined, the current step will be determined automatically. The method gets three arguments:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:339
# 7251410fab564f528be80685f4b6f0bf
msgid "``step`` -- The step for which the form instance should be generated."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:340
# 3eb7348f0e544e4883cbcb53faff5b25
msgid "``data`` -- Gets passed to the form's data argument"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:341
# b69643b51a9945b5b186fa0ddb2be548
msgid "``files`` -- Gets passed to the form's files argument"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:343
# 7f8d6e99707c48d7be1ca95d4d2de86a
msgid "You can override this method to add extra arguments to the form instance."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:345
# 0828bd629fe94f2c960bfb35a3c50046
msgid "Example code to add a user attribute to the form on step 2::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:355
# 035f461f3cd34118ba453f6f53c1a1d9
msgid "Hook for modifying the wizard's internal state, given a fully validated :class:`~django.forms.Form` object. The Form is guaranteed to have clean, valid data."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:359
# b257d427efbb49c49359e6839d17617a
msgid "This method gives you a way to post-process the form data before the data gets stored within the storage backend. By default it just returns the ``form.data`` dictionary. You should not manipulate the data here but you can use it to do some extra work if needed (e.g. set storage extra data)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:364
# 6430227246fb485781cf44ce247b3038
msgid "Note that this method is called every time a page is rendered for *all* submitted steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:374
# cfd9cec5235448ccb0b5519a1156b524
msgid "This method gives you a way to post-process the form files before the files gets stored within the storage backend. By default it just returns the ``form.files`` dictionary. You should not manipulate the data here but you can use it to do some extra work if needed (e.g. set storage extra data)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:387
# 7deaa7ddb8564e8dab421273be457af0
msgid "When the wizard thinks all steps have passed it revalidates all forms with the data from the backend storage."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:390
# 764b94adcd79487b82781d0fdb2a63aa
msgid "If any of the forms don't validate correctly, this method gets called. This method expects two arguments, ``step`` and ``form``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:393
# fe29aa07f0594fb9a59ff8e575b37159
msgid "The default implementation resets the current step to the first failing form and redirects the user to the invalid form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:404
# 50425afda08e470188d3befc86a42674
msgid "This method fetches the data from the ``form`` Form instance and returns the dictionary. You can use this method to manipulate the values before the data gets stored in the storage backend."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:415
# c788a61b7273419db3b7d467aeca5989
msgid "This method returns the form files. You can use this method to manipulate the files before the data gets stored in the storage backend."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:425
# da0afb264064498895573fc17662f8f6
msgid "This method gets called after the GET or POST request has been handled. You can hook in this method to, e.g. change the type of HTTP response."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:436
# e876b2fdfa7743b586aa706312936484
msgid "Providing initial data for the forms"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:440
# 6f9864d38a7444e4a32910925cea664e
msgid "Initial data for a wizard's :class:`~django.forms.Form` objects can be provided using the optional :attr:`~Wizard.initial_dict` keyword argument. This argument should be a dictionary mapping the steps to dictionaries containing the initial data for each step. The dictionary of initial data will be passed along to the constructor of the step's :class:`~django.forms.Form`::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:461
# fbb18969e2de46599595fb270396d7ec
msgid "The ``initial_dict`` can also take a list of dictionaries for a specific step if the step is a ``FormSet``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:467
# 2e3be272434e4d6cb76155d500ba9e14
msgid "Handling files"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:469
# 8f6e94ca54854acebbdea944963e3678
msgid "To handle :class:`~django.forms.FileField` within any step form of the wizard, you have to add a :attr:`file_storage` to your :class:`WizardView` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:472
# c68e5a2a05624d8a8d0229188e26c747
msgid "This storage will temporarily store the uploaded files for the wizard. The :attr:`file_storage` attribute should be a :class:`~django.core.files.storage.Storage` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:478
# 3c7740550b244d87b1a36847ae3ce0c9
msgid "Please remember to take care of removing old files as the :class:`WizardView` won't remove any files, whether the wizard gets finished correctly or not."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:483
# 1e3da44fed424a12ae3a59f687d98fb5
msgid "Conditionally view/skip specific steps"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:487
# df8d1119a54a4109b4628e7f13948c96
msgid "The :meth:`~WizardView.as_view` method accepts a ``condition_dict`` argument. You can pass a dictionary of boolean values or callables. The key should match the steps names (e.g. '0', '1')."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:491
# 82d3d20b58db4a229797e3e321aabbc9
msgid "If the value of a specific step is callable it will be called with the :class:`WizardView` instance as the only argument. If the return value is true, the step's form will be used."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:495
# 6c2de09fe56947d1acd9e171366cbf7d
msgid "This example provides a contact form including a condition. The condition is used to show a message form only if a checkbox in the first step was checked."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:498
# 828ae519b79b47eeb39a0859b099802e
msgid "The steps are defined in a ``forms.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:510
# 1068813fa6cf42d4868b878d48250202
msgid "We define our wizard in a ``views.py``::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:528
# 454d33cd55694389ac37b3888c35b6a7
msgid "We need to add the ``ContactWizard`` to our ``urls.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:543
# 4c0cfacc216c4fd4ab14d37287f60f1a
msgid "As you can see, we defined a ``show_message_form_condition`` next to our :class:`WizardView` subclass and added a ``condition_dict`` argument to the :meth:`~WizardView.as_view` method. The key refers to the second wizard step (because of the zero based step index)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:549
# 75fd46263ed2444789c7f5c386fe82af
msgid "How to work with ModelForm and ModelFormSet"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:553
# 186867fe218a435cb97fe96b1c704d65
msgid "WizardView supports :doc:`ModelForms </topics/forms/modelforms>` and :ref:`ModelFormSets <model-formsets>`. Additionally to :attr:`~WizardView.initial_dict`, the :meth:`~WizardView.as_view` method takes an ``instance_dict`` argument that should contain instances of ``ModelForm`` and ``ModelFormSet``.  Similarly to :attr:`~WizardView.initial_dict`, these dictionary key values should be equal to the step number in the form list."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:561
# 5c25f93a166846cabd5eed7fb904661e
msgid "Usage of ``NamedUrlWizardView``"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:565
# 976f69a5946b4d8fa1297ccd8e679f82
msgid "There is a :class:`WizardView` subclass which adds named-urls support to the wizard. By doing this, you can have single urls for every step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:568
# d817eca173d94a0e8091b12151f85533
msgid "To use the named urls, you have to change the ``urls.py``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:570
# 945241fcf5494843892e70308f28d6e8
msgid "Below you will see an example of a contact wizard with two steps, step 1 with \"contactdata\" as its name and step 2 with \"leavemessage\" as its name."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:573
# 2e5bdcec3f374d2680489d506588ee22
msgid "Additionally you have to pass two more arguments to the :meth:`~WizardView.as_view` method:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:576
# 6b0fdadae4d0498aaf89e3236fb7180f
msgid "``url_name`` -- the name of the url (as provided in the urls.py)"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:577
# 2482cbd143de4f098b1ea8bc8cb2612f
msgid "``done_step_name`` -- the name in the url for the done step"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:579
# 5bc66d67e13e4912b4a7182df10f56d8
msgid "Example code for the changed ``urls.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:600
# ced220a3a55d42788cd4579a6db13ba5
msgid "Advanced ``NamedUrlWizardView`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:604
# 6294970504394cdebe20989d0f03c41a
msgid "This method returns the URL for a specific step."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:2
# 6c8f768ca1154377af707879a06663cc
msgid "django.contrib.formtools"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:4
# 9754ea1836e44b0badb5e58a8f00b9a0
msgid "A set of high-level abstractions for Django forms (:mod:`django.forms`)."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:5
# d7c1ea301d8445b49e441225cff2593e
msgid "GeoDjango's admin site"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:12
# d93ad7f469d14dc4ab09ed91a1ea02f6
msgid "``GeoModelAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:18
# 57b79c81b06e417bb75fa0dc72aa681a
msgid "The default center longitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:22
# 557850a46a2640278bbbdb556126675e
msgid "The default center latitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:26
# f97cc8e9fee04cc2b0bc8d488da88c45
msgid "The default zoom level to use.  Defaults to 18."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:30
# 22be35830a604af4afa52ab9aca419f6
msgid "Sequence of URLs to any extra JavaScript to include."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:34
# 75e93ba7d5074be595d3ea56b8480f69
msgid "Override the template used to generate the JavaScript slippy map. Default is ``'gis/admin/openlayers.html'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:39
# 6dc9c89da8b145c58a10ef6937a05b53
msgid "Width of the map, in pixels.  Defaults to 600."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:43
# bea873ac3658413d8b91b15174b9d903
msgid "Height of the map, in pixels.  Defaults to 400."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:47
# 8303710af1654336bc039f70547d9c96
msgid "Link to the URL of the OpenLayers JavaScript.  Defaults to ``'http://openlayers.org/api/2.8/OpenLayers.js'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:53
# ce17377eaf104fafb88cf0f8f718c515
msgid "Defaults to ``True``.  When set to ``False``, disables editing of existing geometry fields in the admin."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:58
# 14db9f569a11402a9bea67dc14ac64c3
msgid "This is different from adding the geometry field to :attr:`~django.contrib.admin.ModelAdmin.readonly_fields`, which will only display the WKT of the geometry. Setting ``modifiable=False``, actually displays the geometry in a map, but disables the ability to edit its vertices."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:65
#: ../../ref/contrib/gis/tutorial.txt:761
# d3f3e6b9d87848fbabd76788987ba8b5
# 460720e714e64c768fca32c4d671e949
msgid "``OSMGeoAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:69
# a1e09d04e8ea431e813358383e01b5fa
msgid "A subclass of :class:`GeoModelAdmin` that uses a spherical mercator projection with `OpenStreetMap <http://openstreetmap.org/>`_ street data tiles. See the :ref:`OSMGeoAdmin introduction <osmgeoadmin-intro>` in the tutorial for a usage example."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:5
# 55f78cb7ae514e18871cb6781dbe5fcf
msgid "GeoDjango Management Commands"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:8
#: ../../ref/django-admin.txt:249
# 3dadfe6167954bd68d9dc9b51421d8b7
# 1d5afe2b29244022b9c5da90b64a5ce7
msgid "inspectdb"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:12
# 3f3eb2affd32442ca5fbcfa7d28229b1
msgid "When :mod:`django.contrib.gis` is in your :setting:`INSTALLED_APPS`, the :djadmin:`inspectdb` management command is overridden with one from GeoDjango. The overridden command is spatially-aware, and places geometry fields in the auto-generated model definition, where appropriate."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:18
# 577c077de15e4834b4ffa2df0bd55560
msgid "ogrinspect <data_source> <model_name>"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:22
# c427625061df4422ad285e082ee6861c
msgid "The ``ogrinpsect`` management command will inspect the given OGR-compatible :class:`~django.contrib.gis.gdal.DataSource` (e.g., a shapefile) and will output a GeoDjango model with the given model name.  There's a detailed example of using ``ogrinspect`` :ref:`in the tutorial <ogrinspect-intro>`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:29
# 8f6203b4a6c442159dd8bf07bf2a7b5a
msgid "Use a comma separated list of OGR field names to add the ``blank=True`` keyword option to the field definition.  Set with ``true`` to apply to all applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:35
# c58e42f818744b17aec4e66129ddbb78
msgid "Use a comma separated list of OGR float fields to generate :class:`~django.db.models.DecimalField` instead of the default :class:`~django.db.models.FloatField`. Set to ``true`` to apply to all OGR float fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:42
# 363b45475a56489f9ea1a3aff629b71a
msgid "Specifies the model attribute name to use for the geometry field. Defaults to ``'geom'``."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:47
# b241f27d4ce44c7087aa554ee4df6372
msgid "The key for specifying which layer in the OGR :class:`~django.contrib.gis.gdal.DataSource` source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:54
# 423afc712f274aff96bda5a7db1a8e62
msgid "Automatically generate a mapping dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:59
# a59ef69b5f2d428d8db79859d7ad6de2
msgid "When generating the geometry field, treat it as a geometry collection. For example, if this setting is enabled then a :class:`~django.contrib.gis.db.models.MultiPolygonField` will be placed in the generated model rather than :class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:67
# 6c2504540fe542ceb25d81c2af6f93c4
msgid "Generates a ``__unicode__`` routine on the model that will return the the given field name."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:72
# 21c4f0f42595473cb44cf116cfff06cf
msgid "Suppresses the ``from django.contrib.gis.db import models`` import statement."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:76
# bcc9832f55294ecf8f9407ed7bcfad95
msgid "Use a comma separated list of OGR field names to add the ``null=True`` keyword option to the field definition.  Set with ``true`` to apply to all applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:82
# 0802b882813e4f9b88a83d11cf4bb53d
msgid "The SRID to use for the geometry field.  If not set, ``ogrinspect`` attempts to automatically determine of the SRID of the data source."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:5
# cb6a87df306d4cbfad2fa502aa935a6d
msgid "GeoDjango Database API"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:13
# 2a44e460c2df4a83aadb35106491d885
msgid "Spatial Backends"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:17
# 0b20c9cc3d0d4edb8706d9be58b9b0bc
msgid "In Django 1.2, support for :doc:`multiple databases </topics/db/multi-db>` was introduced.  In order to support multiple databases, GeoDjango has segregated its functionality into full-fledged spatial database backends:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:21
# 16d7179382424fdabc2a5303805719e5
msgid ":mod:`django.contrib.gis.db.backends.postgis`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:22
# 8c98dceaad944976911055a0e033847f
msgid ":mod:`django.contrib.gis.db.backends.mysql`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:23
# 5dc662bb2184421e97e565ceee01e261
msgid ":mod:`django.contrib.gis.db.backends.oracle`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:24
# 5e9de8787ebb4f06993f3444a95043bc
msgid ":mod:`django.contrib.gis.db.backends.spatialite`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:29
# 37c8de040eaa4443a9d04920a4dfa531
msgid "MySQL Spatial Limitations"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:31
# 1d0dda242cdb43eb8ca5988d8234b14b
msgid "MySQL's spatial extensions only support bounding box operations (what MySQL calls minimum bounding rectangles, or MBR).  Specifically, `MySQL does not conform to the OGC standard <http://dev.mysql.com/doc/refman/5.1/en/functions-for-testing-spatial-relations-between-geometric-objects.html>`_:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:35
# 5c566cf4cc8a40aa9c085c7f2a4e5e27
msgid "Currently, MySQL does not implement these functions [``Contains``, ``Crosses``, ``Disjoint``, ``Intersects``, ``Overlaps``, ``Touches``, ``Within``] according to the specification.  Those that are implemented return the same result as the corresponding MBR-based functions."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:41
# b1ed5eec2d8442c7834c2eb4ce3b1201
msgid "In other words, while spatial lookups such as :lookup:`contains <gis-contains>` are available in GeoDjango when using MySQL, the results returned are really equivalent to what would be returned when using :lookup:`bbcontains` on a different spatial backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:48
# a89754e8a22f428b9b4e0f79a190eb26
msgid "True spatial indexes (R-trees) are only supported with MyISAM tables on MySQL. [#fnmysqlidx]_ In other words, when using MySQL spatial extensions you have to choose between fast spatial lookups and the integrity of your data -- MyISAM tables do not support transactions or foreign key constraints."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:55
# 25f65c00ced04af0aae99248bdfe2c40
msgid "Creating and Saving Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:56
# 6f95ecdbca8c44ecb1f47610918382f0
msgid "Here is an example of how to create a geometry object (assuming the ``Zipcode`` model)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:63
# 74ce2c7f53b34d2b920aa33a25dfd5fa
msgid ":class:`~django.contrib.gis.geos.GEOSGeometry` objects may also be used to save geometric models::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:70
# c4f27fe25b5e4d2585b405fe4a4ee2bd
msgid "Moreover, if the ``GEOSGeometry`` is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model's field, using the spatial database's transform procedure::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:82
# 21b54de064d442c98f1282fe16a800a6
msgid "Thus, geometry parameters may be passed in using the ``GEOSGeometry`` object, WKT (Well Known Text [#fnwkt]_), HEXEWKB (PostGIS specific -- a WKB geometry in hexadecimal [#fnewkb]_), and GeoJSON [#fngeojson]_ (requires GDAL). Essentially, if the input is not a ``GEOSGeometry`` object, the geometry field will attempt to create a ``GEOSGeometry`` instance from the input."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:88
# f56074054881461cbaa9851446cb4cad
msgid "For more information creating :class:`~django.contrib.gis.geos.GEOSGeometry` objects, refer to the :ref:`GEOS tutorial <geos-tutorial>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:94
#: ../../ref/contrib/gis/db-api.txt:228
#: ../../ref/contrib/gis/geoquerysets.txt:15
#: ../../ref/contrib/gis/tutorial.txt:602
# 8215bbdec8804ce4aabf36dcef1e35e8
# b14b32828f2f4c20bb0e2bd3914171eb
# d0f8add52fb142288f7d34f9b165ad5a
# 23fc126bf3b842839786a63e52725744
msgid "Spatial Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:96
# 224d7f419997440bb5c18a74c3e3b0f7
msgid "GeoDjango's lookup types may be used with any manager method like ``filter()``, ``exclude()``, etc.  However, the lookup types unique to GeoDjango are only available on geometry fields. Filters on 'normal' fields (e.g. :class:`~django.db.models.CharField`) may be chained with those on geographic fields.  Thus, geographic queries take the following general form (assuming  the ``Zipcode`` model used in the :ref:`ref-gis-model-api`)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:111
# be1f0628285640c69114ff2ebed9cdb0
msgid "In this case, ``poly`` is the geographic field, :lookup:`contains <gis-contains>` is the spatial lookup type, and ``pnt`` is the parameter (which may be a :class:`~django.contrib.gis.geos.GEOSGeometry` object or a string of GeoJSON , WKT, or HEXEWKB)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:116
# d8be1c12943348ea884fc1af0f4542ad
msgid "A complete reference can be found in the :ref:`spatial lookup reference <spatial-lookups>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:121
# 5c01f9cb6f8e432387f593fdf965e043
msgid "GeoDjango constructs spatial SQL with the :class:`GeoQuerySet`, a subclass of :class:`~django.db.models.query.QuerySet`.  The :class:`GeoManager` instance attached to your model is what enables use of :class:`GeoQuerySet`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:129
# fcb84284480b4bbf8ef8ff59e2e35283
msgid "Distance Queries"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:132
#: ../../ref/contrib/gis/tutorial.txt:6
# 80d4dfa9a60c4828b94eff7c27b83605
# f6b885f5cbd34475950fc6a476e376a0
msgid "Introduction"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:133
# 3639d9cd19f742d8859a49dd2fcf2fab
msgid "Distance calculations with spatial data is tricky because, unfortunately, the Earth is not flat.  Some distance queries with fields in a geographic coordinate system may have to be expressed differently because of limitations in PostGIS.  Please see the :ref:`selecting-an-srid` section in the :ref:`ref-gis-model-api` documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:142
#: ../../ref/contrib/gis/geoquerysets.txt:512
# c1019fe904a14f4cbea7c3edb3dfbd07
# d5e9b61d71a14fb2afed599a8bd8604d
msgid "Distance Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:143
#: ../../ref/contrib/gis/geoquerysets.txt:272
#: ../../ref/contrib/gis/geoquerysets.txt:514
#: ../../ref/contrib/gis/geoquerysets.txt:693
#: ../../ref/contrib/gis/geoquerysets.txt:772
#: ../../ref/contrib/gis/geoquerysets.txt:792
#: ../../ref/contrib/gis/geoquerysets.txt:855
#: ../../ref/contrib/gis/geoquerysets.txt:893
#: ../../ref/contrib/gis/geoquerysets.txt:985
#: ../../ref/contrib/gis/geoquerysets.txt:1081
#: ../../ref/contrib/gis/geoquerysets.txt:1093
#: ../../ref/contrib/gis/geoquerysets.txt:1172
# d1bc7a675e40420ea9a8cd7aaebe4b3e
# 86b38fedbb95453b9a5a3f684fe52b17
# 5b5aee30157045aa8e6810d871878484
# ca40f99b73e34f75b61bae96d2d992c7
# 130bf92dfe3a45e38a96dd6942633a60
# d2bb3591eec544e8ac59b6241c5ba5c9
# cd16c76ff36e471d9bc5c6f7b1661f68
# a8899284ec484bbaa12f4108a47f3704
# 412dc99116dd45988c1e7b85f0d34449
# 92bc91eda6d447158294ab8e329e82e4
# 1ca085a1a5f2459ca9b3462ca99bd224
# 46b66537c46844e9900f4c1525f9be23
msgid "*Availability*: PostGIS, Oracle, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:145
# 75db59f4d5da4f2cb2b4e9ce61909c3f
msgid "The following distance lookups are available:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:147
#: ../../ref/contrib/gis/db-api.txt:247
# b165591d63f544d8b78258d19d75d216
# 56f58e204e1b4181b4915f9fcb14fa03
msgid ":lookup:`distance_lt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:148
#: ../../ref/contrib/gis/db-api.txt:248
# 211d1d5917e24c0389078de39fbb2b3e
# 0e8748fb63e34eca8d17285a5beb1338
msgid ":lookup:`distance_lte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:149
#: ../../ref/contrib/gis/db-api.txt:245
# 59cefbb71a384c2993f1c53e4669f6b1
# 42ec411a78c9408d97482f51665daaf6
msgid ":lookup:`distance_gt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:150
#: ../../ref/contrib/gis/db-api.txt:246
# 813754bbe3eb48ab839ec59c112b221f
# cc2b577bf30941cfa43296ff782a3262
msgid ":lookup:`distance_gte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:151
#: ../../ref/contrib/gis/db-api.txt:249
# 2734b6a1a588441b8e9ebc43580999a1
# 622b6362fd2946f69e25db7e605ce2d6
msgid ":lookup:`dwithin`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:155
# f65f1129342742ae8cf9f763c0e8b5cc
msgid "For *measuring*, rather than querying on distances, use the :meth:`GeoQuerySet.distance` method."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:158
# a3e36416943d451380153218611cda5e
msgid "Distance lookups take a tuple parameter comprising:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:160
# 3e82450569024893b203937db9216889
msgid "A geometry to base calculations from; and"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:161
# b88e2dcae1e24cccaf2ab61c3f167b6e
msgid "A number or :class:`~django.contrib.gis.measure.Distance` object containing the distance."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:163
# 5461bc2460de4d7cadfd51e995d1d088
msgid "If a :class:`~django.contrib.gis.measure.Distance` object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:170
# 4001481136ce469498dcef9e064b242e
msgid "For users of PostGIS 1.4 and below, the routine ``ST_Distance_Sphere`` is used by default for calculating distances on geographic coordinate systems (e.g., WGS84) -- which may only be called with point geometries [#fndistsphere14]_. Thus, geographic distance lookups on traditional PostGIS geometry columns are only allowed on :class:`PointField` model fields using a point for the geometry parameter."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:179
# fcbf8189a80945d5a19b131905db8e1c
msgid "In PostGIS 1.5, ``ST_Distance_Sphere`` does *not* limit the geometry types geographic distance queries are performed with. [#fndistsphere15]_  However, these queries may take a long time, as great-circle distances must be calculated on the fly for *every* row in the query.  This is because the spatial index on traditional geometry fields cannot be used."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:185
# 3dc74103915d472e82bfa8c201fc721b
msgid "For much better performance on WGS84 distance queries, consider using :ref:`geography columns <geography-type>` in your database instead because they are able to use their spatial index in distance queries. You can tell GeoDjango to use a geography column by setting ``geography=True`` in your field definition."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:191
# 4b2cecbb468a4ef0b59d840fd2c63d96
msgid "For example, let's say we have a ``SouthTexasCity`` model (from the `GeoDjango distance tests`__ ) on a *projected* coordinate system valid for cities in southern Texas::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:204
# 098d013e62184435a6e10ec7b3027be1
msgid "Then distance queries may be performed as follows::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:223
# d3dc8e15b8b8438f901c089f7853044d
msgid "Compatibility Tables"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
# da807bdba8324d208e2e2d63e4be69bc
msgid "The following table provides a summary of what spatial lookups are available for each spatial database backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
# 592a7b6d75284b96b644218ea4bec982
msgid "Lookup Type"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:277
#: ../../ref/contrib/gis/geoquerysets.txt:44
#: ../../ref/contrib/gis/geoquerysets.txt:66
#: ../../ref/contrib/gis/geoquerysets.txt:88
#: ../../ref/contrib/gis/geoquerysets.txt:109
#: ../../ref/contrib/gis/geoquerysets.txt:138
#: ../../ref/contrib/gis/geoquerysets.txt:158
#: ../../ref/contrib/gis/geoquerysets.txt:179
#: ../../ref/contrib/gis/geoquerysets.txt:199
#: ../../ref/contrib/gis/geoquerysets.txt:219
#: ../../ref/contrib/gis/geoquerysets.txt:254
#: ../../ref/contrib/gis/geoquerysets.txt:335
#: ../../ref/contrib/gis/geoquerysets.txt:357
#: ../../ref/contrib/gis/geoquerysets.txt:548
#: ../../ref/contrib/gis/geoquerysets.txt:568
#: ../../ref/contrib/gis/geoquerysets.txt:588
#: ../../ref/contrib/gis/geoquerysets.txt:608
#: ../../ref/contrib/gis/geoquerysets.txt:628
#: ../../ref/contrib/gis/install.txt:225
#: ../../ref/contrib/gis/install.txt:1222
#: ../../ref/contrib/gis/testing.txt:17
# cde2dfdb9382402cade98c5dba6b8301
# abfccd647b8c45fdab7d19d374350c32
# 3f869aae84324035ad424741eebec1f2
# 5c9564c57f384b2e8a48c8115ad3e7c9
# 704291e74b83449a8009e2861ed85ac4
# 4a5c838ceef940d495c2f7cf9f937abc
# e1d861bec16c4c96860ddc740e5e9903
# dface934a6d94a5ba58518efc6e00bbe
# 1519068f21804aaca047a151d69e4a63
# 548970878b7b4343a14f7360b9e9ab5a
# 59cab7e7e7ff4d6698448e0393f5b550
# 93871a340f864e2f9bbd43e9500e8798
# ade31d942bb24d3bbadff7addd35ca43
# 00bf686d7f714def9ab2ed003c035aaa
# ab69bc381c314ac3b4fd10452e0f6124
# d343518039fd470c834c1cd9d672d8fc
# d2a96a2dfbba4b75a5898490eb3e02f6
# 8b339975646e4f5fbb72c5732f9562b5
# 75f13764f3dd46ddb4d3e02232940792
# b45f866dd5bc410f97765f531fe4de9f
# d64683e05fde4d3cb83ab04b89e577bd
# 6a07f4f4587b46078f385eec13de7c32
msgid "PostGIS"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:277
#: ../../ref/contrib/gis/geoquerysets.txt:110
#: ../../ref/contrib/gis/geoquerysets.txt:159
#: ../../ref/contrib/gis/geoquerysets.txt:180
#: ../../ref/contrib/gis/geoquerysets.txt:220
#: ../../ref/contrib/gis/geoquerysets.txt:255
#: ../../ref/contrib/gis/geoquerysets.txt:302
#: ../../ref/contrib/gis/geoquerysets.txt:337
#: ../../ref/contrib/gis/geoquerysets.txt:359
#: ../../ref/contrib/gis/geoquerysets.txt:549
#: ../../ref/contrib/gis/geoquerysets.txt:569
#: ../../ref/contrib/gis/geoquerysets.txt:589
#: ../../ref/contrib/gis/geoquerysets.txt:609
#: ../../ref/contrib/gis/geoquerysets.txt:629
#: ../../ref/contrib/gis/install.txt:68
# 845d3d9f134e4346a146270a31f9ef5e
# 88e875942add43f9a1c305d1a5fa5c54
# 849e1d0e178a49f7a9ef0822f25cfbd8
# bbef7e7d51234070ab6cc282a228c119
# 2fcf915d6af94e9086f0d892dd0b9122
# c618ea74b061430793411bd6794a6885
# e0807c34f98b4b22bc7d086334347b61
# de9dea4458214bac86d35143ea0f8e96
# 63427525c9a6496ea14128ffdbfe9d25
# f3a56c89f564419eaceed104a00cdc6c
# 69f8888dcc1e49a3b1f0f6f71b8540de
# 052a380359a74137b3505e505d2ffea6
# 6499d461d83b46fc8fc5e2c6450a69b9
# 170e76089694486e87f54e1d8dd32c73
# 6497fa8844524fbeb6a38c2aa132a1bb
# be44452ae4e043bd80326a8805679346
msgid "Oracle"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
# bc76c1cba16f4c029cbeaa4f4dfd94b3
msgid "MySQL [#]_"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:277
#: ../../ref/contrib/gis/geoquerysets.txt:46
#: ../../ref/contrib/gis/geoquerysets.txt:68
#: ../../ref/contrib/gis/geoquerysets.txt:90
#: ../../ref/contrib/gis/geoquerysets.txt:112
#: ../../ref/contrib/gis/geoquerysets.txt:200
#: ../../ref/contrib/gis/geoquerysets.txt:222
#: ../../ref/contrib/gis/geoquerysets.txt:257
#: ../../ref/contrib/gis/geoquerysets.txt:338
#: ../../ref/contrib/gis/geoquerysets.txt:360
#: ../../ref/contrib/gis/geoquerysets.txt:550
#: ../../ref/contrib/gis/geoquerysets.txt:570
#: ../../ref/contrib/gis/geoquerysets.txt:590
#: ../../ref/contrib/gis/geoquerysets.txt:610
#: ../../ref/contrib/gis/install.txt:363
#: ../../ref/contrib/gis/install.txt:889
#: ../../ref/contrib/gis/testing.txt:115
# b33f888f0c854fac976d9635fcbd0594
# 4cffcca4536c4d08873e90305322a7cd
# 716264846f6545a1b444e3e67fb4ba75
# f657a25b04774347b89bd5a8b21c4c03
# efceea0fb0144ed781a4736850f51450
# 9b5e4884d1314e1f94975054d57e5e72
# 0fc586ac711f40dca4e52057a0b44efd
# 07c1adb62d5b41acb12f5a0896d7d230
# 00b0e6ff4c7b4ed793e42645851d68ba
# d5a36b6f71d548ef83ee616819937c2d
# 28492b023dda4aaab59beaed79d7f127
# 26aa847b1d404718a612c94ec3c2534e
# 8d2c01c0463b4d96acfa386808695540
# 7ff2e98fd5c44e1884e1e7f36bf68020
# 2644674ed8874e2baf9332924030f4b7
# 7a89af768a514c04a1801f37be240261
# c4076340894545a99ad31d9b55757603
# 054e4ac0eabb46d7a40954ab7a5ae09c
msgid "SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:236
# 8b08ec7a5e04483c94db894420245b7d
msgid ":lookup:`bbcontains`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:257
#: ../../ref/contrib/gis/db-api.txt:257
#: ../../ref/contrib/gis/db-api.txt:257
#: ../../ref/contrib/gis/db-api.txt:257
#: ../../ref/contrib/gis/db-api.txt:258
#: ../../ref/contrib/gis/db-api.txt:259
#: ../../ref/contrib/gis/db-api.txt:260
#: ../../ref/contrib/gis/db-api.txt:261
#: ../../ref/contrib/gis/db-api.txt:262
#: ../../ref/contrib/gis/db-api.txt:263
#: ../../ref/contrib/gis/db-api.txt:264
#: ../../ref/contrib/gis/db-api.txt:265
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:281
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:284
#: ../../ref/contrib/gis/db-api.txt:284
#: ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:286
#: ../../ref/contrib/gis/db-api.txt:287
#: ../../ref/contrib/gis/db-api.txt:288
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:294
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:298
#: ../../ref/contrib/gis/db-api.txt:298
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:301
#: ../../ref/contrib/gis/db-api.txt:301
#: ../../ref/contrib/gis/db-api.txt:302
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:305
#: ../../ref/contrib/gis/db-api.txt:305
#: ../../ref/contrib/gis/db-api.txt:305
#: ../../ref/contrib/gis/db-api.txt:306
#: ../../ref/contrib/gis/db-api.txt:306
#: ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/db-api.txt:308
#: ../../ref/contrib/gis/db-api.txt:308
#: ../../ref/contrib/gis/db-api.txt:308
# 93723e7e4ab349e894888ebe666bf710
# 74129511974646e798ecc79f9d5b03b6
# a8f0f514eee147d8a6b272919c3660eb
# 7c20a0338b064216b29871f3fa916b8d
# c2e0a145a4d945d7bf9178abecec887b
# bd4d31116736404f94f7a9372b1f0edb
# acca65ef332d4a3b880a0ed8b134964e
# ae6489cf51b14d808b7d2bd7492533ed
# a543b2ba8c6c4f7587aa5465e8a93399
# d40691d91ed44994b8c8571834bc36a9
# df88f6c6a7994a9eb52095cef0ed0c9a
# 4aafec85514243d99d4b20aca8fec2e9
# 442ee99862b24bcb89be73e9cb0c08e5
# c0ab7ab97c1947468a66f69ab54e71bb
# 18ebd164fdad4511886eb9a39a9636a4
# 3a30c4ad65d344e59e0c95cb0b78f002
# fedb33faffce44ed973ca525e305f006
# f1c7ef0bf0444f908112a3a427b7578a
# c60adbf4d80548a9acf6288c5a1da32d
# 399eaeaab59d45fbb68e35620344f8b9
# 4c134c9b64584d30beb57b9412e127d3
# ab5f32546e604483bfd8f5291d728189
# 9c6f0f6998564b80aee5d546e98258dd
# 56ccda40e5884fdd88e05b8a791c5cd5
# fef59ee044ce41f6b6db95ddbae1ce4c
# 3138c216bf714cd190806cb21d31083f
# 48cc6c0ce601456ca6626b6b0f70b1ee
# daecc179aaff4a23a349bba683a286e0
# a8b11a698a0a4a60b3eca3847e84164c
# 46e78679554a4349b72c02da7bc97b7e
# 849f038969994e88ad1f19f76fb1356b
# ddd69783667b4688b00b2a180d88d8fd
# e31ce785d23a4fb4b2571a9b0be51e1c
# b7c87495603944d3b44fd13d404c239c
# b0753b46e32e4b94a6567cf126121bb6
# a14c018fba8345928d5b4272273a9ec2
# a769ddd3b98948f9a9b7de37d4605ed3
# d22e47e995724a4aa923666315d1276a
# bbd70493ebc8435d9737dbf2a645de1c
# 9cd3258376fa41e3be3a28179570918b
# ac63b3bdebc44a9c8cbc63a8ba9f2799
# c1390a991e1b4fdc8c1170791b1b2593
# 9877eab9679741cc880c90a463d60448
# 214f9cee02d44bb69d10924247e1dd0e
# fcfef71c54ee48e7bd800f4f094f46ad
# d2cb2b5587684a5382f0a5cd1c9da66d
# 5177ecbe7acb424e8a4e25a968b3f1bf
# cba5cac862d7413db6e18aed9c472efd
# 5f311b21c0a24ba8a2a08b68a1de49de
# 30c5f36987e340f7ad13d4d435d1445f
# 6c5ffb2726ed4ca6830ef2281dd1c887
# ed9e44bf245449c194eac7b840faef73
# 85b8e90f7d354f4e91f0977ad440c80b
# 367c3f827e6a49ff8eef38e8d825c677
# a2a591011ba64d2199fa23632ab188bb
# 63ac3871bae349df8498e984254c654f
# 51f2a76ba0764216a032a2e9320c3176
# cb8f1e6dbb40401c882e593ddac896ea
# ab6ce0b5a92e40aa8f8a722b7b782699
# 4b5baa1121f24065a96f279001f3dde4
# 855170e6d15a45ebabd0cbcf7df9284a
# e10209cb6b1f419f913955625afa47c3
# 2e9c2b4bf4254c549371324abb3325cb
# 793f9414c7484210942ce2e9ff112347
# 86b14a5678f44fd1b2ac7e1d1973e221
# ba8cb0c0fb5c482ca82f0eb375a72238
# 45a0b2c3dd814c08ab053412f280685d
# d565a62f6394428199d96dbd880086eb
# ad1c74448216484987819b1b96ee2bcb
# ed5232ac0b9b48b891e416f8327fddd0
# 4866d4c80a6f42ceb93829841ac39ddd
# 0f95a4b4a6db44f3aacc228eef7820ac
# 9b54ac259d124fa28d9975baeb57ca3d
# 4eec1ce707df46de987e1382aac36798
# 29c014e514d64e80bf6f55d93e3527f6
# 762d73ad39aa41b6952eda28fd3a1c7b
# d245f5f6a483418fa5a31a687ee15919
# cc3c3231cbf24f23a1f1e8720dc8c8fb
# ba937649dc6b44888c9837278a24a3cb
# 2b191b4e975d43f6bb07f44ba1bdedfb
# 6a3ea9f888ae4c80bbc15d9e22bcf14c
# 90aa3fb5b12143f99924b73ba0461b0b
# 9caaa004688c4ffdbbd0da8e2c175fe6
# 2606f7bff5f94e1e94d57c623650c578
# f2b7163b8e024a21a18b7cd3a5a483f8
# 5dc209794014474697bdfa6d3a40a0bc
# 605ddaba5ef94450826a69e8264b4758
# 7b8e158a0cd7443788db17488be4e1ad
# 294409e9361b4312bb0d13e9744bbdf5
# e41b11b6b3c64bd99c976dae4c5f43fe
# 9457ee26cbaf49ff8423501371ae0b1d
# f5e91e98ba044331933284adb377723d
# 481a04998ba14d26831880cf760112c3
# d851cd56194f4d65b67f907e42365841
# bf9dabbdacc24b998f4f3dc0b9421345
# c021bef3f49348179b8bc23a96733803
# 4f517921bb6946419d8dba1501f7440c
# 85a704eb58e84dd3a91aa7234f3cdfac
# 6948a70ebd834257aea75505b3c1b6bb
# fed88b05f3d549649948bfdccc813b5d
# 873d3009199044eb8bca7215bb6f28b9
# 29810410650b4c58919315c71f62a8d6
# cd715085b1d2468bba66fdfc063bc448
# 773369fb8ddc4cb0813f95cd60aa39f1
# e331c5ee3bfb46cda735fa67049a2cdf
# 17d3b82d94da4be1a3caeb47b4391e08
# 6575b83d86574df7a76a8348119ce389
# 016c6b4cabd04b64a0bb52e2dc1283df
# d6fbc165d1924382905e0f41a91d9fc5
# 1eb03a7794aa4d3fbb9373ffe8434200
# 22cfa7681e4d4f648abda367e28bbbbe
# 5b465dea96af425faf15defc8e666b27
# 331b097734b04874b64f488373afdbc5
# df600ee8f9e741fa9d81933ff5fecf27
# 1ce5b37900484a88b17096f9c19e1628
# 1ea66f8087054166aa6066ded2d18fd7
# b273f2dcb41943dcb62867552d1d39fc
# ad2124a290e04bb9a634afc5f7bed6f5
# a3dd6770fc8a4f42952305447ea32e13
# 195171ea8ad744d1be8d5e44acd9cb2c
# eac823c6131a4ba2b1402c470dda2440
# 6d90ade626c94929939b65dc43c7f4d1
# fa66dd8180144eabbfc751f57843f957
# efa0675bcfe74bad9491260a7e22044f
# f08f5357cf6e4bc8abc3dbb18c7b4b5b
# 1960066d2a42401c83f1836c5657a4ee
# 2023808b788e4d0fb8d318c7ef307dbb
# 5361916d2a2347839ec8f3e8227f52f8
# c4d1660308bd4d899eaae8547a7a6404
# a9a1ad238b6642df8f6eb4b99825ed9c
# 9655086e04e54a02abb07b10f33f47a5
# 74132c37b19d4761bafd49430a7289d6
# 2321f8503d3a42388976369f24945852
# 113130d0457b4153a602f5c40b38010f
# c59ca97c26494997b0e9e6bd3811866e
# ca1f72f99784428a857cedcc063a6702
# 7dbe1f98917848c5948a8e46850bddc6
# 77a8df9ac13a40aabe96bbfa2a1548d5
# 7e437a0a6a7945478dc9f7e2d377c738
# 64d8036cc3d44de692ededab89c2283e
# 33bc6821ff8e473ab599b8f4b98ab4cd
# 176e4317d4044f89aa306d3f267669cf
# 51d77a4ef2dd431c8d1e38e33e27f4a8
msgid "X"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/model-api.txt:218
# bae273adad4d4d10832b27af5c79c889
# d6eff6c66b6648cb801988ed74651e95
msgid ":lookup:`bboverlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:238
# 28a19becaac44ed8a566927631efdc01
msgid ":lookup:`contained`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:239
# dadb56da3632478da01c058337a864e5
msgid ":lookup:`contains <gis-contains>`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:240
# 39b035d85af64812a477fdcafa4762d3
msgid ":lookup:`contains_properly`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/model-api.txt:219
# c71a8bd19bf9411ca8341d92f94be878
# d47df32d686742b481e27c2a485dbd65
msgid ":lookup:`coveredby`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/model-api.txt:220
# 7e4d7961ff79452a842012d8afddb3ae
# ecf8716ab2cc4d42bdee0318424c0e9b
msgid ":lookup:`covers`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:243
# bf9abb4f2e16419fa1babf6d7ea32de7
msgid ":lookup:`crosses`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:244
# 3bd7ca86d8ea4cfd98d77743ea62709a
msgid ":lookup:`disjoint`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:250
# 48e927353a504bb9b892056c3f67eac1
msgid ":lookup:`equals`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:251
# 3026c28dfadd4280bcc0c30be403a81a
msgid ":lookup:`exact`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/model-api.txt:221
# 51f55b00a9f0464f9054de812bce7df3
# 1157b6048b914c278f9d2679c55cbb59
msgid ":lookup:`intersects`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:253
# 0437af111c044b068dd2e8084877d485
msgid ":lookup:`overlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:254
# 158bd8c06f254828999fe4ae8fa35dd1
msgid ":lookup:`relate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:255
# a42581283ed243f9b0d62be75fba7040
msgid ":lookup:`same_as`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:256
# da2c3cfe8d32416bbb846f5f7ad19b75
msgid ":lookup:`touches`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:257
# 7123332507a8472b9d872b446a2c88a9
msgid ":lookup:`within`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:258
# dd99dc0c5a234fd2a1b7d3f9f80221a4
msgid ":lookup:`left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:259
# 53db15415a424ae2aa3479a3eaa31fc6
msgid ":lookup:`right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:260
# 82f859fb92034559ba0e8f0d4a9645f3
msgid ":lookup:`overlaps_left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:261
# 5758f457dc384b6a9619c374c501c996
msgid ":lookup:`overlaps_right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:262
# 55c13ca1b26c45e9bb40655b1db43221
msgid ":lookup:`overlaps_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:263
# cd1b3c2b7d1e4aaa90e2cbfcae823482
msgid ":lookup:`overlaps_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:264
# 0b8ef5e0ba4343dbb6107473113915cd
msgid ":lookup:`strictly_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:265
# 1dac81214c924cdd95c5881c3dc7dd12
msgid ":lookup:`strictly_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:271
#: ../../ref/contrib/gis/geoquerysets.txt:640
#: ../../ref/contrib/gis/tutorial.txt:701
# 6779b4baae604fb594c7d10009203517
# 8f89fee373094901b6d11d0866495ae0
# 4c3af899c3fe4e918cb49d208904c08a
msgid "``GeoQuerySet`` Methods"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:272
# 362930c0193c4d1498a2c220d0f10ed6
msgid "The following table provides a summary of what :class:`GeoQuerySet` methods are available on each spatial backend.  Please note that MySQL does not support any of these methods, and is thus excluded from the table."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:277
# e3998aaa07e44cc2a8164afe09c3f6da
msgid "Method"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:279
# 3e6cb8d9fc644660ab8d35d2f7324d72
msgid ":meth:`GeoQuerySet.area`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:280
# d5b6474705ca4a838b871753592b8b8f
msgid ":meth:`GeoQuerySet.centroid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:281
# ba6c9b26694f4938810887dff52044e0
msgid ":meth:`GeoQuerySet.collect`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:282
# 7a13caa919754015b2af8de8cd1180eb
msgid ":meth:`GeoQuerySet.difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:283
# 9d52de47d9ad4d2eba4bc35419ceb9ab
msgid ":meth:`GeoQuerySet.distance`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:284
# 0118c7eaefc0492893cf958f0a3c82d9
msgid ":meth:`GeoQuerySet.envelope`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:285
# d7c9a0a66fb54e42a1e0db259ff12ea9
msgid ":meth:`GeoQuerySet.extent`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:286
# 6554cf0fa144492394b24d1ba94f8cd0
msgid ":meth:`GeoQuerySet.extent3d`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:287
# 11f20deaf2094d829053812a4d48b7c8
msgid ":meth:`GeoQuerySet.force_rhr`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:288
# b44363d39d4c48fd82cbb861423e9558
msgid ":meth:`GeoQuerySet.geohash`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:289
# 29e99de07ee64d7ea3fb23686e7bcfd0
msgid ":meth:`GeoQuerySet.geojson`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:290
# 889b6d706c4f4ce89b3a381a30ca5718
msgid ":meth:`GeoQuerySet.gml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:291
# 069778512e21403f8feeb3531526cb7f
msgid ":meth:`GeoQuerySet.intersection`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:292
# 5a52c06b53484f8898d672e85499559c
msgid ":meth:`GeoQuerySet.kml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:293
# eea08f1c4a3c480393c563ce411d323b
msgid ":meth:`GeoQuerySet.length`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:294
# f25cd11654dd45df90be1ccc7c533148
msgid ":meth:`GeoQuerySet.make_line`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:295
# 2b5548d3ecca46fbbef7c3f5f6618be9
msgid ":meth:`GeoQuerySet.mem_size`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:296
# 5329a21e1b4a430b9bf111e08e3523b1
msgid ":meth:`GeoQuerySet.num_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:297
# e25991994165434da79c6d0feada8aa6
msgid ":meth:`GeoQuerySet.num_points`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:298
# bcb438032aad473fa4a05ad29c9eb4c4
msgid ":meth:`GeoQuerySet.perimeter`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:299
# 3d96e33928934fc7ac800f42f107ff87
msgid ":meth:`GeoQuerySet.point_on_surface`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:300
# f3796a8edc824864858dc3a47381186d
msgid ":meth:`GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:301
# d08d9a88f29b4710947fb86dea90e92c
msgid ":meth:`GeoQuerySet.scale`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:302
# ec6aa55fba254154b1d0527ca718876d
msgid ":meth:`GeoQuerySet.snap_to_grid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:303
# 8b06be300f3e49c796551b2986f2272a
msgid ":meth:`GeoQuerySet.svg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:304
# 015100484bb94a08932cf26f20055b22
msgid ":meth:`GeoQuerySet.sym_difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:305
# 8a093616bf82479f993318cb8c1cd22e
msgid ":meth:`GeoQuerySet.transform`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:306
# 339c1eff52be4a49a9a7fa601f640675
msgid ":meth:`GeoQuerySet.translate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:307
# 06b2626f6d4b490594e903a1ecf82e72
msgid ":meth:`GeoQuerySet.union`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:308
# 7ec94fa3141a40cc80d9bce9b9b96f20
msgid ":meth:`GeoQuerySet.unionagg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:311
#: ../../ref/contrib/gis/geoip.txt:229
#: ../../ref/contrib/gis/geoquerysets.txt:1245
#: ../../ref/contrib/gis/geos.txt:898
#: ../../ref/contrib/gis/install.txt:1316
#: ../../ref/contrib/gis/measure.txt:177
#: ../../ref/contrib/gis/model-api.txt:258
#: ../../ref/contrib/gis/sitemaps.txt:25
#: ../../ref/contrib/gis/tutorial.txt:783
# fe4d0078959b4a4cb31398c6ba7b0cf6
# f92ce488e8194cbe90fdfc6eb28565ce
# b0b094e1d99b45a189e44f85df3a640d
# 72d9654b9710452787ee45be0d7427d0
# 2079c50badd641dd83417879b08020a3
# e1979927edc44ec48f2adaab08eb2c81
# 800b956b95204612bb13abe07d485b0f
# cef7a0785d3e40abb04640a89a958ead
# 1866ef382b78448c91ff2ad31691caeb
msgid "Footnotes"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:312
# f99ed0db5937454a895966e70053d37c
msgid "*See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document 99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual Representation of Geometry)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:313
# 39ef9f9c6bf44d8fbe7ccf66a77b5de6
msgid "*See* `PostGIS EWKB, EWKT and Canonical Forms <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#EWKB_EWKT>`_, PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:314
# 59c232a26b9a480d9cb60339460381fc
msgid "*See* Howard Butler, Martin Daly, Allan Doyle, Tim Schaub, & Christopher Schmidt, `The GeoJSON Format Specification <http://geojson.org/geojson-spec.html>`_, Revision 1.0 (June 16, 2008)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:315
# 4ac7ab39a7ca4b49b0f17a02086c9e8a
msgid "*See* `PostGIS 1.4 documentation <http://postgis.refractions.net/documentation/manual-1.4/ST_Distance_Sphere.html>`_ on ``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:316
# 49d1654b8ef1446fa1f123614802b30b
msgid "*See* `PostGIS 1.5 documentation <http://postgis.refractions.net/documentation/manual-1.5/ST_Distance_Sphere.html>`_ on ``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:317
# 5af61b95ddc84bfcb6eff993c698da9e
msgid "*See* `Creating Spatial Indexes <http://dev.mysql.com/doc/refman/5.1/en/creating-spatial-indexes.html>`_ in the MySQL 5.1 Reference Manual:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:320
# 0179ede12e594cbfa0749ec37cc10677
msgid "For MyISAM tables, ``SPATIAL INDEX`` creates an R-tree index. For storage engines that support nonspatial indexing of spatial columns, the engine creates a B-tree index. A B-tree index on spatial values will be useful for exact-value lookups, but not for range scans."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:325
# ba55c288b20a482abec74401d483e4aa
msgid "Refer :ref:`mysql-spatial-limitations` section for more details."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:3
# 12407722ef044d78a9b0bd0a119be5a4
msgid "Deploying GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:7
# 6ad6c41b4da346c493390a7f5474d0f5
msgid "GeoDjango uses the GDAL geospatial library which is not thread safe at this time.  Thus, it is *highly* recommended to not use threading when deploying -- in other words, use an appropriate configuration of Apache or the prefork method when using FastCGI through another Web server."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:14
# 8e371bc97a9c4cf98376d8d9589bdcf2
msgid "Apache"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:15
# 713c5c8a87c5403288156319cba9e9b4
msgid "In this section there are some example ``VirtualHost`` directives for when deploying using either ``mod_python`` or ``mod_wsgi``.  At this time, we recommend ``mod_wsgi``, as it is now officially recommended way to deploy Django applications with Apache.  Moreover, if ``mod_python`` is used, then a prefork version of Apache must also be used.  As long as ``mod_wsgi`` is configured correctly, it does not matter whether the version of Apache is prefork or worker."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:25
# 24b17f7a177b4a639f9251cdb7bd2d3c
msgid "The ``Alias`` and ``Directory`` configurations in the examples below use an example path to a system-wide installation folder of Django. Substitute in an appropriate location, if necessary, as it may be different than the path on your system."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:31
# 84347291ec0343f4b04efcfa0784c5ee
msgid "``mod_wsgi``"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:52
# 8f45115c16dc417f85a7d6de4f5bdeb0
msgid "If the ``WSGIDaemonProcess`` attribute ``threads`` is not set to ``1``, then Apache may crash when running your GeoDjango application.  Increase the number of ``processes`` instead."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:56
# abee747230084bb88f0369f210f9f393
msgid "For more information, please consult Django's :doc:`mod_wsgi documentation </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:60
# cd87bf568dca42bf933639e5044d3cd9
msgid "``mod_python``"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:63
# 9a7fd07658464226b8c992cd34cd4aaa
msgid "Support for mod_python will be deprecated in a future release of Django. If you are configuring a new deployment, you are strongly encouraged to consider using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` or any of the other :doc:`supported servers </howto/deployment/index>`."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:89
# 8afd23318a9442d8b14e4de6a99d2b6a
msgid "When using ``mod_python`` you *must* be using a prefork version of Apache, or else your GeoDjango application may crash Apache."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:92
# 5a04a63abdf44a46a187f16f3e470166
msgid "For more information, please consult Django's :doc:`mod_python documentation </howto/deployment/modpython>`."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:96
# ac7eeda7c56945be9fa6004cf95c5062
msgid "Lighttpd"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:99
#: ../../ref/contrib/gis/deployment.txt:105
# c5c0e17a3d164647b8ff3a37c55dd72c
# 23a3b368c61a4783b21a19ac14cad8ec
msgid "FastCGI"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:102
# 07f931a4beca46a49cf2a7de0b2e9140
msgid "Nginx"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:3
# a93c3361436d4094be814b373fa62f4f
msgid "Geographic Feeds"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:8
# 7caceea7d3324b9b82ece85976254fec
msgid "GeoDjango has its own :class:`Feed` subclass that may embed location information in RSS/Atom feeds formatted according to either the `Simple GeoRSS`__ or `W3C Geo`_ standards.  Because GeoDjango's syndication API is a superset of Django's, please consult :doc:`Django's syndication documentation </ref/contrib/syndication>` for details on general usage."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:19
#: ../../ref/contrib/gis/geoip.txt:38
#: ../../ref/contrib/gis/layermapping.txt:34
#: ../../ref/contrib/gis/measure.txt:17
#: ../../ref/contrib/gis/sitemaps.txt:11
#: ../../ref/contrib/gis/testing.txt:159
#: ../../ref/contrib/gis/testing.txt:194
#: ../../ref/contrib/sitemaps.txt:255
# c6ca14a3fba648f190e6dfd73ec30c49
# 35956f623f5e45788e3c873c74242d95
# 5d51ec717e1d49edb57aa13ef27ee786
# 06923e5b11f147649df361dc00a7b0e1
# f88e7fd4cef64662b3408cdf22cf365d
# 49bf585306de4c97a43fedc581d7ced0
# a1b00d25d2af4437bdf8d6fe37269066
# a01056e067984d6cb74ff1138da1dcd6
msgid "Example"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:22
#: ../../ref/index.txt:3
# 6c1decaad3f64fa4a8a48aad20340d7e
# 0e8f83c26bc64a16b92ff89ff43fdaa0
msgid "API Reference"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:25
# b654c8e941294a9dbb0ad4f181a9ab97
msgid "``Feed`` Subclass"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:29
# 7a9b4a258d4e48868eb5aeae91e33b3b
msgid "In addition to methods provided by the :class:`django.contrib.syndication.feeds.Feed` base class, GeoDjango's ``Feed`` class provides the following overrides.  Note that these overrides may be done in multiple ways::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:58
# 6b59c930bbd945308c94d6e022898414
msgid "Takes the object returned by ``get_object()`` and returns the *feed's* geometry.  Typically this is a ``GEOSGeometry`` instance, or can be a tuple to represent a point or a box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:70
# 98f10d51bc804b5d82368091c202cb29
msgid "Set this to return the geometry for each *item* in the feed.  This can be a ``GEOSGeometry`` instance, or a tuple that represents a point coordinate or bounding box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:81
# 2154edceca64432a926b809398e690a6
msgid "``SyndicationFeed`` Subclasses"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:83
# a030cfd83f374f9cb312c477d4c46dad
msgid "The following :class:`django.utils.feedgenerator.SyndicationFeed` subclasses are available:"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:94
# 9adb2dd6528d448b8f1a87ae28d17886
msgid "`W3C Geo`_ formatted feeds only support :class:`~django.contrib.gis.db.models.PointField` geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:5
# 884cde3b320f4cac9b772cfc6fd444a3
msgid "GDAL API"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:10
# d20cd00151f74c128e77814624e815c5
msgid "`GDAL`__ stands for **G**\\ eospatial **D**\\ ata **A**\\ bstraction **L**\\ ibrary, and is a veritable \"swiss army knife\" of GIS data functionality.  A subset of GDAL is the `OGR`__ Simple Features Library, which specializes in reading and writing vector geographic data in a variety of standard formats."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:16
# 59095ba6f25240ba95ada8b8cf2d23b1
msgid "GeoDjango provides a high-level Python interface for some of the capabilities of OGR, including the reading and coordinate transformation of vector spatial data."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:22
# a92da1f466d649f08cba1f8ad96d6c08
msgid "Although the module is named ``gdal``, GeoDjango only supports some of the capabilities of OGR.  Thus, none of GDAL's features with respect to raster (image) data are supported at this time."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:33
# f67a3d84aa9f4219bac266d95a5d1d81
msgid "Sample Data"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:35
# 85ee395ff4234e72bf5aef8ac5584102
msgid "The GDAL/OGR tools described here are designed to help you read in your geospatial data, in order for most of them to be useful you have to have some data to work with.  If you're starting out and don't yet have any data of your own to use, GeoDjango comes with a number of simple data sets that you can use for testing.  This snippet will determine where these sample files are installed on your computer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:48
# de4386114b4048e093581d28b1ff972b
msgid "Vector Data Source Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:51
# 61dbe164e5ad41a5bd18ffb493a548cf
msgid "``DataSource``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:53
# 957cb8a08f8648f8b72214475f9d39f3
msgid ":class:`DataSource` is a wrapper for the OGR data source object that supports reading data from a variety of OGR-supported geospatial file formats and data sources using a simple, consistent interface.  Each data source is represented by a :class:`DataSource` object which contains one or more layers of data.  Each layer, represented by a :class:`Layer` object, contains some number of geographic features (:class:`Feature`), information about the type of features contained in that layer (e.g. points, polygons, etc.), as well as the names and types of any additional fields (:class:`Field`) of data that may be associated with each feature in that layer."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:66
# d9778978c645429791923df86a49eb15
msgid "The constructor for ``DataSource`` just a single parameter: the path of the file you want to read.  However, OGR also supports a variety of more complex data sources, including databases, that may be accessed by passing a special name string instead of a path.  For more information, see the `OGR Vector Formats`__ documentation.  The :attr:`name` property of a ``DataSource`` instance gives the OGR name of the underlying data source that it is using."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:75
# f3e9c697f89047be951fd81802fb63e2
msgid "Once you've created your ``DataSource``, you can find out how many layers of data it contains by accessing the :attr:`layer_count` property, or (equivalently) by using the ``len()`` function.  For information on accessing the layers of data themselves, see the next section::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:89
# 8e160b9edf144d6b9a1ae73627368db7
msgid "Returns the number of layers in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:93
# eef48f41f7ce46c2a1ae045b3c4f2f35
msgid "Returns the name of the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:98
# b6950418649f4644920da4bbaec6c1c1
msgid "``Layer``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:102
# 11b20bfba8c84b52b49d91ec6165df3b
msgid "``Layer`` is a wrapper for a layer of data in a ``DataSource`` object. You never create a ``Layer`` object directly.  Instead, you retrieve them from a :class:`DataSource` object, which is essentially a standard Python container of ``Layer`` objects.  For example, you can access a specific layer by its index (e.g. ``ds[0]`` to access the first layer), or you can iterate over all the layers in the container in a ``for`` loop.  The ``Layer`` itself acts as a container for geometric features."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:111
# 966ff6dc3487463eb3ea85230b39f692
msgid "Typically, all the features in a given layer have the same geometry type. The :attr:`geom_type` property of a layer is an :class:`OGRGeomType` that identifies the feature type.  We can use it to print out some basic information about each layer in a :class:`DataSource`::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:121
# b9bb9573df274f71af7178b5c73e46bd
msgid "The example output is from the cities data source, loaded above, which evidently contains one layer, called ``\"cities\"``, which contains three point features.  For simplicity, the examples below assume that you've stored that layer in the variable ``layer``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:130
# 46def13134194d0cb4b253c1502cd098
msgid "Returns the name of this layer in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:137
# e3009e4a7da64739b5e07a2c81e7f543
msgid "Returns the number of features in the layer.  Same as ``len(layer)``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:144
# 4b3468beda234c218dbc55be101f634e
msgid "Returns the geometry type of the layer, as an :class:`OGRGeomType` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:152
# 2b5a33b5ef4641ca90b21039d7c532d9
msgid "Returns the number of fields in the layer, i.e the number of fields of data associated with each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:160
# e471d26c3f29450887d9cf825de823a7
msgid "Returns a list of the names of each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:167
# 93357d08f23143b292bcc3f73484a07e
msgid "Returns a list of the data types of each of the fields in this layer. These are subclasses of ``Field``, discussed below::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:175
# 0cc2b2467c994fc0a4a589d6ead83dc4
msgid "Returns a list of the maximum field widths for each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:183
# 4828bacf523d425897dd88ac8eb7edcd
msgid "Returns a list of the numeric precisions for each of the fields in this layer.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:192
# 949b9bb89ccc4a0b844af89163aa8c1b
msgid "Returns the spatial extent of this layer, as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:200
# 2abeabe9e0284c5e8ac20a9be93bea28
msgid "Property that returns the :class:`SpatialReference` associated with this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:210
# eef7f7bb615c498885655146842033b7
msgid "If the :class:`Layer` has no spatial reference information associated with it, ``None`` is returned."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:217
# d28b37f2f4664c0abc5e09eb655b4fe0
msgid "Property that may be used to retrieve or set a spatial filter for this layer.  A spatial filter can only be set with an :class:`OGRGeometry` instance, a 4-tuple extent, or ``None``.  When set with something other than ``None``, only features that intersect the filter will be returned when iterating over the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:241
# b697fab19df7419c9503e023628b334e
msgid "A method that returns a list of the values of a given field for each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:249
# c2e22b26df354bd5a9979039489f6a23
msgid "A method that returns a list containing the geometry of each feature in the layer.  If the optional argument ``geos`` is set to ``True`` then the geometries are converted to :class:`~django.contrib.gis.geos.GEOSGeometry` objects. Otherwise, they are returned as :class:`OGRGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:259
# ce4d8b369b6b44f7b171f0873ab9b9c9
msgid "Returns a boolean indicating whether this layer supports the given capability (a string).  Examples of valid capability strings include: ``'RandomRead'``, ``'SequentialWrite'``, ``'RandomWrite'``, ``'FastSpatialFilter'``, ``'FastFeatureCount'``, ``'FastGetExtent'``, ``'CreateField'``, ``'Transactions'``, ``'DeleteFeature'``, and ``'FastSetNextByIndex'``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:267
# bb5a5ff92a8e48268e479e79670729cd
msgid "``Feature``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:272
# 2629b26de70d46f6a4b3b7fd755d784d
msgid "``Feature`` wraps an OGR feature.  You never create a ``Feature`` object directly.  Instead, you retrieve them from a :class:`Layer` object. Each feature consists of a geometry and a set of fields containing additional properties.  The geometry of a field is accessible via its ``geom`` property, which returns an :class:`OGRGeometry` object.  A ``Feature`` behaves like a standard Python container for its fields, which it returns as :class:`Field` objects: you can access a field directly by its index or name, or you can iterate over a feature's fields, e.g. in a ``for`` loop."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:283
# 5f4f823a2838427babe498a941475a85
msgid "Returns the geometry for this feature, as an ``OGRGeometry`` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:290
# acfcafa507dd486fa97cd9a698b87b91
msgid "A method that returns the value of the given field (specified by name) for this feature, **not** a ``Field`` wrapper object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:298
# f1f04e55efce4514a761f4ec4afe3c45
msgid "Returns the type of geometry for this feature, as an :class:`OGRGeomType` object.  This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.geom_type` property of the :class:`Layer`` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:305
# 24ff5368feae44de94f7f19919d96b1d
msgid "Returns the number of fields of data associated with the feature. This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.num_fields` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:312
# c4ec226e801c484a8138f284b830824c
msgid "Returns a list of the names of the fields of data associated with the feature.  This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.fields` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:319
# aaacdb9192ed4f96bb8643f45ecd26d5
msgid "Returns the feature identifier within the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:326
# d8bdfa7a9de64bda8bb7f863e1c04ad7
msgid "Returns the name of the :class:`Layer` that the feature came from. This will be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:334
# 21854c801b464c6c803786e7a2972fbd
msgid "A method that returns the index of the given field name.  This will be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:341
# 377c90942ba14bdfbcbd29b555b3a5d9
msgid "``Field``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:347
# b860f5043f934a7ca482a9851c01b4d2
msgid "Returns the name of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:354
# c7e60f486b1440a68689b256cf8cf02c
msgid "Returns the OGR type of this field, as an integer.  The ``FIELD_CLASSES`` dictionary maps these values onto subclasses of ``Field``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:363
# 0ed8834c11ac48eb905f2da34dbd65db
msgid "Returns a string with the name of the data type of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:370
# ebfa5c581eb240abbce3072329fd58ae
msgid "Returns the value of this field.  The ``Field`` class itself returns the value as a string, but each subclass returns the value in the most appropriate form::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:379
# d8371022a02b4c62b6f386a1b0bb495b
msgid "Returns the width of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:386
# a7ee3078e6e44b699a926fa852621ee9
msgid "Returns the numeric precision of this field.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:394
# 580dac9a0dc6471bbc373cc4e0d14885
msgid "Returns the value of the field as a double (float)::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:401
# d64f5c081e1545e8a43db6b35af46d26
msgid "Returns the value of the field as an integer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:408
# d9eb9e59170e43649040036067d10eb1
msgid "Returns the value of the field as a string::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:415
# 0faa833731484e9a8f56ad744cdb8255
msgid "Returns the value of the field as a tuple of date and time components::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:421
# 3e14bc0309ba42b8b023d5565ee1bfde
msgid "``Driver``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:425
# 6c979ab0906b4c1fba1338e6f4a8c431
msgid "The ``Driver`` class is used internally to wrap an OGR :class:`DataSource` driver."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:429
# ad066e29091a484a8692d05ad9ceb6a2
msgid "Returns the number of OGR vector drivers currently registered."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:433
# 61f4aa1b22e744289455ee945309eceb
msgid "OGR Geometries"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:436
# 87019f9720e74394957363ffbaeb0adb
msgid "``OGRGeometry``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:438
# de1afc266c9d491fa529015348c0f73b
msgid ":class:`OGRGeometry` objects share similar functionality with :class:`~django.contrib.gis.geos.GEOSGeometry` objects, and are thin wrappers around OGR's internal geometry representation.  Thus, they allow for more efficient access to data when using :class:`DataSource`. Unlike its GEOS counterpart, :class:`OGRGeometry` supports spatial reference systems and coordinate transformation::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:450
# 3008d249d49047698b68ae4204431618
msgid "This object is a wrapper for the `OGR Geometry`__ class. These objects are instantiated directly from the given ``geom_input`` parameter, which may be a string containing WKT or HEX, a ``buffer`` containing WKB data, or an :class:`OGRGeomType` object. These objects are also returned from the :class:`Feature.geom` attribute, when reading vector data from :class:`Layer` (which is in turn a part of a :class:`DataSource`)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:462
# 8f7653bd6c0b42bab05e8ac2181e75b9
msgid "Constructs a :class:`Polygon` from the given bounding-box (a 4-tuple)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:466
# 211ba1cb42724e94a63bf5f74b76f401
msgid "Returns the number of points in a :class:`LineString`, the number of rings in a :class:`Polygon`, or the number of geometries in a :class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:472
# 323a31477d274aa783a0b4ab78193781
msgid "Iterates over the points in a :class:`LineString`, the rings in a :class:`Polygon`, or the geometries in a :class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:478
# 7441bdf7d9fc4fe0ad3e142fce676854
msgid "Returns the point at the specified index for a :class:`LineString`, the interior ring at the specified index for a :class:`Polygon`, or the geometry at the specified index in a :class:`GeometryCollection`.  Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:485
# 53bc73d8d2794445aa05c523429eafef
msgid "Returns the number of coordinated dimensions of the geometry, i.e. 0 for points, 1 for lines, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:495
# ccacef8eadc24644852bb93aa5c92e23
msgid "Returns or sets the coordinate dimension of this geometry.  For example, the value would be 2 for two-dimensional geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:500
# f6c70190ae334142b8746f5ddef804cc
msgid "Setting this property is only available in versions 1.2 and above."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:504
# 4afd464f880049bdb1d493616db4723a
msgid "Returns the number of elements in this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:511
# 6ebd4f88239e40409c508b80f19b964e
msgid "Returns the number of points used to describe this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:518
#: ../../ref/contrib/gis/gdal.txt:522
# a48ce4fa3c8a4507936dc75be9bd8051
# a8a5c209380c47beb877f167230e06a5
msgid "Alias for :attr:`point_count`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:526
# 1fd5113184a04fca9d8fe1ce4d37c042
msgid "Returns the type of this geometry, as an :class:`OGRGeomType` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:530
# e7ea69f1852d4a1ba2ad4ee7fd976237
msgid "Returns the name of the type of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:537
# 8f3c70405c1d41f7add668b939c72f62
msgid "Returns the area of this geometry, or 0 for geometries that do not contain an area::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:545
# 9458053f13fc481bbb186225c0b8fa4f
msgid "Returns the envelope of this geometry, as an :class:`Envelope` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:549
# e43006c2cbe341e7ba98c7e64c2fa78a
msgid "Returns the envelope of this geometry as a 4-tuple, instead of as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:557
# 53550d6971724510b696ac95a9a2f900
msgid "This property controls the spatial reference for this geometry, or ``None`` if no spatial reference system has been assigned to it. If assigned, accessing this property returns a :class:`SpatialReference` object.  It may be set with another :class:`SpatialReference` object, or any input that :class:`SpatialReference` accepts. Example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:568
# 09a515e47fd145d583f9846325444e78
msgid "Returns or sets the spatial reference identifier corresponding to :class:`SpatialReference` of this geometry.  Returns ``None`` if there is no spatial reference information associated with this geometry, or if an SRID cannot be determined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:575
# 47101e2e5d85422487c0e9d989496974
msgid "Returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object corresponding to this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:580
# 88e1018c1e7f4513b4ea578f9d28ee23
msgid "Returns a string representation of this geometry in GML format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:587
# c2847f4762f64ad997810101d14a1410
msgid "Returns a string representation of this geometry in HEX WKB format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:594
# 126f481131df47549213de048f6d8bb1
msgid "Returns a string representation of this geometry in JSON format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:602
# 30be1aa6f4ff4794a1ba806112e352cc
msgid "Returns a string representation of this geometry in KML format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:606
# 93b6be6ee1804333a8e57e79665732ae
msgid "Returns the size of the WKB buffer needed to hold a WKB representation of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:614
# f615635ccc2d45bd92d665b01f63c5ef
msgid "Returns a ``buffer`` containing a WKB representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:618
# ae69646c328748ddab0a6f12df053a2a
msgid "Returns a string representation of this geometry in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:624
# d21d486b3992490e8ae52c635a401aea
msgid "Returns the EWKT representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:628
# 90826411edc948f7abbd7320c11b74e2
msgid "Returns a new :class:`OGRGeometry` clone of this geometry object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:632
# 6a0b114c0e9b43118a24f2de4ba1340e
msgid "If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:642
# 57fb1659f35e4719ad4ba4093d5e27cd
msgid "Transforms this geometry to a different spatial reference system.  May take a :class:`CoordTransform` object, a :class:`SpatialReference` object, or any other input accepted by :class:`SpatialReference` (including spatial reference WKT and PROJ.4 strings, or an integer SRID). By default nothing is returned and the geometry is transformed in-place. However, if the `clone` keyword is set to ``True`` then a transformed clone of this geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:652
# 5464bde0ce9444e18f107862f8d5774b
msgid "Returns ``True`` if this geometry intersects the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:657
# 4fd251d9710848a5adf4a6fd2442d066
msgid "Returns ``True`` if this geometry is equivalent to the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:662
# 598a8448bd1845bea155dfdbae8e675b
msgid "Returns ``True`` if this geometry is spatially disjoint to (i.e. does not intersect) the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:667
# 0bd8c1067b93444182c8021aea515a8b
msgid "Returns ``True`` if this geometry touches the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:672
# 3650e64f10084bbf81f52610f08ccd7b
msgid "Returns ``True`` if this geometry crosses the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:677
# 98e67237b3954a0b847b4ce546a4a6b0
msgid "Returns ``True`` if this geometry is contained within the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:682
# 0a1130ad683d4d9fbb21c677c6aa9e3e
msgid "Returns ``True`` if this geometry contains the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:687
# 54cb155727c34ef0b09c5bac49d28523
msgid "Returns ``True`` if this geometry overlaps the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:692
# bd99ad83d8d643ff94cd04d8b82ff826
msgid "The boundary of this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:696
# fb6f57e1d2ea46d2866f6e58396d11f2
msgid "The smallest convex polygon that contains this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:701
# e87e16e000c34c33a5db946662dd0f0a
msgid "Returns the region consisting of the difference of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:706
# 3a5e6efb30784c63882236201595d2d6
msgid "Returns the region consisting of the intersection of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:711
# 2b563fb53a9e4dd0a5de717a624a214f
msgid "Returns the region consisting of the symmetric difference of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:716
# 263ba5f460524f6dbae8b50e3aea7e57
msgid "Returns the region consisting of the union of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:721
# e8e2ec9a6e1242b8bd4fccf1c351d3bb
msgid "Returns the coordinates of a point geometry as a tuple, the coordinates of a line geometry as a tuple of tuples, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:731
# f0b3bce0e5f24f1e9baafee53a73ade8
msgid "An alias for :attr:`tuple`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:737
# 77f350a5cd844130b3b9f011e6016787
msgid "Returns the X coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:744
# 1dcd936385474967bdb39061a269a2f3
msgid "Returns the Y coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:751
# b72b8b0a1491444a9b72db8f9a18d998
msgid "Returns the Z coordinate of this point, or ``None`` if the the point does not have a Z coordinate::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:761
# ed704435d6cb4e2aa862d6429b98db2d
msgid "Returns a list of X coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:768
# b21ce18daf9c456096e0bd5950cf6dd4
msgid "Returns a list of Y coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:775
# a5f115c1488548b995f2373f7eaffc07
msgid "Returns a list of Z coordinates in this line, or ``None`` if the line does not have Z coordinates::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:786
# 61e3b104cc6f4b01a1c75165cef6ffbf
msgid "Returns the shell or exterior ring of this polygon, as a ``LinearRing`` geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:791
# 4ee46b0e768c4eae86167a14c3504f4e
msgid "An alias for :attr:`shell`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:795
# 9f4bcaa917034374a2116fb2dc1f099a
msgid "Returns a :class:`Point` representing the centroid of this polygon."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:801
# 532dab6e7d004698b5774ef3cbdaa495
msgid "Adds a geometry to this geometry collection.  Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:806
# 58f4eafc5e8b458783189f71521b9a60
msgid "``OGRGeomType``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:810
# b588c39967724eb7877a1d845444ddf2
msgid "This class allows for the representation of an OGR geometry type in any of several ways::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:822
# 9e39ade0a37d4840babeae28dc3dbc05
msgid "Returns a short-hand string form of the OGR Geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:829
# 0efc458feb8546c09c89289545c526ca
msgid "Returns the number corresponding to the OGR geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:836
# bde13359d0fa4ab19fdfb67e404c0bef
msgid "Returns the Django field type (a subclass of GeometryField) to use for storing this OGR type, or ``None`` if there is no appropriate Django type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:844
# 35d7d2b67a52429ba3e3e577d27c3357
msgid "``Envelope``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:848
# 805712ccb3bf46c6996833c8e0f6234f
msgid "Represents an OGR Envelope structure that contains the minimum and maximum X, Y coordinates for a rectangle bounding box. The naming of the variables is compatible with the OGR Envelope C structure."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:855
# 0e1e6886780849c59b889bd767b946fb
msgid "The value of the minimum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:859
# 53a40b83cceb42f7895998fe19929397
msgid "The value of the maximum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:863
# 69bbed53bf484ba98b15668764883c41
msgid "The value of the minimum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:867
# 9aa2e3b2835d46babb9a220053b23c86
msgid "The value of the maximum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:871
# 5f8fccd7ef0e42b086e34784fb62060c
msgid "The upper-right coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:875
# e58b61fca0364ca98707aa3815beb170
msgid "The lower-left coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:879
# a4592659100a4de7af2cc9aecfdb32f6
msgid "A tuple representing the envelope."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:883
# 61cb8f2d4c414b1e8b7514c978bad95a
msgid "A string representing this envelope as a polygon in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:889
# 6af1f0a28a724ac4afef73f891b69d74
msgid "Coordinate System Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:892
# 924d8a62f05742d6b59e22d78d486bdc
msgid "``SpatialReference``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:896
# 90d2f6846375453e84e6b39e1a34c3af
msgid "Spatial reference objects are initialized on the given ``srs_input``, which may be one of the following:"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:899
# afd6c04fcea44b678121530c492cfa49
msgid "OGC Well Known Text (WKT) (a string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:900
# 819f46d597334ef392463af2d52f917c
msgid "EPSG code (integer or string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:901
# 426db69490bd4e1d9e03d3ecb487c2f9
msgid "PROJ.4 string"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:902
# 79268582349a4acbaba23a557832d00c
msgid "A shorthand string for well-known standards (``'WGS84'``, ``'WGS72'``, ``'NAD27'``, ``'NAD83'``)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:924
# 6419504ab55f4832a492b7cf3d9ca8e2
msgid "Returns the value of the given string attribute node, ``None`` if the node doesn't exist.  Can also take a tuple as a parameter, (target, child), where child is the index of the attribute in the WKT.  For example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:947
# 4b5873f5a8384886af57dfcf78f5b186
msgid "The attribute value for the given target node (e.g. ``'PROJCS'``). The index keyword specifies an index of the child node to return."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:952
# 8e6cb140e6004980bd2044103019ea06
msgid "Returns the authority name for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:956
# e0fe574a50c3440485e2131a172152e2
msgid "Returns the authority code for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:960
# d7b20abebb0c4ecb8c71d09f1a16d04e
msgid "Returns a clone of this spatial reference object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:964
# 9c9d9e94492e4ef5a6fc98b42835eaa4
msgid "This method inspects the WKT of this SpatialReference, and will add EPSG authority nodes where an EPSG identifier is applicable."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:969
# cc25cbd64b984900ba46bf028178ad6b
msgid "Morphs this SpatialReference from ESRI's format to EPSG"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:973
# 821676bbd072476ca6a558f6ee5d7eb0
msgid "Morphs this SpatialReference to ESRI's format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:977
# 1275878a08be4954a1274a538cb33a20
msgid "Checks to see if the given spatial reference is valid, if not an exception will be raised."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:982
# ae9c580549254b26811f05e0cb39f5cf
msgid "Import spatial reference from EPSG code."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:986
# 91c286aa3a6b46469f925b34106e3eeb
msgid "Import spatial reference from PROJ.4 string."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:992
# ac1361e1202749759a6d6f04e406fead
msgid "Import spatial reference from WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:996
# 9391ae7b6a774dc6b8f3e7fcac59fb15
msgid "Import spatial reference from XML."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1000
# 9e2de310bbd94d4dbc5b4274db5ec3c7
msgid "Returns the name of this Spatial Reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1004
# e67102cce6a1410882f70a8b7afc0927
msgid "Returns the SRID of top-level authority, or ``None`` if undefined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1008
# 41dc127db7624dd6a7555246906d7e9f
msgid "Returns the name of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1012
# dbbc67bbc4d84b21a2b4cd6bff4502d4
msgid "Returns the value of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1016
# 33fdaeed7de04f52b2c9a8df01236940
msgid "Returns the name of the angular units.\""
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1020
# 1d680f0321414f239c380c2bf8ad34b9
msgid "Returns the value of the angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1024
# 27487074d1ed44c5b3d47214ca71cec2
msgid "Returns a 2-tuple of the units value and the units name, and will automatically determines whether to return the linear or angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1030
# e286e264706242dbae62d209598cfa0b
msgid "Returns a tuple of the ellipsoid parameters for this spatial reference: (semimajor axis, semiminor axis, and inverse flattening)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1035
# e17503f72166477f86df231b0ca1c7c4
msgid "Returns the semi major axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1039
# b175c734f98c499c826f734b51bf7f3b
msgid "Returns the semi minor axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1043
# 3fc41c87ceec4cbcbe60e49b898f2140
msgid "Returns the inverse flattening of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1047
# 70828412ff5c442ba87c3384cbeeae0c
msgid "Returns ``True`` if this spatial reference is geographic (root node is ``GEOGCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1052
# e73709b14ee6471db85e422ad5013eee
msgid "Returns ``True`` if this spatial reference is local (root node is ``LOCAL_CS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1057
# bc20de97521b463d8db6f7fda78384c8
msgid "Returns ``True`` if this spatial reference is a projected coordinate system (root node is ``PROJCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1062
# 85eac9dfb4a34724bd5c285fabeb93ee
msgid "Returns the WKT representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1066
# 1c239ade596f4f698329b6238c6def02
msgid "Returns the 'pretty' representation of the WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1070
# 6706ed2c893d4448b086dd90ce01b111
msgid "Returns the PROJ.4 representation for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1074
# 7ee0bddfc74044d1aabdc5e01bc9beb8
msgid "Alias for :attr:`SpatialReference.proj`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1078
# b1043fea95f74464aa0748f37e57fb5f
msgid "Returns the XML representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1082
# a6f8b013d6064f23b99f33cbe7ce1984
msgid "``CoordTransform``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1086
# 40386356cdbf4c4892c457c356d165d3
msgid "Represents a coordinate system transform.  It is initialized with two :class:`SpatialReference`, representing the source and target coordinate systems, respectively.  These objects should be used when performing the same coordinate transformation repeatedly on different geometries::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1102
# d91be4ef937f4c4ea8156d07131ae333
msgid "GDAL_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1104
# f99a4d8bd6df4ebebf068315ff0576dc
msgid "A string specifying the location of the GDAL library.  Typically, this setting is only used if the GDAL library is in a non-standard location (e.g., ``/home/john/lib/libgdal.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:5
# bd53480307644de49886c5cd58710f2e
msgid "Geolocation with GeoIP"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:14
# 9181c9d6346d4a1ea84424dd2041de7d
msgid "In Django 1.4, the :class:`GeoIP` object was moved out of :mod:`django.contrib.gis.utils` and into its own module, :mod:`django.contrib.gis.geoip`. A shortcut is still provided in ``utils``, but will be removed in Django 1.6."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:19
# a88d38189dc6487fa98235be29589199
msgid "The :class:`GeoIP` object is a ctypes wrapper for the `MaxMind GeoIP C API`__. [#]_  This interface is a BSD-licensed alternative to the GPL-licensed `Python GeoIP`__ interface provided by MaxMind."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:23
# d61f548e1a7943b68e9d63c20668fed0
msgid "In order to perform IP-based geolocation, the :class:`GeoIP` object requires the GeoIP C libary and either the GeoIP `Country`__ or `City`__ datasets in binary format (the CSV files will not work!).  These datasets may be `downloaded from MaxMind`__.  Grab the ``GeoIP.dat.gz`` and ``GeoLiteCity.dat.gz`` and unzip them in a directory corresponding to what you set :setting:`GEOIP_PATH` with in your settings.  See the example and reference below for more details."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:40
# 7cc3c9dbe90649a597bb7d208297e052
msgid "Assuming you have the GeoIP C library installed, here is an example of its usage::"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:66
# 6b8403cd8bb64f088c0c79852c9dc673
msgid "``GeoIP`` Settings"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:71
# aac459dc7de543ae8ac04c08c62a32d2
msgid "GEOIP_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:73
# 9e995d166ca04d0f9b341e3e055fdbce
msgid "A string specifying the directory where the GeoIP data files are located.  This setting is *required* unless manually specified with ``path`` keyword when initializing the :class:`GeoIP` object."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:80
# ee728ed6389a43bd8898424087d85882
msgid "GEOIP_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:82
# 4c11940c472f4965a5fb379dee1cb362
msgid "A string specifying the location of the GeoIP C library.  Typically, this setting is only used if the GeoIP C library is in a non-standard location (e.g., ``/home/sue/lib/libGeoIP.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:89
# ad701a7623c0468abe7746de871adc55
msgid "GEOIP_COUNTRY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:91
# a418a65b7fdd4ee5bb3ce2c1b816096e
msgid "The basename to use for the GeoIP country data file. Defaults to ``'GeoIP.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:97
# 325a407d6d8c4639ba60bde8020f4603
msgid "GEOIP_CITY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:99
# 407e5c5f9593480ead719e52614e276e
msgid "The basename to use for the GeoIP city data file. Defaults to ``'GeoLiteCity.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:103
# 54d2b7eed1aa4b1aa33224c0de3d8e48
msgid "``GeoIP`` API"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:107
# f120a726cc1b40d082c356ffe6932192
msgid "The ``GeoIP`` object does not require any parameters to use the default settings.  However, at the very least the :setting:`GEOIP_PATH` setting should be set with the path of the location of your GeoIP data sets.  The following intialization keywords may be used to customize any of the defaults."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:114
#: ../../ref/contrib/gis/layermapping.txt:112
# 5f616ca12e7f479bb69bba917b894632
# ae693d3d0dc44a69be5de47d51f9fee3
msgid "Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:114
#: ../../ref/contrib/gis/geoquerysets.txt:661
#: ../../ref/contrib/gis/geoquerysets.txt:843
#: ../../ref/contrib/gis/geoquerysets.txt:964
#: ../../ref/contrib/gis/geoquerysets.txt:997
#: ../../ref/contrib/gis/geoquerysets.txt:1030
#: ../../ref/contrib/gis/geoquerysets.txt:1050
#: ../../ref/contrib/gis/geoquerysets.txt:1190
#: ../../ref/contrib/gis/geos.txt:829
#: ../../ref/contrib/gis/geos.txt:852
#: ../../ref/contrib/gis/install.txt:80
#: ../../ref/contrib/gis/layermapping.txt:95
#: ../../ref/contrib/gis/layermapping.txt:157
#: ../../ref/contrib/webdesign.txt:40
#: ../../ref/models/fields.txt:514
#: ../../ref/templates/builtins.txt:316
#: ../../ref/templates/builtins.txt:1285
# 45b769c5c82646158970d6ad76e4b81a
# 09ebb7c6f1084cb79235446857d45b01
# ffd15e5ff47d4ebca559c5a81a0e65a5
# cb785bf572a441278ea447eae526d6b4
# 96921b2e84c5453bb472d2f54d373899
# 7b2da0391fdd45909f5600566e56a0d8
# 7d2e4dfd74554d59b8b20b8b47f43ed8
# 12bd8b7b753c4cf3b4f3c93eb7a459ea
# a36beea3f24b480d8880176817274dca
# 3c47d82b370d446a806dca7e0b9fe3e1
# 43d2867209634c7c9a4de3a5326c66d5
# 0d2ed75c2f124a7b8334957e722da48e
# 36fa686b1d854f66994a8074e48e5ef4
# 6bda4b7da4354742a854e7718d87ad0f
# 7d2333eb11094c699969f88ed56c26e5
# 697b7b0a85cc430da5d5625fc6350c68
# cd3b3ff93eb44ced970ce0372c16c23b
msgid "Description"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
# eda8f0d9ae374f9aa5ee77a38c1aa692
msgid "``path``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
# a58c668b67c24da99e55cfdd25148ff8
msgid "Base directory to where GeoIP data is located or the full path to where the city or country data files (.dat) are located.  Assumes that both the city and country data sets are located in this directory; overrides the :setting:`GEOIP_PATH` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:122
# 25deada7c5b14909bcac08bb91568b37
msgid "``cache``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:122
# 81419ec1cea948a1a92a893e8107732e
msgid "The cache settings when opening up the GeoIP datasets, and may be an integer in (0, 1, 2, 4) corresponding to the ``GEOIP_STANDARD``, ``GEOIP_MEMORY_CACHE``, ``GEOIP_CHECK_CACHE``, and ``GEOIP_INDEX_CACHE`` ``GeoIPOptions`` C API settings, respectively. Defaults to 0 (``GEOIP_STANDARD``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
# ff8ca4f7f273411c811d295ae2ef0723
msgid "``country``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
# 7419c304a5724c1c97fc2e57e758c370
msgid "The name of the GeoIP country data file.  Defaults to ``GeoIP.dat``.  Setting this keyword overrides the :setting:`GEOIP_COUNTRY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:133
# a4b2031b0251441fa6374de5adc36dae
msgid "``city``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:133
# f2a15ec6c2f545789e7817a24a101e7d
msgid "The name of the GeoIP city data file.  Defaults to ``GeoLiteCity.dat``.  Setting this keyword overrides the :setting:`GEOIP_CITY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:139
# a2f66eb35b9e4b17b67838bb9bac3309
msgid "``GeoIP`` Methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:142
# 37081a52f1fb4157bf2534e4c569f22d
msgid "Querying"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:144
# d6c55e9dbfd54c1ba21008f440a35991
msgid "All the following querying routines may take either a string IP address or a fully qualified domain name (FQDN).  For example, both ``'205.186.163.125'`` and ``'djangoproject.com'`` would be valid query parameters."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:151
# 871029e031c74c209cf9536a4262df04
msgid "Returns a dictionary of city information for the given query.  Some of the values in the dictionary may be undefined (``None``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:156
# 7a7e5717520e4bb48e98d3b84b42aa05
msgid "Returns a dictionary with the country code and country for the given query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:161
# d705e544c40843698a44148100d97f9e
msgid "Returns only the country code corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:165
# c3893cd296bc4d26b455d5980da033e9
msgid "Returns only the country name corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:168
# 224a2681c8e44c35bba79e0034ed45b1
msgid "Coordinate Retrieval"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:172
#: ../../ref/contrib/gis/geoip.txt:176
# d8adbe0023ee4f61955dbd81b6cfa2c8
# 4d43f6f849ad4ef5b3c78c0e10971d56
msgid "Returns a coordinate tuple of (longitude, latitude)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:180
# d5f898485728448593248f34ac5873e5
msgid "Returns a coordinate tuple of (latitude, longitude),"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:184
# 5a4575cee9d04a9bbaabbb91176bfabb
msgid "Returns a :class:`django.contrib.gis.geos.Point` object corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:187
# 65b5234a4bbc47cd930a252fa43e7ebd
msgid "Database Information"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:191
# 245614f42008461a88b64f53e17b9ecf
msgid "This property returns information about the GeoIP country database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:195
# 10c369d29d384ca8a7ad844c3b441ba2
msgid "This property returns information about the GeoIP city database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:199
# 87e0c684d8d84292a6322f0ac1cc0bfc
msgid "This property returns information about all GeoIP databases (both city and country), and the version of the GeoIP C library (if supported)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:203
# 9a29cf2f7122465ea8b2f6e001931f1a
msgid "GeoIP-Python API compatibility methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:205
# fc2a8c51e8174f2ea24c33a491b66a9e
msgid "These methods exist to ease compatibility with any code using MaxMind's existing Python API."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:210
# 3cc66e7ad99e40c889c8f0bbf4218900
msgid "This classmethod instantiates the GeoIP object from the given database path and given cache setting."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:230
# 458bd6bafde245538128973c2d8a070e
msgid "GeoIP(R) is a registered trademark of MaxMind, LLC of Boston, Massachusetts."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:5
# 831d37c9d0be47f9b95e089c54cad6d7
msgid "GeoQuerySet API Reference"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:17
# 3c9d65c17cac49acb7b0989429edf7e0
msgid "Just like when using the :ref:`queryset-api`, interaction with ``GeoQuerySet`` by :ref:`chaining filters <chaining-filters>`. Instead of the regular Django :ref:`field-lookups`, the spatial lookups in this section are available for :class:`GeometryField`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:22
# 73c21da7ff114dc38cd1e9fc7ce49ac7
msgid "For an introduction, see the :ref:`spatial lookups introduction <spatial-lookups-intro>`.  For an overview of what lookups are compatible with a particular spatial backend, refer to the :ref:`spatial lookup compatibility table <spatial-lookup-compatibility>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:30
# 9fd60aed825b4323ac2b42af1a38b314
msgid "bbcontains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:32
#: ../../ref/contrib/gis/geoquerysets.txt:54
#: ../../ref/contrib/gis/geoquerysets.txt:76
# 7436ba07fa304accafe9a2c72353d4e9
# 4144a192bdc542b1b16ca2c38436b3fc
# 555d39dbe64d4401a66f33fb2e00e1b4
msgid "*Availability*: PostGIS, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:34
# 4155c40558ec4ab9904445f9329d434d
msgid "Tests if the geometry field's bounding box completely contains the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:136
#: ../../ref/contrib/gis/geoquerysets.txt:156
#: ../../ref/contrib/gis/geoquerysets.txt:177
#: ../../ref/contrib/gis/geoquerysets.txt:197
#: ../../ref/contrib/gis/geoquerysets.txt:217
#: ../../ref/contrib/gis/geoquerysets.txt:252
#: ../../ref/contrib/gis/geoquerysets.txt:333
#: ../../ref/contrib/gis/geoquerysets.txt:355
#: ../../ref/contrib/gis/geoquerysets.txt:546
#: ../../ref/contrib/gis/geoquerysets.txt:566
#: ../../ref/contrib/gis/geoquerysets.txt:586
#: ../../ref/contrib/gis/geoquerysets.txt:606
#: ../../ref/contrib/gis/geoquerysets.txt:626
# 7e593050664d4ed0b33873db9a6f77ce
# e1d898d3a0054e82ae643674defcba30
# 562ea45791c14b63959d877ead12ed9d
# 85a1a1a84a374e0c85332a7863ac2fe7
# 925acd8ba4504961ae7183632e43c7e9
# bf961c530c354e4f8b54656828e66c4c
# f30141ea54f84ca09d5d2345bcb97764
# 22fee029394e4c70af1992bbbe1cd047
# 8e7b67d9bade4f1ea105c6f8c5e7ad13
# a9b3e875b337412bb617ffeb06fdd22d
# 13c6947e29044729a650928da32777be
# 6bdeefbee95d44739f475596fe6d590b
# 297aa0f9e005431ca77ffaeff255bf13
# 9c9c979b362d477283301aa884f1f556
# 148030c661bb43fb9a50035fcc50dfff
# f49cf2522ecb49d7b0960c683cfe4594
# 93c9b80c08384f429c8f9f94532e75a5
msgid "Backend"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:136
#: ../../ref/contrib/gis/geoquerysets.txt:156
#: ../../ref/contrib/gis/geoquerysets.txt:177
#: ../../ref/contrib/gis/geoquerysets.txt:197
#: ../../ref/contrib/gis/geoquerysets.txt:217
#: ../../ref/contrib/gis/geoquerysets.txt:252
#: ../../ref/contrib/gis/geoquerysets.txt:333
#: ../../ref/contrib/gis/geoquerysets.txt:355
#: ../../ref/contrib/gis/geoquerysets.txt:546
#: ../../ref/contrib/gis/geoquerysets.txt:566
#: ../../ref/contrib/gis/geoquerysets.txt:586
#: ../../ref/contrib/gis/geoquerysets.txt:606
#: ../../ref/contrib/gis/geoquerysets.txt:626
# 7a68b624ed1b42e9a6a38e92ec819a42
# b8d1aee52ed04164a021fb47e440348d
# 19eb00375e004fc497783a87307af097
# f9344f9860cf4e71833892b5bde577c8
# c44728d245104ec5a7d673e592613bd8
# 620b62d63407496cb0a0cccfd9b94797
# cfdd6dbdbe1f4ee98d3748f9bff2cdfd
# 0ad7235fe1f94918976b66ff6437bc3f
# 973df3ba91a34f319617e3ebcdd55c0e
# 877a9860db124b2eac283fe593351ad5
# a876485bee8046919c6509e3a9e5c97b
# ef6e1036a6b64a4a82c94c66f05b3174
# 60cfca067b35443aab4a687600525fba
# 6b70475ceed64823b13da34146debb1b
# 754f194afa4c4def9a43ed740503cbc1
# 8e7ba0b3076240ecbd1e9ec5f18e7ee7
# e95bce130233439b81dc314ece820c44
msgid "SQL Equivalent"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:44
# a0fb5d1c7a9a4a4faaa878acf9fa2f5d
msgid "``poly ~ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:45
#: ../../ref/contrib/gis/geoquerysets.txt:67
#: ../../ref/contrib/gis/geoquerysets.txt:89
#: ../../ref/contrib/gis/geoquerysets.txt:111
#: ../../ref/contrib/gis/geoquerysets.txt:221
#: ../../ref/contrib/gis/geoquerysets.txt:256
#: ../../ref/contrib/gis/geoquerysets.txt:336
#: ../../ref/contrib/gis/geoquerysets.txt:358
#: ../../ref/contrib/gis/install.txt:67
# 4f54d2655d6243f9b9162e9db3873d28
# a1e14cfdd9ae4b8a93e23630637f2d52
# 2f927a85e49841518a1a47c88210762e
# 1f24fb17828542849a187371748c6dd1
# cb1b7759880b40f5a1481eb4bda1fd72
# b530fdadf5cf4969b74a9e568e32497b
# 2cc0ef031a7b4cf5bb77b1278cb9ba14
# cb7bfa17653d44a2a541bc6e50f9cb17
# 066b0e9dc49342c1875c797be65df725
msgid "MySQL"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:45
#: ../../ref/contrib/gis/geoquerysets.txt:111
# e2d1855ac50e4dfe9d9af5b50b805e44
# 45a93344a42347c6aa63e18b62328650
msgid "``MBRContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:46
# 2059835ff17f48448f9b726ce952d47f
msgid "``MbrContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:52
# e8093fa302e04473b4e646046ffae511
msgid "bboverlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:56
# 52ccd1c6fc2a441b9ca2404550805195
msgid "Tests if the geometry field's bounding box overlaps the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:66
# e90b193abfe644dbaf5026efe404e46a
msgid "``poly && geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:67
# ea02d4244ac846e399ec09e5f155388d
msgid "``MBROverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:68
# 1a52f554b08d414abb4f0cb0200f5029
msgid "``MbrOverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:74
# bc3b4977f86c4e7d80f68fa085c741dd
msgid "contained"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:78
# 67b0e48c69cc48abbb01a47d9497f8a8
msgid "Tests if the geometry field's bounding box is completely contained by the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:88
# 2afbc8bf3cd24a63bcc0d61b1432ea63
msgid "``poly @ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:89
#: ../../ref/contrib/gis/geoquerysets.txt:358
# cd0cf0c67b164df1b45a0e63af808dc4
# 6b58597928b84c339bc151391771d7d7
msgid "``MBRWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:90
# 393d3673e69f4cbf91269770603a4d69
msgid "``MbrWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:96
#: ../../ref/models/querysets.txt:1704
# ca87ebb5009142efb19f1b06c13c022e
# 85eb95a82fec4865a217454b5446ca0f
msgid "contains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:98
#: ../../ref/contrib/gis/geoquerysets.txt:208
#: ../../ref/contrib/gis/geoquerysets.txt:228
#: ../../ref/contrib/gis/geoquerysets.txt:236
#: ../../ref/contrib/gis/geoquerysets.txt:243
#: ../../ref/contrib/gis/geoquerysets.txt:265
#: ../../ref/contrib/gis/geoquerysets.txt:324
#: ../../ref/contrib/gis/geoquerysets.txt:346
# d7a11bf193e941ffbaa957705dd3c554
# 15fadc60e5fc48e3851934e0bd8cc569
# f154d4d4d6034de6b611ff6d907c4e0d
# a0cb5373e29e49a599445c38081eaaf0
# b813c6ba2d1c4d0d8d1942dfa017f068
# 52ba3087b0d0457fbb973441c672cab0
# cd127d49228f4fdfa48b817249902a84
# eaf9af9f26fe4de4a627872c7d7d6407
msgid "*Availability*: PostGIS, Oracle, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:100
# 795455d635b54342a3374f51c76c5a87
msgid "Tests if the geometry field spatially contains the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:109
# af6d152711bc479f99b16fd30b85df50
msgid "``ST_Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:110
# 21a8b4ea5e7144b499d9ef9f9280c1af
msgid "``SDO_CONTAINS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:112
# 411009353694403ca4a1e3be7999b588
msgid "``Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:118
# 3721192794744b3baeab1fc4951c6c56
msgid "contains_properly"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:122
#: ../../ref/contrib/gis/geoquerysets.txt:368
#: ../../ref/contrib/gis/geoquerysets.txt:386
#: ../../ref/contrib/gis/geoquerysets.txt:404
#: ../../ref/contrib/gis/geoquerysets.txt:423
#: ../../ref/contrib/gis/geoquerysets.txt:441
#: ../../ref/contrib/gis/geoquerysets.txt:459
#: ../../ref/contrib/gis/geoquerysets.txt:477
#: ../../ref/contrib/gis/geoquerysets.txt:495
#: ../../ref/contrib/gis/geoquerysets.txt:808
#: ../../ref/contrib/gis/geoquerysets.txt:958
#: ../../ref/contrib/gis/geoquerysets.txt:1071
#: ../../ref/contrib/gis/geoquerysets.txt:1110
#: ../../ref/contrib/gis/geoquerysets.txt:1141
#: ../../ref/contrib/gis/geoquerysets.txt:1157
# de366db51cb04c02a791b94e7a6be18e
# 3042fd16a3a94c6b94d2e6df5e7987bb
# 6ec40556fc1f40f389c927fa4f4b3e3b
# 22284b42fe1a49d994a9ceb03c4b2f71
# 288b082691ab4d0eb2f2cfb850fdafb5
# 869ad55376f9453d98d61eeeed5b5cc9
# f7c933eb0e044726a8efd86077b3f606
# 34c1d93545c74c0a9c2f7af0a69fdea8
# 49d3c84e589e45d1bdfd32247b8a5773
# 3057f6e791a34d0b9a1aed540abecf88
# 96947f7ac93643f89bc92b74edee1d8b
# 93c731053cf346529924712a17a09700
# 12e1c3ee237b4b508d26439368ebe133
# 36dae6b264904a32942aea931beb7a5e
# 373e9c5f039b43fe960a1629468f195e
msgid "*Availability*: PostGIS"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:124
# 72b3d392f24a4820bd573b1c4b3eb7e8
msgid "Returns true if the lookup geometry intersects the interior of the geometry field, but not the boundary (or exterior). [#fncontainsproperly]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:129
# a053a435bc57459c8a1b6565491a68e2
msgid "Requires PostGIS 1.4 and above."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:138
# f40ba6c2473042afb9e30dca84e06287
msgid "``ST_ContainsProperly(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:144
# 5256a7c655e840bd8bd4a0ed77cd205b
msgid "coveredby"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:146
#: ../../ref/contrib/gis/geoquerysets.txt:167
#: ../../ref/contrib/gis/geoquerysets.txt:821
#: ../../ref/contrib/gis/geoquerysets.txt:1123
# b574d411c1d940cfa7a0281506c3facb
# 3d407cffa7974e16b48ce66d884f0515
# deb63e242a824e0c87e81c2794c79ef3
# 842039211ae345b98332ec58d7c58b46
msgid "*Availability*: PostGIS, Oracle"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:148
# b51c1ab5f7db4ae98c2327042b199f01
msgid "Tests if no point in the geometry field is outside the lookup geometry. [#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:158
# feccfd34dc5d404c8fe937204ab62fbf
msgid "``ST_CoveredBy(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:159
# 58cecc7dc97646eea9a069adcf5c0320
msgid "``SDO_COVEREDBY(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:165
# 001211f2fd0649349173e02ee77f0160
msgid "covers"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:169
# f8af33238bda4f7ab5035b83eef31c1b
msgid "Tests if no point in the lookup geometry is outside the geometry field. [#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:179
# e43134962fec4408905c215e0766e4ca
msgid "``ST_Covers(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:180
# ad1bf3ab5574449abbc7ecdf0ed6c22f
msgid "``SDO_COVERS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:186
# 4887a9bf8fc64a69bf1e9c349167eda1
msgid "crosses"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:188
#: ../../ref/contrib/gis/geoquerysets.txt:782
#: ../../ref/contrib/gis/geoquerysets.txt:831
#: ../../ref/contrib/gis/geoquerysets.txt:886
#: ../../ref/contrib/gis/geoquerysets.txt:1016
#: ../../ref/contrib/gis/geoquerysets.txt:1044
# 3762c419fefd49138c8c5a0dbeb1150e
# 3901cb412f42413589496f554995a396
# 9b424b4744ef40da9b9ade785f603bd9
# 9bb9c0abdb8748cfab6723cc0494136b
# ad5ded54532b4392a31d63e4094b9d71
# 66fa979bcbe0498292504a02087dba1d
msgid "*Availability*: PostGIS, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:190
# ce5a98b2081f4f359ccfdcf4e339668b
msgid "Tests if the geometry field spatially crosses the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:199
# 8ae16667de32410c9778ffbbd2ec77b2
msgid "``ST_Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:200
# 8aca94094a4943bc9256b8d5571a12e0
msgid "``Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:206
# 348c1154c0f44f84b23dab22153adc9b
msgid "disjoint"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:210
# 00fb44c16f6c44f99bc4907756c860d5
msgid "Tests if the geometry field is spatially disjoint from the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:219
# 72ad008909a244239749cbe9059407e5
msgid "``ST_Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:220
# cb850c8e19bd47cfb34adb0d2894fa2c
msgid "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:221
# 333f002b01914b52b27373e1a40bae09
msgid "``MBRDisjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:222
# 91964cf6c3d1470cb916d57cadcc0de3
msgid "``Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:226
# 57283c60913f432dab1981345afe8783
msgid "equals"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:234
# 2db4b52d22934aba9116e223c7438aad
msgid "exact, same_as"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:241
# 3f1299324af94b968f40b8ad0b3c5a68
msgid "intersects"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:245
# 11c6a431603744cbafc77fb3afefaad8
msgid "Tests if the geometry field spatially intersects the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:254
# 3c6db4e552f04b44bafea9a72196cb92
msgid "``ST_Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:255
# e4faccde21c74f99889140b8d0618a42
msgid "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:256
# 5bc37da41e2c4a0e8950f53d06ae9ef8
msgid "``MBRIntersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:257
# bdd329ed062a4b9f9622c28d4dca0ebd
msgid "``Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:263
# 2734e705f54946538569decafd79f9f2
msgid "overlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:270
# a65f55ddde834fe1b1cab36d08623c67
msgid "relate"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:274
# 2bd1ae0388a6417f804c965b9207543b
msgid "Tests if the geometry field is spatially related to the lookup geometry by the values given in the given pattern.  This lookup requires a tuple parameter, ``(geom, pattern)``; the form of ``pattern`` will depend on the spatial backend:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:279
# 5389ff23e84446febc9908d5e4a975d2
msgid "PostGIS & SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:280
# 1d7b2ba61ada4244b12e309017c41259
msgid "On these spatial backends the intersection pattern is a string comprising nine characters, which  define intersections between  the interior, boundary, and exterior of the geometry field and the lookup geometry. The intersection pattern matrix may only use the following characters: ``1``, ``2``, ``T``, ``F``, or ``*``.  This lookup type allows users to \"fine tune\" a specific geometric relationship consistent with the DE-9IM model. [#fnde9im]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:293
# 79f8d00b32b24cd0990a91e67a0849a7
msgid "PostGIS SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:297
# 6b61e29e3c1345d7a1e6933cfd1686e3
msgid "SpatiaLite SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:304
# 992340a8bccc4124b44dc99907d4f58c
msgid "Here the relation pattern is comprised at least one of the nine relation strings: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, ``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, and ``ANYINTERACT``.   Multiple strings may be combined with the logical Boolean operator OR, for example, ``'inside+touch'``. [#fnsdorelate]_  The relation strings are case-insensitive."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:315
# f77e64d6eb6b40319ccaf5a07afcce15
msgid "Oracle SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:322
# c9891b4587f740e0821e53365d7fee28
msgid "touches"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:326
# 529122fd92894453b09acfd07bd261c6
msgid "Tests if the geometry field spatially touches the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:335
# e35c3a6bd9f84c5f963517b7a7f9fc01
msgid "``ST_Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:336
# f3f805ed07344bc5bd4a6ddd8c234373
msgid "``MBRTouches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:337
# fdeb59974979450e9dcd4392ccd4027f
msgid "``SDO_TOUCH(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:338
# d1bff1ffec39463d9105f0caa9671a2d
msgid "``Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:344
# 6a47c039b815490bafacc5e33952de5a
msgid "within"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:348
# c359396ae62a43cb8b5a0628199586ca
msgid "Tests if the geometry field is spatially within the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:357
# d93926d549f34e728b8af44d5c54f905
msgid "``ST_Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:359
# afe45ec2be9e4a84beb6189c5c143059
msgid "``SDO_INSIDE(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:360
# 63f2417099634c10ad47c44856fca756
msgid "``Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:366
# a3887dcbfbff406aa8f7e0461dce00cd
msgid "left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:370
# 48cc57afb79a43b8a03c342f643aec82
msgid "Tests if the geometry field's bounding box is strictly to the left of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:377
#: ../../ref/contrib/gis/geoquerysets.txt:395
#: ../../ref/contrib/gis/geoquerysets.txt:413
#: ../../ref/contrib/gis/geoquerysets.txt:432
#: ../../ref/contrib/gis/geoquerysets.txt:450
#: ../../ref/contrib/gis/geoquerysets.txt:468
#: ../../ref/contrib/gis/geoquerysets.txt:486
#: ../../ref/contrib/gis/geoquerysets.txt:504
# 971eaeec64124aabb8d37f6fe6786af5
# cf987e07f9894967b1c3039f932e376c
# 67166ac4929f4aa7bc63aa18f131ed2d
# d1a15f8459bd46f1835d423698097fd5
# 867a3917ac3d49bba2048fdbf9c41951
# 2cd2a34d74e64233931dee207841344c
# 27ee566aa44a45cc89f6744e97593797
# 794542cc6c8c448fa341e2c4bbab7a43
msgid "PostGIS equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:384
# f43470887beb4d4f819613509451eb52
msgid "right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:388
# 48295ffe0d5a44c38610fe24ba8aed85
msgid "Tests if the geometry field's bounding box is strictly to the right of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:402
# 391b0e2f5115400ebf63cf5c4111ac13
msgid "overlaps_left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:406
# 3fe434d142234b92b9b48bf8ddb4afae
msgid "Tests if the geometry field's bounding box overlaps or is to the left of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:421
# 7e9ff4f7144d4849a62c21d44a9bb1d9
msgid "overlaps_right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:425
# 31f91a153ea34bf9869ce484bda53921
msgid "Tests if the geometry field's bounding box overlaps or is to the right of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:439
# c46e3c04e4e945c2a56ce5930df2dcb2
msgid "overlaps_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:443
# 1e8d35f2f4fa4710ad51b29ca25a723c
msgid "Tests if the geometry field's bounding box overlaps or is above the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:457
# 5a2db48fa40c40ebb83e2dd49f14ea77
msgid "overlaps_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:461
# 380315e9c10b42ad902add0aba301739
msgid "Tests if the geometry field's bounding box overlaps or is below the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:475
# f02f55cddad443a880321c4fde257828
msgid "strictly_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:479
#: ../../ref/contrib/gis/geoquerysets.txt:497
# ac4ea2da0bc24596bcd558dacbd27937
# 872e010fd68e453e8c759a23fc25ae35
msgid "Tests if the geometry field's bounding box is strictly above the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:493
# f5961d95f8134e64b7ab841754642904
msgid "strictly_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:516
# 93c4c1f40136409f8071ead7dd6539f6
msgid "For an overview on performing distance queries, please refer to the :ref:`distance queries introduction <distance-queries>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:519
# 63d84a11776b4a83837044e47af7fc3c
msgid "Distance lookups take the following form::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:523
# 0f55785a11e94d86b0f0193efc1123c4
msgid "The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field or a :class:`~django.contrib.gis.measure.Distance` object).  On every distance lookup but :lookup:`dwithin`, an optional third element, ``'spheroid'``, may be included to tell GeoDjango to use the more accurate spheroid distance calculation functions on fields with a geodetic coordinate system (e.g., ``ST_Distance_Spheroid`` would be used instead of ``ST_Distance_Sphere``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:536
# e4422b254fdd4c508de36cf01312ddb6
msgid "distance_gt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:538
# 7875e142280a453bae2e293204662fb9
msgid "Returns models where the distance to the geometry field from the lookup geometry is greater than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:548
# 6d15ae0fb5ed4be3b7ec0f69a1f0a3a6
msgid "``ST_Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:549
# 257aaf81db794f5e862ba542db8ebf47
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:550
# ed86dc3100e047179df3adb0844b9b59
msgid "``Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:556
# 79d518098bdb45c2b0a8888ca5d1ed25
msgid "distance_gte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:558
# 804063f3c81446368a326fc099c58d6a
msgid "Returns models where the distance to the geometry field from the lookup geometry is greater than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:568
# f36c1adb6daf4b7093824780af5a17ab
msgid "``ST_Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:569
# e7b12b88f3d4481aa35b8bfa71812ce8
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:570
# 3c25e1e3fc1a47df927af458e848c10e
msgid "``Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:576
# 660e1a6d70a3482195177dcd88dd1abd
msgid "distance_lt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:578
# d1cae6e40c1a484485ff36786172d938
msgid "Returns models where the distance to the geometry field from the lookup geometry is less than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:588
# 44d30388efad450b8c4d38dab0fa67eb
msgid "``ST_Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:589
# f15d8b4dd2074750a260a6c297ee61ba
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:590
# 10a1228ca50b4b36a283ae9d69921040
msgid "``Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:596
# c5cfcc71751143798f96f0a2b6ab0430
msgid "distance_lte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:598
# e06ce44134ef4a0e82e79b3bfbef2284
msgid "Returns models where the distance to the geometry field from the lookup geometry is less than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:608
# e46f2c67300d47e29c845764593b16f3
msgid "``ST_Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:609
# bf3c544aca324f9d8648f1f1a4b65984
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:610
# edbc8a4642f540a388e6b5cd3a0d5dc6
msgid "``Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:616
# b2567d65b9524d228a38167833d53b83
msgid "dwithin"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:618
# af43896aeacd4f8791809c15cb5cfe9a
msgid "Returns models where the distance to the geometry field from the lookup geometry are within the given distance from one another."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:628
# 1a0e16eb1c9a4885b185191c8785b0f2
msgid "``ST_DWithin(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:629
# 4cfcd86ee6d0475c81cf3f5857e0cfbc
msgid "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:634
# 6fa778abb5c14afcace961f6c7dcfa95
msgid "This lookup is not available on SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:642
# eb948ba9879545d1b4ab927899498068
msgid "``GeoQuerySet`` methods specify that a spatial operation be performed on each patial operation on each geographic field in the queryset and store its output in a new attribute on the model (which is generally the name of the ``GeoQuerySet`` method)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:647
# c5687a818df44217a33d29466fc20075
msgid "There are also aggregate ``GeoQuerySet`` methods which return a single value instead of a queryset.  This section will describe the API and availability of every ``GeoQuerySet`` method available in GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:653
# 8153fe57ac40434bb8acf10e19d3c98d
msgid "What methods are available depend on your spatial backend.  See the :ref:`compatibility table <geoqueryset-method-compatibility>` for more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:657
# b7565d0f8ba041cf9194df02782c7419
msgid "With a few exceptions, the following keyword arguments may be used with all ``GeoQuerySet`` methods:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:661
#: ../../ref/contrib/gis/geoquerysets.txt:964
#: ../../ref/contrib/gis/geoquerysets.txt:997
#: ../../ref/contrib/gis/geoquerysets.txt:1030
#: ../../ref/contrib/gis/geoquerysets.txt:1050
#: ../../ref/contrib/gis/geoquerysets.txt:1190
# 03cd967747dc4a91b759dec229bee283
# cb413b06565c4a64b543c2bb7b78edaa
# bd8de61b7546494b9ac61e82e32590f9
# d1c14f21b5ea44cb973599b05cf627ac
# 656f1e728e754b9db2dfea88069f44c4
# fb61e3d91d63491299114870723ab553
msgid "Keyword Argument"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:663
# fa97618fe7cf406881d47e8822079d00
msgid "``field_name``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:663
# 2f51abb7fae94ee7898fc1f933226332
msgid "By default, ``GeoQuerySet`` methods use the first geographic field encountered in the model.  This keyword should be used to specify another geographic field (e.g., ``field_name='point2'``) when there are multiple geographic fields in a model."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:669
# 60e8e30bec9445d38b68cc5a6115ffdf
msgid "On PostGIS, the ``field_name`` keyword may also be used on geometry fields in models that are related via a ``ForeignKey`` relation (e.g., ``field_name='related__point'``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:674
# aae0e413dc05431386ad6772d28321ff
msgid "``model_att``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:674
# d75829345a474493a235ca21d2d2945e
msgid "By default, ``GeoQuerySet`` methods typically attach their output in an attribute with the same name as the ``GeoQuerySet`` method.  Setting this keyword with the desired attribute name will override this default behavior.  For example, ``qs = Zipcode.objects.centroid(model_att='c')`` will attach the centroid of the ``Zipcode`` geometry field in a ``c`` attribute on every model rather than in a ``centroid`` attribute."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:684
# 4c4c05fdea4549d6b81bf5342eb7097d
msgid "This keyword is required if a method name clashes with an existing ``GeoQuerySet`` method -- if you wanted to use the ``area()`` method on model with a ``PolygonField`` named ``area``, for example."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:692
# eb9c14e513004145bb7d1b4dcf6a716e
msgid "Measurement"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:696
# 2ba7adeef6dc45d4b3e54e2c661f7d6c
msgid "``area``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:700
# c6afdafdcfd644d784c166e795605dd7
msgid "Returns the area of the geographic field in an ``area`` attribute on each element of this GeoQuerySet."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:704
# 921c1567006f45d799e94560a4bac3b4
msgid "``distance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:708
# 8a29cff4a8314846ac5805b24e00915f
msgid "This method takes a geometry as a parameter, and attaches a ``distance`` attribute to every model in the returned queryset that contains the distance (as a :class:`~django.contrib.gis.measure.Distance` object) to the given geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:712
# 20e06d8219c64072b27f33c03e98f858
msgid "In the following example (taken from the `GeoDjango distance tests`__), the distance from the `Tasmanian`__ city of Hobart to every other :class:`PointField` in the ``AustraliaCity`` queryset is calculated::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:732
# c3ad36e1acbe43b8af291dd581e4ba8c
msgid "Because the ``distance`` attribute is a :class:`~django.contrib.gis.measure.Distance` object, you can easily express the value in the units of your choice.  For example, ``city.distance.mi`` is the distance value in miles and ``city.distance.km`` is the distance value in kilometers.  See the :ref:`ref-measure` for usage details and the list of :ref:`supported_units`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:743
# 777d0e4c5c7d4df7bb2916daa456d71b
msgid "``length``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:747
# 27ecf6c66e234f6399990f4700725b44
msgid "Returns the length of the geometry field in a ``length`` attribute (a :class:`~django.contrib.gis.measure.Distance` object) on each model in the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:752
# b4f296989c0b4c81a6f2943f7b8030d6
msgid "``perimeter``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:756
# 41007ccc089f4de38129da9b6ca97368
msgid "Returns the perimeter of the geometry field in a ``perimeter`` attribute (a :class:`~django.contrib.gis.measure.Distance` object) on each model in the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:761
# e5847859f3f64a4192a1c225289ee39b
msgid "Geometry Relationships"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:763
# 8495f5e7fd0c4b1d8e315e6cf5178b4a
msgid "The following methods take no arguments, and attach geometry objects each element of the :class:`GeoQuerySet` that is the result of relationship function evaluated on the geometry field."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:768
# ee79bc740b9b4a5cb254a0b0a4ba2483
msgid "``centroid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:774
# 6f0924fad11f4ba9a076e02f8cf75345
msgid "Returns the ``centroid`` value for the geographic field in a ``centroid`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:778
# 62565dc891a54c02b59aaaca7f07f330
msgid "``envelope``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:784
# 401ccec7bde749e3822f14d90bf9ebbc
msgid "Returns a geometry representing the bounding box of the geometry field in an ``envelope`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:788
# 478e0d1792e44c49b30446e1d0e8ab09
msgid "``point_on_surface``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:794
# a229239ea91647d790a203b5e4aa9335
msgid "Returns a Point geometry guaranteed to lie on the surface of the geometry field in a ``point_on_surface`` attribute on each element of the queryset; otherwise sets with None."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:799
# 4e9c35097dfc4eb8b6fd16e92f5b612b
msgid "Geometry Editors"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:802
# 702788e32d7f4d4c8aa0c07494573ae4
msgid "``force_rhr``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:810
# 1767a383896643c1ac384be7185beb5d
msgid "Returns a modified version of the polygon/multipolygon in which all of the vertices follow the Right-Hand-Rule, and attaches as a ``force_rhr`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:815
# f6f8e1a21c464b5f88898f6dfe9893bf
msgid "``reverse_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:823
# 9ad977c0a6b9493486e962a04df88fc5
msgid "Reverse the coordinate order of the geometry field, and attaches as a ``reverse`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:827
# 80fb469d0f884d9c93e0495056bfd9df
msgid "``scale``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:834
# 4c766e522c514c18aed4fbb5a728cdf9
msgid "``snap_to_grid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:838
# a789461432a14a2285e8e66dd469cb17
msgid "Snap all points of the input geometry to the grid.  How the geometry is snapped to the grid depends on how many numeric (either float, integer, or long) arguments are given."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:843
# 1a23e2b81dff44cc8bb6b7929bc757a3
msgid "Number of Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:845
#: ../../ref/contrib/gis/geos.txt:183
#: ../../ref/contrib/gis/geos.txt:832
# 3476b61d2dc14c688ae4156171c17dbf
# 7717ab271d3e4549a4e37a4cf05d1704
# ae9829d939f74a0492e5efcb39265f9f
msgid "1"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:845
# 2a3c96f0f01b4d8ab5943e5c0d36fd70
msgid "A single size to snap bot the X and Y grids to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:846
#: ../../ref/contrib/gis/geos.txt:184
#: ../../ref/contrib/gis/geos.txt:854
# dde923af36bf4cd1b1aac3de77a082f5
# 857145dd629148038e72e4b6bc873da3
# 67a5af236a3e462b857adeb2aa428a33
msgid "2"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:846
# 8d08b13dbd2446fba42a26d2ecd18f7a
msgid "X and Y sizes to snap the grid to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:847
#: ../../ref/contrib/gis/geos.txt:186
# 97812b18819543e59e0c89e13de190c4
# 1c778fa72a614609bba6a005b2cc8dab
msgid "4"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:847
# 4a83d3483c9344b199050356392717ce
msgid "X, Y sizes and the corresponding X, Y origins."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:851
#: ../../ref/contrib/gis/layermapping.txt:131
# 980b323769ed41128c9c3b183cecec81
# 5995682bba1b466db0e05968d184c080
msgid "``transform``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:857
# 0b43c348586e497c8f25dcc5c361232c
msgid "The ``transform`` method transforms the geometry field of a model to the spatial reference system specified by the ``srid`` parameter.  If no ``srid`` is given, then 4326 (WGS84) is used by default."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:863
# af38d345a9ad4baaa9bf3e1ed4075a4a
msgid "Unlike other ``GeoQuerySet`` methods, ``transform`` stores its output \"in-place\".  In other words, no new attribute for the transformed geometry is placed on the models."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:869
# 1fd67e72cd944fd788ee282162ccd10c
msgid "What spatial reference system an integer SRID corresponds to may depend on the spatial database used.  In other words, the SRID numbers used for Oracle are not necessarily the same as those used by PostGIS."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:883
# ab02b8f0675d434f8b09ac1ec1bd42f6
msgid "``translate``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:888
# ba49dd9d24b4423ea2bc7b71a7a70966
msgid "Translates the geometry field to a new location using the given numeric parameters as offsets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:892
# 26c2e8ea41c643c8a8bc671682850c96
msgid "Geometry Operations"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:895
# ed8d9a9349df4ac7a9fea5d7497e5b53
msgid "The following methods all take a geometry as a parameter and attach a geometry to each element of the ``GeoQuerySet`` that is the result of the operation."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:899
# 92bd90f80fe0497196e2a7e71fbc6b02
msgid "``difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:903
# 8101f0caef1d426d858cd78152feb2eb
msgid "Returns the spatial difference of the geographic field with the given geometry in a ``difference`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:909
# 52fe267ab972427382856a8b319c805e
msgid "``intersection``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:913
# 9d13e4241747419e9b0cc6b8628a889b
msgid "Returns the spatial intersection of the geographic field with the given geometry in an ``intersection`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:918
# a8fc5fa3ca8d405b8f5fcb91ff86f98a
msgid "``sym_difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:922
# c2e9cfba821d40a892680d8a32decbef
msgid "Returns the symmetric difference of the geographic field with the given geometry in a ``sym_difference`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:927
# ef7546917746425ba4ae7118e2198493
msgid "``union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:931
# 5427a6c4e6d84f6d88b35874a7f5562c
msgid "Returns the union of the geographic field with the given geometry in an ``union`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:936
# 55e90355cd124edebc7c0c72240eaa6e
msgid "Geometry Output"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:938
# 4e6c5c4cfd5c46ffb58d5461f96ea71d
msgid "The following ``GeoQuerySet`` methods will return an attribute that has the value of the geometry field in each model converted to the requested output format."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:942
# ca88ce0aca7447bd820884c7e1b6ce1d
msgid "``geohash``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:948
# 67080b1e09154003b9b61abe8079c7f8
msgid "Attaches a ``geohash`` attribute to every model the queryset containing the `GeoHash`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:954
# 39cc17239be14dd2a6ded7b18e9b0b15
msgid "``geojson``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:960
# 45694419e7d44bc68b7122c298d0eb77
msgid "Attaches a ``geojson`` attribute to every model in the queryset that contains the `GeoJSON`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:966
#: ../../ref/contrib/gis/geoquerysets.txt:999
#: ../../ref/contrib/gis/geoquerysets.txt:1032
#: ../../ref/contrib/gis/geoquerysets.txt:1056
# be49fe3f2d364aa583d007e7961b7d8d
# dd65b141ac6b474c971f6d6c41fe08a4
# 4f35175074484e3d8aebc3fc1ec4cc59
# 049754faed074d7888526f7bd8bb5a0c
msgid "``precision``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:966
# a52017318028426596d8bb81c3996d01
msgid "It may be used to specify the number of significant digits for the coordinates in the GeoJSON representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:970
# 11622e9737ea447a8c8c87202a3c3aca
msgid "``crs``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:970
# 4b26d401600f45bc8c80773ef9f57ec2
msgid "Set this to ``True`` if you want the coordinate reference system to be included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:974
# fb2a4bc77b324d52bc02e16b2c93eaba
msgid "``bbox``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:974
# fed982fcdf964e1bb84b3d3717d73fbe
msgid "Set this to ``True`` if you want the bounding box to be included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:981
# d16b4c516c044315ac6581e42476ff00
msgid "``gml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:987
# 7858119b727e4dc1bc26ed6f9271c009
msgid "Attaches a ``gml`` attribute to every model in the queryset that contains the `Geographic Markup Language (GML)`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:999
# b09f324f9a3447478953cf7ffc0bc9cd
msgid "This keyword is for PostGIS only.  It may be used to specify the number of significant digits for the coordinates in the GML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1004
# 3bc7b0efcf8440b1984dd6ca4612a3b2
msgid "``version``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1004
# 6be7418011f94d4dbaf8d34977da6ba2
msgid "This keyword is for PostGIS only.  It may be used to specify the GML version used, and may only be values of 2 or 3.  The default value is 2."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1012
# ce65ad9787584393a28522cb485a6dc1
msgid "``kml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1018
# 03ce229422c34b5ab2dc4f30a35b255f
msgid "Attaches a ``kml`` attribute to every model in the queryset that contains the `Keyhole Markup Language (KML)`__ representation of the geometry fields. It should be noted that the contents of the KML are transformed to WGS84 if necessary."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1032
# fdab3681697040ecb984b5a1b1851b1e
msgid "This keyword may be used to specify the number of significant digits for the coordinates in the KML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1040
# 6081c632d22a4284a81ee35fc72cb055
msgid "``svg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1046
# 31bb4e93083541e68b7442073690be71
msgid "Attaches a ``svg`` attribute to every model in the queryset that contains the `Scalable Vector Graphics (SVG)`__ path data of the geometry fields."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1052
# eb19485c180741cba8bf8dbd01938776
msgid "``relative``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1052
# f71de4ec38294ffd9ba974de10a05312
msgid "If set to ``True``, the path data will be implemented in terms of relative moves.  Defaults to ``False``, meaning that absolute moves are used instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1056
# 9b3d43f22f434e09b7adbc1ee3789253
msgid "This keyword may be used to specify the number of significant digits for the coordinates in the SVG representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1064
# 53ebf34ba03c4c2e8617cdc0a7a4d690
msgid "Miscellaneous"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1067
# 860c125d68fa42daba4815f0d902821b
msgid "``mem_size``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1073
# cce0efe1d74841c69cd5cc8ec4d46a62
msgid "Returns the memory size (number of bytes) that the geometry field takes in a ``mem_size`` attribute  on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1077
# 90c1ab3b7bbe4971bd7a5d5f84573bb3
msgid "``num_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1083
# be757881e8c148de9f62e03d9e8d36f4
msgid "Returns the number of geometries in a ``num_geom`` attribute on each element of the ``GeoQuerySet`` if the geometry field is a collection (e.g., a ``GEOMETRYCOLLECTION`` or ``MULTI*`` field); otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1089
# 5bfe615d129145d2b54c556579ae271f
msgid "``num_points``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1095
# bc0fdb4329c84fb2ab265a8cc6f901ae
msgid "Returns the number of points in the first linestring in the geometry field in a ``num_points`` attribute on each element of the ``GeoQuerySet``; otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1100
# 51810bad054f46a4b9027982ec5839b0
msgid "Spatial Aggregates"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1103
# 1b892249d6dc46edb76cc2ca67b6c165
msgid "Aggregate Methods"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1106
# 45e5eb59a9e94d039521d345f63ad2a6
msgid "``collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1112
# 31419c6626754c72b6c970ea77fa4bd2
msgid "Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the geometry column.  This is analagous to a simplified version of the :meth:`GeoQuerySet.unionagg` method, except it can be several orders of magnitude faster than peforming a union because it simply rolls up geometries into a collection or multi object, not caring about dissolving boundaries."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1119
# 938d5e57d9cc44258d1e313f702ee01f
msgid "``extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1125
# 94fc5d7a0f6d4a54a7aff4764ab9b52d
msgid "Returns the extent of the ``GeoQuerySet`` as a four-tuple, comprising the lower left coordinate and the upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1135
# 6f437c9fc88a47e5b51f617e165a55ea
msgid "``extent3d``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1143
# 39b7dfc5265e4c75bf04c8cba98a6740
msgid "Returns the 3D extent of the ``GeoQuerySet`` as a six-tuple, comprising the lower left coordinate and upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1153
# 294745f573cf452aa76a74b18249a433
msgid "``make_line``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1159
# f184c80c0e3e4ca481b37e8ba85af969
msgid "Returns a ``LineString`` constructed from the point field geometries in the ``GeoQuerySet``.  Currently, ordering the queryset has no effect."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1168
# 594d3fe32cd74482a2c6fc0135da0947
msgid "``unionagg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1174
# 73bd5a60aff74fe6af48c4944f0b29e6
msgid "This method returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object comprising the union of every geometry in the queryset.  Please note that use of ``unionagg`` is processor intensive and may take a significant amount of time on large querysets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1181
# c86b50d378f04b929657ec988c21a694
msgid "If the computation time for using this method is too expensive, consider using :meth:`GeoQuerySet.collect` instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1192
# 5f116ca951af47eebdb8749c20ed6a15
msgid "``tolerance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1192
# 3aee3973526c4dae89a7ce15ed73e20d
msgid "This keyword is for Oracle only.  It is for the tolerance value used by the ``SDOAGGRTYPE`` procedure; the  `Oracle documentation`__ has more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1201
# 26a1919f90d04bd0afc640a8afc1ca32
msgid "Aggregate Functions"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1209
# 19d1833463ad480f8d36382cf5cad66d
msgid "``Collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1213
# 5b6018b5322b47108fd76863dbe7ea51
msgid "Returns the same as the :meth:`GeoQuerySet.collect` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1216
# d709fad964e74340bf4ce96c2180b202
msgid "``Extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1220
# c3c95e38d252436e9d3a18dcfcaf062e
msgid "Returns the same as the :meth:`GeoQuerySet.extent` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1223
# c27c605977bb49478cbb71ec4a39c377
msgid "``Extent3D``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1229
# da38817367e94ed4a81e344eb1a624bb
msgid "Returns the same as the :meth:`GeoQuerySet.extent3d` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1232
# 3b51a3713adc440ba86ca71011fe2c6c
msgid "``MakeLine``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1236
# 0a2fe3d57a754afba2f5501f78eac8a1
msgid "Returns the same as the :meth:`GeoQuerySet.make_line` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1239
# 3ac704af343d420f927b1fb638ab62e4
msgid "``Union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1243
# 9403b4bd4190495a9a34744b9c15e40f
msgid "Returns the same as the :meth:`GeoQuerySet.union` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1246
# 16f8b54332b14627b1a1981d4ca12119
msgid "*See* `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, at Ch. 2.1.13.2, p. 2-13 (The Dimensionally Extended Nine-Intersection Model)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1247
# 0acaf6ebb1424a84838ffb98993f5789
msgid "*See* `SDO_RELATE documentation <http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14255/sdo_operat.htm#sthref845>`_, from Ch. 11 of the Oracle Spatial User's Guide and Manual."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1248
# 880bd4e2e5114d05ab30757761801e73
msgid "For an explanation of this routine, read `Quirks of the \"Contains\" Spatial Predicate <http://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-covers-spatial.html>`_ by Martin Davis (a PostGIS developer)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1249
# 7bc68f8b99274e348b079fc1012a337b
msgid "Refer to the PostGIS ``ST_ContainsProperly`` `documentation <http://postgis.refractions.net/documentation/manual-1.4/ST_ContainsProperly.html>`_ for more details."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:5
# e0e37f5d71f34510a1e5ec4081a10fe9
msgid "GEOS API"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:11
# d0de86b8c6c0474da4d8f42eaa514b3b
msgid "Background"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:14
# 4a046fb8d0034b0f9b152144d31af6df
msgid "What is GEOS?"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:16
# ff5e56d65a5e462a9905f3202ee0c93e
msgid "`GEOS`__ stands for **G**\\ eometry **E**\\ ngine - **O**\\ pen **S**\\ ource, and is a C++ library, ported from the  `Java Topology Suite`__.  GEOS implements the OpenGIS `Simple Features for SQL`__ spatial predicate functions and spatial operators. GEOS, now an OSGeo project, was initially developed and maintained by `Refractions Research`__ of Victoria, Canada."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:28
# 3311076d5a8345e7b27dffc3fac29488
msgid "Features"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:30
# 46c7848de66a4b35a5bfb6fee31aecfb
msgid "GeoDjango implements a high-level Python wrapper for the GEOS library, its features include:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:33
# 38d90aec1ad34cd0b6a9986537741b5d
msgid "A BSD-licensed interface to the GEOS geometry routines, implemented purely in Python using ``ctypes``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:35
# 0196a2d979994bb2a4f4a5a9339c6a91
msgid "Loosely-coupled to GeoDjango.  For example, :class:`GEOSGeometry` objects may be used outside of a django project/application.  In other words, no need to have ``DJANGO_SETTINGS_MODULE`` set or use a database, etc."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:38
# 81670e9baeab41469d5b7071790cf5b2
msgid "Mutability: :class:`GEOSGeometry` objects may be modified."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:39
# 84fb445f08cb4c1d9f25b53c16bd653f
msgid "Cross-platform and tested; compatible with Windows, Linux, Solaris, and Mac OS X platforms."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:45
# 491cbd9464844889ab26b18d7e771792
msgid "Tutorial"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:47
# 0590dad6cad143c08f025333ac40a8b2
msgid "This section contains a brief introduction and tutorial to using :class:`GEOSGeometry` objects."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:51
# 115574a1220f46e783a944dabff794fa
msgid "Creating a Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:53
# 2cc901aae962417da3523f72b47c06a7
msgid ":class:`GEOSGeometry` objects may be created in a few ways.  The first is to simply instantiate the object on some spatial input -- the following are examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:63
# e38a3204fa6a4c20b4b6ef49a4cecedf
msgid "Another option is to use the constructor for the specific geometry type that you wish to create.  For example, a :class:`Point` object may be created by passing in the X and Y coordinates into its constructor::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:70
# c165e77a1fd44c9b822a9cff2ed8a241
msgid "Finally, there are :func:`fromstr` and :func:`fromfile` factory methods, which return a :class:`GEOSGeometry` object from an input string or a file::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:79
# a96e900746eb460c9267445fd456ad7f
msgid "Geometries are Pythonic"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:80
# 0b881bb3db2c44e09744367963e23413
msgid ":class:`GEOSGeometry` objects are 'Pythonic', in other words components may be accessed, modified, and iterated over using standard Python conventions. For example, you can iterate over the coordinates in a :class:`Point`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:88
# c20d25d3d0004eb2a9f33ac369ee091a
msgid "With any geometry object, the :attr:`GEOSGeometry.coords` property may be used to get the geometry coordinates as a Python tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:94
# 99d51ab8370c4ccaa063a8c365856ec9
msgid "You can get/set geometry components using standard Python indexing techniques.  However, what is returned depends on the geometry type of the object.  For example, indexing on a :class:`LineString` returns a coordinate tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:106
# b6c91973ff14471f98780116502c8743
msgid "Whereas indexing on a :class:`Polygon` will return the ring (a :class:`LinearRing` object) corresponding to the index::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:116
# 26e389045f02438cab8cbdef284961b0
msgid "In addition, coordinates/components of the geometry may added or modified, just like a Python list::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:127
# acf996312b3b483b9b1c54d985b6e5d2
msgid "Geometry Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:130
# 87b4cbb59c9b49e68387f46330f268d5
msgid "``GEOSGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:139
# 10f1d6731f4144e8b5faaf4c96e25a45
msgid "This is the base class for all GEOS geometry objects.  It initializes on the given ``geo_input`` argument, and then assumes the proper geometry subclass (e.g., ``GEOSGeometry('POINT(1 1)')`` will create a :class:`Point` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:143
# 746dfba664b24db4879001d1bae69efc
msgid "The following input formats, along with their corresponding Python types, are accepted:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:147
# cfa1f6155b004a2ba1acaeaa7092dcca
msgid "Format"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:147
# a40b46f055834ed2a0bc4c913d9fd24c
msgid "Input Type"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:149
# ecc7c885d0b04fd3a5fffdd866b259ab
msgid "WKT / EWKT"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:149
#: ../../ref/contrib/gis/geos.txt:150
#: ../../ref/contrib/gis/geos.txt:152
# 7c9bb9d29621437583c6016660bfc4d8
# f467dbdfc62d4f3484a78ac32ec2c201
# 52c615d4651b4c06810909e9e8b3a8cf
msgid "``str`` or ``unicode``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:150
# 6462a096180f4545b1987536d7686f09
msgid "HEX / HEXEWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:151
# 77887691f7634303bfaf8078fa1b9e99
msgid "WKB / EWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:151
# a4a89b295d264ad3aff19586d0e5e261
msgid "``buffer``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:152
# b06aba3a5d764e3282f1031003fb781b
msgid "GeoJSON"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:156
# 1b873920757a47e59dde44335fa27430
msgid "Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:160
# f682f8b4972f4d0f9f4faab26c5fe6a3
msgid "Returns the coordinates of the geometry as a tuple."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:164
# 68366ccf7334408d847faae5df883830
msgid "Returns whether or not the set of points in the geometry is empty."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:168
# a234cbb1f5e54d30a4bdc256eb87917d
msgid "Returns a string corresponding to the type of geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:176
# 73594adabf534f3a9320852c9f2b7c47
msgid "Returns the GEOS geometry type identification number.  The following table shows the value for each geometry type:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:180
# de9ed72119fc4bb49c6cec46eb80595c
msgid "Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:180
# 5db524779d6946ef88a915dbd4078905
msgid "ID"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:182
# d9199b0880ba436d96284f793f867615
msgid ":class:`Point`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:182
#: ../../ref/contrib/gis/geos.txt:831
# cde9af2a345742f0bf641e7823c1fac4
# 759e52685b484028bc29b23e351f8525
msgid "0"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:183
# 67c44e314bab46e0b1c3962e2b2f7eb6
msgid ":class:`LineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:184
# 3d52df71c3ba4c3ab642d40c2ea3c733
msgid ":class:`LinearRing`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:185
# 24a827d7a9ae454aa7363be9a5797847
msgid ":class:`Polygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:185
#: ../../ref/contrib/gis/geos.txt:855
# 89c1d64a58aa43d5ad90c9354d867a7e
# d45f3e16394d49929592a540a51d28cb
msgid "3"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:186
# 8e8a5e2937d44c10bd52e0d6ef9b6849
msgid ":class:`MultiPoint`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:187
# fe70f93d14c34d9280b04aff8aacdfd7
msgid ":class:`MultiLineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:187
# d19fa217e65549e3925237588427caf2
msgid "5"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:188
# 66e66f24a63e4fdc8d43d0b876c8f1f2
msgid ":class:`MultiPolygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:188
# e4c0e40af0d142cd9bbff0207dd90665
msgid "6"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:189
# 9b4cb256d582408fbce1a01fa6ec5acf
msgid ":class:`GeometryCollection`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:189
# fc2f8d970ac947bb81aa020f7ae2e689
msgid "7"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:194
# 528a0c95badd4ef09b1c0f6d3724c33d
msgid "Returns the number of coordinates in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:198
# 9ad244f796ce405db33def0037d03c52
msgid "Returns the number of geometries in this geometry.  In other words, will return 1 on anything but geometry collections."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:203
# 7ebe4bbafadb48279bfa035b294d49c9
msgid "Returns a boolean indicating whether the geometry is three-dimensional."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:207
# 0160697a28054cc6b3d5781b1bba3ae0
msgid "Returns a boolean indicating whether the geometry is a ``LinearRing``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:211
# 230aa17d439d4661b74b834cd75196b6
msgid "Returns a boolean indicating whether the geometry is 'simple'. A geometry is simple if and only if it does not intersect itself (except at boundary points).  For example, a :class:`LineString` object is not simple if it intersects itself. Thus, :class:`LinearRing` and :class`Polygon` objects are always simple because they do cannot intersect themselves, by definition."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:220
# d68f3e86dd0a4cc9b1f0ed9348fa0fab
msgid "Returns a boolean indicating whether the geometry is valid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:226
# 97941ca75e574abcb566c2c9370aba61
msgid "Returns a string describing the reason why a geometry is invalid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:230
# 220c1ee075984ee8bf882c092aac82be
msgid "Property that may be used to retrieve or set the SRID associated with the geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:241
# 43e7bec2975d4adeb86981dbbfbc9916
msgid "Output Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:243
# 42daead975264ca7bbffc02f54669627
msgid "The properties in this section export the :class:`GEOSGeometry` object into a different.  This output may be in the form of a string, buffer, or even another object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:249
# 7a4e164120f5455d9bb6f0896c76cfc7
msgid "Returns the \"extended\" Well-Known Text of the geometry.  This representation is specific to PostGIS and is a super set of the OGC WKT standard. [#fnogc]_ Essentially the SRID is prepended to the WKT representation, for example ``SRID=4326;POINT(5 23)``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:256
# 6e7e761a06144b8391aa5468586b9a13
msgid "The output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:261
# 456d9edd69f440da9e94bbb5660a7516
msgid "Returns the WKB of this Geometry in hexadecimal form.  Please note that the SRID and Z values are not included in this representation because it is not a part of the OGC specification (use the :attr:`GEOSGeometry.hexewkb` property instead)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:270
# 2a7bd99cc62e4cfaa07fbd27d0ad3d80
msgid "Returns the EWKB of this Geometry in hexadecimal form.  This is an extension of the WKB specification that includes SRID and Z values that are a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:276
# 94ce72a00e9c41e085bcf90fa9f07511
msgid "GEOS 3.1 is *required* if you want valid 3D HEXEWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:280
# 0342916b55504d49a68a2738034a7949
msgid "Returns the GeoJSON representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:284
#: ../../ref/contrib/gis/geos.txt:303
#: ../../ref/contrib/gis/geos.txt:522
#: ../../ref/contrib/gis/geos.txt:538
# 22641b44d4ae4f659fd9bfc2f3c39bf7
# 059311fc6dbb43fb8a019189d8563ab1
# e8ce808b4070494ab06c039863a93467
# 774cdff232984a3a9c8ff75feffa496f
msgid "Requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:288
# 4e409300a4334c15a6a10b365c1dccc7
msgid "Alias for :attr:`GEOSGeometry.json`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:292
# bfb2463df27a46babc52fb2409980e11
msgid "Returns a `KML`__ (Keyhole Markup Language) representation of the geometry.  This should only be used for geometries with an SRID of 4326 (WGS84), but this restriction is not enforced."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:298
# 9dd4c80919c9411093aad26de0baae55
msgid "Returns an :class:`~django.contrib.gis.gdal.OGRGeometry` object correspondg to the GEOS geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:309
# 444c3a06138e4cd9accdd34b5ae62279
msgid "Returns the WKB (Well-Known Binary) representation of this Geometry as a Python buffer.  SRID and Z values are not included, use the :attr:`GEOSGeometry.ewkb` property instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:319
# 9c124c81f3124c3f8e740986d7c92ee3
msgid "Return the EWKB representation of this Geometry as a Python buffer. This is an extension of the WKB specification that includes any SRID and Z values that are a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:325
# 468a4160a5944bb79b01ed42fb6ff05e
msgid "GEOS 3.1 is *required* if you want valid 3D EWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:329
# b73972b376794abf80f3a098e02bfdd1
msgid "Returns the Well-Known Text of the geometry (an OGC standard)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:334
# 713f759b5ae14e769f90d1e270e5ec35
msgid "Spatial Predicate Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:336
# fc25b1c6c75541449838106a2444dacc
msgid "All of the following spatial predicate methods take another :class:`GEOSGeometry` instance (``other``) as a parameter, and return a boolean."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:342
# 880648a28c1c4939863a9deb401b3950
msgid "Returns ``True`` if :meth:`GEOSGeometry.within` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:346
# 5d6d6a07a4764c41afc67b9a0767c68a
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two Geometries is ``T*T******`` (for a point and a curve,a point and an area or a line and an area) ``0********`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:352
# 35dec4d380de4db980c0b514f03d45a5
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``FF*FF****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:357
# 3ce31ce5513d4bc4bb6cd0727514a0bd
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``T*F**FFF*``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:362
# 03f379ef6b314c01b713a24078f62aa5
msgid "Returns true if the two geometries are exactly equal, up to a specified tolerance.  The ``tolerance`` value should be a floating point number representing the error tolerance in the comparison, e.g., ``poly1.equals_exact(poly2, 0.001)`` will compare equality to within one thousandth of a unit."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:370
# 4f034118013d4ac7949dd8b96f50b193
msgid "Returns ``True`` if :meth:`GEOSGeometry.disjoint` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:374
# 649e1c01b5484f889c150649f53f1421
msgid "Returns true if the DE-9IM intersection matrix for the two geometries is ``T*T***T**`` (for two points or two surfaces) ``1*T***T**`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:380
# 0b42480b85604a5a8ed1421d3cc4e99e
msgid "Returns ``True`` if the elements in the DE-9IM intersection matrix for this geometry and the other matches the given ``pattern`` -- a string of nine characters from the alphabet: {``T``, ``F``, ``*``, ``0``}."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:386
# 42f8be984acd4700a7f4352bf88dcea8
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``FT*******``, ``F**T*****`` or ``F***T****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:391
# 986189eca20b4da7b770a2592ff6542d
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``T*F**F***``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:395
# e506099dfd9c4601959216356fbe4f87
msgid "Topological Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:399
# ed5cad6647f24b35bf03b34cd1a1eaa0
msgid "Returns a :class:`GEOSGeometry` that represents all points whose distance from this geometry is less than or equal to the given ``width``. The optional ``quadsegs`` keyword sets the number of segments used to approximate a quarter circle (defaults is 8)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:406
# 0fbdef668feb40fd8ac266b64126c128
msgid "Returns a :class:`GEOSGeometry` representing the points making up this geometry that do not make up other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:411
# 4ee503037b7441489841db262b143cbb
msgid "Returns a :class:`GEOSGeometry` representing the points shared by this geometry and other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:416
# 01fdc19a1778430aaaf8d545d164cb38
msgid "Returns the DE-9IM intersection matrix (a string) representing the topological relationship between this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:421
# 3fce33224f7b4aa38b1c4bce079b6f85
msgid "Returns a new :class:`GEOSGeometry`, simplified using the Douglas-Peucker algorithm to the specified tolerance.  A higher tolerance value implies less points in the output.  If no tolerance is tolerance provided, it defaults to 0."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:426
# 7453a0ba417a44d988a39ef81db0c346
msgid "By default, this function does not preserve topology - e.g., :class:`Polygon` objects can be split, collapsed into lines or disappear. :class:`Polygon` holes can be created or disappear, and lines can cross. By specifying ``preserve_topology=True``, the result will have the same dimension and number of components as the input, however, this is significantly slower."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:435
# fa1d2dd7db4049ec989b309c84f05175
msgid "Returns a :class:`GEOSGeometry` combining the points in this geometry not in other, and the points in other not in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:440
# 75d3d9e047734b3380f40d4bcded5068
msgid "Returns a :class:`GEOSGeometry` representing all the points in this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:444
# 6d2f1bc83c4d494092ecfc79152e0578
msgid "Topological Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:448
# 15dc2097cba340489cedfe885ec748d2
msgid "Returns the boundary as a newly allocated Geometry object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:452
# b63748837c3b4b3cbd908d0aedac0577
msgid "Returns a :class:`Point` object representing the geometric center of the geometry.  The point is not guaranteed to be on the interior of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:458
# 62619ad6f66b425db4778ba46a8573f5
msgid "Returns the smallest :class:`Polygon` that contains all the points in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:463
# 7643dc907aba4b21922ba8ccac8b30bb
msgid "Returns a :class:`Polygon` that represents the bounding envelope of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:468
# 56c26c4155994b4fb02b2fc1088a53d0
msgid "Computes and returns a :class:`Point` guaranteed to be on the interior of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:472
# d33b74768c2e4ee0a19b3093efbc54d7
msgid "Other Properties & Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:476
# 4cd2f7b931e04bbbb08cb64b2aa67370
msgid "This property returns the area of the Geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:480
# 525ef927a50b48b3b229caf8e2f96c72
msgid "This property returns the extent of this geometry as a 4-tuple, consisting of (xmin, ymin, xmax, ymax)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:485
# 817f59532bbc42cb9048765aad990a1d
msgid "This method returns a :class:`GEOSGeometry` that is a clone of the original."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:489
# bb5a40858c444673b9bf72e3b9c14550
msgid "Returns the distance between the closest points on this geometry and the given ``geom`` (another :class:`GEOSGeometry` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:494
# 912248f55b2e47b080091ea4a9c40d63
msgid "GEOS distance calculations are  linear -- in other words, GEOS does not perform a spherical calculation even if the SRID specifies a geographic coordinate system."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:500
# 2b97f061a99b4d3fb67b23eaa024c1d2
msgid "Returns the length of this geometry (e.g., 0 for a :class:`Point`, the length of a :class:`LineString`, or the circumference of a :class:`Polygon`)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:508
# 296b990cece44a8593a59fdc06d613f9
msgid "Support for prepared geometries requires GEOS 3.1."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:510
# cd798693628049b38602f28b4ff67418
msgid "Returns a GEOS ``PreparedGeometry`` for the contents of this geometry. ``PreparedGeometry`` objects are optimized for the contains, intersects, and covers operations.  Refer to the :ref:`prepared-geometries` documentation for more information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:517
# 279fe290d3724f02b80c16624c52e537
msgid "Returns a :class:`~django.contrib.gis.gdal.SpatialReference` object corresponding to the SRID of the geometry or ``None``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:528
# 1cadf7afae314ceb8a816c181f227be7
msgid "Transforms the geometry according to the given coordinate transformation paramter (``ct``), which may be an integer SRID, spatial reference WKT string, a PROJ.4 string, a :class:`~django.contrib.gis.gdal.SpatialReference` object, or a :class:`~django.contrib.gis.gdal.CoordTransform` object. By default, the geometry is transformed in-place and nothing is returned. However if the ``clone`` keyword is set, then the geometry is not modified and a transformed clone of the geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:542
# 268e7709ff614ff997a0e8f240b1d662
msgid "Prior to 1.3, this method would silently no-op if GDAL was not available. Now, a :class:`~django.contrib.gis.geos.GEOSException` is raised as application code relying on this behavior is in error. In addition, use of this method when the SRID is ``None`` or less than 0 now generates a warning because a :class:`~django.contrib.gis.geos.GEOSException` will be raised instead in version 1.5."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:551
# 1f70b3839f3b4ad8b2ac73f175bfe818
msgid "``Point``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:555
# 8c7a9065b4664251867609f431697076
msgid "``Point`` objects are instantiated using arguments that represent the component coordinates of the point or with a single sequence coordinates.  For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:563
# 8a6592790e8945059f209fca64bff667
msgid "``LineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:567
# a8550f1dae794c30903b6516daa1bd6f
msgid "``LineString`` objects are instantiated using arguments that are either a sequence of coordinates or :class:`Point` objects. For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:574
# 29d97aa75d194a958b4cb84e0abd048f
msgid "In addition, ``LineString`` objects may also be created by passing in a single sequence of coordinate or :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:581
# 845b4bff600c401e8c58cf841af141a0
msgid "``LinearRing``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:585
# 28ea39ee7df84ed98569b02080e614e1
msgid "``LinearRing`` objects are constructed in the exact same way as :class:`LineString` objects, however the coordinates must be *closed*, in other words, the first coordinates must be the same as the last coordinates.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:592
# 1bbd9fb8fa3d48fdb4c4735b9925cefe
msgid "Notice that ``(0, 0)`` is the first and last coordinate -- if they were not equal, an error would be raised."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:596
# a3f0d561d30249058cb740360ec20034
msgid "``Polygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:600
# 1a8b099e9b7443c1886d125bdced5934
msgid "``Polygon`` objects may be instantiated by passing in one or more parameters that represent the rings of the polygon.  The parameters must either be :class:`LinearRing` instances, or a sequence that may be used to construct a :class:`LinearRing`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:612
# 483d6d8de5d048b787508b45927a3e51
msgid "Returns a polygon object from the given bounding-box, a 4-tuple comprising (xmin, ymin, xmax, ymax)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:617
# b2035c7ca4124d0bb7ccd23e40f4b68e
msgid "Returns the number of interior rings in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:620
# abcd0558e82548a791eb1d16fbdea34e
msgid "Geometry Collections"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:623
# 4424adfed8b249769272098ff0b49bf1
msgid "``MultiPoint``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:627
# 7fc4bd4661c6432c86482647785ebc76
msgid "``MultiPoint`` objects may be instantiated by passing in one or more :class:`Point` objects as arguments, or a single sequence of :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:635
# 86d97a9ea9a54c7a8edf6d63ba63db67
msgid "``MultiLineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:639
# 41d1ade424e44df8bd561defe79ba557
msgid "``MultiLineString`` objects may be instantiated by passing in one or more :class:`LineString` objects as arguments, or a single sequence of :class:`LineString` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:650
# 3adb72f843f04ee3ac1fb46826ce948c
msgid "Returns a :class:`LineString` representing the line merge of all the components in this ``MultiLineString``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:655
# 6a2aa28236cf4eaead618bbcf560701a
msgid "``MultiPolygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:659
# 9e563fc9bda9421a907dc36e6bd9c51d
msgid "``MultiPolygon`` objects may be instantiated by passing one or more :class:`Polygon` objects as arguments, or a single sequence of :class:`Polygon` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:670
# 47063a69359849ddb110389fbfc01c4c
msgid "Returns a :class:`Polygon` that is the union of all of the component polygons in this collection.  The algorithm employed is significantly more efficient (faster) than trying to union the geometries together individually. [#fncascadedunion]_"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:677
# 0b6a966a4fc547fdaab18a5e9c2b1ccb
msgid "GEOS 3.1 is *required* to peform cascaded unions."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:680
# edb6d2b5f58e441d9d8bece30f13b0b4
msgid "``GeometryCollection``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:684
# 0a5d043c9f1d4905bcdc25a9a6121298
msgid "``GeometryCollection`` objects may be instantiated by passing in one or more other :class:`GEOSGeometry` as arguments, or a single sequence of :class:`GEOSGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:695
# 767dfb0ac62041d597a4090112d675bf
msgid "Prepared Geometries"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:697
# ff019816a4b24429a1789eb085277f88
msgid "In order to obtain a prepared geometry, just access the :attr:`GEOSGeometry.prepared` property.  Once you have a ``PreparedGeometry`` instance its spatial predicate methods, listed below, may be used with other ``GEOSGeometry`` objects.  An operation with a prepared geometry can be orders of magnitude faster -- the more complex the geometry that is prepared, the larger the speedup in the operation.  For more information, please consult the `GEOS wiki page on prepared geometries <http://trac.osgeo.org/geos/wiki/PreparedGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:707
# 4ec89f5eab224632b88c91471532640d
msgid "GEOS 3.1 is *required* in order to use prepared geometries."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:718
# c0e196a0b19340a186b9cc5fefd1a938
msgid "``PreparedGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:722
# 486095d57fd74487b67bfbcee3c01d75
msgid "All methods on ``PreparedGeometry`` take an ``other`` argument, which must be a :class:`GEOSGeometry` instance."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:734
# 844fb0bf78174531bf4772fa24b0f141
msgid "Geometry Factories"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:761
# 8e4866ffc4c04a20b35704084e1a2c5f
msgid "I/O Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:764
# 021f6010cd16483f92773eac5543d51a
msgid "Reader Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:766
# 60f75581933f48b2adaf61920ef2624a
msgid "The reader I/O classes simply return a :class:`GEOSGeometry` instance from the WKB and/or WKT input given to their ``read(geom)`` method."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:788
# 82b01d1e5f374faaa1c63af7f9de6226
msgid "Writer Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:790
# a9857929a2bd4b29b0dd31da4e376614
msgid "All writer objects have a ``write(geom)`` method that returns either the WKB or WKT of the given geometry.  In addition, :class:`WKBWriter` objects also have properties that may be used to change the byte order, and or include the SRID and 3D values (in other words, EWKB)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:797
# 32536e2265654572b769db095fc01145
msgid "``WKBWriter`` provides the most control over its output.  By default it returns OGC-compliant WKB when it's ``write`` method is called.  However, it has properties that allow for the creation of EWKB, a superset of the WKB standard that includes additional information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:804
# 9115079125ec4599a42e3f544c01dd76
msgid "Returns the WKB of the given geometry as a Python ``buffer`` object. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:815
# fdd3ebdf3bb749fea3effac3e1bddbfc
msgid "Returns WKB of the geometry in hexadecimal.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:825
# fe4a5fd361aa4c38a178fa5bbfa48aef
msgid "This property may be be set to change the byte-order of the geometry representation."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:829
# d694d8fc2c4f483892d950ce0f5ccefc
msgid "Byteorder Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:831
# bf732463599f42479cabf413219fe1e0
msgid "Big Endian (e.g., compatible with RISC systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:832
# 89a85c2dfda44f48a8bc0daa41e62649
msgid "Little Endian (e.g., compatible with x86 systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:847
# 039863ec9e164c50b0aeddf7d97d30e6
msgid "This property may be set to change the output dimension of the geometry representation.  In other words, if you have a 3D geometry then set to 3 so that the Z value is included in the WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:852
# a961221007fe4de0b126cfec93ea1132
msgid "Outdim Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:854
# 495167c98c934d1087b4a5e2cbfe24cb
msgid "The default, output 2D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:855
# a4c9740c05424869b06b943d888049d5
msgid "Output 3D EWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:873
# 453fb20b061244faac4fdc711e43fc7c
msgid "Set this property with a boolean to indicate whether the SRID of the geometry should be included with the WKB representation.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:889
# 3416d33db2fa4dd4a6083678629b87f2
msgid "Returns the WKT of the given geometry. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:899
# dd95f6a9f02b43c9a0a0cd5af2e7cbf9
msgid "*See* `PostGIS EWKB, EWKT and Canonical Forms <http://postgis.refractions.net/docs/ch04.html#id2591381>`_, PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:900
# c94e1da09da947ada2586d0f2b0a824e
msgid "For more information, read Paul Ramsey's blog post about `(Much) Faster Unions in PostGIS 1.4 <http://blog.cleverelephant.ca/2009/01/must-faster-unions-in-postgis-14.html>`_ and Martin Davis' blog post on `Fast polygon merging in JTS using Cascaded Union <http://lin-ear-th-inking.blogspot.com/2007/11/fast-polygon-merging-in-jts-using.html>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:908
# 924acb87fcad477ca5eed67e6564666b
msgid "GEOS_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:910
# f09b51cff6f9469ebe01626ba5c339ae
msgid "A string specifying the location of the GEOS C library.  Typically, this setting is only used if the GEOS C library is in a non-standard location (e.g., ``/home/bob/lib/libgeos_c.so``)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:916
#: ../../ref/contrib/gis/install.txt:191
# d8b4e27f6e2f4ffa8d31b07f6adc3fab
# 486cc980c02e4d0d958f890e510b6183
msgid "The setting must be the *full* path to the **C** shared library; in other words you want to use ``libgeos_c.so``, not ``libgeos.so``."
msgstr ""

#: ../../ref/contrib/gis/index.txt:5
# 0a602134faa34ec2aa998e68ae1667a0
msgid "GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/index.txt:10
# 119958a595df456f85e6d9512fd92b4c
msgid "GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data."
msgstr ""

#: ../../ref/contrib/gis/install.txt:5
# 9774007285bf4a8bbd74a1848c971bff
msgid "GeoDjango Installation"
msgstr ""

#: ../../ref/contrib/gis/install.txt:11
# 010ff3caec20406b9f59e7a8b4d33c55
msgid "In general, GeoDjango installation requires:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:13
# 569348f31ce34a2c80ec67ab22ea698c
msgid ":ref:`Python and Django <django>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:14
# 7b779f8d57824556872c18c6d53033ff
msgid ":ref:`spatial_database`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:15
# eb8f278aa650458490dd24dea2833965
msgid ":ref:`geospatial_libs`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:17
# b5424c02cb8347329f9f55a94a1b3698
msgid "Details for each of the requirements and installation instructions are provided in the sections below.   In addition, platform-specific instructions are available for:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:21
# 60a56c2571814234a99eda7a23bccf86
msgid ":ref:`macosx`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:22
# e191851a8c4e411da70bd42bbe967eb8
msgid ":ref:`ubuntudebian`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:23
# a6d56b42b6634320b9e4febf00ede4a6
msgid ":ref:`windows`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:27
# f60a136fdff640a888fd4326769c56a6
msgid "Because GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren't available for your platform, :ref:`installation from source <build_from_source>` may be required. When compiling the libraries from source, please follow the directions closely, especially if you're a beginner."
msgstr ""

#: ../../ref/contrib/gis/install.txt:35
# 8b3ce1c320574d5da4db11b0def3ae99
msgid "Requirements"
msgstr ""

#: ../../ref/contrib/gis/install.txt:40
# 651bd289f10b4964b1ff11721c1f0024
msgid "Python and Django"
msgstr ""

#: ../../ref/contrib/gis/install.txt:42
# 418b0efcf0bf4ab29a25da482255b6f0
msgid "Because GeoDjango is included with Django, please refer to Django's :ref:`installation instructions <installing-official-release>` for details on how to install."
msgstr ""

#: ../../ref/contrib/gis/install.txt:50
# f8f5653f7b9f4647913dc73c0e888741
msgid "Spatial database"
msgstr ""

#: ../../ref/contrib/gis/install.txt:51
# 6c16dfa2ef2d4f4aa4e92548f17dee4a
msgid "PostgreSQL (with PostGIS), MySQL, Oracle, and SQLite (with SpatiaLite) are the spatial databases currently supported."
msgstr ""

#: ../../ref/contrib/gis/install.txt:56
# 0afd00d7e0c44d3b8f3304c9dfded38a
msgid "PostGIS is recommended, because it is the most mature and feature-rich open source spatial database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:59
# 2e5cdc2aa30441a98096038533c1d74f
msgid "The geospatial libraries required for a GeoDjango installation depends on the spatial database used.  The following lists the library requirements, supported versions, and any notes for each of the supported database backends:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
# 9ccff7feb6c8436ba4c4633c57344717
msgid "Database"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
# f23ba5ea357342feb92edb55558adf12
msgid "Library Requirements"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
#: ../../ref/contrib/gis/install.txt:80
# 74716ffb6b8f41c089ea41176a706869
# 18ba8bd7c2334b6abfe42f32bb52fcbf
msgid "Supported Versions"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
# b267430c7ec8410b96f6ce4e07136b1b
msgid "Notes"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
#: ../../ref/contrib/gis/install.txt:1190
# da8e3e284df84904a9ec3ef4546fc654
# 63daf72ecb644f3991793bda5f49413e
msgid "PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
# 4dfae8d505dc4ae0a7e8e6a947be6d02
msgid "GEOS, PROJ.4, PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
# 4961746adfaf4bfe80196ab33e17600e
msgid "8.1+"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
# 8f7a9d2dc375470cabae9a5bf0ea29f8
msgid "Requires PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:67
#: ../../ref/contrib/gis/install.txt:68
#: ../../ref/contrib/gis/install.txt:136
#: ../../ref/contrib/gis/install.txt:822
# ab5f504ee465408eb951419fe4b1d910
# 2aaeaaf5ba1649cd8e2fabf9673357f5
# 1e9eb70ee60c417cab7c610ef5c17700
# 6eaf0a9cd60b4006861493a180958927
msgid "GEOS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:67
# 4c81c50907f04e57be8bedf0e2779761
msgid "5.x"
msgstr ""

#: ../../ref/contrib/gis/install.txt:67
# 42f987c8593e40828c579ade277dfbe8
msgid "Not OGC-compliant; limited functionality."
msgstr ""

#: ../../ref/contrib/gis/install.txt:68
# 0f33cb1cd8c34f6097335b2c4f711849
msgid "10.2, 11"
msgstr ""

#: ../../ref/contrib/gis/install.txt:68
# c528bb8623b6494faedd4c49053d6111
msgid "XE not supported; not tested with 9."
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
#: ../../ref/contrib/gis/install.txt:384
# 928f003a1a754b52857ebf9a286e3b5c
# 0ffab50323a94490a6ecad438f24ffe7
msgid "SQLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
# 54892fb0ddec497899529667cf091167
msgid "GEOS, GDAL, PROJ.4, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
# d5c783044fe649ceab826f40cbb9a688
msgid "3.6.+"
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
# bd0377e80a9c4d55bb4a62e547092480
msgid "Requires SpatiaLite 2.3+, pysqlite2 2.5+, and Django 1.1."
msgstr ""

#: ../../ref/contrib/gis/install.txt:75
# fa31a9c43eb74b4cb046aa033cf2c80d
msgid "Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install.txt:76
# 4264e3a00bb940e4b00ffc03930526bf
msgid "GeoDjango uses and/or provides interfaces for the following open source geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:80
# 34a5b76e4ba04dd6b8b6bc5cb5a4a54e
msgid "Program"
msgstr ""

#: ../../ref/contrib/gis/install.txt:80
# 76bf3f41177847d9a200737dc8b8915a
msgid "Required"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
# 0e5a1ff192fd43309ceeb0f2c77cac68
msgid ":ref:`GEOS <ref-geos>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
# be3e092dc47b40e2bec9f651eb0ce54e
msgid "Geometry Engine Open Source"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
# f372e862d3a142dca9df20202bfa6b3c
msgid "Yes"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
# 6cd0f161cd6444d6a6e99f9eef6adc0c
msgid "3.3, 3.2, 3.1, 3.0"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
# d2a740d2fdd54a5d84445ce680edb387
msgid "`PROJ.4`_"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
# 6d64c998c9604aa5ae98fd661e156731
msgid "Cartographic Projections library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
# 4ed80a01857c4c5894e38f88f05aebb3
msgid "Yes (PostgreSQL and SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
# aba074a52ac04551b9d05a8c6bc87ad2
msgid "4.7, 4.6, 4.5, 4.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
# 3d9e7774250642c98734e6e9b5f392c0
msgid ":ref:`GDAL <ref-gdal>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
# c6011cea47144fbf9452b640f66eaf99
msgid "Geospatial Data Abstraction Library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
# f53ba4ed225b43efb3b2a94d99de5d85
msgid "No (but, required for SQLite)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
# dc09348e680948478fe6a6111ab2ac5b
msgid "1.8, 1.7, 1.6, 1.5, 1.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
# 51f530b0132944d09d405c8b7a15286a
msgid ":ref:`GeoIP <ref-geoip>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
# 38b1c614cb6546abab7349ea80f161d8
msgid "IP-based geolocation library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
# 15988765f9cb4fd8b7e7c662f0cd62b9
msgid "No"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
#: ../../ref/contrib/gis/install.txt:557
# 9d417d7659da413c9a2538b3ceb448d1
# c4ac255c0fb94135b069ca8763f0a27f
msgid "1.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
# 43ef555bf4d948a296719528239cf53a
msgid "`PostGIS`__"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
# c06a4a4a298d4f4c878a04ea360b6233
msgid "Spatial extensions for PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
# 6786330abf0e451682ab9f6786aef237
msgid "Yes (PostgreSQL only)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
# 0a6226acc9034e9e95e31b9388095307
msgid "1.5, 1.4, 1.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
# 50941e1971bd410e848cc393ff5c3c49
msgid "`SpatiaLite`__"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
# 25d64ec8b67b4b5da1f7aa1103fb740d
msgid "Spatial extensions for SQLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
# 8872c8c980964752a8e1f2f4be4f45e7
msgid "Yes (SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
# d8fc3258b75b44c5b808f359dbeedf16
msgid "3.0, 2.4, 2.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:92
# 888d4bac6d2442b692b69b4a47208a90
msgid "While :ref:`gdalbuild` is technically not required, it is *recommended*. Important features of GeoDjango (including the :ref:`ref-layermapping`, geometry reprojection, and the geographic admin) depend on its functionality."
msgstr ""

#: ../../ref/contrib/gis/install.txt:99
# 465d3651dc554e6493c14fe68a7c5ee0
msgid "The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently of Django.  In other words, no database or settings file required -- just import them as normal from :mod:`django.contrib.gis`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:110
# 6d7f0bf6711e4cd093194359a015056c
msgid "Building from source"
msgstr ""

#: ../../ref/contrib/gis/install.txt:112
# a186e88499e94a0b8e64b83ae1320c84
msgid "When installing from source on UNIX and GNU/Linux systems, please follow the installation instructions carefully, and install the libraries in the given order.  If using MySQL or Oracle as the spatial database, only GEOS is required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:119
# 1484c172c85545e3be361ca9c95fe260
msgid "On Linux platforms, it may be necessary to run the ``ldconfig`` command after installing each library.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:127
# 1ae68e7f40334aaa8ecb66b97873e5ac
msgid "OS X users are required to install `Apple Developer Tools`_ in order to compile software from source.  This is typically included on your OS X installation DVDs."
msgstr ""

#: ../../ref/contrib/gis/install.txt:138
# bc2a10eaa52a4fa9bd4cf014588c6f78
msgid "GEOS is a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it's behind the \"lazy\" geometries).  Specifically, the C API library is called (e.g., ``libgeos_c.so``) directly from Python using ctypes."
msgstr ""

#: ../../ref/contrib/gis/install.txt:143
# 8fead22e35e5495d8d726256048489aa
msgid "First, download GEOS 3.2 from the refractions Web site and untar the source archive::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:149
# 8ae7b67c0c924768a54fe841eb51a586
msgid "Next, change into the directory where GEOS was unpacked, run the configure script, compile, and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:159
#: ../../ref/contrib/gis/install.txt:300
#: ../../ref/contrib/gis/install.txt:655
#: ../../ref/contrib/gis/layermapping.txt:199
# 5fb26ea4e3c54c96a4a587a9af2146d7
# 8d599fa3684145658267529a50a0d44e
# 4b7817f2e3e64a4fba568844e4822d69
# f7de1f06ea694a8f8d9e1d5f9c3acd59
msgid "Troubleshooting"
msgstr ""

#: ../../ref/contrib/gis/install.txt:162
# fdb6bc54247a4654bb0c2e91be14b790
msgid "Can't find GEOS library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:164
# 4899bf8a158940a28ca7c5d8cb160ead
msgid "When GeoDjango can't find GEOS, this error is raised:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:170
# 979b9ce710534bb28f4f37fcb35dabea
msgid "The most common solution is to properly configure your :ref:`libsettings` *or* set :ref:`geoslibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install.txt:173
# 0f05125dbdf4472bbb715b52f719b870
msgid "If using a binary package of GEOS (e.g., on Ubuntu), you may need to :ref:`binutils`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:178
# e8d4c7a838184ccba802f8fe4447c5e3
msgid "``GEOS_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:180
# 8883db24e85b4e25be23609524820471
msgid "If your GEOS library is in a non-standard location, or you don't want to modify the system's library path then the :setting:`GEOS_LIBRARY_PATH` setting may be added to your Django settings file with the full path to the GEOS C library.  For example:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:197
# 0d787c29143d4fccb4c47b79fdc1b97f
msgid "PROJ.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:199
# 48cf6c3afb9d4437b7fd7f4fde3e9038
msgid "`PROJ.4`_ is a library for converting geospatial data to different coordinate reference systems."
msgstr ""

#: ../../ref/contrib/gis/install.txt:202
# 273e49af8f1144e881c797eae2e88b89
msgid "First, download the PROJ.4 source code and datum shifting files [#]_::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:207
# 55fb87a37ee349a283999b38d53fdd9d
msgid "Next, untar the source code archive, and extract the datum shifting files in the ``nad`` subdirectory.  This must be done *prior* to configuration::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:215
# 500478a564b345089b74e7bcab7b97f4
msgid "Finally, configure, make and install PROJ.4::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:227
# 4602d91e11c34dd9889abf06bcc623e0
msgid "`PostGIS`__ adds geographic object support to PostgreSQL, turning it into a spatial database. :ref:`geosbuild` and :ref:`proj4` should be installed prior to building PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:233
# 42f7000b9d734fa3bf78266f94080c5b
msgid "The `psycopg2`_ module is required for use as the database adaptor when using GeoDjango with PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:238
# 131e6d4cb27f467ca7af9e4feeae6788
msgid "First download the source archive, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:244
# 3f8bd5a708dd40c3a03396af6ca76f04
msgid "Next, configure, make and install PostGIS::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:248
# 6ee006f48f6a446bb036baf63805e085
msgid "Finally, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:256
# e8a1e833c06b4dfd8c85ca6ee239fc3a
msgid "GeoDjango does not automatically create a spatial database.  Please consult the section on :ref:`spatialdb_template` for more information."
msgstr ""

#: ../../ref/contrib/gis/install.txt:264
#: ../../ref/contrib/gis/install.txt:824
# e94d548ff8464245a3be64e52a974dd8
# f5f098c139e84140be4bae5e85358639
msgid "GDAL"
msgstr ""

#: ../../ref/contrib/gis/install.txt:266
# ec2a7542dc5e47aba4773521d7c6669a
msgid "`GDAL`__ is an excellent open source geospatial library that has support for reading most vector and raster spatial data formats.  Currently, GeoDjango only supports :ref:`GDAL's vector data <ref-gdal>` capabilities [#]_. :ref:`geosbuild` and :ref:`proj4` should be installed prior to building GDAL."
msgstr ""

#: ../../ref/contrib/gis/install.txt:271
# 936750a3415047aea32df9593b57361c
msgid "First download the latest GDAL release version and untar the archive::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:277
# c321a1580f3b42f3a024b081eab9bd8c
msgid "Configure, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:286
# e13b0f961f27439095c724c30013a8f2
msgid "Because GeoDjango has it's own Python interface, the preceding instructions do not build GDAL's own Python bindings.  The bindings may be built by adding the ``--with-python`` flag when running ``configure``.  See `GDAL/OGR In Python`__ for more information on GDAL's bindings."
msgstr ""

#: ../../ref/contrib/gis/install.txt:291
# 938f06ba972443c39f5a98dded3ea445
msgid "If you have any problems, please see the troubleshooting section below for suggestions and solutions."
msgstr ""

#: ../../ref/contrib/gis/install.txt:303
# 7668a3a60cbc4d4e894ba728d2ce7902
msgid "Can't find GDAL library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:305
# e08b95e3aba345cdb7b2edddfa427d2d
msgid "When GeoDjango can't find the GDAL library, the ``HAS_GDAL`` flag will be false:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:314
# 4fc56f9254254a52b5ab3fe3e46a38e0
msgid "The solution is to properly configure your :ref:`libsettings` *or* set :ref:`gdallibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install.txt:320
# c8bd173ba3164a27b4f76c7b50323609
msgid "``GDAL_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:322
# 003b54b873304284b10188db88b492a4
msgid "If your GDAL library is in a non-standard location, or you don't want to modify the system's library path then the :setting:`GDAL_LIBRARY_PATH` setting may be added to your Django settings file with the full path to the GDAL library.  For example:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:334
# 79135e46193e4249ae4c3203a294abe7
msgid "Can't find GDAL data files (``GDAL_DATA``)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:336
# 12c8bf1e3d4b468cadeabc839c47bf46
msgid "When installed from source, GDAL versions 1.5.1 and below have an autoconf bug that places data in the wrong location. [#]_   This can lead to error messages like this:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:346
# e8625a32bf2348fbacb4e785867a5671
msgid "The solution is to set the ``GDAL_DATA`` environment variable to the location of the GDAL data files before invoking Python  (typically ``/usr/local/share``; use ``gdal-config --datadir`` to find out). For example::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:353
# cc1511ed949a45469124b33075409c65
msgid "If using Apache, you may need to add this environment variable to your configuration file:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:367
# da0229c729384cb19eb0c9b6eab3ca9e
msgid "Mac OS X users should follow the instructions in the :ref:`kyngchaos` section, as it is much easier than building from source."
msgstr ""

#: ../../ref/contrib/gis/install.txt:370
# cd1b957cf5314e938bd7d368830fe2c8
msgid "`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-featured spatial database.  Because SpatiaLite has special requirements, it typically requires SQLite and pysqlite2 (the Python SQLite DB-API adaptor) to be built from source.  :ref:`geosbuild` and :ref:`proj4` should be installed prior to building SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/install.txt:376
# 2ac34861b3dc4370b461d9f6c02ca5c8
msgid "After installation is complete, don't forget to read the post-installation docs on :ref:`create_spatialite_db`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:386
# 5e13693eaffe4060ae9c368af986696e
msgid "Typically, SQLite packages are not compiled to include the `R*Tree module`__ -- thus it must be compiled from source.  First download the latest amalgamation source archive from the `SQLite download page`__, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:394
# b26f48ea48d347f29034f788ecdec4de
msgid "Next, run the ``configure`` script -- however the ``CFLAGS`` environment variable needs to be customized so that SQLite knows to build the R*Tree module::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:404
# 15f5824133624556beafa1b05db0f60e
msgid "If using Ubuntu, installing a newer SQLite from source can be very difficult because it links to the existing ``libsqlite3.so`` in ``/usr/lib`` which many other packages depend on.  Unfortunately, the best solution at this time is to overwrite the existing library by adding ``--prefix=/usr`` to the ``configure`` command."
msgstr ""

#: ../../ref/contrib/gis/install.txt:416
# 76f07fa00e304920a0e98708d8334d48
msgid "SpatiaLite library (``libspatialite``) and tools (``spatialite``)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:418
# 3d729e5934ba406e874aab12b30bf7ca
msgid "After SQLite has been built with the R*Tree module enabled, get the latest SpatiaLite library source and tools bundle from the `download page`__::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:426
# a86354a418284de1abba14ed82a96c67
msgid "Prior to attempting to build, please read the important notes below to see if customization of the ``configure`` command is necessary.  If not, then run the ``configure`` script, make, and install for the SpatiaLite library::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:436
# 3316146e8e5e4a029f8108491a69fef4
msgid "Finally, do the same for the SpatiaLite tools::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:446
# 43f7d4b6c98944d18b67e9ac94cdfe55
msgid "If you've installed GEOS and PROJ.4 from binary packages, you will have to specify their paths when running the ``configure`` scripts for *both* the library and the tools (the configure scripts look, by default, in ``/usr/local``).  For example, on Debian/Ubuntu distributions that have GEOS and PROJ.4 packages, the command would be::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:455
# bbcf5f914e384051bcded56bfc7957c4
msgid "For Mac OS X users building from source, the SpatiaLite library *and* tools need to have their ``target`` configured::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:465
#: ../../ref/contrib/gis/install.txt:872
# f14d91c561c846a3979973da94cdcf38
# 69a1b7041bf2464b816d110f05cfabfc
msgid "pysqlite2"
msgstr ""

#: ../../ref/contrib/gis/install.txt:467
# 14e5fd4c673b4048a959aa8418786d9f
msgid "Because SpatiaLite must be loaded as an external extension, it requires the ``enable_load_extension`` method, which is only available in versions 2.5+. Thus, download pysqlite2 2.6, and untar::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:475
# ca0928a00f7049fca3c1bb70066c1094
msgid "Next, use a text editor (e.g., ``emacs`` or ``vi``) to edit the ``setup.cfg`` file to look like the following:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:489
# 5e6a632c71844a9eafbc3365a2db03e4
msgid "The important thing here is to make sure you comment out the ``define=SQLITE_OMIT_LOAD_EXTENSION`` flag and that the ``include_dirs`` and ``library_dirs`` settings are uncommented and set to the appropriate path if the SQLite header files and libraries are not in ``/usr/include`` and ``/usr/lib``, respectively."
msgstr ""

#: ../../ref/contrib/gis/install.txt:495
# cf932a7bb46c47ad9d892e919f069c22
msgid "After modifying ``setup.cfg`` appropriately, then run the ``setup.py`` script to build and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:501
# d6a13dc5c997414bb2f928a063b883ca
msgid "Post-installation"
msgstr ""

#: ../../ref/contrib/gis/install.txt:506
# ef18278d98c04549bdd9703de285a947
msgid "Creating a spatial database template for PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:508
# c19c721c627e4b5aa57917e3283fec0a
msgid "Creating a spatial database with PostGIS is different than normal because additional SQL must be loaded to enable spatial functionality.  Because of the steps in this process, it's better to create a database template that can be reused later."
msgstr ""

#: ../../ref/contrib/gis/install.txt:513
# 6c26cb0efb0e4dccb3c7fee2920b8456
msgid "First, you need to be able to execute the commands as a privileged database user.  For example, you can use the following to become the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:520
# 2c7ca404fc2c4090a77c31bf7abdf0fb
msgid "The location *and* name of the PostGIS SQL files (e.g., from ``POSTGIS_SQL_PATH`` below) depends on the version of PostGIS. PostGIS versions 1.3 and below use ``<pg_sharedir>/contrib/lwpostgis.sql``; whereas version 1.4 uses ``<sharedir>/contrib/postgis.sql`` and version 1.5 uses ``<sharedir>/contrib/postgis-1.5/postgis.sql``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:526
# b5dd9c4a20564c7f8ecd2152cdee9e9e
msgid "To complicate matters, :ref:`ubuntudebian` distributions have their own separate directory naming system that changes each release."
msgstr ""

#: ../../ref/contrib/gis/install.txt:529
# 8826dcb8c5da4f978e7d4e2c30c22c60
msgid "The example below assumes PostGIS 1.5, thus you may need to modify ``POSTGIS_SQL_PATH`` and the name of the SQL file for the specific version of PostGIS you are using."
msgstr ""

#: ../../ref/contrib/gis/install.txt:533
# ed303fe2508f4a02a12a644898f996a4
msgid "Once you're a database super user, then you may execute the following commands to create a PostGIS spatial database template::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:550
# 7c9a64fec4ec441eb23981ae9666b76c
msgid "These commands may be placed in a shell script for later use; for convenience the following scripts are available:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:554
# 63fc32e648cd44768235c23a51b55d53
msgid "PostGIS version"
msgstr ""

#: ../../ref/contrib/gis/install.txt:554
# 0b52258de46645a2afcb00b6e840fdb5
msgid "Bash shell script"
msgstr ""

#: ../../ref/contrib/gis/install.txt:556
# d96af562874b4127bf2900b2347f161d
msgid "1.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:556
# fd9ddaae49cd4730bd59b9ff8fd76aec
msgid ":download:`create_template_postgis-1.3.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:557
# ce255edbfa2f45a48a8a2e007150691d
msgid ":download:`create_template_postgis-1.4.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:558
# 110dba88fe6d492398125cf5496722fa
msgid "1.5"
msgstr ""

#: ../../ref/contrib/gis/install.txt:558
# 3fbe5fa3900844cf88c1b75257e5becf
msgid ":download:`create_template_postgis-1.5.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:559
# e5da745c30104319a80b2ba63876c1a4
msgid "Debian/Ubuntu"
msgstr ""

#: ../../ref/contrib/gis/install.txt:559
# 94226ea009b44fcd913beb1734cbc1f8
msgid ":download:`create_template_postgis-debian.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:562
# 4650ec9dfb1b490f851d8884480455e1
msgid "Afterwards, you may create a spatial database by simply specifying ``template_postgis`` as the template to use (via the ``-T`` option)::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:569
# 73da2160518c43c7ad2053aa2e6d3620
msgid "While the ``createdb`` command does not require database super-user privileges, it must be executed by a database user that has permissions to create databases. You can create such a user with the following command::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:578
# 88d4eff83baf4e80bd876b3b0119fed1
msgid "Creating a spatial database for SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:580
# d7fb591a7f644b4388a000cbdeb5faa2
msgid "After you've installed SpatiaLite, you'll need to create a number of spatial metadata tables in your database in order to perform spatial queries."
msgstr ""

#: ../../ref/contrib/gis/install.txt:583
# 22c6096396ca4f6e9d87ab707a348079
msgid "If you're using SpatiaLite 3.0 or newer, use the ``spatialite`` utility to call the ``InitSpatiaMetaData()`` function, like this::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:591
# 5fc21d0d4aab463e81c57ae38ec81f35
msgid "You can safely ignore the error messages shown. When you've done this, you can skip the rest of this section."
msgstr ""

#: ../../ref/contrib/gis/install.txt:594
# 68c7aac45cd04c7eb4aa51b7efc5a6af
msgid "If you're using a version of SpatiaLite older than 3.0, you'll need to download a database-initialization file and execute its SQL queries in your database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:597
# 8254fafa4c8c481884c95683169328c9
msgid "First, get it from the appropriate SpatiaLite Resources page ( http://www.gaia-gis.it/spatialite-2.3.1/resources.html for 2.3 or http://www.gaia-gis.it/spatialite-2.4.0/ for 2.4)::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:604
# 8104f7a5552f4881bc0ab46b43d0d35c
msgid "Then, use the ``spatialite`` command to initialize a spatial database::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:610
# 564fb9a2be8349e1b03e03fa14176e89
msgid "The parameter ``geodjango.db`` is the *filename* of the SQLite database you want to use.  Use the same in the :setting:`DATABASES` ``\"name\"`` key inside your ``settings.py``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:615
# 0d03b8c8dc914c56a34dd7f673652cef
msgid "Add ``django.contrib.gis`` to :setting:`INSTALLED_APPS`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:617
# deeb4d6e9d4345e28ecbab0ee15c073e
msgid "Like other Django contrib applications, you will *only* need to add :mod:`django.contrib.gis` to :setting:`INSTALLED_APPS` in your settings. This is the so that ``gis`` templates can be located -- if not done, then features such as the geographic admin or KML sitemaps will not function properly."
msgstr ""

#: ../../ref/contrib/gis/install.txt:625
# 4298a1564da04a149936b39e32342a3c
msgid "Add Google projection to ``spatial_ref_sys`` table"
msgstr ""

#: ../../ref/contrib/gis/install.txt:631
# 74b0fb1adf3e4436bcfcac777ca86d41
msgid "If you're running PostGIS 1.4 or above, you can skip this step. The entry is already included in the default ``spatial_ref_sys`` table."
msgstr ""

#: ../../ref/contrib/gis/install.txt:634
# 7864096beefd46678fa5d8a244bac5d3
msgid "In order to conduct database transformations to the so-called \"Google\" projection (a spherical mercator projection used by Google Maps), an entry must be added to your spatial database's ``spatial_ref_sys`` table. Invoke the Django shell from your project and execute the ``add_srs_entry`` function:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:648
# 52bf8e5c9b8741f68c413e40358c4a14
msgid "In Django 1.1 the name of this function is ``add_postgis_srs``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:650
# 324e2fb14e564a488e71895fe70d400d
msgid "This adds an entry for the 900913 SRID to the ``spatial_ref_sys`` (or equivalent) table, making it possible for the spatial database to transform coordinates in this projection.  You only need to execute this command *once* per spatial database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:657
# 3304aabde14145158b26fbae6470c6ac
msgid "If you can't find the solution to your problem here then participate in the community!  You can:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:660
# 966f61c163bc48008fb0bd895cd91e21
msgid "Join the ``#geodjango`` IRC channel on FreeNode. Please be patient and polite -- while you may not get an immediate response, someone will attempt to answer your question as soon as they see it."
msgstr ""

#: ../../ref/contrib/gis/install.txt:663
# 31b823096b384bfea7304bb8b6192bf0
msgid "Ask your question on the `GeoDjango`__ mailing list."
msgstr ""

#: ../../ref/contrib/gis/install.txt:664
# 20164d58ecaf4200b1a4772a5c9957d4
msgid "File a ticket on the `Django trac`__ if you think there's a bug.  Make sure to provide a complete description of the problem, versions used, and specify the component as \"GIS\"."
msgstr ""

#: ../../ref/contrib/gis/install.txt:674
# 97c12ed6b2ee41e9ab2dcbd862901b1e
msgid "Library environment settings"
msgstr ""

#: ../../ref/contrib/gis/install.txt:676
# d0472d2b1b60475cb40e292b661c74ce
msgid "By far, the most common problem when installing GeoDjango is that the external shared libraries (e.g., for GEOS and GDAL) cannot be located. [#]_ Typically, the cause of this problem is that the operating system isn't aware of the directory where the libraries built from source were installed."
msgstr ""

#: ../../ref/contrib/gis/install.txt:681
# c517dad60ead4d6491933c07e4ae227d
msgid "In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system."
msgstr ""

#: ../../ref/contrib/gis/install.txt:686
# 11832d1f15c0471daabe1ce9f472ed93
msgid "``LD_LIBRARY_PATH`` environment variable"
msgstr ""

#: ../../ref/contrib/gis/install.txt:688
# 998de5addef845fca5089c3644ee1323
msgid "A user may set this environment variable to customize the library paths they want to use.  The typical library directory for software built from source is ``/usr/local/lib``.  Thus, ``/usr/local/lib`` needs to be included in the ``LD_LIBRARY_PATH`` variable.  For example, the user could place the following in their bash profile::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:697
# 75300b52535e437d961660a3eaacd007
msgid "Setting system library path"
msgstr ""

#: ../../ref/contrib/gis/install.txt:699
# 35eeb766e509436688ff8ba318847635
msgid "On GNU/Linux systems, there is typically a file in ``/etc/ld.so.conf``, which may include additional paths from files in another directory, such as ``/etc/ld.so.conf.d``. As the root user, add the custom library path (like ``/usr/local/lib``) on a new line in ``ld.so.conf``.  This is *one* example of how to do so::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:707
# 64fc5a5c4e904341b4244322753cf534
msgid "For OpenSolaris users, the system library path may be modified using the ``crle`` utility.  Run ``crle`` with no options to see the current configuration and use ``crle -l`` to set with the new library path.  Be *very* careful when modifying the system library path::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:717
# ced42622f00f498597db171fd9ad0098
msgid "Install ``binutils``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:719
# bc5e6c64db1e469c91d95a23d08fbdb8
msgid "GeoDjango uses the ``find_library`` function (from the ``ctypes.util`` Python module) to discover libraries.  The ``find_library`` routine uses a program called ``objdump`` (part of the ``binutils`` package) to verify a shared library on GNU/Linux systems.  Thus, if ``binutils`` is not installed on your Linux system then Python's ctypes may not be able to find your library even if your library path is set correctly and geospatial libraries were built perfectly."
msgstr ""

#: ../../ref/contrib/gis/install.txt:726
# d40ad4d63067441a937fa67e49ca2605
msgid "The ``binutils`` package may be installed on Debian and Ubuntu systems using the following command::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:731
# 7705c2b4222f42289dc4945ce9455ba1
msgid "Similarly, on Red Hat and CentOS systems::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:736
# 8d0a4d1b49394ab0a726515762c40d3c
msgid "Platform-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install.txt:741
# 833a2a2a4cb64addadab8dcc270aa2b7
msgid "Mac OS X"
msgstr ""

#: ../../ref/contrib/gis/install.txt:743
# 6b1b79cd830849e79f437c8bf01c9fce
msgid "Because of the variety of packaging systems available for OS X, users have several different options for installing GeoDjango. These options are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:746
# 1979b57c3de941c59d095dbc8b434972
msgid ":ref:`homebrew`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:747
# e8b0ab912b03471c91fa288ae5110655
msgid ":ref:`kyngchaos`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:748
# 4f5673af22c7417b9749703bdb20a903
msgid ":ref:`fink`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:749
# e9819ae96ee7430d8937d76452c9255c
msgid ":ref:`macports`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:750
# f68ad12ff73342aea614c4184f9541b6
msgid ":ref:`build_from_source`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:754
# 06087fae45f44b66b6f8a87b99750057
msgid "Currently, the easiest and recommended approach for installing GeoDjango on OS X is to use the KyngChaos packages."
msgstr ""

#: ../../ref/contrib/gis/install.txt:757
# 8369bba19c8644cdba8b4e7ab87833f6
msgid "This section also includes instructions for installing an upgraded version of :ref:`macosx_python` from packages provided by the Python Software Foundation, however, this is not required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:764
#: ../../ref/contrib/gis/install.txt:1174
# 2b1b3cecd6d742e195770c183910737f
# 67999966bcaf453aa1a77b9267fb712b
msgid "Python"
msgstr ""

#: ../../ref/contrib/gis/install.txt:766
# c69b4a6c6a204951b01f5ce0614a59aa
msgid "Although OS X comes with Python installed, users can use framework installers (`2.5`__ and `2.6`__ are available) provided by the Python Software Foundation.  An advantage to using the installer is that OS X's Python will remain \"pristine\" for internal operating system use."
msgstr ""

#: ../../ref/contrib/gis/install.txt:777
# 36e3aba06bb94a46a0cffdb8e75a397d
msgid "You will need to modify the ``PATH`` environment variable in your ``.profile`` file so that the new version of Python is used when ``python`` is entered at the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:786
# 0a2ee4269d3e449c9090fb97a7fc81af
msgid "Homebrew"
msgstr ""

#: ../../ref/contrib/gis/install.txt:788
# e49c10091e9a4fe88295e268966772f2
msgid "`Homebrew`__ provides \"recipes\" for building binaries and packages from source. It provides recipes for the GeoDjango prerequisites on Macintosh computers running OS X. Because Homebrew still builds the software from source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:793
#: ../../ref/contrib/gis/install.txt:935
# 7e956debbc29437eb7be7af321bbc5d7
# d8fb2b00a1de4dd980d42057c642c121
msgid "Summary::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:805
# bd41a540e8f4454285363b2a0bf924f1
msgid "KyngChaos packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:807
# 439e323284c143c6b2154e83827ef456
msgid "William Kyngesburye provides a number of `geospatial library binary packages`__ that make it simple to get GeoDjango installed on OS X without compiling them from source.  However, the `Apple Developer Tools`_ are still necessary for compiling the Python database adapters :ref:`psycopg2_kyngchaos` (for PostGIS) and :ref:`pysqlite2_kyngchaos` (for SpatiaLite)."
msgstr ""

#: ../../ref/contrib/gis/install.txt:815
# ddc104daa68f43748fdcb35ba4aadec2
msgid "SpatiaLite users should consult the :ref:`spatialite_kyngchaos` section after installing the packages for additional instructions."
msgstr ""

#: ../../ref/contrib/gis/install.txt:818
# b8327d7d1083426997201482516e2614
msgid "Download the framework packages for:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:820
# d813e7a9508a489eb91531e3a978fa15
msgid "UnixImageIO"
msgstr ""

#: ../../ref/contrib/gis/install.txt:821
# 195aafc8784447558245c616ed1a676d
msgid "PROJ"
msgstr ""

#: ../../ref/contrib/gis/install.txt:823
# 204b701e23b54e5c9a9cb63fd7247ff9
msgid "SQLite3 (includes the SpatiaLite library)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:826
# 3ceb4973fe0b43929e62dee89200b76e
msgid "Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them.  Afterwards, you can also install the KyngChaos binary packages for `PostgreSQL and PostGIS`__."
msgstr ""

#: ../../ref/contrib/gis/install.txt:830
# de79dd2755b94b08b654aec98d4409b8
msgid "After installing the binary packages, you'll want to add the following to your ``.profile`` to be able to run the package programs from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:845
# 2b490370fdd14afb8cbb69791149aed9
msgid "Use of these binaries requires Django 1.0.3 and above.  If you are using a previous version of Django (like 1.0.2), then you will have to add the following in your settings:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:857
#: ../../ref/contrib/gis/install.txt:1241
# b05d3adb44c44945a44a64c2a397825f
# 53fae1a6865b41499f6cef2b1c90fadd
msgid "psycopg2"
msgstr ""

#: ../../ref/contrib/gis/install.txt:859
# 70f1f058260241028d5609bb3ed0bf4d
msgid "After you've installed the KyngChaos binaries and modified your ``PATH``, as described above, ``psycopg2`` may be installed using the following command::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:866
# b2c20fd951ab4a4c85f7e0f67422798b
msgid "If you don't have ``pip``, follow the the :ref:`installation instructions <installing-official-release>` to install it."
msgstr ""

#: ../../ref/contrib/gis/install.txt:874
# 8dae079c4ba640e9b41f5d60e8e166fe
msgid "Follow the :ref:`pysqlite2` source install instructions, however, when editing the ``setup.cfg`` use the following instead:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:891
# 34077edbe76047a9b9a92a72641601e0
msgid "When :ref:`create_spatialite_db`, the ``spatialite`` program is required. However, instead of attempting to compile the SpatiaLite tools from source, download the `SpatiaLite Binaries`__ for OS X, and install ``spatialite`` in a location available in your ``PATH``.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:901
# 46691c078adf46de9da86895354bd3ec
msgid "Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, add the following to your ``settings.py``:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:913
# 3ef7cdd347f849f9b2108115c1cfed38
msgid "Fink"
msgstr ""

#: ../../ref/contrib/gis/install.txt:915
# 6bd4f0255c2a4c6a9bf78126e20c74a6
msgid "`Kurt Schwehr`__ has been gracious enough to create GeoDjango packages for users of the `Fink`__ package system.  The following packages are available, depending on which version of Python you want to use:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:919
# dbe5f8cc99924f749830b3c7e8e5c45c
msgid "``django-gis-py26``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:920
# f2462a4d79cf45968cd56863a4446d17
msgid "``django-gis-py25``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:921
# 5c2fa7cc35a04a0db1109e2ef81620a2
msgid "``django-gis-py24``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:929
# 5e95c263758946709f30db02db77a48f
msgid "MacPorts"
msgstr ""

#: ../../ref/contrib/gis/install.txt:931
# d364ca429ee541279323c623d1610f90
msgid "`MacPorts`__ may be used to install GeoDjango prerequisites on Macintosh computers running OS X.  Because MacPorts still builds the software from source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:946
# 3ff69170ea794bab81caaa0f29afc842
msgid "You will also have to modify the ``PATH`` in your ``.profile`` so that the MacPorts programs are accessible from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:951
# d25c51d369954bdc8515d082a58d2ac7
msgid "In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that the libraries can be found by Python::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:961
# b071410ebafd4db5ab43b28209e8e5c7
msgid "Ubuntu & Debian GNU/Linux"
msgstr ""

#: ../../ref/contrib/gis/install.txt:965
# 9189349232e1419ca5a186b9a478f41d
msgid "The PostGIS SQL files are not placed in the PostgreSQL share directory in the Debian and Ubuntu packages. Instead, they're located in a special directory depending on the release. In this case, use the :download:`create_template_postgis-debian.sh` script"
msgstr ""

#: ../../ref/contrib/gis/install.txt:973
# 5ad7d47d6a984695afe8967629cca7e8
msgid "Ubuntu"
msgstr ""

#: ../../ref/contrib/gis/install.txt:976
# f0ace6c405f445ea82138c9a8e87b018
msgid "11.10"
msgstr ""

#: ../../ref/contrib/gis/install.txt:978
# 158a6672b8ed471688d93c03cd25eddd
msgid "In Ubuntu 11.10, PostgreSQL was upgraded to 9.1. The installation commands are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:988
# 1be6323684d6475dbb287c44fc8a154b
msgid "10.04 through 11.04"
msgstr ""

#: ../../ref/contrib/gis/install.txt:990
# 9291f96e2b44499682eb3992908f4302
msgid "In Ubuntu 10.04, PostgreSQL was upgraded to 8.4 and GDAL was upgraded to 1.6. Ubuntu 10.04 uses PostGIS 1.4, while Ubuntu 10.10 uses PostGIS 1.5 (with geography support).  The installation commands are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1002
# 144da11b79b544fbb6a546a18a0744fe
msgid "8.10"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1004
# 21cc74ba76444408bf0c2e718da46482
msgid "Use the synaptic package manager to install the following packages:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1011
# 1501c82d72bd4307bbfcdd0e055fdd96
msgid "That's it!  For the curious, the required binary prerequisites packages are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1013
#: ../../ref/contrib/gis/install.txt:1087
# 1fd8a02549ea4e49b4d362a16f9c6aa7
# c51bf51d8bcf44a78820bef088fb8bdc
msgid "``binutils``: for ctypes to find libraries"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1014
# f8dc5fdccba74dfbaaab3675052b0065
msgid "``postgresql-8.3``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1015
# 2d81c5549ccb4c55a97e84c3d783684d
msgid "``postgresql-server-dev-8.3``: for ``pg_config``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1016
# 3995f052c6524b2b8489a6b235bceced
msgid "``postgresql-8.3-postgis``: for PostGIS 1.3.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1017
# 234058a16fb8424ca694560f32aa0bd8
msgid "``libgeos-3.0.0``, and ``libgeos-c1``: for GEOS 3.0.0"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1018
# c385eb44f6b547acaf20efa4f71971f9
msgid "``libgdal1-1.5.0``: for GDAL 1.5.0 library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1019
# c420bc2233de44cebc069c4c380ace58
msgid "``proj``: for PROJ 4.6.0 -- but no datum shifting files, see note below"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1020
#: ../../ref/contrib/gis/install.txt:1093
# 0cfcd29f230f435da80be2dc08fbf70a
# 5e701948443641b49d86554db2b95a02
msgid "``python-psycopg2``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1022
# 155bb054c727480aa56926bd5c471ec3
msgid "Optional packages to consider:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1024
# 15631dc1d3604f9f82593bcbaa4ccfba
msgid "``libgeoip1``: for :ref:`GeoIP <ref-geoip>` support"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1025
# 228766dbd3df4f5e89fe27dfae233da7
msgid "``gdal-bin``: for GDAL command line programs like ``ogr2ogr``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1026
# 1b3e1cbade3a43929e52cd32999acf49
msgid "``python-gdal`` for GDAL's own Python bindings -- includes interfaces for raster manipulation"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1030
# 5393b6c6871b40cda65587aa05b5efd5
msgid "On this version of Ubuntu the ``proj`` package does not come with the datum shifting files installed, which will cause problems with the geographic admin because the ``null`` datum grid is not available for transforming geometries to the spherical mercator projection. A solution is to download the datum-shifting files, create the grid file, and install it yourself:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1046
# dbae12d2c33e4a3a9097a06cdcb2fb53
msgid "Otherwise, the Ubuntu ``proj`` package is fine for general use as long as you do not plan on doing any database transformation of geometries to the Google projection (900913)."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1053
# 1dd0454b3f4349f4b9560be26c22a9a9
msgid "8.04 and lower"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1055
# a55d4f3888eb484e90b22988298706ce
msgid "The 8.04 (and lower) versions of Ubuntu use GEOS v2.2.3 in their binary packages, which is incompatible with GeoDjango.  Thus, do *not* use the binary packages for GEOS or PostGIS and build some prerequisites from source, per the instructions in this document; however, it is okay to use the PostgreSQL binary packages."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1060
# 6e0e4105f2a24ec9a14480c8618d198d
msgid "For more details, please see the Debian instructions for :ref:`etch` below."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1065
# a3065f04b7c14a4190306dcc0f889732
msgid "Debian"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1070
# e53cad3cb29b453aa50e8080fa10f540
msgid "4.0 (Etch)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1072
# 632d715ab3e7412987613c7948af8dc4
msgid "The situation here is the same as that of Ubuntu :ref:`heron` -- in other words, some packages must be built from source to work properly with GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1076
# e7ae5f40690f4228b88ac0916d503ea0
msgid "Binary packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1077
# f097af8d607a4931954d7fce3f46c477
msgid "The following command will install acceptable binary packages, as well as the development tools necessary to build the rest of the requirements:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1085
# eb70b708f1134e5a9c577819275c11e1
msgid "Required package information:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1088
# ba4d68aafe4a461f810c31a56edd5b0d
msgid "``bzip2``: for decompressing the source packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1089
# 87531543335d41a899937220c06eb572
msgid "``gcc``, ``g++``, ``make``: GNU developer tools used to compile the libraries"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1090
# 731a9793eb7648b4883d5d3992397cf1
msgid "``flex``: required to build PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1091
# a3436fed48ab4f5fb17101d23c72f67f
msgid "``postgresql-8.1``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1092
# 1ee785f853cb4bf9971bcd620ecda9d0
msgid "``postgresql-server-dev-8.1``: for ``pg_config``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1095
# f6484346825a4cfc9cd7eb66e66a019e
msgid "Optional packages:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1097
# 5681f4f6d57645fba8b7ac799675caf3
msgid "``libgeoip``: for :ref:`GeoIP <ref-geoip>` support"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1100
# dbab7f4463b246c6a1386a78721945f0
msgid "Source packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1101
# 7dd5d754a7f147d3a83c848cc12e4042
msgid "You will still have to install :ref:`geosbuild`, :ref:`proj4`, :ref:`postgis`, and :ref:`gdalbuild` from source.  Please follow the directions carefully."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1108
# 5e65221d65b747d2b361e9a20ee23c83
msgid "5.0 (Lenny)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1110
# 20eafdc91eb2437c931d013e425c532b
msgid "This version is comparable to Ubuntu :ref:`ibex`, so the command is very similar:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1119
# de51241f2c9c4c52aa9c7fff5f5d1137
msgid "This assumes that you are using PostgreSQL version 8.3. Else, replace ``8.3`` in the above command with the appropriate PostgreSQL version."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1124
# b679a740734148f9b518c6ef663f836b
msgid "Please read the note in the Ubuntu :ref:`ibex` install documentation about the ``proj`` package -- it also applies here because the package does not include the datum shifting files."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1131
# 99a5fdc904af432388e7f73d0a3be045
msgid "Post-installation notes"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1133
# 002dc41e815d4a928d9fa1771ce9d3fa
msgid "If the PostgreSQL database cluster was not initiated after installing, then it can be created (and started) with the following command:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1140
# 71cb3ce87f814353922b6eca666fb0a9
msgid "Afterwards, the ``/etc/init.d/postgresql-8.3`` script should be used to manage the starting and stopping of PostgreSQL."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1143
# 11fa0d79363f41fd9a54e5d25c26402e
msgid "In addition, the SQL files for PostGIS are placed in a different location on Debian 5.0 . Thus when :ref:`spatialdb_template` either:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1146
# c3df5c6e524e465faa29bbe868068550
msgid "Create a symbolic link to these files:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1153
# 076644b30bf14c25b5370c2c571d0fec
msgid "If not running PostgreSQL 8.3, then  replace ``8.3`` in the command above with the correct version."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1156
# b911d5af1bb941949c2539d4025d63fc
msgid "Or use the :download:`create_template_postgis-debian.sh` to create the spatial database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1161
#: ../../ref/contrib/gis/testing.txt:104
# f672bee62f8544ee8510cba9b5d1f3ae
# 46d9fb61974944e9bd217386df854781
msgid "Windows"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1163
# f300a41fd0a8403f87b486881adecf28
msgid "Proceed through the following sections sequentially in order to install GeoDjango on Windows."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1168
# c296804439cd4d259be136ed19da91ab
msgid "These instructions assume that you are using 32-bit versions of all programs.  While 64-bit versions of Python and PostgreSQL 9.0 are available, 64-bit versions of spatial libraries, like GEOS and GDAL, are not yet provided by the :ref:`OSGeo4W` installer."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1176
# 7c8cac5c168e4c7cbb58350c287aea49
msgid "First, download the latest `Python 2.7 installer`__ from the Python Web site. Next, run the installer and keep the defaults -- for example, keep 'Install for all users' checked and the installation path set as ``C:\\Python27``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1183
# 2aabcb2c70744038b7b3a70eaa998f1e
msgid "You may already have a version of Python installed in ``C:\\python`` as ESRI products sometimes install a copy there.  *You should still install a fresh version of Python 2.7.*"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1192
# c88443794f6b4d0fb834a72d4fefa4e1
msgid "First, download the latest `PostgreSQL 9.0 installer`__ from the `EnterpriseDB`__ Web site.  After downloading, simply run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1199
# 016a9b0a4c5740c28de256a7a92cf5c7
msgid "The PostgreSQL installer creates both a new Windows user to be the 'postgres service account' and a ``postgres`` database superuser You will be prompted once to set the password for both accounts -- make sure to remember it!"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1204
# ec0decc3ad24454dbeec7c9c68fb6a5c
msgid "When the installer completes, it will ask to launch the Application Stack Builder (ASB) on exit -- keep this checked, as it is necessary to install :ref:`postgisasb`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1210
# 8c8eadbb7ed54574af54624dc0b99601
msgid "If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A :menuselection:`PostgreSQL 9.0` start menu group will created and contains shortcuts for the ASB as well as the 'SQL Shell', which will launch a ``psql`` command window."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1224
# 0d051ce98dfe4ae88a3ef39121bd1152
msgid "From within the Application Stack Builder (to run outside of the installer, :menuselection:`Start --> Programs --> PostgreSQL 9.0`), select :menuselection:`PostgreSQL Database Server 9.0 on port 5432` from the drop down menu.  Next, expand the :menuselection:`Categories --> Spatial Extensions` menu tree and select :menuselection:`PostGIS 1.5 for PostgreSQL 9.0`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1230
# f6e3dbf93de649528db4c7f2b847d49d
msgid "After clicking next, you will be prompted to select your mirror, PostGIS will be downloaded, and the PostGIS installer will begin.  Select only the default options during install (e.g., do not uncheck the option to create a default PostGIS database)."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1237
# af2b46ad4a8a40359406ded0186920b4
msgid "You will be prompted to enter your ``postgres`` database superuser password in the 'Database Connection Information' dialog."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1243
# 52d6941f3c0949c1aa47f5d9bb85695b
msgid "The ``psycopg2`` Python module provides the interface between Python and the PostgreSQL database.  Download the latest `Windows installer`__ for your version of Python and PostgreSQL and run using the default settings. [#]_"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1252
# fdd739c5c41d424191389dde0093afcc
msgid "OSGeo4W"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1254
# c5972a9f0f8945a181b871c6d5918b6f
msgid "The `OSGeo4W installer`_ makes it simple to install the PROJ.4, GDAL, and GEOS libraries required by GeoDjango.  First, download the `OSGeo4W installer`_, and run it.  Select :menuselection:`Express Web-GIS Install` and click next. In the 'Select Packages' list, ensure that GDAL is selected; MapServer and Apache are also enabled by default, but are not required by GeoDjango and may be unchecked safely.  After clicking next, the packages will be automatically downloaded and installed, after which you may exit the installer."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1266
# 35e85b3105014b35b40f04a1ab9002a8
msgid "Modify Windows environment"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1268
# 6a13d35820414885b426bd0e259e7dc7
msgid "In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system ``Path``, as well as create ``GDAL_DATA`` and ``PROJ_LIB`` environment variables.  The following set of commands, executable with ``cmd.exe``, will set this up:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1284
# d559bfd8985348a2aed675142f9a5cce
msgid "For your convenience, these commands are available in the executable batch script, :download:`geodjango_setup.bat`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1289
# 89c7419b723a4f9983cdd950e18aba60
msgid "Administrator privileges are required to execute these commands. To do this, right-click on :download:`geodjango_setup.bat` and select :menuselection:`Run as administrator`. You need to log out and log back in again for the settings to take effect."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1296
# e3166b5a5b1142bc8ab5e86524548afa
msgid "If you customized the Python or OSGeo4W installation directories, then you will need to modify the ``OSGEO4W_ROOT`` and/or ``PYTHON_ROOT`` variables accordingly."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1301
# e407cd675bd743fd844e9914bf0b8daa
msgid "Install Django and set up database"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1303
# 696cac04140b49fe9eb141ae55579858
msgid "Finally, :ref:`install Django <installing-official-release>` on your system. You do not need to create a spatial database template, as one named ``template_postgis`` is created for you when installing PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1307
# 3e29e9cf63114cb2b5acedda19ce2b3c
msgid "To administer the database, you can either use the pgAdmin III program (:menuselection:`Start --> PostgreSQL 9.0 --> pgAdmin III`) or the SQL Shell (:menuselection:`Start --> PostgreSQL 9.0 --> SQL Shell`). For example, to create a ``geodjango`` spatial database and user, the following may be executed from the SQL Shell as the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1317
# 437b973ff9ad48529dfffb5123901577
msgid "The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ.4 string for the `Google projection (900913) <http://spatialreference.org/ref/epsg/900913/proj4>`_ requires the ``null`` grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1324
# e9b17352316246cf91af2236f0863b60
msgid "Specifically, GeoDjango provides support for the `OGR <http://gdal.org/ogr>`_ library, a component of GDAL."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1326
# aba4d6d6d65a4c9b9f4320f2932b4908
msgid "See `GDAL ticket #2382 <http://trac.osgeo.org/gdal/ticket/2382>`_."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1327
# 0452ed52e078419f8da9b85b40edbfff
msgid "GeoDjango uses the :func:`~ctypes.util.find_library` routine from :mod:`ctypes.util` to locate shared libraries."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1329
# 0a1a76b308f1497bbaee4061063ac7bf
msgid "The ``psycopg2`` Windows installers are packaged and maintained by `Jason Erickson <http://www.stickpeople.com/projects/python/win-psycopg/>`_."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:5
# b85d21246b374edca70354d7c5d5bb51
msgid "``LayerMapping`` data import utility"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:12
# 4065c70cfaf647c9929a23ac50bcba54
msgid "The :class:`LayerMapping` class provides a way to map the contents of vector spatial data files (e.g. shapefiles) into GeoDjango models."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:15
# e6e85bd0dd9248189fc30bff8e9c2d6f
msgid "This utility grew out of the author's personal needs to eliminate the code repetition that went into pulling geometries and fields out of a vector layer, converting to another coordinate system (e.g. WGS84), and then inserting into a GeoDjango model."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:22
# f7294cd3d59f41658f8f9142e31a4f88
msgid "Use of :class:`LayerMapping` requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:26
# b7f2c9fe830f4b47aecfd3b97af349e8
msgid "GIS data sources, like shapefiles, may be very large.  If you find that :class:`LayerMapping` is using too much memory, set :setting:`DEBUG` to ``False`` in your settings.  When :setting:`DEBUG` is set to ``True``, Django :ref:`automatically logs <faq-see-raw-sql-queries>` *every* SQL query -- thus, when SQL statements contain geometries, it is easy to consume more memory than is typical."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:36
# aa75bb474f7d44f7b96266f738532823
msgid "You need a GDAL-supported data source, like a shapefile (here we're using a simple polygon shapefile, ``test_poly.shp``, with three features)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:55
# b9d47eb062ca420ba9035436f83a2852
msgid "Now we define our corresponding Django model (make sure to use ``syncdb``)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:66
# 04f4ce3190ed414c8d27a098eea41f31
msgid "Use :class:`LayerMapping` to extract all the features and place them in the database::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:80
# a99200b4e6a64afab2ebbc6e2f331231
msgid "Here, :class:`LayerMapping` just transformed the three geometries from the shapefile in their original spatial reference system (WGS84) to the spatial reference system of the GeoDjango model (NAD83).  If no spatial reference system is defined for the layer, use the ``source_srs`` keyword with a :class:`~django.contrib.gis.gdal.SpatialReference` object to specify one."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:87
# 501559e57b45438db95e54dcecbd462d
msgid "``LayerMapping`` API"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:91
# 9abe0804c42e40c885d196c74766e077
msgid "The following are the arguments and keywords that may be used during instantiation of ``LayerMapping`` objects."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:95
#: ../../ref/contrib/webdesign.txt:40
#: ../../ref/models/fields.txt:514
#: ../../ref/signals.txt:72
#: ../../ref/signals.txt:289
#: ../../ref/signals.txt:315
#: ../../ref/templates/builtins.txt:994
#: ../../ref/templates/builtins.txt:2343
# 7edc902b175e4815a8a1ec0e508152fe
# 4c23de70175a45818edcd8d1c00573a0
# 09d127aac2e1448fbbf1f8c284d05549
# 35eacb0f539e415c9ee12a4bffbd555b
# b91fd1542d60467baebc53299f2da7fd
# 4b4b8d663ce542fe9fbc138a5dea44fd
# 00f05e55287b42228b9b497191d25952
# c35328b69cdf41139c9e8bc287fc5eb0
msgid "Argument"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:97
#: ../../ref/signals.txt:300
#: ../../ref/signals.txt:326
# ae5ad7646d4d4dab95992e0e20089841
# b331d036bf6a4f3f8674b95609591e9f
# cd39d03d42854c04a60388aa26564ae5
msgid "``model``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:97
# 2cb96f74c7f64c5e8f4ed17bb48b1f19
msgid "The geographic model, *not* an instance."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:99
# 570a993d00454587beaa074ed46b98b9
msgid "``data_source``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:99
# 5cad6c6961f74559aaa3fb15ba15cdd9
msgid "The path to the OGR-supported data source file (e.g., a shapefile).  Also accepts :class:`django.contrib.gis.gdal.DataSource` instances."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:103
#: ../../ref/contrib/gis/ogrinspect.txt:19
# 6dba6eab75ca4dc3a61ecea85b0f61ba
# 7d3c768f86784eeaa4cbcb2d5a417e33
msgid "``mapping``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:103
# b87f78984d8f4bc6af69c15a14455d5a
msgid "A dictionary: keys are strings corresponding to the model field, and values correspond to string field names for the OGR feature, or if the model field is a geographic then it should correspond to the OGR geometry type, e.g., ``'POINT'``, ``'LINESTRING'``, ``'POLYGON'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:114
# dc0fb693a4fa4e43a37543a39df209c0
msgid "``layer``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:114
# 1da96d6dc0234dc4819f019ffdb99138
msgid "The index of the layer to use from the Data Source (defaults to 0)"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:117
# 1a930abe27d94c4380f07f7273b618f3
msgid "``source_srs``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:117
# cc3902738e4e407b8c082c7b37923163
msgid "Use this to specify the source SRS manually (for example, some shapefiles don't come with a '.prj' file).  An integer SRID, WKT or PROJ.4 strings, and :class:`django.contrib.gis.gdal.SpatialReference` objects are accepted."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:123
# a56f43198d5c4f8890e20c6fa4faaddd
msgid "``encoding``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:123
# 6a26c30c21814ca1abf4b2f13d801b67
msgid "Specifies the character set encoding of the strings in the OGR data source.  For example, ``'latin-1'``, ``'utf-8'``, and ``'cp437'`` are all valid encoding parameters."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:128
# f9b531dca90f42efb2cb8e88157cc1b5
msgid "``transaction_mode``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:128
# f0ec1975e1c9443381e6e6a4d2ea5bb7
msgid "May be ``'commit_on_success'`` (default) or ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:131
# da52294938d14c7ea51a810ee8614567
msgid "Setting this to False will disable coordinate transformations.  In other words, geometries will be inserted into the database unmodified from their original state in the data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:136
#: ../../ref/models/fields.txt:252
# 05243a16cdd0462b8e1b689c14a385ae
# d3bb4845ac7947cdb7852514e9ad3389
msgid "``unique``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:136
# 28129aca22f348f4958cec1c9be3a86d
msgid "Setting this to the name, or a tuple of names, from the given  model will create models unique only to the given name(s). Geometries will from each feature will be added into the collection associated with the unique model.  Forces the transaction mode to be ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:143
#: ../../ref/signals.txt:305
#: ../../ref/signals.txt:332
# 014dfb1851564aa4900686cc40a39353
# 64b1a416f5b04a41bb0262a3f1f28ebc
# 692127cb7bad4830ad1b5bc645622416
msgid "``using``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:143
# 35304b5ab3ae482e8738d863b781bd6b
msgid "New in version 1.2.  Sets the database to use when importing spatial data.  Default is ``'default'``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:148
# 2ea9c827379940668a8dfcdb6203840d
msgid "``save()`` Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:152
# 0af092f15e784299b4b21c4ff5581806
msgid "The ``save()`` method also accepts keywords.  These keywords are used for controlling output logging, error handling, and for importing specific feature ranges."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:157
# 9ebe148182234afc9ba6179f0bdafaa9
msgid "Save Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:159
# 5c75833ef0e5484aa49e0dd197f2edae
msgid "``fid_range``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:159
# 484c6eba7c8643449b5463dafa9afdc7
msgid "May be set with a slice or tuple of (begin, end) feature ID's to map from the data source.  In other words, this keyword enables the user to selectively import a subset range of features in the geographic data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:166
# 4227334b6efb4231b95624c11dbda5fd
msgid "``progress``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:166
# 0df85bd0983a4de4aebc48f10206f438
msgid "When this keyword is set, status information will be printed giving the number of features processed and successfully saved.  By default, progress information will be printed every 1000 features processed, however, this default may be overridden by setting this keyword with an integer for the desired interval."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:174
# 2734cb8938bd4f57a45fbe5f562601bb
msgid "``silent``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:174
# 22ae7a62149d476a9d52e977ec72b300
msgid "By default, non-fatal error notifications are printed to ``sys.stdout``, but this keyword may be set to disable these notifications."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:178
# 5e0fdae0e1d74c50909f2018ec84aa18
msgid "``step``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:178
# c81529f715f8427999a52124d0500392
msgid "If set with an integer, transactions will occur at every step interval. For example, if ``step=1000``, a commit would occur after the 1,000th feature, the 2,000th feature etc."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:184
# 5638da0ce56f43949b46bae84ea6d225
msgid "``stream``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:184
# c23f6f856bfe41f29bd318c7af246d9d
msgid "Status information will be written to this file handle.  Defaults to using ``sys.stdout``, but any object with a ``write`` method is supported."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:188
# fc315278ffb84dc8a137923b0ad67408
msgid "``strict``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:188
# 009bce70e5d04f9d85a478a8653c8bc4
msgid "Execution of the model mapping will cease upon the first error encountered.  The default value (``False``) behavior is to attempt to continue."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:193
# 081389e668894ce0aff7b82543f1f8be
msgid "``verbose``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:193
# f3b6ece4249a4dab919e99dd012b02ae
msgid "If set, information will be printed subsequent to each model save executed on the database."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:202
# 19e1d7b395a549df9eb6d72c61bf3b88
msgid "Running out of memory"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:204
# 9ab5bd5ea676468c81fbab686df70703
msgid "As noted in the warning at the top of this section, Django stores all SQL queries when ``DEBUG=True``.  Set ``DEBUG=False`` in your settings, and this should stop excessive memory use when running ``LayerMapping`` scripts."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:209
# fb1018af8d8a4521acc81c50f721c3e4
msgid "MySQL: ``max_allowed_packet`` error"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:211
# 7cda5409711c47e7a76b44d89a4d98d8
msgid "If you encounter the following error when using ``LayerMapping`` and MySQL::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:215
# e0dbbcccd2314f859b91c843fa188502
msgid "Then the solution is to increase the value of the ``max_allowed_packet`` setting in your MySQL configuration.  For example, the default value may be something low like one megabyte -- the setting may be modified in MySQL's configuration file (``my.cnf``) in the ``[mysqld]`` section::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:5
# 73060eb7c83c4954a63c4f85989d150f
msgid "Measurement Objects"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:10
# 56346e761cca42a08114674e53270589
msgid "The :mod:`django.contrib.gis.measure` module contains objects that allow for convenient representation of distance and area units of measure. [#]_ Specifically, it implements two objects, :class:`Distance` and :class:`Area` -- both of which may be accessed via the :class:`D` and :class:`A` convenience aliases, respectively."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:19
# 76dbab7a52084bf3bc0008cd2bef9f87
msgid ":class:`Distance` objects may be instantiated using a keyword argument indicating the context of the units.  In the example below, two different distance objects are instantiated in units of kilometers (``km``) and miles (``mi``)::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:31
# 53bbf5917c1848c38b0a7449aeff67fd
msgid "Conversions are easy, just access the preferred unit attribute to get a converted distance quantity::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:39
# 85891dd9e5d248e39a61fdf158a99574
msgid "Moreover, arithmetic operations may be performed between the distance objects::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:47
# ef273d2700b94450bda796d526ccfb6a
msgid "Two :class:`Distance` objects multiplied together will yield an :class:`Area` object, which uses squared units of measure::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:54
# 9d1db66a6a214a0b8936bce1034138f1
msgid "To determine what the attribute abbreviation of a unit is, the ``unit_attname`` class method may be used::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:65
# f72d069af84a42f2aed1483ff2eb0159
msgid "Supported units"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
# 7f8f3cb30921442695d3060c657d7817
msgid "Unit Attribute"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
# 9cb23e7a0e0f45a698226659ace9fdb0
msgid "Full name or alias(es)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
# ce5c7157cb8e4fc591524e1f7aaa6a91
msgid "``km``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
# 354e33efa16440ce92a814016d744e78
msgid "Kilometre, Kilometer"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
# fb90c2032bfc4462bf95467f1adb46e1
msgid "``mi``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
# 6438b8cc8c8141078985e5b1562c74a2
msgid "Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
# 058110af5dbe42e382b1284f5c12fe58
msgid "``m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
# 5bee270dda04478a89c0a2ab271d84ce
msgid "Meter, Metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
# b31ab99bc013445a855b31ad11015eb4
msgid "``yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
# e995e4b8f41c4a8c8716a7dd98ec48ca
msgid "Yard"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
# a5d80be36b4f4c9b9f1bad26d6d28edc
msgid "``ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
# a7aab3799b4e46918e7e301c4b1bf96a
msgid "Foot, Foot (International)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
# 3fc2ae6cba0f45308d2f93508ddb18ea
msgid "``survey_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
# ee0e796d546a4a0698310e7cd2f4718f
msgid "U.S. Foot, US survey foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
# 77705a28dff241babdac57d7ba035561
msgid "``inch``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
# f856ae8197114876b0c67adafe23ea30
msgid "Inches"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
# c49f784714d146c8a2b20cdda2e59982
msgid "``cm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
# 704ec90166b04ad7a695f5c445110e54
msgid "Centimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
# 081de663be584edd9620eecc021abc84
msgid "``mm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
# a07b82fe771246aab095935261fa3f1c
msgid "Millimetre, Millimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
# f5a7ef7fbca84a4985dab63f154ed95f
msgid "``um``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
# 9dd8787db9ef47adb08aebf4442e206e
msgid "Micrometer, Micrometre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
# 6ae07bb0e008410ca2f29084d05133ef
msgid "``british_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
# ca3d9fb0bf8e4391991837b94fd9f3e7
msgid "British foot (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
# 78fd6b872583454e86bdc5a1e067e615
msgid "``british_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
# 28170113d32046e59e88a05c7fb455db
msgid "British yard (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
# ebfa88aae3424f49a45dfa4ea86a03dc
msgid "``british_chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
# 8cc46c79af5241109db7219883bc3db1
msgid "British chain (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
# ee3940fc66414db7ab17ae4debf9688b
msgid "``indian_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
# 5c15fb640dfb47fa84021421a46244ab
msgid "Indian yard, Yard (Indian)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
# 042537887c81463780ab84d9d70033ab
msgid "``sears_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
# e7ec6b3a89764365bd5380e88d7789e4
msgid "Yard (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
# be67201f7010407faaa5823c46ca30bc
msgid "``clarke_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
# 7df3c6c9a88546378cc1db7aa6c7f24f
msgid "Clarke's Foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
# 6e5f12e40f3c4c4db645ac3de6cdc59b
msgid "``chain``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
# 85f623e7ec9d4b768741bfafc795c1fa
msgid "Chain"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
# 1899518584f943d5b131f9b1d0506e77
msgid "``chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
# 2d133e58812045e9a6d8683e14200cd7
msgid "Chain (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
# d11fac9a01464ac4b2546a402f92896d
msgid "``chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
# b3b1bfe1c2854eef940440b7a82eda4b
msgid "Chain (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
# 8ca1a59a95d048768545ee04692a338d
msgid "``british_chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
# 9d986eaae450479bb1dec29210a1c221
msgid "British chain (Benoit 1895 B)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
# ead298d1a6f44e64a4cf3457a2cdf188
msgid "``british_chain_sears_truncated``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
# 431a0969ae0f425c951adb7dcb6c65fc
msgid "British chain (Sears 1922 truncated)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
# 46363cf3cd494f5e8be402d73411e98c
msgid "``gold_coast_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
# 4b2db14c9f664a45b82cfdf813e5bf61
msgid "Gold Coast foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
#: ../../ref/contrib/syndication.txt:824
#: ../../ref/contrib/syndication.txt:852
# 199a2304a8cc43d7b0798fa9a4098169
# f6972bc723e94ee8ab1c60b7c4169b3d
# 49ff54b3d2ec476fb80e2d4eee8202ce
msgid "``link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
# 2e8740600c2e4bc6a92a1898a458d611
msgid "Link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
# 51c5a61164b34fc0b43075182079f4b4
msgid "``link_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
# 8551fe82e3d54a33ba696410d87ee344
msgid "Link (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
# 721747b7acaf42d8945447752f7ef003
msgid "``link_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
# 4e6906bed14c4738b0788370fb24d903
msgid "Link (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
# a82d9abb1297415caa55ecdd159405b8
msgid "``clarke_link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
# 58262174f0a24de4b644d049986a942c
msgid "Clarke's link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
# 335585f21ca448f5b6a3afeec9391a6b
msgid "``fathom``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
# ddce8e49c5374851aee5bab9e91fe7ee
msgid "Fathom"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
# ea47ee11d51149a788e1b4e3018de9d2
msgid "``rod``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
# 8c5093c070d34e45a818c1e8553476ac
msgid "Rod"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
# 7221d57e2f0f4059b9b07ef3e62fb79a
msgid "``nm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
# 39bd6d454360403d8ff9928483ffba8d
msgid "Nautical Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:99
# 1ef206a290ab4a4ca9ffa2333f167429
msgid "``nm_uk``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:99
# efeb0279c6594b5d8a6586a93fde6e0a
msgid "Nautical Mile (UK)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:100
# 1adfe832d8d84ce1b571e3ebf8ce5150
msgid "``german_m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:100
# dcfc9eb792464b39b4bda628df316536
msgid "German legal metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:105
# d7961f105d684fd786202e9ffb856713
msgid ":class:`Area` attributes are the same as :class:`Distance` attributes, except they are prefixed with ``sq_`` (area units are square in nature). For example, ``Area(sq_m=2)`` creates an :class:`Area` object representing two square meters."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:111
# 96b83ba67b474bc3ac50329a0103875e
msgid "Measurement API"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:114
# 8707537a9c1c4ee087d46140d24d47c9
msgid "``Distance``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:118
# 7de8fdfc5a4142c9bc2897fa49eee7f2
msgid "To initialize a distance object, pass in a keyword corresponding to the desired :ref:`unit attribute name <supported_units>` set with desired value.  For example, the following creates a distance object representing 5 miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:127
# 27a1c75cf2204a6ea6230037680d6bbc
msgid "Returns the distance value in units corresponding to the given unit attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:135
# b9d211bb82a04c90ba142dd5d2a1d4d3
msgid "Returns the distance unit attribute name for the given full unit name. For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:143
# acf87065337448d5b65e48020a7fa7af
msgid "Alias for :class:`Distance` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:146
# 9cf46c69d3be4ee38076bbf6d4f215f5
msgid "``Area``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:150
# 8e8bc8cd93a94ad2881c284ba3e3cdd8
msgid "To initialize a distance object, pass in a keyword corresponding to the desired :ref:`unit attribute name <supported_units>` set with desired value.  For example, the following creates a distance object representing 5 square miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:159
# e1fe4d6d4e774605948c50d2f627b524
msgid "Returns the area value in units corresponding to the given unit attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:167
# 9789f784200d479a80f89d65bcadbfaa
msgid "Returns the area unit attribute name for the given full unit name. For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:175
# dc4777b9d7c24127bc748fae515bde54
msgid "Alias for :class:`Area` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:178
# 061248f07ac54a4db01d48902ba493d8
msgid "`Robert Coup <http://koordinates.com/>`_ is the initial author of the measure objects, and was inspired by Brian Beck's work in `geopy <http://code.google.com/p/geopy/>`_ and Geoff Biggs' PhD work on dimensioned units for robotics."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:5
# 4ce2ca8d319a4f9e8d75a5f4d557b293
msgid "GeoDjango Model API"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:10
# f1aa80bc846a448daa64c840cfc97da9
msgid "This document explores the details of the GeoDjango Model API.  Throughout this section, we'll be using the following geographic model of a `ZIP code`__ as our example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:24
# 96d57eab77624c4ba77afa5eed591994
msgid "Geometry Field Types"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:26
# caa9ea3c926d41f6b8870f1acd908f9c
msgid "Each of the following geometry field types correspond with the OpenGIS Simple Features specification [#fnogc]_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:30
# 19221ae72322459ab76f9661efdd6929
msgid "``GeometryField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:35
# a84c220fd305430da4a64d0fbe5ed266
msgid "``PointField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:40
# 74cdcefecf42486fac6078487d164249
msgid "``LineStringField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:45
# 9489054db5004162924055072a9928a8
msgid "``PolygonField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:50
# 00ebd36b8efd4ea4922316443b13caca
msgid "``MultiPointField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:55
# 561023a4c89f4a018009c7a512c11651
msgid "``MultiLineStringField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:60
# f3ee659195c641429a9e08e89aba3e68
msgid "``MultiPolygonField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:65
# 9f7c4f2b46d44c6eaf05c1b6704c41a1
msgid "``GeometryCollectionField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:72
# 2bf570170f1b41baa492e3c4e5b520ce
msgid "Geometry Field Options"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:74
# cec6ab437b074e7b878b5c0e5301adc5
msgid "In addition to the regular :ref:`common-model-field-options` available for Django model fields, geometry fields have the following additional options. All are optional."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:79
# 83b91a5c71d341ecba0d211f0cb89158
msgid "``srid``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:83
# d366c614d947472f843bfb579eb5b813
msgid "Sets the SRID [#fnogcsrid]_ (Spatial Reference System Identity) of the geometry field to the given value. Defaults to 4326 (also known as `WGS84`__, units are in degrees of longitude and latitude)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:92
# d4cd42bcc0ef49dbb41fee813cdda23f
msgid "Selecting an SRID"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:94
# 0b0f7b5d3ba14ae7bceed81a314f5192
msgid "Choosing an appropriate SRID for your model is an important decision that the developer should consider carefully.  The SRID is an integer specifier that corresponds to the projection system that will be used to interpret the data in the spatial database. [#fnsrid]_  Projection systems give the context to the coordinates that specify a location.  Although the details of `geodesy`__ are beyond the scope of this documentation, the general problem is that the earth is spherical and representations of the earth (e.g., paper maps, Web maps) are not."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:103
# e63d1acfb0c34348887f1a2bc489eab9
msgid "Most people are familiar with using latitude and longitude to reference a location on the earth's surface.  However, latitude and longitude are angles, not distances. [#fnharvard]_  In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an *arc* of a `great circle`__. [#fnthematic]_  Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles).  Using a geographic coordinate system may introduce complications for the developer later on.  For example, PostGIS versions 1.4 and below do not have the capability to perform distance calculations between non-point geometries using geographic coordinate systems, e.g., constructing a query to  find all points within 5 miles of a county boundary stored as WGS84. [#fndist]_"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:116
# 663d902132b94572a958d47ee0bd5b3c
msgid "Portions of the earth's surface may projected onto a two-dimensional, or Cartesian, plane.  Projected coordinate systems are especially convenient for region-specific applications, e.g., if you know that your database will only cover geometries in `North Kansas`__, then you may consider using projection system specific to that region.  Moreover, projected coordinate systems are defined in Cartesian units (such as meters or feet), easing distance calculations."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:126
# 60ed103108494a80889e5c94b84c4b70
msgid "If you wish to peform arbitrary distance queries using non-point geometries in WGS84, consider upgrading to PostGIS 1.5. For better performance, enable the :attr:`GeometryField.geography` keyword so that :ref:`geography database type <geography-type>` is used instead."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:132
# 98714fe7b7624827b736ad2778478bba
msgid "Additional Resources:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:134
# bac837f829a0462cb4e1dcf0f0dce35f
msgid "`spatialreference.org`__: A Django-powered database of spatial reference systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:136
# 0d1bb4b0744b4f0da1af66ae91deae7e
msgid "`The State Plane Coordinate System`__: A Web site covering the various projection systems used in the United States.  Much of the U.S. spatial data encountered will be in one of these coordinate systems rather than in a geographic coordinate system such as WGS84."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:148
# bccf7045e4974e108d228a11b85ad6a9
msgid "``spatial_index``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:152
# 503fe20a45bf467b877eaba30cf75e6b
msgid "Defaults to ``True``.  Creates a spatial index for the given geometry field."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:157
# a7aac4ecf3d44406a2b60e6b7edcac62
msgid "This is different from the ``db_index`` field option because spatial indexes are created in a different manner than regular database indexes.  Specifically, spatial indexes are typically created using a variant of the R-Tree, while regular database indexes typically use B-Trees."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:164
# 7c681fd190ea4fa6959199e06847f834
msgid "``dim``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:170
# 5b36cfc4584f48e8bc5bb2e54b7c8d1c
msgid "This option may be used for customizing the coordinate dimension of the geometry field.  By default, it is set to 2, for representing two-dimensional geometries.  For spatial backends that support it, it may be set to 3 for three-dimensonal support."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:177
# 64f5589d100c481bb7f441986ce52308
msgid "At this time 3D support requires that GEOS 3.1 be installed, and is limited only to the PostGIS spatial backend."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:181
# c81953f38d474c0cb8b18c592a7c5099
msgid "``geography``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:187
# 896a69ea67c641199f78448ca2418a5b
msgid "If set to ``True``, this option will create a database column of type geography, rather than geometry.  Please refer to the :ref:`geography type <geography-type>` section below for more details."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:194
# d2c4a8d9282f4d61aa63329c01e929cf
msgid "Geography support is limited only to PostGIS 1.5+, and will force the SRID to be 4326."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:200
# 9541396e166b4170a5a915731f753e4f
msgid "Geography Type"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:202
# e11f258c6f0044a893068264f843dfe7
msgid "In PostGIS 1.5, the geography type was introduced -- it provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). [#fngeography]_ Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data.  Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units.  In other words, when ``ST_Distance`` is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:212
# a447ad0a8fca4aec81fe5cb7fcc56569
msgid "Because geography calculations involve more mathematics, only a subset of the PostGIS spatial lookups are available for the geography type. Practically, this means that in addition to the :ref:`distance lookups <distance-lookups>` only the following additional :ref:`spatial lookups <spatial-lookups>` are available for geography columns:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:223
# 23c82bf3eea74b76b6776e1522e5e366
msgid "For more information, the PostGIS documentation contains a helpful section on determining `when to use geography data type over geometry data type <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#PostGIS_GeographyVSGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:228
# 1e5b4689c34346deb587430542d9ba65
msgid "``GeoManager``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:233
# bf40c48be0394854bb116c8a509c0d9f
msgid "In order to conduct geographic queries, each geographic model requires a ``GeoManager`` model manager.  This manager allows for the proper SQL construction for geographic queries; thus, without it, all geographic filters will fail.  It should also be noted that ``GeoManager`` is required even if the model does not have a geographic field itself, e.g., in the case of a ``ForeignKey`` relation to a model with a geographic field.  For example, if we had an ``Address`` model with a ``ForeignKey`` to our ``Zipcode`` model::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:253
# 25e9cf602e824a78afa0aa7e3d1dd916
msgid "The geographic manager is needed to do spatial queries on related ``Zipcode`` objects, for example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:259
# e3b3e2a3ef15476e8606eb7b9448a57c
msgid "OpenGIS Consortium, Inc., `Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document 99-049 (May 5, 1999)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:260
# 0cd67528bb7748b68f15cd733045432b
msgid "*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference Systems)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:261
# 20ff193282484e7da2041b42171c891d
msgid "Typically, SRID integer corresponds to an EPSG (`European Petroleum Survey Group <http://www.epsg.org>`_) identifier.  However, it may also be associated with custom projections defined in spatial database's spatial reference systems table."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:262
# 4f30e64154784f14b5c0f4b9a51e8265
msgid "Harvard Graduate School of Design, `An Overview of Geodesy and Geographic Referencing Systems <http://www.gsd.harvard.edu/gis/manual/projections/fundamentals/>`_.  This is an excellent resource for an overview of principles relating to geographic and Cartesian coordinate systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:263
# eb13cc9a317245d4b555a215db5f3f6a
msgid "Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, *Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd edition), at Ch. 7.1.3."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:264
# b6ece51bb942421ea28bf4132207afb1
msgid "This limitation does not apply to PostGIS 1.5.  It should be noted that even in previous versions of PostGIS, this isn't impossible using GeoDjango; you could for example, take a known point in a projected coordinate system, buffer it to the appropriate radius, and then perform an intersection operation with the buffer transformed to the geographic coordinate system."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:265
# 0289ee1bb845425290141735da125eb0
msgid "Please refer to the `PostGIS Geography Type <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#PostGIS_Geography>`_ documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:5
# 935454a03d2b44f7a9db1b24133fd855
msgid "OGR Inspection"
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:13
# 776c9c62e4104dcc950da68641479c81
msgid "``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:3
# a97ba5dac8cc4ef0b632a60b90a4d7fd
msgid "Geographic Sitemaps"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:5
# 9a7bd05c88eb4af388ce6953f74c3dd4
msgid "Google's sitemap protocol has been recently extended to support geospatial content. [#]_   This includes the addition of the ``<url>`` child element ``<geo:geo>``, which tells Google that the content located at the URL is geographic in nature. [#]_"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:14
# 292797c57ef34057ae0cb6d4e9683f6b
msgid "Reference"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:17
# ab60d751f0044622b8c72dda06b2cee7
msgid "``KMLSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:20
# 5f6be73d52724a7a8611d58d7ade5ef0
msgid "``KMZSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:23
# 2df4945baa6f456fa6fa38d31f34cb51
msgid "``GeoRSSSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:26
# 974ba3dca3d24c6b81baaea93710a860
msgid "Google, Inc., `What is a Geo Sitemap? <http://www.google.com/support/webmasters/bin/answer.py?answer=94554>`_."
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:27
# 6e68a4cadcb44c27847fda24aca4bc05
msgid "Google, Inc., `Submit Your Geo Content to Google <http://code.google.com/apis/kml/documentation/kmlSearch.html>`_."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:3
# de96e8ae91fa4a86a8ad98b95745e01a
msgid "Testing GeoDjango apps"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:7
# 5683856230464bc59d26cd35bea4e9b7
msgid "In Django 1.2, the addition of :ref:`spatial-backends` simplified the process of testing GeoDjango applications. The process is now the same as :doc:`/topics/testing`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:11
# ffe2da74e4b9474ea1500f8965d79aec
msgid "Included in this documentation are some additional notes and settings for :ref:`testing-postgis` and :ref:`testing-spatialite` users."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:24
# eb203c47a97245569d34744460974025
msgid "The settings below have sensible defaults, and shouldn't require manual setting."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:29
# 3c12a60973f642bc9577885282723d84
msgid "``POSTGIS_TEMPLATE``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:33
# 9e7a3f199a894c3680570e44a610c3b6
msgid "This setting may be used to customize the name of the PostGIS template database to use. In Django versions 1.2 and above, it automatically defaults to ``'template_postgis'`` (the same name used in the :ref:`installation documentation <spatialdb_template>`)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:41
# c1ad530a3a734163a33afcd9ae815f65
msgid "``POSTGIS_VERSION``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:43
# b3b8f65683f5480d9c9e42fb485c2913
msgid "When GeoDjango's spatial backend initializes on PostGIS, it has to perform a SQL query to determine the version in order to figure out what features are available. Advanced users wishing to prevent this additional query may set the version manually using a 3-tuple of integers specifying the major, minor, and subminor version numbers for PostGIS. For example, to configure for PostGIS 1.5.2 you would use::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:53
# b503d0ea9c9d443c962317ac5cbe0e5d
msgid "Obtaining sufficient privileges"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:55
# d8584784a50f4336bb88027362143ce4
msgid "Depending on your configuration, this section describes several methods to configure a database user with sufficient privileges to run tests for GeoDjango applications on PostgreSQL. If your :ref:`spatial database template <spatialdb_template>` was created like in the instructions, then your testing database user only needs to have the ability to create databases. In other configurations, you may be required to use a database superuser."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:64
# e3668a2ac2f440048b087a88a91d71a5
msgid "Create database user"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:66
# 550c0c14b8c24f708899ea5959131373
msgid "To make a database user with the ability to create databases, use the following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:71
# fb32e8aaaa284cab9e47555caceb9653
msgid "The ``-R -S`` flags indicate that we do not want the user to have the ability to create additional users (roles) or to be a superuser, respectively."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:74
# 10598414f1eb4787a503167e9dc218e9
msgid "Alternatively, you may alter an existing user's role from the SQL shell (assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:80
# ff978537cbc748c28e8e54f69f946fce
msgid "Create database superuser"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:82
# dc1333e73c0241178a08e3ed49387324
msgid "This may be done at the time the user is created, for example::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:86
# 1ed1163a3a444b1e8455839e386ebd76
msgid "Or you may alter the user's role from the SQL shell (assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:93
# 169266a6c6f546519e8c444d85a69ecf
msgid "Create local PostgreSQL database"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:95
# 45cc16d4208e4247a37826fed6a06de4
msgid "Initialize database: ``initdb -D /path/to/user/db``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:97
# 7b6726a756c34d67a00e5f0e4c3d3579
msgid "If there's already a Postgres instance on the machine, it will need to use a different TCP port than 5432. Edit ``postgresql.conf`` (in ``/path/to/user/db``) to change the database port (e.g. ``port = 5433``)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:101
# d1e7fa5a938342b883659ea9efee411b
msgid "Start this database ``pg_ctl -D /path/to/user/db start``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:106
# b300109127ee4fe3b50109eb4638c0f0
msgid "On Windows platforms the pgAdmin III utility may also be used as a simple way to add superuser privileges to your database user."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:109
# 871ba073593f4c9d87515f859f7e6d9c
msgid "By default, the PostGIS installer on Windows includes a template spatial database entitled ``template_postgis``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:117
# 5886436d128744ceb3c719d0e68d2b9a
msgid "Make sure the necessary spatial tables are created in your test spatial database, as described in :ref:`create_spatialite_db`. Then just do this::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:128
# 29d56722af254f089ffe0b622cd4b446
msgid "``SPATIALITE_SQL``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:130
# 74aa73a1e5fc48f1a53e33adf81c743c
msgid "Only relevant when using a SpatiaLite version older than 3.0."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:132
# 85d967b4dd274d7a935f2b0718f6195a
msgid "By default, the GeoDjango test runner looks for the SpatiaLite SQL in the same directory where it was invoked (by default the same directory where ``manage.py`` is located). To use a different location, add the following to your settings::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:142
# 359d8482ca4a4e3498873dbb838d2c90
msgid "GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:146
# 749d3344748343f1988e5363afa23c58
msgid "GeoDjango's test suite may be run in one of two ways, either by itself or with the rest of :ref:`Django's unit tests <running-unit-tests>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:150
# 7ef0b82649e843e6996e8e14e3dcf695
msgid "Run only GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:152
# 8ff17338995c4dbd9a7af71280090951
msgid "To run *only* the tests for GeoDjango, the :setting:`TEST_RUNNER` setting must be changed to use the :class:`~django.contrib.gis.tests.GeoDjangoTestSuiteRunner`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:161
# 27a4790fd08943ae84137015cbc59707
msgid "First, you'll need a bare-bones settings file, like below, that is customized with your spatial database name and user::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:174
# 332af22783334364a292250187df69a4
msgid "Assuming the above is in a file called ``postgis.py`` that is in the the same directory as ``manage.py`` of your Django project, then you may run the tests with the following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:181
# 893465e8ae1d4948b65e5640748a7dcd
msgid "Run with ``runtests.py``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:183
# 6001c6cdf1294caeb7c73df68c31e9c9
msgid "To have the GeoDjango tests executed when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` all of the databases in the settings file must be using one of the :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:190
# 168b0aaf645f4d01b10be1c146fb6c26
msgid "Do not change the :setting:`TEST_RUNNER` setting when running the GeoDjango tests with ``runtests.py``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:196
# 75969dd84fce45689e331e6fd0de5e66
msgid "The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in :mod:`django.contrib.gis`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:213
# 36c5966822704273a4b3e1d42e6f8be0
msgid "Assuming the settings above were in a ``postgis.py`` file in the same directory as ``runtests.py``, then all Django and GeoDjango tests would be performed when executing the command::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:3
# ab68c44dc48a4123ba6756943171cffc
msgid "GeoDjango Tutorial"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:8
# a8650dd178a54192bd13e8dcb11001a8
msgid "GeoDjango is an add-on for Django that turns it into a world-class geographic Web framework.  GeoDjango strives to make it as simple as possible to create geographic Web applications, like location-based services.  Some features include:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:13
# 1eb5e0f4f9924bfeb400a5a9e83ee217
msgid "Django model fields for `OGC`_ geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:14
# 49b97e968083402c91cdc8536b1d80b7
msgid "Extensions to Django's ORM for the querying and manipulation of spatial data."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:15
# c83f129f4e674f21aebe7bd4cb5de2fc
msgid "Loosely-coupled, high-level Python interfaces for GIS geometry operations and data formats."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:17
# ad351e8df59c4b4db8b0423a948bdb3d
msgid "Editing of geometry fields inside the admin."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:19
# f8cda0e62e4e4e28aa9c17891c3791e1
msgid "This tutorial assumes a familiarity with Django; thus, if you're brand new to Django please read through the :doc:`regular tutorial </intro/tutorial01>` to introduce yourself with basic Django concepts."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:25
# 9c8147d1279b4c28b51e00b882ed0855
msgid "GeoDjango has special prerequisites overwhat is required by Django -- please consult the :ref:`installation documentation <ref-gis-install>` for more details."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:29
# 3c93de4f53f24e819318d0c09c5730f3
msgid "This tutorial will guide you through the creation of a geographic Web application for viewing the `world borders`_. [#]_ Some of the code used in this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ project. [#]_"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:36
# 6fb35653eed04046ba66dddaa449cdfa
msgid "Proceed through the tutorial sections sequentially for step-by-step instructions."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:44
# 864510511c7a4170a8154cad8a8e9c28
msgid "Setting Up"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:47
# 190bdd1ee9984066a850438228ed523e
msgid "Create a Spatial Database"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:51
# f653ace29acd4ebfa9e3e27a0307771b
msgid "MySQL and Oracle users can skip this section because spatial types are already built into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:54
# 87d25326cf49460cb48b5cce66ae54e5
msgid "First, a spatial database needs to be created for our project.  If using PostgreSQL and PostGIS, then the following commands will create the database from a :ref:`spatial database template <spatialdb_template>`:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:65
# 3b145d01135b4f9080dc5626d89f5372
msgid "This command must be issued by a database user that has permissions to create a database.  Here is an example set of commands to create such a user:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:75
# 43fcada3604047f7ac259b438c6ed1fe
msgid "Replace ``geo`` with the system login user name that will be connecting to the database.  For example, ``johndoe`` if that is the system user that will be running GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:79
# 65a0328851df484aafcb88c74edfdbf0
msgid "Users of SQLite and SpatiaLite should consult the instructions on how to create a :ref:`SpatiaLite database <create_spatialite_db>`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:83
# 0a97c525c25147e7aa06d317bb0c9d03
msgid "Create GeoDjango Project"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:85
# 0008e2ba175d4a658ab59a510069fd44
msgid "Use the ``django-admin.py`` script like normal to create a ``geodjango`` project:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:92
# cb9b7863204f4f9b9b10df88c8fc3c0d
msgid "With the project initialized, now create a ``world`` Django application within the ``geodjango`` project:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:101
# 4001e92b0c4549649bd5f893930fbfe9
msgid "Configure ``settings.py``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:103
# 9dfee547791d4d57840c01ab240d50b8
msgid "The ``geodjango`` project settings are stored in the ``geodjango/settings.py`` file. Edit the database connection settings appropriately::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:114
# 865c3b1fac664f05afbfa091e5e465dd
msgid "In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (our newly created application)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:131
# 2ecc947fbcb845c9b1496cfc356f07b2
msgid "Geographic Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:136
# 60aa25dabbd7439b80ea51bbe444669a
msgid "World Borders"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:138
# 03346b5c7594489c815c388a1b338afa
msgid "The world borders data is available in this `zip file`__.  Create a data directory in the ``world`` application, download the world borders data, and unzip. On GNU/Linux platforms the following commands should do it:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:150
# dbe4a2689a5d4932a6989c2a4a70b929
msgid "The world borders ZIP file contains a set of data files collectively known as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  When unzipped the world borders data set includes files with the following extensions:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:155
# 2d99fd0d62f14b719d8d2c0ba83c524a
msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:156
# 9ff93d71be9c4c2e9c7f518b1bc73462
msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:157
# 23be58d2fb484df0b81ea1a7cfcf89ab
msgid "``.dbf``: Database file for holding non-geometric attribute data (e.g., integer and character fields)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:159
# 8840b1368fdb4b88a52c651c2164f071
msgid "``.prj``: Contains the spatial reference information for the geographic data stored in the shapefile."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:166
# 408f1740f9624e0dbd1757c8e050c766
msgid "Use ``ogrinfo`` to examine spatial data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:168
# e566201549cd4cc4a0675bfcd8039a04
msgid "The GDAL ``ogrinfo`` utility is excellent for examining metadata about shapefiles (or other vector data sources):"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:178
# 73183f9db95348718206f7e11d58f8d1
msgid "Here ``ogrinfo`` is telling us that the shapefile has one layer, and that such layer contains polygon data.  To find out more we'll specify the layer name and use the ``-so`` option to get only important summary information:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:210
# 48b1ba3c1fcf49348b6ce66c6f343d60
msgid "This detailed summary information tells us the number of features in the layer (246), the geographical extent, the spatial reference system (\"SRS WKT\"), as well as detailed information for each attribute field.  For example, ``FIPS: String (2.0)`` indicates that there's a ``FIPS`` character field with a maximum length of 2; similarly, ``LON: Real (8.3)`` is a floating-point field that holds a maximum of 8 digits up to three decimal places.  Although this information may be found right on the `world borders`_ Web site, this shows you how to determine this information yourself when such metadata is not provided."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:221
# 6d0c2a3c854e40a2bd2533594bae3814
msgid "Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:224
# 836186eb78ae422aa7d534dc1e66baa2
msgid "Defining a Geographic Model"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:226
# b6488ce10eee4720884e24322934a60f
msgid "Now that we've examined our world borders data set using ``ogrinfo``, we can create a GeoDjango model to represent this data::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:255
# 97fdd3555d2543c3913b1f028158582a
msgid "Two important things to note:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:257
# 3a763239cf354c6b903a7fcb767ee801
msgid "The ``models`` module is imported from :mod:`django.contrib.gis.db`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:258
# 9c730a9b4e65400f8935175b15dd91c6
msgid "The model overrides its default manager with :class:`~django.contrib.gis.db.models.GeoManager`; this is *required* to perform spatial queries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:262
# 8a7beb3b45714ecfb7ac77f761978b74
msgid "When declaring a geometry field on your model the default spatial reference system is WGS84 (meaning the `SRID`__ is 4326) -- in other words, the field coordinates are in longitude/latitude pairs in units of degrees.  If you want the coordinate system to be different, then SRID of the geometry field may be customized by setting the ``srid`` with an integer corresponding to the coordinate system of your choice."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:272
# 24bd2d62a137494aa24c9fab5862c89f
msgid "Run ``syncdb``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:274
# a39348f331274247a673e7e304a4c2b5
msgid "After you've defined your model, it needs to be synced with the spatial database. First, let's look at the SQL that will generate the table for the ``WorldBorder`` model::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:280
# 02c26be8769c4ac28c30a939e1675af6
msgid "This management command should produce the following output:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:305
# fe3e65a7b6b649ad9c9405a6b9451744
msgid "If satisfied, you may then create this table in the database by running the ``syncdb`` management command::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:312
# 009a91bddb8b4a37ae7c1909ffbd2de1
msgid "The ``syncdb`` command may also prompt you to create an admin user; go ahead and do so (not required now, may be done at any point in the future using the ``createsuperuser`` management command)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:317
# f10447e7a74c41d8865e536cddc9e628
msgid "Importing Spatial Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:319
# 7d4db629955948649f9e060c50cb440b
msgid "This section will show you how to take the data from the world borders shapefile and import it into GeoDjango models using the :ref:`ref-layermapping`. There are many different ways to import data in to a spatial database -- besides the tools included within GeoDjango, you may also use the following to populate your spatial database:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:326
# 449ebd1278cd4152a2f0f2a68311e2a0
msgid "`ogr2ogr`_: Command-line utility, included with GDAL, that supports loading a multitude of vector data formats into the PostGIS, MySQL, and Oracle spatial databases."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:329
# 2ac04dc8eb444ca78c917ea37a7263d2
msgid "`shp2pgsql`_: This utility is included with PostGIS and only supports ESRI shapefiles."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:338
# dfbc9786884e4bb1bd34711ea3445e5b
msgid "GDAL Interface"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:340
# 4489c4697bfe42bb88a9ef43e3820bf1
msgid "Earlier we used the ``ogrinfo`` to explore the contents of the world borders shapefile.  Included within GeoDjango is an interface to GDAL's powerful OGR library -- in other words, you'll be able explore all the vector data sources that OGR supports via a Pythonic API."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:345
# 5d5a72c83ef44ca49a5c3a85af188a86
msgid "First, invoke the Django shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:351
# b5aa0ec5911a494e9899a3af037932b4
msgid "If the :ref:`worldborders` data was downloaded like earlier in the tutorial, then we can determine the path using Python's built-in ``os`` module::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:360
# 4e21fad74df547d5b14d4c6b393c6b27
msgid "Now, the world borders shapefile may be opened using GeoDjango's :class:`~django.contrib.gis.gdal.DataSource` interface::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:368
# bea6ea64c6e44ce89bec266c16547824
msgid "Data source objects can have different layers of geospatial features; however, shapefiles are only allowed to have one layer::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:377
# 1ed4a24931014a8293807108ac1cd5a0
msgid "You can see what the geometry type of the layer is and how many features it contains::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:387
# 727fe9a8a5974067946828fb90856efc
msgid "Unfortunately the shapefile data format does not allow for greater specificity with regards to geometry types.  This shapefile, like many others, actually includes ``MultiPolygon`` geometries in its features.  You need to watch out for this when creating your models as a GeoDjango ``PolygonField`` will not accept a ``MultiPolygon`` type geometry -- thus a ``MultiPolygonField`` is used in our model's definition instead."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:395
# 96544392bc624653bfed0feff78ca790
msgid "The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial reference system associated with it -- if it does, the ``srs`` attribute will return a :class:`~django.contrib.gis.gdal.SpatialReference` object::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:409
# c95fb292502e41d4a2f70d8df255bf9a
msgid "Here we've noticed that the shapefile is in the popular WGS84 spatial reference system -- in other words, the data uses units of degrees longitude and latitude."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:413
# 5668cef4ea53489fbc2a1bf3cac1e162
msgid "In addition, shapefiles also support attribute fields that may contain additional data.  Here are the fields on the World Borders layer:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:419
# a10c7108419f40bcb0c6a5c9af7dbc4d
msgid "Here we are examining the OGR types (e.g., whether a field is an integer or a string) associated with each of the fields:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:425
# d334133c67364d2894df04b97ed36359
msgid "You can iterate over each feature in the layer and extract information from both the feature's geometry (accessed via the ``geom`` attribute) as well as the feature's attribute fields (whose **values** are accessed via ``get()`` method)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:438
# c0d58c27ff8e44d0a608ffcf30440c86
msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:443
# d969a472cad043e09a487d3a2b84ea6b
msgid "And individual features may be retrieved by their feature ID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:449
# 33159642f9f74cd4abcc556fa4c034a9
msgid "Here the boundary geometry for San Marino is extracted and looking exported to WKT and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:460
# 99807ae13e9442bf927c37c14c8bcc45
msgid "``LayerMapping``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:462
# 24c9224ffe2749989d412d4eb559752f
msgid "We're going to dive right in -- create a file called ``load.py`` inside the ``world`` application, and insert the following::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:492
# 432e12539df44483bbd96e9009645136
msgid "A few notes about what's going on:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:494
# b04d9f984b644e9a9f745cedc3569f95
msgid "Each key in the ``world_mapping`` dictionary corresponds to a field in the ``WorldBorder`` model, and the value is the name of the shapefile field that data will be loaded from."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:497
# 7c46d871e4d040af8a6f1e9586ebb356
msgid "The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry type we wish to import as.  Even if simple polygons are encountered in the shapefile they will automatically be converted into collections prior to insertion into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:501
# 0b3bcf47bb334460b1f7ec15b45003c8
msgid "The path to the shapefile is not absolute -- in other words, if you move the ``world`` application (with ``data`` subdirectory) to a different location, then the script will still work."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:504
# 4a1da899201d436292b2bd91850208dc
msgid "The ``transform`` keyword is set to ``False`` because the data in the shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:506
# 3c062849220542fcafaf2165b9d01870
msgid "The ``encoding`` keyword is set to the character encoding of string values in the shapefile. This ensures that string values are read and saved correctly from their original encoding system."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:510
# 19606335afaf4d42bd2958d355aa0ca1
msgid "Afterwards, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:516
# 8f5ef7d0e7f64bb0bc7b272d840bd3ec
msgid "Next, import the ``load`` module, call the ``run`` routine, and watch ``LayerMapping`` do the work::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:526
# 23e7b07951c9400699063c719067b11b
msgid "Try ``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:527
# 7e109a37e81e4b69a6e43aaa8334154d
msgid "Now that you've seen how to define geographic models and import data with the :ref:`ref-layermapping`, it's possible to further automate this process with use of the :djadmin:`ogrinspect` management command.  The :djadmin:`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and ``LayerMapping`` dictionary automatically."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:533
# 01f88a25b07d44d791dd7e9c0f3558f3
msgid "The general usage of the command goes as follows:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:539
# 7db4e643bc664692a51acb376848de43
msgid "Where ``data_source`` is the path to the GDAL-supported data source and ``model_name`` is the name to use for the model.  Command-line options may be used to further define how the model is generated."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:543
# 235ba93d08754daf871c84d91277cfd5
msgid "For example, the following command nearly reproduces the ``WorldBorder`` model and mapping dictionary created above, automatically:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:551
# 4132e2364b2b4e78a23c748c8c020e94
msgid "A few notes about the command-line options given above:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:553
# 0ffd2213c5e143aeb920e7d4f0fee13d
msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:554
# 18bf54667efd4c8fb424b19e2afa6e7f
msgid "The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:557
# 95d3fe4648ee4f7890edb16c10881615
msgid "The ``--multi`` option is specified so that the geographic field is a :class:`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:561
# 1eccf8ada84d4b6ba04cd7f5d287f634
msgid "The command produces the following output, which may be copied directly into the ``models.py`` of a GeoDjango application::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:599
# 62840dab06a74905ba68799ef449749c
msgid "Spatial Queries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:603
# 7ef720ed59fd4ab8848080bb712b51c5
msgid "GeoDjango extends the Django ORM and allows the use of spatial lookups. Let's do an example where we find the ``WorldBorder`` model that contains a point.  First, fire up the management shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:611
# 363645bd7fcd40a593d6a1cef3c8295e
msgid "Now, define a point of interest [#]_::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:615
# 24d861ab962d414c9075d681433b70ee
msgid "The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, and 29.7245 degrees latitude.  The geometry is in a format known as Well Known Text (WKT), an open standard issued by the Open Geospatial Consortium (OGC). [#]_  Import the ``WorldBorder`` model, and perform a ``contains`` lookup using the ``pnt_wkt`` as the parameter::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:626
# 02430f21f3d24357bb4034969c3dd812
msgid "Here we retrieved a ``GeoQuerySet`` that has only one model: the one for the United States (which is what we would expect).  Similarly, a :ref:`GEOS geometry object <ref-geos>` may also be used -- here the ``intersects`` spatial lookup is combined with the ``get`` method to retrieve only the ``WorldBorder`` instance for San Marino instead of a queryset::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:638
# d56939975ce945dba4d64c4ea6ff40d5
msgid "The ``contains`` and ``intersects`` lookups are just a subset of what's available -- the :ref:`ref-gis-db-api` documentation has more."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:642
# 120b49ef6aa24c2aaacba9700fa894aa
msgid "Automatic Spatial Transformations"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:643
# 7a2e39eba59b473295cbee66c3c2f19f
msgid "When querying the spatial database GeoDjango automatically transforms geometries if they're in a different coordinate system.  In the following example, the coordinate will be expressed in terms of `EPSG SRID 32140`__, a coordinate system specific to south Texas **only** and in units of **meters** and not degrees::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:652
# 7530da4f2dbf4856bfacfc37ed537bd2
msgid "Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of WKT that includes the SRID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:657
# 305e220dfcb54abda6a166118ded70c9
msgid "When using GeoDjango's ORM, it will automatically wrap geometry values in transformation SQL, allowing the developer to work at a higher level of abstraction::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:675
# 49aee9ae9f5644a282ac9b1d29a695c6
msgid "Lazy Geometries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:676
# 958be4b91488497186a2e2feafafcdeb
msgid "Geometries come to GeoDjango in a standardized textual representation.  Upon access of the geometry field, GeoDjango creates a `GEOS geometry object <ref-geos>`, exposing powerful functionality, such as serialization properties for popular geospatial formats::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:691
# 6cfbe2b43a16462cae28bdfefa5e4bb3
msgid "This includes access to all of the advanced geometric operations provided by the GEOS library::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:705
# 3e5cb813832c4bd6bb7ec1f5546185de
msgid "Putting your data on the map"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:708
# d10331335529494c9b247da438b9c65b
msgid "Google"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:711
# 910f3b11fb0947c1b132ded6dcf0d050
msgid "Geographic Admin"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:713
# 2c7de6dade844bb4bf902ac87895c5ae
msgid "GeoDjango extends :doc:`Django's admin application </ref/contrib/admin/index>` to enable support for editing geometry fields."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:717
#: ../../ref/templates/api.txt:16
# 3dc18c57b33d46aea7e28140019b6719
# 94681b070d6b4635962c32445b4bc6da
msgid "Basics"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:719
# fbbda47e66ab438699c5fa0d418305fa
msgid "GeoDjango also supplements the Django admin by allowing users to create and modify geometries on a JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:722
# 89612f8815e845b5a97db03b69c06d11
msgid "Let's dive in again -- create a file called ``admin.py`` inside the ``world`` application, and insert the following::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:730
# 8c80f9bb2cf64b8ab41add9fac541b26
msgid "Next, edit your ``urls.py`` in the ``geodjango`` application folder to look as follows::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:742
# 1535ba128dac4eb09232db74f00b5d2f
msgid "Start up the Django development server:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:748
# e08c809c374e4ca0a6b15ae5529393fc
msgid "Finally, browse to ``http://localhost:8000/admin/``, and log in with the admin user created after running ``syncdb``.  Browse to any of the ``WorldBorder`` entries -- the borders may be edited by clicking on a polygon and dragging the vertexes to the desired position."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:763
# 1d8ba596989a466e8d28aa0a8f376499
msgid "With the :class:`~django.contrib.gis.admin.OSMGeoAdmin`, GeoDjango uses a `Open Street Map`_ layer in the admin. This provides more context (including street and thoroughfare details) than available with the :class:`~django.contrib.gis.admin.GeoModelAdmin` (which uses the `Vector Map Level 0`_ WMS data set hosted at `OSGeo`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:769
# 39f2bc462a064ca5995163669ac60e93
msgid "First, there are some important requirements and limitations:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:771
# c448eb4478ec4350a810c0596308b3fe
msgid ":class:`~django.contrib.gis.admin.OSMGeoAdmin` requires that the :ref:`spherical mercator projection be added <addgoogleprojection>` to the ``spatial_ref_sys`` table (PostGIS 1.3 and below, only)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:774
# 5b051123aff34911a6d37f2cac447e91
msgid "The PROJ.4 datum shifting files must be installed (see the :ref:`PROJ.4 installation instructions <proj4>` for more details)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:777
# 1d493dadb8cf454c9bd13bd67f67f6da
msgid "If you meet these requirements, then just substitute in the ``OSMGeoAdmin`` option class in your ``admin.py`` file::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:784
# 8521704880a2444a8a30d6e4d63e0f0d
msgid "Special thanks to Bjørn Sandvik of `thematicmapping.org <http://thematicmapping.org>`_ for providing and maintaining this data set."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:785
# b3ec8d9f7c1c40c58ed88a0d1b15a2cd
msgid "GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and Christopher Schmidt."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:786
# bcc10d08e81d4384934975b984c1e628
msgid "Here the point is for the `University of Houston Law Center <http://www.law.uh.edu/>`_."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:787
# 9018c5b41ac2414398f635c363e7fc9f
msgid "Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document 99-049."
msgstr ""

#: ../../ref/contrib/gis/utils.txt:5
# a998a79213844ff8bf0b479925722329
msgid "GeoDjango Utilities"
msgstr ""

#: ../../ref/contrib/gis/utils.txt:10
# 599ccd910ca14c7bbd7c813d132e4e7c
msgid "The :mod:`django.contrib.gis.utils` module contains various utilities that are useful in creating geospatial Web applications."
msgstr ""

#: ../../ref/contrib/humanize.txt:3
#: ../../ref/templates/builtins.txt:2398
# bcdd486669924baf844c5a73b882814b
# aae782a9f6f546e988ac6d49ed1d549d
msgid "django.contrib.humanize"
msgstr ""

#: ../../ref/contrib/humanize.txt:9
#: ../../ref/contrib/index.txt:122
# 206effdda60e4303ae70edf59954c16c
# 070c7b6d04d04e6c8ac292c36b37141d
msgid "A set of Django template filters useful for adding a \"human touch\" to data."
msgstr ""

#: ../../ref/contrib/humanize.txt:11
# 4a55d55fba364b32b733bc997cc40e02
msgid "To activate these filters, add ``'django.contrib.humanize'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load humanize %}`` in a template, and you'll have access to the following filters."
msgstr ""

#: ../../ref/contrib/humanize.txt:19
# ee540471e3794e9f88dbec04b2fff418
msgid "apnumber"
msgstr ""

#: ../../ref/contrib/humanize.txt:21
# dd94e99f50d94688a326303c89739f56
msgid "For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style."
msgstr ""

#: ../../ref/contrib/humanize.txt:24
#: ../../ref/contrib/humanize.txt:39
#: ../../ref/contrib/humanize.txt:62
#: ../../ref/contrib/humanize.txt:133
#: ../../ref/contrib/webdesign.txt:51
#: ../../ref/django-admin.txt:1146
# 5656b6d46cf34f82aee38e5508c58bd1
# ffc99a730d1541d9b1b81005116bbfb2
# eda00ed33fe641efb3ffda4e804b4838
# 4f144bb65eda4086a7de5f04da706637
# 517682826698433a848d8e24e6f83495
# 1ffbd62f5a2549ce9e6d494e6a54aefe
msgid "Examples:"
msgstr ""

#: ../../ref/contrib/humanize.txt:26
# 8c1f95fa9f844895959ca888bce0d285
msgid "``1`` becomes ``one``."
msgstr ""

#: ../../ref/contrib/humanize.txt:27
# f2609e1605ae426ea15b58325228c73b
msgid "``2`` becomes ``two``."
msgstr ""

#: ../../ref/contrib/humanize.txt:28
# 46471d51737b4d8cba28e7f13c7bd81f
msgid "``10`` becomes ``10``."
msgstr ""

#: ../../ref/contrib/humanize.txt:30
#: ../../ref/contrib/humanize.txt:52
#: ../../ref/contrib/humanize.txt:77
#: ../../ref/contrib/humanize.txt:139
# aeae6e530acd482ca2b793ef0d46090d
# b08aae463c30445db27dec7a1c8e7722
# dcfdd91a0b7d4f668bc8a70f315ee17a
# f02d4420f3dd44cfb11f41aa3fe19a69
msgid "You can pass in either an integer or a string representation of an integer."
msgstr ""

#: ../../ref/contrib/humanize.txt:35
# de1def7bb25b429abd8c1676cf677868
msgid "intcomma"
msgstr ""

#: ../../ref/contrib/humanize.txt:37
# 758de5df43c0490a8b1dd309c55f5f92
msgid "Converts an integer to a string containing commas every three digits."
msgstr ""

#: ../../ref/contrib/humanize.txt:41
# 8b8798d1677043f5b2d31f9e9346090f
msgid "``4500`` becomes ``4,500``."
msgstr ""

#: ../../ref/contrib/humanize.txt:42
# 5bc11942f8d84437b9fce03aee270a71
msgid "``45000`` becomes ``45,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:43
# d3d374064cd14056af9e2253dd3e82e9
msgid "``450000`` becomes ``450,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:44
# 4c28943cdf8c4412aba16788545c0044
msgid "``4500000`` becomes ``4,500,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:46
#: ../../ref/contrib/humanize.txt:70
# 2b897d623d1a4776b3c8b9fcf419c1e2
# 8bb21e58c94a40f499b3b23e6152dcae
msgid ":ref:`Format localization <format-localization>` will be respected if enabled, e.g. with the ``'de'`` language:"
msgstr ""

#: ../../ref/contrib/humanize.txt:49
# 3e21ab4859ec416d94b2a6d30c99080f
msgid "``45000`` becomes ``'45.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:50
# 2d0423692e4c4de5a5cbfeec5b660fc2
msgid "``450000`` becomes ``'450.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:57
# 79b3470782c34084a37709b9b985c605
msgid "intword"
msgstr ""

#: ../../ref/contrib/humanize.txt:59
# 3ac6924cba504d1ca6705f4a70b02e29
msgid "Converts a large integer to a friendly text representation. Works best for numbers over 1 million."
msgstr ""

#: ../../ref/contrib/humanize.txt:64
# 05e7f953f388459b96b2dabc124fb6e1
msgid "``1000000`` becomes ``1.0 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:65
# e3f0daeb6bd04a519239b4cc3c61d3cf
msgid "``1200000`` becomes ``1.2 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:66
# 0f34e50137cb44d1b8c9988712903b45
msgid "``1200000000`` becomes ``1.2 billion``."
msgstr ""

#: ../../ref/contrib/humanize.txt:68
# 5a6b4a82a08a4cb2bb13fce47fe74e4e
msgid "Values up to 10^100 (Googol) are supported."
msgstr ""

#: ../../ref/contrib/humanize.txt:73
# d3a2b5ad46ef46d891202d7c6e874de1
msgid "``1000000`` becomes ``'1,0 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:74
# b222435f4a134df9806c04abc9325c07
msgid "``1200000`` becomes ``'1,2 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:75
# 3cb15696cd944890bf728bfd1cc82194
msgid "``1200000000`` becomes ``'1,2 Milliarden'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:82
# 2754a0f2ab8443f680b4a27eaacbf4b5
msgid "naturalday"
msgstr ""

#: ../../ref/contrib/humanize.txt:84
# a598ef22e774410586c37cb45fd0c289
msgid "For dates that are the current day or within one day, return \"today\", \"tomorrow\" or \"yesterday\", as appropriate. Otherwise, format the date using the passed in format string."
msgstr ""

#: ../../ref/contrib/humanize.txt:88
# b7147305fc4e40d1a251712e3ad0785a
msgid "**Argument:** Date formatting string as described in the :tfilter:`date` tag."
msgstr ""

#: ../../ref/contrib/humanize.txt:90
# 792eaf69863a4b3b82f03ac00f0b7281
msgid "Examples (when 'today' is 17 Feb 2007):"
msgstr ""

#: ../../ref/contrib/humanize.txt:92
# 3280a4d781ad498b984f8f8105932100
msgid "``16 Feb 2007`` becomes ``yesterday``."
msgstr ""

#: ../../ref/contrib/humanize.txt:93
# 09797a3feac14054996d176f1b7e2fac
msgid "``17 Feb 2007`` becomes ``today``."
msgstr ""

#: ../../ref/contrib/humanize.txt:94
# ff6ff07643344ad888014ce718378a55
msgid "``18 Feb 2007`` becomes ``tomorrow``."
msgstr ""

#: ../../ref/contrib/humanize.txt:95
# 2e391aabe7b3471f8e47b6d2b423ac92
msgid "Any other day is formatted according to given argument or the :setting:`DATE_FORMAT` setting if no argument is given."
msgstr ""

#: ../../ref/contrib/humanize.txt:101
# 00d24a396c72484e8a868e0503d8e3c8
msgid "naturaltime"
msgstr ""

#: ../../ref/contrib/humanize.txt:105
# dff3665d728a44cd87fe41639a92d93b
msgid "For datetime values, returns a string representing how many seconds, minutes or hours ago it was -- falling back to a longer date format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase."
msgstr ""

#: ../../ref/contrib/humanize.txt:110
# c7f487c9e77441aa94ace7f9c5e0d9c4
msgid "Examples (when 'now' is 17 Feb 2007 16:30:00):"
msgstr ""

#: ../../ref/contrib/humanize.txt:112
# 668a28d784e94f35aa99083688f43066
msgid "``17 Feb 2007 16:30:00`` becomes ``now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:113
# 934fd76bd47b4070a78b49ad08658f47
msgid "``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:114
# b5996a73fca042ddade9e2244e17750c
msgid "``17 Feb 2007 16:29:00`` becomes ``a minute ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:115
# 4f27b3b5f9c6416998d0de0a0fea5851
msgid "``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:116
# 8880a7116bbb4043bc14631c1ef4fa59
msgid "``17 Feb 2007 15:30:29`` becomes ``an hour ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:117
# 334b5245432d4f0890f431790c6d0611
msgid "``17 Feb 2007 13:31:29`` becomes ``2 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:118
# 2357701a35694b69be89ad3c9b68931c
msgid "``16 Feb 2007 13:31:29`` becomes ``1 day ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:119
# 4093109ea56a48978ae7f726b1cafaef
msgid "``17 Feb 2007 16:30:30`` becomes ``29 seconds from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:120
# 8a0be5fda8a74bc1a07ebff3b58a2cbe
msgid "``17 Feb 2007 16:31:00`` becomes ``a minute from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:121
# e064e875557a48269e036d4e17a967f8
msgid "``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:122
# 147a40a65da94dfeb151b1e203728640
msgid "``17 Feb 2007 16:30:29`` becomes ``an hour from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:123
# c61a0c5d89804efcb057edba51e917cd
msgid "``17 Feb 2007 18:31:29`` becomes ``2 hours from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:124
# c603a2bde39b420182d3cb282f216d72
msgid "``18 Feb 2007 16:31:29`` becomes ``1 day from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:129
# e2a8d99c828d4770aae145260fab9c97
msgid "ordinal"
msgstr ""

#: ../../ref/contrib/humanize.txt:131
# 1d7b806c8ca74f88a06e8e8f84c50c18
msgid "Converts an integer to its ordinal as a string."
msgstr ""

#: ../../ref/contrib/humanize.txt:135
# 1ce84bbd4d25434aab69759aee0d739a
msgid "``1`` becomes ``1st``."
msgstr ""

#: ../../ref/contrib/humanize.txt:136
# f145f11e6f334e17b87100eb8159b2b9
msgid "``2`` becomes ``2nd``."
msgstr ""

#: ../../ref/contrib/humanize.txt:137
# 3ed8ad95f76c40618f55224162013472
msgid "``3`` becomes ``3rd``."
msgstr ""

#: ../../ref/contrib/index.txt:3
# 4531ab60743c4c72b2cb1a282bffb729
msgid "``contrib`` packages"
msgstr ""

#: ../../ref/contrib/index.txt:5
# 578cdcaa0d5d47dd8e2709403dc96c90
msgid "Django aims to follow Python's `\"batteries included\" philosophy`_. It ships with a variety of extra, optional tools that solve common Web-development problems."
msgstr ""

#: ../../ref/contrib/index.txt:9
# 6c80c7681bd34ee8b14b69424ae72ad3
msgid "This code lives in ``django/contrib`` in the Django distribution. This document gives a rundown of the packages in ``contrib``, along with any dependencies those packages have."
msgstr ""

#: ../../ref/contrib/index.txt:15
# 2bfa1ceb1a98401f9b1c81abba622068
msgid "For most of these add-ons -- specifically, the add-ons that include either models or template tags -- you'll need to add the package name (e.g., ``'django.contrib.admin'``) to your :setting:`INSTALLED_APPS` setting and re-run ``manage.py syncdb``."
msgstr ""

#: ../../ref/contrib/index.txt:46
# 7e4d5a868d2a44659800c1cd99e93fe8
msgid "admin"
msgstr ""

#: ../../ref/contrib/index.txt:48
# 6bf83f316ed74b1793ed56033de7d88d
msgid "The automatic Django administrative interface. For more information, see :doc:`Tutorial 2 </intro/tutorial02>` and the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../ref/contrib/index.txt:52
# 8b1e881200b848debda514980eeae7a5
msgid "Requires the auth_ and contenttypes_ contrib packages to be installed."
msgstr ""

#: ../../ref/contrib/index.txt:55
# 5c415f787462499ea81b81ccb8f62b79
msgid "auth"
msgstr ""

#: ../../ref/contrib/index.txt:57
# 189d392d26d94dd396ef53885dcf02b6
msgid "Django's authentication framework."
msgstr ""

#: ../../ref/contrib/index.txt:62
# 7f46c211a1c949679af1c4013ff489c9
msgid "comments"
msgstr ""

#: ../../ref/contrib/index.txt:64
# 2dfd5345c91a4a999431f5df2552a47f
msgid "A simple yet flexible comments system. See :doc:`/ref/contrib/comments/index`."
msgstr ""

#: ../../ref/contrib/index.txt:67
# b71c4442308d4028916d6bcfbdabbf19
msgid "contenttypes"
msgstr ""

#: ../../ref/contrib/index.txt:69
# 5f9d55d2da0c4b57be9a5b20b77e314d
msgid "A light framework for hooking into \"types\" of content, where each installed Django model is a separate content type."
msgstr ""

#: ../../ref/contrib/index.txt:72
# 2c86dd25e98147aab878227b5fe496ca
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>`."
msgstr ""

#: ../../ref/contrib/index.txt:75
# efb1ee8e550d4cd9b7f2ecb60fd0004d
msgid "csrf"
msgstr ""

#: ../../ref/contrib/index.txt:77
# d20698b0691e4fc69828e996633df3c0
msgid "A middleware for preventing Cross Site Request Forgeries"
msgstr ""

#: ../../ref/contrib/index.txt:79
# 7a404ac77cee419ebab4293cdfecf47a
msgid "See the :doc:`csrf documentation </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/contrib/index.txt:82
# 12c5c3ffa6454c46b68b60ae077e97d7
msgid "flatpages"
msgstr ""

#: ../../ref/contrib/index.txt:84
# 1204cbef6e8c43969dfd31db2a25ccb6
msgid "A framework for managing simple \"flat\" HTML content in a database."
msgstr ""

#: ../../ref/contrib/index.txt:86
# c92e99a48c864b76b3fc2a73b57987a9
msgid "See the :doc:`flatpages documentation </ref/contrib/flatpages>`."
msgstr ""

#: ../../ref/contrib/index.txt:88
# fe652277eee2476b8756586fd5b6fa17
msgid "Requires the sites_ contrib package to be installed as well."
msgstr ""

#: ../../ref/contrib/index.txt:91
# bd61c412928248c18b2fb4b4d9f87e7f
msgid "formtools"
msgstr ""

#: ../../ref/contrib/index.txt:93
# 63f2e7c8182c457ebeb05458bc09216a
msgid "A set of high-level abstractions for Django forms (django.forms)."
msgstr ""

#: ../../ref/contrib/index.txt:96
# cf78d373ba4340b99749883e004e90ed
msgid "django.contrib.formtools.preview"
msgstr ""

#: ../../ref/contrib/index.txt:98
# 82b62a87ec754ae78660e3961de49f90
msgid "An abstraction of the following workflow:"
msgstr ""

#: ../../ref/contrib/index.txt:102
# a3a29bda1fbc4aab9eff5a29e0835320
msgid "See the :doc:`form preview documentation </ref/contrib/formtools/form-preview>`."
msgstr ""

#: ../../ref/contrib/index.txt:105
# ca05d3d276904a74b85d5ecc9b99b9bf
msgid "django.contrib.formtools.wizard"
msgstr ""

#: ../../ref/contrib/index.txt:107
# f045c6bac2f848be90c6c22f97725e60
msgid "Splits forms across multiple Web pages."
msgstr ""

#: ../../ref/contrib/index.txt:109
# c2d3a038dee04b93a44b417f20e6176e
msgid "See the :doc:`form wizard documentation </ref/contrib/formtools/form-wizard>`."
msgstr ""

#: ../../ref/contrib/index.txt:112
# 1097cc4cedb64292beb0713e4124ee38
msgid "gis"
msgstr ""

#: ../../ref/contrib/index.txt:114
# dfa259b134c84694821436e93b4fda54
msgid "A world-class geospatial framework built on top of Django, that enables storage, manipulation and display of spatial data."
msgstr ""

#: ../../ref/contrib/index.txt:117
# 3c7250f8635444b39e0f2fb93c70bd10
msgid "See the :doc:`/ref/contrib/gis/index` documentation for more."
msgstr ""

#: ../../ref/contrib/index.txt:120
# ad549641f00147e6b31844110162a8c7
msgid "humanize"
msgstr ""

#: ../../ref/contrib/index.txt:124
# 8f12441edfdb424d8cd8188cd5dcba63
msgid "See the :doc:`humanize documentation </ref/contrib/humanize>`."
msgstr ""

#: ../../ref/contrib/index.txt:127
# a336587be7144411815f20561e59b9d1
msgid "localflavor"
msgstr ""

#: ../../ref/contrib/index.txt:129
# c3f6ddedd75d427c8bdcef75c5235d1a
msgid "A collection of various Django snippets that are useful only for a particular country or culture. For example, ``django.contrib.localflavor.us.forms`` contains a ``USZipCodeField`` that you can use to validate U.S. zip codes."
msgstr ""

#: ../../ref/contrib/index.txt:133
# efcd58cbd3c54f6e97ca3472731c0b52
msgid "See the :doc:`localflavor documentation </ref/contrib/localflavor>`."
msgstr ""

#: ../../ref/contrib/index.txt:136
# 78396d44625b43a0b10ea531405d14df
msgid "markup"
msgstr ""

#: ../../ref/contrib/index.txt:138
# 1f4af5cc8c1145b8b0366e50b70825f0
msgid "A collection of template filters that implement common markup languages"
msgstr ""

#: ../../ref/contrib/index.txt:140
#: ../../ref/templates/builtins.txt:2412
# 185a167152fe4fc1ad75494366a2c260
# 81c31cf55b8245b9aa6584ce0fe1f5a6
msgid "See the :doc:`markup documentation </ref/contrib/markup>`."
msgstr ""

#: ../../ref/contrib/index.txt:143
# 83e635036ffb4ae8a089613c4896bd07
msgid "messages"
msgstr ""

#: ../../ref/contrib/index.txt:148
# 53b9a58f69e8479c81b76742f2863f68
msgid "A framework for storing and retrieving temporary cookie- or session-based messages"
msgstr ""

#: ../../ref/contrib/index.txt:151
# b2acd96e3e374670a541a13eafadb50a
msgid "See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/contrib/index.txt:154
# facf5241ed764df3bd95b520079a82cd
msgid "redirects"
msgstr ""

#: ../../ref/contrib/index.txt:156
# a4f80e9de3c94156966241824bf6727b
msgid "A framework for managing redirects."
msgstr ""

#: ../../ref/contrib/index.txt:158
# f11b3b134cbc4e66bcc2801f85e7f5fe
msgid "See the :doc:`redirects documentation </ref/contrib/redirects>`."
msgstr ""

#: ../../ref/contrib/index.txt:161
# 297450ad277b49498d498b6339f45f81
msgid "sessions"
msgstr ""

#: ../../ref/contrib/index.txt:163
# c30ee1a4c22e4a91991d328fe147c603
msgid "A framework for storing data in anonymous sessions."
msgstr ""

#: ../../ref/contrib/index.txt:165
# 2888ac65315c48c5ac83e5e7941a6381
msgid "See the :doc:`sessions documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/contrib/index.txt:168
# bde64015f51d4ac8a357ba7377e283f4
msgid "sites"
msgstr ""

#: ../../ref/contrib/index.txt:170
# 5131e77f0afa4b32b27469967d1f8307
msgid "A light framework that lets you operate multiple Web sites off of the same database and Django installation. It gives you hooks for associating objects to one or more sites."
msgstr ""

#: ../../ref/contrib/index.txt:174
# 370a04079a23471d8053fe2573e0dd58
msgid "See the :doc:`sites documentation </ref/contrib/sites>`."
msgstr ""

#: ../../ref/contrib/index.txt:177
# 627cad125ac24f5488cae1e67d8475bf
msgid "sitemaps"
msgstr ""

#: ../../ref/contrib/index.txt:179
# 254ab9df7dda472f9b60215edf4ef5c7
msgid "A framework for generating Google sitemap XML files."
msgstr ""

#: ../../ref/contrib/index.txt:181
# 71d5eb400cec46ac82827044d71353c3
msgid "See the :doc:`sitemaps documentation </ref/contrib/sitemaps>`."
msgstr ""

#: ../../ref/contrib/index.txt:184
# c31386d3e0f54883839c81344568b85b
msgid "syndication"
msgstr ""

#: ../../ref/contrib/index.txt:186
# 568e1f814ffc40b5868979dd4d618cd0
msgid "A framework for generating syndication feeds, in RSS and Atom, quite easily."
msgstr ""

#: ../../ref/contrib/index.txt:188
# 3bd459449f6a41da8cbfc64bb73d5d71
msgid "See the :doc:`syndication documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../ref/contrib/index.txt:191
# 91f720c6ff244876a272e655ec124ae7
msgid "webdesign"
msgstr ""

#: ../../ref/contrib/index.txt:193
# 6176fc34056c455c959702551d7e82aa
msgid "Helpers and utilities targeted primarily at Web *designers* rather than Web *developers*."
msgstr ""

#: ../../ref/contrib/index.txt:196
# a5c6d213dd6f4147aab165ac3d185e46
msgid "See the :doc:`Web design helpers documentation </ref/contrib/webdesign>`."
msgstr ""

#: ../../ref/contrib/index.txt:199
# f233e337f4944effa947d13134b211f4
msgid "Other add-ons"
msgstr ""

#: ../../ref/contrib/index.txt:201
# f81b4590f09548a28d11b554ffe0eec2
msgid "If you have an idea for functionality to include in ``contrib``, let us know! Code it up, and post it to the `django-users mailing list`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:3
# 9edc9b1086f2408e9c5206f45b397056
msgid "The \"local flavor\" add-ons"
msgstr ""

#: ../../ref/contrib/localflavor.txt:9
# 05ec3f981f00480a9f964da83ac38f1a
msgid "Following its \"batteries included\" philosophy, Django comes with assorted pieces of code that are useful for particular countries or cultures. These are called the \"local flavor\" add-ons and live in the :mod:`django.contrib.localflavor` package."
msgstr ""

#: ../../ref/contrib/localflavor.txt:14
# 7340b82f806e48a4ace77ba23bbbe3fa
msgid "Inside that package, country- or culture-specific code is organized into subpackages, named using `ISO 3166 country codes`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:17
# 34679d4e05944d578efb76618f988462
msgid "Most of the ``localflavor`` add-ons are localized form components deriving from the :doc:`forms </topics/forms/index>` framework -- for example, a :class:`~django.contrib.localflavor.us.forms.USStateField` that knows how to validate U.S. state abbreviations, and a :class:`~django.contrib.localflavor.fi.forms.FISocialSecurityNumber` that knows how to validate Finnish social security numbers."
msgstr ""

#: ../../ref/contrib/localflavor.txt:24
# 049f8ff902d24527aa2d689fa95f1177
msgid "To use one of these localized components, just import the relevant subpackage. For example, here's how you can create a form with a field representing a French telephone number::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:35
# 90aefa12d11a40fb87facf385c3ed43b
msgid "Supported countries"
msgstr ""

#: ../../ref/contrib/localflavor.txt:37
# 48211639057c41709966381067fe797a
msgid "Countries currently supported by :mod:`~django.contrib.localflavor` are:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:39
# 868fc069a5354167af51a62c72942654
msgid "Argentina_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:40
# 7713978a06c34de2b4b16a37e22c3f3f
msgid "Australia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:41
# aedf5782214a476db380ef7c4cf6a418
msgid "Austria_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:42
# e6c7bf4690964496ac76fd55aea66a82
msgid "Belgium_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:43
# 6f797f5885c44f458dc799228b43f6e3
msgid "Brazil_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:44
# 473e8d3f8f0e4e5ea1a891fb68d57e70
msgid "Canada_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:45
# da28572761f64db29b87729766ad0eeb
msgid "Chile_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:46
# e25e4b168d8e49b9a0c487ced3d06ba4
msgid "China_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:47
# 14d8b04ea4834a91b16e74b3077c577d
msgid "Colombia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:48
# ec8ebed77b604dea9fd1b7bffa803bc4
msgid "Croatia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:49
# c416f5c214604dc6a87a5806fc0db3a1
msgid "Czech_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:50
# 945b1b7e04ce4d799e9ecd0b611d8eaa
msgid "Ecuador_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:51
# 0144220df4b3472a8a82fdda4e9e0674
msgid "Finland_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:52
# 72e36cb78b244edaa09865b3166965c5
msgid "France_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:53
# 4e95ee0a530e4684af49db9b04a365ac
msgid "Germany_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:54
# 71468c9a2ae34e8394b1b68062ce282c
msgid "Iceland_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:55
# 04e603506eaf4808a5573e66273148aa
msgid "India_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:56
# cf60dde57dfe46d7b23fcf02346d4578
msgid "Indonesia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:57
# e3f11a9356ba418db5c3c1e5a4be2723
msgid "Ireland_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:58
# 0b3fdd12f912430b8039205746f3a670
msgid "Israel_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:59
# 08ae61f2cdad412f8f9b2630ccae3c0a
msgid "Italy_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:60
# 9eec7b70a36c43228a3bc79228cb95af
msgid "Japan_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:61
# 95c750900b17484f96f90082e6dd023a
msgid "Kuwait_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:62
# bd74f755a3c24cb0aaf318819170f16e
msgid "Macedonia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:63
# e8edc74db36149dd9fc8d30736f90aac
msgid "Mexico_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:64
# 27b9b2b05d16485f95a1a24734d24319
msgid "`The Netherlands`_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:65
# cc1ab5e91aaa4080ad5b668f94aecc88
msgid "Norway_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:66
# a846fa2372f443b0ad0f488e40787a03
msgid "Peru_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:67
# e175b617f73747279b693c238a9a2cc7
msgid "Poland_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:68
# 4af7a7cf250940978fc01fbcb1a67ea9
msgid "Portugal_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:69
# d20976f0ed5b4e0991129a8a6598b248
msgid "Paraguay_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:70
# be27d8335181417ab18315670ad8bbbb
msgid "Romania_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:71
# ac771033512241f5ad37554c381fe8a8
msgid "Russia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:72
# 0e8904993285485aab8f9746f4ec2a08
msgid "Slovakia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:73
# 7112bb1e1db5450bbd5bf1affeecff2c
msgid "Slovenia_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:74
# 1e053fa090b9483196b43e80bd181302
msgid "`South Africa`_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:75
# 64ad6c5b72a54b5cbb9d5a2151d14fc0
msgid "Spain_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:76
# 326eeb8a26614fe7bbf346d587001b01
msgid "Sweden_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:77
# 13f837ab71754b4dbc707cc08fdebfea
msgid "Switzerland_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:78
# 66569ed3ed24471f936610810c737cf7
msgid "Turkey_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:79
# 593e78eceb7f495db35677a0799881ae
msgid "`United Kingdom`_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:80
# 5fdaff6e4c444d3d9faa0263f69ddf10
msgid "`United States of America`_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:81
# cf3102f8d2af418e9ce7492ea6f32c0e
msgid "Uruguay_"
msgstr ""

#: ../../ref/contrib/localflavor.txt:83
# e71338a5104b440ab291cf7612278525
msgid "The ``django.contrib.localflavor`` package also includes a ``generic`` subpackage, containing useful code that is not specific to one particular country or culture. Currently, it defines date, datetime and split datetime input fields based on those from :doc:`forms </topics/forms/index>`, but with non-US default formats. Here's an example of how to use them::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:141
# 9ff5487f53c644148a9e264cbcdb0abd
msgid "Internationalization of localflavor"
msgstr ""

#: ../../ref/contrib/localflavor.txt:143
# 26a62e7592a54ee6b089c343841c5521
msgid "Localflavor has its own catalog of translations, in the directory ``django/contrib/localflavor/locale``, and it's not loaded automatically like Django's general catalog in ``django/conf/locale``. If you want localflavor's texts to be translated, like form fields error messages, you must include :mod:`django.contrib.localflavor` in the :setting:`INSTALLED_APPS` setting, so the internationalization system can find the catalog, as explained in :ref:`how-django-discovers-translations`."
msgstr ""

#: ../../ref/contrib/localflavor.txt:152
# cd0686e5a8e749fda72b1dc86a80206f
msgid "Adding flavors"
msgstr ""

#: ../../ref/contrib/localflavor.txt:154
# d228eabc7888451c8c39a23eb20d4051
msgid "We'd love to add more of these to Django, so please `create a ticket`_ with any code you'd like to contribute. One thing we ask is that you please use Unicode objects (``u'mystring'``) for strings, rather than setting the encoding in the file. See any of the existing flavors for examples."
msgstr ""

#: ../../ref/contrib/localflavor.txt:162
# 9d5373487bcd4930bb442babecb36333
msgid "Localflavor and backwards compatibility"
msgstr ""

#: ../../ref/contrib/localflavor.txt:164
# 574f4d586d044e259bc3fc58a320782c
msgid "As documented in our :ref:`API stability <misc-api-stability-localflavor>` policy, Django will always attempt to make :mod:`django.contrib.localflavor` reflect the officially gazetted policies of the appropriate local government authority. For example, if a government body makes a change to add, alter, or remove a province (or state, or county), that change will be reflected in Django's localflavor in the next stable Django release."
msgstr ""

#: ../../ref/contrib/localflavor.txt:172
# b387a393fc3d4ed8bf6efdc1a9f1f3a1
msgid "When a backwards-incompatible change is made (for example, the removal or renaming of a province) the localflavor in question will raise a warning when that localflavor is imported. This provides a runtime indication that something may require attention."
msgstr ""

#: ../../ref/contrib/localflavor.txt:177
# 3080b82c4e984409880d2356ddb73233
msgid "However, once you have addressed the backwards compatibility (for example, auditing your code to see if any data migration is required), the warning serves no purpose. The warning can then be supressed. For example, to suppress the warnings raised by the Indonesian localflavor you would use the following code::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:191
# a1e696fa22ec49868afad4953df46c1e
msgid "Argentina (``ar``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:195
# 62388b5d7f9847d6b1800895b68ee6c8
msgid "A form field that validates input as either a classic four-digit Argentinian postal code or a CPA_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:202
# 6b2960c9b460418a8afe857433b9a1b6
msgid "A form field that validates input as a Documento Nacional de Identidad (DNI) number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:207
# e350a8fd45a1418aada33400a5860fdb
msgid "A form field that validates input as a Codigo Unico de Identificacion Tributaria (CUIT) number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:212
# 1737bcd8948c4b4aa4d222f0a0d5355c
msgid "A ``Select`` widget that uses a list of Argentina's provinces and autonomous cities as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:216
# f77b1e9466694fc6b4db29afc90dcbfd
msgid "Australia (``au``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:222
# 4a79f043c884423dbc6727c216386edb
msgid "A form field that validates input as an Australian postcode."
msgstr ""

#: ../../ref/contrib/localflavor.txt:226
# 21a513f555d6491eba2a11850cae8248
msgid "A form field that validates input as an Australian phone number. Valid numbers have ten digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:231
# 7ad7067a749c46158cf07581e91b283e
msgid "A ``Select`` widget that uses a list of Australian states/territories as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:236
# e7c1882ab3cb41dab94e246848459753
msgid "A model field that checks that the value is a valid Australian phone number (ten digits)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:241
# 95431a8f3462438d8ac978860f372490
msgid "A model field that forms represent as a ``forms.AUStateField`` field and stores the three-letter Australian state abbreviation in the database."
msgstr ""

#: ../../ref/contrib/localflavor.txt:246
# 624cabe2b8494af883b2f8cafc54ab80
msgid "A model field that forms represent as a ``forms.AUPostCodeField`` field and stores the four-digit Australian postcode in the database."
msgstr ""

#: ../../ref/contrib/localflavor.txt:250
# c54ead1e66d748f18c184d1ef1f7c171
msgid "Austria (``at``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:254
# 0793a53609204985b9f4ae2c3b3509c5
msgid "A form field that validates its input as an Austrian zip code, with the format XXXX (first digit must be greater than 0)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:259
# 614e148b00d444a5981f506b85168500
msgid "A ``Select`` widget that uses a list of Austrian states as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:263
# 16b4a3ce9f4842bbbd16bb01325cc753
msgid "A form field that validates its input as an Austrian social security number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:266
# 9166123ebab341d4a35c66932f800917
msgid "Belgium (``be``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:272
# 02b665c33465486e87737d54e6673e04
msgid "A form field that validates input as a Belgium phone number, with one of the formats 0x xxx xx xx, 0xx xx xx xx, 04xx xx xx xx, 0x/xxx.xx.xx, 0xx/xx.xx.xx, 04xx/xx.xx.xx, 0x.xxx.xx.xx, 0xx.xx.xx.xx, 04xx.xx.xx.xx, 0xxxxxxxx or 04xxxxxxxx."
msgstr ""

#: ../../ref/contrib/localflavor.txt:279
# 467e1680d52146a381fa76c7a7bff4ce
msgid "A form field that validates input as a Belgium postal code, in the range and format 1XXX-9XXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:284
# 8cecc11ffbe1425ca5a7c64f2483e2f5
msgid "A ``Select`` widget that uses a list of Belgium provinces as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:289
# 13ce11320edf4d7f8e9c42a53c33c63c
msgid "A ``Select`` widget that uses a list of Belgium regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:293
# 9fb6a55deaaa4a4ab153429bdacf5560
msgid "Brazil (``br``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:297
# 4770684540f244aea44d4dddc2cf4023
msgid "A form field that validates input as a Brazilian phone number, with the format XX-XXXX-XXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:302
# 0d82965797ca469dbe7f22a3902ac6a9
msgid "A form field that validates input as a Brazilian zip code, with the format XXXXX-XXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:307
# 316cbaef17654f68aa49e3ec023229ac
msgid "A ``Select`` widget that uses a list of Brazilian states/territories as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:312
# c268a0b1e3c74e9ca5102e75266e451b
msgid "A form field that validates input as `Brazilian CPF`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:314
# 3a6e1f20c2be41f9be7f72f9ec3b0bed
msgid "Input can either be of the format XXX.XXX.XXX-VD or be a group of 11 digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:320
# 74003b621a284f9489ea256c6e0d123b
msgid "A form field that validates input as `Brazilian CNPJ`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:322
# 79f0cbff28df486c8a536fe356baacff
msgid "Input can either be of the format XX.XXX.XXX/XXXX-XX or be a group of 14 digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:328
# 9e8e18df346944d5a6044a5a2e449c85
msgid "Canada (``ca``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:332
# adb85cd6cb0344aeb765c68db5e3e955
msgid "A form field that validates input as a Canadian phone number, with the format XXX-XXX-XXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:337
# 4eeefe4c091041f6a14d4e23214aa1de
msgid "A form field that validates input as a Canadian postal code, with the format XXX XXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:342
# 677844591b6a4db282e27b78c712c21c
msgid "A form field that validates input as a Canadian province name or abbreviation."
msgstr ""

#: ../../ref/contrib/localflavor.txt:346
# 11377d0088904339a720f9bbc025ec72
msgid "A form field that validates input as a Canadian Social Insurance Number (SIN). A valid number must have the format XXX-XXX-XXX and pass a `Luhn mod-10 checksum`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:354
# f169857b474340fd8e2671ecc77e3515
msgid "A ``Select`` widget that uses a list of Canadian provinces and territories as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:358
# f0f058d1e71a48c0ab21bf501d869e16
msgid "Chile (``cl``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:362
# 675cf3fbac374432a95dfde55f55aa25
msgid "A form field that validates input as a Chilean national identification number ('Rol Unico Tributario' or RUT). The valid format is XX.XXX.XXX-X."
msgstr ""

#: ../../ref/contrib/localflavor.txt:367
# efe1581af5b6486785a5f80a5cc087af
msgid "A ``Select`` widget that uses a list of Chilean regions (Regiones) as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:371
# e7d16029bfc549859f1d6412f1d46f34
msgid "China (``cn``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:377
# e20852c164944e3181b56d57bec6e579
msgid "A ``Select`` widget that uses a list of Chinese regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:381
# 10a68a6e16b84449858ec02eb0081d90
msgid "A form field that validates input as a Chinese post code. Valid formats are XXXXXX where X is digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:386
# ae31c7cb9d9c4616b1f917da9e608330
msgid "A form field that validates input as a Chinese Identification Card Number. Both 1st and 2nd generation ID Card Number are validated."
msgstr ""

#: ../../ref/contrib/localflavor.txt:391
# e87b1e44db8e45d58d5e3560032cbb46
msgid "A form field that validates input as a Chinese phone number. Valid formats are 0XX-XXXXXXXX, composed of 3 or 4 digits of region code and 7 or 8 digits of phone number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:397
# 413c51a133334dae9ee9864c1674b962
msgid "A form field that validates input as a Chinese mobile phone number. Valid formats are like 1XXXXXXXXXX, where X is digit. The second digit could only be 3, 5 and 8."
msgstr ""

#: ../../ref/contrib/localflavor.txt:402
# a2fc9d84a4724e35bd317f1e7c003ad5
msgid "Colombia (``co``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:408
# 15472f26ed2641548e8cf50dd56dbec3
msgid "A ``Select`` widget that uses a list of Colombian departments as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:412
# 0ff0a8b06fae4078bdb0bb418dde1187
msgid "Croatia (``hr``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:418
# b73d78b52b7f47cbb145f3a60980596e
msgid "A ``Select`` widget that uses a list of counties of Croatia as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:422
# b7b318fffaf443818703cf43aa5d6a5d
msgid "A ``Select`` widget that uses a list of phone number prefixes of Croatia as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:427
# 1b7728d9647641878050b5cfad3e15d4
msgid "A ``Select`` widget that uses a list of vehicle license plate prefixes of Croatia as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:432
# 03b05ae4e33c4a3c94f548926a16d599
msgid "A form field that validates input as a phone number of Croatia. A valid format is a country code or a leading zero, area code prefix, 6 or 7 digit number; e.g. +385XXXXXXXX or 0XXXXXXXX Validates fixed, mobile and FGSM numbers. Normalizes to a full number with country code (+385 prefix)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:440
# fd4322f5e3d94c1aa36a8ec96a1ca5cc
msgid "A form field that validates input as a vehicle license plate of Croatia. Normalizes to the specific format XX YYYY-XX where X is a letter and Y a digit. There can be three or four digits. Suffix is constructed from the shared letters of the Croatian and English alphabets. It is used for standardized license plates only. Special cases like license plates for oldtimers, temporary license plates, government institution license plates and customized license plates are not covered by this field."
msgstr ""

#: ../../ref/contrib/localflavor.txt:451
# 8c2c06a1f8a84a51ac4583c1e15f8a8f
msgid "A form field that validates input as a postal code of Croatia. It consists of exactly five digits ranging from 10000 to 59999 inclusive."
msgstr ""

#: ../../ref/contrib/localflavor.txt:456
# 2252cba9246341f49f19e27ccece74d7
msgid "A form field that validates input as a Personal Identification Number (OIB) of Croatia. It consists of exactly eleven digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:462
# 8a10c79e03f44fe785518332b6ed1223
msgid "A form field that validates input as a Unique Master Citizen Number (JMBG). The number is still in use in Croatia, but it is being replaced by OIB. This field works for other ex-Yugoslavia countries as well where the JMBG is still in use. The area segment of the JMBG is not validated because the citizens might have emigrated to another ex-Yugoslavia country. The number consists of exactly thirteen digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:472
# c7c90a6ead7443c7811017a9dfff6c48
msgid "A form field that validates input as a Unique Master Academic Citizen Number (JMBAG) of Croatia. This number is used by college students and professors in Croatia. The number consists of exactly nineteen digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:478
# 29126fe46cf0426588b335b7eaa924fc
msgid "Czech (``cz``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:482
# fdba1834fa0e422e8ff561fecc24621f
msgid "A form field that validates input as a Czech postal code. Valid formats are XXXXX or XXX XX, where X is a digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:487
# 3468c7b73df44a648429802385809c44
msgid "A form field that validates input as a Czech Birth Number. A valid number must be in format XXXXXX/XXXX (slash is optional)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:492
# ce6735b07261415b98cdef3a2bff72e7
msgid "A form field that validates input as a Czech IC number field."
msgstr ""

#: ../../ref/contrib/localflavor.txt:496
# fda2c8a317954748b34783c148bd12cc
msgid "A ``Select`` widget that uses a list of Czech regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:499
# c830c85d201e483ba3ddaa42a524e0fe
msgid "Ecuador (``ec``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:505
# 66acb7ab1b984896924fb615df93ee7d
msgid "A ``Select`` widget that uses a list of Ecuatorian provinces as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:509
# 8c160bdd8ce84b6cbfc2b51efee3fa98
msgid "Finland (``fi``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:513
# e0c92728b41341b6a31d72ccc98a3d37
msgid "A form field that validates input as a Finnish social security number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:517
# 0a226b5732ee4b02b2788c57f77f490a
msgid "A form field that validates input as a Finnish zip code. Valid codes consist of five digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:522
# d77e73d1623148c0820d9d20e842a796
msgid "A ``Select`` widget that uses a list of Finnish municipalities as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:526
# fae5ac11fea24cc6bd05e37295d91b50
msgid "France (``fr``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:530
# 01d613c138a842e99857a0ae704592bc
msgid "A form field that validates input as a French local phone number. The correct format is 0X XX XX XX XX. 0X.XX.XX.XX.XX and 0XXXXXXXXX validate but are corrected to 0X XX XX XX XX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:536
# 276f65950ee8478ba56d57d56151c70f
msgid "A form field that validates input as a French zip code. Valid codes consist of five digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:541
# b2b902facd0242148d0fb8a4b473255d
msgid "A ``Select`` widget that uses a list of French departments as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:544
# 1982d926f5354416b63b40ee31ab82d3
msgid "Germany (``de``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:548
# 57fff0cdc5754c098f7b36b536a514a6
msgid "A form field that validates input as a German identity card number (Personalausweis_). Valid numbers have the format XXXXXXXXXXX-XXXXXXX-XXXXXXX-X, with no group consisting entirely of zeroes."
msgstr ""

#: ../../ref/contrib/localflavor.txt:556
# 715f7a51ca72448b8bda8a52d2d4d63c
msgid "A form field that validates input as a German zip code. Valid codes consist of five digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:561
# f06940730d63405d9955ff729f67fd44
msgid "A ``Select`` widget that uses a list of German states as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:564
# 729a6b4d2870467aa0e466a5e87f2b34
msgid "The Netherlands (``nl``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:568
# 5e97cdfc2dde40408ff19a83f0511e96
msgid "A form field that validates input as a Dutch telephone number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:572
# 44a7bc00e3a344b2afca303533da1668
msgid "A form field that validates input as a Dutch social security number (SoFI/BSN)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:577
# 121e6ef27af14d71b5dfc93d8388a85c
msgid "A form field that validates input as a Dutch zip code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:581
# a832c5cac7ae4c1ab5f1489199900146
msgid "A ``Select`` widget that uses a list of Dutch provinces as its list of choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:585
# f722ea3c55de4a589d85209479efe044
msgid "Iceland (``is_``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:589
# 0d46e413ab514b5a8d4e0f616d115d68
msgid "A form field that validates input as an Icelandic identification number (kennitala). The format is XXXXXX-XXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:594
# 9df0d3541e794db28023f21a60f64390
msgid "A form field that validates input as an Icelandtic phone number (seven digits with an optional hyphen or space after the first three digits)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:599
# 3df9760488ec44439537d58441d87936
msgid "A ``Select`` widget that uses a list of Icelandic postal codes as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:603
# 56a202945786447b935220af1645f693
msgid "India (``in_``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:607
# 3e248617a36c4af484f2ed11fd8d58e7
msgid "A form field that validates input as an Indian state/territory name or abbreviation. Input is normalized to the standard two-letter vehicle registration abbreviation for the given state or territory."
msgstr ""

#: ../../ref/contrib/localflavor.txt:613
# c58ea29fcb8f463cb0f5848554530111
msgid "A form field that validates input as an Indian zip code, with the format XXXXXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:618
# 601565301b7c406eaab89e2b3c7143fd
msgid "A ``Select`` widget that uses a list of Indian states/territories as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:625
# a8d1320069ce4c7f9ffa0a31a1d79e28
msgid "A form field that validates that the data is a valid Indian phone number, including the STD code. It's normalised to 0XXX-XXXXXXX or 0XXX XXXXXXX format. The first string is the STD code which is a '0' followed by 2-4 digits. The second string is 8 digits if the STD code is 3 digits, 7 digits if the STD code is 4 digits and 6 digits if the STD code is 5 digits. The second string will start with numbers between 1 and 6. The separator is either a space or a hyphen."
msgstr ""

#: ../../ref/contrib/localflavor.txt:634
# d0027614e04f4b3aaad21b6fe535f357
msgid "Ireland (``ie``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:638
# ca1ed9a2d53043caa86c2f57f015740c
msgid "A ``Select`` widget that uses a list of Irish Counties as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:641
# 0e24a556dafa45d8b29d81bbf53717fb
msgid "Indonesia (``id``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:645
# a42899effc784d9ea7aa314c52b0f811
msgid "A form field that validates input as an Indonesian post code field."
msgstr ""

#: ../../ref/contrib/localflavor.txt:649
# c807a655b6bf449f9a71d60da7b75244
msgid "A ``Select`` widget that uses a list of Indonesian provinces as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:658
# cfb950f261134600abd7c31aaf529479
msgid "A form field that validates input as an Indonesian telephone number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:662
# c66f9a6999b54f34b781d4aadadeef92
msgid "A ``Select`` widget that uses a list of Indonesian license plate prefix code as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:667
# cd9b0e82244941beb417da3dda4511bb
msgid "A form field that validates input as an Indonesian vehicle license plate."
msgstr ""

#: ../../ref/contrib/localflavor.txt:671
# 4e9bc565dcfc4868a40e9d1c27b59431
msgid "A form field that validates input as an Indonesian national identity number (`NIK`_/KTP). The output will be in the format of 'XX.XXXX.DDMMYY.XXXX'. Dots or spaces can be used in the input to break down the numbers."
msgstr ""

#: ../../ref/contrib/localflavor.txt:679
# 7b74a793f8a74b9496de185028a1af2f
msgid "Israel (``il``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:683
# 171b1fb6740c4250819361e774e2de1c
msgid "A form field that validates its input as an Israeli five-digit postal code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:687
# 91bb261e9459427d8b02f72cb408456c
msgid "A form field that validates its input as an `Israeli identification number`_. The output will be in the format of a 2-9 digit number, consisting of a 1-8 digit ID number followed by a single checksum digit, calculated using the `Luhn algorithm`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:692
# c1af235205b5416ebe149bf6e6a1af26
msgid "Input may contain an optional hyphen separating the ID number from the checksum digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:699
# de72230e67e84931a7a926caac10f4fb
msgid "Italy (``it``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:703
# 64aaf4830613413faea48de5bf4abcd0
msgid "A form field that validates input as an Italian social security number (`codice fiscale`_)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:710
# e2e8087a4a3b4df795e70ec55fd65fd6
msgid "A form field that validates Italian VAT numbers (partita IVA)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:714
# fd007792cb34456886d83143c7ecd080
msgid "A form field that validates input as an Italian zip code. Valid codes must have five digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:719
# 1e54b8e3a2d144c9ad9762cb11a75921
msgid "A ``Select`` widget that uses a list of Italian provinces as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:723
# 805b6dfd1dae481c9d0739dde9b59705
msgid "A ``Select`` widget that uses a list of Italian regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:726
# db31a8b61e77470996bb46047c1847cf
msgid "Japan (``jp``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:730
# b9b86bdf41584a5e97903c509cd4cbdf
msgid "A form field that validates input as a Japanese postcode. It accepts seven digits, with or without a hyphen."
msgstr ""

#: ../../ref/contrib/localflavor.txt:735
# c07a211a239b4eebb461c956d4af4bfe
msgid "A ``Select`` widget that uses a list of Japanese prefectures as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:738
# 4d3ce8d5ba0c42da8727df2895090b0c
msgid "Kuwait (``kw``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:742
# c0f566d8c72d4289a8ab94479b1c7340
msgid "A form field that validates input as a Kuwaiti Civil ID number. A valid Civil ID number must obey the following rules:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:745
# 4f375303a44e4d4d99be2d447847d778
msgid "The number consist of 12 digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:746
# 99dc9f2586c64f178e6f8868a5aa804c
msgid "The birthdate of the person is a valid date."
msgstr ""

#: ../../ref/contrib/localflavor.txt:747
# 452c0357b7e348f0aa284a947473ea9a
msgid "The calculated checksum equals to the last digit of the Civil ID."
msgstr ""

#: ../../ref/contrib/localflavor.txt:750
# e7e9deda338a460e9f962e35f0746d89
msgid "Macedonia (``mk``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:756
# d7de4bb60f774a16b6b7aa1a4435409b
msgid "A form field that validates input as a Macedonian identity card number. Both old and new identity card numbers are supported."
msgstr ""

#: ../../ref/contrib/localflavor.txt:762
# bff3465fcbe54328ba7c2d4c6b394e8e
msgid "A form ``Select`` widget that uses a list of Macedonian municipalities as choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:768
# 323c06d5e46346a3a6791af8327c7a85
msgid "A form field that validates input as a unique master citizen number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:771
# 02431c10ba1641daab47a50ae3b16e57
msgid "The format of the unique master citizen number is not unique to Macedonia. For more information see: https://secure.wikimedia.org/wikipedia/en/wiki/Unique_Master_Citizen_Number"
msgstr ""

#: ../../ref/contrib/localflavor.txt:775
# e462cddfea8943a4aa6153ecf6f30089
msgid "A value will pass validation if it complies to the following rules:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:777
# ce7f0ba37adf44d1947bb092c2f67de6
msgid "Consists of exactly 13 digits"
msgstr ""

#: ../../ref/contrib/localflavor.txt:778
# d2c1cbbfcde04488af94b1c5fe5e0459
msgid "The first 7 digits represent a valid past date in the format DDMMYYY"
msgstr ""

#: ../../ref/contrib/localflavor.txt:779
# 253da310c2ea4ddd9a6af32131eab10a
msgid "The last digit of the UMCN passes a checksum test"
msgstr ""

#: ../../ref/contrib/localflavor.txt:784
# 22da5ad8e48f46678d082230f647a611
msgid "A model field that forms represent as a ``forms.MKIdentityCardNumberField`` field."
msgstr ""

#: ../../ref/contrib/localflavor.txt:790
# 8a3501d89d064d9186a22329f19e110e
msgid "A model field that forms represent as a ``forms.MKMunicipalitySelect`` and stores the 2 character code of the municipality in the database."
msgstr ""

#: ../../ref/contrib/localflavor.txt:797
# ad95511ff9184e53af744770bb59a8fb
msgid "A model field that forms represent as a ``forms.UMCNField`` field."
msgstr ""

#: ../../ref/contrib/localflavor.txt:801
# 2622d9fd777342e3969c9754bda89154
msgid "Mexico (``mx``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:807
# 5b83ffc26b4d4aba9c1fa933a571a0f2
msgid "A form field that accepts a Mexican Zip Code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:809
# 3054417a3f63430ba4acca1bdc52da8f
msgid "More info about this: List of postal codes in Mexico (zipcodes_)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:817
# 38eec2b9e60f401590166d1b4863950f
msgid "A form field that validates a Mexican *Registro Federal de Contribuyentes* for either **Persona física** or **Persona moral**. This field accepts RFC strings whether or not it contains a *homoclave*."
msgstr ""

#: ../../ref/contrib/localflavor.txt:821
# f56e3bb0eb8348aeb2cd134e43856947
msgid "More info about this: Registro Federal de Contribuyentes (rfc_)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:829
# 19d69551def24e9ea1f8238aedc7b48b
msgid "A field that validates a Mexican *Clave Única de Registro de Población*."
msgstr ""

#: ../../ref/contrib/localflavor.txt:831
# 975a19f1db3d47b39575ea25b831e538
msgid "More info about this: Clave Unica de Registro de Poblacion (curp_)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:837
# fb123742e3b644fcbdc0fd2fe9b7e6ad
msgid "A ``Select`` widget that uses a list of Mexican states as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:843
# 646f9a1e2f0f4113857fa01aa2005372
msgid "A model field that stores the three-letter Mexican state abbreviation in the database."
msgstr ""

#: ../../ref/contrib/localflavor.txt:850
# a7d03d09bc59444c96c789fabe2361c8
msgid "A model field that forms represent as a ``forms.MXZipCodeField`` field and stores the five-digit Mexican zip code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:857
# 1b2f96b73714406fab05c40c5d53eba9
msgid "A model field that forms represent as a ``forms.MXRFCField`` field and stores the value of a valid Mexican RFC."
msgstr ""

#: ../../ref/contrib/localflavor.txt:864
# 94454a7bb9ce43e3a415d07752ae99fd
msgid "A model field that forms represent as a ``forms.MXCURPField`` field and stores the value of a valid Mexican CURP."
msgstr ""

#: ../../ref/contrib/localflavor.txt:867
# d59878d3e531459495dda87a13959282
msgid "Additionally, a choice tuple is provided in ``django.contrib.localflavor.mx.mx_states``, allowing customized model and form fields, and form presentations, for subsets of Mexican states abbreviations:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:873
# 0b4ad5da8e3247f98ce8317121595bed
msgid "A tuple of choices of the states abbreviations for all 31 Mexican states, plus the `Distrito Federal`."
msgstr ""

#: ../../ref/contrib/localflavor.txt:877
# 0000670d38ae42258c2e8d3dee7f5fb2
msgid "Norway (``no``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:881
# 7f32cfe05d1143acb2a1326fe01a4cfc
msgid "A form field that validates input as a Norwegian social security number (personnummer_)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:888
# cab42af192424f3ab593be85642b8e8e
msgid "A form field that validates input as a Norwegian zip code. Valid codes have four digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:893
# 1c57a3fd992d495dbba4ca41ad07c02c
msgid "A ``Select`` widget that uses a list of Norwegian municipalities (fylker) as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:897
# 093570d0a16d4b02a1476d0e46baa36f
msgid "Paraguay (``py``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:903
# a91bf2c60f624c0191959588f2c808d0
msgid "A ``Select`` widget with a list of Paraguayan departments as choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:907
# ca98a2f223ad4255bfe38de25717a441
msgid "A ``Select`` widget with a roman numbered list of Paraguayan departments as choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:910
# e4d4a39204434d7585b3a4beb138269a
msgid "Peru (``pe``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:914
# 4218816eafe34eb88f700883b2abb33d
msgid "A form field that validates input as a DNI (Peruvian national identity) number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:919
# beaf1b07945440408e52c57015180ab1
msgid "A form field that validates input as an RUC (Registro Unico de Contribuyentes) number. Valid RUC numbers have 11 digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:924
# b7e3d0a78bd546fa9e707959fedd3306
msgid "A ``Select`` widget that uses a list of Peruvian Departments as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:927
# bcafb551da3c4a3f9e67d7dba43e83bf
msgid "Poland (``pl``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:931
# 05cb10fe7b604d8785894610af9e3fbf
msgid "A form field that validates input as a Polish national identification number (PESEL_)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:940
# df9777d85f824537942311f71dd605fa
msgid "A form field that validates input as a Polish National ID Card number. The valid format is AAAXXXXXX, where A is letter (A-Z), X is digit and left-most digit is checksum digit. More information about checksum calculation algorithm see `Polish identity card`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:949
# 7fb21f20ed9b4283965e00a756e2bd44
msgid "A form field that validates input as a Polish National Official Business Register Number (REGON_), having either seven or nine digits. The checksum algorithm used for REGONs is documented at http://wipos.p.lodz.pl/zylla/ut/nip-rego.html."
msgstr ""

#: ../../ref/contrib/localflavor.txt:958
# 0d998c5fe00b42ba8592fa56adee87f4
msgid "A form field that validates input as a Polish postal code. The valid format is XX-XXX, where X is a digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:963
# ae81f05b7ee14ed98088b085ba326837
msgid "A form field that validates input as a Polish Tax Number (NIP). Valid formats are XXX-XXX-XX-XX, XXX-XX-XX-XXX or XXXXXXXXXX. The checksum algorithm used for NIPs is documented at http://wipos.p.lodz.pl/zylla/ut/nip-rego.html."
msgstr ""

#: ../../ref/contrib/localflavor.txt:969
# 40c4317c4ffd4534b64be60edbcc8ce4
msgid "A ``Select`` widget that uses a list of Polish administrative units as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:974
# 0dcf3b407d5e48888ebee96b00c2a1a6
msgid "A ``Select`` widget that uses a list of Polish voivodeships (administrative provinces) as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:978
# 641d84b3f252437b9966ff5b3b5b6768
msgid "Portugal (``pt``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:982
# 25aa09b0fa864dc0ac813721520eca38
msgid "A form field that validates input as a Portuguese zip code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:986
# 9a2ce7fa1f3c4c089cf49fc6f07a5d3c
msgid "A form field that validates input as a Portuguese phone number. Valid numbers have 9 digits (may include spaces) or start by 00 or + (international)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:991
# 5eb7c82dd53c484c88b92d86a4aad44e
msgid "Romania (``ro``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:995
# c9f5cb34cddc4ce29e7a3e7bc21bfaf2
msgid "A form field that validates Romanian fiscal identification codes (CIF). The return value strips the leading RO, if given."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1000
# 1c340fd0600048de85b27d106a43c53d
msgid "A form field that validates Romanian personal numeric codes (CNP)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1004
# da8f02f67852498abe65140608002748
msgid "A form field that validates its input as a Romanian county (judet) name or abbreviation. It normalizes the input to the standard vehicle registration abbreviation for the given county. This field will only accept names written with diacritics; consider using ROCountySelect as an alternative."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1011
# f02238200aea4f46bd1f78e2d5c506f0
msgid "A ``Select`` widget that uses a list of Romanian counties (judete) as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1016
# ce694abdc11c4021952d3af48c98a21e
msgid "A form field that validates its input as a Romanian International Bank Account Number (IBAN). The valid format is ROXX-XXXX-XXXX-XXXX-XXXX-XXXX, with or without hyphens."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1022
# f652b9bbe8744e3d8d4b1cc9791482df
msgid "A form field that validates Romanian phone numbers, short special numbers excluded."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1027
# 828fcb0207e940f9a9668664d5010e58
msgid "A form field that validates Romanian postal codes."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1030
# 2909b6877bcc44e8b53d8ede64cb46c8
msgid "Russia (``ru``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1036
# d91df786cba54ee29bb404d7ce90ed7b
msgid "Russian Postal code field. The valid format is XXXXXX, where X is any digit and the first digit is not zero."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1041
# 4ff827130c2d4877b5fbf26febac00b2
msgid "A ``Select`` widget that uses a list of Russian Counties as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1045
# 8e39ae04d9eb4ed794bc155bdff5383b
msgid "A ``Select`` widget that uses a list of Russian Regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1049
# 9f96966f45254d649764af58fc9e351a
msgid "Russian internal passport number. The valid format is XXXX XXXXXX, where X is any digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1054
# 1ecc9add60ea4085acebfe7f5cc92e18
msgid "Russian alien's passport number. The valid format is XX XXXXXXX, where X is any digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1058
# bf83a7dc697242638d6ef580e48536d9
msgid "Slovakia (``sk``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1062
# 44c51447db274457b2f78c112b1804d7
msgid "A form field that validates input as a Slovak postal code. Valid formats are XXXXX or XXX XX, where X is a digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1067
# 0a8d265c139d4b33a0ce5ad20b63ecb8
msgid "A ``Select`` widget that uses a list of Slovak districts as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1071
# d6284f00e40e46df90d3280b40512d22
msgid "A ``Select`` widget that uses a list of Slovak regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1074
# 5ddbd584cd4040d0b1c379d7a9527567
msgid "Slovenia (``si``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1078
# 0a656e98f9c2481f96211ac2ff972b4e
msgid "A form field that validates input as Slovenian personal identification number and stores gender and birthday to self.info dictionary."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1083
# faad4c2346584b30b147e397955028d3
msgid "A form field that validates input as a Slovenian tax number. Valid input is SIXXXXXXXX or XXXXXXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1088
# 9c7feb34b6df47c58a1044d26101ed13
msgid "A form field that validates input as a Slovenian phone number. Phone number must contain at least local area code with optional country code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1093
# 33e7d9a55f9d474280bf5eb90ef4eb59
msgid "A form field that provides a choice field of major Slovenian postal codes."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1098
# 83ceb8a16e4849d490c7c22958198c11
msgid "A ``Select`` widget that uses a list of major Slovenian postal codes as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1103
# 618797231ea14aecaf920854b6757381
msgid "South Africa (``za``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1107
# 34a807fe87c44858aad3c722011e6350
msgid "A form field that validates input as a South African ID number. Validation uses the Luhn checksum and a simplistic (i.e., not entirely accurate) check for birth date."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1113
# b74dfe64723e43bb84cee737b6927540
msgid "A form field that validates input as a South African postcode. Valid postcodes must have four digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1117
# ba0e57cd907a49c2b53d7db08047fa09
msgid "Spain (``es``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1121
# f057f44de26a4e579eb99e48acf2666a
msgid "A form field that validates input as a Spanish NIF/NIE/CIF (Fiscal Identification Number) code."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1126
# 56d9785d505c42d3a3ab3088f9b8145f
msgid "A form field that validates input as a Spanish bank account number (Codigo Cuenta Cliente or CCC). A valid CCC number has the format EEEE-OOOO-CC-AAAAAAAAAA, where the E, O, C and A digits denote the entity, office, checksum and account, respectively. The first checksum digit validates the entity and office. The second checksum digit validates the account. It is also valid to use a space as a delimiter, or to use no delimiter."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1136
# ac451166dc9f4373b91d078dfc4ee222
msgid "A form field that validates input as a Spanish phone number. Valid numbers have nine digits, the first of which is 6, 8 or 9."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1141
# 447002d07fe2413aac2de1b5264f8fd5
msgid "A form field that validates input as a Spanish postal code. Valid codes have five digits, the first two being in the range 01 to 52, representing the province."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1147
# f21cb9a318c440ba87348effbe013b89
msgid "A ``Select`` widget that uses a list of Spanish provinces as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1151
# 6ea4d5c1b2f54572ab050b99e2b6b85d
msgid "A ``Select`` widget that uses a list of Spanish regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1154
# 80e2ea36043d4d7eae7e78fe2c2bc05b
msgid "Sweden (``se``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1158
# 2cddcba9aea34472beeed8c0e4be555b
msgid "A Select form widget that uses a list of the Swedish counties (län) as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1161
# 10f18470e246498e85468f22ecc15f36
msgid "The cleaned value is the official county code -- see http://en.wikipedia.org/wiki/Counties_of_Sweden for a list."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1166
# 7ddf95c0aef747e5b21469f13809382a
msgid "A form field that validates input as a Swedish organisation number (organisationsnummer)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1169
# b614d91a386749638918126a7727922e
msgid "It accepts the same input as SEPersonalIdentityField (for sole proprietorships (enskild firma). However, co-ordination numbers are not accepted."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1173
# 09ac80e889ce4df3801af9128f8bd107
msgid "It also accepts ordinary Swedish organisation numbers with the format NNNNNNNNNN."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1176
# 934d595a473242a28a7571b6efca20db
msgid "The return value will be YYYYMMDDXXXX for sole proprietors, and NNNNNNNNNN for other organisations."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1181
# 8302f8481f0443a1a05c56ce6fbd2579
msgid "A form field that validates input as a Swedish personal identity number (personnummer)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1184
# 27c73f89e33c4946b600e24b37310c38
msgid "The correct formats are YYYYMMDD-XXXX, YYYYMMDDXXXX, YYMMDD-XXXX, YYMMDDXXXX and YYMMDD+XXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1187
# b059758ad5fc4fc1a5390198d5b597ff
msgid "A \\+ indicates that the person is older than 100 years, which will be taken into consideration when the date is validated."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1190
# f5be743aad51458cae93030fbc117c1f
msgid "The checksum will be calculated and checked. The birth date is checked to be a valid date."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1193
# 707c151876b0447384e714764ce3d77d
msgid "By default, co-ordination numbers (samordningsnummer) will be accepted. To only allow real personal identity numbers, pass the keyword argument coordination_number=False to the constructor."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1197
# 9a53a758a35d459788e881ea38d0815a
msgid "The cleaned value will always have the format YYYYMMDDXXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1201
# 0d416502c2f748abad520679dbe7ad6a
msgid "A form field that validates input as a Swedish postal code (postnummer). Valid codes consist of five digits (XXXXX). The number can optionally be formatted with a space after the third digit (XXX XX)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1205
# da12533d16024dd9a7ced43fa7cf3286
msgid "The cleaned value will never contain the space."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1208
# f385fbcc249048e78ab3d9a5f3c59416
msgid "Switzerland (``ch``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1212
# 74628683e8c04bd28ef15c1f6b8b211f
msgid "A form field that validates input as a Swiss identity card number. A valid number must confirm to the X1234567<0 or 1234567890 format and have the correct checksums."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1218
# 24e34f832d3047f9804aec3f53e2da09
msgid "A form field that validates input as a Swiss phone number. The correct format is 0XX XXX XX XX. 0XX.XXX.XX.XX and 0XXXXXXXXX validate but are corrected to 0XX XXX XX XX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1224
# 2fd03fe055f3477f8fad6207d174b22b
msgid "A form field that validates input as a Swiss zip code. Valid codes consist of four digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1229
# 0692a5fa7b1b4e529f982aeb3f8c7814
msgid "A ``Select`` widget that uses a list of Swiss states as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1232
# 670015f2ac364b48b4084115314ca032
msgid "Turkey (``tr``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1236
# c86ce0e1f6ed4b3c8d65efaa1e85e4f7
msgid "A form field that validates input as a Turkish zip code. Valid codes consist of five digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1241
# 25f376c8b5024dc0b913877e074d90f2
msgid "A form field that validates input as a Turkish phone number. The correct format is 0xxx xxx xxxx. +90xxx xxx xxxx and inputs without spaces also validates. The result is normalized to xxx xxx xxxx format."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1247
# 0c589f6d304a40b6a72d3aed08de580b
msgid "A form field that validates input as a TR identification number. A valid number must satisfy the following:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1250
# bbb586d21b764699a7fc98c13098aab4
msgid "The number consist of 11 digits."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1251
# a22b605e5f174730b532fb612102b2e4
msgid "The first digit cannot be 0."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1252
# 2419b38b07114e4e9f5890444ba0f9ac
msgid "(sum(1st, 3rd, 5th, 7th, 9th)*7 - sum(2nd,4th,6th,8th)) % 10) must be equal to the 10th digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1254
# 2446a4e4a1384cee977c00dcac2bd929
msgid "(sum(1st to 10th) % 10) must be equal to the 11th digit."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1258
# 8de4c96e433e4e518a116de096cce459
msgid "A ``select`` widget that uses a list of Turkish provinces as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1261
# 726659a0f2e94fa88bb9c400b362dd81
msgid "United Kingdom (``gb``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1265
# 94b017b0e5464f2cb853fa426213c60c
msgid "A form field that validates input as a UK postcode. The regular expression used is sourced from the schema for British Standard BS7666 address types at http://www.cabinetoffice.gov.uk/media/291293/bs7666-v2-0.xml."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1271
# 1553ccad89f84d698db043048c758c4d
msgid "A ``Select`` widget that uses a list of UK counties/regions as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1275
# 9ff45ce33fd14af5ba743776a96ccc34
msgid "A ``Select`` widget that uses a list of UK nations as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1278
# deadbee9a08b439e95f25ce7be6a3ebb
msgid "United States of America (``us``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1282
# fbdd27bbdb854cbdb25a92b39a5ec464
msgid "A form field that validates input as a U.S. phone number."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1286
# fbd3fffab07c4727be8887df81eb7472
msgid "A form field that validates input as a U.S. Social Security Number (SSN). A valid SSN must obey the following rules:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1289
# 5b7d242c2fc74c809b0fd1dd472bc03f
msgid "Format of XXX-XX-XXXX"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1290
# e18543d214054bc0879172d9924edba1
msgid "No group of digits consisting entirely of zeroes"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1291
# 4bf82557bfca4140a987b773dd2b3d0e
msgid "Leading group of digits cannot be 666"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1292
# a3ee69dd463646b888f66d68ce1ee853
msgid "Number not in promotional block 987-65-4320 through 987-65-4329"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1293
# 3bd752ec849647c0b6dd25c9058d4428
msgid "Number not one known to be invalid due to widespread promotional use or distribution (e.g., the Woolworth's number or the 1962 promotional number)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1299
# 596426cc03c34f4ca3fa1aa50ea0bc3d
msgid "A form field that validates input as a U.S. state name or abbreviation. It normalizes the input to the standard two-letter postal service abbreviation for the given state."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1305
# 4fdfb698d3894beb9cb99ce26630bed0
msgid "A form field that validates input as a U.S. ZIP code. Valid formats are XXXXX or XXXXX-XXXX."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1310
# 96d9cdff09cd472d95e4e142e75e52b9
msgid "A form ``Select`` widget that uses a list of U.S. states/territories as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1315
# 2a1c18498a9342e19386550c1667162a
msgid "A form ``Select`` widget that uses a list of U.S Postal Service state, territory and country abbreviations as its choices."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1320
# 7bbacc250c0341778f84603db22abdd3
msgid "A :class:`CharField` that checks that the value is a valid U.S.A.-style phone number (in the format ``XXX-XXX-XXXX``)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1325
# 700657b7e5564fcdab3a38c7c51871f5
msgid "A model field that forms represent as a ``forms.USStateField`` field and stores the two-letter U.S. state abbreviation in the database."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1330
# e73490a65d874ceb9441ac02a16fd893
msgid "A model field that forms represent as a ``forms.USPSSelect`` field and stores the two-letter U.S Postal Service abbreviation in the database."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1334
# e7ae30547d6547afb04bd221db408941
msgid "Additionally, a variety of choice tuples are provided in ``django.contrib.localflavor.us.us_states``, allowing customized model and form fields, and form presentations, for subsets of U.S states, territories and U.S Postal Service abbreviations:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1341
# 96bfee71e54d475da53b0684498577cf
msgid "A tuple of choices of the postal abbreviations for the contiguous or \"lower 48\" states (i.e., all except Alaska and Hawaii), plus the District of Columbia."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1347
# 75e1ac5c956d45a1aa53702ac80bb3d7
msgid "A tuple of choices of the postal abbreviations for all 50 U.S. states, plus the District of Columbia."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1352
# 47b5793f56484caf8343d6fa5aa2c349
msgid "A tuple of choices of the postal abbreviations for U.S territories: American Samoa, Guam, the Northern Mariana Islands, Puerto Rico and the U.S. Virgin Islands."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1358
# 6c890d565e2640e69880e5ec79dd1a62
msgid "A tuple of choices of the postal abbreviations of the three U.S military postal \"states\": Armed Forces Americas, Armed Forces Europe and Armed Forces Pacific."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1364
# ad07ed59cd3e411c9a8c37482b478bdd
msgid "A tuple of choices of the postal abbreviations of the three independent nations which, under the Compact of Free Association, are served by the U.S. Postal Service: the Federated States of Micronesia, the Marshall Islands and Palau."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1371
# 066ed28d7c9f406fb115e91d3f194e81
msgid "A tuple of choices of obsolete U.S Postal Service state abbreviations: the former abbreviation for the Northern Mariana Islands, plus the Panama Canal Zone, the Philippines and the former Pacific trust territories."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1378
# d9e2e149c8664048b30409926f2e842f
msgid "A tuple of choices of all postal abbreviations corresponding to U.S states or territories, and the District of Columbia.."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1383
# 5244ddb05d5a4387841bed874cd0ba29
msgid "A tuple of choices of all postal abbreviations recognized by the U.S Postal Service (including all states and territories, the District of Columbia, armed forces \"states\" and independent nations serviced by USPS)."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1389
# ed4efc2e45e84723929fd301952ca1c3
msgid "Uruguay (``uy``)"
msgstr ""

#: ../../ref/contrib/localflavor.txt:1393
# 23eb287b84b34e8095d78bfc95d5f9d2
msgid "A field that validates Uruguayan 'Cedula de identidad' (CI) numbers."
msgstr ""

#: ../../ref/contrib/localflavor.txt:1397
# 2af1bcbe09ef445da5636bbf91c3428c
msgid "A ``Select`` widget that uses a list of  Uruguayan departments as its choices."
msgstr ""

#: ../../ref/contrib/markup.txt:3
#: ../../ref/templates/builtins.txt:2404
# 762884ef65b94c4b9020dd6fbc7e8687
# 07f753a3c1a34943bcffddeb0804f422
msgid "django.contrib.markup"
msgstr ""

#: ../../ref/contrib/markup.txt:8
# 1d3edeaedcb641d49477b0fdadfa663c
msgid "Django provides template filters that implement the following markup languages:"
msgstr ""

#: ../../ref/contrib/markup.txt:11
# 6e000e9fd82b443e9c90934d65fab6dc
msgid "``textile`` -- implements `Textile`_ -- requires `PyTextile`_"
msgstr ""

#: ../../ref/contrib/markup.txt:12
# a32e67c2d14a4fd4aa8cc7222b287506
msgid "``markdown`` -- implements `Markdown`_ -- requires `Python-markdown`_"
msgstr ""

#: ../../ref/contrib/markup.txt:13
# 36701b9539e64646ad99925e52b7d555
msgid "``restructuredtext`` -- implements `reST (reStructured Text)`_ -- requires `doc-utils`_"
msgstr ""

#: ../../ref/contrib/markup.txt:16
# 364d6bdd6a7544019a7540d7cd15fffa
msgid "In each case, the filter expects formatted markup as a string and returns a string representing the marked-up text. For example, the ``textile`` filter converts text that is marked-up in Textile format to HTML."
msgstr ""

#: ../../ref/contrib/markup.txt:21
# 6ed1f7ff9e1149049a774d1d90e34ef8
msgid "To activate these filters, add ``'django.contrib.markup'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load markup %}`` in a template, and you'll have access to these filters. For more documentation, read the source code in :file:`django/contrib/markup/templatetags/markup.py`."
msgstr ""

#: ../../ref/contrib/markup.txt:29
# fb2940bcc6af4be39ed3b8edc6435201
msgid "The output of markup filters is marked \"safe\" and will not be escaped when rendered in a template. Always be careful to sanitize your inputs and make sure you are not leaving yourself vulnerable to cross-site scripting or other types of attacks."
msgstr ""

#: ../../ref/contrib/markup.txt:42
# c56df987748a4fda90c3aa7096c736a3
msgid "reStructured Text"
msgstr ""

#: ../../ref/contrib/markup.txt:44
# f2a246bf89e940bd937c32a8c5e573c6
msgid "When using the ``restructuredtext`` markup filter you can define a :setting:`RESTRUCTUREDTEXT_FILTER_SETTINGS` in your django settings to override the default writer settings. See the `restructuredtext writer settings`_ for details on what these settings are."
msgstr ""

#: ../../ref/contrib/markup.txt:52
#: ../../ref/templates/builtins.txt:2409
# 3aa418ce844449e4a4454343197786a2
# 75d1ede572a44bcdb7b6f8532297ec0b
msgid "Markdown"
msgstr ""

#: ../../ref/contrib/markup.txt:54
# e8c83986e4374c2c8e83938d18e14f35
msgid "The Python Markdown library supports options named \"safe_mode\" and \"enable_attributes\". Both relate to the security of the output. To enable both options in tandem, the markdown filter supports the \"safe\" argument."
msgstr ""

#: ../../ref/contrib/markup.txt:58
# f640ebb0a4424643b83e6301b2e3a724
msgid "{{ markdown_content_var|markdown:\"safe\" }}"
msgstr ""

#: ../../ref/contrib/markup.txt:62
# 3b899760023f49beae48b1627ec272de
msgid "Versions of the Python-Markdown library prior to 2.1 do not support the optional disabling of attributes and by default they will be included in any output from the markdown filter - a warning is issued if this is the case."
msgstr ""

#: ../../ref/contrib/messages.txt:3
# 6006fee06c8940a0a148130960ac7eff
msgid "The messages framework"
msgstr ""

#: ../../ref/contrib/messages.txt:8
# 582f162921964f56bcb0d3080d86b1a2
msgid "Django provides full support for cookie- and session-based messaging, for both anonymous and authenticated clients. The messages framework allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one). Every message is tagged with a specific ``level`` that determines its priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""

#: ../../ref/contrib/messages.txt:19
# c2d563028fdc439c92b27881aa048943
msgid "Enabling messages"
msgstr ""

#: ../../ref/contrib/messages.txt:21
# 295351af80284b5db2be3c70315658e6
msgid "Messages are implemented through a :doc:`middleware </ref/middleware>` class and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""

#: ../../ref/contrib/messages.txt:24
# cfcfd09788f04d04af785a0c26d946c3
msgid "To enable message functionality, do the following:"
msgstr ""

#: ../../ref/contrib/messages.txt:26
# 39c1e25385a74e7c8b0d0f2370e14af3
msgid "Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains ``'django.contrib.messages.middleware.MessageMiddleware'``."
msgstr ""

#: ../../ref/contrib/messages.txt:29
# fe64da74ed494a2f8c302364e13afbec
msgid "If you are using a :ref:`storage backend <message-storage-backends>` that relies on :doc:`sessions </topics/http/sessions>` (the default), ``'django.contrib.sessions.middleware.SessionMiddleware'`` must be enabled and appear before ``MessageMiddleware`` in your :setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../ref/contrib/messages.txt:35
# ecfd405caf2e4b82b9b9b83bb2ed8f2a
msgid "Edit the :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting and make sure it contains ``'django.contrib.messages.context_processors.messages'``."
msgstr ""

#: ../../ref/contrib/messages.txt:38
# ab88eeacf2764d9da1309ecedb4f8823
msgid "Add ``'django.contrib.messages'`` to your :setting:`INSTALLED_APPS` setting"
msgstr ""

#: ../../ref/contrib/messages.txt:41
# f4fb7050461d4bbc9140d7e0d726f042
msgid "The default ``settings.py`` created by ``django-admin.py startproject`` has ``MessageMiddleware`` activated and the ``django.contrib.messages`` app installed. Also, the default value for :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains ``'django.contrib.messages.context_processors.messages'``."
msgstr ""

#: ../../ref/contrib/messages.txt:46
# 54c43fef21f249b28f530a593ab51dcf
msgid "If you don't want to use messages, you can remove the ``MessageMiddleware`` line from :setting:`MIDDLEWARE_CLASSES`, the ``messages`` context processor from :setting:`TEMPLATE_CONTEXT_PROCESSORS` and ``'django.contrib.messages'`` from your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/messages.txt:52
# 57f9b80de3a84c5fb36debe2d440e66c
msgid "Configuring the message engine"
msgstr ""

#: ../../ref/contrib/messages.txt:57
# 7eb2dba9e10d463290bcd21223e14ecf
msgid "Storage backends"
msgstr ""

#: ../../ref/contrib/messages.txt:59
# 4ed6d1f4c84c42f9a0350e1b3e9e12b5
msgid "The messages framework can use different backends to store temporary messages. To change which backend is being used, add a `MESSAGE_STORAGE`_ to your settings, referencing the module and class of the storage class. For example::"
msgstr ""

#: ../../ref/contrib/messages.txt:66
# 04663576ba1643fd87e28a8cd6eb3d7d
msgid "The value should be the full path of the desired storage class."
msgstr ""

#: ../../ref/contrib/messages.txt:68
# 8c56e89dba0449c782c5eded348656c1
msgid "Four storage classes are included:"
msgstr ""

#: ../../ref/contrib/messages.txt:71
# e42baeda583d4e6d98c2c168be78b5b9
msgid "This class stores all messages inside of the request's session. It requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:75
# fb9c1ce9e6bb4ad38cac5cd4f90903fe
msgid "This class stores the message data in a cookie (signed with a secret hash to prevent manipulation) to persist notifications across requests. Old messages are dropped if the cookie data size would exceed 4096 bytes."
msgstr ""

#: ../../ref/contrib/messages.txt:80
# d683876eb85840a9b5938e9c9a716ff5
msgid "This class first uses CookieStorage for all messages, falling back to using SessionStorage for the messages that could not fit in a single cookie."
msgstr ""

#: ../../ref/contrib/messages.txt:83
# 8f198952a43147538ec146cac5643b87
msgid "Since it is uses SessionStorage, it also requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:86
# 2d2c5dfa10324dd6836601b49fd36502
msgid "To write your own storage class, subclass the ``BaseStorage`` class in ``django.contrib.messages.storage.base`` and implement the ``_get`` and ``_store`` methods."
msgstr ""

#: ../../ref/contrib/messages.txt:91
# 4b243d96801a4ff0b65a984fa84f701a
msgid "Message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:93
# 9c2af19dca9e49f08a88302f4c7ab6a6
msgid "The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates."
msgstr ""

#: ../../ref/contrib/messages.txt:98
# 30af5325c2d64eea8e618a5cfb336cd0
msgid "The built-in levels (which can be imported from ``django.contrib.messages`` directly) are:"
msgstr ""

#: ../../ref/contrib/messages.txt:102
# c21c350772a24e15add6fef6dfac0df8
msgid "Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:102
# 6b6c1043481b413b836d64a079c41f8a
msgid "Purpose"
msgstr ""

#: ../../ref/contrib/messages.txt:104
#: ../../ref/contrib/messages.txt:131
#: ../../ref/contrib/messages.txt:209
# 50077fd702e1460089ef105c7be6ed77
# c8416e235d484049ac983fa7a1db13cc
# 45ccac8cca4a454288e446f8c05a4e65
msgid "``DEBUG``"
msgstr ""

#: ../../ref/contrib/messages.txt:104
# 51278416f08544eebc1632034ee62f16
msgid "Development-related messages that will be ignored (or removed) in a production deployment"
msgstr ""

#: ../../ref/contrib/messages.txt:105
#: ../../ref/contrib/messages.txt:132
#: ../../ref/contrib/messages.txt:210
# 9c79c731d28e4395a6acd8ff0c683847
# 51aa89d7a3b44b1284c3211a0442c0c7
# 1c42401605f141549825d9ce769e7090
msgid "``INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:105
# 2f07869252394f998f5560776840f425
msgid "Informational messages for the user"
msgstr ""

#: ../../ref/contrib/messages.txt:106
#: ../../ref/contrib/messages.txt:133
#: ../../ref/contrib/messages.txt:211
# 15ce19c0a8374afd9ccc8a93530548d6
# 937e54021ea34d31b8f91e48a534fc07
# 1985e4dc4379417d95d115b48a90434e
msgid "``SUCCESS``"
msgstr ""

#: ../../ref/contrib/messages.txt:106
# 1a8699450b7f42128e5343b0d6e48b21
msgid "An action was successful, e.g. \"Your profile was updated successfully\""
msgstr ""

#: ../../ref/contrib/messages.txt:107
#: ../../ref/contrib/messages.txt:134
#: ../../ref/contrib/messages.txt:212
# 1cf2bd93ed84454482478993f6883a86
# 0f5b81ef97d84300bee669533346105a
# 8d243e81e2df4c7ab8de85f245277b0a
msgid "``WARNING``"
msgstr ""

#: ../../ref/contrib/messages.txt:107
# 6c1761b089a94621867819264765f8af
msgid "A failure did not occur but may be imminent"
msgstr ""

#: ../../ref/contrib/messages.txt:108
#: ../../ref/contrib/messages.txt:135
#: ../../ref/contrib/messages.txt:213
# c38dc207ccd44ecea1fcf7d8c24cfee3
# ce2b2745269f493e81f6a1d7a97190e6
# 9e3ee5716f3e4341a0aa044e30810f82
msgid "``ERROR``"
msgstr ""

#: ../../ref/contrib/messages.txt:108
# 4594bef244464bd2a4be66f16ce2bc4d
msgid "An action was **not** successful or some other failure occurred"
msgstr ""

#: ../../ref/contrib/messages.txt:111
# 05254d49092a49848904f7ea44e1a3aa
msgid "The `MESSAGE_LEVEL`_ setting can be used to change the minimum recorded level (or it can be `changed per request`_). Attempts to add messages of a level less than this will be ignored."
msgstr ""

#: ../../ref/contrib/messages.txt:118
# 8d52971a9d9f4719a226634038eb5281
msgid "Message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:120
# e97fad07026640ce9961fadb900cd1a4
msgid "Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see `Adding extra message tags`_ below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that's a lowercase version of its own constant:"
msgstr ""

#: ../../ref/contrib/messages.txt:129
#: ../../ref/contrib/messages.txt:207
# 1c8da98f1b14419aac0f475f77ab1584
# 9a0146a2c89f4375b7834cd4046b80e1
msgid "Level Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:129
# 40b89abda6534403b58c67e2ccd15fee
msgid "Tag"
msgstr ""

#: ../../ref/contrib/messages.txt:131
# bfc4017b635141e79dcf99a92b665761
msgid "``debug``"
msgstr ""

#: ../../ref/contrib/messages.txt:132
# 646f489864fd4a64bf91e12091db81e2
msgid "``info``"
msgstr ""

#: ../../ref/contrib/messages.txt:133
# d9cc3a263fad4167a30553c2a8451710
msgid "``success``"
msgstr ""

#: ../../ref/contrib/messages.txt:134
# ee2412a80ec14b3c857c98e36eda39ee
msgid "``warning``"
msgstr ""

#: ../../ref/contrib/messages.txt:135
# 60a44626f2504e6ea1ca2c931b61369e
msgid "``error``"
msgstr ""

#: ../../ref/contrib/messages.txt:138
# 53422821764548d783b78060d0ffdd99
msgid "To change the default tags for a message level (either built-in or custom), set the `MESSAGE_TAGS`_ setting to a dictionary containing the levels you wish to change. As this extends the default tags, you only need to provide tags for the levels you wish to override::"
msgstr ""

#: ../../ref/contrib/messages.txt:150
# 357b01a9baef487898842bcf812cda42
msgid "Using messages in views and templates"
msgstr ""

#: ../../ref/contrib/messages.txt:153
# 35dda765ebca40c386d61513578ec86f
msgid "Adding a message"
msgstr ""

#: ../../ref/contrib/messages.txt:155
# 93a8c0141efc4ef7bff9453435d135e9
msgid "To add a message, call::"
msgstr ""

#: ../../ref/contrib/messages.txt:160
# c0fcad5afbef414087374d8277a349ff
msgid "Some shortcut methods provide a standard way to add messages with commonly used tags (which are usually represented as HTML classes for the message)::"
msgstr ""

#: ../../ref/contrib/messages.txt:170
# 1b7f0b918a11479087c2ef088d107711
msgid "Displaying messages"
msgstr ""

#: ../../ref/contrib/messages.txt:172
# 1ac17adfe292483b9ac68da87d2894b2
msgid "In your template, use something like::"
msgstr ""

#: ../../ref/contrib/messages.txt:182
# 01557cfa873a4b00a0978ef96b893ed5
msgid "If you're using the context processor, your template should be rendered with a ``RequestContext``. Otherwise, ensure ``messages`` is available to the template context."
msgstr ""

#: ../../ref/contrib/messages.txt:186
# 65123831ab3f4b9dac9ba6d2e36d4101
msgid "Even if you know there is only just one message, you should still iterate over the ``messages`` sequence, because otherwise the message storage will not be cleared for the next request."
msgstr ""

#: ../../ref/contrib/messages.txt:191
# 28ffe85d6c864ccdae396eaf9c552905
msgid "Creating custom message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:193
# da60ead9d863437f821df4d856bfa95c
msgid "Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:201
# 03ef38c1bd594c449004c575ce03704c
msgid "When creating custom message levels you should be careful to avoid overloading existing levels. The values for the built-in levels are:"
msgstr ""

#: ../../ref/contrib/messages.txt:207
#: ../../ref/signals.txt:72
#: ../../ref/signals.txt:289
#: ../../ref/signals.txt:315
#: ../../ref/templates/builtins.txt:2343
# 41c2b677c14d4403805c877d64b3bc43
# 0703d0c3530c4120b2f67b39cb7bde57
# 579391caf439484f90d10cdc9abcbe61
# ac43321046734f389fb7e59d744d7b0e
# fbcd9c0aca644c4bbd6f60e03170d8ab
msgid "Value"
msgstr ""

#: ../../ref/contrib/messages.txt:209
# 9761420810924c82bec45db1d043926d
msgid "10"
msgstr ""

#: ../../ref/contrib/messages.txt:210
# 5f12e1dd9fda4419a26cb2bd150fe8d4
msgid "20"
msgstr ""

#: ../../ref/contrib/messages.txt:211
# e94bc741b0344acd9716300f439aef0e
msgid "25"
msgstr ""

#: ../../ref/contrib/messages.txt:212
# 258cfe3234d94a0aabad1f2dc9f41a15
msgid "30"
msgstr ""

#: ../../ref/contrib/messages.txt:213
# b834f71562474c229b3f6d1e2e39350c
msgid "40"
msgstr ""

#: ../../ref/contrib/messages.txt:216
# 02c3bb8dff6e454f80d55685ed51d0a5
msgid "If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the `MESSAGE_TAGS`_ setting."
msgstr ""

#: ../../ref/contrib/messages.txt:220
# b3c4ef42f0ac4e3ebd1fc40c5d7bed73
msgid "If you are creating a reusable application, it is recommended to use only the built-in `message levels`_ and not rely on any custom levels."
msgstr ""

#: ../../ref/contrib/messages.txt:224
# 63ea5d91489b45eebeb5593f86308485
msgid "Changing the minimum recorded level per-request"
msgstr ""

#: ../../ref/contrib/messages.txt:226
# b75d3be95db24be191d1496dc64f2c17
msgid "The minimum recorded level can be set per request via the ``set_level`` method::"
msgstr ""

#: ../../ref/contrib/messages.txt:243
# 14c09b1a9deb4064b91c0b4d522a363a
msgid "Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr ""

#: ../../ref/contrib/messages.txt:248
# a893e9b8e8c04adb933d20b304a9124a
msgid "For more information on how the minimum recorded level functions, see `Message levels`_ above."
msgstr ""

#: ../../ref/contrib/messages.txt:252
# 802a35685dab4a2f80fa7d961186b429
msgid "Adding extra message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:254
# ac0f2743124b4b82b6574eb06b4e97e0
msgid "For more direct control over message tags, you can optionally provide a string containing extra tags to any of the add methods::"
msgstr ""

#: ../../ref/contrib/messages.txt:261
# baa440a5331549f4ac570d70ed5e1287
msgid "Extra tags are added before the default tag for that level and are space separated."
msgstr ""

#: ../../ref/contrib/messages.txt:265
# cdd4010fd25d4474b08e06fba05ac592
msgid "Failing silently when the message framework is disabled"
msgstr ""

#: ../../ref/contrib/messages.txt:267
# e96f08dbb0394cec947997cfaa202c27
msgid "If you're writing a reusable app (or other piece of code) and want to include messaging functionality, but don't want to require your users to enable it if they don't want to, you may pass an additional keyword argument ``fail_silently=True`` to any of the ``add_message`` family of methods. For example::"
msgstr ""

#: ../../ref/contrib/messages.txt:277
# b78c49f1fffa4b7f8801d20996b7bef1
msgid "Internally, Django uses this functionality in the create, update, and delete :doc:`generic views </topics/http/generic-views>` so that they work even if the message framework is disabled."
msgstr ""

#: ../../ref/contrib/messages.txt:282
# 0a0dec37b0714204a1e6d5427f768e8a
msgid "Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would otherwise occur when the messages framework disabled and one attempts to use one of the ``add_message`` family of methods. It does not hide failures that may occur for other reasons."
msgstr ""

#: ../../ref/contrib/messages.txt:288
# c0ac763fcd434feb833d0469cc722eb4
msgid "Expiration of messages"
msgstr ""

#: ../../ref/contrib/messages.txt:290
# 0759601400f04275b25087ed5500d4f4
msgid "The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed)."
msgstr ""

#: ../../ref/contrib/messages.txt:293
# e806ba79bfde4dd791eda93d963e2d9f
msgid "To avoid the messages being cleared, you can set the messages storage to ``False`` after iterating::"
msgstr ""

#: ../../ref/contrib/messages.txt:302
# ef3fba4a6d594c6c83894f8acaea3785
msgid "Behavior of parallel requests"
msgstr ""

#: ../../ref/contrib/messages.txt:304
# 4a9e715a75914a8c8bddd9d458041414
msgid "Due to the way cookies (and hence sessions) work, **the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel**. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected."
msgstr ""

#: ../../ref/contrib/messages.txt:312
# 5214dd2b5d194e2aa2d30e413cb58040
msgid "In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context."
msgstr ""

#: ../../ref/contrib/messages.txt:321
# e20b002ffa6f4cc3b0083c2ce39eff30
msgid "A few :doc:`Django settings </ref/settings>` give you control over message behavior:"
msgstr ""

#: ../../ref/contrib/messages.txt:325
#: ../../ref/settings.txt:1427
# f34c8fb882ab46618868ded82e03aef8
# 524f2eb17baa4a719cebf525481f391e
msgid "MESSAGE_LEVEL"
msgstr ""

#: ../../ref/contrib/messages.txt:327
# d6bd773a05784b289847e0885b761940
msgid "Default: ``messages.INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:329
# 27132f5efc944aa88c68dc3ba312c729
msgid "This sets the minimum message that will be saved in the message storage. See `Message levels`_ above for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:334
# 80b6d1a8d44d446394028e3d91be351d
msgid "If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:341
#: ../../ref/contrib/messages.txt:383
# 2e64a1616d34444c81c3a1c76a70576c
# 41dfcaf740e5414685a7f80ee628b400
msgid "If desired, you may specify the numeric values for the constants directly according to the values in the above :ref:`constants table <message-level-constants>`."
msgstr ""

#: ../../ref/contrib/messages.txt:346
#: ../../ref/settings.txt:1438
# 053cabd852754dd78bffe5d9ab148997
# eaa32cb66b42458e8b7916d85a72aba2
msgid "MESSAGE_STORAGE"
msgstr ""

#: ../../ref/contrib/messages.txt:348
# 40b10e72fdfa412e99038c00c3037ca3
msgid "Default: ``'django.contrib.messages.storage.user_messages.FallbackStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:350
# 736aaf13439445d1ae1fe38706b6045e
msgid "Controls where Django stores message data. Valid values are:"
msgstr ""

#: ../../ref/contrib/messages.txt:352
# 8873d9e671e44f27a49004504f97eeeb
msgid "``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:353
# bfd8ab36e2204a3ab97b636ded2968cf
msgid "``'django.contrib.messages.storage.session.SessionStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:354
# 9e96be3c18214c56ad673d60b593c636
msgid "``'django.contrib.messages.storage.cookie.CookieStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:356
# 866a29de74df4feba3abeec0ed6ca6e9
msgid "See `Storage backends`_ for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:359
#: ../../ref/settings.txt:1448
# 745186bd5e97434dbd0cd37129bb75b2
# 68e8cca8c2ed4806841d4378fd23b93d
msgid "MESSAGE_TAGS"
msgstr ""

#: ../../ref/contrib/messages.txt:361
#: ../../ref/contrib/staticfiles.txt:99
#: ../../ref/settings.txt:130
#: ../../ref/settings.txt:701
#: ../../ref/settings.txt:743
#: ../../ref/settings.txt:1028
#: ../../ref/settings.txt:1452
#: ../../ref/settings.txt:1468
#: ../../ref/settings.txt:1929
#: ../../ref/settings.txt:1997
# ff33004cf31a4f25b147d63ea512ff99
# 5a34f0e5bd814c8e996e4ab414acca4a
# 71cd35ec518c46c1ad067fbcf6030921
# f8178f6dc0a34b729e309ae8ef692195
# df77084d0764437886eb85cf662a3fcc
# cbb9bc29bd54489fac91452a0c4f0c18
# 98ff0b3b7bf44583993765222ce2ade9
# 60785511f6884bc59caa137fecbb308c
# 1a3c1613a03249c89389192c44cb8bcd
# 3a9f88f4f08e439d944f1c295dedca8a
msgid "Default::"
msgstr ""

#: ../../ref/contrib/messages.txt:369
# cf5b560003224339b65460ad8c3f45bb
msgid "This sets the mapping of message level to message tag, which is typically rendered as a CSS class in HTML. If you specify a value, it will extend the default. This means you only have to specify those values which you need to override. See `Displaying messages`_ above for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:376
# 10e44a701a3f403388cbe8ce318208b2
msgid "If you override ``MESSAGE_TAGS`` in your settings file and rely on any of the built-in constants, you must import the ``constants`` module directly to avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:388
#: ../../ref/settings.txt:1701
# 99dac741febc4265a7762d7e6bfcb8dc
# 4238d678dcf14e9cbdce12d700f26b5c
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/contrib/messages.txt:392
# e4d20e4b860a4d4b80fb2a6603950032
msgid "The storage backends that use cookies -- ``CookieStorage`` and ``FallbackStorage`` -- use the value of :setting:`SESSION_COOKIE_DOMAIN` in setting their cookies. See the :doc:`settings documentation </ref/settings>` for more information on how this works and why you might need to set it."
msgstr ""

#: ../../ref/contrib/redirects.txt:3
# 1f66c25d89d64cf68217a40968b597c2
msgid "The redirects app"
msgstr ""

#: ../../ref/contrib/redirects.txt:8
# 9c00440f35bb40909dc92adb7e2ee969
msgid "Django comes with an optional redirects application. It lets you store simple redirects in a database and handles the redirecting for you."
msgstr ""

#: ../../ref/contrib/redirects.txt:14
# 7eee4c152b6e4df6be8df92e37622270
msgid "To install the redirects app, follow these steps:"
msgstr ""

#: ../../ref/contrib/redirects.txt:16
# c580d7325faf416a9363ef8e33d14633
msgid "Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:18
# 353a210d1ab74be1826e6dec4f12cbd8
msgid "Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:25
# fff82437b5f0437db20bd20ea306c98e
msgid "``manage.py syncdb`` creates a ``django_redirect`` table in your database. This is a simple lookup table with ``site_id``, ``old_path`` and ``new_path`` fields."
msgstr ""

#: ../../ref/contrib/redirects.txt:28
# 57b69b0c66ec4ef680fa6beaa1ad78ba
msgid "The ``RedirectFallbackMiddleware`` does all of the work. Each time any Django application raises a 404 error, this middleware checks the redirects database for the requested URL as a last resort. Specifically, it checks for a redirect with the given ``old_path`` with a site ID that corresponds to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:34
# 81feafca04024905944fd674f351ba0c
msgid "If it finds a match, and ``new_path`` is not empty, it redirects to ``new_path``."
msgstr ""

#: ../../ref/contrib/redirects.txt:36
# d37ac3243dcd449f9d9b8c7030b4bab3
msgid "If it finds a match, and ``new_path`` is empty, it sends a 410 (\"Gone\") HTTP header and empty (content-less) response."
msgstr ""

#: ../../ref/contrib/redirects.txt:44
# d9dc79ba202b40679c9cab3e504b18d3
msgid "Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you can put ``RedirectFallbackMiddleware`` at the end of the list, because it's a last resort."
msgstr ""

#: ../../ref/contrib/redirects.txt:52
# f4cdbed5a0d048349d5274cc78671624
msgid "How to add, change and delete redirects"
msgstr ""

#: ../../ref/contrib/redirects.txt:57
# c00634036286403cb5d53d3fe69f7328
msgid "If you've activated the automatic Django admin interface, you should see a \"Redirects\" section on the admin index page. Edit redirects as you edit any other object in the system."
msgstr ""

#: ../../ref/contrib/redirects.txt:66
# a073f1ce72a2435dac840e4397546bc7
msgid "Redirects are represented by a standard :doc:`Django model </topics/db/models>`, which lives in `django/contrib/redirects/models.py`_. You can access redirect objects via the :doc:`Django database API </topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:3
# f3e34403b2e4499b9660d57ac26725aa
msgid "The sitemap framework"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:8
# aa1e171148f74d74a29f78b050510386
msgid "Django comes with a high-level sitemap-generating framework that makes creating sitemap_ XML files easy."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:16
# b9c78a79dfef49c6a963e2711ebf361c
msgid "A sitemap is an XML file on your Web site that tells search-engine indexers how frequently your pages change and how \"important\" certain pages are in relation to other pages on your site. This information helps search engines index your site."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:21
# 0a497648212a403d80a42570684cbff4
msgid "The Django sitemap framework automates the creation of this XML file by letting you express this information in Python code."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:24
# cef782c9c86f44b1b4cc8bb2101363e8
msgid "It works much like Django's :doc:`syndication framework </ref/contrib/syndication>`. To create a sitemap, just write a :class:`~django.contrib.sitemaps.Sitemap` class and point to it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:32
# b47c528f1a634ed98358ad332a05b2fb
msgid "To install the sitemap app, follow these steps:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:34
# b36763f8108941aeb97d07f0f20ae58a
msgid "Add ``'django.contrib.sitemaps'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:37
# d0ede2599a8f4d05a45e11beccf9b1bb
msgid "Make sure ``'django.template.loaders.app_directories.Loader'`` is in your :setting:`TEMPLATE_LOADERS` setting. It's in there by default, so you'll only need to change this if you've changed that setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:41
# 3b888d683aae4894b967eaed54c0d8b8
msgid "Make sure you've installed the :mod:`sites framework <django.contrib.sites>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:44
# 9f5e417b3a174fbaa766e382ed2a06d4
msgid "(Note: The sitemap application doesn't install any database tables. The only reason it needs to go into :setting:`INSTALLED_APPS` is so that the :func:`~django.template.loaders.app_directories.Loader` template loader can find the default templates.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:50
# 5fc2452daee64c0d85cb5318cdcde349
msgid "Initialization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:52
# 1b0183081f594313b733b09d7ecb740b
msgid "To activate sitemap generation on your Django site, add this line to your :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:57
# 7d1b4fc266854ffbb01e5ae7cccabaaf
msgid "This tells Django to build a sitemap when a client accesses :file:`/sitemap.xml`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:59
# 359b2f6c2fcb4333a67ab5388d915887
msgid "The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if :file:`sitemap.xml` lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at :file:`/content/sitemap.xml`, it may only reference URLs that begin with :file:`/content/`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:66
# 2df961d1a871479f9595017195d0b186
msgid "The sitemap view takes an extra, required argument: ``{'sitemaps': sitemaps}``. ``sitemaps`` should be a dictionary that maps a short section label (e.g., ``blog`` or ``news``) to its :class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap`` or ``NewsSitemap``). It may also map to an *instance* of a :class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap(some_var)``)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:74
# a5ddb5034f2c49a1a5073ef048adb3f7
msgid "Sitemap classes"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:76
# 5ad2efbf560a4335a401587b93d8e95a
msgid "A :class:`~django.contrib.sitemaps.Sitemap` class is a simple Python class that represents a \"section\" of entries in your sitemap. For example, one :class:`~django.contrib.sitemaps.Sitemap` class could represent all the entries of your Weblog, while another could represent all of the events in your events calendar."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:82
# 5606851f05db43c4913751a19bc26381
msgid "In the simplest case, all these sections get lumped together into one :file:`sitemap.xml`, but it's also possible to use the framework to generate a sitemap index that references individual sitemap files, one per section. (See `Creating a sitemap index`_ below.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:87
# f1f1983dbede4c6aa915b7dbdc76f1fe
msgid ":class:`~django.contrib.sitemaps.Sitemap` classes must subclass ``django.contrib.sitemaps.Sitemap``. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:91
#: ../../ref/contrib/syndication.txt:58
# 043ec34ea3c143a48fe4e2092427d73f
# fe78e8e2b4f4482a93303e596c0eb6a0
msgid "A simple example"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:93
# 2daee76ad40b408ca651cde0bd1d3a12
msgid "Let's assume you have a blog system, with an ``Entry`` model, and you want your sitemap to include all the links to your individual blog entries. Here's how your sitemap class might look::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:110
#: ../../ref/contrib/syndication.txt:92
# 9aa116d654cf487b951041448252e307
# 43716cfede6f42f8a01f293df075a5e1
msgid "Note:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:112
# c43622fcd18443f8bb5f38e5a76c2950
msgid ":attr:`~Sitemap.changefreq` and :attr:`~Sitemap.priority` are class attributes corresponding to ``<changefreq>`` and ``<priority>`` elements, respectively. They can be made callable as functions, as :attr:`~Sitemap.lastmod` was in the example."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:116
# 25f4722570e846d4abbc506f0b8505e4
msgid ":attr:`~Sitemap.items()` is simply a method that returns a list of objects. The objects returned will get passed to any callable methods corresponding to a sitemap property (:attr:`~Sitemap.location`, :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq`, and :attr:`~Sitemap.priority`)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:121
# 86ec71477e0f432dbf7d9a96ab999586
msgid ":attr:`~Sitemap.lastmod` should return a Python ``datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:122
# e30738d4c46b4e37aea49b6458fe4c91
msgid "There is no :attr:`~Sitemap.location` method in this example, but you can provide it in order to specify the URL for your object. By default, :attr:`~Sitemap.location()` calls ``get_absolute_url()`` on each object and returns the result."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:128
# b214e564baf14465a81e8f5bd0aa1c58
msgid "Sitemap class reference"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:132
# 8d7df119f4114bf0a9370bf7072dec39
msgid "A ``Sitemap`` class can define the following methods/attributes:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:136
# 56f15553fb9d4925870768037a697311
msgid "**Required.** A method that returns a list of objects. The framework doesn't care what *type* of objects they are; all that matters is that these objects get passed to the :attr:`~Sitemap.location()`, :attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()` and :attr:`~Sitemap.priority()` methods."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:144
#: ../../ref/contrib/sitemaps.txt:169
#: ../../ref/contrib/sitemaps.txt:181
#: ../../ref/contrib/sitemaps.txt:201
# 2893088adc3c4c2e9997e31e359b9392
# f53df0c5a7cf4beba43576a8722d4d9a
# 2194d5699b9d452cb4b2d85a75489b74
# 77cb24154eb746d09dcc76d6a651d9cf
msgid "**Optional.** Either a method or attribute."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:146
# 2d36fe9e547a408e95b24664a3b6b172
msgid "If it's a method, it should return the absolute path for a given object as returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:149
# bef9b44d4ba04a3382a09c91400dffd6
msgid "If it's an attribute, its value should be a string representing an absolute path to use for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:153
# b319f1833d93419eaaae7c4dd331aefc
msgid "In both cases, \"absolute path\" means a URL that doesn't include the protocol or domain. Examples:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:156
# 8e74aeaccb3e43e09a222425ddc304a4
msgid "Good: :file:`'/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:157
# 4d771eb4c4da4016b69fce433b68456a
msgid "Bad: :file:`'example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:158
# de20601c538a4bb68d73655005dc20e7
msgid "Bad: :file:`'http://example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:160
# 1405624e02c6488fa2d885a38c626d0b
msgid "If :attr:`~Sitemap.location` isn't provided, the framework will call the ``get_absolute_url()`` method on each object as returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:164
# b668a0527f2d4d09b23415a57ff0ca92
msgid "To specify a protocol other than ``'http'``, use :attr:`~Sitemap.protocol`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:171
# 2e2d1cb3a34b40df9d76149dddeaccef
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's last-modified date/time, as a Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:175
# 8402b93f773d44bda8e2566f6d757d16
msgid "If it's an attribute, its value should be a Python ``datetime.datetime`` object representing the last-modified date/time for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:183
# d35a5c36d1224a1a876b6f670f0b8379
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's change frequency, as a Python string."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:186
# f3a4adc79844404e9aa1931fbda72622
msgid "If it's an attribute, its value should be a string representing the change frequency of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:189
# fb9a2ada5c524da88477fb5ba3a4ef9c
msgid "Possible values for :attr:`~Sitemap.changefreq`, whether you use a method or attribute, are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:191
# 0e4b50ca30694c9ababd9bd0ef82e807
msgid "``'always'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:192
# e63db025992f42f69a2386d755d382ff
msgid "``'hourly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:193
# e9a8540d610149ec931c3824052c8477
msgid "``'daily'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:194
# 46edd47c02644e95b460879c97a20ac2
msgid "``'weekly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:195
# b59fc68345324b57bfa3d7926b268ee5
msgid "``'monthly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:196
# 2eeba864662541cf93cac94756f7c9ed
msgid "``'yearly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:197
# f8fa33c59f564bdb98d53f2197094d76
msgid "``'never'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:203
# c2a5b10da2e845c1a910e2a4ac147f68
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's priority, as either a string or float."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:206
# 5590340e7b0b4741a10ec869836e895b
msgid "If it's an attribute, its value should be either a string or float representing the priority of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:209
# 4978ecaa744a48cda19ea0c1d7a109bd
msgid "Example values for :attr:`~Sitemap.priority`: ``0.4``, ``1.0``. The default priority of a page is ``0.5``. See the `sitemaps.org documentation`_ for more."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:218
# 4fbf6729ef634663b465757ec1fad7b8
msgid "**Optional.**"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:220
# e189a6c50b09458cbc5e78876200fade
msgid "This attribute defines the protocol (``'http'`` or ``'https'``) of the URLs in the sitemap. If it isn't set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is ``'http'``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:227
# 8c32509bfdde4712a5197b70a10f75ca
msgid "Shortcuts"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:229
# 061224177bf4426188aff486fad283d0
msgid "The sitemap framework provides a couple convenience classes for common cases:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:233
# 29dc6cfb57d545bcb97bb19167d1e023
msgid "The :class:`django.contrib.sitemaps.FlatPageSitemap` class looks at all publicly visible :mod:`flatpages <django.contrib.flatpages>` defined for the current :setting:`SITE_ID` (see the :mod:`sites documentation <django.contrib.sites>`) and creates an entry in the sitemap. These entries include only the :attr:`~Sitemap.location` attribute -- not :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq` or :attr:`~Sitemap.priority`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:243
# f4fd6271eeab4ffab2ac119fbce8f0a6
msgid "The :class:`django.contrib.sitemaps.GenericSitemap` class works with any :doc:`generic views </ref/generic-views>` you already have. To use it, create an instance, passing in the same :data:`info_dict` you pass to the generic views. The only requirement is that the dictionary have a :data:`queryset` entry. It may also have a :data:`date_field` entry that specifies a date field for objects retrieved from the :data:`queryset`. This will be used for the :attr:`~Sitemap.lastmod` attribute in the generated sitemap. You may also pass :attr:`~Sitemap.priority` and :attr:`~Sitemap.changefreq` keyword arguments to the :class:`~django.contrib.sitemaps.GenericSitemap` constructor to specify these attributes for all URLs."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:257
# 51b35cc0d28c4bc1b0aeb9de7a5fb6fd
msgid "Here's an example of a :doc:`URLconf </topics/http/urls>` using both::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:284
# e123c37125074858b08ce31cc57e1fa0
msgid "Creating a sitemap index"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:286
# 6c24879070c5483887870543cbd0b39a
msgid "The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your :data:`sitemaps` dictionary. The only differences in usage are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:290
# bf1b91f148a0438898a56738a90703d9
msgid "You use two views in your URLconf: :func:`django.contrib.sitemaps.views.index` and :func:`django.contrib.sitemaps.views.sitemap`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:292
# add6706f390b402698527c16b479f9cf
msgid "The :func:`django.contrib.sitemaps.views.sitemap` view should take a :data:`section` keyword argument."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:295
# 3528abc80b1f4ce8aeb8714abd69b4d9
msgid "Here's what the relevant URLconf lines would look like for the example above::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:302
# 692cd855ff524d1c803df38c52ed8743
msgid "This will automatically generate a :file:`sitemap.xml` file that references both :file:`sitemap-flatpages.xml` and :file:`sitemap-blog.xml`. The :class:`~django.contrib.sitemaps.Sitemap` classes and the :data:`sitemaps` dict don't change at all."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:307
# f9b18b0aee9f408c9c81c347aae77b87
msgid "You should create an index file if one of your sitemaps has more than 50,000 URLs. In this case, Django will automatically paginate the sitemap, and the index will reflect that."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:313
# c9850eb01abd4f62b758c5c55b500bd2
msgid "If you're not using the vanilla sitemap view -- for example, if it's wrapped with a caching decorator -- you must name your sitemap view and pass ``sitemap_url_name`` to the index view::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:331
# de473bbf7c4f46a59ea348bc95259fdd
msgid "Template customization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:335
# c19a3802f63d484a9ca25ad6290b97c7
msgid "If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a ``template_name`` parameter to the ``sitemap`` and ``index`` views via the URLconf::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:359
# 047f5c7e07cd411eac551e1f1c706e91
msgid "Context variables"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:361
# 014f6b15b0aa49fea83fb9d8341ecd87
msgid "When customizing the templates for the :func:`~django.contrib.sitemaps.views.index` and :func:`~django.contrib.sitemaps.views.sitemaps` views, you can rely on the following context variables."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:368
# 8960c1b23fd74571bf641d364b6aca99
msgid "The variable :data:`sitemaps` is a list of absolute URLs to each of the sitemaps."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:371
# f8534f25987e477db7252012568743dc
msgid "Sitemap"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:373
# 45cd30c547cd4edbbc2283634c31965b
msgid "The variable :data:`urlset` is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the :class:`~django.contrib.sitemaps.Sitemap` class:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:377
# 5f88f49aa3ab49ad9ac423f248f9a736
msgid "``changefreq``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:378
# c93145fb083e4b2b8f9144b86635cfb8
msgid "``item``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:379
# a6b1802b0c044cfc95c1efc61db4eabd
msgid "``lastmod``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:380
# 368ab24ca4eb41ea8870a6ae75c9ffe5
msgid "``location``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:381
# 83922eac14ec4579aa6aeab5fa4e7e97
msgid "``priority``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:385
# e479ed4320c64bf385f98620cbcf86ea
msgid "The ``item`` attribute has been added for each URL to allow more flexible customization of the templates, such as `Google news sitemaps`_. Assuming Sitemap's :attr:`~Sitemap.items()` would return a list of items with ``publication_data`` and a ``tags`` field something like this would generate a Google News compatible sitemap:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:416
# beadcc217acf4970a83db0a944e47dc4
msgid "Pinging Google"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:418
# 572340ef55f245ffba2ecdd6d9611d6e
msgid "You may want to \"ping\" Google when your sitemap changes, to let it know to reindex your site. The sitemaps framework provides a function to do just that: :func:`django.contrib.sitemaps.ping_google()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:424
# 34bda0f18b0448ba97adc00b984b8da2
msgid ":func:`ping_google` takes an optional argument, :data:`sitemap_url`, which should be the absolute path to your site's sitemap (e.g., :file:`'/sitemap.xml'`). If this argument isn't provided, :func:`ping_google` will attempt to figure out your sitemap by performing a reverse looking in your URLconf."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:430
# f202b8c4b76e4658890dec78c34aeeb1
msgid ":func:`ping_google` raises the exception :exc:`django.contrib.sitemaps.SitemapNotFound` if it cannot determine your sitemap URL."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:436
# 73b0bd48072d4b2cb4a9449ed56d902b
msgid "The :func:`ping_google` command only works if you have registered your site with `Google Webmaster Tools`_."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:441
# f3f7883d78154c41a3e269a12e3ee9ec
msgid "One useful way to call :func:`ping_google` is from a model's ``save()`` method::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:457
# 783d3b2754384780b34c4096d44a2fc4
msgid "A more efficient solution, however, would be to call :func:`ping_google` from a cron script, or some other scheduled task. The function makes an HTTP request to Google's servers, so you may not want to introduce that network overhead each time you call ``save()``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:463
# 0a85ab6f7c924b7287a11fe422baabb1
msgid "Pinging Google via `manage.py`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:467
# 45dce158252a43908f751611c3e6018e
msgid "Once the sitemaps application is added to your project, you may also ping Google using the ``ping_google`` management command::"
msgstr ""

#: ../../ref/contrib/sites.txt:3
# 6c4a8fa90b8e4bba901a9f07a0566765
msgid "The \"sites\" framework"
msgstr ""

#: ../../ref/contrib/sites.txt:11
# 2c10cfd977e9441a8b3aad533f161ad3
msgid "Django comes with an optional \"sites\" framework. It's a hook for associating objects and functionality to particular Web sites, and it's a holding place for the domain names and \"verbose\" names of your Django-powered sites."
msgstr ""

#: ../../ref/contrib/sites.txt:15
# f08d2f9e45f14929ae3aa8161912f5bd
msgid "Use it if your single Django installation powers more than one site and you need to differentiate between those sites in some way."
msgstr ""

#: ../../ref/contrib/sites.txt:18
# 3c610bfad90b401cb58de8d955e4537a
msgid "The whole sites framework is based on a simple model:"
msgstr ""

#: ../../ref/contrib/sites.txt:22
# 0a9db2b68db64be28920bcbaa09b31f2
msgid "A model for storing the ``domain`` and ``name`` attributes of a Web site. The :setting:`SITE_ID` setting specifies the database ID of the :class:`~django.contrib.sites.models.Site` object associated with that particular settings file."
msgstr ""

#: ../../ref/contrib/sites.txt:29
# 1ad198a76e8e4d0d97da97d10fda26c4
msgid "The domain name associated with the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:33
# 887d90ac2c46485e865dd4764f7dc12e
msgid "A human-readable \"verbose\" name for the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:36
# 4d3c0ae2429a4783a0ceebfd02a29f8f
msgid "How you use this is up to you, but Django uses it in a couple of ways automatically via simple conventions."
msgstr ""

#: ../../ref/contrib/sites.txt:40
# 7cb1bb55e7c74fdd8803b54f313fa9cf
msgid "Example usage"
msgstr ""

#: ../../ref/contrib/sites.txt:42
# 103ca25c1f2b4b83a32ccd12e6d3e848
msgid "Why would you use sites? It's best explained through examples."
msgstr ""

#: ../../ref/contrib/sites.txt:45
# 42df48190c574dd19a71aca086e94b9e
msgid "Associating content with multiple sites"
msgstr ""

#: ../../ref/contrib/sites.txt:47
# 81a3eee22378468691b12a4f51ba6a35
msgid "The Django-powered sites LJWorld.com_ and Lawrence.com_ are operated by the same news organization -- the Lawrence Journal-World newspaper in Lawrence, Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local entertainment. But sometimes editors want to publish an article on *both* sites."
msgstr ""

#: ../../ref/contrib/sites.txt:53
# d82340babf2443098d4fe7672ed62ef0
msgid "The brain-dead way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that's inefficient for site producers, and it's redundant to store multiple copies of the same story in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:58
# 2e891a4378394c149ab37ae082926476
msgid "The better solution is simple: Both sites use the same article database, and an article is associated with one or more sites. In Django model terminology, that's represented by a :class:`~django.db.models.ManyToManyField` in the ``Article`` model::"
msgstr ""

#: ../../ref/contrib/sites.txt:71
# 69ef52977ac346519bf4b51cbe43709c
msgid "This accomplishes several things quite nicely:"
msgstr ""

#: ../../ref/contrib/sites.txt:73
# ab99063c931043c983a9aa54ed53cae3
msgid "It lets the site producers edit all content -- on both sites -- in a single interface (the Django admin)."
msgstr ""

#: ../../ref/contrib/sites.txt:76
# 327334d5044a4e0a98abf1eb03aa4864
msgid "It means the same story doesn't have to be published twice in the database; it only has a single record in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:79
# 46a2c8e8a3ec4267baf1342192f965e8
msgid "It lets the site developers use the same Django view code for both sites. The view code that displays a given story just checks to make sure the requested story is on the current site. It looks something like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:96
# d9227d64eea44cf1ae47b552535b9327
msgid "Associating content with a single site"
msgstr ""

#: ../../ref/contrib/sites.txt:98
# cd6b474d20e745e997e95015f7d4f4cf
msgid "Similarly, you can associate a model to the :class:`~django.contrib.sites.models.Site` model in a many-to-one relationship, using :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/contrib/sites.txt:103
# ad7d4a2d20534097a559ddf6c8e795fb
msgid "For example, if an article is only allowed on a single site, you'd use a model like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:114
# 3ffcb179d09646378a4c2e5d8e93ee52
msgid "This has the same benefits as described in the last section."
msgstr ""

#: ../../ref/contrib/sites.txt:119
# c1845a6d03c84edfaf8c943001f99bf1
msgid "Hooking into the current site from views"
msgstr ""

#: ../../ref/contrib/sites.txt:121
# f015c853cfbf42f8bad3db68dd86ab09
msgid "You can use the sites framework in your Django views to do particular things based on the site in which the view is being called. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:133
# 81f947a3fe734b30bb043d31f45af29a
msgid "Of course, it's ugly to hard-code the site IDs like that. This sort of hard-coding is best for hackish fixes that you need done quickly. A slightly cleaner way of accomplishing the same thing is to check the current site's domain::"
msgstr ""

#: ../../ref/contrib/sites.txt:148
# ecdd52fea45d419e9e1b5935d292544c
msgid "The idiom of retrieving the :class:`~django.contrib.sites.models.Site` object for the value of :setting:`settings.SITE_ID <SITE_ID>` is quite common, so the :class:`~django.contrib.sites.models.Site` model's manager has a ``get_current()`` method. This example is equivalent to the previous one::"
msgstr ""

#: ../../ref/contrib/sites.txt:164
# 700b480d79ff4b19a94c48f1d34d8af5
msgid "For code which relies on getting the current domain but cannot be certain that the sites framework will be installed for any given project, there is a utility function :func:`~django.contrib.sites.models.get_current_site` that takes a request object as an argument and returns either a Site instance (if the sites framework is installed) or a RequestSite instance (if it is not). This allows loose coupling with the sites framework and provides a usable fallback for cases where it is not installed."
msgstr ""

#: ../../ref/contrib/sites.txt:176
# c94e6af06bf04d6699b07bf87d323175
msgid "Checks if contrib.sites is installed and returns either the current :class:`~django.contrib.sites.models.Site` object or a :class:`~django.contrib.sites.models.RequestSite` object based on the request."
msgstr ""

#: ../../ref/contrib/sites.txt:182
# 8bd9463101e34a5cbc5b9b9ff46e864d
msgid "Getting the current domain for display"
msgstr ""

#: ../../ref/contrib/sites.txt:184
# 8ca4b6f534fc402fb5b7a769312065eb
msgid "LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It's pretty basic: A reader signs up on a Web form, and he immediately gets an email saying, \"Thanks for your subscription.\""
msgstr ""

#: ../../ref/contrib/sites.txt:189
# 63d3916b4db1498ebabcb7d064003557
msgid "It'd be inefficient and redundant to implement this signup-processing code twice, so the sites use the same code behind the scenes. But the \"thank you for signing up\" notice needs to be different for each site. By using :class:`~django.contrib.sites.models.Site` objects, we can abstract the \"thank you\" notice to use the values of the current site's :attr:`~django.contrib.sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""

#: ../../ref/contrib/sites.txt:197
# 9283603dd1a346369f3767a8ca4ae08a
msgid "Here's an example of what the form-handling view looks like::"
msgstr ""

#: ../../ref/contrib/sites.txt:214
# 0c7880b7f7ab47b98b854fc9a36b1a4d
msgid "On Lawrence.com, this email has the subject line \"Thanks for subscribing to lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks for subscribing to LJWorld.com alerts.\" Same goes for the email's message body."
msgstr ""

#: ../../ref/contrib/sites.txt:218
# 246e9ed95fff41cf9e4072a126aa051a
msgid "Note that an even more flexible (but more heavyweight) way of doing this would be to use Django's template system. Assuming Lawrence.com and LJWorld.com have different template directories (:setting:`TEMPLATE_DIRS`), you could simply farm out to the template system like so::"
msgstr ""

#: ../../ref/contrib/sites.txt:236
# 4651dde6decb43afb15812ca09fd9ff6
msgid "In this case, you'd have to create :file:`subject.txt` and :file:`message.txt` template files for both the LJWorld.com and Lawrence.com template directories. That gives you more flexibility, but it's also more complex."
msgstr ""

#: ../../ref/contrib/sites.txt:240
# 7e1e95d9741f472fac7e6ff931a7b705
msgid "It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""

#: ../../ref/contrib/sites.txt:244
# df80b65437494d5f9d0d74420088adb3
msgid "Getting the current domain for full URLs"
msgstr ""

#: ../../ref/contrib/sites.txt:246
# 003269c98e3d43c98f05592a50252600
msgid "Django's ``get_absolute_url()`` convention is nice for getting your objects' URL without the domain name, but in some cases you might want to display the full URL -- with ``http://`` and the domain and everything -- for an object. To do this, you can use the sites framework. A simple example::"
msgstr ""

#: ../../ref/contrib/sites.txt:261
# c95f765a29e44c1a897f6a203c27345a
msgid "Caching the current ``Site`` object"
msgstr ""

#: ../../ref/contrib/sites.txt:263
# 04870b476acb4864811ffef7e5b72982
msgid "As the current site is stored in the database, each call to ``Site.objects.get_current()`` could result in a database query. But Django is a little cleverer than that: on the first request, the current site is cached, and any subsequent call returns the cached data instead of hitting the database."
msgstr ""

#: ../../ref/contrib/sites.txt:268
# 972a885554114d64ad08d0c5f4fcc15d
msgid "If for any reason you want to force a database query, you can tell Django to clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""

#: ../../ref/contrib/sites.txt:286
# 875bea5b8c02468d971ec9ab9b31fe22
msgid "The ``CurrentSiteManager``"
msgstr ""

#: ../../ref/contrib/sites.txt:290
# 343637d9518644889147003ffd565d4b
msgid "If :class:`~django.contrib.sites.models.Site` plays a key role in your application, consider using the helpful :class:`~django.contrib.sites.managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </topics/db/managers>` that automatically filters its queries to include only objects associated with the current :class:`~django.contrib.sites.models.Site`."
msgstr ""

#: ../../ref/contrib/sites.txt:297
# 7462621e7e3b4f4c887fd2c3fc6796f5
msgid "Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it to your model explicitly. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:312
# 615a17f8e762465d9c4167567715e183
msgid "With this model, ``Photo.objects.all()`` will return all ``Photo`` objects in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` objects associated with the current site, according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:316
# 7d95cc945a1640f0b8581a6b2afba907
msgid "Put another way, these two statements are equivalent::"
msgstr ""

#: ../../ref/contrib/sites.txt:321
# 419c31a04a054565bdf59acbfd4a6d98
msgid "How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If you use a field named something other than ``site`` or ``sites`` to identify which :class:`~django.contrib.sites.models.Site` objects your object is related to, then you need to explicitly pass the custom field name as a parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on your model. The following model, which has a field called ``publish_on``, demonstrates this::"
msgstr ""

#: ../../ref/contrib/sites.txt:349
# d546967978e54870bee303449056345e
msgid "If you attempt to use :class:`~django.contrib.sites.managers.CurrentSiteManager` and pass a field name that doesn't exist, Django will raise a ``ValueError``."
msgstr ""

#: ../../ref/contrib/sites.txt:352
# cd4a658403e14db3a815e0cecccc4e67
msgid "Finally, note that you'll probably want to keep a normal (non-site-specific) ``Manager`` on your model, even if you use :class:`~django.contrib.sites.managers.CurrentSiteManager`. As explained in the :doc:`manager documentation </topics/db/managers>`, if you define a manager manually, then Django won't create the automatic ``objects = models.Manager()`` manager for you. Also note that certain parts of Django -- namely, the Django admin site and generic views -- use whichever manager is defined *first* in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put ``objects = models.Manager()`` in your model, before you define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""

#: ../../ref/contrib/sites.txt:365
# eb2f428cc0364167b2eca8df496f82f0
msgid "How Django uses the sites framework"
msgstr ""

#: ../../ref/contrib/sites.txt:367
# d4acbef723194e898d64ade22055c652
msgid "Although it's not required that you use the sites framework, it's strongly encouraged, because Django takes advantage of it in a few places. Even if your Django installation is powering only a single site, you should take the two seconds to create the site object with your ``domain`` and ``name``, and point to its ID in your :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:373
# 9d211aaba8a04f099b2ae924fef1e1dc
msgid "Here's how Django uses the sites framework:"
msgstr ""

#: ../../ref/contrib/sites.txt:375
# bc6f6fe492984b8fb03526c8349d0025
msgid "In the :mod:`redirects framework <django.contrib.redirects>`, each redirect object is associated with a particular site. When Django searches for a redirect, it takes into account the current :setting:`SITE_ID`."
msgstr ""

#: ../../ref/contrib/sites.txt:379
# 881f006560ea4efea53ad585850080d5
msgid "In the comments framework, each comment is associated with a particular site. When a comment is posted, its :class:`~django.contrib.sites.models.Site` is set to the current :setting:`SITE_ID`, and when comments are listed via the appropriate template tag, only the comments for the current site are displayed."
msgstr ""

#: ../../ref/contrib/sites.txt:385
# fe9c1e160fcc4d23850649623747677b
msgid "In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage is associated with a particular site. When a flatpage is created, you specify its :class:`~django.contrib.sites.models.Site`, and the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the current :setting:`SITE_ID` in retrieving flatpages to display."
msgstr ""

#: ../../ref/contrib/sites.txt:391
# 15e2f25bb89542aab85ccae2d8f7af75
msgid "In the :mod:`syndication framework <django.contrib.syndication>`, the templates for ``title`` and ``description`` automatically have access to a variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models.Site` object representing the current site. Also, the hook for providing item URLs will use the ``domain`` from the current :class:`~django.contrib.sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""

#: ../../ref/contrib/sites.txt:399
# fa371a08fc4c42639cc3f090610c1b97
msgid "In the :mod:`authentication framework <django.contrib.auth>`, the :func:`django.contrib.auth.views.login` view passes the current :class:`~django.contrib.sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""

#: ../../ref/contrib/sites.txt:404
# 172b8bf40b4049d8ab797815016b981d
msgid "The shortcut view (``django.views.defaults.shortcut``) uses the domain of the current :class:`~django.contrib.sites.models.Site` object when calculating an object's URL."
msgstr ""

#: ../../ref/contrib/sites.txt:408
# 33c4f5a652bd404bbbbb0dc736ca1c9d
msgid "In the admin framework, the \"view on site\" link uses the current :class:`~django.contrib.sites.models.Site` to work out the domain for the site that it will redirect to."
msgstr ""

#: ../../ref/contrib/sites.txt:415
# 62622df0c7d04c51a115f019def14655
msgid "``RequestSite`` objects"
msgstr ""

#: ../../ref/contrib/sites.txt:419
# 6c3809cda2784f4c950603db25d10c36
msgid "Some :doc:`django.contrib </ref/contrib/index>` applications take advantage of the sites framework but are architected in a way that doesn't *require* the sites framework to be installed in your database. (Some people don't want to, or just aren't *able* to install the extra database table that the sites framework requires.) For those cases, the framework provides a :class:`~django.contrib.sites.models.RequestSite` class, which can be used as a fallback when the database-backed sites framework is not available."
msgstr ""

#: ../../ref/contrib/sites.txt:429
# 7057f438323047ae9ef81005ec332187
msgid "A class that shares the primary interface of :class:`~django.contrib.sites.models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its data from a Django :class:`~django.http.HttpRequest` object rather than from a database."
msgstr ""

#: ../../ref/contrib/sites.txt:434
# 6ecbb378466b4937ab658344fc44be6d
msgid "The ``save()`` and ``delete()`` methods raise ``NotImplementedError``."
msgstr ""

#: ../../ref/contrib/sites.txt:438
# f24b4e6dd5fe42a087c98c83bf20ea72
msgid "Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django.http.HttpRequest.get_host`."
msgstr ""

#: ../../ref/contrib/sites.txt:442
# 90b2ee04ef3c4745b254c5a5803cfd9e
msgid "A :class:`~django.contrib.sites.models.RequestSite` object has a similar interface to a normal :class:`~django.contrib.sites.models.Site` object, except its :meth:`~django.contrib.sites.models.RequestSite.__init__()` method takes an :class:`~django.http.HttpRequest` object. It's able to deduce the ``domain`` and ``name`` by looking at the request's domain. It has ``save()`` and ``delete()`` methods to match the interface of :class:`~django.contrib.sites.models.Site`, but the methods raise ``NotImplementedError``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:3
# e96964e896de48118afe06fb2f37b1bd
msgid "The staticfiles app"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:10
# bdca9644b1a249bc88cd446dd508c513
msgid "``django.contrib.staticfiles`` collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:16
# b7b669dd1fdd480daea99039c27598c2
msgid "For an introduction to the static files app and some usage examples, see :doc:`/howto/static-files`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:28
# 2eb4e6c943ed4e6793e6408f033b211a
msgid "The following settings control the behavior of the staticfiles app."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:33
# 12fd1d608b454a4e97cf85162f332b8e
msgid "STATICFILES_DIRS"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:35
# 9d599e1bca5f43619b66b46203fefb18
msgid "Default: ``[]``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:37
# 927b7ae99157477c92d0f42ba6076dca
msgid "This setting defines the additional locations the staticfiles app will traverse if the :class:`FileSystemFinder` finder is enabled, e.g. if you use the :djadmin:`collectstatic` or :djadmin:`findstatic` management command or use the static file serving view."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:42
# f3154b165eae46adb5978e34369bc676
msgid "This should be set to a list or tuple of strings that contain full paths to your additional files directory(ies) e.g.::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:52
# 2c7f4aeba41f4032b80c28685fb5d0f8
msgid "Prefixes (optional)"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:54
# edada4ba9fef4a7a82d479281c45ea5d
msgid "In case you want to refer to files in one of the locations with an additional namespace, you can **optionally** provide a prefix as ``(prefix, path)`` tuples, e.g.::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:63
# 99106976060341e4b45cd959b47eaa08
msgid "Example:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:65
# 2b147b7f8a2a44368fda843681ec3c7c
msgid "Assuming you have :setting:`STATIC_URL` set ``'/static/'``, the :djadmin:`collectstatic` management command would collect the \"stats\" files in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:69
# 3c7a4db92b124c15bf5257624c775cfb
msgid "This would allow you to refer to the local file ``'/opt/webfiles/stats/polls_20101022.tar.gz'`` with ``'/static/downloads/polls_20101022.tar.gz'`` in your templates, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:80
# c9e087c2ae224e9ba625a2a406f0940f
msgid "STATICFILES_STORAGE"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:82
# db5abed8f39c4b14b3f28fb8ed1cfc93
msgid "Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:84
# 51956199cc05457a9966e50c5be50cd8
msgid "The file storage engine to use when collecting static files with the :djadmin:`collectstatic` management command."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:89
# 22323fdd37ec43f6937d7200f460696a
msgid "A ready-to-use instance of the storage backend defined in this setting can be found at ``django.contrib.staticfiles.storage.staticfiles_storage``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:92
# da0a9ece46a447bea09e797ba031eebd
msgid "For an example, see :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:97
# 7f56befaf4da4949aca628f995277805
msgid "STATICFILES_FINDERS"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:104
# feecece2d7e547c08bf09a1ab3419fac
msgid "The list of finder backends that know how to find static files in various locations."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:107
# 1f0f2624bfa14b81abd8b927727f7bca
msgid "The default will find files stored in the :setting:`STATICFILES_DIRS` setting (using :class:`django.contrib.staticfiles.finders.FileSystemFinder`) and in a ``static`` subdirectory of each app (using :class:`django.contrib.staticfiles.finders.AppDirectoriesFinder`)"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:112
# 26914ca4702e43c5a1d9983ed04d0589
msgid "One finder is disabled by default: :class:`django.contrib.staticfiles.finders.DefaultStorageFinder`. If added to your :setting:`STATICFILES_FINDERS` setting, it will look for static files in the default file storage as defined by the :setting:`DEFAULT_FILE_STORAGE` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:120
# a021a87eb1b3497b99ec94f6b7a8642a
msgid "When using the :class:`AppDirectoriesFinder` finder, make sure your apps can be found by staticfiles. Simply add the app to the :setting:`INSTALLED_APPS` setting of your site."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:124
# 913df708e2a246a5944ae79b46d850f9
msgid "Static file finders are currently considered a private interface, and this interface is thus undocumented."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:128
# a4d9fe39ee764eb785f0f6270826c148
msgid "Management Commands"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:132
# 83d3c3d4eb6d4e0386c9f84089379776
msgid "``django.contrib.staticfiles`` exposes three management commands."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:135
#: ../../ref/django-admin.txt:1268
# 899b87ed1fd54d0297c2b68939e96869
# cef7630b482d48c29059f861a4d9c193
msgid "collectstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:139
# fed30121123d46e1a9b4dfd7f5306569
msgid "Collects the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:141
# d03dc145c8a241e0a61d2dbb9148aa00
msgid "Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you're confused, the :djadmin:`findstatic` command can help show you which files are found."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:146
# 1752a71db55d4ddba81447e33af44dd0
msgid "Files are searched by using the :setting:`enabled finders <STATICFILES_FINDERS>`. The default is to look in all locations defined in :setting:`STATICFILES_DIRS` and in the ``'static'`` directory of apps specified by the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:153
# 91289fddd2a441ebb6a4f06f39ea6fef
msgid "The :djadmin:`collectstatic` management command calls the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the :setting:`STATICFILES_STORAGE` after each run and passes a list of paths that have been found by the management command. It also receives all command line options of :djadmin:`collectstatic`. This is used by the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` by default."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:161
# 50de64d5f7d548b88c8c1203ed37ca9c
msgid "Some commonly used options are:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:165
# 81c6457fda1745aab4c4a3f48a41d504
msgid "Do NOT prompt the user for input of any kind."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:170
# 4393235fb87e4efeb06197db733bf059
msgid "Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:176
# 8d8ecedf464548a286a2731d4f3dd61f
msgid "Do everything except modify the filesystem."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:183
# 906b1107c11344b1bd4889ac7c58b05b
msgid "Clear the existing files before trying to copy or link the original file."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:188
# ac4e0dc6c47740ffaf7d134c54b0c79e
msgid "Create a symbolic link to each file instead of copying."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:194
# c4bc6d8bf8e648d491957e0fb3cfe224
msgid "Don't call the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the configured :setting:`STATICFILES_STORAGE` storage backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:200
# 9ff96740edfc407dbc0fe3c7a06b6d15
msgid "Don't ignore the common private glob-style patterns ``'CVS'``, ``'.*'`` and ``'*~'``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:203
# 6624e13275f4409da2a3c4d01200b577
msgid "For a full list of options, refer to the commands own help by running::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:208
#: ../../ref/django-admin.txt:1277
# 9890aed099eb415f9bedef72f3b5f747
# 78b8c6528d994d3280afb6af3c95dd12
msgid "findstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:212
# d875ab889e1f4f7f8abbc0ebd0c729e0
msgid "Searches for one or more relative paths with the enabled finders."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:221
# 38f17d834b8749aab10bec0322778275
msgid "By default, all matching locations are found. To only return the first match for each relative path, use the ``--first`` option::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:227
# 63c77419989f42b2b8143bee9f2b43ec
msgid "This is a debugging aid; it'll show you exactly which static file will be collected for a given path."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:233
# 6cce7ffb28ce4ec89ba9e8e9b66b9250
msgid "runserver"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:237
# dea231c9c7bd4f6ea1d08dadc126996c
msgid "Overrides the core :djadmin:`runserver` command if the ``staticfiles`` app is :setting:`installed<INSTALLED_APPS>` and adds automatic serving of static files and the following new options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:243
# b91dfc0dd06b4531858ebdaaffc8abd9
msgid "Use the ``--nostatic`` option to disable serving of static files with the :doc:`staticfiles </ref/contrib/staticfiles>` app entirely. This option is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:248
#: ../../ref/contrib/staticfiles.txt:262
#: ../../ref/django-admin.txt:110
#: ../../ref/django-admin.txt:414
#: ../../ref/django-admin.txt:423
#: ../../ref/django-admin.txt:433
#: ../../ref/django-admin.txt:452
#: ../../ref/django-admin.txt:463
#: ../../ref/django-admin.txt:624
#: ../../ref/django-admin.txt:684
#: ../../ref/django-admin.txt:702
#: ../../ref/django-admin.txt:721
#: ../../ref/django-admin.txt:1205
#: ../../ref/django-admin.txt:1293
#: ../../ref/django-admin.txt:1308
#: ../../ref/django-admin.txt:1322
#: ../../ref/django-admin.txt:1332
#: ../../ref/templates/builtins.txt:912
# f6b643bf01074d18b02f664fabce4900
# 377dd764f0dd432e8449c30db2981f60
# 5108043e8a424405a5d6328a835f3eb5
# 623b913002c242aeb2e51f6e845ef140
# 138b6ecd96b448b2b253dcc5721c3a63
# 8188b2bf25b1415580f6a8a93b3931db
# 56259c6b91904bc6818a3db38ad3068d
# e9e014ac5d514cb6be524c067bb8854b
# ae3e5f2a297641088c7287ef4522032c
# 46673dda71f746789937730a730ac3a2
# 38cae4fef48a49bd833c8e52ee47528d
# aed73d89816041dbae1819d81a0dc34f
# 89f33f5b44154184bead98967f5b9739
# 8a80612a4795404f8d18d68ddf61d256
# 58c16bb345c64fceb3bf52ec1f44afda
# ce4f809dff754573bef219fa58c10c68
# be6fa3437594409a866898d21cf19ee2
# e00d77de51004e3b87f88fef7376f8a7
msgid "Example usage::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:254
# 823be86aa138468ea13d3921dd7d4587
msgid "Use the ``--insecure`` option to force serving of static files with the :doc:`staticfiles </ref/contrib/staticfiles>` app even if the :setting:`DEBUG` setting is ``False``. By using this you acknowledge the fact that it's **grossly inefficient** and probably **insecure**. This is only intended for local development, should **never be used in production** and is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:267
# 944b0fb49f5e46bbbff5a7c91b44ce2e
msgid "Storages"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:270
# ebdf8aaff3e74781b82cb13d799448e6
msgid "StaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:274
# b869f3c3be2f4526beaf82793b3b4518
msgid "A subclass of the :class:`~django.core.files.storage.FileSystemStorage` storage backend that uses the :setting:`STATIC_ROOT` setting as the base file system location and the :setting:`STATIC_URL` setting respectively as the base URL."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:283
# cbd85da261514f5a8af833ad0be0057e
msgid "This method is called by the :djadmin:`collectstatic` management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:287
# 1b1b268bf478429ebce9415b84796bec
msgid "The :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` uses this behind the scenes to replace the paths with their hashed counterparts and update the cache appropriately."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:292
# 92e5f6f63eed4eb39cd25765c5b415f6
msgid "CachedStaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:298
# 46cbee9abe9548c58b00fd7c793827bf
msgid "A subclass of the :class:`~django.contrib.staticfiles.storage.StaticFilesStorage` storage backend which caches the files it saves by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:303
# 74970e1c10e9408193306e8d1892f8f7
msgid "The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it's very helpful if you want to apply `far future Expires headers`_ to the deployed files to speed up the load time for subsequent page visits."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:309
# f0c0f2d761cb450a819592e7b5c6a757
msgid "The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method). The regular expressions used to find those paths (``django.contrib.staticfiles.storage.CachedStaticFilesStorage.cached_patterns``) by default cover the `@import`_ rule and `url()`_ statement of `Cascading Style Sheets`_. For example, the ``'css/styles.css'`` file with the content"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:322
# af98edd82c3341cb9e12c904bd475712
msgid "would be replaced by calling the :meth:`~django.core.files.storage.Storage.url` method of the ``CachedStaticFilesStorage`` storage backend, ultimatively saving a ``'css/styles.55e7cbb9ba48.css'`` file with the following content:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:332
# 3a5af3ccca6b4e46ae2860600e337812
msgid "To enable the ``CachedStaticFilesStorage`` you have to make sure the following requirements are met:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:335
# 6e2bba99df884b6f93583737c8987f2e
msgid "the :setting:`STATICFILES_STORAGE` setting is set to ``'django.contrib.staticfiles.storage.CachedStaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:337
# 7d4243d0ef5e488cae0f89cd9275b30b
msgid "the :setting:`DEBUG` setting is set to ``False``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:338
# d6130365a4274efdaa9b32834f038669
msgid "you use the ``staticfiles`` :ttag:`static<staticfiles-static>` template tag to refer to your static files in your templates"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:340
# 0dc36555124845b787f4c80a3bf14bbb
msgid "you've collected all your static files by using the :djadmin:`collectstatic` management command"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:343
# 65669094a47243df9786cc75daa48f48
msgid "Since creating the MD5 hash can be a performance burden to your website during runtime, ``staticfiles`` will automatically try to cache the hashed name for each file path using Django's :doc:`caching framework</topics/cache>`. If you want to override certain options of the cache backend the storage uses, simply specify a custom entry in the :setting:`CACHES` setting named ``'staticfiles'``. It falls back to using the ``'default'`` cache backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:362
#: ../../ref/templates/builtins.txt:2421
#: ../../ref/templates/builtins.txt:2426
# c76304f64807420883361317c8fa3923
# 3f95e83a22244c42bfff1393c9830378
# e15f689575bb403aabe5735c985eef51
msgid "static"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:368
# c0ebd33a5d5d4603a5b70217869d338e
msgid "Uses the configured :setting:`STATICFILES_STORAGE` storage to create the full URL for the given relative path, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:376
# be44b7b12a574c54b84d188b4dc80af9
msgid "The previous example is equal to calling the ``url`` method of an instance of :setting:`STATICFILES_STORAGE` with ``\"css/base.css\"``. This is especially useful when using a non-local storage backend to deploy files as documented in :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:382
# d0f9950adafc4b8e8a74776725046a64
msgid "Other Helpers"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:384
# a8f263f3f8ba4e5989251030d531334b
msgid "There are a few other helpers outside of the :mod:`staticfiles <django.contrib.staticfiles>` app to work with static files:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:388
# ca79680fc2464b66abdf0d9ddfd9b238
msgid "The :func:`django.core.context_processors.static` context processor which adds :setting:`STATIC_URL` to every template context rendered with :class:`~django.template.RequestContext` contexts."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:392
# 1f0d31334b83426bafcc677ea97bfbcd
msgid "The builtin template tag :ttag:`static` which takes a path and urljoins it with the static prefix :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:395
# 74550bd1e61d44ffb110d342bb6469a1
msgid "The builtin template tag :ttag:`get_static_prefix` which populates a template variable with the static prefix :setting:`STATIC_URL` to be used as a variable or directly."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:399
# ef6f989ccc4545b3889ac3c7546bcd4e
msgid "The similar template tag :ttag:`get_media_prefix` which works like :ttag:`get_static_prefix` but uses :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:405
# 38c27e7f4a0f43ac9b67d95fb0b0ee09
msgid "Static file development view"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:411
# 3af6c527c4044e2f9a9171bf2c6e760a
msgid "This view function serves static files in development."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:415
# ee55bf154df74403aae7c4317b9519f1
msgid "This view will only work if :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:417
# 81b95a86b9494fd995da13610f2c0e35
msgid "That's because this view is **grossly inefficient** and probably **insecure**. This is only intended for local development, and should **never be used in production**."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:421
# da04ccd148f449fc9d14db6a1fc6fa51
msgid "This view is automatically enabled by :djadmin:`runserver` (with a :setting:`DEBUG` setting set to ``True``). To use the view with a different local development server, add the following snippet to the end of your primary URL configuration::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:433
# e50ce6011d3f455d9bff63c81d4e94ba
msgid "Note, the beginning of the pattern (``r'^static/'``) should be your :setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:436
# f97b49c2d44647508c48ddd35d1361d6
msgid "Since this is a bit finicky, there's also a helper function that'll do this for you:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:440
# afa4cd7975f1415799c622bdcc9ed24a
msgid "This will return the proper URL pattern for serving static files to your already defined pattern list. Use it like this::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:451
# b718e736ff5747ac859af55bbc6be83a
msgid "This helper function will only work if :setting:`DEBUG` is ``True`` and your :setting:`STATIC_URL` setting is neither empty nor a full URL such as ``http://static.example.com/``."
msgstr ""

#: ../../ref/contrib/syndication.txt:3
# aebf8e4072d9459fa4cc914c01f0dc75
msgid "The syndication feed framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:9
# 891552bf1df44dab9f942d734f8a9366
msgid "Django comes with a high-level syndication-feed-generating framework that makes creating RSS_ and Atom_ feeds easy."
msgstr ""

#: ../../ref/contrib/syndication.txt:12
# e968ecb780d54c8592933b72dc5056b7
msgid "To create any syndication feed, all you have to do is write a short Python class. You can create as many feeds as you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:15
# 61da7b034d8544a5aee1b3abe878a4fd
msgid "Django also comes with a lower-level feed-generating API. Use this if you want to generate feeds outside of a Web context, or in some other lower-level way."
msgstr ""

#: ../../ref/contrib/syndication.txt:23
# 21c3dcc2b542462daed998f7a502575f
msgid "The high-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:36
# a538daed3e004be5b271374dc25a1b91
msgid "The high-level feed-generating framework is supplied by the :class:`~django.contrib.syndication.views.Feed` class. To create a feed, write a :class:`~django.contrib.syndication.views.Feed` class and point to an instance of it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:43
# 6292654bec354d1a9b22217167a64487
msgid "Feed classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:45
# d51fa91c358d42aeb1f8d1044f7c0709
msgid "A :class:`~django.contrib.syndication.views.Feed` class is a Python class that represents a syndication feed. A feed can be simple (e.g., a \"site news\" feed, or a basic feed displaying the latest entries of a blog) or more complex (e.g., a feed displaying all the blog entries in a particular category, where the category is variable)."
msgstr ""

#: ../../ref/contrib/syndication.txt:51
# e73b725a23ce4eb784650dcb002a1009
msgid "Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/syndication.txt:54
# 94529e30e87e423ba2a3ec4ddf47ee02
msgid "Instances of :class:`~django.contrib.syndication.views.Feed` classes are views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:60
# 9e8cf0d1c9194f50b6b61e4c6a66f3f2
msgid "This simple example, taken from `chicagocrime.org`_, describes a feed of the latest five news items::"
msgstr ""

#: ../../ref/contrib/syndication.txt:80
# e94f04b06d914e4b936b8ee7ef9ce420
msgid "To connect a URL to this feed, put an instance of the Feed object in your :doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:94
# 8e4fb5b856854662b0222c1fcf273e2f
msgid "The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr ""

#: ../../ref/contrib/syndication.txt:96
# d2abda168d0d4114862e3520499a1b08
msgid "``title``, ``link`` and ``description`` correspond to the standard RSS ``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""

#: ../../ref/contrib/syndication.txt:100
# d754411dd4a74f318f7e8b89b21d818b
msgid "``items()`` is, simply, a method that returns a list of objects that should be included in the feed as ``<item>`` elements. Although this example returns ``NewsItem`` objects using Django's :doc:`object-relational mapper </ref/models/querysets>`, ``items()`` doesn't have to return model instances. Although you get a few bits of functionality \"for free\" by using Django models, ``items()`` can return any type of object you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:108
# f9aa8b409cb748f3bca3088777b31722
msgid "If you're creating an Atom feed, rather than an RSS feed, set the ``subtitle`` attribute instead of the ``description`` attribute. See `Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""

#: ../../ref/contrib/syndication.txt:112
# 2819c722b78148159055cb47e92ad20b
msgid "One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, ``<link>`` and ``<description>``. We need to tell the framework what data to put into those elements."
msgstr ""

#: ../../ref/contrib/syndication.txt:116
# af2767dd8a164f219591b7b71bcd309b
msgid "For the contents of ``<title>`` and ``<description>``, Django tries calling the methods ``item_title()`` and ``item_description()`` on the :class:`~django.contrib.syndication.views.Feed` class. They are passed a single parameter, ``item``, which is the object itself. These are optional; by default, the unicode representation of the object is used for both."
msgstr ""

#: ../../ref/contrib/syndication.txt:123
# c91cbf7d6d7c47dfb7cbffdb5021cb3f
msgid "If you want to do any special formatting for either the title or description, :doc:`Django templates </topics/templates>` can be used instead. Their paths can be specified with the ``title_template`` and ``description_template`` attributes on the :class:`~django.contrib.syndication.views.Feed` class. The templates are rendered for each item and are passed two template context variables:"
msgstr ""

#: ../../ref/contrib/syndication.txt:130
# eb220f6c16e6422fabbc35c2dae47a56
msgid "``{{ obj }}`` -- The current object (one of whichever objects you returned in ``items()``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:133
# fc448490e378406987c43aa5c48827d7
msgid "``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object representing the current site. This is useful for ``{{ site.domain }}`` or ``{{ site.name }}``. If you do *not* have the Django sites framework installed, this will be set to a :class:`django.contrib.sites.models.RequestSite` object. See the :ref:`RequestSite section of the sites framework documentation <requestsite-objects>` for more."
msgstr ""

#: ../../ref/contrib/syndication.txt:141
# 0d7f69b9f6604197afcaa703fddaf408
msgid "See `a complex example`_ below that uses a description template."
msgstr ""

#: ../../ref/contrib/syndication.txt:143
# 8490c5209354492f9a2563f51e443ae7
msgid "To specify the contents of ``<link>``, you have two options. For each item in ``items()``, Django first tries calling the ``item_link()`` method on the :class:`~django.contrib.syndication.views.Feed` class. In a similar way to the title and description, it is passed it a single parameter, ``item``. If that method doesn't exist, Django tries executing a ``get_absolute_url()`` method on that object. Both ``get_absolute_url()`` and ``item_link()`` should return the item's URL as a normal Python string. As with ``get_absolute_url()``, the result of ``item_link()`` will be included directly in the URL, so you are responsible for doing all necessary URL quoting and conversion to ASCII inside the method itself."
msgstr ""

#: ../../ref/contrib/syndication.txt:159
# 52e763685a37416d9ac85fb6d702e483
msgid "A complex example"
msgstr ""

#: ../../ref/contrib/syndication.txt:161
# 6824420ab4cf43c583d3f9335c67de59
msgid "The framework also supports more complex feeds, via arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:163
# fdf666a470914352ab377a5243468e03
msgid "For example, `chicagocrime.org`_ offers an RSS feed of recent crimes for every police beat in Chicago. It'd be silly to create a separate :class:`~django.contrib.syndication.views.Feed` class for each police beat; that would violate the :ref:`DRY principle <dry>` and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your :doc:`URLconf </topics/http/urls>` so feeds can output items based on information in the feed's URL."
msgstr ""

#: ../../ref/contrib/syndication.txt:171
# ef4939fc830f4cad9b64c3c58da51f04
msgid "On chicagocrime.org, the police-beat feeds are accessible via URLs like this:"
msgstr ""

#: ../../ref/contrib/syndication.txt:173
# f6b137ebc88641e881bfb3dea40c8528
msgid ":file:`/beats/613/rss/` -- Returns recent crimes for beat 613."
msgstr ""

#: ../../ref/contrib/syndication.txt:174
# 5c7f5ba069504dc5a0fe2c11bda8005a
msgid ":file:`/beats/1424/rss/` -- Returns recent crimes for beat 1424."
msgstr ""

#: ../../ref/contrib/syndication.txt:176
# 331b440a831f420aa64190f2c900ad01
msgid "These can be matched with a :doc:`URLconf </topics/http/urls>` line such as::"
msgstr ""

#: ../../ref/contrib/syndication.txt:180
# 6e25b5cd1755458bb11947a73b056362
msgid "Like a view, the arguments in the URL are passed to the ``get_object()`` method along with the request object."
msgstr ""

#: ../../ref/contrib/syndication.txt:186
# 3e3b0a6c53354178936584ce69c6c1c3
msgid "Here's the code for these beat-specific feeds::"
msgstr ""

#: ../../ref/contrib/syndication.txt:209
# fd37b8c132eb4e94b6632c3bc23ae06e
msgid "To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django uses the ``title()``, ``link()`` and ``description()`` methods. In the previous example, they were simple string class attributes, but this example illustrates that they can be either strings *or* methods. For each of ``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""

#: ../../ref/contrib/syndication.txt:216
# 278574f71972421ca67fd35c193ccdeb
msgid "First, it tries to call a method, passing the ``obj`` argument, where ``obj`` is the object returned by ``get_object()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:219
# 96469939f6194ab0a5bf3028ee7b8529
msgid "Failing that, it tries to call a method with no arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:221
# 1a996cf446354e81a6dc557a3c6503d2
msgid "Failing that, it uses the class attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:223
# 2a5500e3caec45a98418976ab5cb49e8
msgid "Also note that ``items()`` also follows the same algorithm -- first, it tries ``items(obj)``, then ``items()``, then finally an ``items`` class attribute (which should be a list)."
msgstr ""

#: ../../ref/contrib/syndication.txt:227
# 2f2a98202f3646de8658ce7f280cbc85
msgid "We are using a template for the item descriptions. It can be very simple:"
msgstr ""

#: ../../ref/contrib/syndication.txt:233
# facb7459de7b4295b72910a97ba9055f
msgid "However, you are free to add formatting as desired."
msgstr ""

#: ../../ref/contrib/syndication.txt:235
# ba5a625079c246c892ca1cebea3cc830
msgid "The ``ExampleFeed`` class below gives full documentation on methods and attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""

#: ../../ref/contrib/syndication.txt:239
# bf86399b20464aa1a7f6fb4f847304b5
msgid "Specifying the type of feed"
msgstr ""

#: ../../ref/contrib/syndication.txt:241
# 24d4a8bfcb6f4721a454a5a0cf175b76
msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr ""

#: ../../ref/contrib/syndication.txt:243
# 68aa6e459c3a45ca84ed28f64c6c9d96
msgid "To change that, add a ``feed_type`` attribute to your :class:`~django.contrib.syndication.views.Feed` class, like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:251
# e31229472f0245149ea23d9ee45771c1
msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr ""

#: ../../ref/contrib/syndication.txt:253
# 503e721f9d5e4254a3f812b9f153e333
msgid "Currently available feed types are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:255
# 9417abe3206c41ab8db0200440f12eda
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:256
# 7cd9ea74e8f54cc4a7b7bc0c9411d4ef
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:257
# 1537987eddc6479f902b5b3427a50359
msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:260
# c449e02a0e104e1d87c5ca7530c42bfc
msgid "Enclosures"
msgstr ""

#: ../../ref/contrib/syndication.txt:262
# 0964bd1d2e4d4184aa1e4d4745d90504
msgid "To specify enclosures, such as those used in creating podcast feeds, use the ``item_enclosure_url``, ``item_enclosure_length`` and ``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below for usage examples."
msgstr ""

#: ../../ref/contrib/syndication.txt:268
# 578dd5a21ec44a5aba99578532d24817
msgid "Language"
msgstr ""

#: ../../ref/contrib/syndication.txt:270
# f65e49ccdda849758ae1dad8a3dcad90
msgid "Feeds created by the syndication framework automatically include the appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). This comes directly from your :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:275
# d4ece46b28384d6481d09a484fea2087
msgid "URLs"
msgstr ""

#: ../../ref/contrib/syndication.txt:277
# 5b09297f0a774ca6815ecf685f41f494
msgid "The ``link`` method/attribute can return either an absolute path (e.g. :file:`\"/blog/\"`) or a URL with the fully-qualified domain and protocol (e.g. ``\"http://www.example.com/blog/\"``). If ``link`` doesn't return the domain, the syndication framework will insert the domain of the current site, according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:283
# d44626d1067f4082a609ccc2dff205b2
msgid "Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current location. The syndication framework populates this automatically, using the domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:288
# 85deed76aaef41709d29262cf7606561
msgid "Publishing Atom and RSS feeds in tandem"
msgstr ""

#: ../../ref/contrib/syndication.txt:290
# fe92e01f1bc3481c91fe8d8e98532671
msgid "Some developers like to make available both Atom *and* RSS versions of their feeds. That's easy to do with Django: Just create a subclass of your :class:`~django.contrib.syndication.views.Feed` class and set the ``feed_type`` to something different. Then update your URLconf to add the extra versions."
msgstr ""

#: ../../ref/contrib/syndication.txt:296
# d5a6f4c3365a4dd69679184e5e24d617
msgid "Here's a full example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:315
# 15e75a1cf6384535bf740914ac6266bc
msgid "In this example, the RSS feed uses a ``description`` while the Atom feed uses a ``subtitle``. That's because Atom feeds don't provide for a feed-level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""

#: ../../ref/contrib/syndication.txt:319
# 8e869041c5de43b2a080eaf9f859880f
msgid "If you provide a ``description`` in your :class:`~django.contrib.syndication.views.Feed` class, Django will *not* automatically put that into the ``subtitle`` element, because a subtitle and description are not necessarily the same thing. Instead, you should define a ``subtitle`` attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:325
# 338b1cadf79b43219804268ddbbce6fb
msgid "In the above example, we simply set the Atom feed's ``subtitle`` to the RSS feed's ``description``, because it's quite short already."
msgstr ""

#: ../../ref/contrib/syndication.txt:328
# c533b2b4d6bc4efc9ce3e6a71ceb2f98
msgid "And the accompanying URLconf::"
msgstr ""

#: ../../ref/contrib/syndication.txt:341
# c737b0afca944ac6ab7d312a267479ad
msgid "Feed class reference"
msgstr ""

#: ../../ref/contrib/syndication.txt:345
# f02bb88273ec4d4ba9f571ca38d974b0
msgid "This example illustrates all possible attributes and methods for a :class:`~django.contrib.syndication.views.Feed` class::"
msgstr ""

#: ../../ref/contrib/syndication.txt:791
# 12a2764d100747ba9dbae4781115bd6f
msgid "The low-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:793
# 578c98658daf4492bfec53173aa13bf2
msgid "Behind the scenes, the high-level RSS framework uses a lower-level framework for generating feeds' XML. This framework lives in a single module: `django/utils/feedgenerator.py`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:797
# 8591068b3a854ebcb7bfcd4df63ada6f
msgid "You use this framework on your own, for lower-level feed generation. You can also create custom feed generator subclasses for use with the ``feed_type`` ``Feed`` option."
msgstr ""

#: ../../ref/contrib/syndication.txt:804
# 5a5b6f58abf248e4a8c4da1d5df808d4
msgid "``SyndicationFeed`` classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:806
# c624ca2d21d84f5cb0dd0763183297b6
msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ""

#: ../../ref/contrib/syndication.txt:808
# 2a04e8672e364946b1856810d9237421
msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:810
# f1f2d4c3087b4bab8416982e2f6e2037
msgid "and several subclasses:"
msgstr ""

#: ../../ref/contrib/syndication.txt:812
# 4d4c4945c76b46d797a6128edd5f40d2
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:813
# 7be2e378ab704e3d8dd30ee8bc5cdd12
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:814
# 061a2f616ab54af2a50e9635f9791f43
msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:816
# a27dba6ca0ff49e38aec843ece7195aa
msgid "Each of these three classes knows how to render a certain type of feed as XML. They share this interface:"
msgstr ""

#: ../../ref/contrib/syndication.txt:820
# 7f3529192aa84acda905cbbf17c2dc75
msgid "Initialize the feed with the given dictionary of metadata, which applies to the entire feed. Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:823
#: ../../ref/contrib/syndication.txt:851
# bc5275889f9e4b3291c2dbfad01869dd
# ef173d3e8d5b4954929f088bfa8aa337
msgid "``title``"
msgstr ""

#: ../../ref/contrib/syndication.txt:825
#: ../../ref/contrib/syndication.txt:853
# 4e1c4c38ed4d4a8dbb762ceea1858561
# f136d70ed15444f0a764c6362e1008a5
msgid "``description``"
msgstr ""

#: ../../ref/contrib/syndication.txt:827
# fdf521176bad4cb89389708d15ed899d
msgid "There's also a bunch of other optional keywords:"
msgstr ""

#: ../../ref/contrib/syndication.txt:829
# 93317f17aed54b189380e6397c11b016
msgid "``language``"
msgstr ""

#: ../../ref/contrib/syndication.txt:830
#: ../../ref/contrib/syndication.txt:857
# e54880a9fa2141889d48abc88f1a2a49
# 3b7d686815b748158db0374fd25b2c97
msgid "``author_email``"
msgstr ""

#: ../../ref/contrib/syndication.txt:831
#: ../../ref/contrib/syndication.txt:858
# 6f7814b3d5904555abd6f0a9ffad4191
# 811e0de357e846ada38ad74d116a7154
msgid "``author_name``"
msgstr ""

#: ../../ref/contrib/syndication.txt:832
#: ../../ref/contrib/syndication.txt:859
# b861cde74d4a40a2aa2f5368b7955929
# e90326dd254e49e68c8cd436ab817b4a
msgid "``author_link``"
msgstr ""

#: ../../ref/contrib/syndication.txt:833
# 9ccfe8724f1742acac585cf383ea213b
msgid "``subtitle``"
msgstr ""

#: ../../ref/contrib/syndication.txt:834
#: ../../ref/contrib/syndication.txt:864
# 7940379d3b764016afb30e6ab2c80d8d
# 1006d79f4be74c448f78c445e51a8024
msgid "``categories``"
msgstr ""

#: ../../ref/contrib/syndication.txt:835
# 207dbdab198d4f07b56cac537280c8c1
msgid "``feed_url``"
msgstr ""

#: ../../ref/contrib/syndication.txt:836
# 68211af91cf44a9a824b4e0261fefca3
msgid "``feed_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:837
# be71f7afeb014992818dc9157bb48e7c
msgid "``feed_guid``"
msgstr ""

#: ../../ref/contrib/syndication.txt:838
#: ../../ref/contrib/syndication.txt:866
# 69fe2fc0b3f64136bd887f708b214790
# 5261cdb3636b4c96bc0baaea538bbf32
msgid "``ttl``"
msgstr ""

#: ../../ref/contrib/syndication.txt:840
# cd749bd8a649487cba49304d5290a055
msgid "Any extra keyword arguments you pass to ``__init__`` will be stored in ``self.feed`` for use with `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:843
#: ../../ref/utils.txt:273
# 5744b15520074fb7b1f5282053c38e26
# b02a5cb5819849ba8fff7375a1a0ebb8
msgid "All parameters should be Unicode objects, except ``categories``, which should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:847
# f1e9528e97684411bac0c02a7476379a
msgid "Add an item to the feed with the given parameters."
msgstr ""

#: ../../ref/contrib/syndication.txt:849
# 8c31c6cd570940c69420247a1e4fe42f
msgid "Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:855
# daecebbee950444cae6cc17ed2d771ad
msgid "Optional keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:860
# b5a75d5f076644c4ad79936e2faeb5ea
msgid "``pubdate``"
msgstr ""

#: ../../ref/contrib/syndication.txt:861
# 7b17e8a876ab4e1e99e4a47cfe30cd3b
msgid "``comments``"
msgstr ""

#: ../../ref/contrib/syndication.txt:862
# c8a31cba02854963b630f3a265ddf751
msgid "``unique_id``"
msgstr ""

#: ../../ref/contrib/syndication.txt:863
# 821438a8d90b489f96a90a74a0a04f4c
msgid "``enclosure``"
msgstr ""

#: ../../ref/contrib/syndication.txt:865
# 66633d4ee75b45ed89cdcad88f45bb0d
msgid "``item_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:868
# f60ef95fc82843969e9a3b10795490ff
msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:870
# fd297edef5114838a63e8d155f69dc35
msgid "All parameters, if given, should be Unicode objects, except:"
msgstr ""

#: ../../ref/contrib/syndication.txt:872
# 4d4e6961d3f14d309c0faf9bed16d89c
msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

#: ../../ref/contrib/syndication.txt:873
# 30438a02fcb1463ab75cde5ffe63f50c
msgid "``enclosure`` should be an instance of :class:`django.utils.feedgenerator.Enclosure`."
msgstr ""

#: ../../ref/contrib/syndication.txt:875
# 98329d5e2def4f529c6da332007e4fe8
msgid "``categories`` should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:878
# 4c4177f4421b4b259b0609daab5cbaf2
msgid "Outputs the feed in the given encoding to outfile, which is a file-like object."
msgstr ""

#: ../../ref/contrib/syndication.txt:881
# 7ec38faef6a8467f9bdc1a2ed07fab0b
msgid "Returns the feed as a string in the given encoding."
msgstr ""

#: ../../ref/contrib/syndication.txt:883
# 2c9ea56980b249f08840678b7d5b63bc
msgid "For example, to create an Atom 1.0 feed and print it to standard output::"
msgstr ""

#: ../../ref/contrib/syndication.txt:909
# 3d9759a0ed39481ca3547342df67c1c8
msgid "Custom feed generators"
msgstr ""

#: ../../ref/contrib/syndication.txt:911
# b3d17a0903a1425f9d57fadbb322ffc1
msgid "If you need to produce a custom feed format, you've got a couple of options."
msgstr ""

#: ../../ref/contrib/syndication.txt:913
# 4bd52f36d2a5466c947c774f8733518f
msgid "If the feed format is totally custom, you'll want to subclass ``SyndicationFeed`` and completely replace the ``write()`` and ``writeString()`` methods."
msgstr ""

#: ../../ref/contrib/syndication.txt:917
# fbb817071bde4709a6a41f589fb0af57
msgid "However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, Apple's `iTunes podcast format`_, etc.), you've got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that ``SyndicationFeed`` calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these callbacks. They are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:928
# f3e1d6143a884bd59620352a8f56679c
msgid "Return a ``dict`` of attributes to add to the root feed element (``feed``/``channel``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:932
# a180c33d2b8f4b009256d66ff30ea01a
msgid "Callback to add elements inside the root feed element (``feed``/``channel``). ``handler`` is an :class:`~xml.sax.saxutils.XMLGenerator` from Python's built-in SAX library; you'll call methods on it to add to the XML document in process."
msgstr ""

#: ../../ref/contrib/syndication.txt:938
# d90cf7cef2794b438b643416cf3d0e53
msgid "Return a ``dict`` of attributes to add to each item (``item``/``entry``) element. The argument, ``item``, is a dictionary of all the data passed to ``SyndicationFeed.add_item()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:943
# bba3c0131cbe4d6187b128bf6b15f86b
msgid "Callback to add elements to each item (``item``/``entry``) element. ``handler`` and ``item`` are as above."
msgstr ""

#: ../../ref/contrib/syndication.txt:948
# 5c8b49b8fb73446a9067f9fad18152ec
msgid "If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format."
msgstr ""

#: ../../ref/contrib/syndication.txt:951
# 8bc0b21d2b7c49cc84148f2c6006413c
msgid "For example, you might start implementing an iTunes RSS feed generator like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:963
# 606551c134aa4bc291576ec60ed3e4d2
msgid "Obviously there's a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea."
msgstr ""

#: ../../ref/contrib/webdesign.txt:3
#: ../../ref/templates/builtins.txt:2415
# a313d15761ec46f5895ff0368fcbc0ff
# 62f72e515f174f1a9ac0a0a3704b511c
msgid "django.contrib.webdesign"
msgstr ""

#: ../../ref/contrib/webdesign.txt:9
# f10fa0a3bd84458794eab5e088e03442
msgid "The ``django.contrib.webdesign`` package, part of the :doc:`\"django.contrib\" add-ons </ref/contrib/index>`, provides various Django helpers that are particularly useful to Web *designers* (as opposed to developers)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:14
# 34acd82e80254720a3852d7336995dee
msgid "At present, the package contains only a single template tag. If you have ideas for Web-designer-friendly functionality in Django, please :doc:`suggest them </internals/contributing/index>`."
msgstr ""

#: ../../ref/contrib/webdesign.txt:21
# 7f644f8aa7c1432db6816144d016bf3d
msgid "To use these template tags, add ``'django.contrib.webdesign'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load webdesign %}`` in a template to give your template access to the tags."
msgstr ""

#: ../../ref/contrib/webdesign.txt:27
# 993c5974f750420cb824aaccd0a748f7
msgid "lorem"
msgstr ""

#: ../../ref/contrib/webdesign.txt:29
# 9a37542e86fd451dac3a59bb36168e5a
msgid "Displays random \"lorem ipsum\" Latin text. This is useful for providing sample data in templates."
msgstr ""

#: ../../ref/contrib/webdesign.txt:36
# 9600029f06544ecebfabcc7c683f7328
msgid "The ``{% lorem %}`` tag can be used with zero, one, two or three arguments. The arguments are:"
msgstr ""

#: ../../ref/contrib/webdesign.txt:42
# 31ebbdb6ce3a43c1ade91e33c2fe9f00
msgid "``count``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:42
# f0c5320a899246678ee0e56d3f86fddd
msgid "A number (or variable) containing the number of paragraphs or words to generate (default is 1)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:44
# c7912721578343a681a389735011336d
msgid "``method``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:44
# 6e95b74fd7494ea3a70e34bfe3a7ae1f
msgid "Either ``w`` for words, ``p`` for HTML paragraphs or ``b`` for plain-text paragraph blocks (default is ``b``)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:46
# 92068f3a75eb428d97a0815148156e93
msgid "``random``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:46
# bd28b3572a4d4a03a3736d3b70abc5c4
msgid "The word ``random``, which if given, does not use the common paragraph (\"Lorem ipsum dolor sit amet...\") when generating text."
msgstr ""

#: ../../ref/contrib/webdesign.txt:53
# 43feb9bc9cf141abb5fb342565ed6363
msgid "``{% lorem %}`` will output the common \"lorem ipsum\" paragraph."
msgstr ""

#: ../../ref/contrib/webdesign.txt:54
# 5d96902aa6c34d6c942197a8d89b2f9a
msgid "``{% lorem 3 p %}`` will output the common \"lorem ipsum\" paragraph and two random paragraphs each wrapped in HTML ``<p>`` tags."
msgstr ""

#: ../../ref/contrib/webdesign.txt:56
# ecdde59eba4a45ddad68c5d54819d956
msgid "``{% lorem 2 w random %}`` will output two random Latin words."
msgstr ""

#: ../../ref/databases.txt:3
# e288dc74033948ca83202774ce9ac698
msgid "Databases"
msgstr ""

#: ../../ref/databases.txt:5
# 814baaa2958344229fd808a0fa7e1c92
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and we've had to make design decisions on which features to support and which assumptions we can make safely."
msgstr ""

#: ../../ref/databases.txt:10
# f836aaf9fec343a7854a984d3566ad53
msgid "This file describes some of the features that might be relevant to Django usage. Of course, it is not intended as a replacement for server-specific documentation or reference manuals."
msgstr ""

#: ../../ref/databases.txt:17
# 85bbd38684ae4e8ab18662f46499ea6d
msgid "PostgreSQL notes"
msgstr ""

#: ../../ref/databases.txt:21
# 5fbeb6925f644abd949d247a5d6d3aec
msgid "Django supports PostgreSQL 8.2 and higher."
msgstr ""

#: ../../ref/databases.txt:24
# 906bb70bd6454af4b89edb7212b711ad
msgid "PostgreSQL 8.2 to 8.2.4"
msgstr ""

#: ../../ref/databases.txt:26
# cd22877006ee41939ed19cade2bc82c0
msgid "The implementation of the population statistics aggregates ``STDDEV_POP`` and ``VAR_POP`` that shipped with PostgreSQL 8.2 to 8.2.4 are `known to be faulty`_. Users of these releases of PostgreSQL are advised to upgrade to `Release 8.2.5`_ or later. Django will raise a ``NotImplementedError`` if you attempt to use the ``StdDev(sample=False)`` or ``Variance(sample=False)`` aggregate with a database backend that falls within the affected release range."
msgstr ""

#: ../../ref/databases.txt:37
# 26fe5b5f8c634ae596b7cb14bdc1bb2b
msgid "Optimizing PostgreSQL's configuration"
msgstr ""

#: ../../ref/databases.txt:39
# 9c9aee69f8f146768c2fa4f0b30539a2
msgid "Django needs the following parameters for its database connections:"
msgstr ""

#: ../../ref/databases.txt:41
# 6c1e972021b1441b94506c29e9714324
msgid "``client_encoding``: ``'UTF8'``,"
msgstr ""

#: ../../ref/databases.txt:42
# ffe095850c764fbbb25c67ecef7788ba
msgid "``default_transaction_isolation``: ``'read committed'``,"
msgstr ""

#: ../../ref/databases.txt:43
# d0386cbcd3ca4c3885af57e07d051680
msgid "``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of :setting:`TIME_ZONE` otherwise."
msgstr ""

#: ../../ref/databases.txt:46
# 4c3b7d2b352745bc89448f1d5a7b92b6
msgid "If these parameters already have the correct values, Django won't set them for every new connection, which improves performance slightly. You can configure them directly in :file:`postgresql.conf` or more conveniently per database user with `ALTER ROLE`_."
msgstr ""

#: ../../ref/databases.txt:51
# 0003ef1aa9be4a6bb75f0a9120a46133
msgid "Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters."
msgstr ""

#: ../../ref/databases.txt:57
# 7d6553c381a64a0882db7455e90d0053
msgid "Transaction handling"
msgstr ""

#: ../../ref/databases.txt:59
# 2a955034dd1f4d0bb6f91657ae7f624b
msgid ":doc:`By default </topics/db/transactions>`, Django starts a transaction when a database connection is first used and commits the result at the end of the request/response handling. The PostgreSQL backends normally operate the same as any other Django backend in this respect."
msgstr ""

#: ../../ref/databases.txt:67
# ea6e5c6a6fbb48e48b3ae37542fbd33e
msgid "Autocommit mode"
msgstr ""

#: ../../ref/databases.txt:69
# 9343f71da8f74f758d61b31a66b27988
msgid "If your application is particularly read-heavy and doesn't make many database writes, the overhead of a constantly open transaction can sometimes be noticeable. For those situations, you can configure Django to use *\"autocommit\"* behavior for the connection, meaning that each database operation will normally be in its own transaction, rather than having the transaction extend over multiple operations. In this case, you can still manually start a transaction if you're doing something that requires consistency across multiple database operations. The autocommit behavior is enabled by setting the ``autocommit`` key in the :setting:`OPTIONS` part of your database configuration in :setting:`DATABASES`::"
msgstr ""

#: ../../ref/databases.txt:85
# f0380c95b6c3439ab2d77b6a51a3f3af
msgid "In this configuration, Django still ensures that :ref:`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-update>` queries run inside a single transaction, so that either all the affected objects are changed or none of them are."
msgstr ""

#: ../../ref/databases.txt:92
# f75d7342340842bb94198d8d02e0ffbe
msgid "This functionality is not the same as the :ref:`autocommit <topics-db-transactions-autocommit>` decorator. That decorator is a Django-level implementation that commits automatically after data changing operations. The feature enabled using the :setting:`OPTIONS` option provides autocommit behavior at the database adapter level. It commits after *every* operation."
msgstr ""

#: ../../ref/databases.txt:99
# ccde66e0463c4b669f1e3b8b81b112a6
msgid "If you are using this feature and performing an operation akin to delete or updating that requires multiple operations, you are strongly recommended to wrap you operations in manual transaction handling to ensure data consistency. You should also audit your existing code for any instances of this behavior before enabling this feature. It's faster, but it provides less automatic protection for multi-call operations."
msgstr ""

#: ../../ref/databases.txt:107
# c772fcd4daa64dbbb43256eb5f823891
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr ""

#: ../../ref/databases.txt:109
# 8fad2990989b4921b8c56666cd9f674a
msgid "When specifying ``db_index=True`` on your model fields, Django typically outputs a single ``CREATE INDEX`` statement.  However, if the database type for the field is either ``varchar`` or ``text`` (e.g., used by ``CharField``, ``FileField``, and ``TextField``), then Django will create an additional index that uses an appropriate `PostgreSQL operator class`_ for the column.  The extra index is necessary to correctly perfrom lookups that use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and ``startswith`` lookup types."
msgstr ""

#: ../../ref/databases.txt:123
# ed19cb05221f41aebfa7c0858f5ac91d
msgid "MySQL notes"
msgstr ""

#: ../../ref/databases.txt:125
# 0f920f5f5fc94668852a297ac75cdf01
msgid "Django expects the database to support transactions, referential integrity, and Unicode (UTF-8 encoding). Fortunately, MySQL_ has all these features as available as far back as 3.23. While it may be possible to use 3.23 or 4.0, you'll probably have less trouble if you use 4.1 or 5.0."
msgstr ""

#: ../../ref/databases.txt:131
# f7e1060a9dac4604b2c55d51d96a41ff
msgid "MySQL 4.1"
msgstr ""

#: ../../ref/databases.txt:133
# 5544c94e987243018bc306e37a97c4be
msgid "`MySQL 4.1`_ has greatly improved support for character sets. It is possible to set different default character sets on the database, table, and column. Previous versions have only a server-wide character set setting. It's also the first version where the character set can be changed on the fly. 4.1 also has support for views, but Django currently doesn't use views."
msgstr ""

#: ../../ref/databases.txt:140
# 9050c390d5d24716ac11ad4953966a8f
msgid "MySQL 5.0"
msgstr ""

#: ../../ref/databases.txt:142
# 71d25e14b01a413697215552b640f944
msgid "`MySQL 5.0`_ adds the ``information_schema`` database, which contains detailed data on all database schema. Django's ``inspectdb`` feature uses this ``information_schema`` if it's available. 5.0 also has support for stored procedures, but Django currently doesn't use stored procedures."
msgstr ""

#: ../../ref/databases.txt:152
# 543b4aa68ac64b1eaeeaf072b6fb5ab9
msgid "Storage engines"
msgstr ""

#: ../../ref/databases.txt:154
# a6686fbf8aed405094f27ee11f03bedc
msgid "MySQL has several `storage engines`_ (previously called table types). You can change the default storage engine in the server configuration."
msgstr ""

#: ../../ref/databases.txt:157
# 5fe10096f3de458d85813c588e2a9802
msgid "Until MySQL 5.5.4, the default engine was MyISAM_ [#]_. The main drawbacks of MyISAM are that it doesn't support transactions or enforce foreign-key constraints. On the plus side, it's currently the only engine that supports full-text indexing and searching."
msgstr ""

#: ../../ref/databases.txt:162
# e323b7d7cacf47dabe340b31f55a0996
msgid "Since MySQL 5.5.5, the default storage engine is InnoDB_. This engine is fully transactional and supports foreign key references. It's probably the best choice at this point."
msgstr ""

#: ../../ref/databases.txt:168
# bac78f2707b44bcea113b635d78b05fb
msgid "In previous versions of Django, fixtures with forward references (i.e. relations to rows that have not yet been inserted into the database) would fail to load when using the InnoDB storage engine. This was due to the fact that InnoDB deviates from the SQL standard by checking foreign key constraints immediately instead of deferring the check until the transaction is committed. This problem has been resolved in Django 1.4. Fixture data is now loaded with foreign key checks turned off; foreign key checks are then re-enabled when the data has finished loading, at which point the entire table is checked for invalid foreign key references and an `IntegrityError` is raised if any are found."
msgstr ""

#: ../../ref/databases.txt:182
# 86523b5e477d4a5d91ac58bc945a6d0f
msgid "Unless this was changed by the packager of your MySQL package. We've had reports that the Windows Community Server installer sets up InnoDB as the default storage engine, for example."
msgstr ""

#: ../../ref/databases.txt:187
# 7ba0aaabc29f4962b463289c9f56769b
msgid "MySQLdb"
msgstr ""

#: ../../ref/databases.txt:189
# 95d840db3c184c12b3cb6610cae60c92
msgid "`MySQLdb`_ is the Python interface to MySQL. Version 1.2.1p2 or later is required for full MySQL support in Django."
msgstr ""

#: ../../ref/databases.txt:193
# aad7c80a08854b3e9bc23f8ee8e2ff7a
msgid "If you see ``ImportError: cannot import name ImmutableSet`` when trying to use Django, your MySQLdb installation may contain an outdated ``sets.py`` file that conflicts with the built-in module of the same name from Python 2.4 and later. To fix this, verify that you have installed MySQLdb version 1.2.1p2 or newer, then delete the ``sets.py`` file in the MySQLdb directory that was left by an earlier version."
msgstr ""

#: ../../ref/databases.txt:203
# a499363f116c44729d7bbc0c0ad07910
msgid "Creating your database"
msgstr ""

#: ../../ref/databases.txt:205
# 6de970c246794fffa242dd342a96229f
msgid "You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

#: ../../ref/databases.txt:209
# c3e5aecb6df54e71950c68f2b3adeea8
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

#: ../../ref/databases.txt:216
# 1586e98bc1354b409b4b865503dd2351
msgid "Collation settings"
msgstr ""

#: ../../ref/databases.txt:218
# 262b044bb0d9475bbd12b229cfcc37e0
msgid "The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. It can be set on a database-wide level and also per-table and per-column. This is `documented thoroughly`_ in the MySQL documentation. In all cases, you set the collation by directly manipulating the database tables; Django doesn't provide a way to set this on the model definition."
msgstr ""

#: ../../ref/databases.txt:227
# 9e73ef29913949e08f54220b68b4e87d
msgid "By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci_swedish`` collation. This results in all string equality comparisons being done in a *case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` into the same column, since they compare as equal (and, hence, non-unique) with the default collation."
msgstr ""

#: ../../ref/databases.txt:235
# d24695ff27a34c0dbdfa37a1c957b2e6
msgid "In many cases, this default will not be a problem. However, if you really want case-sensitive comparisons on a particular column or table, you would change the column or table to use the ``utf8_bin`` collation. The main thing to be aware of in this case is that if you are using MySQLdb 1.2.2, the database backend in Django will then return bytestrings (instead of unicode strings) for any character fields it receive from the database. This is a strong variation from Django's normal practice of *always* returning unicode strings. It is up to you, the developer, to handle the fact that you will receive bytestrings if you configure your table(s) to use ``utf8_bin`` collation. Django itself should mostly work smoothly with such columns (except for the ``contrib.sessions`` ``Session`` and ``contrib.admin`` ``LogEntry`` tables described below), but your code must be prepared to call ``django.utils.encoding.smart_unicode()`` at times if it really wants to work with consistent data -- Django will not do this for you (the database backend layer and the model population layer are separated internally so the database layer doesn't know it needs to make this conversion in this one particular case)."
msgstr ""

#: ../../ref/databases.txt:252
# 35c0e392fd304ee6a5e2d04cdeab8b1c
msgid "If you're using MySQLdb 1.2.1p2, Django's standard :class:`~django.db.models.CharField` class will return unicode strings even with ``utf8_bin`` collation. However, :class:`~django.db.models.TextField` fields will be returned as an ``array.array`` instance (from Python's standard ``array`` module). There isn't a lot Django can do about that, since, again, the information needed to make the necessary conversions isn't available when the data is read in from the database. This problem was `fixed in MySQLdb 1.2.2`_, so if you want to use :class:`~django.db.models.TextField` with ``utf8_bin`` collation, upgrading to version 1.2.2 and then dealing with the bytestrings (which shouldn't be too difficult) as described above is the recommended solution."
msgstr ""

#: ../../ref/databases.txt:264
# 78ab202c84ec42e2ab3bc95bde3d4b8b
msgid "Should you decide to use ``utf8_bin`` collation for some of your tables with MySQLdb 1.2.1p2 or 1.2.2, you should still use ``utf8_collation_ci_swedish`` (the default) collation for the :class:`django.contrib.sessions.models.Session` table (usually called ``django_session``) and the :class:`django.contrib.admin.models.LogEntry` table (usually called ``django_admin_log``). Those are the two standard tables that use :class:`~django.db.models.TextField` internally."
msgstr ""

#: ../../ref/databases.txt:275
#: ../../ref/databases.txt:609
# a56f2f39100d416a9571f4a9ba0389f3
# c4ca835fae694a3f99077b0c92372af6
msgid "Connecting to the database"
msgstr ""

#: ../../ref/databases.txt:277
# 5a71715199ef4644a3e7f1f27233decd
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

#: ../../ref/databases.txt:279
# b65dd3eabe554f349d33a2eb5189e489
msgid "Connection settings are used in this order:"
msgstr ""

#: ../../ref/databases.txt:281
# 5c30174fad17497da42b5c70d88e74d8
msgid ":setting:`OPTIONS`."
msgstr ""

#: ../../ref/databases.txt:282
# c46a80e6262745eeb306ffba3e7a312d
msgid ":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :setting:`PORT`"
msgstr ""

#: ../../ref/databases.txt:284
# c9433e5f37a54ac8983d4e4ed41abb02
msgid "MySQL option files."
msgstr ""

#: ../../ref/databases.txt:286
# a12812c4ff79487da7e3facfa8005062
msgid "In other words, if you set the name of the database in :setting:`OPTIONS`, this will take precedence over :setting:`NAME`, which would override anything in a `MySQL option file`_."
msgstr ""

#: ../../ref/databases.txt:290
# 31c7bd876ac24b918198c3a0a38cd790
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

#: ../../ref/databases.txt:310
# 3f9740061be4427abc2771758cc7b3fe
msgid "Several other MySQLdb connection options may be useful, such as ``ssl``, ``use_unicode``, ``init_command``, and ``sql_mode``. Consult the `MySQLdb documentation`_ for more details."
msgstr ""

#: ../../ref/databases.txt:318
# 794261d9accf432d81a79417818ee36e
msgid "Creating your tables"
msgstr ""

#: ../../ref/databases.txt:320
# 8282877dcb214538888390233037fdb6
msgid "When Django generates the schema, it doesn't specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server's default storage engine to the desired engine."
msgstr ""

#: ../../ref/databases.txt:325
# be8a63b3a7f041888736857d9a53a91c
msgid "If you're using a hosting service and can't change your server's default storage engine, you have a couple of options."
msgstr ""

#: ../../ref/databases.txt:328
# 7f5059223d2e4e879f09dbc6e1a7631d
msgid "After the tables are created, execute an ``ALTER TABLE`` statement to convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

#: ../../ref/databases.txt:333
# a0f83465e5b34a7cac79815d04132ebc
msgid "This can be tedious if you have a lot of tables."
msgstr ""

#: ../../ref/databases.txt:335
# 0aba3c762bb94e3a9d3f7ad3e68202bf
msgid "Another option is to use the ``init_command`` option for MySQLdb prior to creating your tables::"
msgstr ""

#: ../../ref/databases.txt:342
# 03df33aa3c5a43aaa3778f8295bf2e3c
msgid "This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option."
msgstr ""

#: ../../ref/databases.txt:345
# 314d4e1dc9b14a9ca56f63aeb044ed8c
msgid "Another method for changing the storage engine is described in AlterModelOnSyncDB_."
msgstr ""

#: ../../ref/databases.txt:351
#: ../../ref/models/options.txt:45
# 41d11c685b3f4983853f08c933ed3630
# 54aae081b34c458b81cabb21cab1b5e9
msgid "Table names"
msgstr ""

#: ../../ref/databases.txt:353
# 37e91e89fd9f4ddf80a090b10cec7675
msgid "There are `known issues`_ in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""

#: ../../ref/databases.txt:364
# 931f8e30e4064f91982865e325202262
msgid "Notes on specific fields"
msgstr ""

#: ../../ref/databases.txt:367
# 50005dc0573f40d3ba35e24a3f2a2c8d
msgid "Boolean fields"
msgstr ""

#: ../../ref/databases.txt:371
# 850fff82fb904061aed963a96d547f82
msgid "In previous versions of Django when running under MySQL ``BooleanFields`` would return their data as ``ints``, instead of true ``bools``.  See the release notes for a complete description of the change."
msgstr ""

#: ../../ref/databases.txt:376
# 0da7668a386c40299d52214da6ad6ffb
msgid "Character fields"
msgstr ""

#: ../../ref/databases.txt:378
# 6d6e297ecba3488f8cde049481abd66e
msgid "Any fields that are stored with ``VARCHAR`` column types have their ``max_length`` restricted to 255 characters if you are using ``unique=True`` for the field. This affects :class:`~django.db.models.CharField`, :class:`~django.db.models.SlugField` and :class:`~django.db.models.CommaSeparatedIntegerField`."
msgstr ""

#: ../../ref/databases.txt:384
# cd9fa00442054b578ae9671a33400cab
msgid "Furthermore, if you are using a version of MySQL prior to 5.0.3, all of those column types have a maximum length restriction of 255 characters, regardless of whether ``unique=True`` is specified or not."
msgstr ""

#: ../../ref/databases.txt:389
# ef00d93b980c4cdfa3afe1cca80bd750
msgid "DateTime fields"
msgstr ""

#: ../../ref/databases.txt:391
# 410fb89cbf8e4f17a1727f17a063aaa9
msgid "MySQL does not have a timezone-aware column type. If an attempt is made to store a timezone-aware ``time`` or ``datetime`` to a :class:`~django.db.models.TimeField` or :class:`~django.db.models.DateTimeField` respectively, a ``ValueError`` is raised rather than truncating data."
msgstr ""

#: ../../ref/databases.txt:396
# 0809bbb6eea8425a9b71917c3a0a3fb1
msgid "MySQL does not store fractions of seconds. Fractions of seconds are truncated to zero when the time is stored."
msgstr ""

#: ../../ref/databases.txt:400
# 37b1dd2b1d6f4369b0b588a2c3a1c0db
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

#: ../../ref/databases.txt:402
# 68db8bf243384d0eacb5e289b8fd479d
msgid "MySQL does not support the ``NOWAIT`` option to the ``SELECT ... FOR UPDATE`` statement. If ``select_for_update()`` is used with ``nowait=True`` then a ``DatabaseError`` will be raised."
msgstr ""

#: ../../ref/databases.txt:409
# a511a360fe5b41168c27ada18bf2cd84
msgid "SQLite notes"
msgstr ""

#: ../../ref/databases.txt:411
# e048a658725d4fcc9446fc2cf60d3f80
msgid "SQLite_ provides an excellent development alternative for applications that are predominantly read-only or require a smaller installation footprint. As with all database servers, though, there are some differences that are specific to SQLite that you should be aware of."
msgstr ""

#: ../../ref/databases.txt:421
# bf79666c6d1b45fa868e7c81fce1f6d4
msgid "Substring matching and case sensitivity"
msgstr ""

#: ../../ref/databases.txt:423
# 58a632f95c624e169679572e5f4a7fc6
msgid "For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings.  These are triggered when using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The behavior splits into two cases:"
msgstr ""

#: ../../ref/databases.txt:428
# 214f71ba58204bf4a136f6001e13bae2
msgid "1. For substring matching, all matches are done case-insensitively. That is a filter such as ``filter(name__contains=\"aa\")`` will match a name of ``\"Aabb\"``."
msgstr ""

#: ../../ref/databases.txt:431
# 5e8861e1884f4135a5fce24b95d493e7
msgid "2. For strings containing characters outside the ASCII range, all exact string matches are performed case-sensitively, even when the case-insensitive options are passed into the query. So the :lookup:`iexact` filter will behave exactly the same as the :lookup:`exact` filter in these cases."
msgstr ""

#: ../../ref/databases.txt:436
# 79e1b1e49a5b490b845f5aaa3e8fd237
msgid "Some possible workarounds for this are `documented at sqlite.org`_, but they aren't utilised by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering."
msgstr ""

#: ../../ref/databases.txt:445
# dbb9950a5688410583409fff72ce5df2
msgid "SQLite 3.3.6 or newer strongly recommended"
msgstr ""

#: ../../ref/databases.txt:447
# 508d3a55d65f4a829dc773d24cce9ec8
msgid "Versions of SQLite 3.3.5 and older contains the following bugs:"
msgstr ""

#: ../../ref/databases.txt:449
# 85bea3d092504e9e958b4d530d50265f
msgid "A bug when `handling`_ ``ORDER BY`` parameters. This can cause problems when you use the ``select`` parameter for the ``extra()`` QuerySet method. The bug can be identified by the error message ``OperationalError: ORDER BY terms must not be non-integer constants``."
msgstr ""

#: ../../ref/databases.txt:454
# d501031157cc45d486e09d63850ceacb
msgid "A bug when handling `aggregation`_ together with DateFields and DecimalFields."
msgstr ""

#: ../../ref/databases.txt:460
# ba695771c39e4518bca51e1b85d8784c
msgid "SQLite 3.3.6 was released in April 2006, so most current binary distributions for different platforms include newer version of SQLite usable from Python through either the ``pysqlite2`` or the ``sqlite3`` modules."
msgstr ""

#: ../../ref/databases.txt:464
# d599adf6b1a34e2a9167ed52371114d9
msgid "However, some platform/Python version combinations include older versions of SQLite (e.g. the official binary distribution of Python 2.5 for Windows, 2.5.4 as of this writing, includes SQLite 3.3.4). There are (as of Django 1.1) even some tests in the Django test suite that will fail when run under this setup."
msgstr ""

#: ../../ref/databases.txt:469
# 79d3cda0a2cf423da590c44a79e268f6
msgid "As described :ref:`below<using-newer-versions-of-pysqlite>`, this can be solved by downloading and installing a newer version of ``pysqlite2`` (``pysqlite-2.x.x.win32-py2.5.exe`` in the described case) that includes and uses a newer version of SQLite. Python 2.6 for Windows ships with a version of SQLite that is not affected by these issues."
msgstr ""

#: ../../ref/databases.txt:476
# b877c49880e04153a7e46a721af80e47
msgid "Version 3.5.9"
msgstr ""

#: ../../ref/databases.txt:478
# 37bf8017672942d991e8c5f3724243a8
msgid "The Ubuntu \"Intrepid Ibex\" (8.10) SQLite 3.5.9-3 package contains a bug that causes problems with the evaluation of query expressions. If you are using Ubuntu \"Intrepid Ibex\", you will need to update the package to version 3.5.9-3ubuntu1 or newer (recommended) or find an alternate source for SQLite packages, or install SQLite from source."
msgstr ""

#: ../../ref/databases.txt:484
# 2ccc4f1ef60a4980952a94a8232194a1
msgid "At one time, Debian Lenny shipped with the same malfunctioning SQLite 3.5.9-3 package. However the Debian project has subsequently issued updated versions of the SQLite package that correct these bugs. If you find you are getting unexpected results under Debian, ensure you have updated your SQLite package to 3.5.9-5 or later."
msgstr ""

#: ../../ref/databases.txt:490
# 70b6ea9bc9934549ad139a03dab2b011
msgid "The problem does not appear to exist with other versions of SQLite packaged with other operating systems."
msgstr ""

#: ../../ref/databases.txt:494
# cc07c2b1c8924731a88a4a950bdb30fe
msgid "Version 3.6.2"
msgstr ""

#: ../../ref/databases.txt:496
# caf1f21fd35149f6a64d187f17164438
msgid "SQLite version 3.6.2 (released August 30, 2008) introduced a bug into ``SELECT DISTINCT`` handling that is triggered by, amongst other things, Django's ``DateQuerySet`` (returned by the ``dates()`` method on a queryset)."
msgstr ""

#: ../../ref/databases.txt:500
# d628632a2cb3472286f4ec1c1dd5509c
msgid "You should avoid using this version of SQLite with Django. Either upgrade to 3.6.3 (released September 22, 2008) or later, or downgrade to an earlier version of SQLite."
msgstr ""

#: ../../ref/databases.txt:507
# 33d1066029564966b07449072e9513f9
msgid "Using newer versions of the SQLite DB-API 2.0 driver"
msgstr ""

#: ../../ref/databases.txt:509
# 1662032e21fd42dcb8426af25143b7f0
msgid "For versions of Python 2.5 or newer that include ``sqlite3`` in the standard library Django will now use a ``pysqlite2`` interface in preference to ``sqlite3`` if it finds one is available."
msgstr ""

#: ../../ref/databases.txt:513
# e45d52b375dd4d62b2b2eb0766ab0f67
msgid "This provides the ability to upgrade both the DB-API 2.0 interface or SQLite 3 itself to versions newer than the ones included with your particular Python binary distribution, if needed."
msgstr ""

#: ../../ref/databases.txt:518
# 2844404866e5436381658bbefd61ddd0
msgid "\"Database is locked\" errors"
msgstr ""

#: ../../ref/databases.txt:520
# 260be9980f20405f86e2d648c6916f16
msgid "SQLite is meant to be a lightweight database, and thus can't support a high level of concurrency. ``OperationalError: database is locked`` errors indicate that your application is experiencing more concurrency than ``sqlite`` can handle in default configuration. This error means that one thread or process has an exclusive lock on the database connection and another thread timed out waiting for the lock the be released."
msgstr ""

#: ../../ref/databases.txt:527
# bfd94d9a85294ef68a80224e5f7a43b8
msgid "Python's SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the ``OperationalError: database is locked`` error."
msgstr ""

#: ../../ref/databases.txt:532
# 42f0b754efe345c5a8aa7592a7a2b7d5
msgid "If you're getting this error, you can solve it by:"
msgstr ""

#: ../../ref/databases.txt:534
# 31f7288c5ac34a7e886dbc0715eec367
msgid "Switching to another database backend. At a certain point SQLite becomes too \"lite\" for real-world applications, and these sorts of concurrency errors indicate you've reached that point."
msgstr ""

#: ../../ref/databases.txt:538
# aa01fe7f773a4e7991392681f1b6ba65
msgid "Rewriting your code to reduce concurrency and ensure that database transactions are short-lived."
msgstr ""

#: ../../ref/databases.txt:541
# 5124df255bd1424eaee90336a89d0ee5
msgid "Increase the default timeout value by setting the ``timeout`` database option option::"
msgstr ""

#: ../../ref/databases.txt:550
# 27cea62194b74c919686be7edb76ce13
msgid "This will simply make SQLite wait a bit longer before throwing \"database is locked\" errors; it won't really do anything to solve them."
msgstr ""

#: ../../ref/databases.txt:554
# eac754b842a542a1b5865eb8a29bd9c5
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

#: ../../ref/databases.txt:556
# 30477d44d2ff4cee85408b5331cf757e
msgid "SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it will have no effect."
msgstr ""

#: ../../ref/databases.txt:562
# 9d66faf021624e23b145da74a6786efc
msgid "Parameters not quoted in ``connection.queries``"
msgstr ""

#: ../../ref/databases.txt:564
# fd822b44a9794f28aff72b6efb9a4100
msgid "``sqlite3`` does not provide a way to retrieve the SQL after quoting and substituting the parameters. Instead, the SQL in ``connection.queries`` is rebuilt with a simple string interpolation. It may be incorrect. Make sure you add quotes where necessary before copying a query into a SQLite shell."
msgstr ""

#: ../../ref/databases.txt:572
# 24bd497771d34239bc5f8f33fcb78d7b
msgid "Oracle notes"
msgstr ""

#: ../../ref/databases.txt:574
# 49799c078d5547ec95bbb6615e817aac
msgid "Django supports `Oracle Database Server`_ versions 9i and higher. Oracle version 10g or later is required to use Django's ``regex`` and ``iregex`` query operators. You will also need at least version 4.3.1 of the `cx_Oracle`_ Python driver."
msgstr ""

#: ../../ref/databases.txt:579
# 9a24ac934e36471c81a918d5c673b2d4
msgid "Note that due to a Unicode-corruption bug in ``cx_Oracle`` 5.0, that version of the driver should **not** be used with Django; ``cx_Oracle`` 5.0.1 resolved this issue, so if you'd like to use a more recent ``cx_Oracle``, use version 5.0.1."
msgstr ""

#: ../../ref/databases.txt:584
# 404c4929972a4e32a90542845b7f5008
msgid "``cx_Oracle`` 5.0.1 or greater can optionally be compiled with the ``WITH_UNICODE`` environment variable.  This is recommended but not required."
msgstr ""

#: ../../ref/databases.txt:591
# 9cdd3b98d2804de793a1fa7134224c8f
msgid "In order for the ``python manage.py syncdb`` command to work, your Oracle database user must have privileges to run the following commands:"
msgstr ""

#: ../../ref/databases.txt:594
# 9c36d030cb1242ff8e5a649034116f66
msgid "CREATE TABLE"
msgstr ""

#: ../../ref/databases.txt:595
# 18a6d90bdaf8489e925f992ae9e6676c
msgid "CREATE SEQUENCE"
msgstr ""

#: ../../ref/databases.txt:596
# a6e00860ac124760bd6dae73175fa610
msgid "CREATE PROCEDURE"
msgstr ""

#: ../../ref/databases.txt:597
# a3020d0a72dd4287a31453d8f6f47053
msgid "CREATE TRIGGER"
msgstr ""

#: ../../ref/databases.txt:599
# bfb6bbc8032048de93b5332ced604a66
msgid "To run Django's test suite, the user needs these *additional* privileges:"
msgstr ""

#: ../../ref/databases.txt:601
# fd9c9f5de3364d548ebd6cff6c0ad1eb
msgid "CREATE USER"
msgstr ""

#: ../../ref/databases.txt:602
# 78569fe1c76f48b5b073ba6541b64a32
msgid "DROP USER"
msgstr ""

#: ../../ref/databases.txt:603
# 7b71434ba67b47ae903eb1d679b93ae0
msgid "CREATE TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:604
# 379875b783934ae59ba0d6e642792f88
msgid "DROP TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:605
# 065b195f73c14701af49bfad58628a33
msgid "CONNECT WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:606
# 9c9387128a7b4e1fa5431a33e6d2c4f0
msgid "RESOURCE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:611
# 53f427cd04f94ab5a3bbc49db5c78b13
msgid "Your Django settings.py file should look something like this for Oracle::"
msgstr ""

#: ../../ref/databases.txt:625
# 06fc34c516144e318bb0dceb336cbe48
msgid "If you don't use a ``tnsnames.ora`` file or a similar naming method that recognizes the SID (\"xe\" in this example), then fill in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""

#: ../../ref/databases.txt:640
# 82835a04950f44cba0cd3278731c4a5f
msgid "You should supply both :setting:`HOST` and :setting:`PORT`, or leave both as empty strings."
msgstr ""

#: ../../ref/databases.txt:644
# b953089c38ea41349f356dd8cf2a7421
msgid "Threaded option"
msgstr ""

#: ../../ref/databases.txt:646
# 0526865b1e6a42e6af7ebad7e96d97f2
msgid "If you plan to run Django in a multithreaded environment (e.g. Apache in Windows using the default MPM module), then you **must** set the ``threaded`` option of your Oracle database configuration to True::"
msgstr ""

#: ../../ref/databases.txt:654
# c916cf328217465481c5b12a2b903a37
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

#: ../../ref/databases.txt:657
# e061ea627d9e4677b4ff50626dfc1332
msgid "INSERT ... RETURNING INTO"
msgstr ""

#: ../../ref/databases.txt:659
# d0155a49ff8346bfa5bce54d84bc9efd
msgid "By default, the Oracle backend uses a ``RETURNING INTO`` clause to efficiently retrieve the value of an ``AutoField`` when inserting new rows.  This behavior may result in a ``DatabaseError`` in certain unusual setups, such as when inserting into a remote table, or into a view with an ``INSTEAD OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the ``use_returning_into`` option of the database configuration to False::"
msgstr ""

#: ../../ref/databases.txt:670
# e130d5d582dd4939ab0d6661b00ed68f
msgid "In this case, the Oracle backend will use a separate ``SELECT`` query to retrieve AutoField values."
msgstr ""

#: ../../ref/databases.txt:674
# f90f67efcff64fe780b09de5da7c8910
msgid "Naming issues"
msgstr ""

#: ../../ref/databases.txt:676
# 2548cabf1e9e4c5ba73ee89ccfe5c65e
msgid "Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value."
msgstr ""

#: ../../ref/databases.txt:680
# 6881a886e1aa4ea8b9c66480c315d981
msgid "When running syncdb, an ``ORA-06552`` error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a ``db_column`` option.  Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name.  In particular, take care to avoid using the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

#: ../../ref/databases.txt:689
# 0e2ab3184c854e718dfffb7f84d21ce8
msgid "NULL and empty strings"
msgstr ""

#: ../../ref/databases.txt:691
# ab3f7db922a94c6da5d287c29b1f8a80
msgid "Django generally prefers to use the empty string ('') rather than NULL, but Oracle treats both identically. To get around this, the Oracle backend coerces the ``null=True`` option on fields that have the empty string as a possible value. When fetching from the database, it is assumed that a NULL value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption."
msgstr ""

#: ../../ref/databases.txt:700
# 2afc27cee2874dc7bd56f97376f202ad
msgid "``TextField`` limitations"
msgstr ""

#: ../../ref/databases.txt:702
# 74a5a33b69b44eb0a72afc6054c94a52
msgid "The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

#: ../../ref/databases.txt:705
# 561ddc05e65a4e7994f02bc02dbe2faa
msgid "LOB columns may not be used as primary keys."
msgstr ""

#: ../../ref/databases.txt:707
# c33707dd36f645a0a5fdeae83c9c73d9
msgid "LOB columns may not be used in indexes."
msgstr ""

#: ../../ref/databases.txt:709
# 09dec4f720184da494578acbde2d44f7
msgid "LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that attempting to use the ``QuerySet.distinct`` method on a model that includes ``TextField`` columns will result in an error when run against Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction with ``distinct()`` to prevent ``TextField`` columns from being included in the ``SELECT DISTINCT`` list."
msgstr ""

#: ../../ref/databases.txt:719
# 79461f7fceca440887a3ced15b7b4d3d
msgid "Using a 3rd-party database backend"
msgstr ""

#: ../../ref/databases.txt:721
# 205ebc4983cb44868cdba342ce90da00
msgid "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../ref/databases.txt:724
# 1f420ebcd502463da0fe5b921b540ea9
msgid "`Sybase SQL Anywhere`_"
msgstr ""

#: ../../ref/databases.txt:725
# 696d42ca6fd342759f9e789b20bbaa40
msgid "`IBM DB2`_"
msgstr ""

#: ../../ref/databases.txt:726
# cbe18178ede548668cdaa5fe23e96aef
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

#: ../../ref/databases.txt:727
# 0814716dd52848e1bed321c6f3093949
msgid "Firebird_"
msgstr ""

#: ../../ref/databases.txt:728
# 215faa75a7a94e56ab13599cfa66e320
msgid "ODBC_"
msgstr ""

#: ../../ref/databases.txt:729
# 42f3392099a9465086453d5647c2a438
msgid "ADSDB_"
msgstr ""

#: ../../ref/databases.txt:731
# 89d0a3f01f15434cb66ee8414807ea0a
msgid "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."
msgstr ""

#: ../../ref/django-admin.txt:3
# cd0a8a59c93c46c4a436f9fc85e97d26
msgid "django-admin.py and manage.py"
msgstr ""

#: ../../ref/django-admin.txt:5
# 16fef550df5544f19b8c9da7f24b259d
msgid "``django-admin.py`` is Django's command-line utility for administrative tasks. This document outlines all it can do."
msgstr ""

#: ../../ref/django-admin.txt:8
# a24c72a964444b9db13a9427460f474d
msgid "In addition, ``manage.py`` is automatically created in each Django project. ``manage.py`` is a thin wrapper around ``django-admin.py`` that takes care of two things for you before delegating to ``django-admin.py``:"
msgstr ""

#: ../../ref/django-admin.txt:12
# a4e5fc02fc9d44bd8d68ef7379790e59
msgid "It puts your project's package on ``sys.path``."
msgstr ""

#: ../../ref/django-admin.txt:14
# 755511449455447192461f79a8f01094
msgid "It sets the :envvar:`DJANGO_SETTINGS_MODULE` environment variable so that it points to your project's ``settings.py`` file."
msgstr ""

#: ../../ref/django-admin.txt:17
# dc9fec8e97324611a9fa4f99760fe3c0
msgid "The ``django-admin.py`` script should be on your system path if you installed Django via its ``setup.py`` utility. If it's not on your path, you can find it in ``site-packages/django/bin`` within your Python installation. Consider symlinking it from some place on your path, such as ``/usr/local/bin``."
msgstr ""

#: ../../ref/django-admin.txt:22
# 0433b495c6e8490d9e034dba3c75839d
msgid "For Windows users, who do not have symlinking functionality available, you can copy ``django-admin.py`` to a location on your existing path or edit the ``PATH`` settings (under ``Settings - Control Panel - System - Advanced - Environment...``) to point to its installed location."
msgstr ""

#: ../../ref/django-admin.txt:27
# 09fa7e0a8b8d4fee8918934d3b1f6795
msgid "Generally, when working on a single Django project, it's easier to use ``manage.py``. Use ``django-admin.py`` with ``DJANGO_SETTINGS_MODULE``, or the ``--settings`` command line option, if you need to switch between multiple Django settings files."
msgstr ""

#: ../../ref/django-admin.txt:32
# 7cbfe75f1eda487d8d4ba859a68a12b8
msgid "The command-line examples throughout this document use ``django-admin.py`` to be consistent, but any example can use ``manage.py`` just as well."
msgstr ""

#: ../../ref/django-admin.txt:43
# d1b5b2fc8dd1481e8ce5ca19d17e4933
msgid "``command`` should be one of the commands listed in this document. ``options``, which is optional, should be zero or more of the options available for the given command."
msgstr ""

#: ../../ref/django-admin.txt:48
# 50f5ebb58acc49e9943167352b46c77e
msgid "Getting runtime help"
msgstr ""

#: ../../ref/django-admin.txt:52
# 7037f56d9e1241cf9858451eb994a639
msgid "Run ``django-admin.py help`` to display usage information and a list of the commands provided by each application."
msgstr ""

#: ../../ref/django-admin.txt:55
# 84aa54c4e5cd441aa0c2aaecb4cfa8d9
msgid "Run ``django-admin.py help --commands`` to display a list of all available commands."
msgstr ""

#: ../../ref/django-admin.txt:58
# c67c83622ae7415d8119be916d7e3c02
msgid "Run ``django-admin.py help <command>`` to display a description of the given command and a list of its available options."
msgstr ""

#: ../../ref/django-admin.txt:62
# 1bf2b2c4a01a48debf09c1a72631767b
msgid "App names"
msgstr ""

#: ../../ref/django-admin.txt:64
# eca2a633a61940f1b04c12d7cf29e562
msgid "Many commands take a list of \"app names.\" An \"app name\" is the basename of the package containing your models. For example, if your :setting:`INSTALLED_APPS` contains the string ``'mysite.blog'``, the app name is ``blog``."
msgstr ""

#: ../../ref/django-admin.txt:69
# 4be2721e07324efbb356c59f817ca977
msgid "Determining the version"
msgstr ""

#: ../../ref/django-admin.txt:73
# 6ddc1de84bae46bc9abfa403dfa3e4ed
msgid "Run ``django-admin.py version`` to display the current Django version."
msgstr ""

#: ../../ref/django-admin.txt:75
# f05681fb91ee49ef9e91972f8d597959
msgid "The output follows the schema described in :pep:`386`::"
msgstr ""

#: ../../ref/django-admin.txt:82
# a12db0b3599148b692a0a58d56feebf2
msgid "Displaying debug output"
msgstr ""

#: ../../ref/django-admin.txt:84
# d1d2d631110e429ca4047b90cfc947ef
msgid "Use :djadminopt:`--verbosity` to specify the amount of notification and debug information that ``django-admin.py`` should print to the console. For more details, see the documentation for the :djadminopt:`--verbosity` option."
msgstr ""

#: ../../ref/django-admin.txt:89
# d18ce5f2574146178cf6d727f7cb66e1
msgid "Available commands"
msgstr ""

#: ../../ref/django-admin.txt:92
# b4560d7c3b674495b83fd7c80b04ccb5
msgid "cleanup"
msgstr ""

#: ../../ref/django-admin.txt:96
# f5551f25b38a41e48d3874ae7ccde7c8
msgid "Can be run as a cronjob or directly to clean out old data from the database (only expired sessions at the moment)."
msgstr ""

#: ../../ref/django-admin.txt:100
# fd569ad1660543a69c117c4edf11fc8d
msgid "compilemessages"
msgstr ""

#: ../../ref/django-admin.txt:104
# 9c62b93fd2bd40a48fe00d19b81d8580
msgid "Compiles .po files created with ``makemessages`` to .mo files for use with the builtin gettext support. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/django-admin.txt:107
# 843b4da572764bc09682bd3a1cf54d70
msgid "Use the :djadminopt:`--locale` option to specify the locale to process. If not provided, all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:115
# afd834f2bdfb42f6a8403f9020406060
msgid "createcachetable"
msgstr ""

#: ../../ref/django-admin.txt:119
# 717f15df54ab44ffbc5c6a402616c94b
msgid "Creates a cache table named ``tablename`` for use with the database cache backend. See :doc:`/topics/cache` for more information."
msgstr ""

#: ../../ref/django-admin.txt:124
# b02c7f8f29f7401ba615d85817050dcd
msgid "The :djadminopt:`--database` option can be used to specify the database onto which the cachetable will be installed."
msgstr ""

#: ../../ref/django-admin.txt:128
# fe50b5cd3a6d406faf4e80f1ca9a2448
msgid "dbshell"
msgstr ""

#: ../../ref/django-admin.txt:132
# 5c3ade94d61e4b50a01bec0fc37b24a8
msgid "Runs the command-line client for the database engine specified in your ``ENGINE`` setting, with the connection parameters specified in your :setting:`USER`, :setting:`PASSWORD`, etc., settings."
msgstr ""

#: ../../ref/django-admin.txt:136
# 4547d51f81eb49a68221baf02f0706d8
msgid "For PostgreSQL, this runs the ``psql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:137
# df6c4c67c05347fbaa9b05d9054699fb
msgid "For MySQL, this runs the ``mysql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:138
# 288348f19fe740b7b1438a34c64f8e52
msgid "For SQLite, this runs the ``sqlite3`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:140
# 63960b6bf38c4722b8701e56210ce437
msgid "This command assumes the programs are on your ``PATH`` so that a simple call to the program name (``psql``, ``mysql``, ``sqlite3``) will find the program in the right place. There's no way to specify the location of the program manually."
msgstr ""

#: ../../ref/django-admin.txt:147
# 6459f4f57ea344a4b68b6d4833799474
msgid "The :djadminopt:`--database` option can be used to specify the database onto which to open a shell."
msgstr ""

#: ../../ref/django-admin.txt:151
# 439bede7eece4898b92bac53a7d401ec
msgid "diffsettings"
msgstr ""

#: ../../ref/django-admin.txt:155
# d9eb80e562294ac195aa8545b74cf962
msgid "Displays differences between the current settings file and Django's default settings."
msgstr ""

#: ../../ref/django-admin.txt:158
# 78c1e960b6d746b688c4401a5cd10617
msgid "Settings that don't appear in the defaults are followed by ``\"###\"``. For example, the default settings don't define :setting:`ROOT_URLCONF`, so :setting:`ROOT_URLCONF` is followed by ``\"###\"`` in the output of ``diffsettings``."
msgstr ""

#: ../../ref/django-admin.txt:163
# ebd72b533d8f45eb8b08c17db6ecec56
msgid "Note that Django's default settings live in ``django/conf/global_settings.py``, if you're ever curious to see the full list of defaults."
msgstr ""

#: ../../ref/django-admin.txt:167
# cef7401848674df0858af8f239886f85
msgid "dumpdata <appname appname appname.Model ...>"
msgstr ""

#: ../../ref/django-admin.txt:171
# 0633dfc0a9c349818ff7c9a6d0259f0b
msgid "Outputs to standard output all data in the database associated with the named application(s)."
msgstr ""

#: ../../ref/django-admin.txt:174
# 36103d5ee0dd4aeca040fc4893318a47
msgid "If no application name is provided, all installed applications will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:176
# d0cf3684cec847b5b632196b3a354565
msgid "The output of ``dumpdata`` can be used as input for ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:178
# b60ce8fd8f964d2da636a6efbd9664f2
msgid "Note that ``dumpdata`` uses the default manager on the model for selecting the records to dump. If you're using a :ref:`custom manager <custom-managers>` as the default manager and it filters some of the available records, not all of the objects will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:185
# df246ad54a4d4cdab016e49893dc5a0b
msgid "The :djadminopt:`--all` option may be provided to specify that ``dumpdata`` should use Django's base manager, dumping records which might otherwise be filtered or modified by a custom manager."
msgstr ""

#: ../../ref/django-admin.txt:191
# 8689ab0a86a14866bcde7af093fb1697
msgid "By default, ``dumpdata`` will format its output in JSON, but you can use the ``--format`` option to specify another format. Currently supported formats are listed in :ref:`serialization-formats`."
msgstr ""

#: ../../ref/django-admin.txt:197
# a26b3ead502b421aba0ebd1665e8c69f
msgid "By default, ``dumpdata`` will output all data on a single line. This isn't easy for humans to read, so you can use the ``--indent`` option to pretty-print the output with a number of indentation spaces."
msgstr ""

#: ../../ref/django-admin.txt:201
# 53a375b5edd443158e3775437514ebd1
msgid "The :djadminopt:`--exclude` option may be provided to prevent specific applications from being dumped."
msgstr ""

#: ../../ref/django-admin.txt:206
# 1b74109055904933ba73d13f83e60ab6
msgid "The :djadminopt:`--exclude` option may also be provided to prevent specific models (specified as in the form of ``appname.ModelName``) from being dumped."
msgstr ""

#: ../../ref/django-admin.txt:209
# 92a98aa65a8748f98f367fd6690fa0d4
msgid "In addition to specifying application names, you can provide a list of individual models, in the form of ``appname.Model``. If you specify a model name to ``dumpdata``, the dumped output will be restricted to that model, rather than the entire application. You can also mix application names and model names."
msgstr ""

#: ../../ref/django-admin.txt:217
#: ../../ref/django-admin.txt:305
# 643f61c503fa454eae8e9d677ceef19a
# b43c3d54a2774857a213c31d4662ee65
msgid "The :djadminopt:`--database` option can be used to specify the database onto which the data will be loaded."
msgstr ""

#: ../../ref/django-admin.txt:224
# 4e879bd6771e4816afa8d00d609b6a11
msgid "Use :ref:`natural keys <topics-serialization-natural-keys>` to represent any foreign key and many-to-many relationship with a model that provides a natural key definition. If you are dumping ``contrib.auth`` ``Permission`` objects or ``contrib.contenttypes`` ``ContentType`` objects, you should probably be using this flag."
msgstr ""

#: ../../ref/django-admin.txt:231
# 3a949c027b394126bb56197c126a3017
msgid "flush"
msgstr ""

#: ../../ref/django-admin.txt:235
# c817dc19973c492db7cec073bdcabc6b
msgid "Returns the database to the state it was in immediately after syncdb was executed. This means that all data will be removed from the database, any post-synchronization handlers will be re-executed, and the ``initial_data`` fixture will be re-installed."
msgstr ""

#: ../../ref/django-admin.txt:240
#: ../../ref/django-admin.txt:498
#: ../../ref/django-admin.txt:1066
#: ../../ref/django-admin.txt:1163
# 161ba82ee9394d3fbdd88956f4928894
# 84538740304f4eb1a3b0c9a776699e22
# 72f202d2519f428a89b7196299e5efe5
# e7e47f13992d4612b31b267ca315c3a8
msgid "The :djadminopt:`--noinput` option may be provided to suppress all user prompts."
msgstr ""

#: ../../ref/django-admin.txt:245
# f02c23cb98dd4fcc9c3c11654a8e3b23
msgid "The :djadminopt:`--database` option may be used to specify the database to flush."
msgstr ""

#: ../../ref/django-admin.txt:253
# 065869deaf8d4d95a3ca037c8cc46a77
msgid "Introspects the database tables in the database pointed-to by the :setting:`NAME` setting and outputs a Django model module (a ``models.py`` file) to standard output."
msgstr ""

#: ../../ref/django-admin.txt:257
# 5104d6e049d84bfab8c4fb9585427a3a
msgid "Use this if you have a legacy database with which you'd like to use Django. The script will inspect the database and create a model for each table within it."
msgstr ""

#: ../../ref/django-admin.txt:261
# 9ef3582b7eea4f12a353b037ae5dce22
msgid "As you might expect, the created models will have an attribute for every field in the table. Note that ``inspectdb`` has a few special cases in its field-name output:"
msgstr ""

#: ../../ref/django-admin.txt:265
# 68272442c7e0479884511c8588788de8
msgid "If ``inspectdb`` cannot map a column's type to a model field type, it'll use ``TextField`` and will insert the Python comment ``'This field type is a guess.'`` next to the field in the generated model."
msgstr ""

#: ../../ref/django-admin.txt:270
# 47524c0ea8eb4d1fa638811aa0d8aa76
msgid "If the database column name is a Python reserved word (such as ``'pass'``, ``'class'`` or ``'for'``), ``inspectdb`` will append ``'_field'`` to the attribute name. For example, if a table has a column ``'for'``, the generated model will have a field ``'for_field'``, with the ``db_column`` attribute set to ``'for'``. ``inspectdb`` will insert the Python comment ``'Field renamed because it was a Python reserved word.'`` next to the field."
msgstr ""

#: ../../ref/django-admin.txt:279
# d8d3e4dc2e6f492da756843adf9266f8
msgid "This feature is meant as a shortcut, not as definitive model generation. After you run it, you'll want to look over the generated models yourself to make customizations. In particular, you'll need to rearrange models' order, so that models that refer to other models are ordered properly."
msgstr ""

#: ../../ref/django-admin.txt:284
# ac9662a9a8034e42a1ba4cb67f65f329
msgid "Primary keys are automatically introspected for PostgreSQL, MySQL and SQLite, in which case Django puts in the ``primary_key=True`` where needed."
msgstr ""

#: ../../ref/django-admin.txt:288
# 54f8614a8c9a4c7ba65102531f4c096e
msgid "``inspectdb`` works with PostgreSQL, MySQL and SQLite. Foreign-key detection only works in PostgreSQL and with certain types of MySQL tables."
msgstr ""

#: ../../ref/django-admin.txt:293
# a7e3634bb30e488688241ff1d3c00268
msgid "The :djadminopt:`--database` option may be used to specify the database to introspect."
msgstr ""

#: ../../ref/django-admin.txt:297
# e4a5e84b47f14cf6ac9ec575f2139e75
msgid "loaddata <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:301
# 969d4ef6314f4b79850dc6e6543658c4
msgid "Searches for and loads the contents of the named fixture into the database."
msgstr ""

#: ../../ref/django-admin.txt:309
# 769e1d9910a644e6a5d37c26e26cc178
msgid "What's a \"fixture\"?"
msgstr ""

#: ../../ref/django-admin.txt:311
# 07753b85cc114662b653bde1e75de6df
msgid "A *fixture* is a collection of files that contain the serialized contents of the database. Each fixture has a unique name, and the files that comprise the fixture can be distributed over multiple directories, in multiple applications."
msgstr ""

#: ../../ref/django-admin.txt:315
# 7c15c09b70bf4f528177d25bb7df453e
msgid "Django will search in three locations for fixtures:"
msgstr ""

#: ../../ref/django-admin.txt:317
# c8b26168d1b54707abb0e2197cb615c9
msgid "In the ``fixtures`` directory of every installed application"
msgstr ""

#: ../../ref/django-admin.txt:318
# 5d51eb1823f44a84beb612b27f083aa4
msgid "In any directory named in the :setting:`FIXTURE_DIRS` setting"
msgstr ""

#: ../../ref/django-admin.txt:319
# 3f27e513df9a4bc69a6beafa6775f950
msgid "In the literal path named by the fixture"
msgstr ""

#: ../../ref/django-admin.txt:321
# 0403397114e540f0bb4d8b48dadaea85
msgid "Django will load any and all fixtures it finds in these locations that match the provided fixture names."
msgstr ""

#: ../../ref/django-admin.txt:324
# 396e62ed220d4b2bbb371210e7c001d0
msgid "If the named fixture has a file extension, only fixtures of that type will be loaded. For example::"
msgstr ""

#: ../../ref/django-admin.txt:329
# 401c6a1ce7414b23aa07abf8c1e4ee09
msgid "would only load JSON fixtures called ``mydata``. The fixture extension must correspond to the registered name of a :ref:`serializer <serialization-formats>` (e.g., ``json`` or ``xml``)."
msgstr ""

#: ../../ref/django-admin.txt:333
# 491c3f76c1f742c09aa72df2b0e09af7
msgid "If you omit the extensions, Django will search all available fixture types for a matching fixture. For example::"
msgstr ""

#: ../../ref/django-admin.txt:338
# 79a3cc46f71e4430803535d6b5e3c53c
msgid "would look for any fixture of any fixture type called ``mydata``. If a fixture directory contained ``mydata.json``, that fixture would be loaded as a JSON fixture."
msgstr ""

#: ../../ref/django-admin.txt:342
# c4d73f4a96824e11be70a50c7b80a319
msgid "The fixtures that are named can include directory components. These directories will be included in the search path. For example::"
msgstr ""

#: ../../ref/django-admin.txt:347
# 59dd2e78b0e34083a748205476226ee7
msgid "would search ``<appname>/fixtures/foo/bar/mydata.json`` for each installed application,  ``<dirname>/foo/bar/mydata.json`` for each directory in :setting:`FIXTURE_DIRS`, and the literal path ``foo/bar/mydata.json``."
msgstr ""

#: ../../ref/django-admin.txt:351
# f90ff904523648328dd8def5cf1241e5
msgid "When fixture files are processed, the data is saved to the database as is. Model defined ``save`` methods and ``pre_save`` signals are not called."
msgstr ""

#: ../../ref/django-admin.txt:354
# 5ef703b37ae24617a53d923ed23e6629
msgid "Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction."
msgstr ""

#: ../../ref/django-admin.txt:360
# 826d0f5174224425b13cdeb0f69bed37
msgid "The ``dumpdata`` command can be used to generate input for ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:363
# badac7c3529145c4a596c5490ea0544c
msgid "Compressed fixtures"
msgstr ""

#: ../../ref/django-admin.txt:365
# 52697159cc2e4d34bc3b2224174b8877
msgid "Fixtures may be compressed in ``zip``, ``gz``, or ``bz2`` format. For example::"
msgstr ""

#: ../../ref/django-admin.txt:369
# 8c5a62da504040f4a89610c3fc1fdf26
msgid "would look for any of ``mydata.json``, ``mydata.json.zip``, ``mydata.json.gz``, or ``mydata.json.bz2``. The first file contained within a zip-compressed archive is used."
msgstr ""

#: ../../ref/django-admin.txt:373
# 54a03fc2dba343b99ab2b0f88a95ca30
msgid "Note that if two fixtures with the same name but different fixture type are discovered (for example, if ``mydata.json`` and ``mydata.xml.gz`` were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to ``loaddata`` will be removed from the database."
msgstr ""

#: ../../ref/django-admin.txt:381
# 92001e54a2e7448a9942d2a8ab8ddcb4
msgid "The MyISAM storage engine of MySQL doesn't support transactions or constraints, so if you use MyISAM, you won't get validation of fixture data, or a rollback if multiple transaction files are found."
msgstr ""

#: ../../ref/django-admin.txt:386
# 3854b06ebb3a45e78c3c0eea9a7e2904
msgid "Database-specific fixtures"
msgstr ""

#: ../../ref/django-admin.txt:388
# bb1c4ef8dd0941a2854c9cccbc2971ff
msgid "If you're in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add database identifier into the names of your fixtures."
msgstr ""

#: ../../ref/django-admin.txt:392
# a54f607fb80c4c6e966bda5ea6cfafbb
msgid "For example, if your :setting:`DATABASES` setting has a 'master' database defined, name the fixture ``mydata.master.json`` or ``mydata.master.json.gz`` and the fixture will only be loaded when you specify you want to load data into the ``master`` database."
msgstr ""

#: ../../ref/django-admin.txt:398
# 6be723ea5b434c4c8a51e6c225cabd7b
msgid "makemessages"
msgstr ""

#: ../../ref/django-admin.txt:402
# 86e684c30a0e465da45671ccd27649ff
msgid "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for project and application) directory. After making changes to the messages files you need to compile them with ``compilemessages`` for use with the builtin gettext support. See the :ref:`i18n documentation <how-to-create-language-files>` for details."
msgstr ""

#: ../../ref/django-admin.txt:411
# 07003255ec2b4c56839680a7aae968f9
msgid "Use the ``--all`` or ``-a`` option to update the message files for all available languages."
msgstr ""

#: ../../ref/django-admin.txt:420
# daf99feb794b484fa83f9faa532b0052
msgid "Use the ``--extension`` or ``-e`` option to specify a list of file extensions to examine (default: \".html\", \".txt\")."
msgstr ""

#: ../../ref/django-admin.txt:427
# e05fea444ba24581be5162d2ea9d24dd
msgid "Separate multiple extensions with commas or use -e or --extension multiple times::"
msgstr ""

#: ../../ref/django-admin.txt:431
# d9cd05ae4b494ce49923d6410ad64273
msgid "Use the :djadminopt:`--locale` option to specify the locale to process."
msgstr ""

#: ../../ref/django-admin.txt:439
# 87a8fe7fd94f467f80f9b4fed95a49ab
msgid "Use the ``--domain`` or ``-d`` option to change the domain of the messages files. Currently supported:"
msgstr ""

#: ../../ref/django-admin.txt:442
# e515de7ed8f140caa33bb3a3cce3b0d8
msgid "``django`` for all ``*.py``, ``*.html`` and ``*.txt`` files (default)"
msgstr ""

#: ../../ref/django-admin.txt:443
# 3d5ed49b37254fe38fefd6deb43710b9
msgid "``djangojs`` for ``*.js`` files"
msgstr ""

#: ../../ref/django-admin.txt:449
# ce46440e513f492aba6680375d544c1a
msgid "Use the ``--symlinks`` or ``-s`` option to follow symlinks to directories when looking for new translation strings."
msgstr ""

#: ../../ref/django-admin.txt:458
# abd79763c1254718ac8a71527063c8ff
msgid "Use the ``--ignore`` or ``-i`` option to ignore files or directories matching the given :mod:`glob`-style pattern. Use multiple times to ignore more."
msgstr ""

#: ../../ref/django-admin.txt:461
# 5e7747a3f15d4629a07dc7fc90e1720a
msgid "These patterns are used by default: ``'CVS'``, ``'.*'``, ``'*~'``"
msgstr ""

#: ../../ref/django-admin.txt:469
# 559e24512d414e28a0c181dc214dccd9
msgid "Use the ``--no-default-ignore`` option to disable the default values of :djadminopt:`--ignore`."
msgstr ""

#: ../../ref/django-admin.txt:476
# 63b4a4a0cf79408c9076aa6661dd68f5
msgid "Use the ``--no-wrap`` option to disable breaking long message lines into several lines in language files."
msgstr ""

#: ../../ref/django-admin.txt:483
# 2022521bf27d428dacbacc55048206c4
msgid "Use the ``--no-location`` option to not write '``#: filename:line``' comment lines in language files. Note that using this option makes it harder for technically skilled translators to understand each message's context."
msgstr ""

#: ../../ref/django-admin.txt:488
# cd9afb3c39874ab1b5301c863eb9b43c
msgid "reset <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:496
# 68d0f58bfbc540fd95173861620f6755
msgid "Executes the equivalent of ``sqlreset`` for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:503
# 66b8c88cefb94c5680a2bb841df084cf
msgid "The :djadminopt:`--database` option can be used to specify the alias of the database to reset."
msgstr ""

#: ../../ref/django-admin.txt:507
# 4712277016d74e0188dd2ca332d4e8fd
msgid "runfcgi [options]"
msgstr ""

#: ../../ref/django-admin.txt:511
# a0dbd99f143a4b0899dd64040644f488
msgid "Starts a set of FastCGI processes suitable for use with any Web server that supports the FastCGI protocol. See the :doc:`FastCGI deployment documentation </howto/deployment/fastcgi>` for details. Requires the Python FastCGI module from `flup`_."
msgstr ""

#: ../../ref/django-admin.txt:522
# 525f4eb00fba43f4ac88a909ad7c12b6
msgid "The options accepted by this command are passed to the FastCGI library and don't use the ``'--'`` prefix as is usual for other Django management commands."
msgstr ""

#: ../../ref/django-admin.txt:527
# a3466497eb7e464f9259b66c5e415ec4
msgid "``protocol=PROTOCOL``"
msgstr ""

#: ../../ref/django-admin.txt:529
# 4309fe129ac9453aa3f3554fb80e6c89
msgid "Protocol to use. *PROTOCOL* can be ``fcgi``, ``scgi``, ``ajp``, etc. (default is ``fcgi``)"
msgstr ""

#: ../../ref/django-admin.txt:534
# 590377ce78614f70b842bf11661fedd2
msgid "``host=HOSTNAME``"
msgstr ""

#: ../../ref/django-admin.txt:536
# bd1ce5a92ded4177a548054ed5a6b227
msgid "Hostname to listen on."
msgstr ""

#: ../../ref/django-admin.txt:540
# b11fdbab17784bb8b87d38c77e7047cd
msgid "``port=PORTNUM``"
msgstr ""

#: ../../ref/django-admin.txt:542
# ae2e3e92374b403eb14857a53b2e9025
msgid "Port to listen on."
msgstr ""

#: ../../ref/django-admin.txt:546
# e8bf980447904cea84a0f4fe6fdf9eff
msgid "``socket=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:548
# 28f6b5e0d164415698d2471c8439e51c
msgid "UNIX socket to listen on."
msgstr ""

#: ../../ref/django-admin.txt:552
# b966cd7684bd41f6822abd319126b213
msgid "``method=IMPL``"
msgstr ""

#: ../../ref/django-admin.txt:554
# 0bdfbdca58ae47ed8b4e524384db9fef
msgid "Possible values: ``prefork`` or ``threaded`` (default ``prefork``)"
msgstr ""

#: ../../ref/django-admin.txt:558
# 1e19bc0845204c64acc64c0fed80e8f4
msgid "``maxrequests=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:560
# 34253e4ae8fc4b1bb9c026cdb422f899
msgid "Number of requests a child handles before it is killed and a new child is forked (0 means no limit)."
msgstr ""

#: ../../ref/django-admin.txt:565
# c40cb4b2cd63415ba933b45138665180
msgid "``maxspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:567
# 167dedc63ddd4637a761c82cd8a6e6c6
msgid "Max number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:571
# 7e6798b3fb97415da662c9b326c065af
msgid "``minspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:573
# 8ec2cb798f174e56b1acf39c66b92572
msgid "Min number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:577
# 9959c55c68784183a2b9d5ae04615bf9
msgid "``maxchildren=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:579
# ae2a6bb9ed32497e850a7c64fa43fa34
msgid "Hard limit number of processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:583
# b9498aa3a52d4183915641d1a4d34967
msgid "``daemonize=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:585
# 3419f5b0734743989b2d258d5d2c9946
msgid "Whether to detach from terminal."
msgstr ""

#: ../../ref/django-admin.txt:589
# 5c4b7cca9c9747689672c2e922c3fdf6
msgid "``pidfile=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:591
# 47c3af6a94334adaab5a064035814d41
msgid "Write the spawned process-id to file *FILE*."
msgstr ""

#: ../../ref/django-admin.txt:595
# bfecc553fe834e1ea67a6022e647011c
msgid "``workdir=DIRECTORY``"
msgstr ""

#: ../../ref/django-admin.txt:597
# bfe0e748517149c1b103a7267b5cdb6f
msgid "Change to directory *DIRECTORY* when daemonizing."
msgstr ""

#: ../../ref/django-admin.txt:601
# 1ddf0826713c4be6804974e82818199a
msgid "``debug=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:603
# 7a7d60b003d34a438dc3736bc1afed65
msgid "Set to true to enable flup tracebacks."
msgstr ""

#: ../../ref/django-admin.txt:607
# 3d0594892e9b4b6cbd5b7e776d77af8c
msgid "``outlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:609
# c898c3b7351b40be9bd9925da0a6ee28
msgid "Write stdout to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:613
# 687bf984328c462eb19a6b9ef45fd2e6
msgid "``errlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:615
# abfa74a1e6b84706aa8e4de7a7eb245f
msgid "Write stderr to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:619
# 6fc7bc9a29f34790b227f7010c2687c1
msgid "``umask=UMASK``"
msgstr ""

#: ../../ref/django-admin.txt:621
# 67f77b787da948a0ad04b68262a8b038
msgid "Umask to use when daemonizing. The value is interpeted as an octal number (default value is ``022``)."
msgstr ""

#: ../../ref/django-admin.txt:629
# c3659f672b124433a6cfe3e7df9af96c
msgid "Run a FastCGI server as a daemon and write the spawned PID in a file."
msgstr ""

#: ../../ref/django-admin.txt:632
# 067eee6fe69043d4aabe7afcf1a8cc50
msgid "runserver [port or address:port]"
msgstr ""

#: ../../ref/django-admin.txt:636
# 52bb56e8e8554c10817ea48e59a575d4
msgid "Starts a lightweight development Web server on the local machine. By default, the server runs on port 8000 on the IP address ``127.0.0.1``. You can pass in an IP address and port number explicitly."
msgstr ""

#: ../../ref/django-admin.txt:640
# 3e35e60578dd4c5b96b1532355f76d88
msgid "If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root)."
msgstr ""

#: ../../ref/django-admin.txt:648
# b91f17926e90458a83d3cc5375a560ea
msgid "DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that's how it's gonna stay. We're in the business of making Web frameworks, not Web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)"
msgstr ""

#: ../../ref/django-admin.txt:654
# a4a20e630cc9451490c9aa03961887a5
msgid "The development server automatically reloads Python code for each request, as needed. You don't need to restart the server for code changes to take effect."
msgstr ""

#: ../../ref/django-admin.txt:657
# 478ab0f360ae4c17a95bf384ee323f16
msgid "When you start the server, and each time you change Python code while the server is running, the server will validate all of your installed models. (See the ``validate`` command below.) If the validator finds errors, it will print them to standard output, but it won't stop the server."
msgstr ""

#: ../../ref/django-admin.txt:662
# 04e7cf43b8a34d97b548b42108bee3c9
msgid "You can run as many servers as you want, as long as they're on separate ports. Just execute ``django-admin.py runserver`` more than once."
msgstr ""

#: ../../ref/django-admin.txt:665
# a996f960611047ddac2e6f5bc62bf2ef
msgid "Note that the default IP address, ``127.0.0.1``, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. ``192.168.2.1``) or ``0.0.0.0`` or ``::`` (with IPv6 enabled)."
msgstr ""

#: ../../ref/django-admin.txt:672
# 6c1cbc903397450da9c4d4d7a9fdf4ea
msgid "You can provide an IPv6 address surrounded by brackets (e.g. ``[200a::1]:8000``). This will automatically enable IPv6 support."
msgstr ""

#: ../../ref/django-admin.txt:675
# 6085c64a5e8543d5b27b81166f198aee
msgid "A hostname containing ASCII-only characters can also be used."
msgstr ""

#: ../../ref/django-admin.txt:679
# c6804aa163b34f818bfaec9ea241bda5
msgid "Use the ``--adminmedia`` option to tell Django where to find the various CSS and JavaScript files for the Django admin interface. Normally, the development server serves these files out of the Django source tree magically, but you'd want to use this if you made any changes to those files for your own site."
msgstr ""

#: ../../ref/django-admin.txt:690
# d3aba5d5abd24518b695604822ab149b
msgid "If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled (default in new projects) the :djadmin:`runserver` command will be overriden with an own :djadmin:`runserver<staticfiles-runserver>` command which doesn't have the :djadminopt:`--adminmedia` option due to deprecation."
msgstr ""

#: ../../ref/django-admin.txt:697
# b08c24e84d974bd9af90bb8223f703b4
msgid "Use the ``--noreload`` option to disable the use of the auto-reloader. This means any Python code changes you make while the server is running will *not* take effect if the particular Python modules have already been loaded into memory."
msgstr ""

#: ../../ref/django-admin.txt:710
# c4eee2a867bc44c98febda15d626cf4b
msgid "Use the ``--nothreading`` option to disable the use of threading in the development server."
msgstr ""

#: ../../ref/django-admin.txt:717
# 1b48c518d71f4afca3bb040a5b8aac9d
msgid "Use the ``--ipv6`` (or shorter ``-6``) option to tell Django to use IPv6 for the development server. This changes the default IP address from ``127.0.0.1`` to ``::1``."
msgstr ""

#: ../../ref/django-admin.txt:726
# e642b4f7746d427697bc057041f343b4
msgid "Examples of using different ports and addresses"
msgstr ""

#: ../../ref/django-admin.txt:728
# 7df75c2e3b894050830524423262b594
msgid "Port 8000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:732
# ff928f1e09884926aec1b30c12db4ebf
msgid "Port 8000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:736
# d1c12f1a8dcf4502abad5158408d25bc
msgid "Port 7000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:740
# 1e2614f8210543c3a65f799085cc183e
msgid "Port 7000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:744
# cfd85b1da4fb45259c7bac005f7a2e3c
msgid "Port 8000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:748
# d5d99566240148199041ad87da920eab
msgid "Port 7000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:752
# 3abdb848664842f78914d2ce6403a37a
msgid "Port 7000 on IPv6 address ``2001:0db8:1234:5678::9``::"
msgstr ""

#: ../../ref/django-admin.txt:756
# 529ccc3c500549c481c18625e5a788bb
msgid "Port 8000 on IPv4 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:760
# acf636dd7afb4999b50561e4c4b18a40
msgid "Port 8000 on IPv6 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:765
# 170ad7ac0e09464cb8d6cce94207914d
msgid "Serving static files with the development server"
msgstr ""

#: ../../ref/django-admin.txt:767
# 5df2141302414fed94965cc822aac0e4
msgid "By default, the development server doesn't serve any static files for your site (such as CSS files, images, things under :setting:`MEDIA_URL` and so forth). If you want to configure Django to serve static media, read :doc:`/howto/static-files`."
msgstr ""

#: ../../ref/django-admin.txt:772
# fcfcacc893064a49894779dc415f3eed
msgid "shell"
msgstr ""

#: ../../ref/django-admin.txt:776
# da1b02e3114d48fc80eeb665447ef45e
msgid "Starts the Python interactive interpreter."
msgstr ""

#: ../../ref/django-admin.txt:778
# 657fe8578d9a48d2929778cc257a2afb
msgid "Django will use IPython_ or bpython_ if either is installed. If you have a rich shell installed but want to force use of the \"plain\" Python interpreter, use the ``--plain`` option, like so::"
msgstr ""

#: ../../ref/django-admin.txt:788
# 9212e3be5686426e963e4781394f005a
msgid "sql <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:792
# 846f5d472c634de8878a26bf0c4b2358
msgid "Prints the CREATE TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:796
#: ../../ref/django-admin.txt:811
#: ../../ref/django-admin.txt:823
#: ../../ref/django-admin.txt:849
#: ../../ref/django-admin.txt:862
#: ../../ref/django-admin.txt:874
#: ../../ref/django-admin.txt:890
#: ../../ref/django-admin.txt:908
# 7154cf31523440e995f9c5fd3d065eb6
# 68ac49c94a37493888a1858aa03b58e5
# 382f0408e46f4321894530342ca2cab6
# 8e310e736f2f4aff8c8bd3677165129c
# 2a8b9c84d82f495bb38a461b1cab2b52
# 07f50051d9ae43069648a8ebd363b7d0
# 56e70a2330404ae7bb5b5bc780095f45
# d5d1ec9277364c18ab47e3e12599aea2
msgid "The :djadminopt:`--database` option can be used to specify the database for which to print the SQL."
msgstr ""

#: ../../ref/django-admin.txt:800
# fa55666429574fd5bd790e0a9edc5784
msgid "sqlall <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:804
# 43e5abd88db24eeda4788f010061c988
msgid "Prints the CREATE TABLE and initial-data SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:806
# 414eae7bbfb74ecb8acd84b64fc4241b
msgid "Refer to the description of ``sqlcustom`` for an explanation of how to specify initial data."
msgstr ""

#: ../../ref/django-admin.txt:815
# 357cf3b3492a4c06b1b211127b7bf37f
msgid "sqlclear <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:819
# 1a396a8102d7450a8b749e9cc5e2a9d2
msgid "Prints the DROP TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:827
# 860cbc90e9ba47a9837eae40191bab8f
msgid "sqlcustom <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:831
# 73ff909224794b5fb76ff6ea12d3e56e
msgid "Prints the custom SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:833
# 30d6251b9e8e4bb0a564376daeaa88f1
msgid "For each model in each specified app, this command looks for the file ``<appname>/sql/<modelname>.sql``, where ``<appname>`` is the given app name and ``<modelname>`` is the model's name in lowercase. For example, if you have an app ``news`` that includes a ``Story`` model, ``sqlcustom`` will attempt to read a file ``news/sql/story.sql`` and append it to the output of this command."
msgstr ""

#: ../../ref/django-admin.txt:840
# 707341c1adf343e7abe006a5d5fb31c7
msgid "Each of the SQL files, if given, is expected to contain valid SQL. The SQL files are piped directly into the database after all of the models' table-creation statements have been executed. Use this SQL hook to make any table modifications, or insert any SQL functions into the database."
msgstr ""

#: ../../ref/django-admin.txt:845
# df0f82e6efdd412dab94c567f46b6241
msgid "Note that the order in which the SQL files are processed is undefined."
msgstr ""

#: ../../ref/django-admin.txt:853
# 476ff1d931a243f28f60fcbfc0746f05
msgid "sqlflush"
msgstr ""

#: ../../ref/django-admin.txt:857
# e6981f6c380e4e8b9f3220378ff018cb
msgid "Prints the SQL statements that would be executed for the :djadmin:`flush` command."
msgstr ""

#: ../../ref/django-admin.txt:866
# a2112be9929d47ff9c346d9bcd95c97e
msgid "sqlindexes <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:870
# ca7ad8868ff04a8481fb3e3e9b620958
msgid "Prints the CREATE INDEX SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:878
# 63600b37da9f4e7f89f6029f26957464
msgid "sqlreset <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:886
# be6b4793bf6947189efabe9de575fd85
msgid "Prints the DROP TABLE SQL, then the CREATE TABLE SQL, for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:894
# 0c0a21bf80404f37aad88b1ec1443bc1
msgid "sqlsequencereset <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:898
# beb541da2a074d568c411bba889198da
msgid "Prints the SQL statements for resetting sequences for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:900
# ea2aa5385e17427f8241c50a963181e7
msgid "Sequences are indexes used by some database engines to track the next available number for automatically incremented fields."
msgstr ""

#: ../../ref/django-admin.txt:903
# 9e4f18a4ff87433ba622ee4d3453b469
msgid "Use this command to generate SQL which will fix cases where a sequence is out of sync with its automatically incremented field data."
msgstr ""

#: ../../ref/django-admin.txt:912
# 90e45ae8266b486daf9bc7493297ca4e
msgid "startapp <appname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:916
# c8c94055a08f4019b0bcff0684e3e2ad
msgid "Creates a Django app directory structure for the given app name in the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:921
# ae612a76693f486a82722c5ef66ce497
msgid "By default the directory created contains a ``models.py`` file and other app template files. (See the `source`_ for more details.) If only the app name is given, the app directory will be created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:926
# db90bd9c218645c2a8ad33e7024349ce
msgid "If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:937
# c52a96048ba24ea99c70678b48b59220
msgid "With the ``--template`` option, you can use a custom app template by providing either the path to a directory with the app template file, or a path to a compressed file (``.tar.gz``, ``.tar.bz2``, ``.tgz``, ``.tbz``, ``.zip``) containing the app template files."
msgstr ""

#: ../../ref/django-admin.txt:942
# f4e4da8971cc47b797b485929e5edda6
msgid "Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed archives with the app template files, downloading and extracting them on the fly."
msgstr ""

#: ../../ref/django-admin.txt:946
# 3ad019c98dce49b196d85a00ac22bd1a
msgid "For example, this would look for an app template in the given directory when creating the ``myapp`` app::"
msgstr ""

#: ../../ref/django-admin.txt:953
# b3950c1850dd4ea3b117889373ec68ea
msgid "When Django copies the app template files, it also renders certain files through the template engine: the files whose extensions match the ``--extension`` option (``py`` by default) and the files whose names are passed with the ``--name`` option. The :class:`template context <django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:959
# e82d15527b82434d9bedd9dcf3651499
msgid "Any option passed to the startapp command"
msgstr ""

#: ../../ref/django-admin.txt:960
# fce9b2ffad8b4196ac68e55da249ac2d
msgid "``app_name`` -- the app name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:961
# be92bcc0205c460496510780202b68ef
msgid "``app_directory`` -- the full path of the newly created app"
msgstr ""

#: ../../ref/django-admin.txt:967
# 5151968be7fe432bb19efae378eee773
msgid "When the app template files are rendered with the Django template engine (by default all ``*.py`` files), Django will also replace all stray template variables contained. For example, if one of the Python files contains a docstring explaining a particular feature related to template rendering, it might result in an incorrect example."
msgstr ""

#: ../../ref/django-admin.txt:973
# f0df12481036486295e80925058dc0b3
msgid "To work around this problem, you can use the :ttag:`templatetag` templatetag to \"escape\" the various parts of the template syntax."
msgstr ""

#: ../../ref/django-admin.txt:979
# 3bf06d2128c9481aac7f38f80f2eb9b3
msgid "startproject <projectname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:983
# 67f82b8359ec4ad3bff2992c2b6de6eb
msgid "Creates a Django project directory structure for the given project name in the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:988
# c810071c84e640feaa1d450f5baa64a4
msgid "By default, the new directory contains ``manage.py`` and a project package (containing a ``settings.py`` and other files). See the `template source`_ for details."
msgstr ""

#: ../../ref/django-admin.txt:992
# fc2c58dd7ce04b6a900c085528a3afa8
msgid "If only the project name is given, both the project directory and project package will be named ``<projectname>`` and the project directory will be created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:996
# 012d3de7b66a48968b9ff3ee4fbfe5fb
msgid "If the optional destination is provided, Django will use that existing directory as the project directory, and create ``manage.py`` and the project package within it. Use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:1006
# e6cff5ad36b44a4ea36aa4c6119ccca2
msgid "As with the :djadmin:`startapp` command, the ``--template`` option lets you specify a directory, file path or URL of a custom project template. See the :djadmin:`startapp` documentation for details of supported project template formats."
msgstr ""

#: ../../ref/django-admin.txt:1011
# ca311c1e40d74cd990725935216e00dd
msgid "For example, this would look for a project template in the given directory when creating the ``myproject`` project::"
msgstr ""

#: ../../ref/django-admin.txt:1016
# 70178d4cdde746a8938bbf63e5d855b4
msgid "When Django copies the project template files, it also renders certain files through the template engine: the files whose extensions match the ``--extension`` option (``py`` by default) and the files whose names are passed with the ``--name`` option. The :class:`template context <django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:1022
# bb2c42462abe46019b788777dffc5660
msgid "Any option passed to the startproject command"
msgstr ""

#: ../../ref/django-admin.txt:1023
# 312a28f5ee2245afb2b7dd6166465c84
msgid "``project_name`` -- the project name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:1024
# b246b7a6c3de4f7cabcfbf5ac0ddeab1
msgid "``project_directory`` -- the full path of the newly created project"
msgstr ""

#: ../../ref/django-admin.txt:1025
# 17d04e1749274b0b86d2403a26859880
msgid "``secret_key`` -- a random key for the :setting:`SECRET_KEY` setting"
msgstr ""

#: ../../ref/django-admin.txt:1027
# c0d5fe76ef2f4431bd05a87925a6b029
msgid "Please also see the :ref:`rendering warning <render_warning>` as mentioned for :djadmin:`startapp`."
msgstr ""

#: ../../ref/django-admin.txt:1033
# 6c0d373063eb46b987dde60372023d46
msgid "syncdb"
msgstr ""

#: ../../ref/django-admin.txt:1037
# 5b64345756b64ad18567897588adc746
msgid "Creates the database tables for all apps in :setting:`INSTALLED_APPS` whose tables have not already been created."
msgstr ""

#: ../../ref/django-admin.txt:1040
# 64aac9f7a513438f9844439d0780b3cb
msgid "Use this command when you've added new applications to your project and want to install them in the database. This includes any apps shipped with Django that might be in :setting:`INSTALLED_APPS` by default. When you start a new project, run this command to install the default apps."
msgstr ""

#: ../../ref/django-admin.txt:1047
# 1989f34c06fc40f0a7909df4b38097d1
msgid "``syncdb`` will only create tables for models which have not yet been installed. It will *never* issue ``ALTER TABLE`` statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process."
msgstr ""

#: ../../ref/django-admin.txt:1054
# fbc1134bdcf04b61adf95a6d72bb349e
msgid "If you have made changes to a model and wish to alter the database tables to match, use the ``sql`` command to display the new SQL structure and compare that to your existing table schema to work out the changes."
msgstr ""

#: ../../ref/django-admin.txt:1058
# b61a25c9066441d9a956f0156a617317
msgid "If you're installing the ``django.contrib.auth`` application, ``syncdb`` will give you the option of creating a superuser immediately."
msgstr ""

#: ../../ref/django-admin.txt:1061
# e21a789f82cc4bfb9b9e33ca0f202d33
msgid "``syncdb`` will also search for and install any fixture named ``initial_data`` with an appropriate extension (e.g. ``json`` or ``xml``). See the documentation for ``loaddata`` for details on the specification of fixture data files."
msgstr ""

#: ../../ref/django-admin.txt:1071
# ee63e1ae5adb4611b18396286ef6495d
msgid "The :djadminopt:`--database` option can be used to specify the database to synchronize."
msgstr ""

#: ../../ref/django-admin.txt:1075
# c07489640ad24ee1bb40339acaec061f
msgid "test <app or test identifier>"
msgstr ""

#: ../../ref/django-admin.txt:1079
# 3f8974324e474304aa4c373f1e6001fe
msgid "Runs tests for all installed models. See :doc:`/topics/testing` for more information."
msgstr ""

#: ../../ref/django-admin.txt:1085
# c38dd6e20d4741e0aa113edab740691b
msgid "The ``--failfast`` option can be used to stop running tests and report the failure immediately after a test fails."
msgstr ""

#: ../../ref/django-admin.txt:1091
# b37d807365e942759c622f1780660370
msgid "The ``--testrunner`` option can be used to control the test runner class that is used to execute tests. If this value is provided, it overrides the value provided by the :setting:`TEST_RUNNER` setting."
msgstr ""

#: ../../ref/django-admin.txt:1098
# b1f07017b4cc4de29ce5849f8a60fe99
msgid "The ``--liveserver`` option can be used to override the default address where the live server (used with :class:`~django.test.LiveServerTestCase`) is expected to run from. The default value is ``localhost:8081``."
msgstr ""

#: ../../ref/django-admin.txt:1103
# e440f763c6d847da9dc086c43ec44f0d
msgid "testserver <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:1107
# 113063e0fc1b42f0af9c5e4499d6da63
msgid "Runs a Django development server (as in ``runserver``) using data from the given fixture(s)."
msgstr ""

#: ../../ref/django-admin.txt:1110
# 31e860ff4c7a4777b23ac383926044bd
msgid "For example, this command::"
msgstr ""

#: ../../ref/django-admin.txt:1114
# d33a1013c4374fc283b9bc3fd8d63200
msgid "...would perform the following steps:"
msgstr ""

#: ../../ref/django-admin.txt:1116
# a79b182c207b4ff182360e59a583025a
msgid "Create a test database, as described in :doc:`/topics/testing`."
msgstr ""

#: ../../ref/django-admin.txt:1117
# 702438e9ae7f4c1d8c7ebaa51259783a
msgid "Populate the test database with fixture data from the given fixtures. (For more on fixtures, see the documentation for ``loaddata`` above.)"
msgstr ""

#: ../../ref/django-admin.txt:1119
# af26eb39141c4f0cbb155ea9f73af297
msgid "Runs the Django development server (as in ``runserver``), pointed at this newly created test database instead of your production database."
msgstr ""

#: ../../ref/django-admin.txt:1122
# a4da442ebaa44d5795126ddbd9073836
msgid "This is useful in a number of ways:"
msgstr ""

#: ../../ref/django-admin.txt:1124
# 57d8fdddabec4e348e349aaab01a7b0f
msgid "When you're writing :doc:`unit tests </topics/testing>` of how your views act with certain fixture data, you can use ``testserver`` to interact with the views in a Web browser, manually."
msgstr ""

#: ../../ref/django-admin.txt:1128
# f6d72858021549e991a3349134336833
msgid "Let's say you're developing your Django application and have a \"pristine\" copy of a database that you'd like to interact with. You can dump your database to a fixture (using the ``dumpdata`` command, explained above), then use ``testserver`` to run your Web application with that data. With this arrangement, you have the flexibility of messing up your data in any way, knowing that whatever data changes you're making are only being made to a test database."
msgstr ""

#: ../../ref/django-admin.txt:1136
# 7c1c4b683f81487794ae953c34def380
msgid "Note that this server does *not* automatically detect changes to your Python source code (as ``runserver`` does). It does, however, detect changes to templates."
msgstr ""

#: ../../ref/django-admin.txt:1142
# 0272e65c79fc4ae2b82b0b5e5dabb1fe
msgid "Use ``--addrport`` to specify a different port, or IP address and port, from the default of ``127.0.0.1:8000``. This value follows exactly the same format and serves exactly the same function as the argument to the ``runserver`` command."
msgstr ""

#: ../../ref/django-admin.txt:1148
# ac40784ef7724a08a07fb5de169e73da
msgid "To run the test server on port 7000 with ``fixture1`` and ``fixture2``::"
msgstr ""

#: ../../ref/django-admin.txt:1153
# 3f01c4e97b594caf9ff978386953e0aa
msgid "(The above statements are equivalent. We include both of them to demonstrate that it doesn't matter whether the options come before or after the fixture arguments.)"
msgstr ""

#: ../../ref/django-admin.txt:1157
# 7980aa8afaaa4bff8ebb7d11bff8cb5c
msgid "To run on 1.2.3.4:7000 with a ``test`` fixture::"
msgstr ""

#: ../../ref/django-admin.txt:1167
# 39f0f6c5fc2b437e8fd1c4874ee0da80
msgid "validate"
msgstr ""

#: ../../ref/django-admin.txt:1171
# d3e79f3c58b1415fa1f093918ece17ad
msgid "Validates all installed models (according to the :setting:`INSTALLED_APPS` setting) and prints validation errors to standard output."
msgstr ""

#: ../../ref/django-admin.txt:1175
# 2921b7c9e7e343e6bcb8eb32be69e618
msgid "Commands provided by applications"
msgstr ""

#: ../../ref/django-admin.txt:1177
# f23992d4b3b74064940e1ad41a1108fa
msgid "Some commands are only available when the ``django.contrib`` application that :doc:`implements </howto/custom-management-commands>` them has been :setting:`enabled <INSTALLED_APPS>`. This section describes them grouped by their application."
msgstr ""

#: ../../ref/django-admin.txt:1186
# e577c7796b3f449b807f8bc2d1469be1
msgid "changepassword"
msgstr ""

#: ../../ref/django-admin.txt:1192
#: ../../ref/django-admin.txt:1214
# b1f1e4eb00a2414cac4ad9cbe57150e5
# 29d2d7565b1345d4b36839288b43ef0c
msgid "This command is only available if Django's :doc:`authentication system </topics/auth>` (``django.contrib.auth``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1195
# 40a6f55a02734698a7325447da02ef13
msgid "Allows changing a user's password. It prompts you to enter twice the password of the user given as parameter. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current user."
msgstr ""

#: ../../ref/django-admin.txt:1202
# 58c05776e73a4d4b8dbb12d0855ad542
msgid "Use the ``--database`` option to specify the database to query for the user. If it's not supplied, Django will use the ``default`` database."
msgstr ""

#: ../../ref/django-admin.txt:1210
# 98f6d65af11747fcba3732559564ab0e
msgid "createsuperuser"
msgstr ""

#: ../../ref/django-admin.txt:1217
# 4d80f4fcfe1f4c139d7c6872fa750289
msgid "Creates a superuser account (a user who has all permissions). This is useful if you need to create an initial superuser account but did not do so during ``syncdb``, or if you need to programmatically generate superuser accounts for your site(s)."
msgstr ""

#: ../../ref/django-admin.txt:1222
# 20553fe90073432a8961a8d892ec5e41
msgid "When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it."
msgstr ""

#: ../../ref/django-admin.txt:1230
# 904ba55eced349e28a4d565a24b28bf5
msgid "The username and email address for the new account can be supplied by using the ``--username`` and ``--email`` arguments on the command line. If either of those is not supplied, ``createsuperuser`` will prompt for it when running interactively."
msgstr ""

#: ../../ref/django-admin.txt:1237
# d0cb0b1ae671427caac153a275832d26
msgid "Use the ``--database`` option to specify the database into which the superuser object will be saved."
msgstr ""

#: ../../ref/django-admin.txt:1241
# 1695aef318fd49948e73aa342598e110
msgid "``django.contrib.gis``"
msgstr ""

#: ../../ref/django-admin.txt:1244
# 368a3fb5c3b446c28fc6af51f349100c
msgid "ogrinspect"
msgstr ""

#: ../../ref/django-admin.txt:1246
# a0eb085994534981b289d49d2fe1b491
msgid "This command is only available if :doc:`GeoDjango </ref/contrib/gis/index>` (``django.contrib.gis``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1249
# 42d45d8644224e87b342857691cb4e49
msgid "Please refer to its :djadmin:`description <ogrinspect>` in the GeoDjango documentation."
msgstr ""

#: ../../ref/django-admin.txt:1253
# 84e0ca924b3e4acc8ed9961cdfee371e
msgid "``django.contrib.sitemaps``"
msgstr ""

#: ../../ref/django-admin.txt:1256
# b024d785c18f4ce8b76023becac24aa1
msgid "ping_google"
msgstr ""

#: ../../ref/django-admin.txt:1258
# 9f23a9f075a44592b99563e9c290781d
msgid "This command is only available if the :doc:`Sitemaps framework </ref/contrib/sitemaps>` (``django.contrib.sitemaps``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1261
# bf03ef4a8a6243e7a8ab12eb27d4ddef
msgid "Please refer to its :djadmin:`description <ping_google>` in the Sitemaps documentation."
msgstr ""

#: ../../ref/django-admin.txt:1265
# 957c1a93dd5c41f2aa27e43b5298acc3
msgid "``django.contrib.staticfiles``"
msgstr ""

#: ../../ref/django-admin.txt:1270
#: ../../ref/django-admin.txt:1279
# 9eb0821658e6411ca71e5f9110b1cc35
# 93605b00905442c1b7fb26c0c24a9bb8
msgid "This command is only available if the :doc:`static files application </howto/static-files>` (``django.contrib.staticfiles``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1273
# f3518708aa8c44a9b8857ea2b4140f05
msgid "Please refer to its :djadmin:`description <collectstatic>` in the :doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1282
# 1208f4b97dc445dd8dcf89fe0fe7bd60
msgid "Please refer to its :djadmin:`description <findstatic>` in the :doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1286
# baef9084bbf0421ab489eaa612999f1c
msgid "Default options"
msgstr ""

#: ../../ref/django-admin.txt:1288
# 7a60a0808c60464eb07525ada8290689
msgid "Although some commands may allow their own custom options, every command allows for the following options:"
msgstr ""

#: ../../ref/django-admin.txt:1297
# f30ad2e9efdc4edc8cd3b439526e3ecf
msgid "Adds the given filesystem path to the Python `import search path`_. If this isn't provided, ``django-admin.py`` will use the ``PYTHONPATH`` environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1301
# 7871add0a49c4a8cb3b1b180acdfdf64
msgid "Note that this option is unnecessary in ``manage.py``, because it takes care of setting the Python path for you."
msgstr ""

#: ../../ref/django-admin.txt:1312
# cca42df1d08e4145b796d54936a08986
msgid "Explicitly specifies the settings module to use. The settings module should be in Python package syntax, e.g. ``mysite.settings``. If this isn't provided, ``django-admin.py`` will use the ``DJANGO_SETTINGS_MODULE`` environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1317
# cb0b9ed0ee7a4b8dbe5a683d097ba787
msgid "Note that this option is unnecessary in ``manage.py``, because it uses ``settings.py`` from the current project by default."
msgstr ""

#: ../../ref/django-admin.txt:1326
# f2152192c28d48fb88e4ac81978ba984
msgid "By default, ``django-admin.py`` will show a simple error message whenever an error occurs. If you specify ``--traceback``, ``django-admin.py``  will output a full stack trace whenever an exception is raised."
msgstr ""

#: ../../ref/django-admin.txt:1336
# ff8bcff35a5e461e996419f1eb5c1393
msgid "Use ``--verbosity`` to specify the amount of notification and debug information that ``django-admin.py`` should print to the console."
msgstr ""

#: ../../ref/django-admin.txt:1339
# 649ad85dbf0941b3beed426758bb72eb
msgid "``0`` means no output."
msgstr ""

#: ../../ref/django-admin.txt:1340
# 2613b54b75d64b27981aaee74fde82a6
msgid "``1`` means normal output (default)."
msgstr ""

#: ../../ref/django-admin.txt:1341
# 32a3df18d0a84e0196d23841ea913802
msgid "``2`` means verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1342
# 1707adb0b1174e8b9807ca5b46cfcb50
msgid "``3`` means *very* verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1345
# 194096e084b94c46878c3d303e6b7d13
msgid "Common options"
msgstr ""

#: ../../ref/django-admin.txt:1347
# 42580b4e776344c3add45454751b13f5
msgid "The following options are not available on every command, but they are common to a number of commands."
msgstr ""

#: ../../ref/django-admin.txt:1354
# ec81bc1a7d684e438456fbd2202beb55
msgid "Used to specify the database on which a command will operate. If not specified, this option will default to an alias of ``default``."
msgstr ""

#: ../../ref/django-admin.txt:1357
# 815a4d876faa4d30a23fe485e264582d
msgid "For example, to dump data from the database with the alias ``master``::"
msgstr ""

#: ../../ref/django-admin.txt:1363
# 88a523766a4d494f83d02a6c924261eb
msgid "Exclude a specific application from the applications whose contents is output. For example, to specifically exclude the `auth` application from the output of dumpdata, you would call::"
msgstr ""

#: ../../ref/django-admin.txt:1369
# b6fca35d74814b8488fc043ada5a6301
msgid "If you want to exclude multiple applications, use multiple ``--exclude`` directives::"
msgstr ""

#: ../../ref/django-admin.txt:1376
# 775c50869d874cea89f234f32c0dcfb2
msgid "Use the ``--locale`` or ``-l`` option to specify the locale to process. If not provided all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:1381
# a359c71d94b54c5ba3ddd49c0b2efc66
msgid "Use the ``--noinput`` option to suppress all user prompting, such as \"Are you sure?\" confirmation messages. This is useful if ``django-admin.py`` is being executed as an unattended, automated script."
msgstr ""

#: ../../ref/django-admin.txt:1386
# 3bcadfe787214fb1ba93f3e95173e195
msgid "Extra niceties"
msgstr ""

#: ../../ref/django-admin.txt:1391
# 925baee6ff6c460cb172d4496b996c87
msgid "Syntax coloring"
msgstr ""

#: ../../ref/django-admin.txt:1393
# 6167835959884bb394ec9d6f5b98f90f
msgid "The ``django-admin.py`` / ``manage.py`` commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won't use the color codes if you're piping the command's output to another program."
msgstr ""

#: ../../ref/django-admin.txt:1398
# 3b92685d2fc142ce9ee3927d1ba68279
msgid "The colors used for syntax highlighting can be customized. Django ships with three color palettes:"
msgstr ""

#: ../../ref/django-admin.txt:1401
# f4ebe4f0a9214b969cf8a802e11069e2
msgid "``dark``, suited to terminals that show white text on a black background. This is the default palette."
msgstr ""

#: ../../ref/django-admin.txt:1404
# 071ac15c99054a75a9cda37073e0a354
msgid "``light``, suited to terminals that show black text on a white background."
msgstr ""

#: ../../ref/django-admin.txt:1407
# b861df833d844232aecad1ae0b069c2b
msgid "``nocolor``, which disables syntax highlighting."
msgstr ""

#: ../../ref/django-admin.txt:1409
# 7d6d9cb3ed00407a9253ccf8e886e95d
msgid "You select a palette by setting a ``DJANGO_COLORS`` environment variable to specify the palette you want to use. For example, to specify the ``light`` palette under a Unix or OS/X BASH shell, you would run the following at a command prompt::"
msgstr ""

#: ../../ref/django-admin.txt:1416
# 410649bd92094152a5827ffd34340e30
msgid "You can also customize the colors that are used. Django specifies a number of roles in which color is used:"
msgstr ""

#: ../../ref/django-admin.txt:1419
# 7c4fd07e9f7240559d579022633804f5
msgid "``error`` - A major error."
msgstr ""

#: ../../ref/django-admin.txt:1420
# e6b01b1d834f4cfc8f27bb38a4121b72
msgid "``notice`` - A minor error."
msgstr ""

#: ../../ref/django-admin.txt:1421
# 027c557daee54cf08e150cc2ec80990a
msgid "``sql_field`` - The name of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1422
# 6e159c029ae9442491a3031180b934c6
msgid "``sql_coltype`` - The type of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1423
# 5b64bc9d318748ae9c18d89056c63280
msgid "``sql_keyword`` - A SQL keyword."
msgstr ""

#: ../../ref/django-admin.txt:1424
# 8b77411c4cba4abe9f66b3608336a5c4
msgid "``sql_table`` - The name of a model in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1425
# 003b45a180b745339a6b2c70cb3c105d
msgid "``http_info`` - A 1XX HTTP Informational server response."
msgstr ""

#: ../../ref/django-admin.txt:1426
# f7183cd518da44d0a0ca174e01d3ad31
msgid "``http_success`` - A 2XX HTTP Success server response."
msgstr ""

#: ../../ref/django-admin.txt:1427
# d712013388d042ee96fc1780386aac3f
msgid "``http_not_modified`` - A 304 HTTP Not Modified server response."
msgstr ""

#: ../../ref/django-admin.txt:1428
# 191bcd67fbc1449787f01686c84c7cf7
msgid "``http_redirect`` - A 3XX HTTP Redirect server response other than 304."
msgstr ""

#: ../../ref/django-admin.txt:1429
# 3e87cad768534c06a1796affd29b084b
msgid "``http_not_found`` - A 404 HTTP Not Found server response."
msgstr ""

#: ../../ref/django-admin.txt:1430
# 93d6bb0760cc4e129d6be8ae788c821d
msgid "``http_bad_request`` - A 4XX HTTP Bad Request server response other than 404."
msgstr ""

#: ../../ref/django-admin.txt:1431
# fa2c29e0cb6f49cd886aac1f210b252d
msgid "``http_server_error`` - A 5XX HTTP Server Error response."
msgstr ""

#: ../../ref/django-admin.txt:1433
# a62e81a827f3405d9c9762726f3827ad
msgid "Each of these roles can be assigned a specific foreground and background color, from the following list:"
msgstr ""

#: ../../ref/django-admin.txt:1436
# 26bc8e236b5b4d9ca06250ee6b295ba9
msgid "``black``"
msgstr ""

#: ../../ref/django-admin.txt:1437
# be8bae32e18c4203b612f27a01c50531
msgid "``red``"
msgstr ""

#: ../../ref/django-admin.txt:1438
# 0023befbe4614723832b3c716bc950f9
msgid "``green``"
msgstr ""

#: ../../ref/django-admin.txt:1439
# 3466e3ecb791435e8e54ddff0905360b
msgid "``yellow``"
msgstr ""

#: ../../ref/django-admin.txt:1440
# de0e79509398489fb1bf67a389e68089
msgid "``blue``"
msgstr ""

#: ../../ref/django-admin.txt:1441
# ac4ef4d447474b75a11a52b90ff87c47
msgid "``magenta``"
msgstr ""

#: ../../ref/django-admin.txt:1442
# 455e725fa09143fd8f5c3cc4b3927a50
msgid "``cyan``"
msgstr ""

#: ../../ref/django-admin.txt:1443
# 8a594392d6c84ce4a488f874cd6b753d
msgid "``white``"
msgstr ""

#: ../../ref/django-admin.txt:1445
# 3f3043ddfa30494082c7c17fd14ccc38
msgid "Each of these colors can then be modified by using the following display options:"
msgstr ""

#: ../../ref/django-admin.txt:1448
# 3906f421c3fa4defa71280ced9ba7d3e
msgid "``bold``"
msgstr ""

#: ../../ref/django-admin.txt:1449
# 01a9f2ed093742958d11e96a02c7e16a
msgid "``underscore``"
msgstr ""

#: ../../ref/django-admin.txt:1450
# 622fadfcc5774e0b90f2b66af31c92dc
msgid "``blink``"
msgstr ""

#: ../../ref/django-admin.txt:1451
#: ../../ref/signals.txt:297
#: ../../ref/signals.txt:323
# cf278210ea69405eac4e552b9763ae59
# 0404d80bb878420eb65648c9c5aacbd7
# 2d922c0035094fd4b6f50d98c4ff4b57
msgid "``reverse``"
msgstr ""

#: ../../ref/django-admin.txt:1452
# 5658758e531640f5a17a09886f435ccf
msgid "``conceal``"
msgstr ""

#: ../../ref/django-admin.txt:1454
# bf05e15ebae9464baba279d2478ca639
msgid "A color specification follows one of the following patterns:"
msgstr ""

#: ../../ref/django-admin.txt:1456
# ed4dad96d3c94367b33a8e9ff80c868b
msgid "``role=fg``"
msgstr ""

#: ../../ref/django-admin.txt:1457
# bafb30c1208b4960b226e0a56cfcb13d
msgid "``role=fg/bg``"
msgstr ""

#: ../../ref/django-admin.txt:1458
# 62107b2160ec4a969059d3bdb5c2c827
msgid "``role=fg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1459
# ed630050f6cf4b3090b958ef7875b530
msgid "``role=fg/bg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1461
# ab90b8fb31954820a0ff791b5e6b1c63
msgid "where ``role`` is the name of a valid color role, ``fg`` is the foreground color, ``bg`` is the background color and each ``option`` is one of the color modifying options. Multiple color specifications are then separated by semicolon. For example::"
msgstr ""

#: ../../ref/django-admin.txt:1468
# f44dc78987f04a2eb0a39171c4019a5a
msgid "would specify that errors be displayed using blinking yellow on blue, and notices displayed using magenta. All other color roles would be left uncolored."
msgstr ""

#: ../../ref/django-admin.txt:1472
# 6d8bb537be6b47109855e5742974c109
msgid "Colors can also be specified by extending a base palette. If you put a palette name in a color specification, all the colors implied by that palette will be loaded. So::"
msgstr ""

#: ../../ref/django-admin.txt:1478
# a7afcbb9c55744d688601053d039213a
msgid "would specify the use of all the colors in the light color palette, *except* for the colors for errors and notices which would be overridden as specified."
msgstr ""

#: ../../ref/django-admin.txt:1483
# 3540dc2096fa44f7acb662b4f2dc118c
msgid "Bash completion"
msgstr ""

#: ../../ref/django-admin.txt:1485
# c0ec0b17f9704747bf06a1cabbc41352
msgid "If you use the Bash shell, consider installing the Django bash completion script, which lives in ``extras/django_bash_completion`` in the Django distribution. It enables tab-completion of ``django-admin.py`` and ``manage.py`` commands, so you can, for instance..."
msgstr ""

#: ../../ref/django-admin.txt:1490
# d3ef20b9fcdc41938822bd3eef7060ac
msgid "Type ``django-admin.py``."
msgstr ""

#: ../../ref/django-admin.txt:1491
# a888cde5d3614f6489f341c7b5c1b502
msgid "Press [TAB] to see all available options."
msgstr ""

#: ../../ref/django-admin.txt:1492
# 33ef7cb71eb34c32a95051287a8276e7
msgid "Type ``sql``, then [TAB], to see all available options whose names start with ``sql``."
msgstr ""

#: ../../ref/django-admin.txt:1496
# 49a68414aac841aa9ef49f8e7e0891bf
msgid "See :doc:`/howto/custom-management-commands` for how to add customized actions."
msgstr ""

#: ../../ref/django-admin.txt:1501
# 478a66333b09452ca1e22d5590cfb3ee
msgid "Running management commands from your code"
msgstr ""

#: ../../ref/django-admin.txt:1507
# 131ee616f9ef4631b95b2320815df3d7
msgid "To call a management command from code use ``call_command``."
msgstr ""

#: ../../ref/django-admin.txt:1510
# 4a1285a4007e49b0a8ff2739c8ec2117
msgid "the name of the command to call."
msgstr ""

#: ../../ref/django-admin.txt:1513
# d2fe53cfbe554e5cbe9d403b0bbbc418
msgid "a list of arguments accepted by the command."
msgstr ""

#: ../../ref/django-admin.txt:1516
# 12120973d6e1441b8bc1f96bda30a2e3
msgid "named options accepted on the command-line."
msgstr ""

#: ../../ref/django-admin.txt:1518
#: ../../ref/models/querysets.txt:401
#: ../../ref/models/querysets.txt:580
#: ../../ref/models/querysets.txt:609
#: ../../ref/models/querysets.txt:1657
# 62ceaee10a1d48619b4c150df72e39b2
# 2b68205a20304238a70540621230302c
# 60bd647012424a2e925b040ca79d43bc
# 85ba0fa7edd446a1aec0bb1436a2b445
# 042d11fd6ef64842b8352f5e0b86b851
msgid "Examples::"
msgstr ""

#: ../../ref/exceptions.txt:3
# 4d5756eab1d043db98090ad0084f9ff8
msgid "Django Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:6
# 2e8b1afd4fb741eaa9fbfba0e1ea856c
msgid "Django raises some Django specific exceptions as well as many standard Python exceptions."
msgstr ""

#: ../../ref/exceptions.txt:10
# bc867a5d2e0043ab95b5682e054f20a8
msgid "Django-specific Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:16
# fccd1d79b869439596638942a10e3d4b
msgid "ObjectDoesNotExist and DoesNotExist"
msgstr ""

#: ../../ref/exceptions.txt:20
# ab80b5df637041909bf41702ed0a66ee
msgid "The :exc:`DoesNotExist` exception is raised when an object is not found for the given parameters of a query."
msgstr ""

#: ../../ref/exceptions.txt:23
# 8143cad412224b459940cef2fcce3061
msgid ":exc:`ObjectDoesNotExist` is defined in :mod:`django.core.exceptions`. :exc:`DoesNotExist` is a subclass of the base :exc:`ObjectDoesNotExist` exception that is provided on every model class as a way of identifying the specific type of object that could not be found."
msgstr ""

#: ../../ref/exceptions.txt:28
# 46ca36dc5b77456ab603d3647e1e773b
msgid "See :meth:`~django.db.models.query.QuerySet.get()` for further information on :exc:`ObjectDoesNotExist` and :exc:`DoesNotExist`."
msgstr ""

#: ../../ref/exceptions.txt:32
# 57132038d8c94028aca72ba21628b54d
msgid "MultipleObjectsReturned"
msgstr ""

#: ../../ref/exceptions.txt:35
# 5173699b8eaf4ee8a0dd73e39a6d6a2a
msgid "The :exc:`MultipleObjectsReturned` exception is raised by a query if only one object is expected, but multiple objects are returned. A base version of this exception is provided in :mod:`django.core.exceptions`; each model class contains a subclassed version that can be used to identify the specific object type that has returned multiple objects."
msgstr ""

#: ../../ref/exceptions.txt:41
# 0044f3dbea9a44d19f56b3a4df4f1b64
msgid "See :meth:`~django.db.models.query.QuerySet.get()` for further information."
msgstr ""

#: ../../ref/exceptions.txt:44
# 66df59472df047acb114fe894970bac9
msgid "SuspiciousOperation"
msgstr ""

#: ../../ref/exceptions.txt:47
# 60768463f98d4bd79f977244b6e79f7e
msgid "The :exc:`SuspiciousOperation` exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie."
msgstr ""

#: ../../ref/exceptions.txt:52
# 2413e4b869a34cb6953c02b45264ae58
msgid "PermissionDenied"
msgstr ""

#: ../../ref/exceptions.txt:55
# 29c059f883e54796a0d5d684631b9655
msgid "The :exc:`PermissionDenied` exception is raised when a user does not have permission to perform the action requested."
msgstr ""

#: ../../ref/exceptions.txt:59
# a506f165604449ccb297cf76fae41e45
msgid "ViewDoesNotExist"
msgstr ""

#: ../../ref/exceptions.txt:62
# acf305a1e45a4b2f8f6bb403643b7182
msgid "The :exc:`ViewDoesNotExist` exception is raised by :mod:`django.core.urlresolvers` when a requested view does not exist."
msgstr ""

#: ../../ref/exceptions.txt:66
# 16dd3c9c5c3e4d5da4aa51471946ed7d
msgid "MiddlewareNotUsed"
msgstr ""

#: ../../ref/exceptions.txt:69
# 556a86fee22c4c47becd26c825458c5f
msgid "The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not used in the server configuration."
msgstr ""

#: ../../ref/exceptions.txt:73
# ccb9bfd86d5a466cbf670864fc7f93b3
msgid "ImproperlyConfigured"
msgstr ""

#: ../../ref/exceptions.txt:76
# 537990dc2e63471394891876531f1b82
msgid "The :exc:`ImproperlyConfigured` exception is raised when Django is somehow improperly configured -- for example, if a value in ``settings.py`` is incorrect or unparseable."
msgstr ""

#: ../../ref/exceptions.txt:81
# 1df56ea7a21b475093b5b9d1384f12d4
msgid "FieldError"
msgstr ""

#: ../../ref/exceptions.txt:84
# 38c3f0ab3e9c483c98f39626efaba1b1
msgid "The :exc:`FieldError` exception is raised when there is a problem with a model field. This can happen for several reasons:"
msgstr ""

#: ../../ref/exceptions.txt:87
# 16b161e9f0d449baa5ff2d1d08aafdba
msgid "A field in a model clashes with a field of the same name from an abstract base class"
msgstr ""

#: ../../ref/exceptions.txt:89
# 527202f52b1d4fee8086415c5940c8db
msgid "An infinite loop is caused by ordering"
msgstr ""

#: ../../ref/exceptions.txt:90
# 07456f36262146e6b287b5e61e114eab
msgid "A keyword cannot be parsed from the filter parameters"
msgstr ""

#: ../../ref/exceptions.txt:91
# 536372eb407a4eefaab6635ff1b5f1d8
msgid "A field cannot be determined from a keyword in the query parameters"
msgstr ""

#: ../../ref/exceptions.txt:93
# 7b4467628ef44e4492bdffa9bd71b9e6
msgid "A join is not permitted on the specified field"
msgstr ""

#: ../../ref/exceptions.txt:94
# acbf478bcd9b472990de240e1241d060
msgid "A field name is invalid"
msgstr ""

#: ../../ref/exceptions.txt:95
# e7cbc1f87ee24192b578ea32a0ea3053
msgid "A query contains invalid order_by arguments"
msgstr ""

#: ../../ref/exceptions.txt:98
# 04d8ee4df2b6407597cf4a75271c4f79
msgid "ValidationError"
msgstr ""

#: ../../ref/exceptions.txt:101
# 6d598519292d486b84f578644fdfdf3d
msgid "The :exc:`ValidationError` exception is raised when data fails form or model field validation. For more information about validation, see :doc:`Form and Field Validation </ref/forms/validation>`, :ref:`Model Field Validation <validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""

#: ../../ref/exceptions.txt:110
# 181aad157383476c8a3e01725890aead
msgid "NoReverseMatch"
msgstr ""

#: ../../ref/exceptions.txt:113
# 9373534b34fb4a1d924e97de27311989
msgid "The :exc:`NoReverseMatch` exception is raised by :mod:`django.core.urlresolvers` when a matching URL in your URLconf cannot be identified based on the parameters supplied."
msgstr ""

#: ../../ref/exceptions.txt:120
# 312ccfd741284b50bce5eeac75247ca7
msgid "Database Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:122
# 6cf5372cd8ee403eb0c2afcd4e015959
msgid "Django wraps the standard database exceptions :exc:`DatabaseError` and :exc:`IntegrityError` so that your Django code has a guaranteed common implementation of these classes. These database exceptions are provided in :mod:`django.db`."
msgstr ""

#: ../../ref/exceptions.txt:130
# 38175c4ed4304593ae9fdbbfdb96c5fd
msgid "The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See :pep:`249`, the Python Database API Specification v2.0, for further information."
msgstr ""

#: ../../ref/exceptions.txt:137
# 5e367d7824d0418cb2f6da0656f99da0
msgid "Transaction Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:141
# a31192e9cb0043048e66651491f8e3bd
msgid "The :exc:`TransactionManagementError` is raised for any and all problems related to database transactions. It is available from :mod:`django.db.transaction`."
msgstr ""

#: ../../ref/exceptions.txt:146
# de512268dc6648669575b5abe666216b
msgid "Python Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:148
# f9761e4c772f4c93b7c2d80111851f37
msgid "Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the built-in :mod:`exceptions`."
msgstr ""

#: ../../ref/files/file.txt:2
# 12eeb6fc21094753b95c1fd1f6ed6ee2
msgid "The ``File`` object"
msgstr ""

#: ../../ref/files/file.txt:4
# ab63b77b01af48f68120c52dad370fad
msgid "The :mod:`django.core.files` module and its submodules contain built-in classes for basic file handling in Django."
msgstr ""

#: ../../ref/files/file.txt:10
# 102ba4227af545a2b87a068897759cb5
msgid "The ``File`` Class"
msgstr ""

#: ../../ref/files/file.txt:14
# aa2abf83909642c992f75a0180bcb012
msgid "The :class:`File` is a thin wrapper around Python's built-in file object with some Django-specific additions. Internally, Django uses this class any time it needs to represent a file."
msgstr ""

#: ../../ref/files/file.txt:18
# b3d4174b23584000b367cd97d1121388
msgid ":class:`File` objects have the following attributes and methods:"
msgstr ""

#: ../../ref/files/file.txt:22
# d083a6dfdb2142f1977a39f6db6eb819
msgid "The name of file including the relative path from :setting:`MEDIA_ROOT`."
msgstr ""

#: ../../ref/files/file.txt:27
# ed7783673e71467e935fa48c268647eb
msgid "The size of the file in bytes."
msgstr ""

#: ../../ref/files/file.txt:31
# d366b847aa2048fb99b9bd2835d2032b
msgid "The underlying Python ``file`` object passed to :class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/file.txt:36
# 1b5b2a0aad41422cb7f3ba22c2b37da2
msgid "The read/write mode for the file."
msgstr ""

#: ../../ref/files/file.txt:40
# 560ca4c43e554564b4f160e6605c9b60
msgid "Open or reopen the file (which by definition also does ``File.seek(0)``). The ``mode`` argument allows the same values as Python's standard ``open()``."
msgstr ""

#: ../../ref/files/file.txt:44
# 91136fdc0ab6491091f5ef7a120f5075
msgid "When reopening a file, ``mode`` will override whatever mode the file was originally opened with; ``None`` means to reopen with the original mode."
msgstr ""

#: ../../ref/files/file.txt:50
# 53a2963025854c138dc6a1c0f96006cf
msgid "Read content from the file. The optional ``size`` is the number of bytes to read; if not specified, the file will be read to the end."
msgstr ""

#: ../../ref/files/file.txt:55
# cafeb5959d2f42a8b57409914debc972
msgid "Iterate over the file yielding one line at a time."
msgstr ""

#: ../../ref/files/file.txt:59
# e2d2d4b25caa4f0aba92e86683cd563e
msgid "Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` defaults to 64 KB."
msgstr ""

#: ../../ref/files/file.txt:62
# b39d799791624c359143508a05b3e1de
msgid "This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory."
msgstr ""

#: ../../ref/files/file.txt:67
# 668687aea41045f7a928e9faa99c61c1
msgid "Returns ``True`` if the file is large enough to require multiple chunks to access all of its content give some ``chunk_size``."
msgstr ""

#: ../../ref/files/file.txt:72
# b84c82707bd944eab18a9b7748d36c79
msgid "Writes the specified content string to the file. Depending on the storage system behind the scenes, this content might not be fully committed until ``close()`` is called on the file."
msgstr ""

#: ../../ref/files/file.txt:78
# 60a37eb6186740d3ba382e2554d35879
msgid "Close the file."
msgstr ""

#: ../../ref/files/file.txt:80
# 47e81f1675cf4e4da2f486b2b862dab5
msgid "In addition to the listed methods, :class:`~django.core.files.File` exposes the following attributes and methods of the underlying ``file`` object: ``encoding``, ``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, ``readlines``, ``seek``, ``softspace``, ``tell``, ``truncate``, ``writelines``, ``xreadlines``."
msgstr ""

#: ../../ref/files/file.txt:89
# e331e5224af04e81b518a4c25485e07d
msgid "The ``ContentFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:93
# 2911738a0c9148ce95c723160f2bf26a
msgid "The ``ContentFile`` class inherits from :class:`~django.core.files.File`, but unlike :class:`~django.core.files.File` it operates on string content, rather than an actual file. For example::"
msgstr ""

#: ../../ref/files/file.txt:105
# 4d547c5f12bd4f99a525ac86a03e01ea
msgid "The ``ImageFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:109
# f19a00cf4ecf48d6891724e4414a42ca
msgid "Django provides a built-in class specifically for images. :class:`django.core.files.images.ImageFile` inherits all the attributes and methods of :class:`~django.core.files.File`, and additionally provides the following:"
msgstr ""

#: ../../ref/files/file.txt:116
# 5f6c3a8939ec4ee6bcd917e3eea9ad77
msgid "Width of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:120
# a381ab2bbe5d4c2e8f8544be4b33dbf5
msgid "Height of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:125
# 35459f42f3684f7b8bfc03b99fb2cc4b
msgid "Additional methods on files attached to objects"
msgstr ""

#: ../../ref/files/file.txt:127
# 95466db8063f49958ab3a379de73debf
msgid "Any :class:`File` that's associated with an object (as with ``Car.photo``, below) will also have a couple of extra methods:"
msgstr ""

#: ../../ref/files/file.txt:132
# e478b54fcf6740669e558496175e925b
msgid "Saves a new file with the file name and contents provided. This will not replace the existing file, but will create a new file and update the object to point to it. If ``save`` is ``True``, the model's ``save()`` method will be called once the file is saved. That is, these two lines::"
msgstr ""

#: ../../ref/files/file.txt:140
# c1e2041f2c4047bb875e01479473a3f0
msgid "are the same as this one line::"
msgstr ""

#: ../../ref/files/file.txt:144
# eb449e7235944fc4beeff1e594802641
msgid "Note that the ``content`` argument must be an instance of either :class:`File` or of a subclass of :class:`File`, such as :class:`ContentFile`."
msgstr ""

#: ../../ref/files/file.txt:150
# 9dc1d4fd629345b4b5c3efe9279b1036
msgid "Removes the file from the model instance and deletes the underlying file. If ``save`` is ``True``, the model's ``save()`` method will be called once the file is deleted."
msgstr ""

#: ../../ref/files/index.txt:3
# 84cba62ac1074d5489cc853ebf41571e
msgid "File handling"
msgstr ""

#: ../../ref/files/storage.txt:2
# 4a65677087db402890a0d714d289be66
msgid "File storage API"
msgstr ""

#: ../../ref/files/storage.txt:7
# 8b8ca9fdf0ab43d2bc9a7bb971207fe7
msgid "Getting the current storage class"
msgstr ""

#: ../../ref/files/storage.txt:9
# 43735235aca24ab19f552e197a1bc450
msgid "Django provides two convenient ways to access the current storage class:"
msgstr ""

#: ../../ref/files/storage.txt:13
# cf5194c0f8b843ff8bc6454d6c5e742b
msgid ":class:`~django.core.files.storage.DefaultStorage` provides lazy access to the current default storage system as defined by :setting:`DEFAULT_FILE_STORAGE`. :class:`DefaultStorage` uses :func:`~django.core.files.storage.get_storage_class` internally."
msgstr ""

#: ../../ref/files/storage.txt:20
# 14950c35ad2247d69fa6d502ef154853
msgid "Returns a class or module which implements the storage API."
msgstr ""

#: ../../ref/files/storage.txt:22
# 875e493ff5024c49b5b9764c25ad7228
msgid "When called without the ``import_path`` parameter ``get_storage_class`` will return the current default storage system as defined by :setting:`DEFAULT_FILE_STORAGE`. If ``import_path`` is provided, ``get_storage_class`` will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful."
msgstr ""

#: ../../ref/files/storage.txt:30
# e51c94c280cf470390fc1dee2ce6fbc7
msgid "The FileSystemStorage Class"
msgstr ""

#: ../../ref/files/storage.txt:34
# 512fbe90024c474a8cb94729736d467e
msgid "The :class:`~django.core.files.storage.FileSystemStorage` class implements basic file storage on a local filesystem. It inherits from :class:`~django.core.files.storage.Storage` and provides implementations for all the public methods thereof."
msgstr ""

#: ../../ref/files/storage.txt:41
# 7cf72e94e08a4f95afff906678f97ae3
msgid "The :class:`FileSystemStorage.delete` method will not raise raise an exception if the given file name does not exist."
msgstr ""

#: ../../ref/files/storage.txt:45
# c186915d7df34c97a21688f9c356df13
msgid "The Storage Class"
msgstr ""

#: ../../ref/files/storage.txt:49
# 68674c59436a483f8a8f90d63b868563
msgid "The :class:`~django.core.files.storage.Storage` class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary."
msgstr ""

#: ../../ref/files/storage.txt:58
# 11eab1012a4e4ed78afd5e2a9cc1e8ca
msgid "Returns a ``datetime`` object containing the last accessed time of the file. For storage systems that aren't able to return the last accessed time this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:66
# 882950b73c7549debda9258eb2aaa9bb
msgid "Returns a ``datetime`` object containing the creation time of the file. For storage systems that aren't able to return the creation time this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:72
# d46b281182234438be62b1e224c98205
msgid "Deletes the file referenced by ``name``. If deletion is not supported on the targest storage system this will raise ``NotImplementedError`` instead"
msgstr ""

#: ../../ref/files/storage.txt:78
# 7eaabd844f10419995b21061d4381e8f
msgid "Returns ``True`` if a file referenced by the given name already exists in the storage system, or ``False`` if the name is available for a new file."
msgstr ""

#: ../../ref/files/storage.txt:84
# 146ce124e31a4fe59f9baab14b7dea15
msgid "Returns a filename based on the ``name`` parameter that's free and available for new content to be written to on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:91
# ae900cae0b80407fa9071a4e04dfb5e3
msgid "Returns a filename based on the ``name`` parameter that's suitable for use on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:96
# 752955de5f0f4c4abd8f1e6df6bc2791
msgid "Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren't able to provide such a listing, this will raise a ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:105
# bc54a68dbf354556a3b44d983fb88669
msgid "Returns a ``datetime`` object containing the last modified time. For storage systems that aren't able to return the last modified time, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:111
# 496909e8448444039e0d4d79f1b455d9
msgid "Opens the file given by ``name``. Note that although the returned file is guaranteed to be a ``File`` object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned."
msgstr ""

#: ../../ref/files/storage.txt:118
# cb3b31e3e2f048aba55501f2287fbc3f
msgid "The local filesystem path where the file can be opened using Python's standard ``open()``. For storage systems that aren't accessible from the local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:124
# fbf3aadc3dec450ebfeaff9b91bf6cde
msgid "Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name ``name``, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned."
msgstr ""

#: ../../ref/files/storage.txt:129
# a7a1401dfdcb495f8469ec8c1400c072
msgid "The ``content`` argument must be an instance of :class:`django.core.files.File` or of a subclass of :class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/storage.txt:135
# acf629f671e7451bb2523f23b1182dbf
msgid "Returns the total size, in bytes, of the file referenced by ``name``. For storage systems that aren't able to return the file size this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:141
# f1e8b7d2376846e59fccaf0e3c185f8b
msgid "Returns the URL where the contents of the file referenced by ``name`` can be accessed. For storage systems that don't support access by URL this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/forms/api.txt:3
# 26c0613f5b4c450eaa46cc7756c3ed97
msgid "The Forms API"
msgstr ""

#: ../../ref/forms/api.txt:11
# 08b519843a8840d0908ec2b0dce609d1
msgid "This document covers the gritty details of Django's forms API. You should read the :doc:`introduction to working with forms </topics/forms/index>` first."
msgstr ""

#: ../../ref/forms/api.txt:18
# 7b91f1431c3646ddb1b6b83d535929b7
msgid "Bound and unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:20
# 4b4ec1e5ca664cee9e3e117d9b09cbc2
msgid "A :class:`Form` instance is either **bound** to a set of data, or **unbound**."
msgstr ""

#: ../../ref/forms/api.txt:22
# 7b83585b96f64843b3db74df2c828576
msgid "If it's **bound** to a set of data, it's capable of validating that data and rendering the form as HTML with the data displayed in the HTML."
msgstr ""

#: ../../ref/forms/api.txt:25
# e2fd61c4b84c489686be426c040a3f38
msgid "If it's **unbound**, it cannot do validation (because there's no data to validate!), but it can still render the blank form as HTML."
msgstr ""

#: ../../ref/forms/api.txt:30
# 979748dcb7864ea3bad25fd2f5dd9ea3
msgid "To create an unbound :class:`Form` instance, simply instantiate the class::"
msgstr ""

#: ../../ref/forms/api.txt:34
# fdd8d04e85aa4d2aaf391ccfc34937a4
msgid "To bind data to a form, pass the data as a dictionary as the first parameter to your :class:`Form` class constructor::"
msgstr ""

#: ../../ref/forms/api.txt:43
# 93da48192d8642e1b710fb0802f17b69
msgid "In this dictionary, the keys are the field names, which correspond to the attributes in your :class:`Form` class. The values are the data you're trying to validate. These will usually be strings, but there's no requirement that they be strings; the type of data you pass depends on the :class:`Field`, as we'll see in a moment."
msgstr ""

#: ../../ref/forms/api.txt:51
# ccae7599f44d44dfb1952cc5aaf73c68
msgid "If you need to distinguish between bound and unbound form instances at runtime, check the value of the form's :attr:`~Form.is_bound` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:61
# a1b9be9505b240f19416634fa6dd786a
msgid "Note that passing an empty dictionary creates a *bound* form with empty data::"
msgstr ""

#: ../../ref/forms/api.txt:67
# de3abfcff6664173b8ffcffcead5c8fb
msgid "If you have a bound :class:`Form` instance and want to change the data somehow, or if you want to bind an unbound :class:`Form` instance to some data, create another :class:`Form` instance. There is no way to change data in a :class:`Form` instance. Once a :class:`Form` instance has been created, you should consider its data immutable, whether it has data or not."
msgstr ""

#: ../../ref/forms/api.txt:74
# 93b328136b314a3a9d14a62c8d6d7af7
msgid "Using forms to validate data"
msgstr ""

#: ../../ref/forms/api.txt:78
# 3c3882cfe4da41f7b7ea10e79e692d5c
msgid "The primary task of a :class:`Form` object is to validate data. With a bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run validation and return a boolean designating whether the data was valid::"
msgstr ""

#: ../../ref/forms/api.txt:90
# b71aa152f2e04e84bba968a58299c511
msgid "Let's try with some invalid data. In this case, ``subject`` is blank (an error, because all fields are required by default) and ``sender`` is not a valid email address::"
msgstr ""

#: ../../ref/forms/api.txt:104
# 22d50f02fb1c468da2c669948dd431c8
msgid "Access the :attr:`~Form.errors` attribute to get a dictionary of error messages::"
msgstr ""

#: ../../ref/forms/api.txt:110
# 83ea97da9a8145959f0119400b95cb17
msgid "In this dictionary, the keys are the field names, and the values are lists of Unicode strings representing the error messages. The error messages are stored in lists because a field can have multiple error messages."
msgstr ""

#: ../../ref/forms/api.txt:114
# cc91efa685c04d8fb4bf55da9f83c04f
msgid "You can access :attr:`~Form.errors` without having to call :meth:`~Form.is_valid` first. The form's data will be validated the first time either you call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""

#: ../../ref/forms/api.txt:118
# 822ce8b3c01b4188bf4e8f09684185f2
msgid "The validation routines will only get called once, regardless of how many times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This means that if validation has side effects, those side effects will only be triggered once."
msgstr ""

#: ../../ref/forms/api.txt:123
# 57cf27f6f92c41389d1e8466f0f223dc
msgid "Behavior of unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:125
# 8913531b04c644429e8fcb09a65e87e0
msgid "It's meaningless to validate a form with no data, but, for the record, here's what happens with unbound forms::"
msgstr ""

#: ../../ref/forms/api.txt:135
# 46793777e6814d929896f3f1ecfd195a
msgid "Dynamic initial values"
msgstr ""

#: ../../ref/forms/api.txt:139
# c5f04ca7a89c4d6e80e8b2a4664ee8a6
msgid "Use :attr:`~Form.initial` to declare the initial value of form fields at runtime. For example, you might want to fill in a ``username`` field with the username of the current session."
msgstr ""

#: ../../ref/forms/api.txt:143
# eb64570c721842a59b22778aaae4e91b
msgid "To accomplish this, use the :attr:`~Form.initial` argument to a :class:`Form`. This argument, if given, should be a dictionary mapping field names to initial values. Only include the fields for which you're specifying an initial value; it's not necessary to include every field in your form. For example::"
msgstr ""

#: ../../ref/forms/api.txt:150
# 9889b1edc979474b9cc68765420e2a87
msgid "These values are only displayed for unbound forms, and they're not used as fallback values if a particular value isn't provided."
msgstr ""

#: ../../ref/forms/api.txt:153
# e14f6b85d3614d45a2821945774568fd
msgid "Note that if a :class:`~django.forms.fields.Field` defines :attr:`~Form.initial` *and* you include ``initial`` when instantiating the ``Form``, then the latter ``initial`` will have precedence. In this example, ``initial`` is provided both at the field level and at the form instance level, and the latter gets precedence::"
msgstr ""

#: ../../ref/forms/api.txt:170
# 5f963f53aee34d65a7037b4f5445b92a
msgid "Accessing \"clean\" data"
msgstr ""

#: ../../ref/forms/api.txt:174
# 44c4faeab02d489590773533c27c1e17
msgid "Each field in a :class:`Form` class is responsible not only for validating data, but also for \"cleaning\" it -- normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output."
msgstr ""

#: ../../ref/forms/api.txt:179
# d451a1d5cf5747c7a2ca67f0aeb74a0f
msgid "For example, :class:`~django.forms.DateField` normalizes input into a Python ``datetime.date`` object. Regardless of whether you pass it a string in the format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other formats, ``DateField`` will always normalize it to a ``datetime.date`` object as long as it's valid."
msgstr ""

#: ../../ref/forms/api.txt:185
# 076853295d15435590bc11e1a7c9a85a
msgid "Once you've created a :class:`~Form` instance with a set of data and validated it, you can access the clean data via its ``cleaned_data`` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:198
# 476986b9ae62412690adf5520a479776
msgid "Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- always cleans the input into a Unicode string. We'll cover the encoding implications later in this document."
msgstr ""

#: ../../ref/forms/api.txt:202
# 26df1d867d914ab78f623bfea5135177
msgid "If your data does *not* validate, your ``Form`` instance will not have a ``cleaned_data`` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:217
# 5a9276a1d49f40c398ef85fd80af0af3
msgid "``cleaned_data`` will always *only* contain a key for fields defined in the ``Form``, even if you pass extra data when you define the ``Form``. In this example, we pass a bunch of extra fields to the ``ContactForm`` constructor, but ``cleaned_data`` contains only the form's fields::"
msgstr ""

#: ../../ref/forms/api.txt:235
# 508f1d22ce8842afb3453aabc261d792
msgid "``cleaned_data`` will include a key and value for *all* fields defined in the ``Form``, even if the data didn't include a value for fields that are not required. In this example, the data dictionary doesn't include a value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an empty value::"
msgstr ""

#: ../../ref/forms/api.txt:251
# 009ed47ca60f4268a49080a6a14880e7
msgid "In this above example, the ``cleaned_data`` value for ``nick_name`` is set to an empty string, because ``nick_name`` is ``CharField``, and ``CharField``\\s treat empty values as an empty string. Each field type knows what its \"blank\" value is -- e.g., for ``DateField``, it's ``None`` instead of the empty string. For full details on each field's behavior in this case, see the \"Empty value\" note for each field in the \"Built-in ``Field`` classes\" section below."
msgstr ""

#: ../../ref/forms/api.txt:258
# cf26594b3d1d4076b7d218fd27911f51
msgid "You can write code to perform validation for particular form fields (based on their name) or for the form as a whole (considering combinations of various fields). More information about this is in :doc:`/ref/forms/validation`."
msgstr ""

#: ../../ref/forms/api.txt:263
# ca02c4634ae34d4eb9dce146bfcd4b89
msgid "Outputting forms as HTML"
msgstr ""

#: ../../ref/forms/api.txt:265
# 727ce9754cb64c10baebb9b46e5e9422
msgid "The second task of a ``Form`` object is to render itself as HTML. To do so, simply ``print`` it::"
msgstr ""

#: ../../ref/forms/api.txt:275
# 13a24ab87d594591b8377f23d8d8bdb2
msgid "If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an ``<input type=\"text\">``, the data will be in the ``value`` attribute. If a field is represented by an ``<input type=\"checkbox\">``, then that HTML will include ``checked=\"checked\"`` if appropriate::"
msgstr ""

#: ../../ref/forms/api.txt:292
# 7bd180258971403dbf62da6ecc319519
msgid "This default output is a two-column HTML table, with a ``<tr>`` for each field. Notice the following:"
msgstr ""

#: ../../ref/forms/api.txt:295
# aa20c5d8162441df83897278f64f84ef
msgid "For flexibility, the output does *not* include the ``<table>`` and ``</table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags or an ``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""

#: ../../ref/forms/api.txt:299
# eb4f117cc13946b289a14bef3b8624cf
msgid "Each field type has a default HTML representation. ``CharField`` and ``EmailField`` are represented by an ``<input type=\"text\">``. ``BooleanField`` is represented by an ``<input type=\"checkbox\">``. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we'll explain shortly."
msgstr ""

#: ../../ref/forms/api.txt:305
# ed681747e4b44bdfa604f0a9d1edae03
msgid "The HTML ``name`` for each tag is taken directly from its attribute name in the ``ContactForm`` class."
msgstr ""

#: ../../ref/forms/api.txt:308
# 8aca5335bbdd462495c6e9e9ed6673d8
msgid "The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and ``'Cc myself:'`` is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Again, note these are merely sensible defaults; you can also specify labels manually."
msgstr ""

#: ../../ref/forms/api.txt:313
# f951061532ea4fdc8a8e618fe91b622d
msgid "Each text label is surrounded in an HTML ``<label>`` tag, which points to the appropriate form field via its ``id``. Its ``id``, in turn, is generated by prepending ``'id_'`` to the field name. The ``id`` attributes and ``<label>`` tags are included in the output by default, to follow best practices, but you can change that behavior."
msgstr ""

#: ../../ref/forms/api.txt:319
# 362565fa9736496096f7d007fc22c623
msgid "Although ``<table>`` output is the default output style when you ``print`` a form, other output styles are available. Each style is available as a method on a form object, and each rendering method returns a Unicode object."
msgstr ""

#: ../../ref/forms/api.txt:324
# 614942b1ba0242a18b4bf81881f0afb3
msgid "``as_p()``"
msgstr ""

#: ../../ref/forms/api.txt:328
# a68c7adf38194f6188ded4bfcb1e27fa
msgid "``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` containing one field::"
msgstr ""

#: ../../ref/forms/api.txt:341
# 2567fd26a7cc4d74a914372c256705bc
msgid "``as_ul()``"
msgstr ""

#: ../../ref/forms/api.txt:345
# fa99381a546e4ee39fe73edd2a1e795c
msgid "``as_ul()`` renders the form as a series of ``<li>`` tags, with each ``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</ul>``, so that you can specify any HTML attributes on the ``<ul>`` for flexibility::"
msgstr ""

#: ../../ref/forms/api.txt:360
# 68557fedb4bf45e3899adc5878cb2a1f
msgid "``as_table()``"
msgstr ""

#: ../../ref/forms/api.txt:364
# 31cb1b44ef32453fbfc74973906ff9f0
msgid "Finally, ``as_table()`` outputs the form as an HTML ``<table>``. This is exactly the same as ``print``. In fact, when you ``print`` a form object, it calls its ``as_table()`` method behind the scenes::"
msgstr ""

#: ../../ref/forms/api.txt:378
# 25ed6107615a48e8989788f356e667b6
msgid "Styling required or erroneous form rows"
msgstr ""

#: ../../ref/forms/api.txt:382
# b034e1e3dd114188b2531bdbff6ce0ae
msgid "It's pretty common to style form rows and fields that are required or have errors. For example, you might want to present required form rows in bold and highlight errors in red."
msgstr ""

#: ../../ref/forms/api.txt:386
# ffa7e8c8dad246769399e8d0ceb0cd5f
msgid "The :class:`Form` class has a couple of hooks you can use to add ``class`` attributes to required rows or to rows with errors: simply set the :attr:`Form.error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:397
# 63e2f9215d6947beb61c8a6778820625
msgid "Once you've done that, rows will be given ``\"error\"`` and/or ``\"required\"`` classes, as needed. The HTML will look something like::"
msgstr ""

#: ../../ref/forms/api.txt:410
# 12898f547e43489385a7771253dd79fb
msgid "Configuring HTML ``<label>`` tags"
msgstr ""

#: ../../ref/forms/api.txt:412
# 0e1bc5b4102b4cd9bdc886c9fe0636e0
msgid "An HTML ``<label>`` tag designates which label text is associated with which form element. This small enhancement makes forms more usable and more accessible to assistive devices. It's always a good idea to use ``<label>`` tags."
msgstr ""

#: ../../ref/forms/api.txt:416
# eda465108aa847d6bb701e19754ba7e9
msgid "By default, the form rendering methods include HTML ``id`` attributes on the form elements and corresponding ``<label>`` tags around the labels. The ``id`` attribute values are generated by prepending ``id_`` to the form field names. This behavior is configurable, though, if you want to change the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags entirely."
msgstr ""

#: ../../ref/forms/api.txt:422
# f94d3055dfc34a57864b3541839e5b95
msgid "Use the ``auto_id`` argument to the ``Form`` constructor to control the label and ``id`` behavior. This argument must be ``True``, ``False`` or a string."
msgstr ""

#: ../../ref/forms/api.txt:425
# d8d71ae2be394498aada4e5d0da865c2
msgid "If ``auto_id`` is ``False``, then the form output will not include ``<label>`` tags nor ``id`` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:445
# 7a8e402968a2450aa73b7df6d027b358
msgid "If ``auto_id`` is set to ``True``, then the form output *will* include ``<label>`` tags and will simply use the field name as its ``id`` for each form field::"
msgstr ""

#: ../../ref/forms/api.txt:466
# 57311777472342989492dc22ceea0617
msgid "If ``auto_id`` is set to a string containing the format character ``'%s'``, then the form output will include ``<label>`` tags, and will generate ``id`` attributes based on the format string. For example, for a format string ``'field_%s'``, a field named ``subject`` will get the ``id`` value ``'field_subject'``. Continuing our example::"
msgstr ""

#: ../../ref/forms/api.txt:489
# ab9cd9895bde4830a0f7ef05a19ffc9f
msgid "If ``auto_id`` is set to any other true value -- such as a string that doesn't include ``%s`` -- then the library will act as if ``auto_id`` is ``True``."
msgstr ""

#: ../../ref/forms/api.txt:492
# 61165442ad87436aa900728508178401
msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr ""

#: ../../ref/forms/api.txt:494
# 90f983aa29c7428d9c053361f0954ded
msgid "Normally, a colon (``:``) will be appended after any label name when a form is rendered. It's possible to change the colon to another character, or omit it entirely, using the ``label_suffix`` parameter::"
msgstr ""

#: ../../ref/forms/api.txt:511
# 22385deca5654e589e7449aa7d8e7e11
msgid "Note that the label suffix is added only if the last character of the label isn't a punctuation character (``.``, ``!``, ``?`` or ``:``)"
msgstr ""

#: ../../ref/forms/api.txt:515
# ec985cad4e174355963fbee43c7fec70
msgid "Notes on field ordering"
msgstr ""

#: ../../ref/forms/api.txt:517
# cd019a4b3ff344a4bf0926a93cc31d7b
msgid "In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the ``ContactForm`` example, the fields are defined in the order ``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML output, just change the order in which those fields are listed in the class."
msgstr ""

#: ../../ref/forms/api.txt:524
# 67a8304030954a1e82cb9a28cc936c9e
msgid "How errors are displayed"
msgstr ""

#: ../../ref/forms/api.txt:526
# c6211bf826d64619b727b36086dbf0f6
msgid "If you render a bound ``Form`` object, the act of rendering will automatically run the form's validation if it hasn't already happened, and the HTML output will include the validation errors as a ``<ul class=\"errorlist\">`` near the field. The particular positioning of the error messages depends on the output method you're using::"
msgstr ""

#: ../../ref/forms/api.txt:556
# b361c34b282e4a66830b7360bbb290c6
msgid "Customizing the error list format"
msgstr ""

#: ../../ref/forms/api.txt:558
# 3e317765f7b74b2d9b88ae800e3f1aab
msgid "By default, forms use ``django.forms.util.ErrorList`` to format validation errors. If you'd like to use an alternate class for displaying errors, you can pass that in at construction time::"
msgstr ""

#: ../../ref/forms/api.txt:579
# 7acb4357e6d64ea0ba29bd825fca6537
msgid "More granular output"
msgstr ""

#: ../../ref/forms/api.txt:581
# 61215a689e984a7c8d4030bac39a1b33
msgid "The ``as_p()``, ``as_ul()`` and ``as_table()`` methods are simply shortcuts for lazy developers -- they're not the only way a form object can be displayed."
msgstr ""

#: ../../ref/forms/api.txt:586
# 65c68cf6b3a745d5a379a961404b5f6e
msgid "Used to display HTML or access attributes for a single field of a :class:`Form` instance."
msgstr ""

#: ../../ref/forms/api.txt:589
# 556d0feeb25749f1b7ab43fa68d21443
msgid "The :meth:`__unicode__` and :meth:`__str__` methods of this object displays the HTML for this field."
msgstr ""

#: ../../ref/forms/api.txt:592
# d1f8c7de4efd43cf956f1a67912cc768
msgid "To retrieve a single ``BoundField``, use dictionary lookup syntax on your form using the field's name as the key::"
msgstr ""

#: ../../ref/forms/api.txt:599
# 8550afd9f873439dbcf07c35b8eb3815
msgid "To retrieve all ``BoundField`` objects, iterate the form::"
msgstr ""

#: ../../ref/forms/api.txt:608
# d39752eb3601468085458404b5437bde
msgid "The field-specific output honors the form object's ``auto_id`` setting::"
msgstr ""

#: ../../ref/forms/api.txt:617
# 0138c0fd36ec4187aaa45c18f78a1ee6
msgid "For a field's list of errors, access the field's ``errors`` attribute."
msgstr ""

#: ../../ref/forms/api.txt:621
# f1d602a5b68c42b2a311f7f49e8bfa27
msgid "A list-like object that is displayed as an HTML ``<ul class=\"errorlist\">`` when printed::"
msgstr ""

#: ../../ref/forms/api.txt:643
# b501dd19dde548e78e0021a3d6260f75
msgid "When you use Django's rendering shortcuts, CSS classes are used to indicate required form fields or fields that contain errors. If you're manually rendering a form, you can access these CSS classes using the ``css_classes`` method::"
msgstr ""

#: ../../ref/forms/api.txt:652
# 84fb696d4e764d13bd757f4292f06bcb
msgid "If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument::"
msgstr ""

#: ../../ref/forms/api.txt:664
# d96942eedfec46a18743e5a2fbc61787
msgid "Use this method to render the raw value of this field as it would be rendered by a ``Widget``::"
msgstr ""

#: ../../ref/forms/api.txt:678
# d43506b897304acbbf003fe18797242f
msgid "Binding uploaded files to a form"
msgstr ""

#: ../../ref/forms/api.txt:680
# 8c6badeb50e349b6b0872886880f5d54
msgid "Dealing with forms that have ``FileField`` and ``ImageField`` fields is a little more complicated than a normal form."
msgstr ""

#: ../../ref/forms/api.txt:683
# a4ced0b2af3d4a0e84fa41f3164175c0
msgid "Firstly, in order to upload files, you'll need to make sure that your ``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-data\"``::"
msgstr ""

#: ../../ref/forms/api.txt:689
# 776d07925b544c57967ab9aedddf887f
msgid "Secondly, when you use the form, you need to bind the file data. File data is handled separately to normal form data, so when your form contains a ``FileField`` and ``ImageField``, you will need to specify a second argument when you bind your form. So if we extend our ContactForm to include an ``ImageField`` called ``mugshot``, we need to bind the file data containing the mugshot image::"
msgstr ""

#: ../../ref/forms/api.txt:705
# 73fe38786f6d42edb98bb8446fd6ccc1
msgid "In practice, you will usually specify ``request.FILES`` as the source of file data (just like you use ``request.POST`` as the source of form data)::"
msgstr ""

#: ../../ref/forms/api.txt:712
# 0a092c0699b7491b9867f5bb801a6149
msgid "Constructing an unbound form is the same as always -- just omit both form data *and* file data::"
msgstr ""

#: ../../ref/forms/api.txt:719
# 3111988b27ce40a3b643598885ad1340
msgid "Testing for multipart forms"
msgstr ""

#: ../../ref/forms/api.txt:721
# 52a520706e3d4d5281b7d23b2e1e66c0
msgid "If you're writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The ``is_multipart()`` method tells you whether the form requires multipart encoding for submission::"
msgstr ""

#: ../../ref/forms/api.txt:729
# 5a5c721e7fca4f28a31b438d638b2d44
msgid "Here's an example of how you might use this in a template::"
msgstr ""

#: ../../ref/forms/api.txt:740
# b157654baa94455586a960f9e0037bd6
msgid "Subclassing forms"
msgstr ""

#: ../../ref/forms/api.txt:742
# aaa9b2cfb7884351a30293e9bb7f02ae
msgid "If you have multiple ``Form`` classes that share fields, you can use subclassing to remove redundancy."
msgstr ""

#: ../../ref/forms/api.txt:745
# 0007829225604fd6b8f1211e2f3c483f
msgid "When you subclass a custom ``Form`` class, the resulting subclass will include all fields of the parent class(es), followed by the fields you define in the subclass."
msgstr ""

#: ../../ref/forms/api.txt:749
# d4626bbf597e4ff68a7d3dc060ddabbf
msgid "In this example, ``ContactFormWithPriority`` contains all the fields from ``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` fields are ordered first::"
msgstr ""

#: ../../ref/forms/api.txt:763
# 8bde4db8d2a644fea1c31f1e349993bc
msgid "It's possible to subclass multiple forms, treating forms as \"mix-ins.\" In this example, ``BeatleForm`` subclasses both ``PersonForm`` and ``InstrumentForm`` (in that order), and its field list includes the fields from the parent classes::"
msgstr ""

#: ../../ref/forms/api.txt:785
# c2f8e2ac62b04e5aa88c27e0ceba91a4
msgid "Prefixes for forms"
msgstr ""

#: ../../ref/forms/api.txt:789
# 31fae181c7a24946937ab6a673d48a7a
msgid "You can put several Django forms inside one ``<form>`` tag. To give each ``Form`` its own namespace, use the ``prefix`` keyword argument::"
msgstr ""

#: ../../ref/forms/fields.txt:3
# 5650b28645ab4ac493aaee1b122115cc
msgid "Form fields"
msgstr ""

#: ../../ref/forms/fields.txt:12
# dea78898c1eb40e89cceb95b1dd1ea42
msgid "When you create a ``Form`` class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks."
msgstr ""

#: ../../ref/forms/fields.txt:18
# 58ff7145b973489896a81acd7530a96b
msgid "Although the primary way you'll use ``Field`` classes is in ``Form`` classes, you can also instantiate them and use them directly to get a better idea of how they work. Each ``Field`` instance has a ``clean()`` method, which takes a single argument and either raises a ``django.forms.ValidationError`` exception or returns the clean value::"
msgstr ""

#: ../../ref/forms/fields.txt:36
# 659ef062d53743e6ab0a1b23dcb519a7
msgid "Core field arguments"
msgstr ""

#: ../../ref/forms/fields.txt:38
# abee5d588777411abe07fb1fd57c3621
msgid "Each ``Field`` class constructor takes at least these arguments. Some ``Field`` classes take additional, field-specific arguments, but the following should *always* be accepted:"
msgstr ""

#: ../../ref/forms/fields.txt:43
# 71a7bdb0a8084029ae82b20f182053a0
msgid "``required``"
msgstr ""

#: ../../ref/forms/fields.txt:47
# e82d23ae22554ba3ba98f119c6d2175f
msgid "By default, each ``Field`` class assumes the value is required, so if you pass an empty value -- either ``None`` or the empty string (``\"\"``) -- then ``clean()`` will raise a ``ValidationError`` exception::"
msgstr ""

#: ../../ref/forms/fields.txt:71
# 1f793f6f147b4555871feacc5941777d
msgid "To specify that a field is *not* required, pass ``required=False`` to the ``Field`` constructor::"
msgstr ""

#: ../../ref/forms/fields.txt:88
# db7d88e30ef44940abe076d336d4556d
msgid "If a ``Field`` has ``required=False`` and you pass ``clean()`` an empty value, then ``clean()`` will return a *normalized* empty value rather than raising ``ValidationError``. For ``CharField``, this will be a Unicode empty string. For other ``Field`` classes, it might be ``None``. (This varies from field to field.)"
msgstr ""

#: ../../ref/forms/fields.txt:95
# 1a015e491dc34f86b65448f0bff20e57
msgid "``label``"
msgstr ""

#: ../../ref/forms/fields.txt:99
# 2aa43c1ddde54a998997f2a291723b0c
msgid "The ``label`` argument lets you specify the \"human-friendly\" label for this field. This is used when the ``Field`` is displayed in a ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:102
# e59da47c73634027b3ed496ecf0854ac
msgid "As explained in \"Outputting forms as HTML\" above, the default label for a ``Field`` is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify ``label`` if that default behavior doesn't result in an adequate label."
msgstr ""

#: ../../ref/forms/fields.txt:107
# 8c214aeeee9049ec868211615835e72d
msgid "Here's a full example ``Form`` that implements ``label`` for two of its fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:121
# c2991cc380af412c9cea1687a03062b1
msgid "``initial``"
msgstr ""

#: ../../ref/forms/fields.txt:125
# 2b670cae1e2f46dd9b64cccb525490eb
msgid "The ``initial`` argument lets you specify the initial value to use when rendering this ``Field`` in an unbound ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:128
# 8ab49ca5cd8f4b88a988fdbb0c7e3647
msgid "To specify dynamic initial data, see the :attr:`Form.initial` parameter."
msgstr ""

#: ../../ref/forms/fields.txt:130
# 4b020fda32a6458cad6790452b0a0345
msgid "The use-case for this is when you want to display an \"empty\" form in which a field is initialized to a particular value. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:143
# 8f16c5ad48c64aa18e8eccc0c9108fa2
msgid "You may be thinking, why not just pass a dictionary of the initial values as data when displaying the form? Well, if you do that, you'll trigger validation, and the HTML output will include any validation errors::"
msgstr ""

#: ../../ref/forms/fields.txt:158
# cc3963d9e7bf4456900178970e892c1e
msgid "This is why ``initial`` values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data."
msgstr ""

#: ../../ref/forms/fields.txt:161
# 7999e1e439314fc993cc2eab63b58955
msgid "Also note that ``initial`` values are *not* used as \"fallback\" data in validation if a particular field's value is not given. ``initial`` values are *only* intended for initial form display::"
msgstr ""

#: ../../ref/forms/fields.txt:177
# 7ca1d12b089a4ef4a0b419f332fc47bc
msgid "Instead of a constant, you can also pass any callable::"
msgstr ""

#: ../../ref/forms/fields.txt:185
# 1ef836e3159944a898d4ce9e70725ecf
msgid "The callable will be evaluated only when the unbound form is displayed, not when it is defined."
msgstr ""

#: ../../ref/forms/fields.txt:188
# fc1b23f29c0c46d186ceeb74b205b10b
msgid "``widget``"
msgstr ""

#: ../../ref/forms/fields.txt:192
# a56f4305de004d14a72a6012a4aec103
msgid "The ``widget`` argument lets you specify a ``Widget`` class to use when rendering this ``Field``. See :doc:`/ref/forms/widgets` for more information."
msgstr ""

#: ../../ref/forms/fields.txt:196
#: ../../ref/models/fields.txt:219
# 9a0f654cc510415d89606083c14e9794
# 4af4850176214238918db61990b7e3e9
msgid "``help_text``"
msgstr ""

#: ../../ref/forms/fields.txt:200
# fb983730662b457c8fbcc3224bc0db04
msgid "The ``help_text`` argument lets you specify descriptive text for this ``Field``. If you provide ``help_text``, it will be displayed next to the ``Field`` when the ``Field`` is rendered by one of the convenience ``Form`` methods (e.g., ``as_ul()``)."
msgstr ""

#: ../../ref/forms/fields.txt:205
# 03b38592e5d045e0b0d0cd857184519c
msgid "Here's a full example ``Form`` that implements ``help_text`` for two of its fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:231
#: ../../ref/models/fields.txt:204
# 05da01eef4b544719f583fde4593a399
# c36faf51024f443eba013decb1f74392
msgid "``error_messages``"
msgstr ""

#: ../../ref/forms/fields.txt:235
# 3cf7180a685045219f29cf47aed93f1f
msgid "The ``error_messages`` argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message::"
msgstr ""

#: ../../ref/forms/fields.txt:245
# 0910b728ef88459b852575d73b596cb0
msgid "And here is a custom error message::"
msgstr ""

#: ../../ref/forms/fields.txt:253
# 5ba63233c9c14875ad26fa7671495f38
msgid "In the `built-in Field classes`_ section below, each ``Field`` defines the error message keys it uses."
msgstr ""

#: ../../ref/forms/fields.txt:257
#: ../../ref/models/fields.txt:305
# 37348f133ec14731be4b31b986522703
# 0d84f9b12f174656aa8b6b7e3e0c0200
msgid "``validators``"
msgstr ""

#: ../../ref/forms/fields.txt:263
# 21ed7f502c2c419eb5ca560b669d92cd
msgid "The ``validators`` argument lets you provide a list of validation functions for this field."
msgstr ""

#: ../../ref/forms/fields.txt:266
# 9d724351035b47b382f8accad8f89baa
msgid "See the :doc:`validators documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/forms/fields.txt:269
# 7f76a03a0ebc4615af108cb894a17141
msgid "``localize``"
msgstr ""

#: ../../ref/forms/fields.txt:275
# f4ed8cb7796a453ba3f52b2401de4d92
msgid "The ``localize`` argument enables the localization of form data, input as well as the rendered output."
msgstr ""

#: ../../ref/forms/fields.txt:278
# a2c14750a9b2451584eec9ffee1be1fb
msgid "See the :ref:`format localization <format-localization>` documentation for more information."
msgstr ""

#: ../../ref/forms/fields.txt:284
# aefb51bd7bff4affa9279b76573f45bb
msgid "Built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:286
# 3eb0ef74ecfc474fb9cdbfc595f1593e
msgid "Naturally, the ``forms`` library comes with a set of ``Field`` classes that represent common validation needs. This section documents each built-in field."
msgstr ""

#: ../../ref/forms/fields.txt:289
# d7cc0289e73a4bddae0d477604ee2e0a
msgid "For each field, we describe the default widget used if you don't specify ``widget``. We also specify the value returned when you provide an empty value (see the section on ``required`` above to understand what that means)."
msgstr ""

#: ../../ref/forms/fields.txt:294
#: ../../ref/models/fields.txt:344
# c09a6ddff80a41a39a850e89c0042334
# 4f8b687403c34eca9582403484cefc63
msgid "``BooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:298
# 23588918e4e4420f93e7cb3e63e6b89d
msgid "Default widget: ``CheckboxInput``"
msgstr ""

#: ../../ref/forms/fields.txt:299
# 21ceb1beb3f14b2a93b77647aa4752e5
msgid "Empty value: ``False``"
msgstr ""

#: ../../ref/forms/fields.txt:300
# 2460711bacd94cb090ba9321fb2d9788
msgid "Normalizes to: A Python ``True`` or ``False`` value."
msgstr ""

#: ../../ref/forms/fields.txt:301
# 35823933affc45c2a6cb8017c8285242
msgid "Validates that the value is ``True`` (e.g. the check box is checked) if the field has ``required=True``."
msgstr ""

#: ../../ref/forms/fields.txt:303
# 68ec7319f921432292afee67dc8c894a
msgid "Error message keys: ``required``"
msgstr ""

#: ../../ref/forms/fields.txt:307
# 473350f861f84015afb40f0bba067966
msgid "Since all ``Field`` subclasses have ``required=True`` by default, the validation condition here is important. If you want to include a boolean in your form that can be either ``True`` or ``False`` (e.g. a checked or unchecked checkbox), you must remember to pass in ``required=False`` when creating the ``BooleanField``."
msgstr ""

#: ../../ref/forms/fields.txt:314
#: ../../ref/models/fields.txt:361
# 5001c897a6714c37aa23b8d750c49d47
# 3aeefa39ae124a39a9c2a486c11d58e0
msgid "``CharField``"
msgstr ""

#: ../../ref/forms/fields.txt:318
#: ../../ref/forms/fields.txt:449
#: ../../ref/forms/fields.txt:484
#: ../../ref/forms/fields.txt:563
#: ../../ref/forms/fields.txt:600
#: ../../ref/forms/fields.txt:623
#: ../../ref/forms/fields.txt:639
#: ../../ref/forms/fields.txt:722
#: ../../ref/forms/fields.txt:749
#: ../../ref/forms/fields.txt:764
#: ../../ref/forms/fields.txt:788
#: ../../ref/forms/fields.txt:829
#: ../../ref/forms/fields.txt:856
# 8246b3359be6412594eeea74eb3e7cc4
# b30f42448be0402a87c4f9093996f294
# 1fdff9e928ef46e2a243d2c708f6ee1e
# 46220eb085bc4bc199bb3b0099c71a80
# e9ef59039e9f4eb0ade651447a07cd90
# 36a4e983de344471b53f92dc8a975616
# 179e5cf9b02346e58028e57f131d8438
# 4492ca73909e4db28ce58ff016ecf379
# c497fec8a5fd44e0a2944e412199dbdd
# abfbee529cb447f8b543db4a8259464f
# 81d1b0c7b76b483089206ac778e98b54
# 08c3d87906aa48e587083f31ac1934ea
# 65751475d4e14a2b941339fcd528cb46
msgid "Default widget: ``TextInput``"
msgstr ""

#: ../../ref/forms/fields.txt:319
#: ../../ref/forms/fields.txt:339
#: ../../ref/forms/fields.txt:485
#: ../../ref/forms/fields.txt:624
#: ../../ref/forms/fields.txt:640
#: ../../ref/forms/fields.txt:723
#: ../../ref/forms/fields.txt:750
#: ../../ref/forms/fields.txt:789
#: ../../ref/forms/fields.txt:830
#: ../../ref/forms/fields.txt:857
# 1b2c37e56b2a471a8d6bc74e759ab2fe
# bcd8f60f5e1f4f7b8485151cd0892636
# 72d5e79a4a6f465d86cbb981d11ba476
# 125ac6e6e769401d8f48999260f8bac0
# 4e36008da78548019614962589115e9f
# 47808b82e7f649e299dec061ff69ee0c
# bbc2e871d7ab44a5aeeea21a4f9a3bbb
# 1346cdfbe3e24ce189df261b31a680f1
# f25ff94d466d4b1eaeaa72742eeae5f2
# 91c1b120e471455985c0184b64046c55
msgid "Empty value: ``''`` (an empty string)"
msgstr ""

#: ../../ref/forms/fields.txt:320
#: ../../ref/forms/fields.txt:340
#: ../../ref/forms/fields.txt:486
#: ../../ref/forms/fields.txt:625
#: ../../ref/forms/fields.txt:724
#: ../../ref/forms/fields.txt:751
#: ../../ref/forms/fields.txt:790
#: ../../ref/forms/fields.txt:831
# 29bea93ed61349eeadb91ace2343a6fa
# c2d86a45fad54cb698e16a408218038f
# e168992b05e94d82a72a51ea7af8e473
# 9bef34a2750f42799523f92c296ccd9a
# 803b309f84834accacb597599768a495
# f1be07b41c054ed590ceb9a45952bbc6
# 338bff609f1b40b1bef41f4d11fac208
# 5549be1d7672420b82b164159a44f41a
msgid "Normalizes to: A Unicode object."
msgstr ""

#: ../../ref/forms/fields.txt:321
# 46d72e96b08044dd85dd1358b7928be3
msgid "Validates ``max_length`` or ``min_length``, if they are provided. Otherwise, all inputs are valid."
msgstr ""

#: ../../ref/forms/fields.txt:323
# d13ef9a7393845cd96a1263eb8974547
msgid "Error message keys: ``required``, ``max_length``, ``min_length``"
msgstr ""

#: ../../ref/forms/fields.txt:325
# 108e1235a33a41d380ffd5cdc6f9d527
msgid "Has two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:330
# 7772a9f68cb54058b66fd1951da5bb12
msgid "If provided, these arguments ensure that the string is at most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:334
# e64eab1353844aca98716b7bc7b605e6
msgid "``ChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:338
#: ../../ref/forms/fields.txt:364
#: ../../ref/forms/fields.txt:533
#: ../../ref/forms/fields.txt:928
# 06feb71db83844948f25cac26d79be39
# 9d0b0f76062442bfa1664bc05b21a59b
# 25527d87624c49c9b17a1704bf82ef49
# 032a7af3e2c740b1b7ee1be4b6187ab7
msgid "Default widget: ``Select``"
msgstr ""

#: ../../ref/forms/fields.txt:341
# 94517a23d9474cf88dbbf963f0fe4e84
msgid "Validates that the given value exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:342
#: ../../ref/forms/fields.txt:369
#: ../../ref/forms/fields.txt:537
#: ../../ref/forms/fields.txt:700
#: ../../ref/forms/fields.txt:932
# 20d3afc996084be5840b5799ad090cf2
# bb6af927a1aa48129f2123125dbfbcff
# c46923f190f44236b000c42d1738f3b9
# 2269f5448b964d46bbe551da85d0af1a
# c9a3a36e73b647b98707998b7f93dc31
msgid "Error message keys: ``required``, ``invalid_choice``"
msgstr ""

#: ../../ref/forms/fields.txt:344
#: ../../ref/forms/fields.txt:679
#: ../../ref/forms/fields.txt:702
# 88d01a339b61437ca22f5415b6c667ea
# 0dcb1127fbf7436ca11ea164ed2b605e
# d1d403d94d45456aba3521bdea337918
msgid "The ``invalid_choice`` error message may contain ``%(value)s``, which will be replaced with the selected choice."
msgstr ""

#: ../../ref/forms/fields.txt:347
#: ../../ref/forms/fields.txt:836
#: ../../ref/forms/fields.txt:870
# 6fab054c5ae9418092b94aa86c0ccf78
# 7c7bfffa773f4609a00db7d6b6c05def
# 683a731376b648b181bf7bc6448589fb
msgid "Takes one extra required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:351
# 09c4589f58bc41eea6465fd445307e36
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. This argument accepts the same formats as the ``choices`` argument to a model field. See the :ref:`model field reference documentation on choices <field-choices>` for more details."
msgstr ""

#: ../../ref/forms/fields.txt:357
# fa3bdf04f98048aa9121b24b81a3570e
msgid "``TypedChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:361
# d3dbe83170d140fca2bb8e5a9f0a5fda
msgid "Just like a :class:`ChoiceField`, except :class:`TypedChoiceField` takes two extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:365
#: ../../ref/forms/fields.txt:695
# 2dff243be3dd4deb8f6b0daa22a23e86
# 9ca6481c91cd40788d489889ee328848
msgid "Empty value: Whatever you've given as ``empty_value``"
msgstr ""

#: ../../ref/forms/fields.txt:366
# 6368e34eb6c94311a391bc0aac581cb0
msgid "Normalizes to: A value of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:367
# c8e555cc64dc4cfdbf2c8ad8f2dde929
msgid "Validates that the given value exists in the list of choices and can be coerced."
msgstr ""

#: ../../ref/forms/fields.txt:371
# 95fd105ffeb2409fa43985ffa6e62e07
msgid "Takes extra arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:375
# 634e675967724217a7e98f2a2132d1f4
msgid "A function that takes one argument and returns a coerced value. Examples include the built-in ``int``, ``float``, ``bool`` and other types. Defaults to an identity function."
msgstr ""

#: ../../ref/forms/fields.txt:381
# 374d75c22ed54318bd6807f7b9403f81
msgid "The value to use to represent \"empty.\" Defaults to the empty string; ``None`` is another common choice here. Note that this value will not be coerced by the function given in the ``coerce`` argument, so choose it accordingly."
msgstr ""

#: ../../ref/forms/fields.txt:387
#: ../../ref/models/fields.txt:403
# 8700006190e248ab8bffc085a6344e37
# 1c8813f9414149ff928eb3a1ff848cda
msgid "``DateField``"
msgstr ""

#: ../../ref/forms/fields.txt:391
# 56fcdbac1e1746cbb7095fde162cc66e
msgid "Default widget: ``DateInput``"
msgstr ""

#: ../../ref/forms/fields.txt:392
#: ../../ref/forms/fields.txt:419
#: ../../ref/forms/fields.txt:450
#: ../../ref/forms/fields.txt:506
#: ../../ref/forms/fields.txt:534
#: ../../ref/forms/fields.txt:564
#: ../../ref/forms/fields.txt:580
#: ../../ref/forms/fields.txt:601
#: ../../ref/forms/fields.txt:713
#: ../../ref/forms/fields.txt:765
#: ../../ref/forms/fields.txt:886
#: ../../ref/forms/fields.txt:929
# ddcf2e6382ef4eb38cf554c78333fcb6
# fe60058a7ce647a1ab344cb9a3c65183
# 2572472917a248578b770f7e1a882fb9
# 15181ccf3bc5414280117a88ebd54c63
# f62d4eca48674cd08ff482313c160581
# 854fcf5cc0ac4f4ca634af1827243ba9
# 95198e8c022e4f03a6aa8f6cc00ca4af
# b963411dc040486bb8972b4810b0cfce
# 76203c9538f94319a6b2b7ef44aaa068
# 463bdfde18bc438882eae8d1f41b29ea
# 3ae5bb06fb0d4c2e89a129da69227b6b
# 1a4effe0163c46d8a6293254df281d20
msgid "Empty value: ``None``"
msgstr ""

#: ../../ref/forms/fields.txt:393
# ecca0fa941bc43a1b305d26fc543800b
msgid "Normalizes to: A Python ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:394
# d85d028a52d74c829a5bc13ee643a6cf
msgid "Validates that the given value is either a ``datetime.date``, ``datetime.datetime`` or string formatted in a particular date format."
msgstr ""

#: ../../ref/forms/fields.txt:396
#: ../../ref/forms/fields.txt:423
#: ../../ref/forms/fields.txt:489
#: ../../ref/forms/fields.txt:628
#: ../../ref/forms/fields.txt:644
#: ../../ref/forms/fields.txt:727
#: ../../ref/forms/fields.txt:769
#: ../../ref/forms/fields.txt:834
#: ../../ref/forms/fields.txt:861
# 614e0afec7ec48c4a21d9b4189c41652
# d2a913eebcb84ea38721c5a1c841e716
# 4b263d1360b148a69be61b828624f252
# 7df992426d5849f29dfa7cf2ae5174af
# fd8b4f57192e442caed46156407bba06
# beedf27d35ab491980a31a8b8d52431f
# e294e34c7df64b92bf6e30422ecd0755
# d87658c35c05469a80f75366bec7d3aa
# 457c9b140b42430eb5550d93536c3ade
msgid "Error message keys: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:398
#: ../../ref/forms/fields.txt:425
#: ../../ref/forms/fields.txt:771
#: ../../ref/forms/widgets.txt:190
#: ../../ref/forms/widgets.txt:250
#: ../../ref/forms/widgets.txt:267
#: ../../ref/forms/widgets.txt:284
#: ../../ref/forms/widgets.txt:308
#: ../../ref/forms/widgets.txt:525
# 817e1d74b5f24738804236fdaf5d3e65
# 5fd9b32b48174e4984a60c001bb24fa7
# 1edf9cfd950245d9ac7ba7039e11a936
# bb89919bf2e9440ea4a920bb9efdcd79
# 5a42e4582ca54622b9aba3f5e643f56a
# 830cddf6b95442938607b6cf4f13691d
# a75894f9c1df47ec8b38ba2d933ef9e0
# 597c06b127874df789d074151bc44fe9
# 2b0247f22e62466a933bac9532d84a90
msgid "Takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:402
#: ../../ref/forms/fields.txt:897
# edfbd4018a94499b9874b533b42085b4
# 383aeae5dee043ee963192ccf07cfb7e
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:405
#: ../../ref/forms/fields.txt:432
#: ../../ref/forms/fields.txt:778
# bdcad0d875624f9ca4c43818ebc986e3
# 21aa08f27c6d42e49ffc53677d9943b6
# 7b804021715f45478ae8f08d2616fd57
msgid "If no ``input_formats`` argument is provided, the default input formats are::"
msgstr ""

#: ../../ref/forms/fields.txt:414
#: ../../ref/models/fields.txt:432
# 2c06bd6964e04817b3ac4492a56e6cf0
# 2e77de86f3af43df94ee80057e8ce6af
msgid "``DateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:418
# f278d3b842054d85933804d0433361ee
msgid "Default widget: ``DateTimeInput``"
msgstr ""

#: ../../ref/forms/fields.txt:420
#: ../../ref/forms/fields.txt:887
# 7b80114d1d4b4d6f9f49eac8a0581a6b
# bba923c212ac4afba96f3bfe702e9cda
msgid "Normalizes to: A Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:421
# 894bcea2ed9c454ca7cbb72ef832ba01
msgid "Validates that the given value is either a ``datetime.datetime``, ``datetime.date`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:429
# 158f94a3457b4835a051a127701f5a3f
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:445
#: ../../ref/models/fields.txt:443
# 6e51a4e0a3894375b88876617ffd7552
# f99fef253b44444a99ccb5d490852ceb
msgid "``DecimalField``"
msgstr ""

#: ../../ref/forms/fields.txt:451
# 01d52d9d87834d64937cacc8feeb1bdc
msgid "Normalizes to: A Python ``decimal``."
msgstr ""

#: ../../ref/forms/fields.txt:452
# 37d6de52ddbb41a1be259e38d6ef03ce
msgid "Validates that the given value is a decimal. Leading and trailing whitespace is ignored."
msgstr ""

#: ../../ref/forms/fields.txt:454
# a64f2618aa9c4e23841f0b0149a33ab0
msgid "Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, ``max_digits``, ``max_decimal_places``, ``max_whole_digits``"
msgstr ""

#: ../../ref/forms/fields.txt:458
#: ../../ref/forms/fields.txt:608
# b8789f00f77c4b80a5383e891349c237
# b7b4a5af32194e12a620d56d8a128f5f
msgid "The ``max_value`` and ``min_value`` error messages may contain ``%(limit_value)s``, which will be substituted by the appropriate limit."
msgstr ""

#: ../../ref/forms/fields.txt:461
# 99537f9403884487a39babdaef6476b1
msgid "Takes four optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:466
# 07a0ce91f6614a2fa04bef0d1e0cbe79
msgid "These control the range of values permitted in the field, and should be given as ``decimal.Decimal`` values."
msgstr ""

#: ../../ref/forms/fields.txt:471
# c2006b3b99b44ca680de89b383cd8a5f
msgid "The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value."
msgstr ""

#: ../../ref/forms/fields.txt:477
# ad3dcbd2722b4ac7bd37c1edde2ee5cd
msgid "The maximum number of decimal places permitted."
msgstr ""

#: ../../ref/forms/fields.txt:480
#: ../../ref/models/fields.txt:478
# 62e6ffb2fdc14303b40ae24af6135911
# b69db1e0e2f54745915b92d7f63dc1c5
msgid "``EmailField``"
msgstr ""

#: ../../ref/forms/fields.txt:487
# fba43c7e67b34c7c8c00d028b762d038
msgid "Validates that the given value is a valid email address, using a moderately complex regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:491
# e3495b0576f44421ad783b7013d448c0
msgid "Has two optional arguments for validation, ``max_length`` and ``min_length``. If provided, these arguments ensure that the string is at most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:501
#: ../../ref/models/fields.txt:485
# b4903cf1c058458ba5d907e0eb2f02f1
# 82dde43dbe844c5b9ab15f3774456182
msgid "``FileField``"
msgstr ""

#: ../../ref/forms/fields.txt:505
#: ../../ref/forms/fields.txt:579
# b3248017e4ef474e987e8df0656edf22
# c2d56d7e1b9841749c05feb9f8a84fcf
msgid "Default widget: ``ClearableFileInput``"
msgstr ""

#: ../../ref/forms/fields.txt:507
#: ../../ref/forms/fields.txt:581
# f0a258c94b414589b5b19f7f8de329fe
# f4f4b80a97434b1493a7fa45879838f1
msgid "Normalizes to: An ``UploadedFile`` object that wraps the file content and file name into a single object."
msgstr ""

#: ../../ref/forms/fields.txt:509
# a85eb04b0dd34132a3a65050e603189e
msgid "Can validate that non-empty file data has been bound to the form."
msgstr ""

#: ../../ref/forms/fields.txt:510
# af4cfd7e7b4947c18b3f3d791db5f90b
msgid "Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, ``max_length``"
msgstr ""

#: ../../ref/forms/fields.txt:513
# 69923e5de0b04662bf61cfa5b164140f
msgid "Has two optional arguments for validation, ``max_length`` and ``allow_empty_file``. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty."
msgstr ""

#: ../../ref/forms/fields.txt:518
# 1beadeb5841e4ae9ab1a9d98cdf3b4ff
msgid "To learn more about the ``UploadedFile`` object, see the :doc:`file uploads documentation </topics/http/file-uploads>`."
msgstr ""

#: ../../ref/forms/fields.txt:521
# f395a420e7f94e3da67a56b3788d4f28
msgid "When you use a ``FileField`` in a form, you must also remember to :ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:524
# cb374f4b57c34bafb841ccc66e2ba553
msgid "The ``max_length`` error refers to the length of the filename. In the error message for that key, ``%(max)d`` will be replaced with the maximum filename length and ``%(length)d`` will be replaced with the current filename length."
msgstr ""

#: ../../ref/forms/fields.txt:529
#: ../../ref/models/fields.txt:660
# 9f56a661b9834ba489c72f518490eec2
# a23a92ed436c40d99efce285e3c1dd40
msgid "``FilePathField``"
msgstr ""

#: ../../ref/forms/fields.txt:535
# 413e045f895a4d3da9ca474668f0370b
msgid "Normalizes to: A unicode object"
msgstr ""

#: ../../ref/forms/fields.txt:536
# 8ec8a89485e84ec98598baacc396006f
msgid "Validates that the selected choice exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:539
# 10fc52dd02144e319ce6a8b7c808d7ce
msgid "The field allows choosing from files inside a certain directory. It takes three extra arguments; only ``path`` is required:"
msgstr ""

#: ../../ref/forms/fields.txt:544
# 07f1ad1dcf624aa38e4a5caed09108c2
msgid "The absolute path to the directory whose contents you want listed. This directory must exist."
msgstr ""

#: ../../ref/forms/fields.txt:549
# c75b7586f653425ba4b32c4ce772cb79
msgid "If ``False`` (the default) only the direct contents of ``path`` will be offered as choices. If ``True``, the directory will be descended into recursively and all descendants will be listed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:555
# 0443532c5936442e89d12f4835ad5d73
msgid "A regular expression pattern; only files with names matching this expression will be allowed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:559
#: ../../ref/models/fields.txt:701
# 2343818284284045bc2f6a1e87478758
# d8c4b2e95f01461fbb6d7ec141225d27
msgid "``FloatField``"
msgstr ""

#: ../../ref/forms/fields.txt:565
# 3f8804ec2a4c4fdca39eaefe61792174
msgid "Normalizes to: A Python float."
msgstr ""

#: ../../ref/forms/fields.txt:566
# 14d6f398f4d54bb49d0d1a9bb8b82e8c
msgid "Validates that the given value is an float. Leading and trailing whitespace is allowed, as in Python's ``float()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:568
#: ../../ref/forms/fields.txt:605
# 8828b9df6c2e4ddc97010dc8cdf19962
# 30902cf43b114c848b30a22710398f46
msgid "Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``"
msgstr ""

#: ../../ref/forms/fields.txt:571
# 49e46ab0fa0046e08c6e786f5334a758
msgid "Takes two optional arguments for validation, ``max_value`` and ``min_value``. These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:575
#: ../../ref/models/fields.txt:721
# d6b8fddbc6fc487492f70b807742595b
# ef97754c2fdf481c9140edd6a01da5eb
msgid "``ImageField``"
msgstr ""

#: ../../ref/forms/fields.txt:583
# da96dde7af364b259733acf0de601b53
msgid "Validates that file data has been bound to the form, and that the file is of an image format understood by PIL."
msgstr ""

#: ../../ref/forms/fields.txt:585
# 57cb1d5e43a846479a267c14142ecac5
msgid "Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, ``invalid_image``"
msgstr ""

#: ../../ref/forms/fields.txt:588
# 201094b502bd4aeba5484f834db34ca9
msgid "Using an ImageField requires that the `Python Imaging Library`_ is installed."
msgstr ""

#: ../../ref/forms/fields.txt:590
# 0150763499e04882a5d03df8e87bf907
msgid "When you use an ``ImageField`` on a form, you must also remember to :ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:596
#: ../../ref/models/fields.txt:754
# ec339bc887b64929965f8842a52291cc
# cce378b32e804ce9b05b2cd20801c7ea
msgid "``IntegerField``"
msgstr ""

#: ../../ref/forms/fields.txt:602
# 95242813638247f4ab419ddc2f5ee855
msgid "Normalizes to: A Python integer or long integer."
msgstr ""

#: ../../ref/forms/fields.txt:603
# 55e128a0a22f47f7b48717445351e77a
msgid "Validates that the given value is an integer. Leading and trailing whitespace is allowed, as in Python's ``int()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:611
# 4544cba5341447fe91f6f04864a9828c
msgid "Takes two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:616
# 83f92a4e25ed4ef2b522c91b1b68d5ac
msgid "These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:619
#: ../../ref/models/fields.txt:762
# a784e2948cf6498b8531d45335eeddef
# 6c31edf85da149f4a9c5a7a54403020e
msgid "``IPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:626
# e3cdcfda5fb54c03a2c5e1d1babfe96d
msgid "Validates that the given value is a valid IPv4 address, using a regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:631
#: ../../ref/models/fields.txt:770
# 250dd56ac7d5481b8ee063615a84577a
# e200873c4e19410599c727c5b3dcc5a7
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:637
# 03d263beb72a472c9f3cbd86987e8f41
msgid "A field containing either an IPv4 or an IPv6 address."
msgstr ""

#: ../../ref/forms/fields.txt:641
# bad3b01953014f699e765b61c1ebd422
msgid "Normalizes to: A Unicode object. IPv6 addresses are normalized as described below."
msgstr ""

#: ../../ref/forms/fields.txt:643
# 48e091923d3e4ae396d8037b10e16f8d
msgid "Validates that the given value is a valid IP address."
msgstr ""

#: ../../ref/forms/fields.txt:646
#: ../../ref/models/fields.txt:780
# 0e33a48bb368463096fb0b32f82ae44b
# f7534a7452d146fe928433a2fe9e71c7
msgid "The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All characters are converted to lowercase."
msgstr ""

#: ../../ref/forms/fields.txt:652
#: ../../ref/forms/fields.txt:893
# ea266f2f08b549f0af338d27fa58accc
# dbb936b0357548868a2804f673d88915
msgid "Takes two optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:656
# 53258a50982445d7b6bb4f66490ce6f0
msgid "Limits valid inputs to the specified protocol. Accepted values are ``both`` (default), ``IPv4`` or ``IPv6``. Matching is case insensitive."
msgstr ""

#: ../../ref/forms/fields.txt:662
#: ../../ref/models/fields.txt:794
# abbdc00d4f81423785d2cb31a84ad8ec
# 492f4b35c6714882a81465b1ce655844
msgid "Unpacks IPv4 mapped addresses like ``::ffff::192.0.2.1``. If this option is enabled that address would be unpacked to ``192.0.2.1``. Default is disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""

#: ../../ref/forms/fields.txt:668
# 0174a21078534c26be3b6d9017e0dec6
msgid "``MultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:672
#: ../../ref/forms/fields.txt:694
#: ../../ref/forms/fields.txt:979
# e117ca9ff73947e09a1172b81c739cde
# 223b6975453046b8b2e53fea1a5b7269
# 6dd0b1d7f62a49f3891ade6ecca4f396
msgid "Default widget: ``SelectMultiple``"
msgstr ""

#: ../../ref/forms/fields.txt:673
#: ../../ref/forms/fields.txt:980
# 069db0f582c74499ae18b77a667f1ae7
# e5256662d545438698e8d5edb9a10445
msgid "Empty value: ``[]`` (an empty list)"
msgstr ""

#: ../../ref/forms/fields.txt:674
# fa94d8f47b634690b64748bf77390a9a
msgid "Normalizes to: A list of Unicode objects."
msgstr ""

#: ../../ref/forms/fields.txt:675
# 7b90a584a24349728b532e2edb583cb2
msgid "Validates that every value in the given list of values exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:677
# d3340ffe48e44d40b917670bf6545489
msgid "Error message keys: ``required``, ``invalid_choice``, ``invalid_list``"
msgstr ""

#: ../../ref/forms/fields.txt:682
# 08fb50de22de4121a79865a2bb021ff6
msgid "Takes one extra required argument, ``choices``, as for ``ChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:685
# 3359c2513e6b4e2f9c3db22b7bdda868
msgid "``TypedMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:691
# 4a2084cd79d04270b641f169df159ddb
msgid "Just like a :class:`MultipleChoiceField`, except :class:`TypedMultipleChoiceField` takes two extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:696
# 8ef24b3f09a0459ea7c705fc0b5dbc8d
msgid "Normalizes to: A list of values of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:698
# 12f08655c46d458289c409dcd6e85e67
msgid "Validates that the given values exists in the list of choices and can be coerced."
msgstr ""

#: ../../ref/forms/fields.txt:705
# 31382bc040dd4e539a5c16ba116e1929
msgid "Takes two extra arguments, ``coerce`` and ``empty_value``, as for ``TypedChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:708
#: ../../ref/models/fields.txt:800
# 414fd4e4fed642a094308ae7c24174c9
# 74e18da4709240c5a873708a32604653
msgid "``NullBooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:712
# 978ebc86c57b48ddbdc83140683e45d3
msgid "Default widget: ``NullBooleanSelect``"
msgstr ""

#: ../../ref/forms/fields.txt:714
# 5df808e37f134a53b96d13e2a1478998
msgid "Normalizes to: A Python ``True``, ``False`` or ``None`` value."
msgstr ""

#: ../../ref/forms/fields.txt:715
# 99a8c7a7abb14af6bae977030fb8c544
msgid "Validates nothing (i.e., it never raises a ``ValidationError``)."
msgstr ""

#: ../../ref/forms/fields.txt:718
# d5b60d0bdf964970b684e157765db0f7
msgid "``RegexField``"
msgstr ""

#: ../../ref/forms/fields.txt:725
# 7e087025f23c4936850bf57a5f789b01
msgid "Validates that the given value matches against a certain regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:729
# f9718be65e93456ea02b4ad6504312a2
msgid "Takes one required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:733
# 4a436f286a814fccbc96d4f8dc4ca661
msgid "A regular expression specified either as a string or a compiled regular expression object."
msgstr ""

#: ../../ref/forms/fields.txt:736
# 09ee199b04fa4b4fa11a76e090a5ca39
msgid "Also takes ``max_length`` and ``min_length``, which work just as they do for ``CharField``."
msgstr ""

#: ../../ref/forms/fields.txt:739
# e526211285d94f84a3c4456a03f70b20
msgid "The optional argument ``error_message`` is also accepted for backwards compatibility. The preferred way to provide an error message is to use the ``error_messages`` argument, passing a dictionary with ``'invalid'`` as a key and the error message as the value."
msgstr ""

#: ../../ref/forms/fields.txt:745
#: ../../ref/models/fields.txt:825
# bda9a217b714424d93098d4a1e931dc5
# bb9781c9bb0d45b4a019122afb1df65d
msgid "``SlugField``"
msgstr ""

#: ../../ref/forms/fields.txt:752
# 1bc3fdf86d5a458cbb1456d131987c20
msgid "Validates that the given value contains only letters, numbers, underscores, and hyphens."
msgstr ""

#: ../../ref/forms/fields.txt:754
# 306772583071493da1ac046b28fc6945
msgid "Error messages: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:756
# 06a31849ded745869059a4bf91549d64
msgid "This field is intended for use in representing a model :class:`~django.db.models.SlugField` in forms."
msgstr ""

#: ../../ref/forms/fields.txt:760
#: ../../ref/models/fields.txt:868
# cdf64ad6320f4374997edc0798b51230
# d873274c203d43e1bc4c2b6f7c08e2f1
msgid "``TimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:766
# 527e2ef8dc8a41d095227a6bb23b5058
msgid "Normalizes to: A Python ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:767
# 53e8f88294434d4fb58bd8a644e7e23d
msgid "Validates that the given value is either a ``datetime.time`` or string formatted in a particular time format."
msgstr ""

#: ../../ref/forms/fields.txt:775
#: ../../ref/forms/fields.txt:905
# 6f0ac5af91a04bb2bc7fce178ebea241
# 3e71adf49e564efebe181d4022d7487d
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:784
#: ../../ref/models/fields.txt:879
# b273848c0e1b4d9dab8a14b99d752131
# 0353efb4edff49138fb0f4aa8b62d6b2
msgid "``URLField``"
msgstr ""

#: ../../ref/forms/fields.txt:791
# 7f2fc1b9937e4e879f10487c4618b98f
msgid "Validates that the given value is a valid URL."
msgstr ""

#: ../../ref/forms/fields.txt:792
# 178fc5cde7c742778d1aaab0da3bf8c4
msgid "Error message keys: ``required``, ``invalid``, ``invalid_link``"
msgstr ""

#: ../../ref/forms/fields.txt:794
# ef8baba8022149b1b032b82baccb51a2
msgid "Takes the following optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:799
# 739d764b2b984e91a5f237c6d8d2ca72
msgid "These are the same as ``CharField.max_length`` and ``CharField.min_length``."
msgstr ""

#: ../../ref/forms/fields.txt:803
# 87d7ab02cf8247ed938cda6f01fcc2bc
msgid "If ``True``, the validator will attempt to load the given URL, raising ``ValidationError`` if the page gives a 404. Defaults to ``False``."
msgstr ""

#: ../../ref/forms/fields.txt:812
# 39893cbdf3724016995f7ca295fba130
msgid "String used as the user-agent used when checking for a URL's existence. Defaults to the value of the :setting:`URL_VALIDATOR_USER_AGENT` setting."
msgstr ""

#: ../../ref/forms/fields.txt:822
# e2cb25442b124477aade354d9159992f
msgid "Slightly complex built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:825
# 4cce8fc6ae8a4dcfa5e44a4a95302041
msgid "``ComboField``"
msgstr ""

#: ../../ref/forms/fields.txt:832
# 575b3d4d510646c7944314259a068bd9
msgid "Validates that the given value against each of the fields specified as an argument to the ``ComboField``."
msgstr ""

#: ../../ref/forms/fields.txt:840
# 5faf39da78ae488c91372e72a3e7e393
msgid "The list of fields that should be used to validate the field's value (in the order in which they are provided)."
msgstr ""

#: ../../ref/forms/fields.txt:852
# 8dc3871757a04a718f4434dcfa952361
msgid "``MultiValueField``"
msgstr ""

#: ../../ref/forms/fields.txt:858
# 38392661ccb34cc1b454d3bc1393d205
msgid "Normalizes to: the type returned by the ``compress`` method of the subclass."
msgstr ""

#: ../../ref/forms/fields.txt:859
# 02032964e3f848aa9bbda08e14454264
msgid "Validates that the given value against each of the fields specified as an argument to the ``MultiValueField``."
msgstr ""

#: ../../ref/forms/fields.txt:863
# 98ea550c13e147b188e0693fc72d87df
msgid "This abstract field (must be subclassed) aggregates the logic of multiple fields. Subclasses should not have to implement clean(). Instead, they must implement compress(), which takes a list of valid values and returns a \"compressed\" version of those values -- a single value.  For example, :class:`SplitDateTimeField` is a subclass which combines a time field and a date field into a datetime object."
msgstr ""

#: ../../ref/forms/fields.txt:874
# e098100d24fe4d92956fba24d5a0a21b
msgid "A list of fields which are cleaned into a single field. Each value in ``clean`` is cleaned by the corresponding field in ``fields`` -- the first value is cleaned by the first field, the second value is cleaned by the second field, etc.  Once all fields are cleaned, the list of clean values is \"compressed\" into a single value."
msgstr ""

#: ../../ref/forms/fields.txt:881
# a874c374260e4baca3fa488202214a9b
msgid "``SplitDateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:885
# c63f26aec8db4e38831109f68890199d
msgid "Default widget: ``SplitDateTimeWidget``"
msgstr ""

#: ../../ref/forms/fields.txt:888
# d531b83c0b2246aa9c534815a3e376f9
msgid "Validates that the given value is a ``datetime.datetime`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:890
# 0920289704c244e38c194911841482df
msgid "Error message keys: ``required``, ``invalid``, ``invalid_date``, ``invalid_time``"
msgstr ""

#: ../../ref/forms/fields.txt:900
# 78d2dc46068e4347add09e338dff214b
msgid "If no ``input_date_formats`` argument is provided, the default input formats for ``DateField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:908
# 6fcee455afa047379d9163c517137c00
msgid "If no ``input_time_formats`` argument is provided, the default input formats for ``TimeField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:912
# e42b1557b092484a8a3446b3e79b3527
msgid "Fields which handle relationships"
msgstr ""

#: ../../ref/forms/fields.txt:914
# 420e7d71427c4d64aa58c78a02456b76
msgid "Two fields are available for representing relationships between models: :class:`ModelChoiceField` and :class:`ModelMultipleChoiceField`.  Both of these fields require a single ``queryset`` parameter that is used to create the choices for the field.  Upon form validation, these fields will place either one model object (in the case of ``ModelChoiceField``) or multiple model objects (in the case of ``ModelMultipleChoiceField``) into the ``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/fields.txt:924
# e5af3b97eff6471385ec1eb01f724889
msgid "``ModelChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:930
# f109b5af8a4b492a9cc20d5bed53d3d9
msgid "Normalizes to: A model instance."
msgstr ""

#: ../../ref/forms/fields.txt:931
# b2e5932a64db4b1e87eafc968aadab96
msgid "Validates that the given id exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:934
# eaae83b9bf3540448ed332f78145c2f0
msgid "Allows the selection of a single model object, suitable for representing a foreign key.  A single argument is required:"
msgstr ""

#: ../../ref/forms/fields.txt:939
#: ../../ref/forms/fields.txt:994
# 550b929b493a4e729b3c51a508b0e677
# a4259814633f4289a70286a631b37bf4
msgid "A ``QuerySet`` of model objects from which the choices for the field will be derived, and which will be used to validate the user's selection."
msgstr ""

#: ../../ref/forms/fields.txt:943
# 8386c22f9df646a8970f1ffc7fd8fa4c
msgid "``ModelChoiceField`` also takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:947
# c0fecd8fe1f745c1bffb0780cec6fbba
msgid "By default the ``<select>`` widget used by ``ModelChoiceField`` will have an empty choice at the top of the list. You can change the text of this label (which is ``\"---------\"`` by default) with the ``empty_label`` attribute, or you can disable the empty label entirely by setting ``empty_label`` to ``None``::"
msgstr ""

#: ../../ref/forms/fields.txt:959
# c2332e6aaf19408ebd31261a6b2c807e
msgid "Note that if a ``ModelChoiceField`` is required and has a default initial value, no empty choice is created (regardless of the value of ``empty_label``)."
msgstr ""

#: ../../ref/forms/fields.txt:963
# b76c9b83048643ebb2b63a799cb302de
msgid "The ``__unicode__`` method of the model will be called to generate string representations of the objects for use in the field's choices; to provide customized representations, subclass ``ModelChoiceField`` and override ``label_from_instance``. This method will receive a model object, and should return a string suitable for representing it. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:975
# 25d998ed33ae449ebd6c424529d6b9f7
msgid "``ModelMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:981
# e28e77d528914fd6baf0462119ba0373
msgid "Normalizes to: A list of model instances."
msgstr ""

#: ../../ref/forms/fields.txt:982
# 934aae9af7634cdb958b17bd68bb8b1c
msgid "Validates that every id in the given list of values exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:984
# 6a3b2a5878d44fe99c5188fa07c701c3
msgid "Error message keys: ``required``, ``list``, ``invalid_choice``, ``invalid_pk_value``"
msgstr ""

#: ../../ref/forms/fields.txt:987
# 7e7c6ce8903b486e8efc8d8329b31958
msgid "Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with :class:`ModelChoiceField`, you can use ``label_from_instance`` to customize the object representations, and ``queryset`` is a required parameter:"
msgstr ""

#: ../../ref/forms/fields.txt:999
# 64c2f727d972435890b899df7eb6f068
msgid "Creating custom fields"
msgstr ""

#: ../../ref/forms/fields.txt:1001
# 2cde52bb875b419d9e13ad1bc043e16a
msgid "If the built-in ``Field`` classes don't meet your needs, you can easily create custom ``Field`` classes. To do this, just create a subclass of ``django.forms.Field``. Its only requirements are that it implement a ``clean()`` method and that its ``__init__()`` method accept the core arguments mentioned above (``required``, ``label``, ``initial``, ``widget``, ``help_text``)."
msgstr ""

#: ../../ref/forms/index.txt:3
# fe652c725cce49ad9583dc944eafc4d4
msgid "Forms"
msgstr ""

#: ../../ref/forms/index.txt:5
# 214b8c2a853543f28d210626ad2bcd82
msgid "Detailed form API reference. For introductory material, see :doc:`/topics/forms/index`."
msgstr ""

#: ../../ref/forms/validation.txt:2
# 41e19ab367a44d258dc586912de6c59d
msgid "Form and field validation"
msgstr ""

#: ../../ref/forms/validation.txt:6
# 5862255cbb644db59803df74cd45e173
msgid "Form validation happens when the data is cleaned. If you want to customize this process, there are various places you can change, each one serving a different purpose. Three types of cleaning methods are run during form processing. These are normally executed when you call the ``is_valid()`` method on a form. There are other things that can trigger cleaning and validation (accessing the ``errors`` attribute or calling ``full_clean()`` directly), but normally they won't be needed."
msgstr ""

#: ../../ref/forms/validation.txt:14
# 92186a517bba4f1e8b3399eb0e7dd2c1
msgid "In general, any cleaning method can raise ``ValidationError`` if there is a problem with the data it is processing, passing the relevant error message to the ``ValidationError`` constructor. If no ``ValidationError`` is raised, the method should return the cleaned (normalized) data as a Python object."
msgstr ""

#: ../../ref/forms/validation.txt:19
# a6afdaa73e75469f985716161ff480b1
msgid "If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the ``ValidationError`` constructor."
msgstr ""

#: ../../ref/forms/validation.txt:23
# 716707140abe4e5ca5f1ac7a8c625546
msgid "Most validation can be done using `validators`_ - simple helpers that can be reused easily. Validators are simple functions (or callables) that take a single argument and raise ``ValidationError`` on invalid input. Validators are run after the field's ``to_python`` and ``validate`` methods have been called."
msgstr ""

#: ../../ref/forms/validation.txt:28
# b39242d0c5f042a9830a83ea27da3d27
msgid "Validation of a Form is split into several steps, which can be customized or overridden:"
msgstr ""

#: ../../ref/forms/validation.txt:31
# 6ec24d8c6873484d9ebb61e6aff01577
msgid "The ``to_python()`` method on a Field is the first step in every validation. It coerces the value to correct datatype and raises ``ValidationError`` if that is not possible. This method accepts the raw value from the widget and returns the converted value. For example, a FloatField will turn the data into a Python ``float`` or raise a ``ValidationError``."
msgstr ""

#: ../../ref/forms/validation.txt:38
# ff68d5003b634335b2af67037b254875
msgid "The ``validate()`` method on a Field handles field-specific validation that is not suitable for a validator, It takes a value that has been coerced to correct datatype and raises ``ValidationError`` on any error. This method does not return anything and shouldn't alter the value. You should override it to handle validation logic that you can't or don't want to put in a validator."
msgstr ""

#: ../../ref/forms/validation.txt:45
# cdb7e17d2da1462aa4a998521b72b89b
msgid "The ``run_validators()`` method on a Field runs all of the field's validators and aggregates all the errors into a single ``ValidationError``. You shouldn't need to override this method."
msgstr ""

#: ../../ref/forms/validation.txt:49
# 0877ca093bf64766a3e7ee9cf94e7eb6
msgid "The ``clean()`` method on a Field subclass. This is responsible for running ``to_python``, ``validate`` and ``run_validators`` in the correct order and propagating their errors. If, at any time, any of the methods raise ``ValidationError``, the validation stops and that error is raised. This method returns the clean data, which is then inserted into the ``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/validation.txt:56
# be3091cbb4c345f4944b01fc456f1d83
msgid "The ``clean_<fieldname>()`` method in a form subclass -- where ``<fieldname>`` is replaced with the name of the form field attribute. This method does any cleaning that is specific to that particular attribute, unrelated to the type of field that it is. This method is not passed any parameters. You will need to look up the value of the field in ``self.cleaned_data`` and remember that it will be a Python object at this point, not the original string submitted in the form (it will be in ``cleaned_data`` because the general field ``clean()`` method, above, has already cleaned the data once)."
msgstr ""

#: ../../ref/forms/validation.txt:66
# 6e790d1d3b1b46c08e5c3a9424a6ec2f
msgid "For example, if you wanted to validate that the contents of a ``CharField`` called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the right place to do this. You don't need a specific field (it's just a ``CharField``), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data."
msgstr ""

#: ../../ref/forms/validation.txt:73
# 412a43b179fa430a89b044d5efed3d03
msgid "Just like the general field ``clean()`` method, above, this method should return the cleaned data, regardless of whether it changed anything or not."
msgstr ""

#: ../../ref/forms/validation.txt:77
# fec4903155c240818aef3f4d1499abb3
msgid "The Form subclass's ``clean()`` method. This method can perform any validation that requires access to multiple fields from the form at once. This is where you might put in things to check that if field ``A`` is supplied, field ``B`` must contain a valid email address and the like. The data that this method returns is the final ``cleaned_data`` attribute for the form, so don't forget to return the full list of cleaned data if you override this method (by default, ``Form.clean()`` just returns ``self.cleaned_data``)."
msgstr ""

#: ../../ref/forms/validation.txt:86
# a7f17fe6bdb842678d100ee39da35387
msgid "Note that any errors raised by your ``Form.clean()`` override will not be associated with any field in particular. They go into a special \"field\" (called ``__all__``), which you can access via the ``non_field_errors()`` method if you need to. If you want to attach errors to a specific field in the form, you will need to access the ``_errors`` attribute on the form, which is `described later`_."
msgstr ""

#: ../../ref/forms/validation.txt:93
# 6b3c0439221240a3887de85462a008de
msgid "Also note that there are special considerations when overriding the ``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""

#: ../../ref/forms/validation.txt:98
# d3c8187d137a4b64b6d58614aa881a27
msgid "These methods are run in the order given above, one field at a time.  That is, for each field in the form (in the order they are declared in the form definition), the ``Field.clean()`` method (or its override) is run, then ``clean_<fieldname>()``. Finally, once those two methods are run for every field, the ``Form.clean()`` method, or its override, is executed."
msgstr ""

#: ../../ref/forms/validation.txt:104
# 5c6983c780ec42e788b9d38d7e8756e0
msgid "Examples of each of these methods are provided below."
msgstr ""

#: ../../ref/forms/validation.txt:106
# cb4d400b46b04cf7ac641f7c6cd44f2f
msgid "As mentioned, any of these methods can raise a ``ValidationError``. For any field, if the ``Field.clean()`` method raises a ``ValidationError``, any field-specific cleaning method is not called. However, the cleaning methods for all remaining fields are still executed."
msgstr ""

#: ../../ref/forms/validation.txt:111
# 23b94f08c86f4bcdae2680e42482bbc8
msgid "The ``clean()`` method for the ``Form`` class or subclass is always run. If that method raises a ``ValidationError``, ``cleaned_data`` will be an empty dictionary."
msgstr ""

#: ../../ref/forms/validation.txt:115
# 81ba1a1a6d5b49ec9abd567209a316f9
msgid "The previous paragraph means that if you are overriding ``Form.clean()``, you should iterate through ``self.cleaned_data.items()``, possibly considering the ``_errors`` dictionary attribute on the form as well. In this way, you will already know which fields have passed their individual validation requirements."
msgstr ""

#: ../../ref/forms/validation.txt:123
# 20bc3b3909894671a6b5d0423365d674
msgid "Form subclasses and modifying field errors"
msgstr ""

#: ../../ref/forms/validation.txt:125
# c94fe7b3027d4e528d2db91ee50bf46b
msgid "Sometimes, in a form's ``clean()`` method, you will want to add an error message to a particular field in the form. This won't always be appropriate and the more typical situation is to raise a ``ValidationError`` from ``Form.clean()``, which is turned into a form-wide error that is available through the ``Form.non_field_errors()`` method."
msgstr ""

#: ../../ref/forms/validation.txt:131
# a468e3c4810a42c191245965ae9abd31
msgid "When you really do need to attach the error to a particular field, you should store (or amend) a key in the ``Form._errors`` attribute. This attribute is an instance of a ``django.forms.util.ErrorDict`` class. Essentially, though, it's just a dictionary. There is a key in the dictionary for each field in the form that has an error. Each value in the dictionary is a ``django.forms.util.ErrorList`` instance, which is a list that knows how to display itself in different ways. So you can treat ``_errors`` as a dictionary mapping field names to lists."
msgstr ""

#: ../../ref/forms/validation.txt:140
# 17d504b123f54296a47825ee12af566a
msgid "If you want to add a new error to a particular field, you should check whether the key already exists in ``self._errors`` or not. If not, create a new entry for the given key, holding an empty ``ErrorList`` instance. In either case, you can then append your error message to the list for the field name in question and it will be displayed when the form is displayed."
msgstr ""

#: ../../ref/forms/validation.txt:146
# bb97fe0387844e02965d5a10abee766a
msgid "There is an example of modifying ``self._errors`` in the following section."
msgstr ""

#: ../../ref/forms/validation.txt:150
# 1ce8bca830a04b4bb8424230763b130e
msgid "You may be wondering why is this attribute called ``_errors`` and not ``errors``. Normal Python practice is to prefix a name with an underscore if it's not for external usage. In this case, you are subclassing the ``Form`` class, so you are essentially writing new internals. In effect, you are given permission to access some of the internals of ``Form``."
msgstr ""

#: ../../ref/forms/validation.txt:156
# a8cd62359c2a4e648fdbe9b33583f48a
msgid "Of course, any code outside your form should never access ``_errors`` directly. The data is available to external code through the ``errors`` property, which populates ``_errors`` before returning it)."
msgstr ""

#: ../../ref/forms/validation.txt:160
# 157bc0fdf40140e0a3f3e639b80802a0
msgid "Another reason is purely historical: the attribute has been called ``_errors`` since the early days of the forms module and changing it now (particularly since ``errors`` is used for the read-only property name) would be inconvenient for a number of reasons. You can use whichever explanation makes you feel more comfortable. The result is the same."
msgstr ""

#: ../../ref/forms/validation.txt:167
# 2bb8aa33aa08423db40153a48abd695d
msgid "Using validation in practice"
msgstr ""

#: ../../ref/forms/validation.txt:169
# 3f3ef61ac784446b85fcd691af56ad1e
msgid "The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features."
msgstr ""

#: ../../ref/forms/validation.txt:177
# 596d040026d24d8e96ce811a21319d93
msgid "Using validators"
msgstr ""

#: ../../ref/forms/validation.txt:180
# b29d75b80f5d42cfb7868ba5dd7bdc65
msgid "Django's form (and model) fields support use of simple utility functions and classes known as validators. These can be passed to a field's constructor, via the field's ``validators`` argument, or defined on the Field class itself with the ``default_validators`` attribute."
msgstr ""

#: ../../ref/forms/validation.txt:185
# d25439493ba34a758e49def575f1e60c
msgid "Simple validators can be used to validate values inside the field, let's have a look at Django's ``EmailField``::"
msgstr ""

#: ../../ref/forms/validation.txt:194
# 4e46f56df91c408385bf327deec0835b
msgid "As you can see, ``EmailField`` is just a ``CharField`` with customized error message and a validator that validates email addresses. This can also be done on field definition so::"
msgstr ""

#: ../../ref/forms/validation.txt:200
# 6b4ed46ccd9345abb273672e6924ea8a
msgid "is equivalent to::"
msgstr ""

#: ../../ref/forms/validation.txt:207
# dc5303424037494bbe9dbe80098bcc59
msgid "Form field default cleaning"
msgstr ""

#: ../../ref/forms/validation.txt:209
# eedb381de6a246148e6c524f50397ad5
msgid "Let's firstly create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:233
# 4a055a12000a4ec298ade3b04733bfc6
msgid "Every form that uses this field will have these methods run before anything else can be done with the field's data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used."
msgstr ""

#: ../../ref/forms/validation.txt:237
# 65e78551722f4bc1a2b0914255106df1
msgid "Let's create a simple ``ContactForm`` to demonstrate how you'd use this field::"
msgstr ""

#: ../../ref/forms/validation.txt:247
# 81e5a976a3d94cb5a452e6208202658d
msgid "Simply use ``MultiEmailField`` like any other form field. When the ``is_valid()`` method is called on the form, the ``MultiEmailField.clean()`` method will be run as part of the cleaning process and it will, in turn, call the custom ``to_python()`` and ``validate()`` methods."
msgstr ""

#: ../../ref/forms/validation.txt:253
# f34ba65a297243d7816b40074f38cfc3
msgid "Cleaning a specific field attribute"
msgstr ""

#: ../../ref/forms/validation.txt:255
# eee871d058984aae9dfc1a0934bffe6b
msgid "Continuing on from the previous example, suppose that in our ``ContactForm``, we want to make sure that the ``recipients`` field always contains the address ``\"fred@example.com\"``. This is validation that is specific to our form, so we don't want to put it into the general ``MultiEmailField`` class. Instead, we write a cleaning method that operates on the ``recipients`` field, like so::"
msgstr ""

#: ../../ref/forms/validation.txt:275
# 4fc106058385417ab819e1b08594b5ff
msgid "Cleaning and validating fields that depend on each other"
msgstr ""

#: ../../ref/forms/validation.txt:277
# f5500297406a4a44a1e6b76373c0a07f
msgid "Suppose we add another requirement to our contact form: if the ``cc_myself`` field is ``True``, the ``subject`` must contain the word ``\"help\"``. We are performing validation on more than one field at a time, so the form's ``clean()`` method is a good spot to do this. Notice that we are talking about the ``clean()`` method on the form here, whereas earlier we were writing a ``clean()`` method on a field. It's important to keep the field and form difference clear when working out where to validate things. Fields are single data points, forms are a collection of fields."
msgstr ""

#: ../../ref/forms/validation.txt:286
# 1ed0dcc4f53148c9ba5b2ed4d961b6a4
msgid "By the time the form's ``clean()`` method is called, all the individual field clean methods will have been run (the previous two sections), so ``self.cleaned_data`` will be populated with any data that has survived so far. So you also need to remember to allow for the fact that the fields you are wanting to validate might not have survived the initial individual field checks."
msgstr ""

#: ../../ref/forms/validation.txt:293
# a4f23732a3d44f8ab21ab273a67588c8
msgid "There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a ``ValidationError`` from the ``clean()`` method. For example::"
msgstr ""

#: ../../ref/forms/validation.txt:316
# 60d96efa5f4f4880b9da47005731fe32
msgid "In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem."
msgstr ""

#: ../../ref/forms/validation.txt:319
# ef6633d8145743caa78d82ba85c3eadd
msgid "Note that the call to ``super(ContactForm, self).clean()`` in the example code ensures that any validation logic in parent classes is maintained."
msgstr ""

#: ../../ref/forms/validation.txt:322
# 0ceecc0f219d4802b5c57f018bdce83a
msgid "The second approach might involve assigning the error message to one of the fields. In this case, let's assign an error message to both the \"subject\" and \"cc_myself\" rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We're showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:354
# 094748136829460dae8137d19b046f55
msgid "As you can see, this approach requires a bit more effort, not withstanding the extra design effort to create a sensible form display. The details are worth noting, however. Firstly, earlier we mentioned that you might need to check if the field name keys already exist in the ``_errors`` dictionary. In this case, since we know the fields exist in ``self.cleaned_data``, they must have been valid when cleaned as individual fields, so there will be no corresponding entries in ``_errors``."
msgstr ""

#: ../../ref/forms/validation.txt:362
# f4a6698eb95344f28e3baaf65f8776c1
msgid "Secondly, once we have decided that the combined data in the two fields we are considering aren't valid, we must remember to remove them from the ``cleaned_data``."
msgstr ""

#: ../../ref/forms/validation.txt:366
# fd67b7bad85c46a3bc6ebad2ef547cc0
msgid "In fact, Django will currently completely wipe out the ``cleaned_data`` dictionary if there are any errors in the form. However, this behavior may change in the future, so it's not a bad idea to clean up after yourself in the first place."
msgstr ""

#: ../../ref/forms/widgets.txt:3
# bf22cee7661f45a7bbeddc03850ba611
msgid "Widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:10
# 8111758136b3456b90469c89aef4bbb1
msgid "A widget is Django's representation of a HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:15
# 0c681792993d4b8a81b9129de815d7ba
msgid "Specifying widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:17
# bb0f4b1092a34e63b82f44f885dffd76
msgid "Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed. To find which widget is used on which field, see the documentation about :ref:`built-in fields`."
msgstr ""

#: ../../ref/forms/widgets.txt:22
# a006695dda004424bf2c42d79746a575
msgid "However, if you want to use a different widget for a field, you can just use the :attr:`~Field.widget` argument on the field definition. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:33
# a311d4b5a17a44aa85715e1f5fd3eb4c
msgid "This would specify a form with a comment that uses a larger :class:`Textarea` widget, rather than the default :class:`TextInput` widget."
msgstr ""

#: ../../ref/forms/widgets.txt:38
# 491c0cb8d5f94d1c94d173b366d635f1
msgid "Setting arguments for widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:40
# ff62b17c682949039901bebaadae3be1
msgid "Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the :attr:`~SelectDateWidget.years` attribute is set for a :class:`~django.forms.extras.widgets.SelectDateWidget`::"
msgstr ""

#: ../../ref/forms/widgets.txt:61
# a3aaf98b37cf4d92849cfa6d58c49e2b
msgid "See the :ref:`built-in widgets` for more information about which widgets are available and which arguments they accept."
msgstr ""

#: ../../ref/forms/widgets.txt:66
# 5413a032de8e4c8e83d7c9466820ab59
msgid "Widgets inheriting from the Select widget"
msgstr ""

#: ../../ref/forms/widgets.txt:68
# dd38792763e24b4580845f5d28969bd4
msgid "Widgets inheriting from the :class:`Select` widget deal with choices. They present the user with a list of options to choose from. The different widgets present this choice differently; the :class:`Select` widget itself uses a ``<select>`` HTML list representation, while :class:`RadioSelect` uses radio buttons."
msgstr ""

#: ../../ref/forms/widgets.txt:74
# f37c12527e4b4bdebf50edbf71a7dd9d
msgid ":class:`Select` widgets are used by default on :class:`ChoiceField` fields. The choices displayed on the widget are inherited from the :class:`ChoiceField` and changing :attr:`ChoiceField.choices` will update :attr:`Select.choices`. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:92
# e64b94cb747e4390851db6dcd7d036c7
msgid "Widgets which offer a :attr:`~Select.choices` attribute can however be used with fields which are not based on choice -- such as a :class:`CharField` -- but it is recommended to use a :class:`ChoiceField`-based field when the choices are inherent to the model and not just the representational widget."
msgstr ""

#: ../../ref/forms/widgets.txt:98
# dc121453f2774b38ab35f49cc6e3c1d9
msgid "Customizing widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:100
# 06080f026efc46e79218237c6a3e64ce
msgid "When Django renders a widget as HTML, it only renders the bare minimum HTML - Django doesn't add a class definition, or any other widget-specific attributes. This means that all :class:`TextInput` widgets will appear the same on your Web page."
msgstr ""

#: ../../ref/forms/widgets.txt:105
# 10337b1bc15c46fe9f92b9f0e4933bdf
msgid "If you want to make one widget look different to another, you need to specify additional attributes for each widget. When you specify a widget, you can provide a list of attributes that will be added to the rendered HTML for the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:110
# 303f900a74be44068f96f19ea35611f3
msgid "For example, take the following simple form::"
msgstr ""

#: ../../ref/forms/widgets.txt:119
# 05901499461f4d29ac0d23edd4e8e790
msgid "This form will include three default :class:`TextInput` widgets, with default rendering -- no CSS class, no extra attributes. This means that the input boxes provided for each widget will be rendered exactly the same::"
msgstr ""

#: ../../ref/forms/widgets.txt:129
# bb3d2ef40e104a5691f50036560a1eef
msgid "On a real Web page, you probably don't want every widget to look the same. You might want a larger input element for the comment, and you might want the 'name' widget to have some special CSS class. To do this, you use the :attr:`Widget.attrs` argument when creating the widget:"
msgstr ""

#: ../../ref/forms/widgets.txt:143
# 4eaadaab0d5d484db5528f89f8cb4951
msgid "Django will then include the extra attributes in the rendered output:"
msgstr ""

#: ../../ref/forms/widgets.txt:154
# 7504088d8c01450f9581da1de97fc120
msgid "Built-in widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:156
# 307c9c04f7a0435ab224b2d401698fd7
msgid "Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets:"
msgstr ""

#: ../../ref/forms/widgets.txt:160
# a630a560dfaa46e685a540d73912955d
msgid "``Widget``"
msgstr ""

#: ../../ref/forms/widgets.txt:164
# c9f22f4dd41d4fe692267dce0ca452ad
msgid "This abstract class cannot be rendered, but provides the basic attribute :attr:`~Widget.attrs`."
msgstr ""

#: ../../ref/forms/widgets.txt:168
# a76c0068cf604bd89f28838abad3af2a
msgid "A dictionary containing HTML attributes to be set on the rendered widget."
msgstr ""

#: ../../ref/forms/widgets.txt:177
# 42b77c4287d8468191bf6a663b6332e4
msgid "``TextInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:181
# e5e136d2df2a4826aefa898a88dacc1b
msgid "Text input: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:184
# c522530eadf3449c95cb2204739ebcf8
msgid "``PasswordInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:188
# 39d05806841d463080a7b3f03b2b6cad
msgid "Password input: ``<input type='password' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:194
# 53ee043220964c2abd68c08ae7c40413
msgid "Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is ``False``)."
msgstr ""

#: ../../ref/forms/widgets.txt:203
# 0bb5bf62c94b4d27b061e9580a00efb9
msgid "``HiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:207
# d3ba246cdaaa465ab7e1d78356eadcfc
msgid "Hidden input: ``<input type='hidden' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:210
# 1fc0b0beea524c5e97a8ab2d576ccf8f
msgid "``MultipleHiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:214
# 1879af8044d446cf98a43394a27d0dbb
msgid "Multiple ``<input type='hidden' ...>`` widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:216
# 7130037ff5f640d1bd6c8bc927a2340b
msgid "A widget that handles multiple hidden widgets for fields that have a list of values."
msgstr ""

#: ../../ref/forms/widgets.txt:221
#: ../../ref/forms/widgets.txt:324
# fae064d239e2414cb6c66487b77c58ca
# 68ce668ce3ae48ac8a369ccfb1e81564
msgid "This attribute is optional when the field does not have a :attr:`~Field.choices` attribute. If it does, it will override anything you set here when the attribute is updated on the :class:`Field`."
msgstr ""

#: ../../ref/forms/widgets.txt:226
# a026bd9f0ea4451699f262250dc90911
msgid "``FileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:230
# 658054d6bfd94e4899147a25f0fc871c
msgid "File upload input: ``<input type='file' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:233
# 396748cacb4147298ee7b9cf3aeed05c
msgid "``ClearableFileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:239
# 10e76609584641c7b77c46fda8e89992
msgid "File upload input: ``<input type='file' ...>``, with an additional checkbox input to clear the field's value, if the field is not required and has initial data."
msgstr ""

#: ../../ref/forms/widgets.txt:244
# c972a9985a814d9da7055a8002cf23ba
msgid "``DateInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:248
# 8cf14c23a81c4052b50eeb91b100c990
msgid "Date input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:254
#: ../../ref/forms/widgets.txt:271
#: ../../ref/forms/widgets.txt:288
# 47eff8846cbe4f65a37c2a982ed7920c
# 0ed350af0d2a4a82a767445f0703d735
# e2d4ceeb1ae74664ae7a4a093f7cb68c
msgid "The format in which this field's initial value will be displayed."
msgstr ""

#: ../../ref/forms/widgets.txt:256
# f543b05fba1442eeb2633dfd5fdf756c
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`DATE_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:261
# 8d8f56e550f246db9135e4621c4cde73
msgid "``DateTimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:265
# 8862a496a19447fea8ee9ac82b75b2dd
msgid "Date/time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:273
# 9b2cb6c32c0443d3be8451b8adabeb22
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`DATETIME_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:278
# 50570bf707984e95aef1e8fae7efe37e
msgid "``TimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:282
# 9ea860bbe5cb475b858d040267dd5455
msgid "Time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:290
# 2c5b9daa930a433dae0d24f26a902c5d
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`TIME_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:295
# 5b2e50a451a547b39fa8090f25653691
msgid "``Textarea``"
msgstr ""

#: ../../ref/forms/widgets.txt:299
# 470bbf972c3045e4a0ad3928a1a8ecfc
msgid "Text area: ``<textarea>...</textarea>``"
msgstr ""

#: ../../ref/forms/widgets.txt:302
# 716e692ac02f4a4487d0d1a6a8d561f4
msgid "``CheckboxInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:306
# ee1b216ca1bc4d56a43e79b89df9868e
msgid "Checkbox: ``<input type='checkbox' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:312
# 4efe90c267694e8895ce334f24d17dcd
msgid "A callable that takes the value of the CheckBoxInput and returns ``True`` if the checkbox should be checked for that value."
msgstr ""

#: ../../ref/forms/widgets.txt:316
# 7687fe30ddb9427e950ec822cb5c3cd4
msgid "``Select``"
msgstr ""

#: ../../ref/forms/widgets.txt:320
# 9c7d9ab85814454d953246740fdcfc34
msgid "Select widget: ``<select><option ...>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:329
# be2956d9b5d64aad93e7ecc25f5080ba
msgid "``NullBooleanSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:333
# 5f3bc5b0c5434e8aab904d82b95d5516
msgid "Select widget with options 'Unknown', 'Yes' and 'No'"
msgstr ""

#: ../../ref/forms/widgets.txt:336
# 29cfaa23a53044d09237b2afab9f2b0d
msgid "``SelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:340
# 73a2389184984552a1b014f8efee59e9
msgid "Similar to :class:`Select`, but allows multiple selection: ``<select multiple='multiple'>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:344
# 309e70c9d03b4d8fb76d507bf1e29deb
msgid "``RadioSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:348
# 3a35920fd9ea4c9e82d82ae0df5ccef0
msgid "Similar to :class:`Select`, but rendered as a list of radio buttons within ``<li>`` tags:"
msgstr ""

#: ../../ref/forms/widgets.txt:360
# f53cea0e6ad648fc840d12ce227fab4a
msgid "For more granular control over the generated markup, you can loop over the radio buttons in the template. Assuming a form ``myform`` with a field ``beatles`` that uses a ``RadioSelect`` as its widget:"
msgstr ""

#: ../../ref/forms/widgets.txt:372
# 1cd4066310b641e3b00968839a8f1d90
msgid "This would generate the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:389
# b45387b65b4d4851991dde2006c9d468
msgid "That included the ``<label>`` tags. To get more granular, you can use each radio button's ``tag`` and ``choice_label`` attributes. For example, this template..."
msgstr ""

#: ../../ref/forms/widgets.txt:401
# 3db5ef3109c2485f892ad04365e38f6a
msgid "...will result in the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:422
# 020afcc07d474319af49c7dd69576eae
msgid "If you decide not to loop over the radio buttons -- e.g., if your template simply includes ``{{ myform.beatles }}`` -- they'll be output in a ``<ul>`` with ``<li>`` tags, as above."
msgstr ""

#: ../../ref/forms/widgets.txt:426
# d9fdea2f97294a01b9da2f970856bd52
msgid "``CheckboxSelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:430
# 1c20739f23834522ad14881e5393559f
msgid "Similar to :class:`SelectMultiple`, but rendered as a list of check buttons:"
msgstr ""

#: ../../ref/forms/widgets.txt:441
# 0953676a96b34d36bae0f05dada82e45
msgid "``MultiWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:445
# 228e745ac3ea400ca259ef36f19550f8
msgid "Wrapper around multiple other widgets. You'll probably want to use this class with :class:`MultiValueField`."
msgstr ""

#: ../../ref/forms/widgets.txt:448
# 4e61d68b84c34b3fafa2acc6b1d0a578
msgid "Its ``render()`` method is different than other widgets', because it has to figure out how to split a single value for display in multiple widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:451
# 0e0c166e0eee430389bc9be0a57696b8
msgid "Subclasses may implement ``format_output``, which takes the list of rendered widgets and returns a string of HTML that formats them any way you'd like."
msgstr ""

#: ../../ref/forms/widgets.txt:455
# 43ef1382936649efb1f2396227fa641f
msgid "The ``value`` argument used when rendering can be one of two things:"
msgstr ""

#: ../../ref/forms/widgets.txt:457
# 8357f8ce0f7f483ab4d01474a4972862
msgid "A ``list``."
msgstr ""

#: ../../ref/forms/widgets.txt:458
# 00263b1d3f594b92aabae4f38aa8a469
msgid "A single value (e.g., a string) that is the \"compressed\" representation of a ``list`` of values."
msgstr ""

#: ../../ref/forms/widgets.txt:461
# a327b56f4fa644448e0cc707dba73955
msgid "In the second case -- i.e., if the value is *not* a list -- ``render()`` will first decompress the value into a ``list`` before rendering it. It does so by calling the ``decompress()`` method, which :class:`MultiWidget`'s subclasses must implement. This method takes a single \"compressed\" value and returns a ``list``. An example of this is how :class:`SplitDateTimeWidget` turns a :class:`datetime` value into a list with date and time split into two seperate values::"
msgstr ""

#: ../../ref/forms/widgets.txt:478
# a6361291ee1441f8ba948b72356c5329
msgid "When ``render()`` executes its HTML rendering, each value in the list is rendered with the corresponding widget -- the first value is rendered in the first widget, the second value is rendered in the second widget, etc."
msgstr ""

#: ../../ref/forms/widgets.txt:482
# 7ba735f7741b4d12aecc9fe6a58ec0dd
msgid ":class:`MultiWidget` has one required argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:486
# 9a017d4b2a75445b8af3ca65967202e8
msgid "An iterable containing the widgets needed."
msgstr ""

#: ../../ref/forms/widgets.txt:489
# ce05b1e6cc1b46da8ec9110a307ecc8c
msgid "``SplitDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:493
# 1cfe834743f34c87a07a6a2aa10d6e22
msgid "Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput` for the date, and :class:`TimeInput` for the time."
msgstr ""

#: ../../ref/forms/widgets.txt:496
# 84aabe4a04b04aa283a87eac716415f4
msgid "``SplitDateTimeWidget`` has two optional attributes:"
msgstr ""

#: ../../ref/forms/widgets.txt:500
# 03a6da66e8a64db68528c936a35d0367
msgid "Similar to :attr:`DateInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:504
# addd6ce9877545ceaf4c63105f4877be
msgid "Similar to :attr:`TimeInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:507
# 78c3f097673644d8bc4a6dcdf46f62c0
msgid "``SplitHiddenDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:511
# f2ce4af6b0524f5c8d6d6a322e00dcf0
msgid "Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for both date and time."
msgstr ""

#: ../../ref/forms/widgets.txt:517
# 37e50870e43a45b7a984575cf53f2a63
msgid "``SelectDateWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:521
# c8488ae270974504a63f96059ce20c2c
msgid "Wrapper around three :class:`~django.forms.Select` widgets: one each for month, day, and year. Note that this widget lives in a separate file from the standard widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:529
# 60c52fc3f7544ece990b8efeaad575ae
msgid "An optional list/tuple of years to use in the \"year\" select box. The default is a list containing the current year and the next 9 years."
msgstr ""

#: ../../ref/generic-views.txt:10
# 1fe8811a3cf9499fb09b32019200a4e7
msgid "From Django 1.3, function-based generic views have been deprecated in favor of a class-based approach, described in the class-based views :doc:`topic guide </topics/class-based-views>` and :doc:`detailed reference </ref/class-based-views>`."
msgstr ""

#: ../../ref/generic-views.txt:15
# 342278ed042c48fe817a4b776bdb14f3
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. In Django, the most common of these patterns have been abstracted into \"generic views\" that let you quickly provide common views of an object without actually needing to write any Python code."
msgstr ""

#: ../../ref/generic-views.txt:20
# 78fe52e2d3684c83a92e35a7bf2fe4c3
msgid "A general introduction to generic views can be found in the :doc:`topic guide </topics/generic-views>`."
msgstr ""

#: ../../ref/generic-views.txt:23
# 52473ec521a8490db84ad3414261d72a
msgid "This reference contains details of Django's built-in generic views, along with a list of all keyword arguments that a generic view expects. Remember that arguments may either come from the URL pattern or from the ``extra_context`` additional-information dictionary."
msgstr ""

#: ../../ref/generic-views.txt:35
# 059b51cf9e8e4e67bbeb4d3af6c82823
msgid "\"Simple\" generic views"
msgstr ""

#: ../../ref/generic-views.txt:37
# df0cd00b1b284a0abc00f88ea085058d
msgid "The ``django.views.generic.simple`` module contains simple views to handle a couple of common cases: rendering a template when no view logic is needed, and issuing a redirect."
msgstr ""

#: ../../ref/generic-views.txt:42
# 655881f114024325be00a0e1d42272d5
msgid "``django.views.generic.simple.direct_to_template``"
msgstr ""

#: ../../ref/generic-views.txt:44
#: ../../ref/generic-views.txt:81
#: ../../ref/generic-views.txt:162
#: ../../ref/generic-views.txt:243
#: ../../ref/generic-views.txt:328
#: ../../ref/generic-views.txt:421
#: ../../ref/generic-views.txt:493
#: ../../ref/generic-views.txt:583
#: ../../ref/generic-views.txt:592
#: ../../ref/generic-views.txt:695
#: ../../ref/generic-views.txt:807
#: ../../ref/generic-views.txt:880
#: ../../ref/generic-views.txt:954
#: ../../ref/generic-views.txt:1048
# eee0178303fa4b2fa7375f0729a364f4
# 1cb6160c4ed741d58490f59a4553c2bc
# 7f37a8617160460083461ab64ed1b084
# f4959ca175694586828113a2778a177c
# 158aec703f0841d09bed4c9a1a6670d6
# 9238a2145fc44941859dbeefa6e3da75
# b88cc11e67ba46f19623273a8fc41d0e
# 288d6febaced419f958fd28f069b88be
# e0acf3eaaf3046f1be1f696c433bf548
# b677aa96fb98405da85ea864b541d19f
# 83600e878aa94ed3a90ea17da5d03f23
# 8974cd6acd934286b15802829ad15d82
# 248e26fd16664888a3c0d40274494c78
# 4d09b2f7dfcb4200b1d2e460daf0f073
msgid "**Description:**"
msgstr ""

#: ../../ref/generic-views.txt:49
#: ../../ref/generic-views.txt:93
#: ../../ref/generic-views.txt:168
#: ../../ref/generic-views.txt:249
#: ../../ref/generic-views.txt:334
#: ../../ref/generic-views.txt:426
#: ../../ref/generic-views.txt:499
#: ../../ref/generic-views.txt:598
#: ../../ref/generic-views.txt:699
#: ../../ref/generic-views.txt:811
#: ../../ref/generic-views.txt:885
#: ../../ref/generic-views.txt:961
#: ../../ref/generic-views.txt:1055
# ca65bd0495db400e9ba4c7ada6d0a8ad
# 30a5c11f3164458bbd94e4beaf154abd
# 5f0c9be9751f407d9324fbaf2d05a0d7
# d7db46b998c14aa7a77ee6225dbaf2dd
# 5ce38c9119f1448783628a3196609c13
# 58762acaba884ff192845a791815e824
# 3cd4eaae5ee046ccbd54b1691d0243bc
# 07ccdb73e97a4053880c64691b27f288
# 303b80a374b84b18be3b7c1295db24cd
# 2b5964a100f4455284d1991380c1d0c0
# f30b7c0909a3497283bb1b72c821ad6d
# 7ba20a2ba78a43dfbe28d4cea7b8c44a
# f0489d7496f542939be7502766173f39
msgid "**Required arguments:**"
msgstr ""

#: ../../ref/generic-views.txt:51
# f18dde05137c42998e9372e8870699ad
msgid "``template``: The full name of a template to use."
msgstr ""

#: ../../ref/generic-views.txt:53
#: ../../ref/generic-views.txt:98
#: ../../ref/generic-views.txt:176
#: ../../ref/generic-views.txt:259
#: ../../ref/generic-views.txt:347
#: ../../ref/generic-views.txt:439
#: ../../ref/generic-views.txt:515
#: ../../ref/generic-views.txt:623
#: ../../ref/generic-views.txt:703
#: ../../ref/generic-views.txt:824
#: ../../ref/generic-views.txt:897
#: ../../ref/generic-views.txt:982
#: ../../ref/generic-views.txt:1072
# 86484d31f8c444a99edb710fe6b55e42
# c6cca861b30745be94dd30c976fd59a1
# 91161b55b4184758a85bc4a12c0d054a
# f12217349a334474ae50cf95a41a5fd9
# e3f5715a0bcf4ae8b41619c36ec1579a
# 8f264535dbb74e36b2c7ad20ba678ec5
# c4caf086880947cabee43205cc632e70
# 5040203d38ee4f3cbe0e9a5d808a9467
# 9e207fb44056434996230bed66323b80
# ed6de534cf05411489bfd8bdfec68209
# db390ff49007403ea41b68b287e8357e
# 70a30380456a434fb0eaa2b045085b1c
# 4344ef8b04f4407eb0216cb36e53f111
msgid "**Optional arguments:**"
msgstr ""

#: ../../ref/generic-views.txt:55
#: ../../ref/generic-views.txt:187
#: ../../ref/generic-views.txt:267
#: ../../ref/generic-views.txt:361
#: ../../ref/generic-views.txt:447
#: ../../ref/generic-views.txt:532
#: ../../ref/generic-views.txt:649
#: ../../ref/generic-views.txt:720
#: ../../ref/generic-views.txt:841
#: ../../ref/generic-views.txt:920
#: ../../ref/generic-views.txt:1006
#: ../../ref/generic-views.txt:1089
# 59b5430c01054c3cb0d06e8f8437c1ff
# 855f617cf6184949aabf98fcc471643b
# 3ba76eb67c544748b1d6c522073ddfdf
# 01e947d4f6e14497985cee398c19fe99
# c1e1eb88f33347f48bed1ae56121e957
# 1ee925a9b5ef47bfb4281a265377aedf
# e6a7ba7328bd4a97847609c0ac4989e5
# 09c289b8f26a4a5ea6af98d4b2fd2d7d
# ced32e16cb8c46528c4079dfd89c0d66
# ad69d53654c847819093739b1d9ae444
# b2d155bd8a9c4039a7ab94a5ee4860e5
# b501febd0aad4acd9ac60cfb3a4a7d28
msgid "``extra_context``: A dictionary of values to add to the template context. By default, this is an empty dictionary. If a value in the dictionary is callable, the generic view will call it just before rendering the template."
msgstr ""

#: ../../ref/generic-views.txt:60
#: ../../ref/generic-views.txt:200
#: ../../ref/generic-views.txt:292
#: ../../ref/generic-views.txt:379
#: ../../ref/generic-views.txt:465
#: ../../ref/generic-views.txt:550
#: ../../ref/generic-views.txt:660
#: ../../ref/generic-views.txt:738
#: ../../ref/generic-views.txt:852
# 4a2dd8d7ffe640b0868dd4bb2e726c4d
# ebe108646b6149e7a59dddd84b66026a
# 2b38b69c339841649cea0aae8d00afd6
# 5cc4075c191041d5967fcd414a7a5f65
# f5134d9c88084407948ef240555cc78f
# 060aa04509bf477b9a2e223c876f6d5e
# ad5a625dce3145f1a53168307f310b1d
# 20388bf3d8a0488a80787169d6105b5c
# 5170d31c2b3c42139896d43912d62ed9
msgid "``mimetype``: The MIME type to use for the resulting document. Defaults to the value of the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

#: ../../ref/generic-views.txt:63
#: ../../ref/generic-views.txt:113
# 4f693e59e04445828ea7f70accca796c
# b3293ac8ce47448a9b2a708c3ff5ba60
msgid "**Example:**"
msgstr ""

#: ../../ref/generic-views.txt:65
# 8ec77ff502ff453c88d5de1d23c1cbac
msgid "Given the following URL patterns::"
msgstr ""

#: ../../ref/generic-views.txt:74
# 8a50ad55187944368b0362e5114986bd
msgid "... a request to ``/foo/`` would render the template ``foo_index.html``, and a request to ``/foo/15/`` would render the ``foo_detail.html`` with a context variable ``{{ params.id }}`` that is set to ``15``."
msgstr ""

#: ../../ref/generic-views.txt:79
# 585734233fac4d62808ac308c72eed46
msgid "``django.views.generic.simple.redirect_to``"
msgstr ""

#: ../../ref/generic-views.txt:95
# 3ebf50ea14704305bd232c6f9f60ca92
msgid "``url``: The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP error."
msgstr ""

#: ../../ref/generic-views.txt:100
# 66abba4f961240369534b10493a352e4
msgid "``permanent``: Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If ``True``, then the redirect will use status code 301. If ``False``, then the redirect will use status code 302. By default, ``permanent`` is ``True``."
msgstr ""

#: ../../ref/generic-views.txt:105
# 28c3f8d818484caa9afc1b5d587f7390
msgid "``query_string``: Whether to pass along the GET query string to the new location. If ``True``, then the query string is appended to the URL. If ``False``, then the query string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:115
# ca9aa7a757004500b58573c512edd2cf
msgid "This example issues a permanent redirect (HTTP status code 301) from ``/foo/<id>/`` to ``/bar/<id>/``::"
msgstr ""

#: ../../ref/generic-views.txt:124
# 057fa9f7e4ad4232a645deec7bd3c146
msgid "This example issues a non-permanent redirect (HTTP status code 302) from ``/foo/<id>/`` to ``/bar/<id>/``::"
msgstr ""

#: ../../ref/generic-views.txt:133
# 17eea8af0ccf45b0a4c88f43a987879a
msgid "This example returns a 410 HTTP error for requests to ``/bar/``::"
msgstr ""

#: ../../ref/generic-views.txt:141
# 1b16c8c0bf0b4404bd4ac6c85e5f4133
msgid "This example shows how ``\"%\"`` characters must be written in the URL in order to avoid confusion with Python's string formatting markers. If the redirect string is written as ``\"%7Ejacob/\"`` (with only a single ``%``), an exception would be raised::"
msgstr ""

#: ../../ref/generic-views.txt:154
# 9e0f5e045e7144deb731e4dc38351ef8
msgid "Date-based generic views"
msgstr ""

#: ../../ref/generic-views.txt:156
# bf5869f907de442e8b6ac4ccc293089c
msgid "Date-based generic views (in the module ``django.views.generic.date_based``) are views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/generic-views.txt:160
# 4996f6895b884b5d975db9c0e619446c
msgid "``django.views.generic.date_based.archive_index``"
msgstr ""

#: ../../ref/generic-views.txt:170
#: ../../ref/generic-views.txt:253
#: ../../ref/generic-views.txt:341
#: ../../ref/generic-views.txt:433
#: ../../ref/generic-views.txt:509
# 158a22ade6f64144800e2e0735e40773
# 07c07e3eb4ae44a695c463969a74395e
# ccb2d3deef96445ea40d578e100dce34
# cc4ec308ecf04cc599842468a1371dbb
# bc723767ea0b4b8ca892de2cf6d93db9
msgid "``queryset``: A ``QuerySet`` of objects for which the archive serves."
msgstr ""

#: ../../ref/generic-views.txt:172
#: ../../ref/generic-views.txt:255
#: ../../ref/generic-views.txt:343
#: ../../ref/generic-views.txt:435
#: ../../ref/generic-views.txt:511
# 3843c02f4978443694a492146738d0ef
# 0d527092371d4f4eb5525c4637ba6669
# 3f754c36e9b44c0aa5283f74a40bdd9a
# 37b380c3595a4a0baa93edec378293d6
# 8e5763d431b047f28a996b1d5d666be9
msgid "``date_field``: The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the date-based archive should use to determine the objects on the page."
msgstr ""

#: ../../ref/generic-views.txt:178
# 01af5a128a8f4dba9648971e50672b6e
msgid "``num_latest``: The number of latest objects to send to the template context. By default, it's 15."
msgstr ""

#: ../../ref/generic-views.txt:181
#: ../../ref/generic-views.txt:261
#: ../../ref/generic-views.txt:355
#: ../../ref/generic-views.txt:441
#: ../../ref/generic-views.txt:526
#: ../../ref/generic-views.txt:634
#: ../../ref/generic-views.txt:714
#: ../../ref/generic-views.txt:826
#: ../../ref/generic-views.txt:914
#: ../../ref/generic-views.txt:1000
#: ../../ref/generic-views.txt:1083
# 1fadcea198fd466c94062209cce26fb3
# 83b0565785304116a935a49109d8527e
# 88db6b178f164542a34d4ac2ec23d135
# d866671f724c4eca87fb119bc8faa1c3
# 6258c29bfc674163b946b3d343405e0b
# ef5051df615f4d49b83980a38861da67
# d5677ca8a0ed49509414865850e32bb2
# 2998c1b8ca9c471fabd436ddb98ac643
# be39353880884b49a065622559336010
# bb061a07b1514e9c93fffe06663f2a58
# 69a06bf2022b4ac68c2b58be7754203e
msgid "``template_name``: The full name of a template to use in rendering the page. This lets you override the default template name (see below)."
msgstr ""

#: ../../ref/generic-views.txt:184
#: ../../ref/generic-views.txt:264
#: ../../ref/generic-views.txt:358
#: ../../ref/generic-views.txt:444
#: ../../ref/generic-views.txt:529
#: ../../ref/generic-views.txt:646
#: ../../ref/generic-views.txt:717
#: ../../ref/generic-views.txt:838
#: ../../ref/generic-views.txt:917
#: ../../ref/generic-views.txt:1003
#: ../../ref/generic-views.txt:1086
# 8c17006168e54e4baf63e91eacf7915a
# d416bc903b1b49cd9567fc5b6367f210
# 4a66270638e44b46935777523e0d7597
# b4563b18979944e4b5be5c39c221bfe3
# 9b852eea63a5437f8c761c4ce1a626d8
# b5e06f8dbcc94f258887cc2d658921ce
# a5fece8e3be04fd9991bdada7bb055d4
# 48d587ee7de742d5a7e784262e22d87c
# 75c06c5d19e14db8afbe0abf12f2efad
# 31ed819cc97d44dc8e2a407c12df1e0e
# 81f5b06a381045c4afbea134ec5eec33
msgid "``template_loader``: The template loader to use when loading the template. By default, it's ``django.template.loader``."
msgstr ""

#: ../../ref/generic-views.txt:192
#: ../../ref/generic-views.txt:452
#: ../../ref/generic-views.txt:725
# 211f5b6737a84ed0838f895f0b78afa0
# cd4447f291a64c5580b357cdc75505c4
# dfe96667164c469ab17ee2f18934142e
msgid "``allow_empty``: A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/generic-views.txt:197
#: ../../ref/generic-views.txt:277
#: ../../ref/generic-views.txt:371
#: ../../ref/generic-views.txt:457
#: ../../ref/generic-views.txt:542
#: ../../ref/generic-views.txt:654
#: ../../ref/generic-views.txt:730
#: ../../ref/generic-views.txt:846
#: ../../ref/generic-views.txt:925
#: ../../ref/generic-views.txt:1011
#: ../../ref/generic-views.txt:1094
# f80fe3ebfd3c4b9b95d913765f722451
# 65e7b3f2e5164441b6aa68eee3a030ea
# b1045e11500a4bf2a765741c044b1bad
# 3daa7f32a37f40dfb45d2004b3835cd4
# b5d9403c584e49c28e334460cc63453b
# acbfd19943544b6084a02a5109bdd28a
# 2615e085f59c406c86533670c3c67537
# caab3187c7dd46808d6a3ab7e8372a34
# f976a0989ca84a0ea883d75658ab1748
# 5ea3f3e8cc424c5ca6e6e327c8f93354
# 7759e0c857b74bb7a37872b02d6fc846
msgid "``context_processors``: A list of template-context processors to apply to the view's template."
msgstr ""

#: ../../ref/generic-views.txt:203
#: ../../ref/generic-views.txt:295
#: ../../ref/generic-views.txt:382
#: ../../ref/generic-views.txt:468
#: ../../ref/generic-views.txt:553
#: ../../ref/generic-views.txt:663
# 5d048eab298f4b18a31e47694507b7fd
# 9b5223286b0c4cbb8a3c0e504c1d3fd7
# 293edd7d80004c7cb582a4e056ce6a72
# d81b493bb1924273bf9517f3170f284a
# aac469301bd04cc29d6436be89a739cd
# 74f5a4bd46f5441f800cbb6003123cb1
msgid "``allow_future``: A boolean specifying whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:208
# 3df7f9ec83ed440aaa9949bcf2d66bef
msgid "``template_object_name``: Designates the name of the template variable to use in the template context. By default, this is ``'latest'``."
msgstr ""

#: ../../ref/generic-views.txt:211
#: ../../ref/generic-views.txt:300
#: ../../ref/generic-views.txt:387
#: ../../ref/generic-views.txt:473
#: ../../ref/generic-views.txt:558
#: ../../ref/generic-views.txt:668
#: ../../ref/generic-views.txt:741
#: ../../ref/generic-views.txt:855
#: ../../ref/generic-views.txt:928
#: ../../ref/generic-views.txt:1017
#: ../../ref/generic-views.txt:1100
# a24e34b9234342708a7fe7ab3c8ef5ec
# 32c948f0823945e285ba8e0021a1d886
# b9ad9cd01fbd4380a3f18a538d064ff9
# b6388158838543ea9d90aaf250b5a42f
# 5f2897553961463b8555f080951021e1
# db5734d17b484418bbb188c755f0352e
# 74cc478ae1814c3eb752a1c3dceea01e
# fc7845d1b8db4938a3dc1e2d6f623909
# fc6db4ac810f4a2985a7a88c5281b90b
# d9a826686e7740859d45bbe927205b14
# da8fdd5a870b402cb401bbbb6eb627bf
msgid "**Template name:**"
msgstr ""

#: ../../ref/generic-views.txt:213
# b5001c5412984c119151c8afc929d439
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive.html`` by default, where:"
msgstr ""

#: ../../ref/generic-views.txt:216
# fd06d2a64551474badc24979ee96643d
msgid "``<model_name>`` is your model's name in all lowercase. For a model ``StaffMember``, that'd be ``staffmember``."
msgstr ""

#: ../../ref/generic-views.txt:219
# 3677373ae2ee4038abe60bedcc70e3ba
msgid "``<app_label>`` is the right-most part of the full Python path to your model's app. For example, if your model lives in ``apps/blog/models.py``, that'd be ``blog``."
msgstr ""

#: ../../ref/generic-views.txt:223
#: ../../ref/generic-views.txt:305
#: ../../ref/generic-views.txt:392
#: ../../ref/generic-views.txt:478
#: ../../ref/generic-views.txt:563
#: ../../ref/generic-views.txt:673
#: ../../ref/generic-views.txt:746
#: ../../ref/generic-views.txt:860
#: ../../ref/generic-views.txt:933
#: ../../ref/generic-views.txt:1022
#: ../../ref/generic-views.txt:1105
# 51b36d5d70df4d5aa1de909e835664ff
# c0f86bbef5f047df919c47dcfe65cbf9
# 97882f3b858b432f87e09b982d1400b5
# c1ad25d7a3454081b7cd907aad270655
# 1181b334dd544497b3435deb84d9dcea
# a99ca150555043d5ac52dee22efd981d
# 90cd8f828bb1456ab3373092e275b68f
# 1d581b6532d641fbb38668b626ee6e9b
# adcb9e7d597a49c09d6fed77012495ca
# 6f98970f5db843e8a615c01797a378b0
# fa03cd141bba4e5db9234cf85208e0d9
msgid "**Template context:**"
msgstr ""

#: ../../ref/generic-views.txt:225
#: ../../ref/generic-views.txt:307
#: ../../ref/generic-views.txt:397
#: ../../ref/generic-views.txt:480
#: ../../ref/generic-views.txt:565
#: ../../ref/generic-views.txt:675
#: ../../ref/generic-views.txt:748
#: ../../ref/generic-views.txt:862
#: ../../ref/generic-views.txt:935
#: ../../ref/generic-views.txt:1024
#: ../../ref/generic-views.txt:1107
# 45ab02d8576242ccba1520538426e5b1
# a3edca227bd9488cbb48d2b628ed4bae
# 7360f600f9a34c459f5fd810e3dee4e9
# 2a6b3b61e83940cbbefddc806a428e8c
# 75c8711b34004eddb54b54650452ca5a
# c3a422fc6d074e4eb5d719fd3bc352f9
# 3d084271cfaf4988ba573c0f8fc7bf16
# 7ce5d81ba0f04c45ae92c9503697bc98
# 218484c4f15144d0814d37d934bb77de
# d5f3830f95034711ad826dd67d316d41
# 09305449a2bf428d90ddb53ef2a5a723
msgid "In addition to ``extra_context``, the template's context will be:"
msgstr ""

#: ../../ref/generic-views.txt:227
# 8ded6a75d3fd46e098c5d9cc153800e9
msgid "``date_list``: A ``DateQuerySet`` object containing all years that have have objects available according to ``queryset``, represented as ``datetime.datetime`` objects. These are ordered in reverse. This is equivalent to ``queryset.dates(date_field, 'year')[::-1]``."
msgstr ""

#: ../../ref/generic-views.txt:232
# 0cfffde623614b3f80f54d3c7e39f6bf
msgid "``latest``: The ``num_latest`` objects in the system, ordered descending by ``date_field``. For example, if ``num_latest`` is ``10``, then ``latest`` will be a list of the latest 10 objects in ``queryset``."
msgstr ""

#: ../../ref/generic-views.txt:236
# 1cc92646844a446d843231b549cd7598
msgid "This variable's name depends on the ``template_object_name`` parameter, which is ``'latest'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/generic-views.txt:241
# 66627eccf8564ee391af297c13eb1a58
msgid "``django.views.generic.date_based.archive_year``"
msgstr ""

#: ../../ref/generic-views.txt:251
# efa1cf60da354b99ad26f6daaf15b639
msgid "``year``: The four-digit year for which the archive serves."
msgstr ""

#: ../../ref/generic-views.txt:272
#: ../../ref/generic-views.txt:366
#: ../../ref/generic-views.txt:537
# ed48ea0df13d4251b21f6db4ff00bf1e
# 363fb54e29e241e8bdfcacd40db655a1
# 1798aea1f07b4da3beef9192cb3ef8dd
msgid "``allow_empty``: A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:280
#: ../../ref/generic-views.txt:374
#: ../../ref/generic-views.txt:460
#: ../../ref/generic-views.txt:545
#: ../../ref/generic-views.txt:733
# 25ca89654b284b65b2ed03b1db858489
# 7f6894056c64494d84d651bd4d500b1a
# a7c4e21572b54a85a3d049e2be0716e6
# fe10a53c650f44df9c89005a3bc3bda0
# 7dfab0b0c4da40179969b434ccaa13a9
msgid "``template_object_name``:  Designates the name of the template variable to use in the template context. By default, this is ``'object'``. The view will append ``'_list'`` to the value of this parameter in determining the variable's name."
msgstr ""

#: ../../ref/generic-views.txt:285
# b842f4e5e8734f2488633d846d1f526e
msgid "``make_object_list``: A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If ``True``, this list of objects will be made available to the template as ``object_list``. (The name ``object_list`` may be different; see the docs for ``object_list`` in the \"Template context\" section below.) By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:302
# 4fc98840d6ea4ba687457e2c093481a6
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_year.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:309
# 99fa0bdd6b6d44f4a88b761df70c02c5
msgid "``date_list``: A ``DateQuerySet`` object containing all months that have have objects available according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/generic-views.txt:315
# 5dadf9f5b5e040f3bbd97cede3a972c7
msgid "``object_list``: If the ``make_object_list`` parameter is ``True``, this will be set to a list of objects available for the given year, ordered by the date field. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:322
# 094c6ba0690a4b918a00c06afb9399b1
msgid "If ``make_object_list`` is ``False``, ``object_list`` will be passed to the template as an empty list."
msgstr ""

#: ../../ref/generic-views.txt:326
# 6054db9ed9c24ae09ee1a9144bee5744
msgid "``django.views.generic.date_based.archive_month``"
msgstr ""

#: ../../ref/generic-views.txt:336
#: ../../ref/generic-views.txt:428
#: ../../ref/generic-views.txt:501
# 7064ed3e659f42949a98d3c77096e5e1
# 56365b0224c94908bdbcf418e507fceb
# d3851bd965394efd9e9223c204e8eb60
msgid "``year``: The four-digit year for which the archive serves (a string)."
msgstr ""

#: ../../ref/generic-views.txt:338
#: ../../ref/generic-views.txt:503
# 855a8bc3692a48438235a98390ffcc3f
# 3c1ecd811147413694a767f5c892e2b9
msgid "``month``: The month for which the archive serves, formatted according to the ``month_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:349
#: ../../ref/generic-views.txt:517
#: ../../ref/generic-views.txt:625
# 1af92341fa784038bfa4bf6f871add91
# 99a8de070d134264b780d7b1519a5e49
# 9a6984343dc443ef8f5dcafb0f09c37e
msgid "``month_format``: A format string that regulates what format the ``month`` parameter uses. This should be in the syntax accepted by Python's :func:`~time.strftime`. It's set to ``\"%b\"`` by default, which is a three-letter month abbreviation. To change it to use numbers, use ``\"%m\"``."
msgstr ""

#: ../../ref/generic-views.txt:389
# 71d0aa8b54e94351887467f9f0629740
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_month.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:399
# fd45388b33cf49cb86755df6cbe061e8
msgid "``date_list``: A ``DateQuerySet`` object containing all days that have have objects available in the given month, according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/generic-views.txt:413
# a46f2544cc294d968e0dbda5235e7625
msgid "``object_list``: A list of objects available for the given month. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:419
# 7eccfda1b05042e3baccd77a6a790ef1
msgid "``django.views.generic.date_based.archive_week``"
msgstr ""

#: ../../ref/generic-views.txt:430
# 6418528aa8674026855edc9bcdae7ee1
msgid "``week``: The week of the year for which the archive serves (a string). Weeks start with Sunday."
msgstr ""

#: ../../ref/generic-views.txt:475
# 0b2c05c08ec44971b2e188904a8fc8e5
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_week.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:485
# d85f6bf4998744e8873adbf6f0a8fce4
msgid "``object_list``: A list of objects available for the given week. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:491
# 967fd64782f3486480d5339da8fcc0d1
msgid "``django.views.generic.date_based.archive_day``"
msgstr ""

#: ../../ref/generic-views.txt:506
# a83f4c7948a84e12b86bdda933c3a952
msgid "``day``: The day for which the archive serves, formatted according to the ``day_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:523
#: ../../ref/generic-views.txt:631
# 0c1c701c03f148b38b084681e93e1c99
# 4f4ae47164094aed8c21d4a1d576c3ad
msgid "``day_format``: Like ``month_format``, but for the ``day`` parameter. It defaults to ``\"%d\"`` (day of the month as a decimal number, 01-31)."
msgstr ""

#: ../../ref/generic-views.txt:560
# 4811d88f217e4b11945df157c4b485a8
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_day.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:575
# 3e4c938e4ec04c71baaf953659b16131
msgid "``object_list``: A list of objects available for the given day. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:581
# 87480a387ac14fa4bd0b8f0464d8d9af
msgid "``django.views.generic.date_based.archive_today``"
msgstr ""

#: ../../ref/generic-views.txt:585
# 41724922e2c94b2ea79453f17ced148b
msgid "A day archive page showing all objects for *today*. This is exactly the same as ``archive_day``, except the ``year``/``month``/``day`` arguments are not used, and today's date is used instead."
msgstr ""

#: ../../ref/generic-views.txt:590
# 1ab605789c6b4dc088c0cb3725ff6a2f
msgid "``django.views.generic.date_based.object_detail``"
msgstr ""

#: ../../ref/generic-views.txt:600
# 41f69037094b4618b16947b9c20fcfc3
msgid "``year``: The object's four-digit year (a string)."
msgstr ""

#: ../../ref/generic-views.txt:602
# 8e8cb67732244f469a342d99ccc5c963
msgid "``month``: The object's month , formatted according to the ``month_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:605
# 5205366e60f446ce86b06e61aaa220cf
msgid "``day``: The object's day , formatted according to the ``day_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:608
#: ../../ref/generic-views.txt:813
# ee9b2055a6d44632a143d9664f00870b
# fa4930a9bde24379a6cd01e9d434c8b5
msgid "``queryset``: A ``QuerySet`` that contains the object."
msgstr ""

#: ../../ref/generic-views.txt:610
# 9f441a9f82b546f2b5398c722017a0dc
msgid "``date_field``: The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the generic view should use to look up the object according to ``year``, ``month`` and ``day``."
msgstr ""

#: ../../ref/generic-views.txt:614
#: ../../ref/generic-views.txt:815
#: ../../ref/generic-views.txt:973
#: ../../ref/generic-views.txt:1060
# 3beea1d195b44092b0f0e138131fa48c
# 3288eb98dede4c04be48e85a5c5c1158
# eadc5ecbc09e4240b955fae18917414c
# 7fd2843a815a41e889efbdfe85ddc4fb
msgid "Either ``object_id`` or (``slug`` *and* ``slug_field``) is required."
msgstr ""

#: ../../ref/generic-views.txt:616
#: ../../ref/generic-views.txt:817
#: ../../ref/generic-views.txt:975
#: ../../ref/generic-views.txt:1062
# 605f61c783cc4d52972bb18c3047baa9
# 0fc93356db624ce989b7a33c6bbfc917
# cd15cdbe9569456890773a6a097abd4a
# e2012e09863145e48bddb6825ff49d09
msgid "If you provide ``object_id``, it should be the value of the primary-key field for the object being displayed on this page."
msgstr ""

#: ../../ref/generic-views.txt:619
#: ../../ref/generic-views.txt:820
#: ../../ref/generic-views.txt:978
#: ../../ref/generic-views.txt:1065
# f7a04ac219d944a0bd5b103be0d292c7
# bacd5a80f81041518f24f53bc05466fa
# 26e6fe4d64c54a8392707a28d2e74001
# 6b683e89301549e59cef8ab83d94aba4
msgid "Otherwise, ``slug`` should be the slug of the given object, and ``slug_field`` should be the name of the slug field in the ``QuerySet``'s model. By default, ``slug_field`` is ``'slug'``."
msgstr ""

#: ../../ref/generic-views.txt:637
#: ../../ref/generic-views.txt:829
# 83b233aba2fb468c93faacc9405797df
# 82e26d14029d46169595b0a69d3f2eb8
msgid "``template_name_field``: The name of a field on the object whose value is the template name to use. This lets you store template names in the data. In other words, if your object has a field ``'the_template'`` that contains a string ``'foo.html'``, and you set ``template_name_field`` to ``'the_template'``, then the generic view for this object will use the template ``'foo.html'``."
msgstr ""

#: ../../ref/generic-views.txt:644
#: ../../ref/generic-views.txt:836
# 966f2376bf8f46069bdf5844a3d48336
# 72fa963ca93345ed93f9e41584a76b17
msgid "It's a bit of a brain-bender, but it's useful in some cases."
msgstr ""

#: ../../ref/generic-views.txt:657
#: ../../ref/generic-views.txt:849
#: ../../ref/generic-views.txt:1014
#: ../../ref/generic-views.txt:1097
# e321e308660e44f89b6b2c619bfe1f55
# e3a669a200804a53964db153956bd958
# 9f2917e4b4ad42acb8be59a66aeb7314
# 134de3c1634342c69649b0cadbe4e891
msgid "``template_object_name``:  Designates the name of the template variable to use in the template context. By default, this is ``'object'``."
msgstr ""

#: ../../ref/generic-views.txt:670
#: ../../ref/generic-views.txt:857
# cf3968f8cf1d48a8bf09a5bd19e850d9
# c7bef129fa384f3fa43d9602be8d191b
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_detail.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:677
#: ../../ref/generic-views.txt:864
# 9ffa96ea50a5436b99656eece6f3e119
# 9257ecb73e13403eb20409f005c1ab27
msgid "``object``: The object. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/generic-views.txt:685
# ffd527aa3796415f8355b36060ac1112
msgid "List/detail generic views"
msgstr ""

#: ../../ref/generic-views.txt:687
# 29c3f5a84af94f2d83c2295eb0aa7f98
msgid "The list-detail generic-view framework (in the ``django.views.generic.list_detail`` module) is similar to the date-based one, except the former simply has two views: a list of objects and an individual object page."
msgstr ""

#: ../../ref/generic-views.txt:693
# ec2b69298f714c6680db72fc0b15ba3e
msgid "``django.views.generic.list_detail.object_list``"
msgstr ""

#: ../../ref/generic-views.txt:701
# 06599687fc6e4311b0d7b20ce015ee67
msgid "``queryset``: A ``QuerySet`` that represents the objects."
msgstr ""

#: ../../ref/generic-views.txt:705
# 836c6d441f0740c4928ac18951693312
msgid "``paginate_by``: An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with ``paginate_by`` objects per page. The view will expect either a ``page`` query string parameter (via ``GET``) or a ``page`` variable specified in the URLconf. See `Notes on pagination`_ below."
msgstr ""

#: ../../ref/generic-views.txt:711
# a96914c2d292481da748a496e906df18
msgid "``page``: The current page number, as an integer, or the string ``'last'``. This is 1-based. See `Notes on pagination`_ below."
msgstr ""

#: ../../ref/generic-views.txt:743
# 2a5063d8a68c403ea6e7677103950df5
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_list.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:750
# 3b229b16a31c48a6981b5ec03f377240
msgid "``object_list``: The list of objects. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:755
# 8c0450b334e2415b9c0fb99f850dfd78
msgid "``is_paginated``: A boolean representing whether the results are paginated. Specifically, this is set to ``False`` if the number of available objects is less than or equal to ``paginate_by``."
msgstr ""

#: ../../ref/generic-views.txt:759
# 98dc1a604ccb4d9da51dc5b67c1f721a
msgid "If the results are paginated, the context will contain these extra variables:"
msgstr ""

#: ../../ref/generic-views.txt:761
# 7f87c6bec5ae4540a8604cdb6b7cf8b2
msgid "``paginator``: An instance of ``django.core.paginator.Paginator``."
msgstr ""

#: ../../ref/generic-views.txt:763
# e2a10874b2504373a4c4732ea75a9956
msgid "``page_obj``: An instance of ``django.core.paginator.Page``."
msgstr ""

#: ../../ref/generic-views.txt:766
# 35f2aa71f70345269973eacf444e40ad
msgid "Notes on pagination"
msgstr ""

#: ../../ref/generic-views.txt:768
# e014d2289dba43cab82f226c3e6e26ef
msgid "If ``paginate_by`` is specified, Django will paginate the results. You can specify the page number in the URL in one of two ways:"
msgstr ""

#: ../../ref/generic-views.txt:781
# 66de9b88fe934a20a4f2348ca2aab2dd
msgid "To loop over all the available page numbers, use the ``page_range`` variable. You can iterate over the list provided by ``page_range`` to create a link to every page of results."
msgstr ""

#: ../../ref/generic-views.txt:803
# 28a2d9a6faae4fb78ce67f1a87e07e92
msgid "``django.views.generic.list_detail.object_detail``"
msgstr ""

#: ../../ref/generic-views.txt:872
# f478835bf7754853ad8f66e9c26d5b5c
msgid "Create/update/delete generic views"
msgstr ""

#: ../../ref/generic-views.txt:874
# 10b5854f517e4992a21cf1a054acb502
msgid "The ``django.views.generic.create_update`` module contains a set of functions for creating, editing and deleting objects."
msgstr ""

#: ../../ref/generic-views.txt:878
# f43e3e63225843a0be0db7bb7f61d078
msgid "``django.views.generic.create_update.create_object``"
msgstr ""

#: ../../ref/generic-views.txt:882
# fbf895cbe7e541e5b2445d59cce1ec17
msgid "A page that displays a form for creating an object, redisplaying the form with validation errors (if there are any) and saving the object."
msgstr ""

#: ../../ref/generic-views.txt:887
#: ../../ref/generic-views.txt:963
# 028cd0ddca8745b8847b07f31d77da0e
# e42e456248994840b5480a87faccc8f8
msgid "Either ``form_class`` or ``model`` is required."
msgstr ""

#: ../../ref/generic-views.txt:889
#: ../../ref/generic-views.txt:965
# bb54f9e4ad304f47a5178d5df1b865b0
# bf02e10a93fd47d38e312cd34f77888f
msgid "If you provide ``form_class``, it should be a ``django.forms.ModelForm`` subclass. Use this argument when you need to customize the model's form. See the :doc:`ModelForm docs </topics/forms/modelforms>` for more information."
msgstr ""

#: ../../ref/generic-views.txt:894
#: ../../ref/generic-views.txt:970
# 2fa6221f2679435db1a90b3d9a0d77fc
# b849d63b78d5427fabbe130557e06b81
msgid "Otherwise, ``model`` should be a Django model class and the form used will be a standard ``ModelForm`` for ``model``."
msgstr ""

#: ../../ref/generic-views.txt:899
#: ../../ref/generic-views.txt:984
# 0d2379cc0dae41919a0892e78234c0c0
# 83cc2fd6bc834785b00e8f680fff7827
msgid "``post_save_redirect``: A URL to which the view will redirect after saving the object. By default, it's ``object.get_absolute_url()``."
msgstr ""

#: ../../ref/generic-views.txt:902
#: ../../ref/generic-views.txt:987
# 57514f8733814fb7a7031a9f7a9a0f2b
# 55ad54809fa94d45ae9b4edbe45795ce
msgid "``post_save_redirect`` may contain dictionary string formatting, which will be interpolated against the object's field attributes. For example, you could use ``post_save_redirect=\"/polls/%(slug)s/\"``."
msgstr ""

#: ../../ref/generic-views.txt:906
#: ../../ref/generic-views.txt:991
#: ../../ref/generic-views.txt:1074
# 8495bb8ccaaf48b9a82d39bf16255209
# 7ba9807004d8418590809fdf5ab3e1ce
# e6f3d47394bf423e89f5e384f65f6ef2
msgid "``login_required``: A boolean that designates whether a user must be logged in, in order to see the page and save changes. This hooks into the Django :doc:`authentication system </topics/auth>`. By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:911
# 8b7a032647aa479fb08f20b6fa99ef24
msgid "If this is ``True``, and a non-logged-in user attempts to visit this page or save the form, Django will redirect the request to ``/accounts/login/``."
msgstr ""

#: ../../ref/generic-views.txt:930
#: ../../ref/generic-views.txt:1019
# 685eb72528a04c6890457c2e7c1a7416
# 7da231fbfcf0410d822c2c9dc0c3a20b
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_form.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:937
# 8c24c78394f04472a81b7a49e28d26f6
msgid "``form``: A ``django.forms.ModelForm`` instance representing the form for creating the object. This lets you refer to form fields easily in the template system."
msgstr ""

#: ../../ref/generic-views.txt:941
#: ../../ref/generic-views.txt:1030
# 0e2d753a8c81464a81bdf095f0ae62c3
# 0ad805c33400428182fd6685c1fa73a6
msgid "For example, if the model has two fields, ``name`` and ``address``::"
msgstr ""

#: ../../ref/generic-views.txt:948
#: ../../ref/generic-views.txt:1037
# b6d689ff7f9b454caa359d2f28e2aa3a
# 4055b9934ef14e0bbc40dbdf5cdae3ef
msgid "See the :doc:`forms documentation </topics/forms/index>` for more information about using ``Form`` objects in templates."
msgstr ""

#: ../../ref/generic-views.txt:952
# 1c18431789de45359caaf0a437ba15ac
msgid "``django.views.generic.create_update.update_object``"
msgstr ""

#: ../../ref/generic-views.txt:956
# 5982656236c24b5da6c7145cb58e6801
msgid "A page that displays a form for editing an existing object, redisplaying the form with validation errors (if there are any) and saving changes to the object. This uses a form automatically generated from the object's model class."
msgstr ""

#: ../../ref/generic-views.txt:996
#: ../../ref/generic-views.txt:1079
# bb9a8222b5874ffd960981656895d1e4
# dd2324ea7d414b8db0cef6d885635088
msgid "If this is ``True``, and a non-logged-in user attempts to visit this page or save the form, Django will redirect to :setting:`LOGIN_URL` (which defaults to ``/accounts/login/``)."
msgstr ""

#: ../../ref/generic-views.txt:1026
# 9f61fccb719f405586681069fb4e53bc
msgid "``form``: A ``django.forms.ModelForm`` instance representing the form for editing the object. This lets you refer to form fields easily in the template system."
msgstr ""

#: ../../ref/generic-views.txt:1040
# 4fbca1d4dcef4c38ae7365f93b3c5896
msgid "``object``: The original object being edited. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/generic-views.txt:1046
# 92db352ff5d14208846db9d2ea814493
msgid "``django.views.generic.create_update.delete_object``"
msgstr ""

#: ../../ref/generic-views.txt:1057
# eb70a7d4476741f6bfd1dba197af7387
msgid "``model``: The Django model class of the object that the form will delete."
msgstr ""

#: ../../ref/generic-views.txt:1069
# 80776d851c46467a9d40c5184a79c544
msgid "``post_delete_redirect``: A URL to which the view will redirect after deleting the object."
msgstr ""

#: ../../ref/generic-views.txt:1102
# c5bcdedda56f4d6e84a9b8e7e9311d4a
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_confirm_delete.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:1109
# ad845708989140a88910db34c513b15e
msgid "``object``: The original object that's about to be deleted. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/index.txt:29
# afc29498f8dc4a299d9c95daf87e6fb4
msgid "Deprecated features"
msgstr ""

#: ../../ref/middleware.txt:3
# bd420fab1e20417baad89587a75b38e2
msgid "Middleware"
msgstr ""

#: ../../ref/middleware.txt:8
# 683f7a3fcba24ed5b786231e53f5fb6c
msgid "This document explains all middleware components that come with Django. For information on how to use them and how to write your own middleware, see the :doc:`middleware usage guide </topics/http/middleware>`."
msgstr ""

#: ../../ref/middleware.txt:13
# 805a92578490464696b24c3586ed6821
msgid "Available middleware"
msgstr ""

#: ../../ref/middleware.txt:16
# ba610db0add546bba216100518d58d26
msgid "Cache middleware"
msgstr ""

#: ../../ref/middleware.txt:25
# 4309653303964e4096e10f2710ac1564
msgid "Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the :setting:`CACHE_MIDDLEWARE_SECONDS` setting defines. See the :doc:`cache documentation </topics/cache>`."
msgstr ""

#: ../../ref/middleware.txt:30
# 93aad62bff374b47aafa99fc124d1c26
msgid "\"Common\" middleware"
msgstr ""

#: ../../ref/middleware.txt:37
# 940e74bd800b448fa24ba69e5208f881
msgid "Adds a few conveniences for perfectionists:"
msgstr ""

#: ../../ref/middleware.txt:39
# 1230d1d308b8465b9b9a64e4185cf73c
msgid "Forbids access to user agents in the :setting:`DISALLOWED_USER_AGENTS` setting, which should be a list of strings."
msgstr ""

#: ../../ref/middleware.txt:42
# 0dae3ef0bcab4e19907c44c2b887f742
msgid "Performs URL rewriting based on the :setting:`APPEND_SLASH` and :setting:`PREPEND_WWW` settings."
msgstr ""

#: ../../ref/middleware.txt:45
# 231366dc41884bc88a07c8b1a465c608
msgid "If :setting:`APPEND_SLASH` is ``True`` and the initial URL doesn't end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual."
msgstr ""

#: ../../ref/middleware.txt:51
# efd13c5f1cd344f4ad82e6a51b75f2eb
msgid "For example, ``foo.com/bar`` will be redirected to ``foo.com/bar/`` if you don't have a valid URL pattern for ``foo.com/bar`` but *do* have a valid pattern for ``foo.com/bar/``."
msgstr ""

#: ../../ref/middleware.txt:55
# 4a31db4f21d44222853c3fa23dd7ad83
msgid "If :setting:`PREPEND_WWW` is ``True``, URLs that lack a leading \"www.\" will be redirected to the same URL with a leading \"www.\""
msgstr ""

#: ../../ref/middleware.txt:58
# cca791c704fc4664ae0fb76885e628cc
msgid "Both of these options are meant to normalize URLs. The philosophy is that each URL should exist in one, and only one, place. Technically a URL ``foo.com/bar`` is distinct from ``foo.com/bar/`` -- a search-engine indexer would treat them as separate URLs -- so it's best practice to normalize URLs."
msgstr ""

#: ../../ref/middleware.txt:64
# 9a5d4c852f3642e98d82e6f57092cbc0
msgid "Sends broken link notification emails to :setting:`MANAGERS` if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True``."
msgstr ""

#: ../../ref/middleware.txt:67
# 4c5319e3ac3240fd8884f8dcb422f875
msgid "Handles ETags based on the :setting:`USE_ETAGS` setting. If :setting:`USE_ETAGS` is set to ``True``, Django will calculate an ETag for each request by MD5-hashing the page content, and it'll take care of sending ``Not Modified`` responses, if appropriate."
msgstr ""

#: ../../ref/middleware.txt:73
# 31b656d3436d4b8d9e1aa3d36588f2db
msgid "View metadata middleware"
msgstr ""

#: ../../ref/middleware.txt:80
# 0dce546d5d484ff9bbb9af33a16e2dea
msgid "Sends custom ``X-View`` HTTP headers to HEAD requests that come from IP addresses defined in the :setting:`INTERNAL_IPS` setting. This is used by Django's :doc:`automatic documentation system </ref/contrib/admin/admindocs>`. Depends on :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`."
msgstr ""

#: ../../ref/middleware.txt:86
# dd66389cf72244939846406bb1c4b2e4
msgid "GZip middleware"
msgstr ""

#: ../../ref/middleware.txt:93
# d35bc726baed40b49b5a8cc16eedb551
msgid "Compresses content for browsers that understand GZip compression (all modern browsers)."
msgstr ""

#: ../../ref/middleware.txt:96
# 7b84b038b985463092515acd7696b371
msgid "It is suggested to place this first in the middleware list, so that the compression of the response content is the last thing that happens."
msgstr ""

#: ../../ref/middleware.txt:99
# 8894ccb821a640c182a9a22708faaac9
msgid "It will NOT compress content if any of the following are true:"
msgstr ""

#: ../../ref/middleware.txt:101
# 154d41d43f204a71a1e1bb0c2ac23765
msgid "The content body is less than 200 bytes long."
msgstr ""

#: ../../ref/middleware.txt:103
# d8a2a3aaaf594b1e9bf213c37eba3b8c
msgid "The response has already set the ``Content-Encoding`` header."
msgstr ""

#: ../../ref/middleware.txt:105
# 2115773132874edb8937c38672579ecb
msgid "The request (the browser) hasn't sent an ``Accept-Encoding`` header containing ``gzip``."
msgstr ""

#: ../../ref/middleware.txt:108
# b2b1057a15cd4cc2b97b0e16dd7716fd
msgid "The request is from Internet Explorer and the ``Content-Type`` header contains ``javascript`` or starts with anything other than ``text/``. We do this to avoid a bug in early versions of IE that caused decompression not to be performed on certain content types."
msgstr ""

#: ../../ref/middleware.txt:113
# 3ea43588216d433c99cc8028d6cfb7ab
msgid "You can apply GZip compression to individual views using the :func:`~django.views.decorators.http.gzip_page()` decorator."
msgstr ""

#: ../../ref/middleware.txt:117
# 05f8017bf3704bc8933db68d6dc614d5
msgid "Conditional GET middleware"
msgstr ""

#: ../../ref/middleware.txt:124
# 741725a6bed14b8ebf6fe42d580ac9f2
msgid "Handles conditional GET operations. If the response has a ``ETag`` or ``Last-Modified`` header, and the request has ``If-None-Match`` or ``If-Modified-Since``, the response is replaced by an :class:`~django.http.HttpNotModified`."
msgstr ""

#: ../../ref/middleware.txt:129
# 7864b80a3f9c417c960fca2b0a84dc44
msgid "Also sets the ``Date`` and ``Content-Length`` response-headers."
msgstr ""

#: ../../ref/middleware.txt:132
# 5b70a270191d42acbe56e42a6b0ce253
msgid "Reverse proxy middleware"
msgstr ""

#: ../../ref/middleware.txt:136
# d777ce3c65794be98a7570742a8712cd
msgid "This middleware was removed in Django 1.1. See :ref:`the release notes <removed-setremoteaddrfromforwardedfor-middleware>` for details."
msgstr ""

#: ../../ref/middleware.txt:140
# 86935912b6ac4116acbec276b1a185f4
msgid "Locale middleware"
msgstr ""

#: ../../ref/middleware.txt:147
# 68caf8f360f249dd92551a419761cc03
msgid "Enables language selection based on data from the request. It customizes content for each user. See the :doc:`internationalization documentation </topics/i18n/index>`."
msgstr ""

#: ../../ref/middleware.txt:152
# a05cb9a116f540f2a6d3cb657e816c74
msgid "Message middleware"
msgstr ""

#: ../../ref/middleware.txt:162
# de3878a522b94175b89743fefc4320a2
msgid "Enables cookie- and session-based message support. See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/middleware.txt:166
# f84c1b5d36fd4169914690e362024e62
msgid "Session middleware"
msgstr ""

#: ../../ref/middleware.txt:173
# 0ba84fc3a9b749ed89645bb039bb42a1
msgid "Enables session support. See the :doc:`session documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/middleware.txt:177
# 1c9d56a7936a48699f098cfc9eca2cf5
msgid "Authentication middleware"
msgstr ""

#: ../../ref/middleware.txt:184
# 29e3585ee2354dfaa0b028f1608b90f9
msgid "Adds the ``user`` attribute, representing the currently-logged-in user, to every incoming ``HttpRequest`` object. See :doc:`Authentication in Web requests </topics/auth>`."
msgstr ""

#: ../../ref/middleware.txt:189
# 7a2142c79db74b60830ba63a3d3920bc
msgid "CSRF protection middleware"
msgstr ""

#: ../../ref/middleware.txt:197
# e7bec43c5ad6413aaca44c0a770b2370
msgid "Adds protection against Cross Site Request Forgeries by adding hidden form fields to POST forms and checking requests for the correct value. See the :doc:`Cross Site Request Forgery protection documentation </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/middleware.txt:202
# cae73bfe124c4224835a689a87b51fcf
msgid "Transaction middleware"
msgstr ""

#: ../../ref/middleware.txt:209
# b916ac8f0d844481a617ffb214c2b6db
msgid "Binds commit and rollback to the request/response phase. If a view function runs successfully, a commit is done. If it fails with an exception, a rollback is done."
msgstr ""

#: ../../ref/middleware.txt:213
# b332898ea0aa4169a507295cf58cf2f6
msgid "The order of this middleware in the stack is important: middleware modules running outside of it run with commit-on-save - the default Django behavior. Middleware modules running inside it (coming later in the stack) will be under the same transaction control as the view functions."
msgstr ""

#: ../../ref/middleware.txt:218
# bb1b0eacf46445db9b41e0440ea72eb1
msgid "See the :doc:`transaction management documentation </topics/db/transactions>`."
msgstr ""

#: ../../ref/middleware.txt:221
# 2113ace97a5e43b287c973605e328478
msgid "X-Frame-Options middleware"
msgstr ""

#: ../../ref/middleware.txt:231
# 4aab4afae92a402282df687d54b9b6bc
msgid "Simple :doc:`clickjacking protection via the X-Frame-Options header </ref/clickjacking/>`."
msgstr ""

#: ../../ref/models/fields.txt:3
# 247adf4dc2f5492a91ca5c0182f746d4
msgid "Model field reference"
msgstr ""

#: ../../ref/models/fields.txt:10
# b64b72c333cc478bb63a72e75441409d
msgid "This document contains all the gory details about all the `field options`_ and `field types`_ Django's got to offer."
msgstr ""

#: ../../ref/models/fields.txt:15
# 5f138338e9bd43f382689c4866342284
msgid "If the built-in fields don't do the trick, you can try :mod:`django.contrib.localflavor`, which contains assorted pieces of code that are useful for particular countries or cultures. Also, you can easily :doc:`write your own custom model fields </howto/custom-model-fields>`."
msgstr ""

#: ../../ref/models/fields.txt:22
# 311fa424562940c180cc4654bace7b32
msgid "Technically, these models are defined in :mod:`django.db.models.fields`, but for convenience they're imported into :mod:`django.db.models`; the standard convention is to use ``from django.db import models`` and refer to fields as ``models.<Foo>Field``."
msgstr ""

#: ../../ref/models/fields.txt:30
# d41be376ea5c4cbab14437fe2ce8739a
msgid "Field options"
msgstr ""

#: ../../ref/models/fields.txt:32
# b7a368d7f3164dff9538027245957a05
msgid "The following arguments are available to all field types. All are optional."
msgstr ""

#: ../../ref/models/fields.txt:35
# aa2e56f91a5448209a4a72cbdb990ba8
msgid "``null``"
msgstr ""

#: ../../ref/models/fields.txt:39
# e42d24f3469d4db0ada51f5830fd371b
msgid "If ``True``, Django will store empty values as ``NULL`` in the database. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:42
# 88a8145c8b7d4da4a73f3bac90447019
msgid "Note that empty string values will always get stored as empty strings, not as ``NULL``. Only use ``null=True`` for non-string fields such as integers, booleans and dates. For both types of fields, you will also need to set ``blank=True`` if you wish to permit empty values in forms, as the :attr:`~Field.null` parameter only affects database storage (see :attr:`~Field.blank`)."
msgstr ""

#: ../../ref/models/fields.txt:49
# a871e45d054747dc8c09c01e495d6ce5
msgid "Avoid using :attr:`~Field.null` on string-based fields such as :class:`CharField` and :class:`TextField` unless you have an excellent reason. If a string-based field has ``null=True``, that means it has two possible values for \"no data\": ``NULL``, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" Django convention is to use the empty string, not ``NULL``."
msgstr ""

#: ../../ref/models/fields.txt:58
# f8f28bd7adab4d19b827f3a6ecb68a41
msgid "When using the Oracle database backend, the ``null=True`` option will be coerced for string-based fields that have the empty string as a possible value, and the value ``NULL`` will be stored to denote the empty string."
msgstr ""

#: ../../ref/models/fields.txt:62
# 56aa6ded845648779ea896d6d8347b98
msgid "If you want to accept :attr:`~Field.null` values with :class:`BooleanField`, use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:66
# 98ee0f9be27d4cbabdef2f7bdd5ac84f
msgid "``blank``"
msgstr ""

#: ../../ref/models/fields.txt:70
# 6de2a324892740dc97f15c47bf924a58
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:72
# 38bd49057eb248ed83f342df72f002b6
msgid "Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is purely database-related, whereas :attr:`~Field.blank` is validation-related. If a field has ``blank=True``, validation on Django's admin site will allow entry of an empty value. If a field has ``blank=False``, the field will be required."
msgstr ""

#: ../../ref/models/fields.txt:80
# b6c2326cb53841ebac644ebe76922101
msgid "``choices``"
msgstr ""

#: ../../ref/models/fields.txt:84
# 86da889e0b6e4ed3bb3a8182ae256472
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field."
msgstr ""

#: ../../ref/models/fields.txt:87
# 0e012cbbc33a4e66ab6f8636bc127951
msgid "If this is given, Django's admin will use a select box instead of the standard text field and will limit choices to the choices given."
msgstr ""

#: ../../ref/models/fields.txt:90
# 0eda90d5e3c64cef94134e032ff595ae
msgid "A choices list looks like this::"
msgstr ""

#: ../../ref/models/fields.txt:100
# bfcd259ede6d42d7937371e736e9b0c7
msgid "The first element in each tuple is the actual value to be stored. The second element is the human-readable name for the option."
msgstr ""

#: ../../ref/models/fields.txt:103
# 66d712a6097f42b382eb9527a45c70d6
msgid "The choices list can be defined either as part of your model class::"
msgstr ""

#: ../../ref/models/fields.txt:112
# 678f9d195cf946a7be36d3cd40e3e161
msgid "or outside your model class altogether::"
msgstr ""

#: ../../ref/models/fields.txt:121
# 7f5dac56e7394da596c732fa50126761
msgid "You can also collect your available choices into named groups that can be used for organizational purposes::"
msgstr ""

#: ../../ref/models/fields.txt:138
# 419a2e4ef540492ea186d298c433da7c
msgid "The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the `unknown` option in this example)."
msgstr ""

#: ../../ref/models/fields.txt:144
# a87d071ce0ea4d3fb01de603834dcf06
msgid "For each model field that has :attr:`~Field.choices` set, Django will add a method to retrieve the human-readable name for the field's current value. See :meth:`~django.db.models.Model.get_FOO_display` in the database API documentation."
msgstr ""

#: ../../ref/models/fields.txt:149
# 354de4a2ca2e4d1fbab67b731f4600e9
msgid "Finally, note that choices can be any iterable object -- not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking :attr:`~Field.choices` to be dynamic, you're probably better off using a proper database table with a :class:`ForeignKey`. :attr:`~Field.choices` is meant for static data that doesn't change much, if ever."
msgstr ""

#: ../../ref/models/fields.txt:156
# 2bdc0d5ac51944fa880c0b52f0a25f31
msgid "``db_column``"
msgstr ""

#: ../../ref/models/fields.txt:160
# d4e617b1bc8e443488e6034bddc7dcc2
msgid "The name of the database column to use for this field. If this isn't given, Django will use the field's name."
msgstr ""

#: ../../ref/models/fields.txt:163
# 052453c4c41342159f245cc8f232be4e
msgid "If your database column name is an SQL reserved word, or contains characters that aren't allowed in Python variable names -- notably, the hyphen -- that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/fields.txt:169
# fe02a8dba7764399a0b3e7883ee5d249
msgid "``db_index``"
msgstr ""

#: ../../ref/models/fields.txt:173
# 901974f2e0a74662a69275299fd8897d
msgid "If ``True``, djadmin:`django-admin.py sqlindexes <sqlindexes>` will output a ``CREATE INDEX`` statement for this field."
msgstr ""

#: ../../ref/models/fields.txt:177
#: ../../ref/models/options.txt:72
# 58b9744897654b6e99324ceb8d9108d4
# f4264889ddda4cb3b5ef9104f95df0b8
msgid "``db_tablespace``"
msgstr ""

#: ../../ref/models/fields.txt:181
# 642b164e67404db7b52ccf647a6f11a9
msgid "The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for this field's index, if this field is indexed. The default is the project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:`~Options.db_tablespace` of the model, if any. If the backend doesn't support tablespaces for indexes, this option is ignored."
msgstr ""

#: ../../ref/models/fields.txt:188
# 39cffc17c5584ce1b2a42c49f6be9c2a
msgid "``default``"
msgstr ""

#: ../../ref/models/fields.txt:192
# 589a752e1dd54bbbbcf05c7cb81c2e71
msgid "The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created."
msgstr ""

#: ../../ref/models/fields.txt:196
# b4dafb257a6149a7a98fff416588c7db
msgid "``editable``"
msgstr ""

#: ../../ref/models/fields.txt:200
# cebbe3f7409a46588a10ff4d02828d65
msgid "If ``False``, the field will not be editable in the admin or via forms automatically generated from the model class. Default is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:210
# 7af213506c114af489975f0b34c73ec9
msgid "The ``error_messages`` argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override."
msgstr ""

#: ../../ref/models/fields.txt:214
# 243956e339914b999794450465af50d3
msgid "Error message keys include ``null``, ``blank``, ``invalid``, ``invalid_choice``, and ``unique``. Additional error message keys are specified for each field in the `Field types`_ section below."
msgstr ""

#: ../../ref/models/fields.txt:223
# 5de5ce29a19c4e548098ff43b98779c8
msgid "Extra \"help\" text to be displayed under the field on the object's admin form. It's useful for documentation even if your object doesn't have an admin form."
msgstr ""

#: ../../ref/models/fields.txt:226
# cd4053a0620b44ca995f362a781aaab2
msgid "Note that this value is *not* HTML-escaped when it's displayed in the admin interface. This lets you include HTML in :attr:`~Field.help_text` if you so desire. For example::"
msgstr ""

#: ../../ref/models/fields.txt:232
# f3cc037c07af4d49b9ca03a7f4ba03b4
msgid "Alternatively you can use plain text and ``django.utils.html.escape()`` to escape any HTML special characters."
msgstr ""

#: ../../ref/models/fields.txt:236
# 7846f85f49164281a9644bc1830d04d8
msgid "``primary_key``"
msgstr ""

#: ../../ref/models/fields.txt:240
# 56d9d427212c44359857a74907dc5f33
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../ref/models/fields.txt:242
# 29243e747556484ab3d79af53d488595
msgid "If you don't specify ``primary_key=True`` for any fields in your model, Django will automatically add an :class:`IntegerField` to hold the primary key, so you don't need to set ``primary_key=True`` on any of your fields unless you want to override the default primary-key behavior. For more, see :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:248
# fa8f2abeecc84e758caf43f05c2d51ff
msgid "``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""

#: ../../ref/models/fields.txt:256
# 6f571d1a59e14f85ac1a64020a2d11fe
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../ref/models/fields.txt:258
# dd83faf07ed543b0903ad6b35a1f2666
msgid "This is enforced at the database level and at the Django admin-form level. If you try to save a model with a duplicate value in a :attr:`~Field.unique` field, a :exc:`django.db.IntegrityError` will be raised by the model's :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/models/fields.txt:263
# 660d92d546e746738e1c38f6f7653a53
msgid "This option is valid on all field types except :class:`ManyToManyField` and :class:`FileField`."
msgstr ""

#: ../../ref/models/fields.txt:267
# 3242aca005fb47e280ca256263384dac
msgid "``unique_for_date``"
msgstr ""

#: ../../ref/models/fields.txt:271
# 7e5e3807c85949a2a2d00fdf122fe0c0
msgid "Set this to the name of a :class:`DateField` or :class:`DateTimeField` to require that this field be unique for the value of the date field."
msgstr ""

#: ../../ref/models/fields.txt:274
# 4018d0f8f88a46b78b1abd7483def048
msgid "For example, if you have a field ``title`` that has ``unique_for_date=\"pub_date\"``, then Django wouldn't allow the entry of two records with the same ``title`` and ``pub_date``."
msgstr ""

#: ../../ref/models/fields.txt:278
# 5575bfe336224468a850b345b197ad65
msgid "This is enforced at the Django admin-form level but not at the database level."
msgstr ""

#: ../../ref/models/fields.txt:281
# 693e88689980474dbb58e312f72eaf49
msgid "``unique_for_month``"
msgstr ""

#: ../../ref/models/fields.txt:285
# e2f29640e9cf4b3392e75c71b384e614
msgid "Like :attr:`~Field.unique_for_date`, but requires the field to be unique with respect to the month."
msgstr ""

#: ../../ref/models/fields.txt:289
# 0bed866c8d294ccb9fcc42b9cf247880
msgid "``unique_for_year``"
msgstr ""

#: ../../ref/models/fields.txt:293
# c32e0b6c932e4881bc13286cff1f3f93
msgid "Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""

#: ../../ref/models/fields.txt:296
#: ../../ref/models/options.txt:264
# bbe1909cad33467280be9a40a8de525b
# 24e585a29a1d4ec9a655086b0c0bc2f5
msgid "``verbose_name``"
msgstr ""

#: ../../ref/models/fields.txt:300
# 56916d8bf02c4929800f83d40251259f
msgid "A human-readable name for the field. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""

#: ../../ref/models/fields.txt:311
# 4677b619012b4d45a02fb172c5604b00
msgid "A list of validators to run for this field. See the :doc:`validators documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/models/fields.txt:317
# 4b4b1b76cb84498c9f5c46ad74e007a8
msgid "Field types"
msgstr ""

#: ../../ref/models/fields.txt:322
# 5b379c098b82478e8d71106de1b4606b
msgid "``AutoField``"
msgstr ""

#: ../../ref/models/fields.txt:326
# dc3e808d7de4488fb7f76cf3795a246b
msgid "An :class:`IntegerField` that automatically increments according to available IDs. You usually won't need to use this directly; a primary key field will automatically be added to your model if you don't specify otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:332
# 77716d8823664471826218a1d0fba668
msgid "``BigIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:338
# 2cef419d9ec94c5cb6baf8b246582577
msgid "A 64 bit integer, much like an :class:`IntegerField` except that it is guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807. The admin represents this as an ``<input type=\"text\">`` (a single-line input)."
msgstr ""

#: ../../ref/models/fields.txt:348
# 8d6f999eccdf42739ccba86df0e0c2d4
msgid "A true/false field."
msgstr ""

#: ../../ref/models/fields.txt:350
# a9ef3246dadb4da6836d3e1a1106e667
msgid "The admin represents this as a checkbox."
msgstr ""

#: ../../ref/models/fields.txt:352
# 1e2aa04532f744b39140bf3bc8b6c21e
msgid "If you need to accept :attr:`~Field.null` values then use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:365
# 7618c6d9741b40498d53e1be07fcb61f
msgid "A string field, for small- to large-sized strings."
msgstr ""

#: ../../ref/models/fields.txt:367
# bb8caaae794c42b1ab377a5e1a4005de
msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""

#: ../../ref/models/fields.txt:369
#: ../../ref/models/fields.txt:469
#: ../../ref/models/fields.txt:707
#: ../../ref/models/fields.txt:899
# 04d280806ea64254a974c1c0fc17a2dd
# eadd76dbf2a54df6a7532dea25f83b9d
# 31ecab133921460faa94d484d0e194bd
# 0d55d358672741c1827c6694dcb88113
msgid "The admin represents this as an ``<input type=\"text\">`` (a single-line input)."
msgstr ""

#: ../../ref/models/fields.txt:371
# bb3c98ef043f49eba58ab83c6391c43e
msgid ":class:`CharField` has one extra required argument:"
msgstr ""

#: ../../ref/models/fields.txt:375
# 84de8ebbfc1a476c9364e9a8c67e1015
msgid "The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django's validation."
msgstr ""

#: ../../ref/models/fields.txt:380
# b7dcf4c4e6ba4da98ed3d89bbb1f537e
msgid "If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on ``max_length`` for some backends. Refer to the :doc:`database backend notes </ref/databases>` for details."
msgstr ""

#: ../../ref/models/fields.txt:387
# bb01c27cb9d34a11a0469b4ce3683c8d
msgid "If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin`` collation (which is *not* the default), there are some issues to be aware of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:394
# 994f13166e15490d9b959fd9888cbf23
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:398
# 6bbf4804ba114a7daf2f1cf17128b615
msgid "A field of integers separated by commas. As in :class:`CharField`, the :attr:`~CharField.max_length` argument is required and the note about database portability mentioned there should be heeded."
msgstr ""

#: ../../ref/models/fields.txt:407
# f774b4746e694e3b8aac6c82aac8b8e4
msgid "A date, represented in Python by a ``datetime.date`` instance. Has a few extra, optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:412
# 3199f20d3aef4046b8bca9f2a073bfe7
msgid "Automatically set the field to now every time the object is saved. Useful for \"last-modified\" timestamps. Note that the current date is *always* used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:418
# 1c7ce09deeb44140a89fb3288f1c086b
msgid "Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is *always* used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:422
# 36cc3053b9434115b0f0c8e79b62eaef
msgid "The admin represents this as an ``<input type=\"text\">`` with a JavaScript calendar, and a shortcut for \"Today\". Includes an additional ``invalid_date`` error message key."
msgstr ""

#: ../../ref/models/fields.txt:427
# 0f22a0c1979c4939aefeb58a511fd41a
msgid "As currently implemented, setting ``auto_now`` or ``auto_now_add`` to ``True`` will cause the field to have ``editable=False`` and ``blank=True`` set."
msgstr ""

#: ../../ref/models/fields.txt:436
# f65fde831e734877b348efcbe0619321
msgid "A date and time, represented in Python by a ``datetime.datetime`` instance. Takes the same extra arguments as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:439
# a108aca8b976498b93ab455b6abbb872
msgid "The admin represents this as two ``<input type=\"text\">`` fields, with JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:447
# 9a9b50688e1d47a7b6edae6ee88695ca
msgid "A fixed-precision decimal number, represented in Python by a :class:`~decimal.Decimal` instance. Has two **required** arguments:"
msgstr ""

#: ../../ref/models/fields.txt:452
# b280e751c6184f8a9863ba65e802af96
msgid "The maximum number of digits allowed in the number. Note that this number must be greater than or equal to ``decimal_places``, if it exists."
msgstr ""

#: ../../ref/models/fields.txt:457
# b631c1cfebbb4e1592c776dacbfb8806
msgid "The number of decimal places to store with the number."
msgstr ""

#: ../../ref/models/fields.txt:459
# 4cec94742b644453bf622f69031d948c
msgid "For example, to store numbers up to 999 with a resolution of 2 decimal places, you'd use::"
msgstr ""

#: ../../ref/models/fields.txt:464
# bb1272eb5a714b4198d32951fae9d715
msgid "And to store numbers up to approximately one billion with a resolution of 10 decimal places::"
msgstr ""

#: ../../ref/models/fields.txt:473
# 9717a31832af431680468e58847d49d8
msgid "For more information about the differences between the :class:`FloatField` and :class:`DecimalField` classes, please see :ref:`FloatField vs. DecimalField <floatfield_vs_decimalfield>`."
msgstr ""

#: ../../ref/models/fields.txt:482
# bfd10431cbb94493be40fce97fe16511
msgid "A :class:`CharField` that checks that the value is a valid email address."
msgstr ""

#: ../../ref/models/fields.txt:489
# c7f43a7a108c4fadbbaa293569259120
msgid "A file-upload field."
msgstr ""

#: ../../ref/models/fields.txt:492
# 72d701d392514e99bddb9fec39b283e9
msgid "The ``primary_key`` and ``unique`` arguments are not supported, and will raise a ``TypeError`` if used."
msgstr ""

#: ../../ref/models/fields.txt:495
# ebf9e99da6f84580bfd002ba28183ca7
msgid "Has one **required** argument:"
msgstr ""

#: ../../ref/models/fields.txt:499
# 5455c555baee4d5894a8dc3224ce50dd
msgid "A local filesystem path that will be appended to your :setting:`MEDIA_ROOT` setting to determine the value of the :attr:`~django.core.files.File.url` attribute."
msgstr ""

#: ../../ref/models/fields.txt:503
# e45eee94f40842f3887debe34019a756
msgid "This path may contain :func:`~time.strftime` formatting, which will be replaced by the date/time of the file upload (so that uploaded files don't fill up the given directory)."
msgstr ""

#: ../../ref/models/fields.txt:507
# 5a375be277ab42d4b65425fadb22e04c
msgid "This may also be a callable, such as a function, which will be called to obtain the upload path, including the filename. This callable must be able to accept two arguments, and return a Unix-style path (with forward slashes) to be passed along to the storage system. The two arguments that will be passed are:"
msgstr ""

#: ../../ref/models/fields.txt:516
#: ../../ref/signals.txt:293
#: ../../ref/signals.txt:319
# 15a595d7eaf24e91b59bc5acb42b3bbc
# ecff9d785510422c9d233990aab7735c
# b6f6560fe35f4123b3993116c53d4164
msgid "``instance``"
msgstr ""

#: ../../ref/models/fields.txt:516
# d587aead47c14edc869f385bd2a8c7b8
msgid "An instance of the model where the ``FileField`` is defined. More specifically, this is the particular instance where the current file is being attached."
msgstr ""

#: ../../ref/models/fields.txt:521
# 177b6438bf054b319eeb3de25c66454a
msgid "In most cases, this object will not have been saved to the database yet, so if it uses the default ``AutoField``, *it might not yet have a value for its primary key field*."
msgstr ""

#: ../../ref/models/fields.txt:526
# 52a774f20af648fb81f9781293c36894
msgid "``filename``"
msgstr ""

#: ../../ref/models/fields.txt:526
# 3945944d6b934ec0bcec56aabfb8d23a
msgid "The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path."
msgstr ""

#: ../../ref/models/fields.txt:531
# 8f270c73541a453fbfac9e8bd73e7b89
msgid "Also has one optional argument:"
msgstr ""

#: ../../ref/models/fields.txt:535
# 77ee3f2405204d34880a53bb8b989e86
msgid "Optional. A storage object, which handles the storage and retrieval of your files. See :doc:`/topics/files` for details on how to provide this object."
msgstr ""

#: ../../ref/models/fields.txt:538
# 043865a5629d4ab493f6e5c9a0bd3295
msgid "The admin represents this field as an ``<input type=\"file\">`` (a file-upload widget)."
msgstr ""

#: ../../ref/models/fields.txt:541
# c8ad1321220848e69fab8db920614ba7
msgid "Using a :class:`FileField` or an :class:`ImageField` (see below) in a model takes a few steps:"
msgstr ""

#: ../../ref/models/fields.txt:544
# 59360c2cf26b46ae9a082a4b38c7078b
msgid "In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the full path to a directory where you'd like Django to store uploaded files. (For performance, these files are not stored in the database.) Define :setting:`MEDIA_URL` as the base public URL of that directory. Make sure that this directory is writable by the Web server's user account."
msgstr ""

#: ../../ref/models/fields.txt:550
# 6376ee0b58604cc088bb485420346320
msgid "Add the :class:`FileField` or :class:`ImageField` to your model, making sure to define the :attr:`~FileField.upload_to` option to tell Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload files."
msgstr ""

#: ../../ref/models/fields.txt:554
# f8d31299a7ea4c14961055ff501a72d5
msgid "All that will be stored in your database is a path to the file (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:`~django.core.files.File.url` function provided by Django. For example, if your :class:`ImageField` is called ``mug_shot``, you can get the absolute path to your image in a template with ``{{ object.mug_shot.url }}``."
msgstr ""

#: ../../ref/models/fields.txt:561
# d9f4d9d01ec6406cba0122f894dbffa6
msgid "For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""

#: ../../ref/models/fields.txt:568
# 48ec58231dc8492ea605e2598fa3cfdc
msgid "If you wanted to retrieve the uploaded file's on-disk filename, or the file's size, you could use the :attr:`~django.core.files.File.name` and :attr:`~django.core.files.File.size` attributes respectively; for more information on the available attributes and methods, see the :class:`~django.core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""

#: ../../ref/models/fields.txt:576
# 271fcdf1bd264da5a3a741ba2e7b2282
msgid "The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved."
msgstr ""

#: ../../ref/models/fields.txt:580
# 29ebada52cbd444a983f1b8b05d6a655
msgid "The uploaded file's relative URL can be obtained using the :attr:`~django.db.models.fields.FileField.url` attribute. Internally, this calls the :meth:`~django.core.files.storage.Storage.url` method of the underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""

#: ../../ref/models/fields.txt:587
# a59e8863e6cd48ddbfd38daa4dd4549f
msgid "Note that whenever you deal with uploaded files, you should pay close attention to where you're uploading them and what type of files they are, to avoid security holes. *Validate all uploaded files* so that you're sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that's within your Web server's document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don't allow that."
msgstr ""

#: ../../ref/models/fields.txt:595
# 8567590280914c73a5031fda54db6a0b
msgid "Also note that even an uploaded HTML file, since it can be executed by the browser (though not by the server), can pose security threats that are equivalent to XSS or CSRF attacks."
msgstr ""

#: ../../ref/models/fields.txt:599
# 612fe0fd8b0a4ca6a51e905d6a30755a
msgid "By default, :class:`FileField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:604
# d48a9da43f05499ca0edf3a2cda35a88
msgid "FileField and FieldFile"
msgstr ""

#: ../../ref/models/fields.txt:606
# b9fa3b9a7a8c43698aee82a3efcd675d
msgid "When you access a :class:`FileField` on a model, you are given an instance of :class:`FieldFile` as a proxy for accessing the underlying file. This class has several methods that can be used to interact with file data:"
msgstr ""

#: ../../ref/models/fields.txt:612
# 822f0015802b46139e2b95148ec4cb75
msgid "Behaves like the standard Python ``open()`` method and opens the file associated with this instance in the mode specified by ``mode``."
msgstr ""

#: ../../ref/models/fields.txt:617
# 83afcdb5f0a84cb285ccb04ef6cede69
msgid "Behaves like the standard Python ``file.close()`` method and closes the file associated with this instance."
msgstr ""

#: ../../ref/models/fields.txt:622
# e27e9c5d01e54f43a54b237425d09264
msgid "This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with :class:`FileField` instances on your model, the ``save()`` method is used to persist that file data."
msgstr ""

#: ../../ref/models/fields.txt:628
# ba7720d7394444088b9a544c2f4b341d
msgid "Takes two required arguments: ``name`` which is the name of the file, and ``content`` which is an object containing the file's contents.  The optional ``save`` argument controls whether or not the instance is saved after the file has been altered. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:633
# c8c68d93072a40079be54735be8f5aca
msgid "Note that the ``content`` argument should be an instance of :class:`django.core.files.File`, not Python's built-in file object. You can construct a :class:`~django.core.files.File` from an existing Python file object like this::"
msgstr ""

#: ../../ref/models/fields.txt:643
# 6f2b2d623958414cb7d8c76b46aef284
msgid "Or you can construct one from a Python string like this::"
msgstr ""

#: ../../ref/models/fields.txt:648
# 913cca77096d4897ac2a27ef5fb93d56
msgid "For more information, see :doc:`/topics/files`."
msgstr ""

#: ../../ref/models/fields.txt:652
# ed57a86e7aa44ed9be3905f64caf6db5
msgid "Deletes the file associated with this instance and clears all attributes on the field. Note: This method will close the file if it happens to be open when ``delete()`` is called."
msgstr ""

#: ../../ref/models/fields.txt:656
# 155642f40f624129abc41fc88289d165
msgid "The optional ``save`` argument controls whether or not the instance is saved after the file has been deleted. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:664
# 32e16ed20c6246f5a41217900005283a
msgid "A :class:`CharField` whose choices are limited to the filenames in a certain directory on the filesystem. Has three special arguments, of which the first is **required**:"
msgstr ""

#: ../../ref/models/fields.txt:670
# 833e276726294721b25c6a5ab52893ba
msgid "Required. The absolute filesystem path to a directory from which this :class:`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""

#: ../../ref/models/fields.txt:675
# 2b8a31e16f2f4cda890c6fcf9c6f2e14
msgid "Optional. A regular expression, as a string, that :class:`FilePathField` will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.gif``."
msgstr ""

#: ../../ref/models/fields.txt:682
# 71310cf371cf47a887d2b0544610e158
msgid "Optional. Either ``True`` or ``False``. Default is ``False``. Specifies whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""

#: ../../ref/models/fields.txt:685
# 417ca8bc141f453b93e7151bd591a738
msgid "Of course, these arguments can be used together."
msgstr ""

#: ../../ref/models/fields.txt:687
# 80a7ee02f44d4327b3e145b8ab79b1bb
msgid "The one potential gotcha is that :attr:`~FilePathField.match` applies to the base filename, not the full path. So, this example::"
msgstr ""

#: ../../ref/models/fields.txt:692
# dd2fc108f0594608b36c3d191a386f13
msgid "...will match ``/home/images/foo.gif`` but not ``/home/images/foo/bar.gif`` because the :attr:`~FilePathField.match` applies to the base filename (``foo.gif`` and ``bar.gif``)."
msgstr ""

#: ../../ref/models/fields.txt:696
# 24e8a8ce4d9d4dcdae061bfab4cebc77
msgid "By default, :class:`FilePathField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:705
# 6ef25f52f4db4cd9af27e01d1ece1f26
msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr ""

#: ../../ref/models/fields.txt:713
# ed380cb2701d4c4ca95bcae0903d4929
msgid "The :class:`FloatField` class is sometimes mixed up with the :class:`DecimalField` class. Although they both represent real numbers, they represent those numbers differently. ``FloatField`` uses Python's ``float`` type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For information on the difference between the two, see Python's documentation for the :mod:`decimal` module."
msgstr ""

#: ../../ref/models/fields.txt:725
# 51713378c5644b2caa476de4bbfc8534
msgid "Inherits all attributes and methods from :class:`FileField`, but also validates that the uploaded object is a valid image."
msgstr ""

#: ../../ref/models/fields.txt:728
# 92d0ed36bac743b2b69aec24d4ef490c
msgid "In addition to the special attributes that are available for :class:`FileField`, an :class:`ImageField` also has :attr:`~django.core.files.File.height` and :attr:`~django.core.files.File.width` attributes."
msgstr ""

#: ../../ref/models/fields.txt:732
# 4dec876359644be79dc02c9169db0b29
msgid "To facilitate querying on those attributes, :class:`ImageField` has two extra optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:737
# 32c8b60f6cec4e7aa1041196c2256481
msgid "Name of a model field which will be auto-populated with the height of the image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:742
# 30bddd60079c41f28f958ebbf59c4c1b
msgid "Name of a model field which will be auto-populated with the width of the image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:745
# 6016f11b117244028d9d13932ad8c96d
msgid "Requires the `Python Imaging Library`_."
msgstr ""

#: ../../ref/models/fields.txt:749
# 651c7a8cca3c49d0b9e4ac9eea675b21
msgid "By default, :class:`ImageField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:758
# 8cd68a29d04842189e2c6a4c1199e99a
msgid "An integer. The admin represents this as an ``<input type=\"text\">`` (a single-line input)."
msgstr ""

#: ../../ref/models/fields.txt:766
# bb4547e5250b48ff82e8c2b97c1269d9
msgid "An IP address, in string format (e.g. \"192.0.2.30\"). The admin represents this as an ``<input type=\"text\">`` (a single-line input)."
msgstr ""

#: ../../ref/models/fields.txt:776
# 5795476f9311441c8c4a4faab3d72581
msgid "An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or ``2a02:42fe::4``). The admin represents this as an ``<input type=\"text\">`` (a single-line input)."
msgstr ""

#: ../../ref/models/fields.txt:788
# 82e9907c05fd46ebb177bc59eceeb92e
msgid "Limits valid inputs to the specified protocol. Accepted values are ``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""

#: ../../ref/models/fields.txt:804
# 0bb6fe309d3043a99016b0a80485b5d9
msgid "Like a :class:`BooleanField`, but allows ``NULL`` as one of the options. Use this instead of a :class:`BooleanField` with ``null=True``. The admin represents this as a ``<select>`` box with \"Unknown\", \"Yes\" and \"No\" choices."
msgstr ""

#: ../../ref/models/fields.txt:809
# d8aee9099a074b7c86e204ca17cc8a80
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:813
# da170588854a495ba1b93dc5cbdefe85
msgid "Like an :class:`IntegerField`, but must be either positive or zero (`0`). The value `0` is accepted for backward compatibility reasons."
msgstr ""

#: ../../ref/models/fields.txt:817
# 70fc047f25cf4fd3af12bf616a26c502
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:821
# 188e72038ecb4323981f52e4ef62bc3b
msgid "Like a :class:`PositiveIntegerField`, but only allows values under a certain (database-dependent) point."
msgstr ""

#: ../../ref/models/fields.txt:829
# fa75f7b139af424295d9d67d442ee7f6
msgid ":term:`Slug` is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They're generally used in URLs."
msgstr ""

#: ../../ref/models/fields.txt:833
# 9a124e7aa77f4ad38f2bba92dec98ca8
msgid "Like a CharField, you can specify :attr:`~CharField.max_length` (read the note about database portability and :attr:`~CharField.max_length` in that section, too). If :attr:`~CharField.max_length` is not specified, Django will use a default length of 50."
msgstr ""

#: ../../ref/models/fields.txt:838
# 42eec7cc82ac4c39ba3c2ce17b8cc720
msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:840
# 65813b7505014760a576132eaaa291ce
msgid "It is often useful to automatically prepopulate a SlugField based on the value of some other value.  You can do this automatically in the admin using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""

#: ../../ref/models/fields.txt:845
# 9a805203b5b44dd6b132ec82f2a67142
msgid "``SmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:849
# 51de7c03df7a443c81bea26b5a33fd1e
msgid "Like an :class:`IntegerField`, but only allows values under a certain (database-dependent) point."
msgstr ""

#: ../../ref/models/fields.txt:853
# 6be6a844ed264bb8a7d3f5ae3df9c70c
msgid "``TextField``"
msgstr ""

#: ../../ref/models/fields.txt:857
# d031b1d5f790463195f1a54f6eea3e2f
msgid "A large text field. The admin represents this as a ``<textarea>`` (a multi-line input)."
msgstr ""

#: ../../ref/models/fields.txt:862
# 1cc0a213a26b4082bf71523702161bfb
msgid "If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin`` collation (which is *not* the default), there are some issues to be aware of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:872
# f1931e1e78b04b6ba04a49d48a0f7b6d
msgid "A time, represented in Python by a ``datetime.time`` instance. Accepts the same auto-population options as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:875
# c4140b8895f04eb1a520bd57a21be814
msgid "The admin represents this as an ``<input type=\"text\">`` with some JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:883
# e408575d1db2472d94524682f0186959
msgid "A :class:`CharField` for a URL. Has one extra optional argument:"
msgstr ""

#: ../../ref/models/fields.txt:891
# 04600b0419674040900c5a0b4def0558
msgid "If ``True``, the URL given will be checked for existence (i.e., the URL actually loads and doesn't give a 404 response) using a ``HEAD`` request. Redirects are allowed, but will not be followed."
msgstr ""

#: ../../ref/models/fields.txt:895
# 9f551207f4d44e8d9ee4fafb011032a5
msgid "Note that when you're using the single-threaded development server, validating a URL being served by the same server will hang. This should not be a problem for multithreaded servers."
msgstr ""

#: ../../ref/models/fields.txt:901
# 6147509f884f49329d40f47145395dcf
msgid "Like all :class:`CharField` subclasses, :class:`URLField` takes the optional :attr:`~CharField.max_length`argument. If you don't specify :attr:`~CharField.max_length`, a default of 200 is used."
msgstr ""

#: ../../ref/models/fields.txt:907
# 7ab791bda25040c29eb245f2f311e8c4
msgid "Relationship fields"
msgstr ""

#: ../../ref/models/fields.txt:914
# d230e764b2074629962299096dbd2d36
msgid "Django also defines a set of fields that represent relations."
msgstr ""

#: ../../ref/models/fields.txt:919
# c8f1436290d34354a21a55d133e3cf7a
msgid "``ForeignKey``"
msgstr ""

#: ../../ref/models/fields.txt:923
# 6fd95e8d550740c7989931465d7edc5b
msgid "A many-to-one relationship. Requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../ref/models/fields.txt:928
# 2e862a7c218c41879fa08107c78c885e
msgid "To create a recursive relationship -- an object that has a many-to-one relationship with itself -- use ``models.ForeignKey('self')``."
msgstr ""

#: ../../ref/models/fields.txt:933
# fd4a5a4a2a92480e84c3d8d6fe4e2f5b
msgid "If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself::"
msgstr ""

#: ../../ref/models/fields.txt:943
# 00f21c63ccff49d59eab5bd41343417f
msgid "To refer to models defined in another application, you can explicitly specify a model with the full application label. For example, if the ``Manufacturer`` model above is defined in another application called ``production``, you'd need to use::"
msgstr ""

#: ../../ref/models/fields.txt:951
# 8a1da00afab34f08a6f65af72373de2d
msgid "This sort of reference can be useful when resolving circular import dependencies between two applications."
msgstr ""

#: ../../ref/models/fields.txt:955
#: ../../ref/models/fields.txt:1069
# 69be16fcfe99405eb52b29aca34f6f1b
# 423760e2f8d44271a8cd2513999bfd2f
msgid "Database Representation"
msgstr ""

#: ../../ref/models/fields.txt:957
# 505cad08dce24b8bb3e88e552627bab4
msgid "Behind the scenes, Django appends ``\"_id\"`` to the field name to create its database column name. In the above example, the database table for the ``Car`` model will have a ``manufacturer_id`` column. (You can change this explicitly by specifying :attr:`~Field.db_column`) However, your code should never have to deal with the database column name, unless you write custom SQL. You'll always deal with the field names of your model object."
msgstr ""

#: ../../ref/models/fields.txt:967
#: ../../ref/models/fields.txt:1084
# 81d0e348d99f46a9a43c824a8225df31
# ff5eceb232bf44f6a11c1468d5f51538
msgid "Arguments"
msgstr ""

#: ../../ref/models/fields.txt:969
# 5d13f696f937423abca9f742c7b5658b
msgid ":class:`ForeignKey` accepts an extra set of arguments -- all optional -- that define the details of how the relation works."
msgstr ""

#: ../../ref/models/fields.txt:974
# b6b3602de8e0442faac94216845bdc60
msgid "A dictionary of lookup arguments and values (see :doc:`/topics/db/queries`) that limit the available admin choices for this object. Use this with functions from the Python ``datetime`` module to limit choices of objects by date. For example::"
msgstr ""

#: ../../ref/models/fields.txt:981
# 2a49c2c7a36c4956aab78172833e2ef8
msgid "only allows the choice of related objects with a ``pub_date`` before the current date/time to be chosen."
msgstr ""

#: ../../ref/models/fields.txt:984
# 9ecf781783734ceaa9f2ef748e4fda3c
msgid "Instead of a dictionary this can also be a :class:`~django.db.models.Q` object for more :ref:`complex queries <complex-lookups-with-q>`. However, if ``limit_choices_to`` is a :class:`~django.db.models.Q` object then it will only have an effect on the choices available in the admin when the field is not listed in ``raw_id_fields`` in the ``ModelAdmin`` for the model."
msgstr ""

#: ../../ref/models/fields.txt:992
# 319121b1e0f64db4a5554e986db85bb9
msgid "The name to use for the relation from the related object back to this one. See the :ref:`related objects documentation <backwards-related-objects>` for a full explanation and example. Note that you must set this value when defining relations on :ref:`abstract models <abstract-base-classes>`; and when you do so :ref:`some special syntax <abstract-related-name>` is available."
msgstr ""

#: ../../ref/models/fields.txt:999
# bfa56717ed984c27a83cafac9ce1ff95
msgid "If you'd prefer Django didn't create a backwards relation, set ``related_name`` to ``'+'``. For example, this will ensure that the ``User`` model won't get a backwards relation to this model::"
msgstr ""

#: ../../ref/models/fields.txt:1007
# abe242afe2374a11a986d16c50fd1a1e
msgid "The field on the related object that the relation is to. By default, Django uses the primary key of the related object."
msgstr ""

#: ../../ref/models/fields.txt:1014
# 8d689f13e9494c8b9a75f5a99c1ad081
msgid "When an object referenced by a :class:`ForeignKey` is deleted, Django by default emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` and also deletes the object containing the ``ForeignKey``. This behavior can be overridden by specifying the :attr:`on_delete` argument. For example, if you have a nullable :class:`ForeignKey` and you want it to be set null when the referenced object is deleted::"
msgstr ""

#: ../../ref/models/fields.txt:1023
# 0596e27183ed4eb98b3cccb70a980ef0
msgid "The possible values for :attr:`on_delete` are found in :mod:`django.db.models`:"
msgstr ""

#: ../../ref/models/fields.txt:1026
# 2356b7e336e141a5b31a5fe4aa2f9ebf
msgid ":attr:`~django.db.models.CASCADE`: Cascade deletes; the default."
msgstr ""

#: ../../ref/models/fields.txt:1028
# f901d46a0c4142fb81f12a4fe1c93eac
msgid ":attr:`~django.db.models.PROTECT`: Prevent deletion of the referenced object by raising :exc:`django.db.models.ProtectedError`, a subclass of :exc:`django.db.IntegrityError`."
msgstr ""

#: ../../ref/models/fields.txt:1032
# 89866001ca274e6b9e20ca8bea269bf9
msgid ":attr:`~django.db.models.SET_NULL`: Set the :class:`ForeignKey` null; this is only possible if :attr:`null` is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:1035
# fc27016262714f89b68ceca29889f816
msgid ":attr:`~django.db.models.SET_DEFAULT`: Set the :class:`ForeignKey` to its default value; a default for the :class:`ForeignKey` must be set."
msgstr ""

#: ../../ref/models/fields.txt:1038
# 7a271cc33014449dade2aba8f252a4ae
msgid ":func:`~django.db.models.SET()`: Set the :class:`ForeignKey` to the value passed to :func:`~django.db.models.SET()`, or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported::"
msgstr ""

#: ../../ref/models/fields.txt:1050
# afabf2c0f88f40b99b9ce36d77eb7b30
msgid ":attr:`~django.db.models.DO_NOTHING`: Take no action. If your database backend enforces referential integrity, this will cause an :exc:`~django.db.IntegrityError` unless you manually add a SQL ``ON DELETE`` constraint to the database field (perhaps using :ref:`initial sql<initial-sql>`)."
msgstr ""

#: ../../ref/models/fields.txt:1059
# 6417d95802f74ae78ff7c76237969f93
msgid "``ManyToManyField``"
msgstr ""

#: ../../ref/models/fields.txt:1063
# be5551ee599345fc94b5429c705ebb7f
msgid "A many-to-many relationship. Requires a positional argument: the class to which the model is related. This works exactly the same as it does for :class:`ForeignKey`, including all the options regarding :ref:`recursive <recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1071
# 0d0cecfe47e74c1aa95ee2bf8643b93d
msgid "Behind the scenes, Django creates an intermediary join table to represent the many-to-many relationship. By default, this table name is generated using the name of the many-to-many field and the model that contains it. Since some databases don't support table names above a certain length, these table names will be automatically truncated to 64 characters and a uniqueness hash will be used. This means you might see table names like ``author_books_9cdf4``; this is perfectly normal. You can manually provide the name of the join table using the :attr:`~ManyToManyField.db_table` option."
msgstr ""

#: ../../ref/models/fields.txt:1086
# b28999cd8fa04895b33397e0591f3925
msgid ":class:`ManyToManyField` accepts an extra set of arguments -- all optional -- that control how the relationship functions."
msgstr ""

#: ../../ref/models/fields.txt:1091
# ff6cd275d8574b98864c269945b8cbd9
msgid "Same as :attr:`ForeignKey.related_name`."
msgstr ""

#: ../../ref/models/fields.txt:1095
# 2821b9c1311544fd968521047a2e43b1
msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr ""

#: ../../ref/models/fields.txt:1097
# 2f93fc5147454d72b985d7beb7d625be
msgid "``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a custom intermediate table specified using the :attr:`~ManyToManyField.through` parameter."
msgstr ""

#: ../../ref/models/fields.txt:1103
# fd633894d6c349f59f0c181c1c556577
msgid "Only used in the definition of ManyToManyFields on self. Consider the following model::"
msgstr ""

#: ../../ref/models/fields.txt:1109
# 5277eb304cad4b3e98f50381fb98b8c6
msgid "When Django processes this model, it identifies that it has a :class:`ManyToManyField` on itself, and as a result, it doesn't add a ``person_set`` attribute to the ``Person`` class. Instead, the :class:`ManyToManyField` is assumed to be symmetrical -- that is, if I am your friend, then you are my friend."
msgstr ""

#: ../../ref/models/fields.txt:1115
# 2efe5342835f4a5dbd1dea97add9a1f8
msgid "If you do not want symmetry in many-to-many relationships with ``self``, set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force Django to add the descriptor for the reverse relationship, allowing :class:`ManyToManyField` relationships to be non-symmetrical."
msgstr ""

#: ../../ref/models/fields.txt:1122
# 0d37dbfd4c5a471b8c775d0f8468583d
msgid "Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the :attr:`~ManyToManyField.through` option to specify the Django model that represents the intermediate table that you want to use."
msgstr ""

#: ../../ref/models/fields.txt:1128
# 92c1c14befd9447f8cead98143acf266
msgid "The most common use for this option is when you want to associate :ref:`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""

#: ../../ref/models/fields.txt:1134
# db3aaf12bd6d4465958b2b8c830f897a
msgid "The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of the two tables being joined."
msgstr ""

#: ../../ref/models/fields.txt:1141
# 460e7d27538b4bb39ed37b4e82c32f49
msgid "``OneToOneField``"
msgstr ""

#: ../../ref/models/fields.txt:1145
# a88e8bdfc01c4715a50675f7d54f4a11
msgid "A one-to-one relationship. Conceptually, this is similar to a :class:`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" side of the relation will directly return a single object."
msgstr ""

#: ../../ref/models/fields.txt:1149
# e09f3d16ef0d4e28b7ddba28958b8e07
msgid "This is most useful as the primary key of a model which \"extends\" another model in some way; :ref:`multi-table-inheritance` is implemented by adding an implicit one-to-one relation from the child model to the parent model, for example."
msgstr ""

#: ../../ref/models/fields.txt:1154
# bb3d97bf3878476696ae65316effcc01
msgid "One positional argument is required: the class to which the model will be related. This works exactly the same as it does for :class:`ForeignKey`, including all the options regarding :ref:`recursive <recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1161
# 75a3f5e6515e4dc0a0232eafb1dcc115
msgid "Additionally, ``OneToOneField`` accepts all of the extra arguments accepted by :class:`ForeignKey`, plus one extra argument:"
msgstr ""

#: ../../ref/models/fields.txt:1166
# 13eb20502a75451e9d29a32b404a5c26
msgid "When ``True`` and used in a model which inherits from another (concrete) model, indicates that this field should be used as the link back to the parent class, rather than the extra ``OneToOneField`` which would normally be implicitly created by subclassing."
msgstr ""

#: ../../ref/models/index.txt:5
# 8dc18905199344a0bb487e5e0034055d
msgid "Model API reference. For introductory material, see :doc:`/topics/db/models`."
msgstr ""

#: ../../ref/models/instances.txt:3
# 920d3943109d4f789b9261a4130160b5
msgid "Model instance reference"
msgstr ""

#: ../../ref/models/instances.txt:7
# ca67cf2813ea4c89ad7a907537a914ed
msgid "This document describes the details of the ``Model`` API. It builds on the material presented in the :doc:`model </topics/db/models>` and :doc:`database query </topics/db/queries>` guides, so you'll probably want to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/instances.txt:12
#: ../../ref/models/querysets.txt:12
# 95e02db56f394706b9c9f457baa1fd2f
# a7f54df9470244c2b17d95d23806491f
msgid "Throughout this reference we'll use the :ref:`example Weblog models <queryset-model-example>` presented in the :doc:`database query guide </topics/db/queries>`."
msgstr ""

#: ../../ref/models/instances.txt:17
# 00a66a68272143ef848a95883382ebd6
msgid "Creating objects"
msgstr ""

#: ../../ref/models/instances.txt:19
# 4b778c38c8364e9dbb9a8f5b222c2d45
msgid "To create a new instance of a model, just instantiate it like any other Python class:"
msgstr ""

#: ../../ref/models/instances.txt:24
# f6bc85f2e18b4f70b450196ac5148853
msgid "The keyword arguments are simply the names of the fields you've defined on your model. Note that instantiating a model in no way touches your database; for that, you need to :meth:`~Model.save()`."
msgstr ""

#: ../../ref/models/instances.txt:31
# 73b502b26ffb413baab36c2c85b55eb7
msgid "Validating objects"
msgstr ""

#: ../../ref/models/instances.txt:35
# ffb9ef86c9914fb0ba0e2281badc4e92
msgid "There are three steps involved in validating a model:"
msgstr ""

#: ../../ref/models/instances.txt:37
# 7bf290a8a68b4ca0b9f2e2235286191d
msgid "Validate the model fields"
msgstr ""

#: ../../ref/models/instances.txt:38
# 4ce6ef769e1b422488b750a0b0783148
msgid "Validate the model as a whole"
msgstr ""

#: ../../ref/models/instances.txt:39
# 5b52cba8f2a24fb590e830277937dfad
msgid "Validate the field uniqueness"
msgstr ""

#: ../../ref/models/instances.txt:41
# aa163b2c01ca4192baa8cf5c61608b25
msgid "All three steps are performed when you call a model's :meth:`~Model.full_clean()` method."
msgstr ""

#: ../../ref/models/instances.txt:44
# b6e1597f29c246a2ae9cf18df7d12e6d
msgid "When you use a :class:`~django.forms.ModelForm`, the call to :meth:`~django.forms.Form.is_valid()` will perform these validation steps for all the fields that are included on the form. See the :doc:`ModelForm documentation </topics/forms/modelforms>` for more information. You should only need to call a model's :meth:`~Model.full_clean()` method if you plan to handle validation errors yourself, or if you have excluded fields from the :class:`~django.forms.ModelForm` that require validation."
msgstr ""

#: ../../ref/models/instances.txt:54
# d34ba97294564071bfe52dd53ad53984
msgid "This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and :meth:`Model.validate_unique()`, in that order and raises a :exc:`~django.core.exceptions.ValidationError` that has a ``message_dict`` attribute containing errors from all three stages."
msgstr ""

#: ../../ref/models/instances.txt:59
# 9c38a27e81ad4753a0becedeaa826011
msgid "The optional ``exclude`` argument can be used to provide a list of field names that can be excluded from validation and cleaning. :class:`~django.forms.ModelForm` uses this argument to exclude fields that aren't present on your form from being validated since any errors raised could not be corrected by the user."
msgstr ""

#: ../../ref/models/instances.txt:65
# fce74c1b23454f37b6285c046097a2f1
msgid "Note that ``full_clean()`` will *not* be called automatically when you call your model's :meth:`~Model.save()` method, nor as a result of :class:`~django.forms.ModelForm` validation. You'll need to call it manually when you want to run one-step model validation for your own manually created models."
msgstr ""

#: ../../ref/models/instances.txt:79
# 1f0c49dcf6014b49b45340414c1eebfd
msgid "The first step ``full_clean()`` performs is to clean each individual field."
msgstr ""

#: ../../ref/models/instances.txt:83
# 515fe916234947cdbf866e94d586d7c4
msgid "This method will validate all fields on your model. The optional ``exclude`` argument lets you provide a list of field names to exclude from validation. It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:88
# c523f38127f24fffb06e34a3e602ca36
msgid "The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. This method should be overridden to perform custom validation on your model."
msgstr ""

#: ../../ref/models/instances.txt:93
# 6b6742eb6e864dcd99b12070be7ff640
msgid "This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field::"
msgstr ""

#: ../../ref/models/instances.txt:107
# 4a014e35a7b14f7683450f2a6e69475d
msgid "Any :exc:`~django.core.exceptions.ValidationError` exceptions raised by ``Model.clean()`` will be stored in a special key error dictionary key, ``NON_FIELD_ERRORS``, that is used for errors that are tied to the entire model instead of to a specific field::"
msgstr ""

#: ../../ref/models/instances.txt:118
# b0032b3fa4d2494699cddfc04e6e14ce
msgid "Finally, ``full_clean()`` will check any unique constraints on your model."
msgstr ""

#: ../../ref/models/instances.txt:122
# a3fbeb5bfef4435bb4a072e6be0684c6
msgid "This method is similar to :meth:`~Model.clean_fields`, but validates all uniqueness constraints on your model instead of individual field values. The optional ``exclude`` argument allows you to provide a list of field names to exclude from validation. It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:128
# ea6ae715a04145f6a46b0266e50dcf08
msgid "Note that if you provide an ``exclude`` argument to ``validate_unique()``, any :attr:`~django.db.models.Options.unique_together` constraint involving one of the fields you provided will not be checked."
msgstr ""

#: ../../ref/models/instances.txt:134
# 49ca8d6577d743d0877f4d18e8a8005a
msgid "Saving objects"
msgstr ""

#: ../../ref/models/instances.txt:136
# f6b04768d3f24855b9858ce45ff5e989
msgid "To save an object back to the database, call ``save()``:"
msgstr ""

#: ../../ref/models/instances.txt:143
# 6a973337a921499292ed82c5de80cfea
msgid "If you want customized saving behavior, you can override this ``save()`` method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:146
# fe967e15596f418a9fe0c108d0af9a46
msgid "The model save process also has some subtleties; see the sections below."
msgstr ""

#: ../../ref/models/instances.txt:149
# 07fa467473b347e38d27d324b1f2a7ae
msgid "Auto-incrementing primary keys"
msgstr ""

#: ../../ref/models/instances.txt:151
# ad19871cbf2a428b9f05389be6a5b5d3
msgid "If a model has an :class:`~django.db.models.AutoField` — an auto-incrementing primary key — then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call ``save()``::"
msgstr ""

#: ../../ref/models/instances.txt:160
# 1ea988b183a34c94a3143c33ed6a9cb1
msgid "There's no way to tell what the value of an ID will be before you call ``save()``, because that value is calculated by your database, not by Django."
msgstr ""

#: ../../ref/models/instances.txt:163
# 83649ad2c9dc4a0795db4fdddb2905b8
msgid "For convenience, each model has an :class:`~django.db.models.AutoField` named ``id`` by default unless you explicitly specify ``primary_key=True`` on a field in your model. See the documentation for :class:`~django.db.models.AutoField` for more details."
msgstr ""

#: ../../ref/models/instances.txt:169
# 59486e51dffe4226ab7c3ca808fb428d
msgid "The ``pk`` property"
msgstr ""

#: ../../ref/models/instances.txt:173
# 196e3f4e5b174691af43a93a808cc110
msgid "Regardless of whether you define a primary key field yourself, or let Django supply one for you, each model will have a property called ``pk``. It behaves like a normal attribute on the model, but is actually an alias for whichever attribute is the primary key field for the model. You can read and set this value, just as you would for any other attribute, and it will update the correct field in the model."
msgstr ""

#: ../../ref/models/instances.txt:181
# 34f67e1459fd49eb9083e4312b2ba665
msgid "Explicitly specifying auto-primary-key values"
msgstr ""

#: ../../ref/models/instances.txt:183
# 7cfc2c81f3fe4d399f5c2f7c23e07a7a
msgid "If a model has an :class:`~django.db.models.AutoField` but you want to define a new object's ID explicitly when saving, just define it explicitly before saving, rather than relying on the auto-assignment of the ID::"
msgstr ""

#: ../../ref/models/instances.txt:192
# 6a990ac295894041bc30decef4a32cf1
msgid "If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you're changing the existing record rather than creating a new one."
msgstr ""

#: ../../ref/models/instances.txt:197
# 6439b8a372e14e9da721b038e4657279
msgid "Given the above ``'Cheddar Talk'`` blog example, this example would override the previous record in the database::"
msgstr ""

#: ../../ref/models/instances.txt:203
# 7db33fc65b094a7c807c227cc4c8044b
msgid "See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this happens."
msgstr ""

#: ../../ref/models/instances.txt:206
# 1ebcbba0d14442b19dc00a8d746c3f63
msgid "Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you're confident you won't have primary-key collision."
msgstr ""

#: ../../ref/models/instances.txt:210
# f196291f86d14f4cbe82987114ccbd69
msgid "What happens when you save?"
msgstr ""

#: ../../ref/models/instances.txt:212
# cb6b66ae674c432ca5cc9512db6a7ac5
msgid "When you save an object, Django performs the following steps:"
msgstr ""

#: ../../ref/models/instances.txt:214
# 02720c265d3f4944a76a59bd44773863
msgid "**Emit a pre-save signal.** The :doc:`signal </ref/signals>` :attr:`django.db.models.signals.pre_save` is sent, allowing any functions listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:219
# ed3da1625cf74a649dd6ff804328efe7
msgid "**Pre-process the data.** Each field on the object is asked to perform any automated data modification that the field may need to perform."
msgstr ""

#: ../../ref/models/instances.txt:223
# 2fac9d3f94a44ce1b7a6533a4e63a2c5
msgid "Most fields do *no* pre-processing — the field data is kept as-is. Pre-processing is only used on fields that have special behavior.  For example, if your model has a :class:`~django.db.models.DateField` with ``auto_now=True``, the pre-save phase will alter the data in the object to ensure that the date field contains the current date stamp. (Our documentation doesn't yet include a list of all the fields with this \"special behavior.\")"
msgstr ""

#: ../../ref/models/instances.txt:231
# e2b2aaf7de184848bd0805feae3de85d
msgid "**Prepare the data for the database.** Each field is asked to provide its current value in a data type that can be written to the database."
msgstr ""

#: ../../ref/models/instances.txt:234
# 0178dad042a04455a88e39f3c1368834
msgid "Most fields require *no* data preparation. Simple data types, such as integers and strings, are 'ready to write' as a Python object. However, more complex data types often require some modification."
msgstr ""

#: ../../ref/models/instances.txt:238
# d3c9a4396bc943f8885e2afb80aebb34
msgid "For example, :class:`~django.db.models.DateField` fields use a Python ``datetime`` object to store data. Databases don't store ``datetime`` objects, so the field value must be converted into an ISO-compliant date string for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:243
# 8d93e20359e04fc099515d23b0192fcc
msgid "**Insert the data into the database.** The pre-processed, prepared data is then composed into an SQL statement for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:247
# a3ec105dece14891961ae7a27c74c965
msgid "**Emit a post-save signal.** The signal :attr:`django.db.models.signals.post_save` is sent, allowing any functions listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:253
# 715d07f03ff24800a4e56996b27400a0
msgid "How Django knows to UPDATE vs. INSERT"
msgstr ""

#: ../../ref/models/instances.txt:255
# e24599ed7a19491e864de17a91e7e84b
msgid "You may have noticed Django database objects use the same ``save()`` method for creating and changing objects. Django abstracts the need to use ``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call ``save()``, Django follows this algorithm:"
msgstr ""

#: ../../ref/models/instances.txt:260
# f70f697851554180acd3da0c7d9cf379
msgid "If the object's primary key attribute is set to a value that evaluates to ``True`` (i.e., a value other than ``None`` or the empty string), Django executes a ``SELECT`` query to determine whether a record with the given primary key already exists."
msgstr ""

#: ../../ref/models/instances.txt:264
# 877848ca63c742fd95ff9e29a7bcdf14
msgid "If the record with the given primary key does already exist, Django executes an ``UPDATE`` query."
msgstr ""

#: ../../ref/models/instances.txt:266
# ed069e7172b9445287d2d22928881721
msgid "If the object's primary key attribute is *not* set, or if it's set but a record doesn't exist, Django executes an ``INSERT``."
msgstr ""

#: ../../ref/models/instances.txt:269
# ab2217649aad4953ae6f88e88aa45919
msgid "The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see `Explicitly specifying auto-primary-key values`_ above and `Forcing an INSERT or UPDATE`_ below."
msgstr ""

#: ../../ref/models/instances.txt:277
# dbbb216710394fdab9cd620efc7bba2b
msgid "Forcing an INSERT or UPDATE"
msgstr ""

#: ../../ref/models/instances.txt:279
# fe29058ccdb94dc38f8e390de2d0a06f
msgid "In some rare circumstances, it's necessary to be able to force the :meth:`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the ``force_insert=True`` or ``force_update=True`` parameters to the :meth:`~Model.save()` method. Obviously, passing both parameters is an error: you cannot both insert *and* update at the same time!"
msgstr ""

#: ../../ref/models/instances.txt:287
# c2ea1b816cbe40ea825f14d98b40a157
msgid "It should be very rare that you'll need to use these parameters. Django will almost always do the right thing and trying to override that will lead to errors that are difficult to track down. This feature is for advanced use only."
msgstr ""

#: ../../ref/models/instances.txt:293
# 0b804b890c4b4c9ea05101f52c1b38fb
msgid "Updating attributes based on existing fields"
msgstr ""

#: ../../ref/models/instances.txt:295
# 22c1584f466f48dc974dc40ef1d93ddb
msgid "Sometimes you'll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. The obvious way to achieve this is to do something like::"
msgstr ""

#: ../../ref/models/instances.txt:303
# 7ab4883260e640659c66206ef2721f33
msgid "If the old ``number_sold`` value retrieved from the database was 10, then the value of 11 will be written back to the database."
msgstr ""

#: ../../ref/models/instances.txt:306
# 8eefc9a9f3474df8ae06b71dd08114c9
msgid "This sequence has a standard update problem in that it contains a race condition. If another thread of execution has already saved an updated value after the current thread retrieved the old value, the current thread will only save the old value plus one, rather than the new (current) value plus one."
msgstr ""

#: ../../ref/models/instances.txt:311
# 2406ee5f263b4ab38a368d89c62eeebc
msgid "The process can be made robust and slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides :ref:`F() expressions <query-expressions>` for performing this kind of relative update. Using ``F()`` expressions, the previous example is expressed as::"
msgstr ""

#: ../../ref/models/instances.txt:322
# 8857a4d8d7634ed2a6d94a1aa1f2f512
msgid "This approach doesn't use the initial value from the database. Instead, it makes the database do the update based on whatever value is current at the time that the :meth:`~Model.save()` is executed."
msgstr ""

#: ../../ref/models/instances.txt:326
# f6e757a3f6f04af39bd26c8b99bae0c0
msgid "Once the object has been saved, you must reload the object in order to access the actual value that was applied to the updated field::"
msgstr ""

#: ../../ref/models/instances.txt:333
# f663ac3d3a914e70bf3506fc613d2c65
msgid "For more details, see the documentation on :ref:`F() expressions <query-expressions>` and their :ref:`use in update queries <topics-db-queries-update>`."
msgstr ""

#: ../../ref/models/instances.txt:338
# e318ad5a73224627a3aa81a0cc52bb99
msgid "Deleting objects"
msgstr ""

#: ../../ref/models/instances.txt:345
# 15d61f23ec3740328c6410bfcce752db
msgid "Issues a SQL ``DELETE`` for the object. This only deletes the object in the database; the Python instance will still exist and will still have data in its fields."
msgstr ""

#: ../../ref/models/instances.txt:349
# 60cd378870d247508299b818ecee25b0
msgid "For more details, including how to delete objects in bulk, see :ref:`topics-db-queries-delete`."
msgstr ""

#: ../../ref/models/instances.txt:352
# e1c7b0e8cdfa444298b79889e2de69f8
msgid "If you want customized deletion behavior, you can override the ``delete()`` method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:358
# 3ff33030d33b4130b341eb441afc80d5
msgid "Other model instance methods"
msgstr ""

#: ../../ref/models/instances.txt:360
# 4fd51ed2ab6d417089a4fa5eb2dace05
msgid "A few object methods have special purposes."
msgstr ""

#: ../../ref/models/instances.txt:363
# cb710986701045afb71154cb5d2cf048
msgid "``__unicode__``"
msgstr ""

#: ../../ref/models/instances.txt:367
# 19ac8f9cb6dd42f9894fa32ad18d5d76
msgid "The ``__unicode__()`` method is called whenever you call ``unicode()`` on an object. Django uses ``unicode(obj)`` (or the related function, :meth:`str(obj) <Model.__str__>`) in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the ``__unicode__()`` method."
msgstr ""

#: ../../ref/models/instances.txt:383
# 70745dfc3b394389be18348dbf642a37
msgid "If you define a ``__unicode__()`` method on your model and not a :meth:`~Model.__str__()` method, Django will automatically provide you with a :meth:`~Model.__str__()` that calls ``__unicode__()`` and then converts the result correctly to a UTF-8 encoded string object. This is recommended development practice: define only ``__unicode__()`` and let Django take care of the conversion to string objects when required."
msgstr ""

#: ../../ref/models/instances.txt:391
# 788d12b04fd04d2d89389a042e7d05ea
msgid "``__str__``"
msgstr ""

#: ../../ref/models/instances.txt:395
# ce60917436d2470fa3c926c1a4530e77
msgid "The ``__str__()`` method is called whenever you call ``str()`` on an object. The main use for this method directly inside Django is when the ``repr()`` output of a model is displayed anywhere (for example, in debugging output). Thus, you should return a nice, human-readable string for the object's ``__str__()``.  It isn't required to put ``__str__()`` methods everywhere if you have sensible :meth:`~Model.__unicode__()` methods."
msgstr ""

#: ../../ref/models/instances.txt:399
# 037ea58e4e014b0c88a7f0b6080d9647
msgid "The previous :meth:`~Model.__unicode__()` example could be similarly written using ``__str__()`` like this::"
msgstr ""

#: ../../ref/models/instances.txt:412
# de2cbf903e8843e8b926eda1dd052721
msgid "``get_absolute_url``"
msgstr ""

#: ../../ref/models/instances.txt:416
# 6695d68e9ad241fe9d2c8fac3f409587
msgid "Define a ``get_absolute_url()`` method to tell Django how to calculate the canonical URL for an object. To callers, this method should appear to return a string that can be used to refer to the object over HTTP."
msgstr ""

#: ../../ref/models/instances.txt:425
# 210b7de1d99a486b9eab82422790f76a
msgid "(Whilst this code is correct and simple, it may not be the most portable way to write this kind of method. The :func:`permalink() decorator <permalink>`, documented below, is usually the best approach and you should read that section before diving into code implementation.)"
msgstr ""

#: ../../ref/models/instances.txt:430
# b99f18e6f2ba473bb966303fdd1c64d9
msgid "One place Django uses ``get_absolute_url()`` is in the admin app. If an object defines this method, the object-editing page will have a \"View on site\" link that will jump you directly to the object's public view, as given by ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:435
# 179b0e693b8d4dceb8effe11bfac0038
msgid "Similarly, a couple of other bits of Django, such as the :doc:`syndication feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when it is defined. If it makes sense for your model's instances to each have a unique URL, you should define ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:440
# 1f4eba7c8e27483b8ff6937033722fa3
msgid "It's good practice to use ``get_absolute_url()`` in templates, instead of hard-coding your objects' URLs. For example, this template code is bad::"
msgstr ""

#: ../../ref/models/instances.txt:446
# 9264b870dc70416e83d22171c802b534
msgid "This template code is much better::"
msgstr ""

#: ../../ref/models/instances.txt:450
# 9cc6da0326fb431f8a313f6465a37348
msgid "The logic here is that if you change the URL structure of your objects, even for something simple such as correcting a spelling error, you don't want to have to track down every place that the URL might be created. Specify it once, in ``get_absolute_url()`` and have all your other code call that one place."
msgstr ""

#: ../../ref/models/instances.txt:456
# 7386a93f27584c618dc3d1b36c7329b9
msgid "The string you return from ``get_absolute_url()`` **must** contain only ASCII characters (required by the URI specfication, :rfc:`2396`) and be URL-encoded, if necessary."
msgstr ""

#: ../../ref/models/instances.txt:460
# c2bdc93444a349b2bf84d94faf7a5e29
msgid "Code and templates calling ``get_absolute_url()`` should be able to use the result directly without any further processing. You may wish to use the ``django.utils.encoding.iri_to_uri()`` function to help with this if you are using unicode strings containing characters outside the ASCII range at all."
msgstr ""

#: ../../ref/models/instances.txt:467
# 252016ba6e584ae4962aec5b7864bbb4
msgid "The ``permalink`` decorator"
msgstr ""

#: ../../ref/models/instances.txt:469
# 68f624922e654c3d8187587e42596dac
msgid "The way we wrote ``get_absolute_url()`` above is a slightly violation of the DRY principle: the URL for this object is defined both in the URLconf file and in the model."
msgstr ""

#: ../../ref/models/instances.txt:473
# fd11b2ad09534c318d2bdad6d29c7261
msgid "You can decouple your models from the URLconf using the ``permalink`` decorator:"
msgstr ""

#: ../../ref/models/instances.txt:477
# eb9208720d5b4ff5958f46468c3124f1
msgid "This decorator takes the name of a URL pattern (either a view name or a URL pattern name) and a list of position or keyword arguments and uses the URLconf patterns to construct the correct, full URL. It returns a string for the correct URL, with all parameters substituted in the correct positions."
msgstr ""

#: ../../ref/models/instances.txt:482
# 03a0da0e29d644ef815852a257684b0e
msgid "The ``permalink`` decorator is a Python-level equivalent to the :ttag:`url` template tag and a high-level wrapper for the :func:`django.core.urlresolvers.reverse()` function."
msgstr ""

#: ../../ref/models/instances.txt:484
# abd404a7e30e42908eecc3f0959b064c
msgid "An example should make it clear how to use ``permalink()``. Suppose your URLconf contains a line such as::"
msgstr ""

#: ../../ref/models/instances.txt:489
# 9b29e6ad63084674af58e5153699f903
msgid "...your model could have a :meth:`~django.db.models.Model.get_absolute_url()` method that looked like this::"
msgstr ""

#: ../../ref/models/instances.txt:498
# bb21265633064194b25d14767adc97de
msgid "Similarly, if you had a URLconf entry that looked like::"
msgstr ""

#: ../../ref/models/instances.txt:502
# 23355bfa37fb403e90b0de8ddb4f3b34
msgid "...you could reference this using ``permalink()`` as follows::"
msgstr ""

#: ../../ref/models/instances.txt:511
# 5168030be9c34bd68baf49b174bab03a
msgid "Notice that we specify an empty sequence for the second parameter in this case, because we only want to pass keyword parameters, not positional ones."
msgstr ""

#: ../../ref/models/instances.txt:514
# 2c779c52fae7451b8a51e9078495e9a5
msgid "In this way, you're associating the model's absolute path with the view that is used to display it, without repeating the view's URL information anywhere. You can still use the :meth:`~django.db.models.Model.get_absolute_url()` method in templates, as before."
msgstr ""

#: ../../ref/models/instances.txt:519
# 987bb9416f3949319f8a381ce3ba11a6
msgid "In some cases, such as the use of generic views or the re-use of custom views for multiple models, specifying the view function may confuse the reverse URL matcher (because multiple patterns point to the same view). For that case, Django has :ref:`named URL patterns <naming-url-patterns>`. Using a named URL pattern, it's possible to give a name to a pattern, and then reference the name rather than the view function. A named URL pattern is defined by replacing the pattern tuple by a call to the ``url`` function)::"
msgstr ""

#: ../../ref/models/instances.txt:531
# 57fd9f3ef5ea44c6a450fed6024ebd1b
msgid "...and then using that name to perform the reverse URL resolution instead of the view name::"
msgstr ""

#: ../../ref/models/instances.txt:540
# 5fddce99460842ddb2114bb1c3c4ac6c
msgid "More details on named URL patterns are in the :doc:`URL dispatch documentation </topics/http/urls>`."
msgstr ""

#: ../../ref/models/instances.txt:544
# 008ab103c93b4fe7a80c78b769db07fc
msgid "Extra instance methods"
msgstr ""

#: ../../ref/models/instances.txt:546
# ed3f44d1c13e468dab4c74245bbbb543
msgid "In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model object might have some of the following methods:"
msgstr ""

#: ../../ref/models/instances.txt:551
# a15e88126b3447eda3f92fa7553c8bcb
msgid "For every field that has :attr:`~django.db.models.Field.choices` set, the object will have a ``get_FOO_display()`` method, where ``FOO`` is the name of the field. This method returns the \"human-readable\" value of the field. For example, in the following model::"
msgstr ""

#: ../../ref/models/instances.txt:564
# 070a8e0d4a4e45539388f61d7ecfcdb2
msgid "...each ``Person`` instance will have a ``get_gender_display()`` method. Example::"
msgstr ""

#: ../../ref/models/instances.txt:576
# b7f2ec0b93cb4b67bc5f1df6a425960f
msgid "For every :class:`~django.db.models.DateField` and :class:`~django.db.models.DateTimeField` that does not have :attr:`null=True <django.db.models.Field.null>`, the object will have ``get_next_by_FOO()`` and ``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. This returns the next and previous object with respect to the date field, raising a :exc:`~django.db.DoesNotExist` exception when appropriate."
msgstr ""

#: ../../ref/models/instances.txt:583
# cc9c0b2d718a437cb34147500111d996
msgid "Both methods accept optional keyword arguments, which should be in the format described in :ref:`Field lookups <field-lookups>`."
msgstr ""

#: ../../ref/models/instances.txt:586
# d9183e03869745338db2154d0fd72ec8
msgid "Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects."
msgstr ""

#: ../../ref/models/options.txt:3
# e623945fd7814661982926d0fcd1c240
msgid "Model ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:5
# 2ed663ad48734d118eb6303defeb0b1c
msgid "This document explains all the possible :ref:`metadata options <meta-options>` that you can give your model in its internal ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:10
# c0a8ef8be8424f278d33a75a427bfdc3
msgid "Available ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:15
# 88254232b4824e5bbe1f1623775e8159
msgid "``abstract``"
msgstr ""

#: ../../ref/models/options.txt:19
# b0d2fd4482374a9d822ae787c24b21c6
msgid "If ``abstract = True``, this model will be an :ref:`abstract base class <abstract-base-classes>`."
msgstr ""

#: ../../ref/models/options.txt:27
# 9881a2d689d14a158a7c343e63985812
msgid "If a model exists outside of the standard :file:`models.py` (for instance, if the app's models are in submodules of ``myapp.models``), the model must define which app it is part of::"
msgstr ""

#: ../../ref/models/options.txt:34
# 4ecaca74165746c581adb07274bd2bf2
msgid "``db_table``"
msgstr ""

#: ../../ref/models/options.txt:38
# d2cdfd5a04e04d0780f26a8151d4fd4a
msgid "The name of the database table to use for the model::"
msgstr ""

#: ../../ref/models/options.txt:47
# df01e3a5d23a43b8aecc982a54d2e4bc
msgid "To save you time, Django automatically derives the name of the database table from the name of your model class and the app that contains it. A model's database table name is constructed by joining the model's \"app label\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- to the model's class name, with an underscore between them."
msgstr ""

#: ../../ref/models/options.txt:53
# 7bd45e0dcec14f6c9a03040dd054afa1
msgid "For example, if you have an app ``bookstore`` (as created by ``manage.py startapp bookstore``), a model defined as ``class Book`` will have a database table named ``bookstore_book``."
msgstr ""

#: ../../ref/models/options.txt:57
# c44f9a5ea2e941358275bba62888b9c3
msgid "To override the database table name, use the ``db_table`` parameter in ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:60
# 641c79d65fcf47e2bd3df2b57b0f5db1
msgid "If your database table name is an SQL reserved word, or contains characters that aren't allowed in Python variable names -- notably, the hyphen -- that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/options.txt:66
# dcac1fca98ed4084a49327104c11b3f5
msgid "It is strongly advised that you use lowercase table names when you override the table name via ``db_table``, particularly if you are using the MySQL backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""

#: ../../ref/models/options.txt:76
# 609fd1784d7d454fa6b6f24b5271671c
msgid "The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` setting, if set. If the backend doesn't support tablespaces, this option is ignored."
msgstr ""

#: ../../ref/models/options.txt:82
# 34389733ab1842aba80a719ae78e7f12
msgid "``get_latest_by``"
msgstr ""

#: ../../ref/models/options.txt:86
# 060333dee29048239b3b4e1e7e517e1e
msgid "The name of a :class:`DateField` or :class:`DateTimeField` in the model. This specifies the default field to use in your model :class:`Manager`'s :class:`~QuerySet.latest` method."
msgstr ""

#: ../../ref/models/options.txt:94
# 24a77aa8e49146d9a3d78a47286ed1db
msgid "See the docs for :meth:`~django.db.models.query.QuerySet.latest` for more."
msgstr ""

#: ../../ref/models/options.txt:97
# a1f54470db604ad28625d74cf6fe163b
msgid "``managed``"
msgstr ""

#: ../../ref/models/options.txt:101
# f4d68761a82f40b88d9c6a1d7b9ce3df
msgid "Defaults to ``True``, meaning Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of a :djadmin:`reset` management command. That is, Django *manages* the database tables' lifecycles."
msgstr ""

#: ../../ref/models/options.txt:106
# e036093c2de043118f8714dcd2f0cd43
msgid "If ``False``, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the *only* difference when ``managed=False``. All other aspects of model handling are exactly the same as normal. This includes"
msgstr ""

#: ../../ref/models/options.txt:112
# 1628dc88550d4ac1940d6eb7ee12123e
msgid "Adding an automatic primary key field to the model if you don't declare it.  To avoid confusion for later code readers, it's recommended to specify all the columns from the database table you are modeling when using unmanaged models."
msgstr ""

#: ../../ref/models/options.txt:117
# 366a6b4bc48b448a91792b2a984fab8f
msgid "If a model with ``managed=False`` contains a :class:`~django.db.models.ManyToManyField` that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model *will* be created."
msgstr ""

#: ../../ref/models/options.txt:123
# 5bd4f5664357434ba335463a8bc54ddb
msgid "If you need to change this default behavior, create the intermediary table as an explicit model (with ``managed`` set as needed) and use the :attr:`ManyToManyField.through` attribute to make the relation use your custom model."
msgstr ""

#: ../../ref/models/options.txt:128
# 164db89224894c99aa3a8f538437748d
msgid "For tests involving models with ``managed=False``, it's up to you to ensure the correct tables are created as part of the test setup."
msgstr ""

#: ../../ref/models/options.txt:131
# b345d4976fa84c87a466bc37264918fe
msgid "If you're interested in changing the Python-level behavior of a model class, you *could* use ``managed=False`` and create a copy of an existing model. However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""

#: ../../ref/models/options.txt:136
# 463a0d2416d94ce0bf840ce0c7361bee
msgid "``order_with_respect_to``"
msgstr ""

#: ../../ref/models/options.txt:140
# 9c424c5f2aa244cf9988cb4020edcbfd
msgid "Marks this object as \"orderable\" with respect to the given field. This is almost always used with related objects to allow them to be ordered with respect to a parent object. For example, if an ``Answer`` relates to a ``Question`` object, and a question has more than one answer, and the order of answers matters, you'd do this::"
msgstr ""

#: ../../ref/models/options.txt:153
# caedb5162b944accaccfc9ca4a63f20b
msgid "When ``order_with_respect_to`` is set, two additional methods are provided to retrieve and to set the order of the related objects: ``get_RELATED_order()`` and ``set_RELATED_order()``, where ``RELATED`` is the lowercased model name. For example, assuming that a ``Question`` object has multiple related ``Answer`` objects, the list returned contains the primary keys of the related ``Answer`` objects::"
msgstr ""

#: ../../ref/models/options.txt:164
# 12a844b74a3b4a81bd5723889deab0d3
msgid "The order of a ``Question`` object's related ``Answer`` objects can be set by passing in a list of ``Answer`` primary keys::"
msgstr ""

#: ../../ref/models/options.txt:169
# 5ceda4ef3d7444729e5a4a2fcca59c2c
msgid "The related objects also get two methods, ``get_next_in_order()`` and ``get_previous_in_order()``, which can be used to access those objects in their proper order. Assuming the ``Answer`` objects are ordered by ``id``::"
msgstr ""

#: ../../ref/models/options.txt:181
# c98a74fdf30d412aa62ee6c944619830
msgid "``order_with_respect_to`` adds an additional field/database column named ``_order``, so be sure to handle that as you would any other change to your models if you add or change ``order_with_respect_to`` after your initial :djadmin:`syncdb`."
msgstr ""

#: ../../ref/models/options.txt:187
# fd9a2e83f1254fbe9f4405173928436c
msgid "``ordering``"
msgstr ""

#: ../../ref/models/options.txt:191
# 9f6770a6086f4936ac951a5c82aac8a7
msgid "The default ordering for the object, for use when obtaining lists of objects::"
msgstr ""

#: ../../ref/models/options.txt:195
# 773b38e9b5344ac58ee29b244c55a726
msgid "This is a tuple or list of strings. Each string is a field name with an optional \"-\" prefix, which indicates descending order. Fields without a leading \"-\" will be ordered ascending. Use the string \"?\" to order randomly."
msgstr ""

#: ../../ref/models/options.txt:199
# 42b56544581e45728d45e6126a87a2b6
msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:203
# f59c32fe5cdc4e61929f3bc6f5195c2d
msgid "To order by ``pub_date`` descending, use this::"
msgstr ""

#: ../../ref/models/options.txt:207
# 7dbf7a4221c342ca9045582b45ca6133
msgid "To order by ``pub_date`` descending, then by ``author`` ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:216
# 2d0b8b069d4d46db9d7e0c050ccecefd
msgid "``permissions``"
msgstr ""

#: ../../ref/models/options.txt:220
# bb278b5ce1134e1fa67598e32600f596
msgid "Extra permissions to enter into the permissions table when creating this object. Add, delete and change permissions are automatically created for each object that has ``admin`` set. This example specifies an extra permission, ``can_deliver_pizzas``::"
msgstr ""

#: ../../ref/models/options.txt:227
# f51b57cf6da64daea948cdeb3ba97ae0
msgid "This is a list or tuple of 2-tuples in the format ``(permission_code, human_readable_permission_name)``."
msgstr ""

#: ../../ref/models/options.txt:231
# 8f69a79de3124ee29c1257d3eebadf86
msgid "``proxy``"
msgstr ""

#: ../../ref/models/options.txt:235
# 83b782d272d74483b4c679f1481d5562
msgid "If ``proxy = True``, a model which subclasses another model will be treated as a :ref:`proxy model <proxy-models>`."
msgstr ""

#: ../../ref/models/options.txt:239
# c36fd94f968d4adc844d57411dbad64f
msgid "``unique_together``"
msgstr ""

#: ../../ref/models/options.txt:243
# feaff01bfe8f40fea5896ad359edb1bb
msgid "Sets of field names that, taken together, must be unique::"
msgstr ""

#: ../../ref/models/options.txt:247
# 7a4e13947b154b9dba0d6cf2e5b27942
msgid "This is a list of lists of fields that must be unique when considered together. It's used in the Django admin and is enforced at the database level (i.e., the appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE`` statement)."
msgstr ""

#: ../../ref/models/options.txt:252
# 7e5650f3d2024ca78cba4b31a8d42eed
msgid "For convenience, unique_together can be a single list when dealing with a single set of fields::"
msgstr ""

#: ../../ref/models/options.txt:257
# eb25eab680734c1783516dc976d4f2f2
msgid "A :class:`~django.db.models.ManyToManyField` cannot be included in unique_together. (It's not clear what that would even mean!) If you need to validate uniqueness related to a :class:`~django.db.models.ManyToManyField`, try using a signal or an explicit :attr:`through <ManyToManyField.through>` model."
msgstr ""

#: ../../ref/models/options.txt:268
# c7571d66501b4021813f90ec22db4a58
msgid "A human-readable name for the object, singular::"
msgstr ""

#: ../../ref/models/options.txt:272
# bd0c34b62fb440128fa584ad7d318f5d
msgid "If this isn't given, Django will use a munged version of the class name: ``CamelCase`` becomes ``camel case``."
msgstr ""

#: ../../ref/models/options.txt:276
# e589fa4a7942470abd72dd53092bcf60
msgid "``verbose_name_plural``"
msgstr ""

#: ../../ref/models/options.txt:280
# 75e46763981d47d6b0b8e1258c936cde
msgid "The plural name for the object::"
msgstr ""

#: ../../ref/models/options.txt:284
# 2c88fa23a654488eb4c2f006b69ed25a
msgid "If this isn't given, Django will use :attr:`~Options.verbose_name` + ``\"s\"``."
msgstr ""

#: ../../ref/models/querysets.txt:3
# da047f43390342a5af2fc454cabd8132
msgid "QuerySet API reference"
msgstr ""

#: ../../ref/models/querysets.txt:7
# ee0abbda253647a0ad287c3857e4f300
msgid "This document describes the details of the ``QuerySet`` API. It builds on the material presented in the :doc:`model </topics/db/models>` and :doc:`database query </topics/db/queries>` guides, so you'll probably want to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/querysets.txt:19
# e033afd12f9148fbb5efbfbc77a9e00e
msgid "When QuerySets are evaluated"
msgstr ""

#: ../../ref/models/querysets.txt:21
# f4e50f3cedbf4f2299b85f42d1fe143f
msgid "Internally, a ``QuerySet`` can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset."
msgstr ""

#: ../../ref/models/querysets.txt:25
# c0b8d958f8ae4e2385a70341500f32a9
msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr ""

#: ../../ref/models/querysets.txt:27
# 54db793a32d14d45b7c5018dc531574a
msgid "**Iteration.** A ``QuerySet`` is iterable, and it executes its database query the first time you iterate over it. For example, this will print the headline of all entries in the database::"
msgstr ""

#: ../../ref/models/querysets.txt:34
# f8ea8998e430463a9c936d3a6560532c
msgid "**Slicing.** As explained in :ref:`limiting-querysets`, a ``QuerySet`` can be sliced, using Python's array-slicing syntax. Slicing an unevaluated ``QuerySet`` usually returns another unevaluated ``QuerySet``, but Django will execute the database query if you use the \"step\" parameter of slice syntax, and will return a list. Slicing a ``QuerySet`` that has been evaluated (partially or fully) also returns a list."
msgstr ""

#: ../../ref/models/querysets.txt:41
# 42b678e5a97e4a7e8a185dd1ee09aa60
msgid "**Pickling/Caching.** See the following section for details of what is involved when `pickling QuerySets`_. The important thing for the purposes of this section is that the results are read from the database."
msgstr ""

#: ../../ref/models/querysets.txt:45
# f626ee8dfe06436482355335d4bc696b
msgid "**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This is for convenience in the Python interactive interpreter, so you can immediately see your results when using the API interactively."
msgstr ""

#: ../../ref/models/querysets.txt:49
# fa649ad88d8743a38e15aad58428e1bb
msgid "**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, as you might expect, returns the length of the result list."
msgstr ""

#: ../../ref/models/querysets.txt:52
# b12166dec19546e1815e2120cfd597f3
msgid "Note: *Don't* use ``len()`` on ``QuerySet``\\s if all you want to do is determine the number of records in the set. It's much more efficient to handle a count at the database level, using SQL's ``SELECT COUNT(*)``, and Django provides a ``count()`` method for precisely this reason. See ``count()`` below."
msgstr ""

#: ../../ref/models/querysets.txt:58
# 1e119af7df754796a77e389c4a9b9b08
msgid "**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:63
# 8c70ce25df404fe383cf392e38251009
msgid "Be warned, though, that this could have a large memory overhead, because Django will load each element of the list into memory. In contrast, iterating over a ``QuerySet`` will take advantage of your database to load data and instantiate objects only as you need them."
msgstr ""

#: ../../ref/models/querysets.txt:68
# 294af0d8c6eb4e6c9e265f416af19834
msgid "**bool().** Testing a ``QuerySet`` in a boolean context, such as using ``bool()``, ``or``, ``and`` or an ``if`` statement, will cause the query to be executed. If there is at least one result, the ``QuerySet`` is ``True``, otherwise ``False``. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:76
# b480c62e12a7404dbb2291d7092b1e07
msgid "Note: *Don't* use this if all you want to do is determine if at least one result exists, and don't need the actual objects. It's more efficient to use :meth:`exists() <QuerySet.exists>` (see below)."
msgstr ""

#: ../../ref/models/querysets.txt:83
# c4349eb354b945319b071bc46ab7fb8b
msgid "Pickling QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:85
# 514653fd1aeb4467a423ff7dd7e558ea
msgid "If you :mod:`pickle` a ``QuerySet``, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a ``QuerySet``, it contains the results at the moment it was pickled, rather than the results that are currently in the database."
msgstr ""

#: ../../ref/models/querysets.txt:93
# 5e9d291905624acc90e6a228553fd6a4
msgid "If you only want to pickle the necessary information to recreate the ``QuerySet`` from the database at a later time, pickle the ``query`` attribute of the ``QuerySet``. You can then recreate the original ``QuerySet`` (without any results loaded) using some code like this::"
msgstr ""

#: ../../ref/models/querysets.txt:103
# 4afe0e5bfb2a49e09aa227add161386c
msgid "The ``query`` attribute is an opaque object. It represents the internals of the query construction and is not part of the public API. However, it is safe (and fully supported) to pickle and unpickle the attribute's contents as described here."
msgstr ""

#: ../../ref/models/querysets.txt:110
# 5ccb9ae96bce46c394090c2b98c61652
msgid "Pickles of QuerySets are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy."
msgstr ""

#: ../../ref/models/querysets.txt:119
# c39439a8455b4939ba2ffa025172e481
msgid "QuerySet API"
msgstr ""

#: ../../ref/models/querysets.txt:121
# b38e2ba362a24c7c8b16beb6b65438dd
msgid "Though you usually won't create one manually — you'll go through a :class:`~django.db.models.Manager` — here's the formal declaration of a ``QuerySet``:"
msgstr ""

#: ../../ref/models/querysets.txt:127
# ec6fcf575812446280107270c363fc5e
msgid "Usually when you'll interact with a ``QuerySet`` you'll use it by :ref:`chaining filters <chaining-filters>`. To make this work, most ``QuerySet`` methods return new querysets. These methods are covered in detail later in this section."
msgstr ""

#: ../../ref/models/querysets.txt:132
# ffed4cfaf28f46e38b3feae20616a56d
msgid "The ``QuerySet`` class has two public attributes you can use for introspection:"
msgstr ""

#: ../../ref/models/querysets.txt:137
# b3d35dc99d3b41f0ab386f7e4309881e
msgid "``True`` if the ``QuerySet`` is ordered — i.e. has an :meth:`order_by()` clause or a default ordering on the model. ``False`` otherwise."
msgstr ""

#: ../../ref/models/querysets.txt:143
# 3401be8231e845d083b9d7790fb70fc6
msgid "The database that will be used if this query is executed now."
msgstr ""

#: ../../ref/models/querysets.txt:147
# 73c602e995a745da9596651a75cea89a
msgid "The ``query`` parameter to :class:`QuerySet` exists so that specialized query subclasses such as :class:`~django.contrib.gis.db.models.GeoQuerySet` can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API. To put it simply: if you need to ask, you don't need to use it."
msgstr ""

#: ../../ref/models/querysets.txt:157
# 04d74f20001e4a2599db55e00b7c7246
msgid "Methods that return new QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:159
# de929814fe4f474f946b93fc98df1ec1
msgid "Django provides a range of ``QuerySet`` refinement methods that modify either the types of results returned by the ``QuerySet`` or the way its SQL query is executed."
msgstr ""

#: ../../ref/models/querysets.txt:164
#: ../../ref/templates/builtins.txt:220
# 48c01278871c4ad9af2d3b4de1c75c74
# 2ae8da76d2a84fce87ce3dfab2e784e1
msgid "filter"
msgstr ""

#: ../../ref/models/querysets.txt:168
# b9e5287697be4ea6bec7065bbf803ead
msgid "Returns a new ``QuerySet`` containing objects that match the given lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:171
# e8c5fef869b84e2bbe230b5b62d9f423
msgid "The lookup parameters (``**kwargs``) should be in the format described in `Field lookups`_ below. Multiple parameters are joined via ``AND`` in the underlying SQL statement."
msgstr ""

#: ../../ref/models/querysets.txt:176
# 883e6f1276b84479869678fcf18b5f20
msgid "exclude"
msgstr ""

#: ../../ref/models/querysets.txt:180
# 1b3acd5fdaa44bf3bc8302629c3ddd7f
msgid "Returns a new ``QuerySet`` containing objects that do *not* match the given lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:183
# 1c8c66d5c8bc42cf8541099cc4586c71
msgid "The lookup parameters (``**kwargs``) should be in the format described in `Field lookups`_ below. Multiple parameters are joined via ``AND`` in the underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""

#: ../../ref/models/querysets.txt:187
# 237af1408bad46bca3a63a56479bcc16
msgid "This example excludes all entries whose ``pub_date`` is later than 2005-1-3 AND whose ``headline`` is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:192
#: ../../ref/models/querysets.txt:202
# c77b5db711744286aec9656668a6f4a0
# 50eca7ac13a442699ae92769afce316c
msgid "In SQL terms, that evaluates to::"
msgstr ""

#: ../../ref/models/querysets.txt:197
# fa935eb041a942409b08a058e26e75a0
msgid "This example excludes all entries whose ``pub_date`` is later than 2005-1-3 OR whose headline is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:208
# 48f4e21cb1be4c10a9ea736da6cb2c07
msgid "Note the second example is more restrictive."
msgstr ""

#: ../../ref/models/querysets.txt:211
# b0b52042032944a7863d9c57db0cd2d6
msgid "annotate"
msgstr ""

#: ../../ref/models/querysets.txt:215
# 612079d2f08b499eb365be0acd8488ef
msgid "Annotates each object in the ``QuerySet`` with the provided list of aggregate values (averages, sums, etc) that have been computed over the objects that are related to the objects in the ``QuerySet``. Each argument to ``annotate()`` is an annotation that will be added to each object in the ``QuerySet`` that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:221
#: ../../ref/models/querysets.txt:1487
# c3fe4864637447b8b000d6f29de35c75
# e574069c031e4cc29c97c3babbc6da04
msgid "The aggregation functions that are provided by Django are described in `Aggregation Functions`_ below."
msgstr ""

#: ../../ref/models/querysets.txt:224
# 7f2845ebca8e46e6b87c8c5f13bf00f0
msgid "Annotations specified using keyword arguments will use the keyword as the alias for the annotation. Anonymous arguments will have an alias generated for them based upon the name of the aggregate function and the model field that is being aggregated."
msgstr ""

#: ../../ref/models/querysets.txt:229
# b140d1d8e1f448bda5352733a1d0c15f
msgid "For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog::"
msgstr ""

#: ../../ref/models/querysets.txt:240
# 251776d017e54bcfb96869a22a13df25
msgid "The ``Blog`` model doesn't define an ``entry__count`` attribute by itself, but by using a keyword argument to specify the aggregate function, you can control the name of the annotation::"
msgstr ""

#: ../../ref/models/querysets.txt:249
#: ../../ref/models/querysets.txt:1507
# e7e11cec3708403599dabc04fca61ded
# 0ca27b42194d4723af7477a321a61fe8
msgid "For an in-depth discussion of aggregation, see :doc:`the topic guide on Aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:253
# b855b3886a564f459b67c9de5b07edc9
msgid "order_by"
msgstr ""

#: ../../ref/models/querysets.txt:257
# c2a136f2b4c1478585fa0175fc065619
msgid "By default, results returned by a ``QuerySet`` are ordered by the ordering tuple given by the ``ordering`` option in the model's ``Meta``. You can override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""

#: ../../ref/models/querysets.txt:265
# ed3de504259f4b4d87ac69ed328dec94
msgid "The result above will be ordered by ``pub_date`` descending, then by ``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` indicates *descending* order. Ascending order is implied. To order randomly, use ``\"?\"``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:272
# deaf9073dda7458e984c140ebf0b5b40
msgid "Note: ``order_by('?')`` queries may be expensive and slow, depending on the database backend you're using."
msgstr ""

#: ../../ref/models/querysets.txt:275
# a4f15b49cc1d402b908cd416f05a66e9
msgid "To order by a field in a different model, use the same syntax as when you are querying across model relations. That is, the name of the field, followed by a double underscore (``__``), followed by the name of the field in the new model, and so on for as many models as you want to join. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:282
# 66fb6e8ae028439b864cc02cfc4a4342
msgid "If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model (or order by the related model's primary key if there is no :attr:`Meta.ordering <django.db.models.Options.ordering>` specified. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:289
# 086bdee4d9654997bd35dea4603aa3da
msgid "...is identical to::"
msgstr ""

#: ../../ref/models/querysets.txt:293
# ee375da26cee4446a5e8bcf2eb2db4f8
msgid "...since the ``Blog`` model has no default ordering specified."
msgstr ""

#: ../../ref/models/querysets.txt:295
# 5691143075234015bf3c4c293cfca83e
msgid "Be cautious when ordering by fields in related models if you are also using :meth:`distinct()`. See the note in :meth:`distinct` for an explanation of how related model ordering can change the expected results."
msgstr ""

#: ../../ref/models/querysets.txt:299
# ccda76e76abf4a2a87c4602aeaeb99bd
msgid "It is permissible to specify a multi-valued field to order the results by (for example, a :class:`~django.db.models.ManyToManyField` field). Normally this won't be a sensible thing to do and it's really an advanced usage feature. However, if you know that your queryset's filtering or available data implies that there will only be one ordering piece of data for each of the main items you are selecting, the ordering may well be exactly what you want to do. Use ordering on multi-valued fields with care and make sure the results are what you expect."
msgstr ""

#: ../../ref/models/querysets.txt:308
# fe66eea165294aaca7703029bde72c1f
msgid "There's no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them."
msgstr ""

#: ../../ref/models/querysets.txt:312
# 9f979f6f84fa4da9b8d7fd6f2608098a
msgid "If you don't want any ordering to be applied to a query, not even the default ordering, call :meth:`order_by()` with no parameters."
msgstr ""

#: ../../ref/models/querysets.txt:315
# c494d8db93a2422eb0e75d83003d428e
msgid "You can tell if a query is ordered or not by checking the :attr:`.QuerySet.ordered` attribute, which will be ``True`` if the ``QuerySet`` has been ordered in any way."
msgstr ""

#: ../../ref/models/querysets.txt:320
# b3fd49d3a35d474299e60f07799c2d69
msgid "reverse"
msgstr ""

#: ../../ref/models/querysets.txt:324
# 8261a17d18ce4382a8cb3ea53b8b20c6
msgid "Use the ``reverse()`` method to reverse the order in which a queryset's elements are returned. Calling ``reverse()`` a second time restores the ordering back to the normal direction."
msgstr ""

#: ../../ref/models/querysets.txt:328
# 51828b71e1dc4d65afdcd119174ccdb4
msgid "To retrieve the ''last'' five items in a queryset, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:332
# 5b4b284ca1d8406cbd623ead34dac0a8
msgid "Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at ``seq[-5:]``, we would see the fifth-last item first. Django doesn't support that mode of access (slicing from the end), because it's not possible to do it efficiently in SQL."
msgstr ""

#: ../../ref/models/querysets.txt:339
# 0ecea102b7c846058d05b0fa9e331a96
msgid "Also, note that ``reverse()`` should generally only be called on a ``QuerySet`` which has a defined ordering (e.g., when querying against a model which defines a default ordering, or when using :meth:`order_by()`). If no such ordering is defined for a given ``QuerySet``, calling ``reverse()`` on it has no real effect (the ordering was undefined prior to calling ``reverse()``, and will remain undefined afterward)."
msgstr ""

#: ../../ref/models/querysets.txt:347
# 2a7bb9573295411a9039c29bcb0dcbbc
msgid "distinct"
msgstr ""

#: ../../ref/models/querysets.txt:351
# 40dd762409a04b8c8cb1aefb81291dce
msgid "Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. This eliminates duplicate rows from the query results."
msgstr ""

#: ../../ref/models/querysets.txt:354
# 705cec391e194ecb96df6137587f72e5
msgid "By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, this is rarely a problem, because simple queries such as ``Blog.objects.all()`` don't introduce the possibility of duplicate result rows. However, if your query spans multiple tables, it's possible to get duplicate results when a ``QuerySet`` is evaluated. That's when you'd use ``distinct()``."
msgstr ""

#: ../../ref/models/querysets.txt:361
# 6b0aecaca5a346f2946e13f7ffb54e3f
msgid "Any fields used in an :meth:`order_by` call are included in the SQL ``SELECT`` columns. This can sometimes lead to unexpected results when used in conjunction with ``distinct()``. If you order by fields from a related model, those fields will be added to the selected columns and they may make otherwise duplicate rows appear to be distinct. Since the extra columns don't appear in the returned results (they are only there to support ordering), it sometimes looks like non-distinct results are being returned."
msgstr ""

#: ../../ref/models/querysets.txt:369
# f2ce00fee5a34a96a29992a8000cea18
msgid "Similarly, if you use a :meth:`values()` query to restrict the columns selected, the columns used in any :meth:`order_by()` (or default model ordering) will still be involved and may affect uniqueness of the results."
msgstr ""

#: ../../ref/models/querysets.txt:373
# 71e2ca54e7cc43a7b5d366d397be9e12
msgid "The moral here is that if you are using ``distinct()`` be careful about ordering by related models. Similarly, when using ``distinct()`` and :meth:`values()` together, be careful when ordering by fields not in the :meth:`values()` call."
msgstr ""

#: ../../ref/models/querysets.txt:380
# 096b135e044b4f8cba1fd35c4846e528
msgid "As of Django 1.4, you can pass positional arguments (``*fields``) in order to specify the names of fields to which the ``DISTINCT`` should apply. This translates to a ``SELECT DISTINCT ON`` SQL query."
msgstr ""

#: ../../ref/models/querysets.txt:384
# a45a629de28b4f839dfd618c43cb280e
msgid "Here's the difference. For a normal ``distinct()`` call, the database compares *each* field in each row when determining which rows are distinct. For a ``distinct()`` call with specified field names, the database will only compare the specified field names."
msgstr ""

#: ../../ref/models/querysets.txt:390
# ac5c08a52f9d4b90a2b6c4f1bab76c87
msgid "This ability to specify field names is only available in PostgreSQL."
msgstr ""

#: ../../ref/models/querysets.txt:393
# 264f339a9d46488ea8de612c8c2b2f17
msgid "When you specify field names, you *must* provide an ``order_by()`` in the QuerySet, and the fields in ``order_by()`` must start with the fields in ``distinct()``, in the same order."
msgstr ""

#: ../../ref/models/querysets.txt:397
# d353109c9aa044e1b949cd635daf6c3f
msgid "For example, ``SELECT DISTINCT ON (a)`` gives you the first row for each value in column ``a``. If you don't specify an order, you'll get some arbitrary row."
msgstr ""

#: ../../ref/models/querysets.txt:422
# 76488e26a0f44e5fbf541a0f487fd46b
msgid "values"
msgstr ""

#: ../../ref/models/querysets.txt:426
# 0d7c423892df4d2b84ec2a5273f78373
msgid "Returns a ``ValuesQuerySet`` — a ``QuerySet`` subclass that returns dictionaries when used as an iterable, rather than model-instance objects."
msgstr ""

#: ../../ref/models/querysets.txt:429
# 98cd1b0b58f14b539b43b042b96695c1
msgid "Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects."
msgstr ""

#: ../../ref/models/querysets.txt:432
# 62a5b9a6887c458b824c723055dff0e2
msgid "This example compares the dictionaries of ``values()`` with the normal model objects::"
msgstr ""

#: ../../ref/models/querysets.txt:443
# 2eb8272772654a219868605942ac6213
msgid "The ``values()`` method takes optional positional arguments, ``*fields``, which specify field names to which the ``SELECT`` should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don't specify the fields, each dictionary will contain a key and value for every field in the database table."
msgstr ""

#: ../../ref/models/querysets.txt:456
# d1a34d2691574c38b70ff8cb654088f0
msgid "A few subtleties that are worth mentioning:"
msgstr ""

#: ../../ref/models/querysets.txt:458
# 1d5b760ba47d46f79cc04bf586345061
msgid "If you have a field called ``foo`` that is a :class:`~django.db.models.ForeignKey`, the default ``values()`` call will return a dictionary key called ``foo_id``, since this is the name of the hidden model attribute that stores the actual value (the ``foo`` attribute refers to the related model). When you are calling ``values()`` and passing in field names, you can pass in either ``foo`` or ``foo_id`` and you will get back the same thing (the dictionary key will match the field name you passed in)."
msgstr ""

#: ../../ref/models/querysets.txt:478
# af8848436e944cffb3711a4aa7e8f12d
msgid "When using ``values()`` together with :meth:`distinct()`, be aware that ordering can affect the results. See the note in :meth:`distinct` for details."
msgstr ""

#: ../../ref/models/querysets.txt:482
# b57de65cdf334fae9a88c5b324bd49bb
msgid "If you use a ``values()`` clause after an :meth:`extra()` call, any fields defined by a ``select`` argument in the :meth:`extra()` must be explicitly included in the ``values()`` call. Any :meth:`extra()` call made after a ``values()`` call will have its extra selected fields ignored."
msgstr ""

#: ../../ref/models/querysets.txt:488
# b190037aa6ce4d3898c589cd9dc7b0f6
msgid "A ``ValuesQuerySet`` is useful when you know you're only going to need values from a small number of the available fields and you won't need the functionality of a model instance object. It's more efficient to select only the fields you need to use."
msgstr ""

#: ../../ref/models/querysets.txt:493
# b75ec5a0d6aa4ea8a2666b2a1b674044
msgid "Finally, note a ``ValuesQuerySet`` is a subclass of ``QuerySet``, so it has all methods of ``QuerySet``. You can call ``filter()`` on it, or ``order_by()``, or whatever. Yes, that means these two calls are identical::"
msgstr ""

#: ../../ref/models/querysets.txt:500
# 47c7c6e05ca54633b6a21e601fa26cd1
msgid "The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as ``values()``), but it doesn't really matter. This is your chance to really flaunt your individualism."
msgstr ""

#: ../../ref/models/querysets.txt:507
# febc516032b94a9b837f412a1059310b
msgid "The ``values()`` method previously did not return anything for :class:`~django.db.models.ManyToManyField` attributes and would raise an error if you tried to pass this type of field to it."
msgstr ""

#: ../../ref/models/querysets.txt:511
# 7c362e92c322459889d5b0a2f9559604
msgid "This restriction has been lifted, and you can now also refer to fields on related models with reverse relations through ``OneToOneField``, ``ForeignKey`` and ``ManyToManyField`` attributes::"
msgstr ""

#: ../../ref/models/querysets.txt:521
# 150c68251c9648af8747f234ede402cb
msgid "Because :class:`~django.db.models.ManyToManyField` attributes and reverse relations can have multiple related rows, including these can have a multiplier effect on the size of your result set. This will be especially pronounced if you include multiple such fields in your ``values()`` query, in which case all possible combinations will be returned."
msgstr ""

#: ../../ref/models/querysets.txt:528
# 5347fbecfdb941a98c694f2b2cae88a0
msgid "values_list"
msgstr ""

#: ../../ref/models/querysets.txt:532
# b11e683374654ca89ad526d114b5e17c
msgid "This is similar to ``values()`` except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field passed into the ``values_list()`` call — so the first item is the first field, etc. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:540
# a979b043693b491a99c784967b8cddff
msgid "If you only pass in a single field, you can also pass in the ``flat`` parameter. If ``True``, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer::"
msgstr ""

#: ../../ref/models/querysets.txt:550
# 4434bd196cdc4fb5a87bfc033d00c5d8
msgid "It is an error to pass in ``flat`` when there is more than one field."
msgstr ""

#: ../../ref/models/querysets.txt:552
# 4688ac38b58947dc9382c351676b5768
msgid "If you don't pass any values to ``values_list()``, it will return all the fields in the model, in the order they were declared."
msgstr ""

#: ../../ref/models/querysets.txt:556
# d40c1c234b1948ceb91dd99d3368ac7f
msgid "dates"
msgstr ""

#: ../../ref/models/querysets.txt:560
# 72e6f8d8a41a45b489dae24ddb296a03
msgid "Returns a ``DateQuerySet`` — a ``QuerySet`` that evaluates to a list of ``datetime.datetime`` objects representing all available dates of a particular kind within the contents of the ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:564
# f382289ec0144d1c90e39f2a1f4fc751
msgid "``field`` should be the name of a ``DateField`` or ``DateTimeField`` of your model."
msgstr ""

#: ../../ref/models/querysets.txt:567
# f40c61b7f8ee449da50af6b79c2abc22
msgid "``kind`` should be either ``\"year\"``, ``\"month\"`` or ``\"day\"``. Each ``datetime.datetime`` object in the result list is \"truncated\" to the given ``type``."
msgstr ""

#: ../../ref/models/querysets.txt:571
# 1e56c870a6d84cacacdc76db25a6cc76
msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:572
# 1cede4a8d75b43489a31a5ce69d55d66
msgid "``\"month\"`` returns a list of all distinct year/month values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:574
# 231334aa11a8430b8be5bfdb4ac76d73
msgid "``\"day\"`` returns a list of all distinct year/month/day values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:577
# 828345df0a7b46949a5d6f757a51caf6
msgid "``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or ``'DESC'``. This specifies how to order the results."
msgstr ""

#: ../../ref/models/querysets.txt:595
# 451f35a7b35e4403897366ba29494155
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled, Django uses UTC in the database connection, which means the aggregation is performed in UTC. This is a known limitation of the current implementation."
msgstr ""

#: ../../ref/models/querysets.txt:600
# dd1f2ec78935499ca8c20eff1c9033fc
msgid "none"
msgstr ""

#: ../../ref/models/querysets.txt:604
# 36943e348e8448028ba3327434e1e863
msgid "Returns an ``EmptyQuerySet`` — a ``QuerySet`` subclass that always evaluates to an empty list. This can be used in cases where you know that you should return an empty result set and your caller is expecting a ``QuerySet`` object (instead of returning an empty list, for example.)"
msgstr ""

#: ../../ref/models/querysets.txt:615
# c7158bd042bb4063935d91da32a6a2c7
msgid "all"
msgstr ""

#: ../../ref/models/querysets.txt:619
# c82ae2468c194576bfe16efca2aab2b9
msgid "Returns a *copy* of the current ``QuerySet`` (or ``QuerySet`` subclass).  This can be useful in situations where you might want to pass in either a model manager or a ``QuerySet`` and do further filtering on the result. After calling ``all()`` on either object, you'll definitely have a ``QuerySet`` to work with."
msgstr ""

#: ../../ref/models/querysets.txt:625
# bcef4e213e684733948cba63adb6594c
msgid "select_related"
msgstr ""

#: ../../ref/models/querysets.txt:629
# a4855f5db3fe4c2e807bbff1b911103b
msgid "Returns a ``QuerySet`` that will automatically \"follow\" foreign-key relationships, selecting that additional related-object data when it executes its query. This is a performance booster which results in (sometimes much) larger queries but means later use of foreign-key relationships won't require database queries."
msgstr ""

#: ../../ref/models/querysets.txt:635
# e82c6d2d08ee46f1a93b7ae396cb2b3f
msgid "The following examples illustrate the difference between plain lookups and ``select_related()`` lookups. Here's standard lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:644
# e7f039b5b5464c0da9967c94f64495db
msgid "And here's ``select_related`` lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:653
# 19b2f425a7104d58aceaa61b4b41e536
msgid "``select_related()`` follows foreign keys as far as possible. If you have the following models::"
msgstr ""

#: ../../ref/models/querysets.txt:668
# 73c9056be7e840c2a3fda996ca4f8146
msgid "...then a call to ``Book.objects.select_related().get(id=4)`` will cache the related ``Person`` *and* the related ``City``::"
msgstr ""

#: ../../ref/models/querysets.txt:679
# 271177bd458647ffad909c9553b14b65
msgid "Note that, by default, ``select_related()`` does not follow foreign keys that have ``null=True``."
msgstr ""

#: ../../ref/models/querysets.txt:682
# 218ad1fa3eb340048e2edb1b7d37f77b
msgid "Usually, using ``select_related()`` can vastly improve performance because your app can avoid many database calls. However, in situations with deeply nested sets of relationships ``select_related()`` can sometimes end up following \"too many\" relations, and can generate queries so large that they end up being slow."
msgstr ""

#: ../../ref/models/querysets.txt:687
# 4324fe6407d44a5191c31f04b0ece706
msgid "In these situations, you can use the ``depth`` argument to ``select_related()`` to control how many \"levels\" of relations ``select_related()`` will actually follow::"
msgstr ""

#: ../../ref/models/querysets.txt:695
# 514bc18c9b7b4a64b43910644b25899a
msgid "Sometimes you only want to access specific models that are related to your root model, not all of the related models. In these cases, you can pass the related field names to ``select_related()`` and it will only follow those relations. You can even do this for models that are more than one relation away by separating the field names with double underscores, just as for filters. For example, if you have this model::"
msgstr ""

#: ../../ref/models/querysets.txt:712
# 561120fe85f34d7794356d99be538eaf
msgid "...and you only needed to work with the ``room`` and ``subject`` attributes, you could write this::"
msgstr ""

#: ../../ref/models/querysets.txt:717
# 8957fb8bee4c44d38cf53162bc1de758
msgid "This is also valid::"
msgstr ""

#: ../../ref/models/querysets.txt:721
# ba2e7c0786c9406ca918364df9466cf9
msgid "...and would also pull in the ``building`` relation."
msgstr ""

#: ../../ref/models/querysets.txt:723
# 651882ce514f4db69ef399cec6a76b77
msgid "You can refer to any :class:`~django.db.models.ForeignKey` or :class:`~django.db.models.OneToOneField` relation in the list of fields passed to ``select_related()``. This includes foreign keys that have ``null=True`` (which are omitted in a no-parameter ``select_related()`` call). It's an error to use both a list of fields and the ``depth`` parameter in the same ``select_related()`` call; they are conflicting options."
msgstr ""

#: ../../ref/models/querysets.txt:732
# 0010c1d4552e4c1a827780cdb4057ff7
msgid "You can also refer to the reverse direction of a :class:`~django.db.models.OneToOneField` in the list of fields passed to ``select_related`` — that is, you can traverse a :class:`~django.db.models.OneToOneField` back to the object on which the field is defined. Instead of specifying the field name, use the :attr:`related_name <django.db.models.ForeignKey.related_name>` for the field on the related object."
msgstr ""

#: ../../ref/models/querysets.txt:739
# f6b31672811044c9ad7ad6641dc2e73f
msgid "A :class:`~django.db.models.OneToOneField` is not traversed in the reverse direction if you are performing a depth-based ``select_related()`` call."
msgstr ""

#: ../../ref/models/querysets.txt:743
# 5ca3971847ce44d89ac2a66394a5f0c4
msgid "prefetch_related"
msgstr ""

#: ../../ref/models/querysets.txt:749
# f3e0b9437cd0491da67a000215766628
msgid "Returns a ``QuerySet`` that will automatically retrieve, in a single batch, related objects for each of the specified lookups."
msgstr ""

#: ../../ref/models/querysets.txt:752
# 5d0aab6b6dfb4c599df6b9393746c916
msgid "This has a similar purpose to ``select_related``, in that both are designed to stop the deluge of database queries that is caused by accessing related objects, but the strategy is quite different."
msgstr ""

#: ../../ref/models/querysets.txt:756
# bd04a130e7ac44ca803cd2304b83122f
msgid "``select_related`` works by creating a SQL join and including the fields of the related object in the SELECT statement. For this reason, ``select_related`` gets the related objects in the same database query. However, to avoid the much larger result set that would result from joining across a 'many' relationship, ``select_related`` is limited to single-valued relationships - foreign key and one-to-one."
msgstr ""

#: ../../ref/models/querysets.txt:763
# 4d43f567ab9341b48d32bee048d7d4af
msgid "``prefetch_related``, on the other hand, does a separate lookup for each relationship, and does the 'joining' in Python. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using ``select_related``, in addition to the foreign key and one-to-one relationships that are supported by ``select_related``. It also supports prefetching of :class:`~django.contrib.contenttypes.generic.GenericRelation` and :class:`~django.contrib.contenttypes.generic.GenericForeignKey`."
msgstr ""

#: ../../ref/models/querysets.txt:771
# f69d187b7dcc4c95a9c403ec1ffd0c51
msgid "For example, suppose you have these models::"
msgstr ""

#: ../../ref/models/querysets.txt:784
# 0577a771acfc4959a90dd7dae1888814
msgid "and run this code::"
msgstr ""

#: ../../ref/models/querysets.txt:789
# 0312dc986e714c508e1f9bf56364b54a
msgid "The problem with this code is that it will run a query on the Toppings table for **every** item in the Pizza ``QuerySet``.  Using ``prefetch_related``, this can be reduced to two:"
msgstr ""

#: ../../ref/models/querysets.txt:795
# e8d85106cd3446538a52b8358ddb3ef0
msgid "All the relevant toppings will be fetched in a single query, and used to make ``QuerySets`` that have a pre-filled cache of the relevant results. These ``QuerySets`` are then used in the ``self.toppings.all()`` calls."
msgstr ""

#: ../../ref/models/querysets.txt:799
# 31fd22b3194441ac876600ebefa0180a
msgid "The additional queries are executed after the QuerySet has begun to be evaluated and the primary query has been executed. Note that the result cache of the primary QuerySet and all specified related objects will then be fully loaded into memory, which is often avoided in other cases - even after a query has been executed in the database, QuerySet normally tries to make uses of chunking between the database to avoid loading all objects into memory before you need them."
msgstr ""

#: ../../ref/models/querysets.txt:807
# b79f77e2b21e4940a88d2e8918d2da2f
msgid "Also remember that, as always with QuerySets, any subsequent chained methods which imply a different database query will ignore previously cached results, and retrieve data using a fresh database query. So, if you write the following:"
msgstr ""

#: ../../ref/models/querysets.txt:814
# 6c58912576de466bb8e4fc4d1c45d92c
msgid "...then the fact that ``pizza.toppings.all()`` has been prefetched will not help you - in fact it hurts performance, since you have done a database query that you haven't used. So use this feature with caution!"
msgstr ""

#: ../../ref/models/querysets.txt:818
# 8ecaca8c9a99457fbc72f16cfaa71ae2
msgid "You can also use the normal join syntax to do related fields of related fields. Suppose we have an additional model to the example above::"
msgstr ""

#: ../../ref/models/querysets.txt:825
# a59cc7e5f36e4ab3a7d2d2ee4cbae602
msgid "The following are all legal:"
msgstr ""

#: ../../ref/models/querysets.txt:829
# 1fb9a695db684261a010b66a59272489
msgid "This will prefetch all pizzas belonging to restaurants, and all toppings belonging to those pizzas. This will result in a total of 3 database queries - one for the restaurants, one for the pizzas, and one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:835
# 4ae1375780da4ae9a93576969246c3c2
msgid "This will fetch the best pizza and all the toppings for the best pizza for each restaurant. This will be done in 3 database queries - one for the restaurants, one for the 'best pizzas', and one for one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:839
# 61a428f2bb84430e88a90895d38ba092
msgid "Of course, the ``best_pizza`` relationship could also be fetched using ``select_related`` to reduce the query count to 2:"
msgstr ""

#: ../../ref/models/querysets.txt:844
# 51c55810253b4989a7db02daa16b3aff
msgid "Since the prefetch is executed after the main query (which includes the joins needed by ``select_related``), it is able to detect that the ``best_pizza`` objects have already been fetched, and it will skip fetching them again."
msgstr ""

#: ../../ref/models/querysets.txt:848
# 705293e4a409461cba3c3cc23576cbcb
msgid "Chaining ``prefetch_related`` calls will accumulate the lookups that are prefetched. To clear any ``prefetch_related`` behavior, pass `None` as a parameter::"
msgstr ""

#: ../../ref/models/querysets.txt:854
# fc354394bca14db5ae462a9a4ca7d023
msgid "One difference to note when using ``prefetch_related`` is that objects created by a query can be shared between the different objects that they are related to i.e. a single Python model instance can appear at more than one point in the tree of objects that are returned. This will normally happen with foreign key relationships. Typically this behavior will not be a problem, and will in fact save both memory and CPU time."
msgstr ""

#: ../../ref/models/querysets.txt:861
# 05b48eace93c4e6fbd8c1cbd3aa5444d
msgid "While ``prefetch_related`` supports prefetching ``GenericForeignKey`` relationships, the number of queries will depend on the data. Since a ``GenericForeignKey`` can reference data in multiple tables, one query per table referenced is needed, rather than one query for all the items. There could be additional queries on the ``ContentType`` table if the relevant rows have not already been fetched."
msgstr ""

#: ../../ref/models/querysets.txt:868
# 93ae51b9c20e4f44b16123f0f9c75116
msgid "``prefetch_related`` in most cases will be implemented using a SQL query that uses the 'IN' operator. This means that for a large QuerySet a large 'IN' clause could be generated, which, depending on the database, might have performance problems of its own when it comes to parsing or executing the SQL query. Always profile for your use case!"
msgstr ""

#: ../../ref/models/querysets.txt:874
# 786c65bf1c8b4832945c292064bae163
msgid "Note that if you use ``iterator()`` to run the query, ``prefetch_related()`` calls will be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:878
# e9f052f9c6a04754ab1b6acf89a58bb1
msgid "extra"
msgstr ""

#: ../../ref/models/querysets.txt:882
# 713f3d96005f4dcdaba4a0cb2faf059a
msgid "Sometimes, the Django query syntax by itself can't easily express a complex ``WHERE`` clause. For these edge cases, Django provides the ``extra()`` ``QuerySet`` modifier — a hook for injecting specific clauses into the SQL generated by a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:887
# 696d60b901ee4e509ebc2dcee9124a60
msgid "By definition, these extra lookups may not be portable to different database engines (because you're explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible."
msgstr ""

#: ../../ref/models/querysets.txt:891
# 2776f041d76e4dd684a67a66227f656c
msgid "Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None of the arguments is required, but you should use at least one of them."
msgstr ""

#: ../../ref/models/querysets.txt:894
# d5313b07b1174b339aa9df4e909049da
msgid "``select``"
msgstr ""

#: ../../ref/models/querysets.txt:896
# 102cec961f6344c7854386aa935bbb81
msgid "The ``select`` argument lets you put extra fields in the ``SELECT`` clause.  It should be a dictionary mapping attribute names to SQL clauses to use to calculate that attribute."
msgstr ""

#: ../../ref/models/querysets.txt:904
# 00e61e06159b4be183c254739ec3ea3c
msgid "As a result, each ``Entry`` object will have an extra attribute, ``is_recent``, a boolean representing whether the entry's ``pub_date`` is greater than Jan. 1, 2006."
msgstr ""

#: ../../ref/models/querysets.txt:908
# f435fbfa91b5482fb335ecde69ac7cc8
msgid "Django inserts the given SQL snippet directly into the ``SELECT`` statement, so the resulting SQL of the above example would be something like::"
msgstr ""

#: ../../ref/models/querysets.txt:916
# 3ab0861ce4b9452e96b1f56e687bcfe0
msgid "The next example is more advanced; it does a subquery to give each resulting ``Blog`` object an ``entry_count`` attribute, an integer count of associated ``Entry`` objects::"
msgstr ""

#: ../../ref/models/querysets.txt:926
# 80ab418ac5164a68bfc819c604210bb2
msgid "In this particular case, we're exploiting the fact that the query will already contain the ``blog_blog`` table in its ``FROM`` clause."
msgstr ""

#: ../../ref/models/querysets.txt:929
# 35b3b1a2057b42b8955b56293727c385
msgid "The resulting SQL of the above example would be::"
msgstr ""

#: ../../ref/models/querysets.txt:934
# e6b734c2edc348ecbe2d9556f12de2a6
msgid "Note that the parentheses required by most database engines around subqueries are not required in Django's ``select`` clauses. Also note that some database backends, such as some MySQL versions, don't support subqueries."
msgstr ""

#: ../../ref/models/querysets.txt:939
# d612de7dd4a44ed7b7d01d2cff48604a
msgid "In some rare cases, you might wish to pass parameters to the SQL fragments in ``extra(select=...)``. For this purpose, use the ``select_params`` parameter. Since ``select_params`` is a sequence and the ``select`` attribute is a dictionary, some care is required so that the parameters are matched up correctly with the extra select pieces. In this situation, you should use a :class:`django.utils.datastructures.SortedDict` for the ``select`` value, not just a normal Python dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:948
# c433d2cb91a741cba4a0fb221f93b9ef
msgid "This will work, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:954
# 4a8a491771ae487fbef6ec68764c85a4
msgid "The only thing to be careful about when using select parameters in ``extra()`` is to avoid using the substring ``\"%%s\"`` (that's *two* percent characters before the ``s``) in the select strings. Django's tracking of parameters looks for ``%s`` and an escaped ``%`` character like this isn't detected. That will lead to incorrect results."
msgstr ""

#: ../../ref/models/querysets.txt:960
# 8ade48f029e5440380add465dacc3ecc
msgid "``where`` / ``tables``"
msgstr ""

#: ../../ref/models/querysets.txt:962
# 0821ba67138b4e848afe7cfed383124f
msgid "You can define explicit SQL ``WHERE`` clauses — perhaps to perform non-explicit joins — by using ``where``. You can manually add tables to the SQL ``FROM`` clause by using ``tables``."
msgstr ""

#: ../../ref/models/querysets.txt:966
# c38927e281b94440909e53ca8704ad98
msgid "``where`` and ``tables`` both take a list of strings. All ``where`` parameters are \"AND\"ed to any other search criteria."
msgstr ""

#: ../../ref/models/querysets.txt:973
# 33b01c408e1b4af5b8d5fd22fc88f768
msgid "...translates (roughly) into the following SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:977
# eca79c6b069a4eb4b48cb4edfa784a3e
msgid "Be careful when using the ``tables`` parameter if you're specifying tables that are already used in the query. When you add extra tables via the ``tables`` parameter, Django assumes you want that table included an extra time, if it is already included. That creates a problem, since the table name will then be given an alias. If a table appears multiple times in an SQL statement, the second and subsequent occurrences must use aliases so the database can tell them apart. If you're referring to the extra table you added in the extra ``where`` parameter this is going to cause errors."
msgstr ""

#: ../../ref/models/querysets.txt:987
# 69389a3105614acc9915c2f6ff1d0f06
msgid "Normally you'll only be adding extra tables that don't already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn't possible, put your ``extra()`` call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your ``where`` addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change."
msgstr ""

#: ../../ref/models/querysets.txt:998
# d6f554d2fb514a22989983359907a151
msgid "``order_by``"
msgstr ""

#: ../../ref/models/querysets.txt:1000
# 0020612879cd48a8a860b10a8d5e4a60
msgid "If you need to order the resulting queryset using some of the new fields or tables you have included via ``extra()`` use the ``order_by`` parameter to ``extra()`` and pass in a sequence of strings. These strings should either be model fields (as in the normal :meth:`order_by()` method on querysets), of the form ``table_name.column_name`` or an alias for a column that you specified in the ``select`` parameter to ``extra()``."
msgstr ""

#: ../../ref/models/querysets.txt:1013
# 2549373b63754036b0a66e3da91cac2f
msgid "This would sort all the items for which ``is_recent`` is true to the front of the result set (``True`` sorts before ``False`` in a descending ordering)."
msgstr ""

#: ../../ref/models/querysets.txt:1017
# b850f8f5417a4255aff1107b9d736f04
msgid "This shows, by the way, that you can make multiple calls to ``extra()`` and it will behave as you expect (adding new constraints each time)."
msgstr ""

#: ../../ref/models/querysets.txt:1020
# 687d68c9668d40ea8051e5624099e507
msgid "``params``"
msgstr ""

#: ../../ref/models/querysets.txt:1022
# 3377f42601e6445baac8457f5d4be84c
msgid "The ``where`` parameter described above may use standard Python database string placeholders — ``'%s'`` to indicate parameters the database engine should automatically quote. The ``params`` argument is a list of any extra parameters to be substituted."
msgstr ""

#: ../../ref/models/querysets.txt:1031
# b0919a36a7c04424a57beb00d42d3db4
msgid "Always use ``params`` instead of embedding values directly into ``where`` because ``params`` will ensure values are quoted correctly according to your particular backend. For example, quotes will be escaped correctly."
msgstr ""

#: ../../ref/models/querysets.txt:1036
# 1d097385b0ca498792e1209276e339d0
msgid "Bad::"
msgstr ""

#: ../../ref/models/querysets.txt:1040
# 2d18d254fbea471094702cbd5d4e5f42
msgid "Good::"
msgstr ""

#: ../../ref/models/querysets.txt:1045
# ed74d9e88c7d4d7da869349a98d65549
msgid "defer"
msgstr ""

#: ../../ref/models/querysets.txt:1049
# 5ebf1b3569d64a9eaa2bcef89e5db0d6
msgid "In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you know you don't know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database."
msgstr ""

#: ../../ref/models/querysets.txt:1056
# 3a0e68f0d4024bec90c90fa554bd127f
msgid "This is done by passing the names of the fields to not load to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1060
# f67ee150f7f84f19a8a22df2ec3a3eca
msgid "A queryset that has deferred fields will still return model instances. Each deferred field will be retrieved from the database if you access that field (one at a time, not all the deferred fields at once)."
msgstr ""

#: ../../ref/models/querysets.txt:1064
# 710c0a4aaa044a12a8c2022faf848fde
msgid "You can make multiple calls to ``defer()``. Each call adds new fields to the deferred set::"
msgstr ""

#: ../../ref/models/querysets.txt:1070
# 9fac37ffc87b4a4a8d1c5b697d412dd3
msgid "The order in which fields are added to the deferred set does not matter. Calling ``defer()`` with a field name that has already been deferred is harmless (the field will still be deferred)."
msgstr ""

#: ../../ref/models/querysets.txt:1074
# 45d74d8ce35049f7a701637674d0453a
msgid "You can defer loading of fields in related models (if the related models are loading via :meth:`select_related()`) by using the standard double-underscore notation to separate related fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1080
# 40d88c25a8344ea9a19ec2a16aaff720
msgid "If you want to clear the set of deferred fields, pass ``None`` as a parameter to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1086
# 386a2483124a49f381f3c48545690053
msgid "Some fields in a model won't be deferred, even if you ask for them. You can never defer the loading of the primary key. If you are using :meth:`select_related()` to retrieve related models, you shouldn't defer the loading of the field that connects from the primary model to the related one (at the moment, that doesn't raise an error, but it will eventually)."
msgstr ""

#: ../../ref/models/querysets.txt:1094
# d03493850b8248b5b1dd591e04d7b449
msgid "The ``defer()`` method (and its cousin, :meth:`only()`, below) are only for advanced use-cases. They provide an optimization for when you have analyzed your queries closely and understand *exactly* what information you need and have measured that the difference between returning the fields you need and the full set of fields for the model will be significant."
msgstr ""

#: ../../ref/models/querysets.txt:1100
# 1b55d083ffe54954a4b5e7abfe33ac2f
msgid "Even if you think you are in the advanced use-case situation, **only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not**. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns *must* stay in the one table for some reason, create a model with ``Meta.managed = False`` (see the :attr:`managed attribute <django.db.models.Options.managed>` documentation) containing just the fields you normally need to load and use that where you might otherwise call ``defer()``. This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process."
msgstr ""

#: ../../ref/models/querysets.txt:1115
# 2c09c90c684a45f0b6afd347ddcda215
msgid "only"
msgstr ""

#: ../../ref/models/querysets.txt:1119
# a3891f731502422d80ed0e83dde0036b
msgid "The ``only()`` method is more or less the opposite of :meth:`defer()`. You call it with the fields that should *not* be deferred when retrieving a model.  If you have a model where almost all the fields need to be deferred, using ``only()`` to specify the complementary set of fields can result in simpler code."
msgstr ""

#: ../../ref/models/querysets.txt:1125
# 86503a66437d490b842d2e61fafc52d6
msgid "Suppose you have a model with fields ``name``, ``age`` and ``biography``. The following two querysets are the same, in terms of deferred fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1131
# ceb53358b9f341ba899177b5824e198d
msgid "Whenever you call ``only()`` it *replaces* the set of fields to load immediately. The method's name is mnemonic: **only** those fields are loaded immediately; the remainder are deferred. Thus, successive calls to ``only()`` result in only the final fields being considered::"
msgstr ""

#: ../../ref/models/querysets.txt:1139
# 9014f55cabaa4d758e8b36239557126c
msgid "Since ``defer()`` acts incrementally (adding fields to the deferred list), you can combine calls to ``only()`` and ``defer()`` and things will behave logically::"
msgstr ""

#: ../../ref/models/querysets.txt:1150
# 10c4a409067749f887bdd4bc0bcc84b8
msgid "All of the cautions in the note for the :meth:`defer` documentation apply to ``only()`` as well. Use it cautiously and only after exhausting your other options."
msgstr ""

#: ../../ref/models/querysets.txt:1155
# 0c2873ef528345e8a00fc6aa6a0dbdf9
msgid "using"
msgstr ""

#: ../../ref/models/querysets.txt:1161
# 8d26eee00724436c903b3050458969e3
msgid "This method is for controlling which database the ``QuerySet`` will be evaluated against if you are using more than one database.  The only argument this method takes is the alias of a database, as defined in :setting:`DATABASES`."
msgstr ""

#: ../../ref/models/querysets.txt:1175
# 082d0f08bb6449d5baeac23924f5e3a9
msgid "select_for_update"
msgstr ""

#: ../../ref/models/querysets.txt:1181
# a9ec0c55ff5644eaba2d10d0588a6e7d
msgid "Returns a queryset that will lock rows until the end of the transaction, generating a ``SELECT ... FOR UPDATE`` SQL statement on supported databases."
msgstr ""

#: ../../ref/models/querysets.txt:1188
# 597cfa77085e4e1790e9bcb3735e4a4b
msgid "All matched entries will be locked until the end of the transaction block, meaning that other transactions will be prevented from changing or acquiring locks on them."
msgstr ""

#: ../../ref/models/querysets.txt:1192
# b8f433711297409f9625984011150063
msgid "Usually, if another transaction has already acquired a lock on one of the selected rows, the query will block until the lock is released. If this is not the behavior you want, call ``select_for_update(nowait=True)``. This will make the call non-blocking. If a conflicting lock is already acquired by another transaction, :exc:`~django.db.DatabaseError` will be raised when the queryset is evaluated."
msgstr ""

#: ../../ref/models/querysets.txt:1199
# 65c7f3ae8dce4596b85da7de05690ef7
msgid "Note that using ``select_for_update()`` will cause the current transaction to be considered dirty, if under transaction management. This is to ensure that Django issues a ``COMMIT`` or ``ROLLBACK``, releasing any locks held by the ``SELECT FOR UPDATE``."
msgstr ""

#: ../../ref/models/querysets.txt:1204
# 49c6dc8d5ace498ba1ade3c8765f2028
msgid "Currently, the ``postgresql_psycopg2``, ``oracle``, and ``mysql`` database backends support ``select_for_update()``. However, MySQL has no support for the ``nowait`` argument. Obviously, users of external third-party backends should check with their backend's documentation for specifics in those cases."
msgstr ""

#: ../../ref/models/querysets.txt:1209
# 28a68d16407f4264a914bd12e36c4bd9
msgid "Passing ``nowait=True`` to ``select_for_update`` using database backends that do not support ``nowait``, such as MySQL, will cause a :exc:`~django.db.DatabaseError` to be raised. This is in order to prevent code unexpectedly blocking."
msgstr ""

#: ../../ref/models/querysets.txt:1214
# 1916f966d2f347ebb0e6fbf17af866b4
msgid "Using ``select_for_update`` on backends which do not support ``SELECT ... FOR UPDATE`` (such as SQLite) will have no effect."
msgstr ""

#: ../../ref/models/querysets.txt:1218
# d522d1be0d3c496797efd79259d1e8d8
msgid "Methods that do not return QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:1220
# 96192b4d56d74ba4bbdaa8672b1c697d
msgid "The following ``QuerySet`` methods evaluate the ``QuerySet`` and return something *other than* a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:1223
# 80ca30094bf540058a69e72a3ec863f6
msgid "These methods do not use a cache (see :ref:`caching-and-querysets`). Rather, they query the database each time they're called."
msgstr ""

#: ../../ref/models/querysets.txt:1227
# da088455a7244e72b683daeb1d2916c4
msgid "get"
msgstr ""

#: ../../ref/models/querysets.txt:1231
# 02a64cb41e6e464fbb7df6d453771f10
msgid "Returns the object matching the given lookup parameters, which should be in the format described in `Field lookups`_."
msgstr ""

#: ../../ref/models/querysets.txt:1234
# 6c8a30a215db4292b58c37a6051b3245
msgid "``get()`` raises :exc:`~django.core.exceptions.MultipleObjectsReturned` if more than one object was found. The :exc:`~django.core.excpetions.MultipleObjectsReturned` exception is an attribute of the model class."
msgstr ""

#: ../../ref/models/querysets.txt:1239
# f2fd4dd24c3d4087855e03b4923616f2
msgid "``get()`` raises a :exc:`~django.core.exceptions.DoesNotExist` exception if an object wasn't found for the given parameters. This exception is also an attribute of the model class. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1245
# 43c0898c1f9d4a01bd1f6fc10f9998f3
msgid "The :exc:`~django.core.exceptions.DoesNotExist` exception inherits from :exc:`django.core.exceptions.ObjectDoesNotExist`, so you can target multiple :exc:`~django.core.exceptions.DoesNotExist` exceptions. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1257
# 4649a2e7a2db4ae4ab92a75d9b36f8ca
msgid "create"
msgstr ""

#: ../../ref/models/querysets.txt:1261
# b0a97102f51142cf848be49076fec97e
msgid "A convenience method for creating an object and saving it all in one step.  Thus::"
msgstr ""

#: ../../ref/models/querysets.txt:1265
# b9b01193259745ba9d78884be86733bb
msgid "and::"
msgstr ""

#: ../../ref/models/querysets.txt:1270
# 862db3262b9a43d196e312ad3b2e5d82
msgid "are equivalent."
msgstr ""

#: ../../ref/models/querysets.txt:1272
# aa351ab0223946b0a500a8aac9b68bb3
msgid "The :ref:`force_insert <ref-models-force-insert>` parameter is documented elsewhere, but all it means is that a new object will always be created. Normally you won't need to worry about this. However, if your model contains a manual primary key value that you set and if that value already exists in the database, a call to ``create()`` will fail with an :exc:`~django.db.IntegrityError` since primary keys must be unique. Be prepared to handle the exception if you are using manual primary keys."
msgstr ""

#: ../../ref/models/querysets.txt:1281
# daf306f4b3eb4f31a3b0d40ae39a6d8c
msgid "get_or_create"
msgstr ""

#: ../../ref/models/querysets.txt:1285
# 7af122daa19447a98a361d8949e3e119
msgid "A convenience method for looking up an object with the given kwargs, creating one if necessary."
msgstr ""

#: ../../ref/models/querysets.txt:1288
# dc07fb0377a542b0b8798ae81aa6c131
msgid "Returns a tuple of ``(object, created)``, where ``object`` is the retrieved or created object and ``created`` is a boolean specifying whether a new object was created."
msgstr ""

#: ../../ref/models/querysets.txt:1292
# 84416c9ea8aa48e19cc31999a28fe721
msgid "This is meant as a shortcut to boilerplatish code and is mostly useful for data-import scripts. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1301
# b8dd10b84a844d72af058ea38185413e
msgid "This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using ``get_or_create()`` like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1307
# c5e58bccae3143dd97c73c19c1c0d64e
msgid "Any keyword arguments passed to ``get_or_create()`` — *except* an optional one called ``defaults`` — will be used in a :meth:`get()` call. If an object is found, ``get_or_create()`` returns a tuple of that object and ``False``. If an object is *not* found, ``get_or_create()`` will instantiate and save a new object, returning a tuple of the new object and ``True``. The new object will be created roughly according to this algorithm::"
msgstr ""

#: ../../ref/models/querysets.txt:1320
# 1d774dd067d14a6f9a02a26479966585
msgid "In English, that means start with any non-``'defaults'`` keyword argument that doesn't contain a double underscore (which would indicate a non-exact lookup). Then add the contents of ``defaults``, overriding any keys if necessary, and use the result as the keyword arguments to the model class. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you're interested, read the code."
msgstr ""

#: ../../ref/models/querysets.txt:1329
# 5b93912a57924db2a90f92577ca62919
msgid "If you have a field named ``defaults`` and want to use it as an exact lookup in ``get_or_create()``, just use ``'defaults__exact'``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1334
# 42ee69b0cde64343a57dd2fcdf81a352
msgid "The ``get_or_create()`` method has similar error behavior to :meth:`create()` when you're using manually specified primary keys. If an object needs to be created and the key already exists in the database, an :exc:`~django.db.IntegrityError` will be raised."
msgstr ""

#: ../../ref/models/querysets.txt:1339
# 2351d8c843de4d32bb0674af13783d83
msgid "Finally, a word on using ``get_or_create()`` in Django views. As mentioned earlier, ``get_or_create()`` is mostly useful in scripts that need to parse data and create new records if existing ones aren't available. But if you need to use ``get_or_create()`` in a view, please make sure to use it only in ``POST`` requests unless you have a good reason not to. ``GET`` requests shouldn't have any effect on data; use ``POST`` whenever a request to a page has a side effect on your data. For more, see `Safe methods`_ in the HTTP spec."
msgstr ""

#: ../../ref/models/querysets.txt:1350
# 9a35ea55728e4404a7d15e7058ca9dbf
msgid "bulk_create"
msgstr ""

#: ../../ref/models/querysets.txt:1356
# ccee0785ad764274b7c258927ec0ac78
msgid "This method inserts the provided list of objects into the database in an efficient manner (generally only 1 query, no matter how many objects there are)::"
msgstr ""

#: ../../ref/models/querysets.txt:1366
# 7448329b29c14022b38f3603dc911f83
msgid "This has a number of caveats though:"
msgstr ""

#: ../../ref/models/querysets.txt:1368
# 6f929a1d70e041328491ef5e8b093bad
msgid "The model's ``save()`` method will not be called, and the ``pre_save`` and ``post_save`` signals will not be sent."
msgstr ""

#: ../../ref/models/querysets.txt:1370
# 000e5792f9b34eefb5ad4e95abd055f9
msgid "It does not work with child models in a multi-table inheritance scenario."
msgstr ""

#: ../../ref/models/querysets.txt:1371
# f79c937909d845d185f2b872d98ad0b9
msgid "If the model's primary key is an :class:`~django.db.models.AutoField` it does not retrieve and set the primary key attribute, as ``save()`` does."
msgstr ""

#: ../../ref/models/querysets.txt:1376
# dfe4dff054624e8d80d63e6f24e6c474
msgid "SQLite sets a limit on the number of parameters per SQL statement. The maximum is defined by the SQLITE_MAX_VARIABLE_NUMBER_ compilation option, which defaults to 999. For instance, if your model has 8 fields (including the primary key), you cannot create more than 999 // 8 = 124 instances at a time. If you exceed this limit, you'll get an exception::"
msgstr ""

#: ../../ref/models/querysets.txt:1384
# 77f257daa5024373aedfdd6d1eac0f46
msgid "If your application's performance requirements exceed SQLite's limits, you should switch to another database engine, such as PostgreSQL."
msgstr ""

#: ../../ref/models/querysets.txt:1390
# 682560350c3e46f58a220f6319d85a30
msgid "count"
msgstr ""

#: ../../ref/models/querysets.txt:1394
# 315407a4c61a4725ba11c60252ca63fb
msgid "Returns an integer representing the number of objects in the database matching the ``QuerySet``. The ``count()`` method never raises exceptions."
msgstr ""

#: ../../ref/models/querysets.txt:1405
# 92b08a31913049d3bd7e21312bac6dc5
msgid "A ``count()`` call performs a ``SELECT COUNT(*)`` behind the scenes, so you should always use ``count()`` rather than loading all of the record into Python objects and calling ``len()`` on the result (unless you need to load the objects into memory anyway, in which case ``len()`` will be faster)."
msgstr ""

#: ../../ref/models/querysets.txt:1410
# cd12679ff5cf40eca0baab2c2d7042c7
msgid "Depending on which database you're using (e.g. PostgreSQL vs. MySQL), ``count()`` may return a long integer instead of a normal Python integer. This is an underlying implementation quirk that shouldn't pose any real-world problems."
msgstr ""

#: ../../ref/models/querysets.txt:1416
# ec7189086a894343aebf5fbe502a461f
msgid "in_bulk"
msgstr ""

#: ../../ref/models/querysets.txt:1420
# 4c8f538c9b90400bb975a50b6391e305
msgid "Takes a list of primary-key values and returns a dictionary mapping each primary-key value to an instance of the object with the given ID."
msgstr ""

#: ../../ref/models/querysets.txt:1432
# 6f4f5111f5614c6f8322d982ed846c91
msgid "If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:1435
# 7428352be02d4118a3239472a4378632
msgid "iterator"
msgstr ""

#: ../../ref/models/querysets.txt:1439
# 192352b2f0cd42dd91717fc62ab8e4b9
msgid "Evaluates the ``QuerySet`` (by performing the query) and returns an iterator (see :pep:`234`) over the results. A ``QuerySet`` typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, ``iterator()`` will read results directly, without doing any caching at the ``QuerySet`` level (internally, the default iterator calls ``iterator()`` and caches the return value). For a ``QuerySet`` which returns a large number of objects that you only need to access once, this can results in better performance and a significant reduction in memory."
msgstr ""

#: ../../ref/models/querysets.txt:1448
# 7918ea1c75c34480ada4262628169553
msgid "Note that using ``iterator()`` on a ``QuerySet`` which has already been evaluated will force it to evaluate again, repeating the query."
msgstr ""

#: ../../ref/models/querysets.txt:1451
# efbe29cc85514ffaa61877b14471e16d
msgid "Also, use of ``iterator()`` causes previous ``prefetch_related()`` calls to be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:1455
# de7a01eb41c946688c08a01bfeda75b8
msgid "latest"
msgstr ""

#: ../../ref/models/querysets.txt:1459
# f4092589433949778c122df7dce653bf
msgid "Returns the latest object in the table, by date, using the ``field_name`` provided as the date field."
msgstr ""

#: ../../ref/models/querysets.txt:1462
# 01bedff3dd7c4f1e8234a6432849b3e1
msgid "This example returns the latest ``Entry`` in the table, according to the ``pub_date`` field::"
msgstr ""

#: ../../ref/models/querysets.txt:1467
# 5589316dea02473dbe39280785a47dcc
msgid "If your model's :ref:`Meta <meta-options>` specifies :attr:`~django.db.models.Options.get_latest_by`, you can leave off the ``field_name`` argument to ``latest()``. Django will use the field specified in :attr:`~django.db.models.Options.get_latest_by` by default."
msgstr ""

#: ../../ref/models/querysets.txt:1472
# 7db049b1da244fa18a88c3a8bda92cc0
msgid "Like :meth:`get()`, ``latest()`` raises :exc:`~django.core.exceptions.DoesNotExist` if there is no object with the given parameters."
msgstr ""

#: ../../ref/models/querysets.txt:1476
# 8cc4493079cc4ab780da633f3f109ec1
msgid "Note ``latest()`` exists purely for convenience and readability."
msgstr ""

#: ../../ref/models/querysets.txt:1479
# 0212d237db104c35b511adc652598606
msgid "aggregate"
msgstr ""

#: ../../ref/models/querysets.txt:1483
# 790f2ab6d20446df9f810aab9fe52355
msgid "Returns a dictionary of aggregate values (averages, sums, etc) calculated over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value that will be included in the dictionary that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:1490
# ac4a94f8f2504cb5bf38ef9f8ac33d69
msgid "Aggregates specified using keyword arguments will use the keyword as the name for the annotation. Anonymous arguments will have a name generated for them based upon the name of the aggregate function and the model field that is being aggregated."
msgstr ""

#: ../../ref/models/querysets.txt:1495
# a9a4f28e9f8445ef96ede7d3ef900343
msgid "For example, when you are working with blog entries, you may want to know the number of authors that have contributed blog entries::"
msgstr ""

#: ../../ref/models/querysets.txt:1501
# f66be7a212934ea2a50cb09c261a56a3
msgid "By using a keyword argument to specify the aggregate function, you can control the name of the aggregation value that is returned::"
msgstr ""

#: ../../ref/models/querysets.txt:1511
# ca31604108c84f369d0e4e7cc049f7d5
msgid "exists"
msgstr ""

#: ../../ref/models/querysets.txt:1517
# 16dc0a375ce24e74bcd432ec91b26f3a
msgid "Returns ``True`` if the :class:`.QuerySet` contains any results, and ``False`` if not. This tries to perform the query in the simplest and fastest way possible, but it *does* execute nearly the same query. This means that calling :meth:`.QuerySet.exists` is faster than ``bool(some_query_set)``, but not by a large degree. If ``some_query_set`` has not yet been evaluated, but you know that it will be at some point, then using ``some_query_set.exists()`` will do more overall work (one query for the existence check plus an extra one to later retrieve the results) than simply using ``bool(some_query_set)``, which retrieves the results and then checks if any were returned."
msgstr ""

#: ../../ref/models/querysets.txt:1528
# ddc408e8cf19421a8e0ad8df85e19ca6
msgid "update"
msgstr ""

#: ../../ref/models/querysets.txt:1532
# 9ff22e12063444c1bfabb7eedc464e63
msgid "Performs an SQL update query for the specified fields, and returns the number of rows affected."
msgstr ""

#: ../../ref/models/querysets.txt:1535
# b9fc558c08a84a90bc4aa2e5cc196e41
msgid "For example, to turn comments off for all blog entries published in 2010, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:1540
# 6a7fd134d1064c3aa50b2489b643b56b
msgid "(This assumes your ``Entry`` model has fields ``pub_date`` and ``comments_on``.)"
msgstr ""

#: ../../ref/models/querysets.txt:1542
# ffdfe994d5f4485bba2d0b1742e964d8
msgid "You can update multiple fields — there's no limit on how many. For example, here we update the ``comments_on`` and ``headline`` fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1547
# 975ffcbc4eee49e5ab2862c78e07b564
msgid "The ``update()`` method is applied instantly, and the only restriction on the :class:`.QuerySet` that is updated is that it can only update columns in the model's main table, not on related models. You can't do this, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:1553
# abdaad0e26614ee8b710bfe376490757
msgid "Filtering based on related fields is still possible, though::"
msgstr ""

#: ../../ref/models/querysets.txt:1557
# 31122f45c3714857a7be80e2a05200fa
msgid "You cannot call ``update()`` on a :class:`.QuerySet` that has had a slice taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:1560
# 9b794c7552c24f3897b271c1da41d246
msgid "The ``update()`` method returns the number of affected rows::"
msgstr ""

#: ../../ref/models/querysets.txt:1571
# 1df80de294054862ac0c642dbf33ac04
msgid "If you're just updating a record and don't need to do anything with the model object, the most efficient approach is to call ``update()``, rather than loading the model object into memory. For example, instead of doing this::"
msgstr ""

#: ../../ref/models/querysets.txt:1579
# 023827fc87ac4f36a9e940d9ff1976d1
msgid "...do this::"
msgstr ""

#: ../../ref/models/querysets.txt:1583
# 03c016993f69486bb767cbecc5db9bb9
msgid "Using ``update()`` also prevents a race condition wherein something might change in your database in the short period of time between loading the object and calling ``save()``."
msgstr ""

#: ../../ref/models/querysets.txt:1587
# 0a73f708dc6d4308b82b3ea495c629c9
msgid "Finally, realize that ``update()`` does an update at the SQL level and, thus, does not call any ``save()`` methods on your models, nor does it emit the :attr:`~django.db.models.signals.pre_save` or :attr:`~django.db.models.signals.post_save` signals (which are a consequence of calling :meth:`Model.save() <~django.db.models.Model.save()>`). If you want to update a bunch of records for a model that has a custom :meth:`~django.db.models.Model.save()`` method, loop over them and call :meth:`~django.db.models.Model.save()`, like this::"
msgstr ""

#: ../../ref/models/querysets.txt:1601
# fb79cbc8b9924e5bb5860aebafc22391
msgid "delete"
msgstr ""

#: ../../ref/models/querysets.txt:1605
# 4bab6c35bbb34cc7a340bc365f203886
msgid "Performs an SQL delete query on all rows in the :class:`.QuerySet`. The ``delete()`` is applied instantly. You cannot call ``delete()`` on a :class:`.QuerySet` that has had a slice taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:1610
# f30e0c53578c4bfeac94d951d6712fd8
msgid "For example, to delete all the entries in a particular blog::"
msgstr ""

#: ../../ref/models/querysets.txt:1617
# 32bbaafa49ba476880a395e5fff811a6
msgid "By default, Django's :class:`~django.db.models.ForeignKey` emulates the SQL constraint ``ON DELETE CASCADE`` — in other words, any objects with foreign keys pointing at the objects to be deleted will be deleted along with them. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1631
# 735f6189082b4e768e6edc0ea7a9290c
msgid "The ``delete()`` method does a bulk delete and does not call any ``delete()`` methods on your models. It does, however, emit the :data:`~django.db.models.signals.pre_delete` and :data:`~django.db.models.signals.post_delete` signals for all deleted objects (including cascaded deletions)."
msgstr ""

#: ../../ref/models/querysets.txt:1640
# 8418e70e691442db87fdd829d065328c
msgid "Field lookups"
msgstr ""

#: ../../ref/models/querysets.txt:1642
# cceaa8b837a842e583879a3238322fc8
msgid "Field lookups are how you specify the meat of an SQL ``WHERE`` clause. They're specified as keyword arguments to the ``QuerySet`` methods :meth:`filter()`, :meth:`exclude()` and :meth:`get()`."
msgstr ""

#: ../../ref/models/querysets.txt:1646
# a6770c30fdd64209b9ff5b0cf2fe7f0f
msgid "For an introduction, see :ref:`models and database queries documentation <field-lookups-intro>`."
msgstr ""

#: ../../ref/models/querysets.txt:1652
# dcd8cd0439c04aaab743a789c8e4ba8a
msgid "exact"
msgstr ""

#: ../../ref/models/querysets.txt:1654
# 662247b2f72a4595a02a081803467388
msgid "Exact match. If the value provided for comparison is ``None``, it will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""

#: ../../ref/models/querysets.txt:1662
#: ../../ref/models/querysets.txt:2095
#: ../../ref/models/querysets.txt:2119
# 902d806e4fb94f749c097362ca2e396b
# 02cb328dece342eb95f0c1c2ddcee6f8
# 06c0faa79c4a45aeab74330e35085b12
msgid "SQL equivalents::"
msgstr ""

#: ../../ref/models/querysets.txt:1669
# 841cc14c4bbc410f9fc486cbcbc36f03
msgid "In MySQL, a database table's \"collation\" setting determines whether ``exact`` comparisons are case-sensitive. This is a database setting, *not* a Django setting. It's possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the :ref:`collation section <mysql-collation>` in the :doc:`databases </ref/databases>` documentation."
msgstr ""

#: ../../ref/models/querysets.txt:1679
# 9fa55225c8b141698a9a34d1d5118f3e
msgid "iexact"
msgstr ""

#: ../../ref/models/querysets.txt:1681
# 4e3268a72773406babc21a1899569bcd
msgid "Case-insensitive exact match."
msgstr ""

#: ../../ref/models/querysets.txt:1687
#: ../../ref/models/querysets.txt:1712
#: ../../ref/models/querysets.txt:1737
#: ../../ref/models/querysets.txt:1758
#: ../../ref/models/querysets.txt:1831
#: ../../ref/models/querysets.txt:1867
#: ../../ref/models/querysets.txt:1885
#: ../../ref/models/querysets.txt:1906
#: ../../ref/models/querysets.txt:1927
#: ../../ref/models/querysets.txt:1950
#: ../../ref/models/querysets.txt:1968
#: ../../ref/models/querysets.txt:1986
#: ../../ref/models/querysets.txt:2003
#: ../../ref/models/querysets.txt:2052
#: ../../ref/models/querysets.txt:2068
# 47965c81b2ed4cb9a78fc7788321100d
# ba0fa1b0013d46448da553a17646b342
# 2ba0760748834b6cb826c3899dce21f8
# f5eeaf90a6fe426e82be922fdbe1b8d2
# bfe46053faab4389a1e8935afc5c5894
# eec229358a264f4d9496f5d5c39ce145
# 3218003d52bd42aebebe50fa9e3a476b
# d9349405fc734c46a7f6facb0deab85a
# df4e46513e6d4109b2826b267484a482
# 1bfe40cf02174c67906b62a74d67f37b
# 6c5f9d26cbc64199a81ed3205d46867f
# 4a1ba8750e3545a1a86187f37b8a122c
# edfd2e50e17f4890b33f99f17cbc2cdc
# 07b1893948394d73b47869f3bb398e94
# ae2f6d300a164ed4a1f3711ae02051e5
msgid "SQL equivalent::"
msgstr ""

#: ../../ref/models/querysets.txt:1691
# be721ee6ec4748528c2ee25ca06a73d1
msgid "Note this will match ``'Beatles Blog'``, ``'beatles blog'``, ``'BeAtLes BLoG'``, etc."
msgstr ""

#: ../../ref/models/querysets.txt:1696
# fdc8364f6f0c48eaa8d071c90881ab74
msgid "When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind the :ref:`database note <sqlite-string-matching>` about string comparisons. SQLite does not do case-insensitive matching for Unicode strings."
msgstr ""

#: ../../ref/models/querysets.txt:1706
# 949ec8b414f643288d6b3ae5873bc247
msgid "Case-sensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:1716
# 9f707cba69db4876a29210551f1079fa
msgid "Note this will match the headline ``'Lennon honored today'`` but not ``'lennon honored today'``."
msgstr ""

#: ../../ref/models/querysets.txt:1721
# c0da0c42c5b24176a7d041ea4c746ef9
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts like ``icontains`` for SQLite. See the :ref:`database note <sqlite-string-matching>` for more information."
msgstr ""

#: ../../ref/models/querysets.txt:1729
# 51dd4204fcb14dcbb3e48c764059e016
msgid "icontains"
msgstr ""

#: ../../ref/models/querysets.txt:1731
# 7a10c19dcae04be7935a94c143b2e577
msgid "Case-insensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:1743
#: ../../ref/models/querysets.txt:1891
#: ../../ref/models/querysets.txt:1933
# 5c6c00a618c7433d900cfd31b4f00a2b
# b1163c224c7b4fe38e13096581fe7852
# 546437d651e94438a7f7b2e8249d5eae
msgid "When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind the :ref:`database note <sqlite-string-matching>` about string comparisons."
msgstr ""

#: ../../ref/models/querysets.txt:1750
# 912a38ed08c340ab989b30a0d45f18c9
msgid "in"
msgstr ""

#: ../../ref/models/querysets.txt:1752
# 13d8e0fe9a5f4417ab0f3d2945b297c8
msgid "In a given list."
msgstr ""

#: ../../ref/models/querysets.txt:1762
# b7ebca6e0ae34dec9f5f2fa5071b7955
msgid "You can also use a queryset to dynamically evaluate the list of values instead of providing a list of literal values::"
msgstr ""

#: ../../ref/models/querysets.txt:1768
# f2fce0adbb454f5dba8a8af877981db6
msgid "This queryset will be evaluated as subselect statement::"
msgstr ""

#: ../../ref/models/querysets.txt:1772
# 1db0a620af8d4d1f815708b459b8bf7e
msgid "The above code fragment could also be written as follows::"
msgstr ""

#: ../../ref/models/querysets.txt:1779
# c0fa2250a0ab4ba28364a9d46a07ef3b
msgid "This ``query`` attribute should be considered an opaque internal attribute. It's fine to use it like above, but its API may change between Django versions."
msgstr ""

#: ../../ref/models/querysets.txt:1783
# 5674e21a0ec64f92b38b39504d703494
msgid "This second form is a bit less readable and unnatural to write, since it accesses the internal ``query`` attribute and requires a ``ValuesQuerySet``. If your code doesn't require compatibility with Django 1.0, use the first form, passing in a queryset directly."
msgstr ""

#: ../../ref/models/querysets.txt:1788
# cf470891ee644ce1854f4ffbf13a5150
msgid "If you pass in a ``ValuesQuerySet`` or ``ValuesListQuerySet`` (the result of calling ``values()`` or ``values_list()`` on a queryset) as the value to an ``__in`` lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names)::"
msgstr ""

#: ../../ref/models/querysets.txt:1796
# ec8384c3f3ef474f9a160850df669913
msgid "This example will raise an exception, since the inner query is trying to extract two field values, where only one is expected::"
msgstr ""

#: ../../ref/models/querysets.txt:1805
# b9e95d880f7c43d9b7da0cce0dc84dbd
msgid "Be cautious about using nested queries and understand your database server's performance characteristics (if in doubt, benchmark!). Some database backends, most notably MySQL, don't optimize nested queries very well. It is more efficient, in those cases, to extract a list of values and then pass that into the second query. That is, execute two queries instead of one::"
msgstr ""

#: ../../ref/models/querysets.txt:1816
# caadfa93a3ce4f6c95088227e7196ac8
msgid "Note the ``list()`` call around the Blog ``QuerySet`` to force execution of the first query. Without it, a nested query would be executed, because :ref:`querysets-are-lazy`."
msgstr ""

#: ../../ref/models/querysets.txt:1823
# 3a65451fe511412ca7b4764dd39299b6
msgid "gt"
msgstr ""

#: ../../ref/models/querysets.txt:1825
# c5a0ba4288734e0fafa78ae6c4ff98e0
msgid "Greater than."
msgstr ""

#: ../../ref/models/querysets.txt:1838
# 74593414cd004a6f8a6bd610e16d327c
msgid "gte"
msgstr ""

#: ../../ref/models/querysets.txt:1840
# 7ed3ea13ddc44e60b017edd0547362f6
msgid "Greater than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:1845
# 54642f75dd644bd3b6066cb44b48acc7
msgid "lt"
msgstr ""

#: ../../ref/models/querysets.txt:1847
# 14b40d7083894a7b91a89460f01f5c3b
msgid "Less than."
msgstr ""

#: ../../ref/models/querysets.txt:1852
# 745d645332854b3d87b8a6442e8cd0ed
msgid "lte"
msgstr ""

#: ../../ref/models/querysets.txt:1854
# 1fe27e90e24543288b1bfa2e13e85e8b
msgid "Less than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:1859
# 0e42138d28a44226b278c7c375d01682
msgid "startswith"
msgstr ""

#: ../../ref/models/querysets.txt:1861
# c1530190e36046028786087cbff127c8
msgid "Case-sensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:1871
# dfe8e4317fda437d90344eaaabb9bff0
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` acts like ``istartswith`` for SQLite."
msgstr ""

#: ../../ref/models/querysets.txt:1877
# f15db691570e4ad394134a5edf337c40
msgid "istartswith"
msgstr ""

#: ../../ref/models/querysets.txt:1879
# 9ef01594bbb04733b24b82d6c83d88b5
msgid "Case-insensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:1898
# f6b1d7711e9645cfb42e3b1f237fefc2
msgid "endswith"
msgstr ""

#: ../../ref/models/querysets.txt:1900
# fe8eb8e1e1e947d1a8f2c13525115787
msgid "Case-sensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:1912
# fdd3b7c367eb46cea4149e3c85d6615f
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts like ``iendswith`` for SQLite. Refer to the :ref:`database note <sqlite-string-matching>` documentation for more."
msgstr ""

#: ../../ref/models/querysets.txt:1919
# 95eccda83b10458d963c17a5cf3e9e03
msgid "iendswith"
msgstr ""

#: ../../ref/models/querysets.txt:1921
# 4982e05b88404c0a8a62a529315ddff9
msgid "Case-insensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:1940
# 21303406743e44f4878ea72b40229400
msgid "range"
msgstr ""

#: ../../ref/models/querysets.txt:1942
# e54cace76b01481a88deed7e53e5c56e
msgid "Range test (inclusive)."
msgstr ""

#: ../../ref/models/querysets.txt:1954
# 340d3b3bf68849b6bbe9ba44e063f873
msgid "You can use ``range`` anywhere you can use ``BETWEEN`` in SQL — for dates, numbers and even characters."
msgstr ""

#: ../../ref/models/querysets.txt:1960
# 86b1b2c3c6e14eba87d01879a2b16520
msgid "year"
msgstr ""

#: ../../ref/models/querysets.txt:1962
# b8c8a7680bb444619b2cd787f12a977f
msgid "For date/datetime fields, exact year match. Takes a four-digit year."
msgstr ""

#: ../../ref/models/querysets.txt:1972
#: ../../ref/models/querysets.txt:1990
#: ../../ref/models/querysets.txt:2007
# b5df24e1c0b6437c9fcadb025636eef5
# d94dad46953a4a75bc303b448f91ce56
# cb6af05d635d40e1b5a9d2e170c0076f
msgid "(The exact SQL syntax varies for each database engine.)"
msgstr ""

#: ../../ref/models/querysets.txt:1977
# b61dc105109b4f339f73755ddcb2d609
msgid "month"
msgstr ""

#: ../../ref/models/querysets.txt:1979
# 2d249e7b348e4e3b9fc6ce27b019cd31
msgid "For date and datetime fields, an exact month match. Takes an integer 1 (January) through 12 (December)."
msgstr ""

#: ../../ref/models/querysets.txt:1995
# d1b16d51763740f097546ab38f2e09b3
msgid "day"
msgstr ""

#: ../../ref/models/querysets.txt:1997
# cf27568c705e4ce882c4825fb71a5d79
msgid "For date and datetime fields, an exact day match."
msgstr ""

#: ../../ref/models/querysets.txt:2009
# d8e47d215e8e4a6b9d94e35a41dea0a2
msgid "Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc."
msgstr ""

#: ../../ref/models/querysets.txt:2015
# ffec340cbb48403bb8eedab2b74c0e46
msgid "week_day"
msgstr ""

#: ../../ref/models/querysets.txt:2017
# a0137c4283c14520b1c5139226dbc6f7
msgid "For date and datetime fields, a 'day of the week' match."
msgstr ""

#: ../../ref/models/querysets.txt:2019
# 2d7551169c044f0cbf97ec757131b6f0
msgid "Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday)."
msgstr ""

#: ../../ref/models/querysets.txt:2026
# e53d250194c444c1b86d16ddf8365127
msgid "(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)"
msgstr ""

#: ../../ref/models/querysets.txt:2029
# 045bbdd3aaa04cec97c3d2139932fe17
msgid "Note this will match any record with a ``pub_date`` that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday."
msgstr ""

#: ../../ref/models/querysets.txt:2035
# 9d9e35814f70455bad1e0f4f4a558799
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled, Django uses UTC in the database connection, which means the ``year``, ``month``, ``day`` and ``week_day`` lookups are performed in UTC. This is a known limitation of the current implementation."
msgstr ""

#: ../../ref/models/querysets.txt:2043
# 4cb72bd427434d879837b1bffbc7cf2e
msgid "isnull"
msgstr ""

#: ../../ref/models/querysets.txt:2045
# e5dcfdfef32d4d14af4fbbefb711295c
msgid "Takes either ``True`` or ``False``, which correspond to SQL queries of ``IS NULL`` and ``IS NOT NULL``, respectively."
msgstr ""

#: ../../ref/models/querysets.txt:2059
# 69e84ebdf81340529a6783d710028ae6
msgid "search"
msgstr ""

#: ../../ref/models/querysets.txt:2061
# 2172342420fb4e02bd1e0384ec84e777
msgid "A boolean full-text search, taking advantage of full-text indexing. This is like :lookup:`contains` but is significantly faster due to full-text indexing."
msgstr ""

#: ../../ref/models/querysets.txt:2072
# 5cf2854503494083b22099a37ac4779a
msgid "Note this is only available in MySQL and requires direct manipulation of the database to add the full-text index. By default Django uses BOOLEAN MODE for full text searches. See the `MySQL documentation`_ for additional details."
msgstr ""

#: ../../ref/models/querysets.txt:2082
# 9d82c753f3544829b71b221367c6bd05
msgid "regex"
msgstr ""

#: ../../ref/models/querysets.txt:2084
# 897a0fc3b1d14148869413a32300821e
msgid "Case-sensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2086
# 5faf6525ba6b4bd681d9a81ef45d797b
msgid "The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python's ``re`` module."
msgstr ""

#: ../../ref/models/querysets.txt:2105
# d053a054a25a4b0bb28aa47244988f73
msgid "Using raw strings (e.g., ``r'foo'`` instead of ``'foo'``) for passing in the regular expression syntax is recommended."
msgstr ""

#: ../../ref/models/querysets.txt:2111
# 73b748df7a44491db5c549cb3408f85e
msgid "iregex"
msgstr ""

#: ../../ref/models/querysets.txt:2113
# 9573762cbbf544dfa2046de09e07910e
msgid "Case-insensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2132
# 6695039d72a740d3a0b98143160967ea
msgid "Aggregation functions"
msgstr ""

#: ../../ref/models/querysets.txt:2136
# 7756e8ef542f4349b20d3752b7cc00ff
msgid "Django provides the following aggregation functions in the ``django.db.models`` module. For details on how to use these aggregate functions, see :doc:`the topic guide on aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:2142
# bc15862bb021446ab8fbed287d9f5186
msgid "Avg"
msgstr ""

#: ../../ref/models/querysets.txt:2146
# 200af1e51425452db1aad1e5bf61bd0d
msgid "Returns the mean value of the given field, which must be numeric."
msgstr ""

#: ../../ref/models/querysets.txt:2148
# 80e6a357ccb04a95b7100d72f0572e2e
msgid "Default alias: ``<field>__avg``"
msgstr ""

#: ../../ref/models/querysets.txt:2149
#: ../../ref/models/querysets.txt:2197
#: ../../ref/models/querysets.txt:2231
# c1b2775ffcbb44ab9e1c7dd74f0700ce
# 63833c7183b34aecb4694b4c873b263e
# d39f4190bef44f0fb1fe2b69861f5a12
msgid "Return type: ``float``"
msgstr ""

#: ../../ref/models/querysets.txt:2152
# cb8c9227c76741738e20fba8484bf632
msgid "Count"
msgstr ""

#: ../../ref/models/querysets.txt:2156
# 4072af21887e4239bec56195139708c4
msgid "Returns the number of objects that are related through the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2158
# 9c66d6f3dfba4265bab66a8b8cdaf37e
msgid "Default alias: ``<field>__count``"
msgstr ""

#: ../../ref/models/querysets.txt:2159
# 1c5e982c0fa944da98ee0d5783e2af48
msgid "Return type: ``int``"
msgstr ""

#: ../../ref/models/querysets.txt:2161
#: ../../ref/models/querysets.txt:2199
#: ../../ref/models/querysets.txt:2233
# 817373fa01c444f7954d1a954c766ff2
# c744f2d5095d42acafd1510fe24ebb01
# 9a5fc0b162734a6ba90cef5619cb3607
msgid "Has one optional argument:"
msgstr ""

#: ../../ref/models/querysets.txt:2165
# 0d493b48f82f4cdda3b5fbdf6f4d0d87
msgid "If ``distinct=True``, the count will only include unique instances. This is the SQL equivalent of ``COUNT(DISTINCT <field>)``. The default value is ``False``."
msgstr ""

#: ../../ref/models/querysets.txt:2170
# 4109334dd76b4fb9879f15507f9d03c3
msgid "Max"
msgstr ""

#: ../../ref/models/querysets.txt:2174
# 80a4d42cce19468ab7f7b03bb2cf13f1
msgid "Returns the maximum value of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2176
# 82cc109dd7c34e02bb14ed5ecc8a150c
msgid "Default alias: ``<field>__max``"
msgstr ""

#: ../../ref/models/querysets.txt:2177
#: ../../ref/models/querysets.txt:2187
#: ../../ref/models/querysets.txt:2221
# e2536735d8204b398db248e4cb68c1d7
# 39d4594e7f8745889bdf6faa9cebdb7a
# ebb0d3d52d174df59be9faacf6b9fdbe
msgid "Return type: same as input field"
msgstr ""

#: ../../ref/models/querysets.txt:2180
# b6d631de52524f5fb197a9fe35cd9058
msgid "Min"
msgstr ""

#: ../../ref/models/querysets.txt:2184
# 4c2b08c8625448f6b27e75a817e6c813
msgid "Returns the minimum value of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2186
# 275393f4a07f4a50819bfc2b23f193a8
msgid "Default alias: ``<field>__min``"
msgstr ""

#: ../../ref/models/querysets.txt:2190
# 8b2f8e4efac74c7e9d44bb5ef78c00b9
msgid "StdDev"
msgstr ""

#: ../../ref/models/querysets.txt:2194
# 8e28c0b963cc4aa0842fff1025379eac
msgid "Returns the standard deviation of the data in the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2196
# 7e7b00ad71024eeda0b47ec12a3afaa1
msgid "Default alias: ``<field>__stddev``"
msgstr ""

#: ../../ref/models/querysets.txt:2203
# 044aa90ee9954b4096d96497d45e4163
msgid "By default, ``StdDev`` returns the population standard deviation. However, if ``sample=True``, the return value will be the sample standard deviation."
msgstr ""

#: ../../ref/models/querysets.txt:2208
# 42b926c5e23e4f48b31043ae1385cec3
msgid "SQLite doesn't provide ``StdDev`` out of the box. An implementation is available as an extension module for SQLite. Consult the `SQlite documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/querysets.txt:2214
# f781a60172f94dc79b7fec4896a5ed42
msgid "Sum"
msgstr ""

#: ../../ref/models/querysets.txt:2218
# 73bb6b69c0a84a77ab14aeab976e9d9b
msgid "Computes the sum of all values of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2220
# 0bd946bf025b49fb964d2b5b9fbc389a
msgid "Default alias: ``<field>__sum``"
msgstr ""

#: ../../ref/models/querysets.txt:2224
# 4a43da82c9b24a9bbbd07789819e34c3
msgid "Variance"
msgstr ""

#: ../../ref/models/querysets.txt:2228
# 55a2abb23be34d1ab4d5b2910702276c
msgid "Returns the variance of the data in the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2230
# c2c7df416c42447b8112127c2c89850e
msgid "Default alias: ``<field>__variance``"
msgstr ""

#: ../../ref/models/querysets.txt:2237
# d9c96b00870d4da38208280d626891b5
msgid "By default, ``Variance`` returns the population variance. However, if ``sample=True``, the return value will be the sample variance."
msgstr ""

#: ../../ref/models/querysets.txt:2242
# b49989f4998641cea24c7028a702b059
msgid "SQLite doesn't provide ``Variance`` out of the box. An implementation is available as an extension module for SQLite. Consult the `SQlite documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/relations.txt:3
# c8c839506ace4560b998b789fc4247e6
msgid "Related objects reference"
msgstr ""

#: ../../ref/models/relations.txt:9
# f160b7b98f8e40c9a14a26921395a2b3
msgid "A \"related manager\" is a manager used in a one-to-many or many-to-many related context. This happens in two cases:"
msgstr ""

#: ../../ref/models/relations.txt:12
# 7a477d56a1f04469bcc6b24fa9d951ba
msgid "The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That is::"
msgstr ""

#: ../../ref/models/relations.txt:21
# 9034462a06fd4f9086daf7b51d41ef98
msgid "In the above example, the methods below will be available on the manager ``reporter.article_set``."
msgstr ""

#: ../../ref/models/relations.txt:24
# 85c918408b6844159efaba69cdfce62d
msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation::"
msgstr ""

#: ../../ref/models/relations.txt:32
# 84a4518c6a5845aca3b4531dc9d6e23d
msgid "In this example, the methods below will be available both on ``topping.pizza_set`` and on ``pizza.toppings``."
msgstr ""

#: ../../ref/models/relations.txt:35
# d908e55f6d744011b53bd0da23f60226
msgid "These related managers have some extra methods:"
msgstr ""

#: ../../ref/models/relations.txt:39
# 5e275bc52f70418ca7b3ec8159ae04c8
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../ref/models/relations.txt:49
# 84cfc726d1914815933cdbe5aaeb2d47
msgid "Creates a new object, saves it and puts it in the related object set. Returns the newly created object::"
msgstr ""

#: ../../ref/models/relations.txt:61
# edae64ef9f8c4b30916eb8bc2df7e683
msgid "This is equivalent to (but much simpler than)::"
msgstr ""

#: ../../ref/models/relations.txt:72
# dd9e6cd551654f2abd07bbd96da293e2
msgid "Note that there's no need to specify the keyword argument of the model that defines the relationship. In the above example, we don't pass the parameter ``blog`` to ``create()``. Django figures out that the new ``Entry`` object's ``blog`` field should be set to ``b``."
msgstr ""

#: ../../ref/models/relations.txt:79
# ef7f013c481a42f1b4831f489c981cec
msgid "Removes the specified model objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:85
# ba01ec7119cf48aca9b621dba0fbc6de
msgid "In order to prevent database inconsistency, this method only exists on :class:`~django.db.models.ForeignKey` objects where ``null=True``. If the related field can't be set to ``None`` (``NULL``), then an object can't be removed from a relation without being added to another. In the above example, removing ``e`` from ``b.entry_set()`` is equivalent to doing ``e.blog = None``, and because the ``blog`` :class:`~django.db.models.ForeignKey` doesn't have ``null=True``, this is invalid."
msgstr ""

#: ../../ref/models/relations.txt:96
# e93c08ad2b0a425fa9031165fe6be6f5
msgid "Removes all objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:101
# 4b78e8ec18fd4896921840024c48c274
msgid "Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""

#: ../../ref/models/relations.txt:104
# d23f8d1a357d48e189c3542a80989472
msgid "Just like ``remove()``, ``clear()`` is only available on :class:`~django.db.models.ForeignKey`\\s where ``null=True``."
msgstr ""

#: ../../ref/request-response.txt:3
# b5205a61b98a437785ef16f442356519
msgid "Request and response objects"
msgstr ""

#: ../../ref/request-response.txt:9
# 80401595b392469a99c447a24c8d4ff1
msgid "Quick overview"
msgstr ""

#: ../../ref/request-response.txt:11
# a651085f698c42b58eeac85816291213
msgid "Django uses request and response objects to pass state through the system."
msgstr ""

#: ../../ref/request-response.txt:13
# d1b45fd2a62f418b85200a04f76733b1
msgid "When a page is requested, Django creates an :class:`HttpRequest` object that contains metadata about the request. Then Django loads the appropriate view, passing the :class:`HttpRequest` as the first argument to the view function. Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""

#: ../../ref/request-response.txt:18
# e6a241dd9a6741e8bcd7be3794d36c1e
msgid "This document explains the APIs for :class:`HttpRequest` and :class:`HttpResponse` objects."
msgstr ""

#: ../../ref/request-response.txt:22
# f173267a9a4b413f890acbe763ae5a0a
msgid "HttpRequest objects"
msgstr ""

#: ../../ref/request-response.txt:29
#: ../../ref/request-response.txt:332
#: ../../ref/request-response.txt:596
#: ../../ref/template-response.txt:32
# 79910dab239847ba8bdbf7bdbec032fb
# fabbb6c0ac654f5ba148622189f1de2c
# 25fba42386bb434a8ad7948ed4496a46
# 8b4ff32791854231be4401fa0bc9daf0
msgid "Attributes"
msgstr ""

#: ../../ref/request-response.txt:31
# ebcd56dbf029461b9853eec1b5643e1e
msgid "All attributes except ``session`` should be considered read-only."
msgstr ""

#: ../../ref/request-response.txt:37
# 565920f3f6cd4c9391f472a56176e2b0
msgid "Before Django 1.4, ``HttpRequest.body`` was named ``HttpRequest.raw_post_data``."
msgstr ""

#: ../../ref/request-response.txt:40
# c80dd73ebacd4399ba2512c7c64991bb
msgid "The raw HTTP request body as a byte string. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use ``HttpRequest.POST``."
msgstr ""

#: ../../ref/request-response.txt:46
# e5af95d49fca4d00aeddb7aaf7055ab9
msgid "You can also read from an HttpRequest using a file-like interface. See :meth:`HttpRequest.read()`."
msgstr ""

#: ../../ref/request-response.txt:51
# fd7f7ff7ad704a1582ae7238a3e80d9a
msgid "A string representing the full path to the requested page, not including the domain."
msgstr ""

#: ../../ref/request-response.txt:54
# 8853f9d1631448feb15b383a6c847842
msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr ""

#: ../../ref/request-response.txt:58
# 2a199331597b41f09a279de40434072b
msgid "Under some Web server configurations, the portion of the URL after the host name is split up into a script prefix portion and a path info portion (this happens, for example, when using the ``django.root`` option with the :doc:`modpython handler from Apache </howto/deployment/modpython>`). The ``path_info`` attribute always contains the path info portion of the path, no matter what Web server is being used. Using this instead of attr:`~HttpRequest.path` can make your code much easier to move between test and deployment servers."
msgstr ""

#: ../../ref/request-response.txt:67
# b95faea14fdb4ef0b3ee4f166c76d692
msgid "For example, if the ``django.root`` for your application is set to ``\"/minfo\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` and ``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""

#: ../../ref/request-response.txt:73
# b9affac8f5324701a9b01063326ccd1e
msgid "A string representing the HTTP method used in the request. This is guaranteed to be uppercase. Example::"
msgstr ""

#: ../../ref/request-response.txt:83
# 444528be25d64d50a71193cb42977b8f
msgid "A string representing the current encoding used to decode form submission data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is used). You can write to this attribute to change the encoding used when accessing the form data. Any subsequent attribute accesses (such as reading from ``GET`` or ``POST``) will use the new ``encoding`` value.  Useful if you know the form data is not in the :setting:`DEFAULT_CHARSET` encoding."
msgstr ""

#: ../../ref/request-response.txt:92
# 702627e5104d499a8db8d40fbfc2b3af
msgid "A dictionary-like object containing all given HTTP GET parameters. See the :class:`QueryDict` documentation below."
msgstr ""

#: ../../ref/request-response.txt:97
# 24f123111f324c73b7a9680afe81ce17
msgid "A dictionary-like object containing all given HTTP POST parameters. See the :class:`QueryDict` documentation below."
msgstr ""

#: ../../ref/request-response.txt:100
# 7cffbcd7540746beb268270d5048e70b
msgid "It's possible that a request can come in via POST with an empty ``POST`` dictionary -- if, say, a form is requested via the POST HTTP method but does not include form data. Therefore, you shouldn't use ``if request.POST`` to check for use of the POST method; instead, use ``if request.method == \"POST\"`` (see above)."
msgstr ""

#: ../../ref/request-response.txt:106
# ee047820a6d5455ea9d38eb80b5c6fa3
msgid "Note: ``POST`` does *not* include file-upload information. See ``FILES``."
msgstr ""

#: ../../ref/request-response.txt:110
# 44b84888e7104bedb260ff5b87f67e83
msgid "For convenience, a dictionary-like object that searches ``POST`` first, then ``GET``. Inspired by PHP's ``$_REQUEST``."
msgstr ""

#: ../../ref/request-response.txt:113
# 1b4bda2d2b104ed9ba431f298132512a
msgid "For example, if ``GET = {\"name\": \"john\"}`` and ``POST = {\"age\": '34'}``, ``REQUEST[\"name\"]`` would be ``\"john\"``, and ``REQUEST[\"age\"]`` would be ``\"34\"``."
msgstr ""

#: ../../ref/request-response.txt:117
# 8fbe159cdb51423381ae3a6c129a7e5a
msgid "It's strongly suggested that you use ``GET`` and ``POST`` instead of ``REQUEST``, because the former are more explicit."
msgstr ""

#: ../../ref/request-response.txt:122
# babd4565b70b4acca811f946c3f97d55
msgid "A standard Python dictionary containing all cookies. Keys and values are strings."
msgstr ""

#: ../../ref/request-response.txt:127
# d37402d86a0c40109d210a69bdd49d00
msgid "A dictionary-like object containing all uploaded files. Each key in ``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\" />``. Each value in ``FILES`` is an :class:`UploadedFile` as described below."
msgstr ""

#: ../../ref/request-response.txt:131
# a94b56f696de4090bcff055737f3766b
msgid "See :doc:`/topics/files` for more information."
msgstr ""

#: ../../ref/request-response.txt:133
# 1264af178c4141ee9d60d3d896e0119c
msgid "Note that ``FILES`` will only contain data if the request method was POST and the ``<form>`` that posted to the request had ``enctype=\"multipart/form-data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""

#: ../../ref/request-response.txt:140
# 215645f4c4174c27af1ba98c27ef7133
msgid "A standard Python dictionary containing all available HTTP headers. Available headers depend on the client and server, but here are some examples:"
msgstr ""

#: ../../ref/request-response.txt:144
# f74e7076a2944122981e2c1251ea1471
msgid "``CONTENT_LENGTH`` -- the length of the request body (as a string)."
msgstr ""

#: ../../ref/request-response.txt:145
# 6315835692af406a9fe9288e3148c66b
msgid "``CONTENT_TYPE`` -- the MIME type of the request body."
msgstr ""

#: ../../ref/request-response.txt:146
# 89d297dc2bdd463d95e87602d46845dd
msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr ""

#: ../../ref/request-response.txt:147
# 0857afbdd1074dedaee39d23c8c6657b
msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr ""

#: ../../ref/request-response.txt:148
# f51d00eac80b4d4598455654257a8fe4
msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr ""

#: ../../ref/request-response.txt:149
# 3b24a6b012c443bc890ee176c8ec677b
msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr ""

#: ../../ref/request-response.txt:150
# 3cbdbad5b9fc4d87a86aeec30f780145
msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr ""

#: ../../ref/request-response.txt:151
# 59bd0959225243d4bf551d7171ec86bd
msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr ""

#: ../../ref/request-response.txt:152
# 5c6442d7ecd24704a9c83a74c75818be
msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr ""

#: ../../ref/request-response.txt:153
# f4dd701c3f8e431ca05835d881cc2a04
msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr ""

#: ../../ref/request-response.txt:154
# 8de06b6cdee64d5d824e87e43cb087ec
msgid "``REMOTE_USER`` -- The user authenticated by the Web server, if any."
msgstr ""

#: ../../ref/request-response.txt:155
# a239e61514de4a50b9388743d8b4acf9
msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr ""

#: ../../ref/request-response.txt:156
# 87d84937ad074b559d0db7da50fe10d1
msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr ""

#: ../../ref/request-response.txt:157
# 3c47b9021d6940a8838827f72f6bd698
msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr ""

#: ../../ref/request-response.txt:159
# ffd623dbbbae4f8bbfd30b85135453ad
msgid "With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given above, any HTTP headers in the request are converted to ``META`` keys by converting all characters to uppercase, replacing any hyphens with underscores and adding an ``HTTP_`` prefix to the name. So, for example, a header called ``X-Bender`` would be mapped to the ``META`` key ``HTTP_X_BENDER``."
msgstr ""

#: ../../ref/request-response.txt:168
# 3d84612d4c5a4036ad909a8fb3691beb
msgid "A ``django.contrib.auth.models.User`` object representing the currently logged-in user. If the user isn't currently logged in, ``user`` will be set to an instance of ``django.contrib.auth.models.AnonymousUser``. You can tell them apart with ``is_authenticated()``, like so::"
msgstr ""

#: ../../ref/request-response.txt:178
# 475f8192d924499cbc0d490d4fc4957e
msgid "``user`` is only available if your Django installation has the ``AuthenticationMiddleware`` activated. For more, see :doc:`/topics/auth`."
msgstr ""

#: ../../ref/request-response.txt:184
# 3aac0a794adb4972b27a59101376c9a8
msgid "A readable-and-writable, dictionary-like object that represents the current session. This is only available if your Django installation has session support activated. See the :doc:`session documentation </topics/http/sessions>` for full details."
msgstr ""

#: ../../ref/request-response.txt:191
# b662bcbe2ac34df88975761c674f9abb
msgid "Not defined by Django itself, but will be read if other code (e.g., a custom middleware class) sets it. When present, this will be used as the root URLconf for the current request, overriding the :setting:`ROOT_URLCONF` setting. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/request-response.txt:197
#: ../../ref/request-response.txt:343
#: ../../ref/request-response.txt:371
#: ../../ref/request-response.txt:608
#: ../../ref/template-response.txt:59
#: ../../ref/template-response.txt:148
# bc6256dba995435fa2a1e42dc86714f0
# b8674ce3063d41449d6bf54a344ef190
# fc29cb5848cd49c49df5824f0ca909e1
# ae6cba7ab73544a89a6f765da14cdc5a
# c6819d53e5f44db1b1d130469e9a68e9
# b4fc61b5b9984f6bad5299adf832b8dc
msgid "Methods"
msgstr ""

#: ../../ref/request-response.txt:201
# b9afebddcb6547ad9d85cd0330786cbf
msgid "Returns the originating host of the request using information from the ``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed in :pep:`3333`."
msgstr ""

#: ../../ref/request-response.txt:207
# afffc7b20ad3485e82c532b36ca8d0f9
msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr ""

#: ../../ref/request-response.txt:209
# 90b44d720f80442bb5dbed80304106c1
msgid "The :meth:`~HttpRequest.get_host()` method fails when the host is behind multiple proxies. One solution is to use middleware to rewrite the proxy headers, as in the following example::"
msgstr ""

#: ../../ref/request-response.txt:231
# bffbda9ace054ac2a010306483ffc3a6
msgid "This middleware should be positioned before any other middleware that relies on the value of :meth:`~HttpRequest.get_host()` -- for instance, :class:`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware.csrf.CsrfViewMiddleware`."
msgstr ""

#: ../../ref/request-response.txt:238
# 03314f9c58184a778410e667b74cde36
msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr ""

#: ../../ref/request-response.txt:240
# 3ad7c13715e14cefba40bb448d0e3976
msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:244
# c33af08c1adf439e8e07f742015dabf7
msgid "Returns the absolute URI form of ``location``. If no location is provided, the location will be set to ``request.get_full_path()``."
msgstr ""

#: ../../ref/request-response.txt:247
# 36d32bb6deb64f228a5d1e3a936179c7
msgid "If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request."
msgstr ""

#: ../../ref/request-response.txt:251
# 3c40daff9a06420795e8a7d5f675f0d5
msgid "Example: ``\"http://example.com/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:257
# 0a1056dcf44e48ca9d9089f59ed8b7b7
msgid "Returns a cookie value for a signed cookie, or raises a :class:`~django.core.signing.BadSignature` exception if the signature is no longer valid. If you provide the ``default`` argument the exception will be suppressed and that default value will be returned instead."
msgstr ""

#: ../../ref/request-response.txt:262
# e737de1497f747bebfb12dd76f1a1b0d
msgid "The optional ``salt`` argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the ``max_age`` argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""

#: ../../ref/request-response.txt:288
# c6556681e85f46e186c1d05c9e6c819d
msgid "See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""

#: ../../ref/request-response.txt:292
# 29e8126bdfea4389bac1238068aa1bd8
msgid "Returns ``True`` if the request is secure; that is, if it was made with HTTPS."
msgstr ""

#: ../../ref/request-response.txt:297
# bc4b0eaac2a04c67bdbf2a4ad1b03a98
msgid "Returns ``True`` if the request was made via an ``XMLHttpRequest``, by checking the ``HTTP_X_REQUESTED_WITH`` header for the string ``'XMLHttpRequest'``. Most modern JavaScript libraries send this header. If you write your own XMLHttpRequest call (on the browser side), you'll have to set this header manually if you want ``is_ajax()`` to work."
msgstr ""

#: ../../ref/request-response.txt:311
# 8f3e23976abe41ae897000a9708ed9ec
msgid "Methods implementing a file-like interface for reading from an HttpRequest instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with iterative parser without constructing a whole XML tree in memory."
msgstr ""

#: ../../ref/request-response.txt:317
# dc5641a5cd4a45eb8411cd036040c738
msgid "Given this standard interface, an HttpRequest instance can be passed directly to an XML parser such as ElementTree::"
msgstr ""

#: ../../ref/request-response.txt:326
# a8cc0dfa4a61476ea3ec1a2f6d75bc00
msgid "UploadedFile objects"
msgstr ""

#: ../../ref/request-response.txt:336
# 094e88a500314511bcdade0306a52caf
msgid "The name of the uploaded file."
msgstr ""

#: ../../ref/request-response.txt:340
# 43d5cafdf6454435ba0225efec9b0b83
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../ref/request-response.txt:347
# 14348ce075284e36b0e09154071427a8
msgid "Returns a generator that yields sequential chunks of data."
msgstr ""

#: ../../ref/request-response.txt:351
# 4d8c0e078a594aa2b452c26599e60afa
msgid "Read a number of bytes from the file."
msgstr ""

#: ../../ref/request-response.txt:356
# cdc5f064de6a46d181e6f504c5c76e9e
msgid "QueryDict objects"
msgstr ""

#: ../../ref/request-response.txt:360
# b1a1e90cde1c4a75b23f8e03431f4c8e
msgid "In an :class:`HttpRequest` object, the ``GET`` and ``POST`` attributes are instances of ``django.http.QueryDict``. :class:`QueryDict` is a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably ``<select multiple=\"multiple\">``, pass multiple values for the same key."
msgstr ""

#: ../../ref/request-response.txt:366
# 91921a14880b4964a02a3c6c62873249
msgid "``QueryDict`` instances are immutable, unless you create a ``copy()`` of them. That means you can't change attributes of ``request.POST`` and ``request.GET`` directly."
msgstr ""

#: ../../ref/request-response.txt:373
# 89e3bf8923d24e1197adfd6a5094733f
msgid ":class:`QueryDict` implements all the standard dictionary methods, because it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""

#: ../../ref/request-response.txt:378
# 0b7d0d3099354547a800e04c46015474
msgid "Returns the value for the given key. If the key has more than one value, ``__getitem__()`` returns the last value. Raises ``django.utils.datastructures.MultiValueDictKeyError`` if the key does not exist. (This is a subclass of Python's standard ``KeyError``, so you can stick to catching ``KeyError``.)"
msgstr ""

#: ../../ref/request-response.txt:386
# a4bce0192eff41aebddb4c143af88599
msgid "Sets the given key to ``[value]`` (a Python list whose single element is ``value``). Note that this, as other dictionary functions that have side effects, can only be called on a mutable ``QueryDict`` (one that was created via ``copy()``)."
msgstr ""

#: ../../ref/request-response.txt:393
# e29c3de687cb4df4a39b608da0dbd42f
msgid "Returns ``True`` if the given key is set. This lets you do, e.g., ``if \"foo\" in request.GET``."
msgstr ""

#: ../../ref/request-response.txt:398
# e12f9dc99039463d82a9712c5e84afb3
msgid "Uses the same logic as ``__getitem__()`` above, with a hook for returning a default value if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:403
# 898bb6a7fa324a67a7884cb117b5ef93
msgid "Just like the standard dictionary ``setdefault()`` method, except it uses ``__setitem__()`` internally."
msgstr ""

#: ../../ref/request-response.txt:408
# 8a70f1280a03477a8d8e51c483f742cb
msgid "Takes either a ``QueryDict`` or standard dictionary. Just like the standard dictionary ``update()`` method, except it *appends* to the current dictionary items rather than replacing them. For example::"
msgstr ""

#: ../../ref/request-response.txt:422
# 7c86974a4609429b9b7880a0e3573648
msgid "Just like the standard dictionary ``items()`` method, except this uses the same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:431
# 84d08c4973194cd99da92831a86e9178
msgid "Just like the standard dictionary ``iteritems()`` method. Like :meth:`QueryDict.items()` this uses the same last-value logic as :meth:`QueryDict.__getitem__()`."
msgstr ""

#: ../../ref/request-response.txt:437
# 1d3a8bea3ab04a74899a1397bd5430ed
msgid "Like :meth:`QueryDict.iteritems()` except it includes all values, as a list, for each member of the dictionary."
msgstr ""

#: ../../ref/request-response.txt:442
# bd74940049c743f7a032650c405860d2
msgid "Just like the standard dictionary ``values()`` method, except this uses the same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:451
# 3f91b952914e4b3fb8d94e80350cc6f9
msgid "Just like :meth:`QueryDict.values()`, except an iterator."
msgstr ""

#: ../../ref/request-response.txt:453
# f826c0798cd24786acaca610310f781a
msgid "In addition, ``QueryDict`` has the following methods:"
msgstr ""

#: ../../ref/request-response.txt:457
# faf6370fc77b449590c9aee662ad7826
msgid "Returns a copy of the object, using ``copy.deepcopy()`` from the Python standard library. The copy will be mutable -- that is, you can change its values."
msgstr ""

#: ../../ref/request-response.txt:463
# 174fca55c5074fda9e8d5e347bbc21c5
msgid "Returns the data with the requested key, as a Python list. Returns an empty list if the key doesn't exist and no default value was provided. It's guaranteed to return a list of some sort unless the default value was no list."
msgstr ""

#: ../../ref/request-response.txt:473
# d216abfe7a4e4c25800007e25f7d6cf3
msgid "Sets the given key to ``list_`` (unlike ``__setitem__()``)."
msgstr ""

#: ../../ref/request-response.txt:477
# 940caeb6e9084957bb322e80c6ec6829
msgid "Appends an item to the internal list associated with key."
msgstr ""

#: ../../ref/request-response.txt:481
# c41f4babb345477e81a10c7c057b5eb9
msgid "Just like ``setdefault``, except it takes a list of values instead of a single value."
msgstr ""

#: ../../ref/request-response.txt:486
# ccfddf0dc94d48a6bc87f62f95b5a252
msgid "Like :meth:`items()`, except it includes all values, as a list, for each member of the dictionary. For example::"
msgstr ""

#: ../../ref/request-response.txt:497
# e6dfef96430b4bd2af5de19203c741ba
msgid "Returns ``dict`` representation of ``QueryDict``. For every (key, list) pair in ``QueryDict``, ``dict`` will have (key, item), where item is one element of the list, using same logic as :meth:`QueryDict.__getitem__()`::"
msgstr ""

#: ../../ref/request-response.txt:507
# 26a4c1b1c24e4f51b2ee1fae3fc323cb
msgid "Returns a string of the data in query-string format. Example::"
msgstr ""

#: ../../ref/request-response.txt:516
# 700009faa59743f1b8d78e717f8a8cd7
msgid "Optionally, urlencode can be passed characters which do not require encoding. For example::"
msgstr ""

#: ../../ref/request-response.txt:525
# c0032110d8eb4087b9b574ffa43b1342
msgid "HttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:529
# f1a704aeeab1471c8481d37ab465cb1f
msgid "In contrast to :class:`HttpRequest` objects, which are created automatically by Django, :class:`HttpResponse` objects are your responsibility. Each view you write is responsible for instantiating, populating and returning an :class:`HttpResponse`."
msgstr ""

#: ../../ref/request-response.txt:534
# ec00e3937282470f8ad8ede246403460
msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ""

#: ../../ref/request-response.txt:540
# b96eeec230de4078a6f933b0157c303e
msgid "Passing strings"
msgstr ""

#: ../../ref/request-response.txt:542
# 30719eb20e8f44dfb067b1bdfc837c82
msgid "Typical usage is to pass the contents of the page, as a string, to the :class:`HttpResponse` constructor::"
msgstr ""

#: ../../ref/request-response.txt:549
# f7ddf25cd2014369b8b9da3a0c6fef92
msgid "But if you want to add content incrementally, you can use ``response`` as a file-like object::"
msgstr ""

#: ../../ref/request-response.txt:557
# 7a05e700c8ef40c584acc4e8e0d24888
msgid "Passing iterators"
msgstr ""

#: ../../ref/request-response.txt:559
# db2c0e796cc242f389c2c8c0ce2bb5f1
msgid "Finally, you can pass ``HttpResponse`` an iterator rather than passing it hard-coded strings. If you use this technique, follow these guidelines:"
msgstr ""

#: ../../ref/request-response.txt:562
# 888903dca1d147779309da7f4c216e76
msgid "The iterator should return strings."
msgstr ""

#: ../../ref/request-response.txt:563
# ac0664a7372e4db4ab35eb1de62a7a84
msgid "If an :class:`HttpResponse` has been initialized with an iterator as its content, you can't use the :class:`HttpResponse` instance as a file-like object. Doing so will raise ``Exception``."
msgstr ""

#: ../../ref/request-response.txt:568
# 3a1c97338ca14b278250029b7561985c
msgid "Setting headers"
msgstr ""

#: ../../ref/request-response.txt:570
# 4b3cf0aba3b74080b619d13b4fa1d899
msgid "To set or remove a header in your response, treat it like a dictionary::"
msgstr ""

#: ../../ref/request-response.txt:576
# ae8b05d7fe924b47b33ae79370cc326e
msgid "Note that unlike a dictionary, ``del`` doesn't raise ``KeyError`` if the header doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:579
# 347181817476466fb95cebe1bc34d69e
msgid "HTTP headers cannot contain newlines. An attempt to set a header containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""

#: ../../ref/request-response.txt:583
# 3c3df8052eff4a1ba307845ebf479fee
msgid "Telling the browser to treat the response as a file attachment"
msgstr ""

#: ../../ref/request-response.txt:585
# 0e91a7156209430da2a9e932b52ba8d8
msgid "To tell the browser to treat the response as a file attachment, use the ``content_type`` argument and set the ``Content-Disposition`` header. For example, this is how you might return a Microsoft Excel spreadsheet::"
msgstr ""

#: ../../ref/request-response.txt:592
# 00f125849f224744a83531ba0a1f663c
msgid "There's nothing Django-specific about the ``Content-Disposition`` header, but it's easy to forget the syntax, so we've included it here."
msgstr ""

#: ../../ref/request-response.txt:600
# 4eba78647c30413ba473409b781637d0
msgid "A string representing the content, encoded from a Unicode object if necessary."
msgstr ""

#: ../../ref/request-response.txt:605
# 4f50c70060e14029aadd6a2b619a95b4
msgid "The `HTTP Status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:612
# 14359d0367d149eba4b7e6e404825f35
msgid "Instantiates an ``HttpResponse`` object with the given page content (a string) and MIME type. The :setting:`DEFAULT_CONTENT_TYPE` is ``'text/html'``."
msgstr ""

#: ../../ref/request-response.txt:616
# 2402a61de1ff487ca2cb6cea38748f39
msgid "``content`` should be an iterator or a string. If it's an iterator, it should return strings, and those strings will be joined together to form the content of the response. If it is not an iterator or a string, it will be converted to a string when accessed."
msgstr ""

#: ../../ref/request-response.txt:622
# e9088d0ab38545d6b3b46afe13fdad15
msgid "``status`` is the `HTTP Status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:624
# 5e64e459254d447bb4bd4dcaf8bfbd11
msgid "``content_type`` is an alias for ``mimetype``. Historically, this parameter was only called ``mimetype``, but since this is actually the value included in the HTTP ``Content-Type`` header, it can also include the character set encoding, which makes it more than just a MIME type specification. If ``mimetype`` is specified (not ``None``), that value is used. Otherwise, ``content_type`` is used. If neither is given, the :setting:`DEFAULT_CONTENT_TYPE` setting is used."
msgstr ""

#: ../../ref/request-response.txt:634
# 14a1dff9b4fd44508ce77794da5850d7
msgid "Sets the given header name to the given value. Both ``header`` and ``value`` should be strings."
msgstr ""

#: ../../ref/request-response.txt:639
# 7cb8c096a1c249828ad97d7f93ff8f30
msgid "Deletes the header with the given name. Fails silently if the header doesn't exist. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:644
# b6daf63902d747c9bcdecbb1efdc05da
msgid "Returns the value for the given header name. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:648
# 8a550e79034149d2b62f60555e575001
msgid "Returns ``True`` or ``False`` based on a case-insensitive check for a header with the given name."
msgstr ""

#: ../../ref/request-response.txt:655
# 1eae0738be1b4a67b8db7f8953827b5f
msgid "The possibility of specifying a ``datetime.datetime`` object in ``expires``, and the auto-calculation of ``max_age`` in such case was added. The ``httponly`` argument was also added."
msgstr ""

#: ../../ref/request-response.txt:661
# a65537323af44e8f99454b13073d572c
msgid "The default value for httponly was changed from ``False`` to ``True``."
msgstr ""

#: ../../ref/request-response.txt:663
# a77503b9adf346998b7791da5901dc60
msgid "Sets a cookie. The parameters are the same as in the :class:`Cookie.Morsel` object in the Python standard library."
msgstr ""

#: ../../ref/request-response.txt:666
# 436d0447ae26482d8c56c6bf05fa3b02
msgid "``max_age`` should be a number of seconds, or ``None`` (default) if the cookie should last only as long as the client's browser session. If ``expires`` is not specified, it will be calculated."
msgstr ""

#: ../../ref/request-response.txt:669
# d208788869e8452dad9852ba8ebf37c7
msgid "``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a ``datetime`` object, the ``max_age`` will be calculated."
msgstr ""

#: ../../ref/request-response.txt:673
# ff3501c3cc1447a1a267a315bb3f6a3d
msgid "Use ``domain`` if you want to set a cross-domain cookie. For example, ``domain=\".lawrence.com\"`` will set a cookie that is readable by the domains www.lawrence.com, blogs.lawrence.com and calendars.lawrence.com. Otherwise, a cookie will only be readable by the domain that set it."
msgstr ""

#: ../../ref/request-response.txt:678
# 264b838fb6074c8bb60fd44a2aebd17f
msgid "Use ``httponly=True`` if you want to prevent client-side JavaScript from having access to the cookie."
msgstr ""

#: ../../ref/request-response.txt:681
#: ../../ref/settings.txt:1720
# b4f90210a79d4d3eb5b3fcdde780fb7a
# 1d174f423018466885424f48bd466d04
msgid "HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not part of the :rfc:`2109` standard for cookies, and it isn't honored consistently by all browsers. However, when it is honored, it can be a useful way to mitigate the risk of client side script accessing the protected cookie data."
msgstr ""

#: ../../ref/request-response.txt:694
# 906a5a2ee43e4f089e4b56431dd1cdf1
msgid "Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </topics/signing>` the cookie before setting it. Use in conjunction with :meth:`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument for added key strength, but you will need to remember to pass it to the corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""

#: ../../ref/request-response.txt:703
# 1f84614f137e443b8845259dcd9b20ff
msgid "Deletes the cookie with the given key. Fails silently if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:706
# 016085886bc0415a92e794ff4a429139
msgid "Due to the way cookies work, ``path`` and ``domain`` should be the same values you used in ``set_cookie()`` -- otherwise the cookie may not be deleted."
msgstr ""

#: ../../ref/request-response.txt:712
#: ../../ref/request-response.txt:716
#: ../../ref/request-response.txt:720
# 3567b432432447aeaa90dfa064eed77d
# 388269abc00641c3b95a4c3881faf136
# 977216283fe347a0b3fb002f399b3ec8
msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr ""

#: ../../ref/request-response.txt:728
# 11a9781b34bb41e69b2775352bc309eb
msgid "HttpResponse subclasses"
msgstr ""

#: ../../ref/request-response.txt:730
# fa111e4c2f304258b5b36955066fc866
msgid "Django includes a number of ``HttpResponse`` subclasses that handle different types of HTTP responses. Like ``HttpResponse``, these subclasses live in :mod:`django.http`."
msgstr ""

#: ../../ref/request-response.txt:736
# 99196c7a49e44ca9925f6243f0659ccf
msgid "The constructor takes a single argument -- the path to redirect to. This can be a fully qualified URL (e.g. ``'http://www.yahoo.com/search/'``) or an absolute path with no domain (e.g. ``'/search/'``). Note that this returns an HTTP status code 302."
msgstr ""

#: ../../ref/request-response.txt:743
# f27d10fd6de946a794f8071e48b41cea
msgid "Like :class:`HttpResponseRedirect`, but it returns a permanent redirect (HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""

#: ../../ref/request-response.txt:748
# 9821f00683174d629c778bfc56f66e82
msgid "The constructor doesn't take any arguments. Use this to designate that a page hasn't been modified since the user's last request (status code 304)."
msgstr ""

#: ../../ref/request-response.txt:753
# ca072458702e471795d1c5cb2e54ad3a
msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr ""

#: ../../ref/request-response.txt:757
# 7f4f475b95f54a23828a6c4aca627811
msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr ""

#: ../../ref/request-response.txt:761
# bd1d3865d9a443d6a51f609d08c80648
msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr ""

#: ../../ref/request-response.txt:765
# 447f27c2251044c38bdfa4920dd0591d
msgid "Like :class:`HttpResponse`, but uses a 405 status code. Takes a single, required argument: a list of permitted methods (e.g. ``['GET', 'POST']``)."
msgstr ""

#: ../../ref/request-response.txt:770
# 04f3f199875e4344a397a58825a61652
msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr ""

#: ../../ref/request-response.txt:774
# 753968f7d01847cd89620b9fef76f4f2
msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr ""

#: ../../ref/request-response.txt:778
# 0894e103524c4592a1bca2ab717dcde7
msgid "If a custom subclass of :class:`HttpResponse` implements a ``render`` method, Django will treat it as emulating a :class:`~django.template.response.SimpleTemplateResponse`, and the ``render`` method must itself return a valid response object."
msgstr ""

#: ../../ref/settings.txt:11
# 1bd47adcfe7a46d890cc739a54ba3094
msgid "Be careful when you override settings, especially when the default value is a non-empty tuple or dictionary, such as :setting:`MIDDLEWARE_CLASSES` and :setting:`TEMPLATE_CONTEXT_PROCESSORS`. Make sure you keep the components required by the features of Django you wish to use."
msgstr ""

#: ../../ref/settings.txt:17
# a371d9b1b12b49d49d3f4e34cebe309f
msgid "Available settings"
msgstr ""

#: ../../ref/settings.txt:19
# bd3a37cdb63c4a5cbffb2fbda4e5568e
msgid "Here's a full list of all available settings, in alphabetical order, and their default values."
msgstr ""

#: ../../ref/settings.txt:25
# 04357b9beb3545238f4431ea509fbf1f
msgid "ABSOLUTE_URL_OVERRIDES"
msgstr ""

#: ../../ref/settings.txt:27
#: ../../ref/settings.txt:391
#: ../../ref/settings.txt:478
# a58926005d694a30a9952a29d84839bf
# 12385f177d974457b0c4053d37beac62
# 8eb162ae76c24535b95afd973e65c157
msgid "Default: ``{}`` (Empty dictionary)"
msgstr ""

#: ../../ref/settings.txt:29
# 407791aebd974ef3a042807f15e96ff8
msgid "A dictionary mapping ``\"app_label.model_name\"`` strings to functions that take a model object and return its URL. This is a way of overriding ``get_absolute_url()`` methods on a per-installation basis. Example::"
msgstr ""

#: ../../ref/settings.txt:38
# bc32021f0e144ea19747a044b7fe5a8c
msgid "Note that the model name used in this setting should be all lower-case, regardless of the case of the actual model class name."
msgstr ""

#: ../../ref/settings.txt:44
# cd91da353e8a4f6d8bc36ae5bb908efd
msgid "ADMIN_FOR"
msgstr ""

#: ../../ref/settings.txt:46
#: ../../ref/settings.txt:59
#: ../../ref/settings.txt:76
#: ../../ref/settings.txt:917
#: ../../ref/settings.txt:1106
#: ../../ref/settings.txt:1180
#: ../../ref/settings.txt:1200
#: ../../ref/settings.txt:1279
#: ../../ref/settings.txt:1392
#: ../../ref/settings.txt:1551
#: ../../ref/settings.txt:1983
# 297e924859be4dc5b6df8116550446e7
# 632397ee017d486881a394d397872e09
# 57f37e2d356847c1a27dd1a4bb455093
# a376bdee32a14c8f887b5f3a8e287da3
# 953bf2d87f734383b98ce92ff541fa57
# 471df2de0141471288b2aef7f7835b59
# 1d12834e37164b2aae9d8291a6e8cc3a
# 263d69c26f884d20895611d5ea030ee3
# aae54e7a448747639c161a4a5b2e9a13
# 67f1b754b24b4a0cb3de0772b9b55b73
# afbc88d001e147ccbafa5a6e0ecd95fa
msgid "Default: ``()`` (Empty tuple)"
msgstr ""

#: ../../ref/settings.txt:48
# f82f75addb3c42e2a703d1cba028fc11
msgid "Used for admin-site settings modules, this should be a tuple of settings modules (in the format ``'foo.bar.baz'``) for which this site is an admin."
msgstr ""

#: ../../ref/settings.txt:51
# 5535c376555541f7ae64e054fcaf1dd9
msgid "The admin site uses this in its automatically-introspected documentation of models, views and template tags."
msgstr ""

#: ../../ref/settings.txt:57
# d115ee6543ac43a7a2af4f60878ca065
msgid "ADMINS"
msgstr ""

#: ../../ref/settings.txt:61
# b06f3409017e4c1a93c1688390d4964e
msgid "A tuple that lists people who get code error notifications. When ``DEBUG=False`` and a view raises an exception, Django will email these people with the full exception information. Each member of the tuple should be a tuple of (Full name, email address). Example::"
msgstr ""

#: ../../ref/settings.txt:68
# 68c9bca1e924447f9deb970fe555eb29
msgid "Note that Django will email *all* of these people whenever an error happens. See :doc:`/howto/error-reporting` for more information."
msgstr ""

#: ../../ref/settings.txt:74
# 811c3f65f27f481d9491aa0fffa4901c
msgid "ALLOWED_INCLUDE_ROOTS"
msgstr ""

#: ../../ref/settings.txt:78
# 9068cd8ce5bc4f2bb197f956daf92b67
msgid "A tuple of strings representing allowed prefixes for the ``{% ssi %}`` template tag. This is a security measure, so that template authors can't access files that they shouldn't be accessing."
msgstr ""

#: ../../ref/settings.txt:82
# bdbf2d6dd4a14ee3b1610d79e3d71503
msgid "For example, if :setting:`ALLOWED_INCLUDE_ROOTS` is ``('/home/html', '/var/www')``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% ssi /etc/passwd %}`` wouldn't."
msgstr ""

#: ../../ref/settings.txt:89
# 238a10a5756b4d20875d164b80c222c2
msgid "APPEND_SLASH"
msgstr ""

#: ../../ref/settings.txt:91
#: ../../ref/settings.txt:595
#: ../../ref/settings.txt:619
#: ../../ref/settings.txt:2178
# 3061aa75f2a2451c980be54494bcb2ad
# d32e4df7856943ffa12a0ff6283cdb73
# 9e420d02a8d34a95b1aa4396549fb967
# 6e6bf6152c484b47ac41a9bb1c4adad4
msgid "Default: ``True``"
msgstr ""

#: ../../ref/settings.txt:93
# d21f51ac4be64587a0f77fdf4df9db09
msgid "When set to ``True``, if the request URL does not match any of the patterns in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to the same URL with a slash appended. Note that the redirect may cause any data submitted in a POST request to be lost."
msgstr ""

#: ../../ref/settings.txt:98
# dfa34b3a704144f1a41c53f900c00568
msgid "The :setting:`APPEND_SLASH` setting is only used if :class:`~django.middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/middleware`). See also :setting:`PREPEND_WWW`."
msgstr ""

#: ../../ref/settings.txt:105
# 22bf2b92f2ca4e088f67c4c52dd08de4
msgid "AUTHENTICATION_BACKENDS"
msgstr ""

#: ../../ref/settings.txt:107
# 205d0f756b9443f591f48b2bcd2558a4
msgid "Default: ``('django.contrib.auth.backends.ModelBackend',)``"
msgstr ""

#: ../../ref/settings.txt:109
# 02e9befb1a16496db72bd51221ccdcc9
msgid "A tuple of authentication backend classes (as strings) to use when attempting to authenticate a user. See the :doc:`authentication backends documentation </ref/authbackends>` for details."
msgstr ""

#: ../../ref/settings.txt:116
# 577a4f263b4245db81eb0c7f2d5f8671
msgid "AUTH_PROFILE_MODULE"
msgstr ""

#: ../../ref/settings.txt:118
#: ../../ref/settings.txt:943
#: ../../ref/settings.txt:1575
#: ../../ref/settings.txt:1864
# 62095106d7c34608975250a8bf810617
# 5ae5ecfee2b54362beba6e4d22fe40d9
# f849498b453c47bc9cb4bbd5d3516d7c
# a091d83a55a64da7a300258c8a7987ae
msgid "Default: Not defined"
msgstr ""

#: ../../ref/settings.txt:120
# 4156db4381bc4f5c965f941ad94b4331
msgid "The site-specific user profile model used by this site. See :ref:`auth-profiles`."
msgstr ""

#: ../../ref/settings.txt:126
# 15f0064143f04b5081f15fc90c7df2c8
msgid "CACHES"
msgstr ""

#: ../../ref/settings.txt:138
# 9354b13af2d34032ad2a865f1326feeb
msgid "A dictionary containing the settings for all caches to be used with Django. It is a nested dictionary whose contents maps cache aliases to a dictionary containing the options for an individual cache."
msgstr ""

#: ../../ref/settings.txt:142
# b12eb39488354f40867c136541992390
msgid "The :setting:`CACHES` setting must configure a ``default`` cache; any number of additional caches may also be specified. If you are using a cache backend other than the local memory cache, or you need to define multiple caches, other options will be required. The following cache options are available."
msgstr ""

#: ../../ref/settings.txt:151
# 31ce89d8cead4981b755a7e842d04548
msgid "BACKEND"
msgstr ""

#: ../../ref/settings.txt:153
#: ../../ref/settings.txt:198
#: ../../ref/settings.txt:210
#: ../../ref/settings.txt:287
#: ../../ref/settings.txt:418
#: ../../ref/settings.txt:444
#: ../../ref/settings.txt:467
#: ../../ref/settings.txt:492
#: ../../ref/settings.txt:501
#: ../../ref/settings.txt:511
#: ../../ref/settings.txt:897
#: ../../ref/settings.txt:907
#: ../../ref/settings.txt:963
#: ../../ref/settings.txt:977
#: ../../ref/settings.txt:1402
#: ../../ref/settings.txt:1416
#: ../../ref/settings.txt:1587
#: ../../ref/settings.txt:1879
#: ../../ref/settings.txt:2019
# e441a46f640648b296d41e260c45f546
# 2dc6589de0134b66a870dbd1b0fe431f
# 5b170b5f27c8462eb77404e9ab2583b2
# 4d498837122b4ac99678363aa53f3b83
# 706dcff91e45455db4c55c77b3604800
# 741d07cee92a4a1987a358de49c942e3
# 99ef7d8be86b4e46ab45d0d80ff9b2c0
# b9c3ff888ab244b8939f7216aa0bf12f
# 411e1c19089f45bf8f2d9560eb7d5f73
# 228bbac4f3794e319a4ed6849df65422
# 08adf6f9e06f409fb2cee9840489b87d
# 17a6fe22035b4d76b3393dd80279ce4f
# b3af27674f854c44b2e36f6ba7a51450
# b63c23fd043b47e0acd48fa675fab5a4
# 83e8965553a740b198b05f7f9d93b19b
# 6a72526e1664416f9f3d16e6a3462bf6
# 6da2d21ce1e54064bb4bdb1808649f88
# c30ccce0ec024272a868c1a79553b46a
# 2213a4b89b894be7b3f4b4e574744b83
msgid "Default: ``''`` (Empty string)"
msgstr ""

#: ../../ref/settings.txt:155
# 08ec74dd4c304e888b6de244b2493da4
msgid "The cache backend to use. The built-in cache backends are:"
msgstr ""

#: ../../ref/settings.txt:157
# 3fdaab42c2fc4d6ea366a28886b537a8
msgid "``'django.core.cache.backends.db.DatabaseCache'``"
msgstr ""

#: ../../ref/settings.txt:158
# a3fd30c48a75429fbb73d4ee9dbd2b98
msgid "``'django.core.cache.backends.dummy.DummyCache'``"
msgstr ""

#: ../../ref/settings.txt:159
# 21af14c295524b899e1d3df1af778b1f
msgid "``'django.core.cache.backends.filebased.FileBasedCache'``"
msgstr ""

#: ../../ref/settings.txt:160
# 77dee994b86b4d748f48259919a6d641
msgid "``'django.core.cache.backends.locmem.LocMemCache'``"
msgstr ""

#: ../../ref/settings.txt:161
# 476a7df550bd4dd9918da721e0cdc2d0
msgid "``'django.core.cache.backends.memcached.MemcachedCache'``"
msgstr ""

#: ../../ref/settings.txt:162
# 8844ebdb33df40c18e127ee9fb05012b
msgid "``'django.core.cache.backends.memcached.PyLibMCCache'``"
msgstr ""

#: ../../ref/settings.txt:164
# 8a71d5fe46384918902c3065d1d511cd
msgid "You can use a cache backend that doesn't ship with Django by setting :setting:`BACKEND <CACHE-BACKEND>` to a fully-qualified path of a cache backend class (i.e. ``mypackage.backends.whatever.WhateverCache``). Writing a whole new cache backend from scratch is left as an exercise to the reader; see the other backends for examples."
msgstr ""

#: ../../ref/settings.txt:171
# 298eb05c8d614201a0880166639d3dae
msgid "Prior to Django 1.3, you could use a URI based version of the backend name to reference the built-in cache backends (e.g., you could use ``'db://tablename'`` to refer to the database backend). This format has been deprecated, and will be removed in Django 1.5."
msgstr ""

#: ../../ref/settings.txt:179
# 7092097f74af4617948c54f04e6030b5
msgid "KEY_FUNCTION"
msgstr ""

#: ../../ref/settings.txt:181
# 0a1877c3951f45f98ab9f39bf406398a
msgid "A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key. The default implementation is equivalent to the function::"
msgstr ""

#: ../../ref/settings.txt:188
# bea77f199d8c4c53a1997939d4e3e031
msgid "You may use any key function you want, as long as it has the same argument signature."
msgstr ""

#: ../../ref/settings.txt:191
# eb5b5d5c5d6743be8255667ddb415b9a
msgid "See the :ref:`cache documentation <cache_key_transformation>` for more information."
msgstr ""

#: ../../ref/settings.txt:196
# 209ec9db6bf2448298f89945cf028ee5
msgid "KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:200
# 23e7581c9ac64a17a03a3d5b8d46e0b0
msgid "A string that will be automatically included (prepended by default) to all cache keys used by the Django server."
msgstr ""

#: ../../ref/settings.txt:203
# 90b5d950996c4d098987120fa53ed1de
msgid "See the :ref:`cache documentation <cache_key_prefixing>` for more information."
msgstr ""

#: ../../ref/settings.txt:208
# a2801c67c1fb4d3d8a8adc13a709a747
msgid "LOCATION"
msgstr ""

#: ../../ref/settings.txt:212
# 0c663cb317d64085b1bebf28eb26bba5
msgid "The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or simply an identifying name for a local memory cache. e.g.::"
msgstr ""

#: ../../ref/settings.txt:226
#: ../../ref/settings.txt:476
# d8160f9a09c041ceb1ada65e2884dbec
# a0f40dbcec27428a82cd0660e66c73d6
msgid "OPTIONS"
msgstr ""

#: ../../ref/settings.txt:228
# 24ae4176bb47448cb7662513e9e3f950
msgid "Default: None"
msgstr ""

#: ../../ref/settings.txt:230
# 50ebe067dad64c6cbeccb672d8245453
msgid "Extra parameters to pass to the cache backend. Available parameters vary depending on your cache backend."
msgstr ""

#: ../../ref/settings.txt:233
# 304ad17d13b44898a155f94d0efab5d9
msgid "Some information on available parameters can be found in the :doc:`Cache Backends </topics/cache>` documentation. For more information, consult your backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:240
# a8c98b356f86482f910776a758abee3e
msgid "TIMEOUT"
msgstr ""

#: ../../ref/settings.txt:242
# 5292190cea7e447e865cbcf7b658347d
msgid "Default: 300"
msgstr ""

#: ../../ref/settings.txt:244
# b824f1b4f8584bf8a9ed7ed9a49fe238
msgid "The number of seconds before a cache entry is considered stale."
msgstr ""

#: ../../ref/settings.txt:249
# 1ef058fd74f84af1a9dd9cc8039aa31f
msgid "VERSION"
msgstr ""

#: ../../ref/settings.txt:251
# 49e26937e9d146fa9d114750e0855f56
msgid "Default: ``1``"
msgstr ""

#: ../../ref/settings.txt:253
# c81a865735e34f0fa35c2a31bf47e2d2
msgid "The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../ref/settings.txt:255
# a2615470b8cd444e96696369feab9504
msgid "See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../ref/settings.txt:260
# ddeac5f7252c4ef2967473031ad18974
msgid "CACHE_MIDDLEWARE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:262
# a114a35ee4b34e2aa5f1d90bbc7fce41
msgid "Default: ``default``"
msgstr ""

#: ../../ref/settings.txt:264
# 2030fe0283cb4b3ea4c3812dd2bf8794
msgid "The cache connection to use for the cache middleware."
msgstr ""

#: ../../ref/settings.txt:269
# ced2e7aee6be4144a9b16bd4d9f8cc0d
msgid "CACHE_MIDDLEWARE_ANONYMOUS_ONLY"
msgstr ""

#: ../../ref/settings.txt:273
# 68ec07d5a60a41e0ab5836a692b2f0e3
msgid "If the value of this setting is ``True``, only anonymous requests (i.e., not those made by a logged-in user) will be cached.  Otherwise, the middleware caches every page that doesn't have GET or POST parameters."
msgstr ""

#: ../../ref/settings.txt:277
# 4115d9c3078044c2bb6cd10f0caf1966
msgid "If you set the value of this setting to ``True``, you should make sure you've activated ``AuthenticationMiddleware``."
msgstr ""

#: ../../ref/settings.txt:280
#: ../../ref/settings.txt:291
#: ../../ref/settings.txt:303
# b92ebc3555654565a70bff6714482d86
# 56e968bd4f1542eeb7da898ad7700438
# f6a498da08194ea8aa537fbeb2e52722
msgid "See :doc:`/topics/cache`."
msgstr ""

#: ../../ref/settings.txt:285
# b145f28bf16b440db2ff6a30006e2b07
msgid "CACHE_MIDDLEWARE_KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:289
# aa0432b883dc4f35b33c29c5d5166f27
msgid "The cache key prefix that the cache middleware should use."
msgstr ""

#: ../../ref/settings.txt:296
# e959580718064b70af0ef6e3a553de00
msgid "CACHE_MIDDLEWARE_SECONDS"
msgstr ""

#: ../../ref/settings.txt:298
# 7bc1a6c7a2d44ac0a1c79a6b91127959
msgid "Default: ``600``"
msgstr ""

#: ../../ref/settings.txt:300
# 3ccd65d684fe4d9daef455972f3ba202
msgid "The default number of seconds to cache a page when the caching middleware or ``cache_page()`` decorator is used."
msgstr ""

#: ../../ref/settings.txt:314
# 18b52a3600c84583be69c4d414de37e3
msgid "The domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as ``\".lawrence.com\"`` to allow a POST request from a form on one subdomain to be accepted by accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/settings.txt:320
# f92a121735524b26b4e1c7058a850c53
msgid "Please note that the presence of this setting does not imply that Django's CSRF protection is safe from cross-subdomain attacks by default - please see the :ref:`CSRF limitations <csrf-limitations>` section."
msgstr ""

#: ../../ref/settings.txt:333
# 26868283979544dcbfc23a3fd4f4c0bf
msgid "The name of the cookie to use for the CSRF authentication token. This can be whatever you want.  See :doc:`/ref/contrib/csrf`."
msgstr ""

#: ../../ref/settings.txt:379
# 58001bf16c8b4c72961d1515583a32af
msgid "where ``reason`` is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected.  See :doc:`/ref/contrib/csrf`."
msgstr ""

#: ../../ref/settings.txt:387
# 0036a56a299f427a91bc693c6683d757
msgid "DATABASES"
msgstr ""

#: ../../ref/settings.txt:393
# 9898fe87152e415d9c5272677f2c3597
msgid "A dictionary containing the settings for all databases to be used with Django. It is a nested dictionary whose contents maps database aliases to a dictionary containing the options for an individual database."
msgstr ""

#: ../../ref/settings.txt:397
# 509fb595cf674af192fbde5f41fb4da8
msgid "The :setting:`DATABASES` setting must configure a ``default`` database; any number of additional databases may also be specified."
msgstr ""

#: ../../ref/settings.txt:400
# 856d3c82016046408e6e185e9668b4bf
msgid "The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following::"
msgstr ""

#: ../../ref/settings.txt:410
# 3e777d46b9e542a999f5a53cf6b20e96
msgid "For other database backends, or more complex SQLite configurations, other options will be required. The following inner options are available."
msgstr ""

#: ../../ref/settings.txt:416
# 1f9462ce231e4bff8f1afc72602a0cc8
msgid "ENGINE"
msgstr ""

#: ../../ref/settings.txt:420
# 0c67bf92c6d84a7490330ebca5b027d8
msgid "The database backend to use. The built-in database backends are:"
msgstr ""

#: ../../ref/settings.txt:422
# 1bd042630c5847899d65c6460c13e9e8
msgid "``'django.db.backends.postgresql_psycopg2'``"
msgstr ""

#: ../../ref/settings.txt:423
# 053c21de5d044fb5b16daa606cedbf6c
msgid "``'django.db.backends.mysql'``"
msgstr ""

#: ../../ref/settings.txt:424
# 63aeef0603134c379781e9a338daa621
msgid "``'django.db.backends.sqlite3'``"
msgstr ""

#: ../../ref/settings.txt:425
# 12ceea93e18b4f37a87d21a7e535d4c7
msgid "``'django.db.backends.oracle'``"
msgstr ""

#: ../../ref/settings.txt:427
# 026614ac7b8644a2bf9042732516f435
msgid "You can use a database backend that doesn't ship with Django by setting ``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``). Writing a whole new database backend from scratch is left as an exercise to the reader; see the other backends for examples."
msgstr ""

#: ../../ref/settings.txt:434
# a8e8e15d4270448bbe09144fd4057cfe
msgid "Prior to Django 1.2, you could use a short version of the backend name to reference the built-in database backends (e.g., you could use ``'sqlite3'`` to refer to the SQLite backend). This format has been deprecated, and will be removed in Django 1.4."
msgstr ""

#: ../../ref/settings.txt:442
# d6d74ffe7d6e4455872f71b7edaa735a
msgid "HOST"
msgstr ""

#: ../../ref/settings.txt:446
# ad379f85c613474192eaf8267a43f9e6
msgid "Which host to use when connecting to the database. An empty string means localhost. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:449
# fa88ac3176f5433d80fcc6775c122196
msgid "If this value starts with a forward slash (``'/'``) and you're using MySQL, MySQL will connect via a Unix socket to the specified socket. For example::"
msgstr ""

#: ../../ref/settings.txt:454
# ec38f23923934d31b0e5f239757356ed
msgid "If you're using MySQL and this value *doesn't* start with a forward slash, then this value is assumed to be the host."
msgstr ""

#: ../../ref/settings.txt:457
# 69d08f637d954a09b185fd05c9f8f290
msgid "If you're using PostgreSQL, an empty string means to use a Unix domain socket for the connection, rather than a network connection to localhost. If you explicitly need to use a TCP/IP connection on the local machine with PostgreSQL, specify ``localhost`` here."
msgstr ""

#: ../../ref/settings.txt:465
# 8af1f0d3cca243c99d504406465ee60a
msgid "NAME"
msgstr ""

#: ../../ref/settings.txt:469
# 2b7a26e7e66c4e87ae758382e9d13ae3
msgid "The name of the database to use. For SQLite, it's the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

#: ../../ref/settings.txt:480
# 1d1d04d4268641208ea3779bd7b9e280
msgid "Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend."
msgstr ""

#: ../../ref/settings.txt:483
# 95d45c74cebc4d1090b889367ed9e776
msgid "Some information on available parameters can be found in the :doc:`Database Backends </ref/databases>` documentation. For more information, consult your backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:490
# fb77dd4a6d114bc7ba812d190c8a1161
msgid "PASSWORD"
msgstr ""

#: ../../ref/settings.txt:494
# a0d329f4aa1d4464ac256146aae0573c
msgid "The password to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:499
# c6bf875c58c34ae28ab64b7043e6e332
msgid "PORT"
msgstr ""

#: ../../ref/settings.txt:503
# 3b08b7f1690e495c9ea443ab4fd1f546
msgid "The port to use when connecting to the database. An empty string means the default port. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:509
# 789a5dfaa4224b69ab596d054251fe02
msgid "USER"
msgstr ""

#: ../../ref/settings.txt:513
# 49c1d09b3c9c46c4b7782952aa521216
msgid "The username to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:518
# 67c68c1e3a514f27ab3c72ed759b42c9
msgid "TEST_CHARSET"
msgstr ""

#: ../../ref/settings.txt:522
# 57a6ee7d47e24f11a7d904ba0c6d50ba
msgid "The character set encoding used to create the test database. The value of this string is passed directly through to the database, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:526
# eee9bea964404156ae0a3c8eb6a21ba7
msgid "Supported for the PostgreSQL_ (``postgresql_psycopg2``) and MySQL_ (``mysql``) backends."
msgstr ""

#: ../../ref/settings.txt:535
# f671086ce1a149798c781a03f63b70ef
msgid "TEST_COLLATION"
msgstr ""

#: ../../ref/settings.txt:539
# e24bee7c656a4b859dee3945bff3093a
msgid "The collation order to use when creating the test database. This value is passed directly to the backend, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:542
# ed03fb5748f449a086eccf6932115a4f
msgid "Only supported for the ``mysql`` backend (see the `MySQL manual`_ for details)."
msgstr ""

#: ../../ref/settings.txt:549
# f2479f346ada477e8b29f30147e82e7a
msgid "TEST_DEPENDENCIES"
msgstr ""

#: ../../ref/settings.txt:553
# 34d0ad0f1eb54ac98a55999116cd34b7
msgid "Default: ``['default']``, for all databases other than ``default``, which has no dependencies."
msgstr ""

#: ../../ref/settings.txt:556
# 8f94eb5b868b4d21b0339b77eac91738
msgid "The creation-order dependencies of the database. See the documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../ref/settings.txt:563
# 953174b9287647dfb5271bdd82f3aa2d
msgid "TEST_MIRROR"
msgstr ""

#: ../../ref/settings.txt:567
# e5c99624c71d4d6394254e98f2ab89b3
msgid "The alias of the database that this database should mirror during testing."
msgstr ""

#: ../../ref/settings.txt:570
# da55c6b721f64845a1215af2bcbde6fb
msgid "This setting exists to allow for testing of master/slave configurations of multiple databases. See the documentation on :ref:`testing master/slave configurations <topics-testing-masterslave>` for details."
msgstr ""

#: ../../ref/settings.txt:578
# 8559e2aaf9644e0bb973227199476c96
msgid "TEST_NAME"
msgstr ""

#: ../../ref/settings.txt:582
# 3b0f3a01c02046b2ba215cba38fdc0d7
msgid "The name of database to use when running the test suite."
msgstr ""

#: ../../ref/settings.txt:584
# 1c9941361e934aa29d16d828f3bd2571
msgid "If the default value (``None``) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name ``'test_' + DATABASE_NAME``."
msgstr ""

#: ../../ref/settings.txt:588
# 1dd2adbae817439fb1caef1de0e15f6d
msgid "See :doc:`/topics/testing`."
msgstr ""

#: ../../ref/settings.txt:593
# b2bbfef691d84f7aa7d606b87e6ee82f
msgid "TEST_CREATE"
msgstr ""

#: ../../ref/settings.txt:597
#: ../../ref/settings.txt:609
#: ../../ref/settings.txt:621
#: ../../ref/settings.txt:633
#: ../../ref/settings.txt:645
#: ../../ref/settings.txt:657
# a67a8d7ec5ad42438f2e3c7393e9021b
# c8fd13d8ac904d7ea0dab754fdc74359
# 22974b76fae643d598de5a96f43c6bfc
# 7ab05548cdcb4192b408a43d7b0ddabe
# d6075b6e2d3d4ec4b36bff9ebb5b9f9d
# a6266383a5b74eb3a7e4a38b01fda994
msgid "This is an Oracle-specific setting."
msgstr ""

#: ../../ref/settings.txt:599
# 8e3e8e745f384461a4dc8f62f68e602b
msgid "If it is set to ``False``, the test tablespaces won't be automatically created at the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:605
# 3332b67b7f7e4bc8a3e0db100db19827
msgid "TEST_USER"
msgstr ""

#: ../../ref/settings.txt:611
# 9bf6fe5c5e264e58b707ac2bd71b9f56
msgid "The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use ``'test_' + USER``."
msgstr ""

#: ../../ref/settings.txt:617
# d664538930d34db090cc279ddee65cee
msgid "TEST_USER_CREATE"
msgstr ""

#: ../../ref/settings.txt:623
# 24dff58c52ed4fd7865d430ccfae751d
msgid "If it is set to ``False``, the test user won't be automatically created at the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:629
# dc0bf72be4bc43679aee820da9f8270d
msgid "TEST_PASSWD"
msgstr ""

#: ../../ref/settings.txt:635
# cf3aac30bd864bdaa4d6c8eeff6a5b18
msgid "The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use a hardcoded default value."
msgstr ""

#: ../../ref/settings.txt:641
# 5e752fbdc66e4eb6955702eff8e3c1af
msgid "TEST_TBLSPACE"
msgstr ""

#: ../../ref/settings.txt:647
# ef0c9bd10c8d4570852f93a11981ec95
msgid "The name of the tablespace that will be used when running tests. If not provided, Django will use ``'test_' + NAME``."
msgstr ""

#: ../../ref/settings.txt:653
# f7c74f69e9624148a8ddec325c253ce5
msgid "TEST_TBLSPACE_TMP"
msgstr ""

#: ../../ref/settings.txt:659
# 63ee3b4fca4f438fb983170b6f718ed4
msgid "The name of the temporary tablespace that will be used when running tests. If not provided, Django will use ``'test_' + NAME + '_temp'``."
msgstr ""

#: ../../ref/settings.txt:665
# 21940adbf99c40be95b5e85c3c2e2656
msgid "DATABASE_ROUTERS"
msgstr ""

#: ../../ref/settings.txt:669
# 594ce96b6cd849e8977196abb692f270
msgid "Default: ``[]`` (Empty list)"
msgstr ""

#: ../../ref/settings.txt:671
# fc0fcfa618db44aab613a1be06ecb9b2
msgid "The list of routers that will be used to determine which database to use when performing a database queries."
msgstr ""

#: ../../ref/settings.txt:674
# 383d6ee375044671ba807374124e8349
msgid "See the documentation on :ref:`automatic database routing in multi database configurations <topics-db-multi-db-routing>`."
msgstr ""

#: ../../ref/settings.txt:680
# 50000182bb7f48a6bb8bc27f885c83bb
msgid "DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:682
# 4946a20c04684f4eb6410ec3453869f2
msgid "Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)"
msgstr ""

#: ../../ref/settings.txt:684
# 84013c7ec52340ef9a742c9bcfc7c950
msgid "The default formatting to use for displaying date fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:692
# 692f93b9c0464f8295b33dcaee4645bd
msgid "See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:697
# ff9e65c3a16047e28b0986f41db612f0
msgid "DATE_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:707
# 7294cdab26164da996539e20c6f64465
msgid "A tuple of formats that will be accepted when inputting data on a date field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:712
#: ../../ref/settings.txt:754
#: ../../ref/settings.txt:2089
# 8f4e710211264531846069b63740e4a9
# 5307d1e9f58c48ce926fdae720935695
# ef4b4f47f88d49b8afdf2878195b7b41
msgid "When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:715
# 67d978221eeb42d79b929a91ac4dbb24
msgid "See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:722
# b86b97a53631444394002557f97486f7
msgid "DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:724
# e5dd6110727c4e34944ef228d8e231dc
msgid "Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:726
# 480492453c324b409fcfe2aed7baaddd
msgid "The default formatting to use for displaying datetime fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:734
# 7d7b011151d04bd49b7f1cdde9b3ebd4
msgid "See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:739
# 2b69ce4deaf04f8d8f9ea227e2d5d32b
msgid "DATETIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:749
# 0561c8a5ad0b4dfdba70121a450153a9
msgid "A tuple of formats that will be accepted when inputting data on a datetime field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:757
# 6845e120ea7f460cb7d2ee95921c70ac
msgid "See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:764
# 788d1c18f9c349f1af3f6e3d9b0b180f
msgid "DEBUG"
msgstr ""

#: ../../ref/settings.txt:768
# 34b899ce52db49b1898e65183ac42f0d
msgid "A boolean that turns on/off debug mode."
msgstr ""

#: ../../ref/settings.txt:770
# af7e98f81ccb47af9fcf2a197d7b9e03
msgid "Never deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:772
# 8d6da73df6444c17a5d292ced792ba2b
msgid "Did you catch that? NEVER deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:775
# c566fa186b2a4bac95ce9f8f766f47a0
msgid "One of the main features of debug mode is the display of detailed error pages. If your app raises an exception when ``DEBUG`` is ``True``, Django will display a detailed traceback, including a lot of metadata about your environment, such as all the currently defined Django settings (from ``settings.py``)."
msgstr ""

#: ../../ref/settings.txt:780
# 9bb31fd81e01441f8b80f0b62c174de5
msgid "As a security measure, Django will *not* include settings that might be sensitive (or offensive), such as ``SECRET_KEY`` or ``PROFANITIES_LIST``. Specifically, it will exclude any setting whose name includes any of the following:"
msgstr ""

#: ../../ref/settings.txt:785
# 1d4a8e9fc153410f954c30e05b967411
msgid "API"
msgstr ""

#: ../../ref/settings.txt:786
# 493512918ea6456cbed34236b2afd944
msgid "KEY"
msgstr ""

#: ../../ref/settings.txt:787
# 006039fdf10d496d86cf72d802ff184d
msgid "PASS"
msgstr ""

#: ../../ref/settings.txt:788
#: ../../ref/settings.txt:1549
# c27c6c8736ed4c8499458a3f2d80e067
# 8cba734217db4df29cf29eb9c8584b56
msgid "PROFANITIES_LIST"
msgstr ""

#: ../../ref/settings.txt:789
# c410b8d55d2049bcbc6210e69a6056fd
msgid "SECRET"
msgstr ""

#: ../../ref/settings.txt:790
# a161a856a0554c65914d35beb9101d2d
msgid "SIGNATURE"
msgstr ""

#: ../../ref/settings.txt:791
# 4ef80a61024244198e5ad518c5fa44bb
msgid "TOKEN"
msgstr ""

#: ../../ref/settings.txt:798
# 5a8950e8650b43fcb9d778312d5a5d15
msgid "Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD, just as ``'TOKEN'`` will also match TOKENIZED and so on."
msgstr ""

#: ../../ref/settings.txt:801
# d408b6b1d2e54c4382a473eb6981835a
msgid "Still, note that there are always going to be sections of your debug output that are inappropriate for public consumption. File paths, configuration options and the like all give attackers extra information about your server."
msgstr ""

#: ../../ref/settings.txt:805
# 4286f6f0ee964fbd9ea2d570f77973b5
msgid "It is also important to remember that when running with :setting:`DEBUG` turned on, Django will remember every SQL query it executes. This is useful when you're debugging, but it'll rapidly consume memory on a production server."
msgstr ""

#: ../../ref/settings.txt:812
# 3dee67c1a555476da79ee3d8b7394c8b
msgid "DEBUG_PROPAGATE_EXCEPTIONS"
msgstr ""

#: ../../ref/settings.txt:816
# 34ffe9b9c612467a88d3f211993b84b0
msgid "If set to True, Django's normal exception handling of view functions will be suppressed, and exceptions will propagate upwards.  This can be useful for some test setups, and should never be used on a live site."
msgstr ""

#: ../../ref/settings.txt:824
# c0bed8190e3f4b0cae5b7bb9d6e1d51f
msgid "DECIMAL_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:828
# ff4275f2642c4133a437bb3a0bc42296
msgid "Default: ``'.'`` (Dot)"
msgstr ""

#: ../../ref/settings.txt:830
# ff1c758b5ce44762b17ae182bc5770e6
msgid "Default decimal separator used when formatting decimal numbers."
msgstr ""

#: ../../ref/settings.txt:832
#: ../../ref/settings.txt:1519
#: ../../ref/settings.txt:2052
# 11f9c45d25da4a268280fdb150d382a3
# 832e40c4b0cd447b9ada42915f9b664f
# b1ef2369bc584dbdbed034f04219ed10
msgid "Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:835
# 0e7b3a28fb294aa48936758bdb830fec
msgid "See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:842
# 3e7c95a751504f798257ae05f9a619d5
msgid "DEFAULT_CHARSET"
msgstr ""

#: ../../ref/settings.txt:844
#: ../../ref/settings.txt:1018
# 34a459ba2cd2458c801670c7b936821d
# e63b4840927f4d14814c7c39911b98e7
msgid "Default: ``'utf-8'``"
msgstr ""

#: ../../ref/settings.txt:846
# 57b424285b67460aae97960b5d4afe59
msgid "Default charset to use for all ``HttpResponse`` objects, if a MIME type isn't manually specified. Used with :setting:`DEFAULT_CONTENT_TYPE` to construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:853
# 46bdabd20680461897487d804d4bd8d3
msgid "DEFAULT_CONTENT_TYPE"
msgstr ""

#: ../../ref/settings.txt:855
# e8044b7f369a4663a9f8a829e4a61081
msgid "Default: ``'text/html'``"
msgstr ""

#: ../../ref/settings.txt:857
# f75369cafab449a588a09a27a058c098
msgid "Default content type to use for all ``HttpResponse`` objects, if a MIME type isn't manually specified. Used with :setting:`DEFAULT_CHARSET` to construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:864
# c28a7bf37de242ddb36be199d585d03a
msgid "DEFAULT_EXCEPTION_REPORTER_FILTER"
msgstr ""

#: ../../ref/settings.txt:866
# 3dfd3153135c41aa9ad4db475788430c
msgid "Default: :class:`django.views.debug.SafeExceptionReporterFilter`"
msgstr ""

#: ../../ref/settings.txt:868
# 10fac88155a043189ff6fa7b63c001c0
msgid "Default exception reporter filter class to be used if none has been assigned to the :class:`HttpRequest` instance yet. See :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../ref/settings.txt:875
# 8bb52c17443140f898f145bcf18d3b8f
msgid "DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../ref/settings.txt:877
# ec3c6e497833451d8c4a6c418cd8de63
msgid "Default: :class:`django.core.files.storage.FileSystemStorage`"
msgstr ""

#: ../../ref/settings.txt:879
# 169bb458d9e44c19ad012ab30b22f4d2
msgid "Default file storage class to be used for any file-related operations that don't specify a particular storage system. See :doc:`/topics/files`."
msgstr ""

#: ../../ref/settings.txt:885
# bad0afa1d6114115ab153c036534b010
msgid "DEFAULT_FROM_EMAIL"
msgstr ""

#: ../../ref/settings.txt:887
# 487fa5d038db4a2d9e78975a5b386d83
msgid "Default: ``'webmaster@localhost'``"
msgstr ""

#: ../../ref/settings.txt:889
# f36cc78ac8614ea099c12e728950685f
msgid "Default email address to use for various automated correspondence from the site manager(s)."
msgstr ""

#: ../../ref/settings.txt:895
# bb05c7cbd3ac4c0aa5806f36dc551aa7
msgid "DEFAULT_INDEX_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:899
# f339e0127e3c43a2bc5d9030ed2e3f63
msgid "Default tablespace to use for indexes on fields that don't specify one, if the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:905
# f1e3bbb5c8494754a481abb3903324bc
msgid "DEFAULT_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:909
# a85dc1c307654f5c83aece4232c001bd
msgid "Default tablespace to use for models that don't specify one, if the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:915
# 45c76ce8a25d43d5abcba3c26a19b957
msgid "DISALLOWED_USER_AGENTS"
msgstr ""

#: ../../ref/settings.txt:919
# f57de293073849ac822b565fe38a1cec
msgid "List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bad robots/crawlers. This is only used if ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:927
# 52a6a8d88cc94cf489ff7bf47fe85f43
msgid "EMAIL_BACKEND"
msgstr ""

#: ../../ref/settings.txt:931
# aa36f329493147c4bfc934d04ea14b20
msgid "Default: ``'django.core.mail.backends.smtp.EmailBackend'``"
msgstr ""

#: ../../ref/settings.txt:933
# bd92b1ce58894a8b801e052b1442f272
msgid "The backend to use for sending emails. For the list of available backends see :doc:`/topics/email`."
msgstr ""

#: ../../ref/settings.txt:939
# bcfd08fb0cb94c829d1d2b1c59549390
msgid "EMAIL_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:945
# 0d1adfa744d44164b11fb8054b387fe6
msgid "The directory used by the ``file`` email backend to store output files."
msgstr ""

#: ../../ref/settings.txt:950
# 38d6305d9a2e4f2d92eb148f71033d92
msgid "EMAIL_HOST"
msgstr ""

#: ../../ref/settings.txt:952
# 34108d6a81c940a1bbd9e34fe234a3dc
msgid "Default: ``'localhost'``"
msgstr ""

#: ../../ref/settings.txt:954
# 26596f8cc79e4b0aa380eb9c914ce9a2
msgid "The host to use for sending email."
msgstr ""

#: ../../ref/settings.txt:956
# 4eb3313a579941fd9212ec6fa5e6c0a0
msgid "See also :setting:`EMAIL_PORT`."
msgstr ""

#: ../../ref/settings.txt:961
# 10674bb69d9b4a35ac7064a62995ffb9
msgid "EMAIL_HOST_PASSWORD"
msgstr ""

#: ../../ref/settings.txt:965
# ed842e126dad4f48bed712dae917aa07
msgid "Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This setting is used in conjunction with :setting:`EMAIL_HOST_USER` when authenticating to the SMTP server. If either of these settings is empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:970
# bf1b592687c641748ec4fe629fdba2c4
msgid "See also :setting:`EMAIL_HOST_USER`."
msgstr ""

#: ../../ref/settings.txt:975
# 32da0da39c1244aea35eda792f2909ae
msgid "EMAIL_HOST_USER"
msgstr ""

#: ../../ref/settings.txt:979
# 9f818c12a80a4a2690d4fa0c717b4105
msgid "Username to use for the SMTP server defined in :setting:`EMAIL_HOST`. If empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:982
# 9bf6cb60b7de4efebe7896fdc9d354db
msgid "See also :setting:`EMAIL_HOST_PASSWORD`."
msgstr ""

#: ../../ref/settings.txt:987
# f6075f82cd2b4ac898ca2a402d237113
msgid "EMAIL_PORT"
msgstr ""

#: ../../ref/settings.txt:989
# 58be5c3dc30641049c4b137878f86970
msgid "Default: ``25``"
msgstr ""

#: ../../ref/settings.txt:991
# 4cb48ff2dd6c4d48ba99abc919c60b1a
msgid "Port to use for the SMTP server defined in :setting:`EMAIL_HOST`."
msgstr ""

#: ../../ref/settings.txt:996
# 860d917a8d034cf1933eb62ae9a84f73
msgid "EMAIL_SUBJECT_PREFIX"
msgstr ""

#: ../../ref/settings.txt:998
# 4829045a782e476495b695c2093daca9
msgid "Default: ``'[Django] '``"
msgstr ""

#: ../../ref/settings.txt:1000
# 676cb0f51bda4463bcca192d503ba877
msgid "Subject-line prefix for email messages sent with ``django.core.mail.mail_admins`` or ``django.core.mail.mail_managers``. You'll probably want to include the trailing space."
msgstr ""

#: ../../ref/settings.txt:1007
# a8ad54b34fc14c9980e28afea8044d46
msgid "EMAIL_USE_TLS"
msgstr ""

#: ../../ref/settings.txt:1011
# 55d8827c5ecf4ece8f0f10ef0d09d045
msgid "Whether to use a TLS (secure) connection when talking to the SMTP server."
msgstr ""

#: ../../ref/settings.txt:1016
# bf52c1fa9f6c4ab4b934869e55f5e5d5
msgid "FILE_CHARSET"
msgstr ""

#: ../../ref/settings.txt:1020
# 4d84185536044c039315a593a95d635d
msgid "The character encoding used to decode any files read from disk. This includes template files and initial SQL data files."
msgstr ""

#: ../../ref/settings.txt:1026
# 962d93054bf540149ab6c0b3c8fecd87
msgid "FILE_UPLOAD_HANDLERS"
msgstr ""

#: ../../ref/settings.txt:1033
# 1f3fb920309d427ba5728470fae23f82
msgid "A tuple of handlers to use for uploading. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1038
# fafdd93240fb4de79571dd22c723730e
msgid "FILE_UPLOAD_MAX_MEMORY_SIZE"
msgstr ""

#: ../../ref/settings.txt:1040
# 1889ff56f2524957a91f6e7cb5061fde
msgid "Default: ``2621440`` (i.e. 2.5 MB)."
msgstr ""

#: ../../ref/settings.txt:1042
# 57acefc7f2374eaaa60d42ac3a601df0
msgid "The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1048
# 4a32ffd1e04345369136b714d0b101c0
msgid "FILE_UPLOAD_PERMISSIONS"
msgstr ""

#: ../../ref/settings.txt:1052
# c94a82704bee48c18c395fb86aa7e8dd
msgid "The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more information about what these modes mean, see the documentation for :func:`os.chmod`."
msgstr ""

#: ../../ref/settings.txt:1056
# f0c55763731642398bb2799abe3d6514
msgid "If this isn't given or is ``None``, you'll get operating-system dependent behavior. On most platforms, temporary files will have a mode of ``0600``, and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../ref/settings.txt:1063
# 74e35cc5ed2b4cbf857bde2b2d616a02
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../ref/settings.txt:1065
# 83fc2f7e2f68462ebc202355241d8156
msgid "If you're not familiar with file modes, please note that the leading ``0`` is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use ``644``, you'll get totally incorrect behavior."
msgstr ""

#: ../../ref/settings.txt:1074
# b21a6d9b2c5649df94920eb3d24467ad
msgid "FILE_UPLOAD_TEMP_DIR"
msgstr ""

#: ../../ref/settings.txt:1078
# 7f27120e38bf49aaa66cc19b02c8f21c
msgid "The directory to store data temporarily while uploading files. If ``None``, Django will use the standard temporary directory for the operating system. For example, this will default to '/tmp' on \\*nix-style operating systems."
msgstr ""

#: ../../ref/settings.txt:1082
# 2e68a37182bc4dd292778f83196be8f5
msgid "See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1087
# 49a85130e7ce4afb9cd92adbe09e01c2
msgid "FIRST_DAY_OF_WEEK"
msgstr ""

#: ../../ref/settings.txt:1091
# 79b339869d954acb9b0216dbb4b6e247
msgid "Default: ``0`` (Sunday)"
msgstr ""

#: ../../ref/settings.txt:1093
# 69867347fd2b4b799479be09b383f91b
msgid "Number representing the first day of the week. This is especially useful when displaying a calendar. This value is only used when not using format internationalization, or when a format cannot be found for the current locale."
msgstr ""

#: ../../ref/settings.txt:1098
# d3d4dc6c0ac64f419220eb112ac1ae4d
msgid "The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on."
msgstr ""

#: ../../ref/settings.txt:1104
# 3572659886d54a9599ef5d92720d9f8f
msgid "FIXTURE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1108
# 1df51c7aeafb47528d6d1ddf301d0b9c
msgid "List of directories searched for fixture files, in addition to the ``fixtures`` directory of each application, in search order."
msgstr ""

#: ../../ref/settings.txt:1111
#: ../../ref/settings.txt:1988
#: ../../ref/templates/api.txt:568
# 21cf94137ef34f84a3bfc4b248c2fe83
# c79a7a5128ba45dca5ea1945bf2bb373
# 90f6e7def0c048eea12d3c7fa6a12ce7
msgid "Note that these paths should use Unix-style forward slashes, even on Windows."
msgstr ""

#: ../../ref/settings.txt:1113
# ba4e2665edc84c5cba908517c4aa6d27
msgid "See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`."
msgstr ""

#: ../../ref/settings.txt:1116
# 21fbf069aef745a7bc422d920704852f
msgid "FORCE_SCRIPT_NAME"
msgstr ""

#: ../../ref/settings.txt:1120
# 86fb3ca0c19c43e7b3e5d8569b3712b9
msgid "If not ``None``, this will be used as the value of the ``SCRIPT_NAME`` environment variable in any HTTP request. This setting can be used to override the server-provided value of ``SCRIPT_NAME``, which may be a rewritten version of the preferred value or not supplied at all."
msgstr ""

#: ../../ref/settings.txt:1128
# e092611407924cda92571ff68b2ea11f
msgid "FORMAT_MODULE_PATH"
msgstr ""

#: ../../ref/settings.txt:1134
# 089d34667a854e57892d53542921f473
msgid "A full Python path to a Python package that contains format definitions for project locales. If not ``None``, Django will check for a ``formats.py`` file, under the directory named as the current locale, and will use the formats defined on this file."
msgstr ""

#: ../../ref/settings.txt:1139
# 1b42a277afcb4984b95866932ccf40f3
msgid "For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``, and current language is ``en`` (English), Django will expect a directory tree like::"
msgstr ""

#: ../../ref/settings.txt:1150
# 8fedf562f5594de5b3d7b14b128fd619
msgid "Available formats are :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`YEAR_MONTH_FORMAT`, :setting:`MONTH_DAY_FORMAT`, :setting:`SHORT_DATE_FORMAT`, :setting:`SHORT_DATETIME_FORMAT`, :setting:`FIRST_DAY_OF_WEEK`, :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :setting:`NUMBER_GROUPING`."
msgstr ""

#: ../../ref/settings.txt:1160
# c15fd6980cf54ba599f5de20e0237f7b
msgid "IGNORABLE_404_URLS"
msgstr ""

#: ../../ref/settings.txt:1164
# d32b38e67a664412a66b9db5b9ddc609
msgid "Default: ``()``"
msgstr ""

#: ../../ref/settings.txt:1166
# 68c6a8c8ada64e62b7dca8903e1e948e
msgid "List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see :doc:`/howto/error-reporting`). Use this if your site does not provide a commonly requested file such as ``favicon.ico`` or ``robots.txt``, or if it gets hammered by script kiddies."
msgstr ""

#: ../../ref/settings.txt:1172
# 1d2b209bce5e4a58bbbbfb743348c828
msgid "This is only used if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True`` and ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:1178
# 01ddd58df640440ab4e4f068c0bcaeaa
msgid "INSTALLED_APPS"
msgstr ""

#: ../../ref/settings.txt:1182
# 94af36ad406e4154b890cf34abea0009
msgid "A tuple of strings designating all applications that are enabled in this Django installation. Each string should be a full Python path to a Python package that contains a Django application, as created by :djadmin:`django-admin.py startapp <startapp>`."
msgstr ""

#: ../../ref/settings.txt:1189
# 21a1818e174b489699ea7aac117baae4
msgid "The application names (that is, the final dotted part of the path to the module containing ``models.py``) defined in :setting:`INSTALLED_APPS` *must* be unique. For example, you can't include both ``django.contrib.auth`` and ``myproject.auth`` in INSTALLED_APPS."
msgstr ""

#: ../../ref/settings.txt:1198
# 92650647f4014f3098ba29a4a12b64f5
msgid "INTERNAL_IPS"
msgstr ""

#: ../../ref/settings.txt:1202
# 99512b5d20f047f699c785e2aa8c1850
msgid "A tuple of IP addresses, as strings, that:"
msgstr ""

#: ../../ref/settings.txt:1204
# 17ee1fe4e15c4238a6e0f36704da8868
msgid "See debug comments, when :setting:`DEBUG` is ``True``"
msgstr ""

#: ../../ref/settings.txt:1205
# d2a2b366d441425b80a0064c80b87c76
msgid "Receive X headers if the ``XViewMiddleware`` is installed (see :doc:`/topics/http/middleware`)"
msgstr ""

#: ../../ref/settings.txt:1211
# dd3824a69ae44305b670269b00e1317d
msgid "LANGUAGE_CODE"
msgstr ""

#: ../../ref/settings.txt:1213
# 69652a27a8024ed79cefcd37391a2da8
msgid "Default: ``'en-us'``"
msgstr ""

#: ../../ref/settings.txt:1215
# 8f2a3dec58a64e3e8a5064a6f873e8d3
msgid "A string representing the language code for this installation. This should be in standard :term:`language format<language code>`. For example, U.S. English is ``\"en-us\"``. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1222
# 513242d80eee4adb872396b6b8dd46bf
msgid "LANGUAGE_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1224
# 77715a14966a44e2a8f0d61ddee831f6
msgid "Default: ``'django_language'``"
msgstr ""

#: ../../ref/settings.txt:1226
# 9a35382b192148c09c9e146a1ebf58ae
msgid "The name of the cookie to use for the language cookie. This can be whatever you want (but should be different from :setting:`SESSION_COOKIE_NAME`). See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1233
# d96e4aae224a4966b908aa5e6e790b70
msgid "LANGUAGES"
msgstr ""

#: ../../ref/settings.txt:1235
# d4abcb7ae4044a0da71e9981f99af6e9
msgid "Default: A tuple of all available languages. This list is continually growing and including a copy here would inevitably become rapidly out of date. You can see the current list of translated languages by looking in ``django/conf/global_settings.py`` (or view the `online source`_)."
msgstr ""

#: ../../ref/settings.txt:1242
# a9ea960c6c3e4c109b1751026db36b27
msgid "The list is a tuple of two-tuples in the format ``(language code, language name)``, the ``language code`` part should be a :term:`language name<language code>` -- for example, ``('ja', 'Japanese')``. This specifies which languages are available for language selection. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1248
# d718bfa3b4ff4fc9b81c1cd2373dbfa1
msgid "Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages."
msgstr ""

#: ../../ref/settings.txt:1251
# c5671c15ade943fea6e8562fdab4b6bf
msgid "If you define a custom :setting:`LANGUAGES` setting, it's OK to mark the languages as translation strings (as in the default value referred to above) -- but use a \"dummy\" ``gettext()`` function, not the one in ``django.utils.translation``. You should *never* import ``django.utils.translation`` from within your settings file, because that module in itself depends on the settings, and that would cause a circular import."
msgstr ""

#: ../../ref/settings.txt:1259
# e0959a6ab996426395689f06bf09bb20
msgid "The solution is to use a \"dummy\" ``gettext()`` function. Here's a sample settings file::"
msgstr ""

#: ../../ref/settings.txt:1269
# 6064a0870bab4851bf9ed6c24de5ba23
msgid "With this arrangement, ``django-admin.py makemessages`` will still find and mark these strings for translation, but the translation won't happen at runtime -- so you'll have to remember to wrap the languages in the *real* ``gettext()`` in any code that uses :setting:`LANGUAGES` at runtime."
msgstr ""

#: ../../ref/settings.txt:1277
# a9d64da880c844caaa60bc680ae03469
msgid "LOCALE_PATHS"
msgstr ""

#: ../../ref/settings.txt:1281
# 157fbd7363304d41967c999493f621ab
msgid "A tuple of directories where Django looks for translation files. See :ref:`how-django-discovers-translations`."
msgstr ""

#: ../../ref/settings.txt:1291
# 2072b212e06e429797e173cdd3bfcb06
msgid "Note that in the paths you add to the value of this setting, if you have the typical ``/path/to/locale/xx/LC_MESSAGES`` hierarchy, you should use the path to the ``locale`` directory (i.e. ``'/path/to/locale'``)."
msgstr ""

#: ../../ref/settings.txt:1298
# 7aadbcbee36b476fa281d2527ba829d4
msgid "LOGGING"
msgstr ""

#: ../../ref/settings.txt:1302
# cf2d73ad26ab479daad0c006623935e7
msgid "Default: A logging configuration dictionary."
msgstr ""

#: ../../ref/settings.txt:1304
# 0c0d56da80ab4aa18eb3607bf48748e8
msgid "A data structure containing configuration information. The contents of this data structure will be passed as the argument to the configuration method described in :setting:`LOGGING_CONFIG`."
msgstr ""

#: ../../ref/settings.txt:1308
# a01191c42f464eba9269b2fc81c15321
msgid "The default logging configuration passes HTTP 500 server errors to an email log handler; all other log messages are given to a NullHandler."
msgstr ""

#: ../../ref/settings.txt:1314
# b8cdc086aca7405ab7dc143b43d78320
msgid "LOGGING_CONFIG"
msgstr ""

#: ../../ref/settings.txt:1318
# 7c3ac77f9d6a47589c8fe3c69bbdc3d4
msgid "Default: ``'django.utils.log.dictConfig'``"
msgstr ""

#: ../../ref/settings.txt:1320
# 7fd1f8dea4b3449daaa2e592ed1de384
msgid "A path to a callable that will be used to configure logging in the Django project. Points at a instance of Python's `dictConfig`_ configuration method by default."
msgstr ""

#: ../../ref/settings.txt:1324
# 2b704a1e31794afabd63d7732359783b
msgid "If you set :setting:`LOGGING_CONFIG` to ``None``, the logging configuration process will be skipped."
msgstr ""

#: ../../ref/settings.txt:1332
# 266211e8815d4514a81da5d20eab00c7
msgid "LOGIN_REDIRECT_URL"
msgstr ""

#: ../../ref/settings.txt:1334
# d6caf03465164865a839582de20b9b5a
msgid "Default: ``'/accounts/profile/'``"
msgstr ""

#: ../../ref/settings.txt:1336
# ce8dad4b79ad4ea9807b70f57590b316
msgid "The URL where requests are redirected after login when the ``contrib.auth.login`` view gets no ``next`` parameter."
msgstr ""

#: ../../ref/settings.txt:1339
# 337250fd8d674054a003922e2561751c
msgid "This is used by the :func:`~django.contrib.auth.decorators.login_required` decorator, for example."
msgstr ""

#: ../../ref/settings.txt:1345
# 4fa2128f7dfd407a9bd1951475bf550e
msgid "You can use :func:`~django.core.urlresolvers.reverse_lazy` to reference URLs by their name instead of providing a hardcoded value. Assuming a ``urls.py`` with an URLpattern named ``home``::"
msgstr ""

#: ../../ref/settings.txt:1353
# 9ba7ac8da4f74270b8d4d99cc82ff12c
msgid "You can use :func:`~django.core.urlresolvers.reverse_lazy` like this::"
msgstr ""

#: ../../ref/settings.txt:1359
# 1ecf72d9f7ff4ab9b174d1fb711082dc
msgid "This also works fine with localized URLs using :func:`~django.conf.urls.i18n.i18n_patterns`."
msgstr ""

#: ../../ref/settings.txt:1365
# 927b6174fefd4461a4acdd99c5795fcf
msgid "LOGIN_URL"
msgstr ""

#: ../../ref/settings.txt:1367
# 649fd6864de44438837dbcbc2fd8de2f
msgid "Default: ``'/accounts/login/'``"
msgstr ""

#: ../../ref/settings.txt:1369
# bfd54a7f8c1b4d38bd6a900522358701
msgid "The URL where requests are redirected for login, especially when using the :func:`~django.contrib.auth.decorators.login_required` decorator."
msgstr ""

#: ../../ref/settings.txt:1373
#: ../../ref/settings.txt:1385
# eaa41f203d144d2d90b9250b3e40d954
# d3cc00f60a7d49fea8690070a784e675
msgid "See the `note on LOGIN_REDIRECT_URL setting`_"
msgstr ""

#: ../../ref/settings.txt:1378
# ac9ffcc89d914ad7b72e833e61c487dd
msgid "LOGOUT_URL"
msgstr ""

#: ../../ref/settings.txt:1380
# 1f916e7febef4190a9f5e524e97073ae
msgid "Default: ``'/accounts/logout/'``"
msgstr ""

#: ../../ref/settings.txt:1382
# e3e628a113584ad3944ea8f642297226
msgid "LOGIN_URL counterpart."
msgstr ""

#: ../../ref/settings.txt:1390
# da845286af5e41968c5e9b7c0dca903a
msgid "MANAGERS"
msgstr ""

#: ../../ref/settings.txt:1394
# 463bad48b3234161957870a7c4bc4443
msgid "A tuple in the same format as :setting:`ADMINS` that specifies who should get broken-link notifications when ``SEND_BROKEN_LINK_EMAILS=True``."
msgstr ""

#: ../../ref/settings.txt:1400
# 513d77b3eb154a43802fb25ccb067f64
msgid "MEDIA_ROOT"
msgstr ""

#: ../../ref/settings.txt:1404
# cc5be25253034888afe0050af50a49df
msgid "Absolute path to the directory that holds media for this installation, used for :doc:`managing stored files </topics/files>`."
msgstr ""

#: ../../ref/settings.txt:1407
# 0d22bb46b94044a7a181f0133dfd01ce
msgid "Example: ``\"/home/media/media.lawrence.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1409
# 7cf497cd0a774019890480d113009816
msgid "See also :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/settings.txt:1414
# 1dcf4491a01d47db9545374d2d0c2651
msgid "MEDIA_URL"
msgstr ""

#: ../../ref/settings.txt:1418
# a0d898e1b13c4d3aba5c4cb173baadee
msgid "URL that handles the media served from :setting:`MEDIA_ROOT`, used for :doc:`managing stored files </topics/files>`."
msgstr ""

#: ../../ref/settings.txt:1421
# fbe60af947a645a9a6b19fed79e42499
msgid "Example: ``\"http://media.lawrence.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1431
# f8694331d4d04fca9220180ec68c6643
msgid "Default: `messages.INFO`"
msgstr ""

#: ../../ref/settings.txt:1433
# 199a632faf674c93b8054c423fb3fc50
msgid "Sets the minimum message level that will be recorded by the messages framework. See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1442
# f5c3151a1bac4795a5193e425b85dd09
msgid "Default: ``'django.contrib.messages.storage.user_messages.LegacyFallbackStorage'``"
msgstr ""

#: ../../ref/settings.txt:1444
# 046fb76a00384c29a701f6fb2f651a67
msgid "Controls where Django stores message data.  See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1460
# 834edeff422c4589956d2b8d0721e2ba
msgid "Sets the mapping of message levels to message tags. See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1466
# 84381a10c32543789d2260dfd917eea6
msgid "MIDDLEWARE_CLASSES"
msgstr ""

#: ../../ref/settings.txt:1476
# 9242fdee7da34488902b980d22ce4738
msgid "A tuple of middleware classes to use. See :doc:`/topics/http/middleware`."
msgstr ""

#: ../../ref/settings.txt:1486
# 5a7df312e8044308b6802aa390310214
msgid "MONTH_DAY_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1488
# afa398c8904d48639ae6b6a45181003c
msgid "Default: ``'F j'``"
msgstr ""

#: ../../ref/settings.txt:1490
# 4d954597bdd1473684c5d21ed039fdbf
msgid "The default formatting to use for date fields on Django admin change-list pages -- and, possibly, by other parts of the system -- in cases when only the month and day are displayed."
msgstr ""

#: ../../ref/settings.txt:1494
# 09fa193dcd3944d8b22de7ae31450e4b
msgid "For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given day displays the day and month. Different locales have different formats. For example, U.S. English would say \"January 1,\" whereas Spanish might say \"1 Enero.\""
msgstr ""

#: ../../ref/settings.txt:1499
# 56697fe7cabe4947879d861504a1271c
msgid "See :tfilter:`allowed date format strings <date>`. See also :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`YEAR_MONTH_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1506
# 2edc2e15f33b4aa3902f2f17f3374c49
msgid "NUMBER_GROUPING"
msgstr ""

#: ../../ref/settings.txt:1510
# 009924b6585d45859053e63e599551de
msgid "Default: ``0``"
msgstr ""

#: ../../ref/settings.txt:1512
# 30eaf273f8114825b521cf38410296ba
msgid "Number of digits grouped together on the integer part of a number."
msgstr ""

#: ../../ref/settings.txt:1514
# 67605c54616246d0b904900868f5b323
msgid "Common use is to display a thousand separator. If this setting is ``0``, then no grouping will be applied to the number. If this setting is greater than ``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator between those groups."
msgstr ""

#: ../../ref/settings.txt:1522
# c220b0b31e71452e84770eb3dba11275
msgid "See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:1528
# b45714bd213a41f2a9a835297a865759
msgid "PASSWORD_RESET_TIMEOUT_DAYS"
msgstr ""

#: ../../ref/settings.txt:1530
# ae65dc6aeb7645559d1db2f665c65e3c
msgid "Default: ``3``"
msgstr ""

#: ../../ref/settings.txt:1532
# 36a3e3f1b4864b358a4db9600cb15cdf
msgid "The number of days a password reset link is valid for. Used by the :mod:`django.contrib.auth` password reset mechanism."
msgstr ""

#: ../../ref/settings.txt:1538
# a7b702f756c242e5b7d9e4ae69c2e8bf
msgid "PREPEND_WWW"
msgstr ""

#: ../../ref/settings.txt:1542
# eedc89ce13e64e40948ef7b3322badf0
msgid "Whether to prepend the \"www.\" subdomain to URLs that don't have it. This is only used if :class:`~django.middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/middleware`). See also :setting:`APPEND_SLASH`."
msgstr ""

#: ../../ref/settings.txt:1553
# 2cbb9a0e6d87446ebfa9daca1ee62e89
msgid "A tuple of profanities, as strings, that will be forbidden in comments when :setting:`COMMENTS_ALLOW_PROFANITIES` is ``False``."
msgstr ""

#: ../../ref/settings.txt:1559
# a264f2388e2b432f8888fddc0ed63ce2
msgid "RESTRUCTUREDTEXT_FILTER_SETTINGS"
msgstr ""

#: ../../ref/settings.txt:1561
# 51c1defa2f904487ab3bad9596bc9c49
msgid "Default: ``{}``"
msgstr ""

#: ../../ref/settings.txt:1563
# 30f59b255d354342864cf0aa8889c51c
msgid "A dictionary containing settings for the ``restructuredtext`` markup filter from the :doc:`django.contrib.markup application </ref/contrib/markup>`. They override the default writer settings. See the Docutils restructuredtext `writer settings docs`_ for details."
msgstr ""

#: ../../ref/settings.txt:1573
# 6f6daa7b0e134a1f8d58f36fdea16255
msgid "ROOT_URLCONF"
msgstr ""

#: ../../ref/settings.txt:1577
# 974cbac87dc34445961e6bbbb95f1235
msgid "A string representing the full Python import path to your root URLconf. For example: ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis by setting the attribute ``urlconf`` on the incoming ``HttpRequest`` object. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/settings.txt:1585
# afcf5af2dee5404ba6fffb4d05345662
msgid "SECRET_KEY"
msgstr ""

#: ../../ref/settings.txt:1589
# 486b6442370f48aba9d76e7efd26654b
msgid "A secret key for this particular Django installation. Used to provide a seed in secret-key hashing algorithms. Set this to a random string -- the longer, the better. ``django-admin.py startproject`` creates one automatically."
msgstr ""

#: ../../ref/settings.txt:1596
# 023bf0a38ded4d759df01b1854610373
msgid "SECURE_PROXY_SSL_HEADER"
msgstr ""

#: ../../ref/settings.txt:1602
# 2c5a7c3e26034e9b986bf675a2c38a46
msgid "A tuple representing a HTTP header/value combination that signifies a request is secure. This controls the behavior of the request object's ``is_secure()`` method."
msgstr ""

#: ../../ref/settings.txt:1606
# a8bc06c105794e399772d5d8466c815e
msgid "This takes some explanation. By default, ``is_secure()`` is able to determine whether a request is secure by looking at whether the requested URL uses \"https://\"."
msgstr ""

#: ../../ref/settings.txt:1610
# cb859f49374d45b6ab44bdd002e4e1f4
msgid "If your Django app is behind a proxy, though, the proxy may be \"swallowing\" the fact that a request is HTTPS, using a non-HTTPS connection between the proxy and Django. In this case, ``is_secure()`` would always return ``False`` -- even for requests that were made via HTTPS by the end user."
msgstr ""

#: ../../ref/settings.txt:1615
# 300eddfe286a41588693d63ba50fef4f
msgid "In this situation, you'll want to configure your proxy to set a custom HTTP header that tells Django whether the request came in via HTTPS, and you'll want to set ``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look for."
msgstr ""

#: ../../ref/settings.txt:1620
# 89f08758af0f4e2db4d47fb7212c72c1
msgid "You'll need to set a tuple with two elements -- the name of the header to look for and the required value. For example::"
msgstr ""

#: ../../ref/settings.txt:1625
# f52fa78b34a54ce7af2bbdf5c32f823c
msgid "Here, we're telling Django that we trust the ``X-Forwarded-Protocol`` header that comes from our proxy, and any time its value is ``'https'``, then the request is guaranteed to be secure (i.e., it originally came in via HTTPS). Obviously, you should *only* set this setting if you control your proxy or have some other guarantee that it sets/strips this header appropriately."
msgstr ""

#: ../../ref/settings.txt:1631
# 68e08c988a28497fa186e7d644876041
msgid "Note that the header needs to be in the format as used by ``request.META`` -- all caps and likely starting with ``HTTP_``. (Remember, Django automatically adds ``'HTTP_'`` to the start of x-header names before making the header available in ``request.META``.)"
msgstr ""

#: ../../ref/settings.txt:1638
# 53ea106d862541dba152a47d8ebbe337
msgid "**You will probably open security holes in your site if you set this without knowing what you're doing. Seriously.**"
msgstr ""

#: ../../ref/settings.txt:1640
# 5b827bdb324147b1a36cd9c9714c1a91
msgid "Make sure ALL of the following are true before setting this (assuming the values from the example above):"
msgstr ""

#: ../../ref/settings.txt:1643
# 05aea8e10f5b4d5ea15d30b486a33d3c
msgid "Your Django app is behind a proxy."
msgstr ""

#: ../../ref/settings.txt:1644
# 878c2e6b79f04db9a9876a830fe703af
msgid "Your proxy strips the 'X-Forwarded-Protocol' header from all incoming requests. In other words, if end users include that header in their requests, the proxy will discard it."
msgstr ""

#: ../../ref/settings.txt:1647
# b2775bd5962f47aa991aac4da2722db4
msgid "Your proxy sets the 'X-Forwarded-Protocol' header and sends it to Django, but only for requests that originally come in via HTTPS."
msgstr ""

#: ../../ref/settings.txt:1650
# 1b383ad31d214098a6aa8e71f891ddb3
msgid "If any of those are not true, you should keep this setting set to ``None`` and find another way of determining HTTPS, perhaps via custom middleware."
msgstr ""

#: ../../ref/settings.txt:1656
# 51bf324a13bd456299d7eff4088dc4a3
msgid "SEND_BROKEN_LINK_EMAILS"
msgstr ""

#: ../../ref/settings.txt:1660
# 262e12ea3dff46f6835a1c4c8b6a8169
msgid "Whether to send an email to the :setting:`MANAGERS` each time somebody visits a Django-powered page that is 404ed with a non-empty referer (i.e., a broken link). This is only used if ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`). See also :setting:`IGNORABLE_404_URLS` and :doc:`/howto/error-reporting`."
msgstr ""

#: ../../ref/settings.txt:1669
# 538b524e7dee419492accd21e76d5712
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../ref/settings.txt:1671
# a8568cc20b5546798a99e97b504a9e7e
msgid "Default: Not defined."
msgstr ""

#: ../../ref/settings.txt:1673
# e4565a98462749da8fd9ad647ecc35d3
msgid "A dictionary of modules containing serializer definitions (provided as strings), keyed by a string identifier for that serialization type. For example, to define a YAML serializer, use::"
msgstr ""

#: ../../ref/settings.txt:1682
# 264cfdd62df84e9a95938fcdfb316a33
msgid "SERVER_EMAIL"
msgstr ""

#: ../../ref/settings.txt:1684
# aa19544ff91744d68b44544d7afbafe5
msgid "Default: ``'root@localhost'``"
msgstr ""

#: ../../ref/settings.txt:1686
# cce80c722f544f93b961342f924b3aaa
msgid "The email address that error messages come from, such as those sent to :setting:`ADMINS` and :setting:`MANAGERS`."
msgstr ""

#: ../../ref/settings.txt:1692
# 6b443e2445b146cf814caa44d2d81c36
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../ref/settings.txt:1694
# eb9178edfd9144a6bbd548b77ec17924
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../ref/settings.txt:1696
# 9cefbc4fc1744d4c9bf39a51248513a9
msgid "The age of session cookies, in seconds. See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1705
# eec740b1d12843a7b43cf1c2c7e501b0
msgid "The domain to use for session cookies. Set this to a string such as ``\".lawrence.com\"`` for cross-domain cookies, or use ``None`` for a standard domain cookie. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1712
# b3e17dc1fa624561b2e328032a88be90
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../ref/settings.txt:1716
# 215c5ba2f36e4543be169420e82439d0
msgid "Whether to use HTTPOnly flag on the session cookie. If this is set to ``True``, client-side JavaScript will not to be able to access the session cookie."
msgstr ""

#: ../../ref/settings.txt:1731
# de64a0c66fd245e78f4e4e73253495c2
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1733
# 57f7006c72f94354a17c087bbc6d0b67
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../ref/settings.txt:1735
# 62c55c56adf44eb389650236ad6f59ce
msgid "The name of the cookie to use for sessions. This can be whatever you want (but should be different from :setting:`LANGUAGE_COOKIE_NAME`). See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1742
# c2bf7b8ccb6845e6bfdb2cf0d962ff1f
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../ref/settings.txt:1746
# 902224b1121f4357b0df8a965422111e
msgid "The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path."
msgstr ""

#: ../../ref/settings.txt:1749
# 637daa3a2c1a4e43bed854a46cee9298
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie."
msgstr ""

#: ../../ref/settings.txt:1756
# 46827694c194421697ca85cea42fb7a0
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../ref/settings.txt:1760
# cf5dfb9b79944fbdacf31312ae3ee433
msgid "Whether to use a secure cookie for the session cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1768
# 1999e6bd32c54a47acf551648b2b1139
msgid "SESSION_ENGINE"
msgstr ""

#: ../../ref/settings.txt:1770
# 77e7e789d31d48bea0674a393f2eeb80
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../ref/settings.txt:1772
# 54dac6e5571b40c19c412182cc8ba0f5
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

#: ../../ref/settings.txt:1774
# 0bfff4f03b644115b7b0cfe3b88d296e
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../ref/settings.txt:1775
# 7b9ba225fa18410ea8cb5576cded628c
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../ref/settings.txt:1776
# 95b37f68c3354c158046f14412422ffb
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../ref/settings.txt:1777
# 540d680cac0a4aa3bf83e6c443d216ad
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../ref/settings.txt:1778
# fa1069aac46f4fc78b689a78632a30bb
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../ref/settings.txt:1780
# f130eb214d854199884a126275eddbc1
msgid "See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1785
# 98e3b580f9324e6384c1115b506ce108
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../ref/settings.txt:1789
# 256dcf57d1694dc3a82e92ca4d388643
msgid "Whether to expire the session when the user closes his or her browser. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1795
# 9424d7dba4514eebbc2729bec730a9b2
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:1799
# 16a8af0e4d0b44098100d51ed0284a99
msgid "If you're using file-based session storage, this sets the directory in which Django will store session data. See :doc:`/topics/http/sessions`. When the default value (``None``) is used, Django will use the standard temporary directory for the system."
msgstr ""

#: ../../ref/settings.txt:1807
# 883d8df2b7c04a6facaec03f01034405
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../ref/settings.txt:1811
# d7c3f10b30c64c449bf8424a6e916fee
msgid "Whether to save the session data on every request. See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1817
# c17dece67da54d29ac7afef0e4d8a9eb
msgid "SHORT_DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1821
# 970960b7c4d74a98ad7b7d675726ce0b
msgid "Default: ``m/d/Y`` (e.g. ``12/31/2003``)"
msgstr ""

#: ../../ref/settings.txt:1823
# b7b26beed769446698cc1284f674b153
msgid "An available formatting that can be used for displaying date fields on templates. Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding locale-dictated format has higher precedence and will be applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1828
# 4804ec72e34a412c9891c782530e3fff
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1833
# dace09875c6447cba9808a79838a0890
msgid "SHORT_DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1837
# 5eb123525edb48bfa218b236582dfb63
msgid "Default: ``m/d/Y P`` (e.g. ``12/31/2003 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:1839
# 755114b951964f87a27a95f04f279741
msgid "An available formatting that can be used for displaying datetime fields on templates. Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding locale-dictated format has higher precedence and will be applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1844
# d40d44378799410a8b343b27cd79f863
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1849
# 3bcb58c11fec4bffbab1e3be16538210
msgid "SIGNING_BACKEND"
msgstr ""

#: ../../ref/settings.txt:1853
# 432f561813124aaabb45566a39e0725c
msgid "Default: 'django.core.signing.TimestampSigner'"
msgstr ""

#: ../../ref/settings.txt:1855
# f63f7e089b0244949b2f8fedba66e57a
msgid "The backend used for signing cookies and other data."
msgstr ""

#: ../../ref/settings.txt:1857
# fc901a234e8b40a5a2a8df941800cf30
msgid "See also the :doc:`/topics/signing` documentation."
msgstr ""

#: ../../ref/settings.txt:1862
# f6243bf8488149a3bb6f6a2278f143e8
msgid "SITE_ID"
msgstr ""

#: ../../ref/settings.txt:1866
# d2255f7436454e5fbba99e30d6be9fca
msgid "The ID, as an integer, of the current site in the ``django_site`` database table. This is used so that application data can hook into specific site(s) and a single database can manage content for multiple sites."
msgstr ""

#: ../../ref/settings.txt:1870
# 1f2b0bd57dbd4e8d891b656f55103d3f
msgid "See :doc:`/ref/contrib/sites`."
msgstr ""

#: ../../ref/settings.txt:1877
# e34169fd72084d068c992fa71bdc5986
msgid "STATIC_ROOT"
msgstr ""

#: ../../ref/settings.txt:1881
# af46068a8ccb48dc8d8816554782778d
msgid "The absolute path to the directory where :djadmin:`collectstatic` will collect static files for deployment."
msgstr ""

#: ../../ref/settings.txt:1884
# e43cd9decc8a481ebc4b053718ac92d9
msgid "Example: ``\"/home/example.com/static/\"``"
msgstr ""

#: ../../ref/settings.txt:1886
# 600b87d5b9354bec859ed3a57bf4fbdf
msgid "If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled (default) the :djadmin:`collectstatic` management command will collect static files into this directory. See the howto on :doc:`managing static files</howto/static-files>` for more details about usage."
msgstr ""

#: ../../ref/settings.txt:1893
# 044a3bd060ed4300b823b032eb75ab45
msgid "This should be an (initially empty) destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is **not** a place to store your static files permanently. You should do that in directories that will be found by :doc:`staticfiles</ref/contrib/staticfiles>`'s :setting:`finders<STATICFILES_FINDERS>`, which by default, are ``'static/'`` app sub-directories and any directories you include in :setting:`STATICFILES_DIRS`)."
msgstr ""

#: ../../ref/settings.txt:1902
# 234e0e729bfb4bc589d3c524a48e0ce4
msgid "See :doc:`staticfiles reference</ref/contrib/staticfiles>` and :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/settings.txt:1908
# 04442ee7e99d4c20a1468ce11486c65c
msgid "STATIC_URL"
msgstr ""

#: ../../ref/settings.txt:1912
# 629014e9fe6c40e0bf2cf29ac66b58f9
msgid "URL to use when referring to static files located in :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:1914
# 8ff89fd5063e457ab2b5fe921c3d926b
msgid "Example: ``\"/site_media/static/\"`` or ``\"http://static.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1916
# a82fa8a9db81401b94b661a771a65f6d
msgid "If not ``None``, this will be used as the base path for :ref:`media definitions<form-media-paths>` and the :doc:`staticfiles app</ref/contrib/staticfiles>`."
msgstr ""

#: ../../ref/settings.txt:1920
# 10521b87c2094157891852f78a955ada
msgid "It must end in a slash if set to a non-empty value."
msgstr ""

#: ../../ref/settings.txt:1922
# f1f0cf0e65aa4212a7a1ede356257f6e
msgid "See :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:1927
# 9b7f03a50cee417f9b04d7f32a4cc4db
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

#: ../../ref/settings.txt:1939
# 92b1f77336594922ac4f4905a26e091b
msgid "A tuple of callables that are used to populate the context in ``RequestContext``. These callables take a request object as their argument and return a dictionary of items to be merged into the context."
msgstr ""

#: ../../ref/settings.txt:1964
# 042ac13bf4c4471fb4f1ed427d857687
msgid "TEMPLATE_DEBUG"
msgstr ""

#: ../../ref/settings.txt:1968
# dab7c340117d4b4387803c4d8cd26b8e
msgid "A boolean that turns on/off template debug mode. If this is ``True``, the fancy error page will display a detailed report for any exception raised during template rendering. This report contains the relevant snippet of the template, with the appropriate line highlighted."
msgstr ""

#: ../../ref/settings.txt:1973
# c19c176982914f739a9aac2c43194fa9
msgid "Note that Django only displays fancy error pages if :setting:`DEBUG` is ``True``, so you'll want to set that to take advantage of this setting."
msgstr ""

#: ../../ref/settings.txt:1976
# e24890135a024585a422fc04d94619d2
msgid "See also :setting:`DEBUG`."
msgstr ""

#: ../../ref/settings.txt:1981
# 4c2ec20c7d284daea0dc9b337dee7179
msgid "TEMPLATE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1985
# 8777f742119c40b6a9f91bbe791b7d7b
msgid "List of locations of the template source files searched by :class:`django.template.loaders.filesystem.Loader`, in search order."
msgstr ""

#: ../../ref/settings.txt:1990
# e9bcf3767106464db69eee13fd2fbddd
msgid "See :doc:`/topics/templates`."
msgstr ""

#: ../../ref/settings.txt:1995
# a7c152dd002d415ba4be558f7eb5313c
msgid "TEMPLATE_LOADERS"
msgstr ""

#: ../../ref/settings.txt:2002
# f62ce9952b8c4fecbb6c6a22a559fb45
msgid "A tuple of template loader classes, specified as strings. Each ``Loader`` class knows how to import templates from a particular source. Optionally, a tuple can be used instead of a string. The first item in the tuple should be the ``Loader``'s module, subsequent items are passed to the ``Loader`` during initialization. See :doc:`/ref/templates/api`."
msgstr ""

#: ../../ref/settings.txt:2017
# 8d7b206d8e98458dbaca1fb59c5ad65c
msgid "TEMPLATE_STRING_IF_INVALID"
msgstr ""

#: ../../ref/settings.txt:2021
# 5ea94cc0e9c7402ab16cccd2c2193124
msgid "Output, as a string, that the template system should use for invalid (e.g. misspelled) variables. See :ref:`invalid-template-variables`.."
msgstr ""

#: ../../ref/settings.txt:2027
# b04795cbf224488fb9d80c7b02bc3cb5
msgid "TEST_RUNNER"
msgstr ""

#: ../../ref/settings.txt:2029
# d4c5ca3552ab4d45976ed883a84d77fb
msgid "Default: ``'django.test.simple.DjangoTestSuiteRunner'``"
msgstr ""

#: ../../ref/settings.txt:2034
# 9e9ced1a767d4400b291c275ded04ab6
msgid "The name of the class to use for starting the test suite. See :doc:`/topics/testing`."
msgstr ""

#: ../../ref/settings.txt:2042
# 9e40ae26b02e4c17a602336a07e4a499
msgid "THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2046
# 83a84b23ef1a464a848b91d344767afa
msgid "Default: ``,`` (Comma)"
msgstr ""

#: ../../ref/settings.txt:2048
# ddfd94cb725c4e528aa01668e8b821e2
msgid "Default thousand separator used when formatting numbers. This setting is used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and :setting:`NUMBER_GROUPING` is greater than ``0``."
msgstr ""

#: ../../ref/settings.txt:2055
# e40f83c56aa247d48ade6e0cc7838644
msgid "See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2061
# 5e6214fe3dd7403482caf8745c4aeafb
msgid "TIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2063
# 961d56273c854a94babb365cf1db5563
msgid "Default: ``'P'`` (e.g. ``4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:2065
# 95db93cd1475427f9e83fdc65101d029
msgid "The default formatting to use for displaying time fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:2073
# 02032d10164244618309144ea96df87f
msgid "See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2078
# 532d856027a74ea6a7b24d6ce2f53a46
msgid "TIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:2082
# 4b9f2421169d485f9f0d5a72aa338c82
msgid "Default: ``('%H:%M:%S', '%H:%M')``"
msgstr ""

#: ../../ref/settings.txt:2084
# e8ea66be56b04fba9a51e29075214c20
msgid "A tuple of formats that will be accepted when inputting data on a time field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:2092
# 4085a2842a07481c92492a959c6ce43e
msgid "See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:2099
# 93743db4822247119235f20e556bd291
msgid "TIME_ZONE"
msgstr ""

#: ../../ref/settings.txt:2101
# bce930869c244da6a45788236346be11
msgid "Default: ``'America/Chicago'``"
msgstr ""

#: ../../ref/settings.txt:2109
# 14091b156a4446ba9fef61cda51dc174
msgid "A string representing the time zone for this installation, or ``None``. `See available choices`_. (Note that list of available choices lists more than one on the same line; you'll want to use just one of the choices for a given time zone. For instance, one line says ``'Europe/London GB GB-Eire'``, but you should use the first bit of that -- ``'Europe/London'`` -- as your :setting:`TIME_ZONE` setting.)"
msgstr ""

#: ../../ref/settings.txt:2116
# fdd4b7eb0a13429f92e6c0d89ba7e54a
msgid "Note that this isn't necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting."
msgstr ""

#: ../../ref/settings.txt:2120
# c816bce93b264b54ac09d07b0ca86bc6
msgid "When :setting:`USE_TZ` is ``False``, this is the time zone in which Django will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the default time zone that Django will use to display datetimes in templates and to interpret datetimes entered in forms."
msgstr ""

#: ../../ref/settings.txt:2125
# 101dcd8b20e9409caadf9917a2ff8acb
msgid "Django sets the ``os.environ['TZ']`` variable to the time zone you specify in the :setting:`TIME_ZONE` setting. Thus, all your views and models will automatically operate in this time zone. However, Django won't set the ``TZ`` environment variable under the following conditions:"
msgstr ""

#: ../../ref/settings.txt:2130
# 0b9b3e71d9a24cccbe9a3d45175c734f
msgid "If you're using the manual configuration option as described in :ref:`manually configuring settings <settings-without-django-settings-module>`, or"
msgstr ""

#: ../../ref/settings.txt:2134
# e843448ae85643f1960eb8b713cb63f1
msgid "If you specify ``TIME_ZONE = None``. This will cause Django to fall back to using the system time zone."
msgstr ""

#: ../../ref/settings.txt:2137
# 71f10f8900e648b5a91e7da71f8bf0ab
msgid "If Django doesn't set the ``TZ`` environment variable, it's up to you to ensure your processes are running in the correct environment."
msgstr ""

#: ../../ref/settings.txt:2141
# 3dfbb2781df94b79a46f20d45e363ab8
msgid "Django cannot reliably use alternate time zones in a Windows environment. If you're running Django on Windows, :setting:`TIME_ZONE` must be set to match the system time zone."
msgstr ""

#: ../../ref/settings.txt:2152
# 0e4db1636c3d47888d94972dbf7b916c
msgid "URL_VALIDATOR_USER_AGENT"
msgstr ""

#: ../../ref/settings.txt:2154
# 13ce99cf56a44e429aa029f260faa94d
msgid "Default: ``Django/<version> (https://www.djangoproject.com/)``"
msgstr ""

#: ../../ref/settings.txt:2156
# 8d7e4c06c5d64535bd8aed8d18d8702f
msgid "The string to use as the ``User-Agent`` header when checking to see if URLs exist (see the ``verify_exists`` option on :class:`~django.db.models.URLField`). This setting was deprecated in 1.3.1 along with ``verify_exists`` and will be removed in 1.4."
msgstr ""

#: ../../ref/settings.txt:2164
# 32d3c8fac3f643eba2950dbf09c695be
msgid "USE_ETAGS"
msgstr ""

#: ../../ref/settings.txt:2168
# 01aae6e9477c4dcd9ddf3f93b37295bf
msgid "A boolean that specifies whether to output the \"Etag\" header. This saves bandwidth but slows down performance. This is used by the ``CommonMiddleware`` (see :doc:`/topics/http/middleware`) and in the``Cache Framework`` (see :doc:`/topics/cache`)."
msgstr ""

#: ../../ref/settings.txt:2176
# 981bd392853a4be69e3e99cb1fcc790e
msgid "USE_I18N"
msgstr ""

#: ../../ref/settings.txt:2180
# 11403318cec947b4b24fc60e2cf01823
msgid "A boolean that specifies whether Django's translation system should be enabled. This provides an easy way to turn it off, for performance. If this is set to ``False``, Django will make some optimizations so as not to load the translation machinery."
msgstr ""

#: ../../ref/settings.txt:2185
# 3493d850d5514f04818ed8ef6b1be01d
msgid "See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and :setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2190
# 0969f2dd9c9f441399452e83eb8670b7
msgid "USE_L10N"
msgstr ""

#: ../../ref/settings.txt:2196
# 48896036aa574f5b8cd9bac2f222936d
msgid "A boolean that specifies if localized formatting of data will be enabled by default or not. If this is set to ``True``, e.g. Django will display numbers and dates using the format of the current locale."
msgstr ""

#: ../../ref/settings.txt:2200
# 915ccb9c2d62496a8a9a4705b51479a8
msgid "See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and :setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2204
# 19b9a244c1f64ce5be661eb9383b7d99
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``USE_L10N = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2210
# ef27402e63204064a501b64d42fff50e
msgid "USE_THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2216
# a0bb888dc5a841fa88d1ae1465d6a38e
msgid "A boolean that specifies whether to display numbers using a thousand separator. When :setting:`USE_L10N` is set to ``True`` and if this is also set to ``True``, Django will use the values of :setting:`THOUSAND_SEPARATOR` and :setting:`NUMBER_GROUPING` to format numbers."
msgstr ""

#: ../../ref/settings.txt:2221
# 2305cbe59fcf41279aaca7874d17d331
msgid "See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and :setting:`THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2227
# 30ee6353457845b6ba9041e5ab2e1404
msgid "USE_TZ"
msgstr ""

#: ../../ref/settings.txt:2233
# 8d42ccab809d4445ad4872c431f31c8c
msgid "A boolean that specifies if datetimes will be timezone-aware by default or not. If this is set to ``True``, Django will use timezone-aware datetimes internally. Otherwise, Django will use naive datetimes in local time."
msgstr ""

#: ../../ref/settings.txt:2237
# 44d7ab663f6a43d5b426513ccbc2190e
msgid "See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`."
msgstr ""

#: ../../ref/settings.txt:2241
# 3b4cf6f125dc4424a3c1707682051f58
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``USE_TZ = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2248
# db65d123cc4c4bbcac3365d91e89ec58
msgid "USE_X_FORWARDED_HOST"
msgstr ""

#: ../../ref/settings.txt:2254
# 9a3764972ef245a7b69c75c1617e4970
msgid "A boolean that specifies whether to use the X-Forwarded-Host header in preference to the Host header. This should only be enabled if a proxy which sets this header is in use."
msgstr ""

#: ../../ref/settings.txt:2261
# 2cd44cab164444ca803eeb1e06a8f289
msgid "WSGI_APPLICATION"
msgstr ""

#: ../../ref/settings.txt:2267
# a2747ac06fe64f7f9e622fa09f818ec5
msgid "The full Python path of the WSGI application object that Django's built-in servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin.py startproject <startproject>` management command will create a simple ``wsgi.py`` file with an ``application`` callable in it, and point this setting to that ``application``."
msgstr ""

#: ../../ref/settings.txt:2273
# 79ae0e2de9d9427fa902ff19f740de66
msgid "If not set, the return value of :func:`django.core.wsgi.get_wsgi_application` will be used. In this case, the behavior of :djadmin:`runserver` will be identical to previous Django versions."
msgstr ""

#: ../../ref/settings.txt:2280
# d416047157394d0799db96a5b57c8a70
msgid "YEAR_MONTH_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2282
# 601dcf57a4f74822b791513e8d7e5458
msgid "Default: ``'F Y'``"
msgstr ""

#: ../../ref/settings.txt:2284
# f50eaaeb8caf40ee86f05c08cc33c4d7
msgid "The default formatting to use for date fields on Django admin change-list pages -- and, possibly, by other parts of the system -- in cases when only the year and month are displayed."
msgstr ""

#: ../../ref/settings.txt:2288
# 0794db296ab943b1b7a2ced7f7011a28
msgid "For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given month displays the month and the year. Different locales have different formats. For example, U.S. English would say \"January 2006,\" whereas another locale might say \"2006/January.\""
msgstr ""

#: ../../ref/settings.txt:2293
# 78524e47e2614cc68ec36207322fa610
msgid "See :tfilter:`allowed date format strings <date>`. See also :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`MONTH_DAY_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2300
# 3f664c2e8c3e4d4c92024e157dc02343
msgid "X_FRAME_OPTIONS"
msgstr ""

#: ../../ref/settings.txt:2302
# ce4e4d7e7fd84fa0b224dcfa0a7a1be5
msgid "Default: ``'SAMEORIGIN'``"
msgstr ""

#: ../../ref/settings.txt:2304
# 437f89fe27be4b158f8271abda99059a
msgid "The default value for the X-Frame-Options header used by :class:`~django.middleware.clickjacking.XFrameOptionsMiddleware`. See the :doc:`clickjacking protection </ref/clickjacking/>` documentation."
msgstr ""

#: ../../ref/settings.txt:2309
# 2f20f05f45a44e7cbf2e02706e91f9ad
msgid "Deprecated settings"
msgstr ""

#: ../../ref/settings.txt:2314
# 1ad4e84c122a46a2949a2eb46ef1aa1c
msgid "ADMIN_MEDIA_PREFIX"
msgstr ""

#: ../../ref/settings.txt:2324
# 51f3aaaa4c074337a915ce49ba9a8c9f
msgid "CACHE_BACKEND"
msgstr ""

#: ../../ref/settings.txt:2333
# 2850689c57ee4c2e8b86c2418e287bee
msgid "IGNORABLE_404_ENDS"
msgstr ""

#: ../../ref/settings.txt:2341
# afcdd4643cfe462e8159d258e047b8a0
msgid "IGNORABLE_404_STARTS"
msgstr ""

#: ../../ref/signals.txt:3
# b1b1265a924e482b8a5917fa3c694533
msgid "Signals"
msgstr ""

#: ../../ref/signals.txt:5
# 03635e95c21c4ebbb5061a96531b2fdd
msgid "A list of all the signals that Django sends."
msgstr ""

#: ../../ref/signals.txt:9
# 0e4e850ef62642e3b58aa47049bbc762
msgid "See the documentation on the :doc:`signal dispatcher </topics/signals>` for information regarding how to register for and receive signals."
msgstr ""

#: ../../ref/signals.txt:12
# 6636cb7cf1894cb59604617f3db941d2
msgid "The :doc:`comment framework </ref/contrib/comments/index>` sends a :doc:`set of comment-related signals </ref/contrib/comments/signals>`."
msgstr ""

#: ../../ref/signals.txt:15
# a856a2241fe24090bf19ad48f095973d
msgid "The :doc:`authentication framework </topics/auth>` sends :ref:`signals when a user is logged in / out <topics-auth-signals>`."
msgstr ""

#: ../../ref/signals.txt:19
# 85ff7458a0fd4a2095670080d0efd2d5
msgid "Model signals"
msgstr ""

#: ../../ref/signals.txt:24
# 3a18b62a3b51439d99510885ae219a16
msgid "The :mod:`django.db.models.signals` module defines a set of signals sent by the module system."
msgstr ""

#: ../../ref/signals.txt:29
# e9decefb62ee45d39ab5a334749e0f6a
msgid "Many of these signals are sent by various model methods like :meth:`~django.db.models.Model.__init__` or :meth:`~django.db.models.Model.save` that you can overwrite in your own code."
msgstr ""

#: ../../ref/signals.txt:34
# 275f7066d2084e51b16a1667af349615
msgid "If you override these methods on your model, you must call the parent class' methods for this signals to be sent."
msgstr ""

#: ../../ref/signals.txt:37
# 6f2f472ccf6b4a06919f19abf6b2bbc4
msgid "Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected.  To prevent this, pass ``weak=False`` when you call the signal's :meth:`~django.dispatch.Signal.connect`."
msgstr ""

#: ../../ref/signals.txt:42
# b872776f6906485dba92479f63eed1e1
msgid "pre_init"
msgstr ""

#: ../../ref/signals.txt:49
# cc29b96149e54df286b7eadea39c2897
msgid "Whenever you instantiate a Django model,, this signal is sent at the beginning of the model's :meth:`~django.db.models.Model.__init__` method."
msgstr ""

#: ../../ref/signals.txt:55
# 2166abd7bca446628f0746b73466f373
msgid "The model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:58
# ee6f3de72b0445798a38a5b0d6b457bb
msgid "A list of positional arguments passed to :meth:`~django.db.models.Model.__init__`:"
msgstr ""

#: ../../ref/signals.txt:62
# ad2ffcd6f2e24be388a7ae1d808f1255
msgid "A dictionary of keyword arguments passed to :meth:`~django.db.models.Model.__init__`:."
msgstr ""

#: ../../ref/signals.txt:65
# f92579aeef9a47438d998039fa04f062
msgid "For example, the :doc:`tutorial </intro/tutorial01>` has this line::"
msgstr ""

#: ../../ref/signals.txt:69
# 46c34e9e7a47409f9e83f752115b4ebc
msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr ""

#: ../../ref/signals.txt:74
#: ../../ref/signals.txt:291
#: ../../ref/signals.txt:317
# 907c07f829ad404bb0182e8514a70386
# 5497dc8d7fd94b36a52a86c18bd842bf
# e3384a7c561a41908c34b0c94acd7f1c
msgid "``sender``"
msgstr ""

#: ../../ref/signals.txt:74
# 390c7a984e114629a1ddeaab07f7f80a
msgid "``Poll`` (the class itself)"
msgstr ""

#: ../../ref/signals.txt:76
# 2748a4f6a87e46c18ca71eb81bed935c
msgid "``args``"
msgstr ""

#: ../../ref/signals.txt:76
# b468acb9c4e6437b857c12bac882ae1b
msgid "``[]`` (an empty list because there were no positional arguments passed to ``__init__``.)"
msgstr ""

#: ../../ref/signals.txt:79
# dac7317f90164363b47a5a3dedb14129
msgid "``kwargs``"
msgstr ""

#: ../../ref/signals.txt:79
# c6a0c46a9fcc4755970210725b3c6e98
msgid "``{'question': \"What's up?\", 'pub_date': datetime.now()}``"
msgstr ""

#: ../../ref/signals.txt:83
# af459a8078ed4008ab81c44b6c7a67f0
msgid "post_init"
msgstr ""

#: ../../ref/signals.txt:88
# 4e8c1fac38f74d58badb1ff5820be20d
msgid "Like pre_init, but this one is sent when the :meth:`~django.db.models.Model.__init__`: method finishes."
msgstr ""

#: ../../ref/signals.txt:93
# af46a726dc894fd9872eed0dc4474a81
msgid "As above: the model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:96
# e17c33fd3b1b4f37bde864ff3b7bb84d
msgid "The actual instance of the model that's just been created."
msgstr ""

#: ../../ref/signals.txt:99
# eea7410783fa4542b8de8c42d79c6c0a
msgid "pre_save"
msgstr ""

#: ../../ref/signals.txt:104
# 7f2723e03db049b393bef966b35b6b28
msgid "This is sent at the beginning of a model's :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:110
#: ../../ref/signals.txt:138
#: ../../ref/signals.txt:169
#: ../../ref/signals.txt:192
# 5280f1ce87004f148e354f974d2f3c0b
# c2c60d6b9c0e489e88fc5c97b8d49ef7
# 54aaaff5c99246cd91cdb2aa279d06b4
# 8309d6a5b74a4aeeab2303d3d170c525
msgid "The model class."
msgstr ""

#: ../../ref/signals.txt:113
#: ../../ref/signals.txt:141
# 592459a21d9b40028935ff23a8d096a4
# 43879488e97b47b789dc272e3437cd12
msgid "The actual instance being saved."
msgstr ""

#: ../../ref/signals.txt:116
#: ../../ref/signals.txt:147
# 6e10189bd20a4805bf3bdb401d759234
# c7e4d44cbc7f40bdbd910724b21d752b
msgid "A boolean; ``True`` if the model is saved exactly as presented (i.e. when loading a fixture). One should not query/modify other records in the database as the database might not be in a consistent state yet."
msgstr ""

#: ../../ref/signals.txt:124
#: ../../ref/signals.txt:155
#: ../../ref/signals.txt:177
#: ../../ref/signals.txt:203
#: ../../ref/signals.txt:267
# 0783a57851c64873b7456e454f659ef1
# 2b7066778012415d807a4d71725a90b9
# e67d057096d84042b36429e2c9641e51
# 73e9cdf10f4e48398cfb91b3c1b36a61
# 052bf4e722e34a48a7936c2746265698
msgid "The database alias being used."
msgstr ""

#: ../../ref/signals.txt:127
# 0e1fc91c7c254237b5e1458866df17c1
msgid "post_save"
msgstr ""

#: ../../ref/signals.txt:132
# 66dad5c9ca9c4d7fba6fb9b15f72f7df
msgid "Like :data:`pre_save`, but sent at the end of the :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:144
# f1cb5bfe15fd48eaa85add1c65b8f315
msgid "A boolean; ``True`` if a new record was created."
msgstr ""

#: ../../ref/signals.txt:158
# 1589deb8009d4f72b1ad7615dc6607f6
msgid "pre_delete"
msgstr ""

#: ../../ref/signals.txt:163
# 4349801a38d44c40bf789283f28d6f14
msgid "Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:172
#: ../../ref/signals.txt:195
# 5e68083972354ce5b6694e24d6aec8da
# 8a47da3f9a6f47d18fab026db3f52efb
msgid "The actual instance being deleted."
msgstr ""

#: ../../ref/signals.txt:180
# 7580fac450d542f3800b881158c6d8e3
msgid "post_delete"
msgstr ""

#: ../../ref/signals.txt:185
# ab96fe52b67b45c7a1aa9e1c315f22f3
msgid "Like :data:`pre_delete`, but sent at the end of a model's :meth:`~django.db.models.Model.delete` method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:197
# 7b8e88f121b94810baf314c12aeef6e6
msgid "Note that the object will no longer be in the database, so be very careful what you do with this instance."
msgstr ""

#: ../../ref/signals.txt:206
# f9d4fe35445b420baf574c3144405b9c
msgid "m2m_changed"
msgstr ""

#: ../../ref/signals.txt:213
# 723aa8ed43414c9cb3290571cc355ed6
msgid "Sent when a :class:`ManyToManyField` is changed on a model instance. Strictly speaking, this is not a model signal since it is sent by the :class:`ManyToManyField`, but since it complements the :data:`pre_save`/:data:`post_save` and :data:`pre_delete`/:data:`post_delete` when it comes to tracking changes to models, it is included here."
msgstr ""

#: ../../ref/signals.txt:222
# 2ca3b62681e7426687baef74f2566a76
msgid "The intermediate model class describing the :class:`ManyToManyField`. This class is automatically created when a many-to-many field is defined; you can access it using the ``through`` attribute on the many-to-many field."
msgstr ""

#: ../../ref/signals.txt:228
# 65f5d669584341f79182abe33c5a9366
msgid "The instance whose many-to-many relation is updated. This can be an instance of the ``sender``, or of the class the :class:`ManyToManyField` is related to."
msgstr ""

#: ../../ref/signals.txt:233
# b711f61b6d83482280b191367ed10210
msgid "A string indicating the type of update that is done on the relation. This can be one of the following:"
msgstr ""

#: ../../ref/signals.txt:237
# e2f1da31ca0e48939376a86357c2dab0
msgid "Sent *before* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:239
# 37824d224a8a4d67aa6b29488482aa4e
msgid "Sent *after* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:241
# 0aa55ed8111447b6919025862bc50e23
msgid "Sent *before* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:243
# 970eb839119d4fc698d92e85ddc38735
msgid "Sent *after* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:245
# 604e00fca2b7466a87c5a59001c68151
msgid "Sent *before* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:247
# 5a797295ecd441e89902336f7b6ea94b
msgid "Sent *after* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:250
# 1fbb0612d3de44e79525daaddd94ce2d
msgid "Indicates which side of the relation is updated (i.e., if it is the forward or reverse relation that is being modified)."
msgstr ""

#: ../../ref/signals.txt:254
# 47417e5ecd19440c9b567a1bfa970a23
msgid "The class of the objects that are added to, removed from or cleared from the relation."
msgstr ""

#: ../../ref/signals.txt:258
# b4a231f709b64c62a76ce6cff479ed42
msgid "For the ``pre_add``, ``post_add``, ``pre_remove`` and ``post_remove`` actions, this is a list of primary key values that have been added to or removed from the relation."
msgstr ""

#: ../../ref/signals.txt:262
# cbb7eb5e94994cc5a90c2a70ae87b012
msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr ""

#: ../../ref/signals.txt:269
# c25c1d8e0052432589026849561086ba
msgid "For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled like this::"
msgstr ""

#: ../../ref/signals.txt:280
# 9fc507e73d8b4d6dbd6ab418118f3385
msgid "If we would do something like this:"
msgstr ""

#: ../../ref/signals.txt:286
#: ../../ref/signals.txt:312
# 911c8804e02e40eaa470c9878fddc67a
# 0767e3d1758d43f3ab5b6243a5a92da8
msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr ""

#: ../../ref/signals.txt:291
#: ../../ref/signals.txt:317
# 334722bf79d34586bfc934c9d06aeb75
# 508bf3e24f2b4d74871b990343dc79d1
msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr ""

#: ../../ref/signals.txt:293
# 1ee3439325414a70ae4dda1b7f7e3f7e
msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:295
#: ../../ref/signals.txt:321
# 0e66c2481289467aa14df36a8dbaf8b0
# 7b022da6a64947bc9fc62dd00f812d2e
msgid "``action``"
msgstr ""

#: ../../ref/signals.txt:295
# d529f2c9cf5e46f1af8d01e9c91d5d0f
msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr ""

#: ../../ref/signals.txt:297
# d4cd0823529d4597b546cd9a23dc44d0
msgid "``False`` (``Pizza`` contains the :class:`ManyToManyField`, so this call modifies the forward relation)"
msgstr ""

#: ../../ref/signals.txt:300
# ecd1e4c75b9a4f5090c3a54506a90281
msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr ""

#: ../../ref/signals.txt:303
#: ../../ref/signals.txt:329
# 97bdbd12ef5f4f1a983b4bf0311a7bef
# dbf23d63dd884aa99e5140253fe71990
msgid "``pk_set``"
msgstr ""

#: ../../ref/signals.txt:303
# 4f1443a69bb54e5c96d8f9f6b6ace25c
msgid "``[t.id]`` (since only ``Topping t`` was added to the relation)"
msgstr ""

#: ../../ref/signals.txt:305
#: ../../ref/signals.txt:332
# 75d8d60efa654b8bb89c389fd59500be
# a3b174fa65554fd289da9b649ba0997a
msgid "``\"default\"`` (since the default router sends writes here)"
msgstr ""

#: ../../ref/signals.txt:308
# 5d4b4ee5c76d4af6a901cb14308bb9f6
msgid "And if we would then do something like this::"
msgstr ""

#: ../../ref/signals.txt:319
# 85a94c1e6abd46ec99037df7db121896
msgid "``t`` (the ``Topping`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:321
# 7d2a7b56a89c4faebbf21871cda60cc1
msgid "``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr ""

#: ../../ref/signals.txt:323
# 310204da083d4d2ebdb23a35b418138f
msgid "``True`` (``Pizza`` contains the :class:`ManyToManyField`, so this call modifies the reverse relation)"
msgstr ""

#: ../../ref/signals.txt:326
# e6cde8780ef5453ba846037557d4ebf6
msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr ""

#: ../../ref/signals.txt:329
# 53845a9012c84fad8485a0c9c8cdb1de
msgid "``[p.id]`` (since only ``Pizza p`` was removed from the relation)"
msgstr ""

#: ../../ref/signals.txt:336
# aa0dfacedc964ad491d368e3adc360ef
msgid "class_prepared"
msgstr ""

#: ../../ref/signals.txt:341
# 240984e6b1d54a1596b3dd333ca987ca
msgid "Sent whenever a model class has been \"prepared\" -- that is, once model has been defined and registered with Django's model system. Django uses this signal internally; it's not generally used in third-party applications."
msgstr ""

#: ../../ref/signals.txt:345
# 3c01a4e28be9479397f6ba21e797d6eb
msgid "Arguments that are sent with this signal:"
msgstr ""

#: ../../ref/signals.txt:348
# 52cbe2a6ec1e49cf9b183a9832fadc25
msgid "The model class which was just prepared."
msgstr ""

#: ../../ref/signals.txt:351
# 41ceb9980435483393d6129fda3a5ae2
msgid "Management signals"
msgstr ""

#: ../../ref/signals.txt:353
# 2083f2ade1f94a9a8cf16ac86e89be58
msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ""

#: ../../ref/signals.txt:356
# 39547de53b1b45eb813a860f3f9307a0
msgid "post_syncdb"
msgstr ""

#: ../../ref/signals.txt:361
# 8d60801fdfb14899b544b8844770b0af
msgid "Sent by the :djadmin:`syncdb` command after it installs an application, and the :djadmin:`flush` command."
msgstr ""

#: ../../ref/signals.txt:364
# a7236caeacbb4ff1b2f062d080f5ecdd
msgid "Any handlers that listen to this signal need to be written in a particular place: a ``management`` module in one of your :setting:`INSTALLED_APPS`. If handlers are registered anywhere else they may not be loaded by :djadmin:`syncdb`. It is important that handlers of this signal perform idempotent changes (e.g. no database alterations) as this may cause the :djadmin:`flush` management command to fail if it also ran during the :djadmin:`syncdb` command."
msgstr ""

#: ../../ref/signals.txt:375
# e011aae5be144d10ba45698f3bcc7482
msgid "The ``models`` module that was just installed. That is, if :djadmin:`syncdb` just installed an app called ``\"foo.bar.myapp\"``, ``sender`` will be the ``foo.bar.myapp.models`` module."
msgstr ""

#: ../../ref/signals.txt:380
# 97d2e05f53c04a8ea48011cd0d046efa
msgid "Same as ``sender``."
msgstr ""

#: ../../ref/signals.txt:383
# 4e84c9242f8c4027908dc24d406609b4
msgid "A list of the model classes from any app which :djadmin:`syncdb` has created so far."
msgstr ""

#: ../../ref/signals.txt:387
# 4d3284df5c6b4a2aaa438e91277a5c1d
msgid "Indicates how much information manage.py is printing on screen. See the :djadminopt:`--verbosity` flag for details."
msgstr ""

#: ../../ref/signals.txt:390
# b6cd31eb0c004708ae5d6736595c730c
msgid "Functions which listen for :data:`post_syncdb` should adjust what they output to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:394
# d58187782f1f4b6eaa42096d4ebc851a
msgid "If ``interactive`` is ``True``, it's safe to prompt the user to input things on the command line. If ``interactive`` is ``False``, functions which listen for this signal should not try to prompt for anything."
msgstr ""

#: ../../ref/signals.txt:398
# 0defde2f825a451194dbd59e2c1b3943
msgid "For example, the :mod:`django.contrib.auth` app only prompts to create a superuser when ``interactive`` is ``True``."
msgstr ""

#: ../../ref/signals.txt:401
# a6df32233c244cc8b4711dbc425b3fac
msgid "For example, ``yourapp/management/__init__.py`` could be written like::"
msgstr ""

#: ../../ref/signals.txt:413
# 46f9c62b815b464582a60286dc0d0a9a
msgid "Request/response signals"
msgstr ""

#: ../../ref/signals.txt:418
# bfe491ab4123467f94e063c7100deba0
msgid "Signals sent by the core framework when processing a request."
msgstr ""

#: ../../ref/signals.txt:421
# c7649d6f5d554ce294a5d27798f4c98d
msgid "request_started"
msgstr ""

#: ../../ref/signals.txt:426
# e146aa6c09384dc6bc6e4c67f2839171
msgid "Sent when Django begins processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:431
# 317bfbb158fa49008f174a7d5f04dc9d
msgid "The handler class -- e.g. :class:`django.core.handlers.wsgi.WsgiHandler` -- that handled the request."
msgstr ""

#: ../../ref/signals.txt:436
# 021f0993178244868253a2fe28113ecc
msgid "request_finished"
msgstr ""

#: ../../ref/signals.txt:441
# 0f820dc2f94f4fa390e44be022110328
msgid "Sent when Django finishes processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:446
#: ../../ref/signals.txt:459
# 963bc3720abf46adaf7638adfe56efdd
# cb0f30772f554296950f9beebc6de741
msgid "The handler class, as above."
msgstr ""

#: ../../ref/signals.txt:449
# 236fe672eb124f9aa2ded84fe0e122f7
msgid "got_request_exception"
msgstr ""

#: ../../ref/signals.txt:454
# 499ae359e68c4ea4878f401a9c711aca
msgid "This signal is sent whenever Django encounters an exception while processing an incoming HTTP request."
msgstr ""

#: ../../ref/signals.txt:462
# deb6186a7e924a0bb085f16e118ccfc1
msgid "The :class:`~django.http.HttpRequest` object."
msgstr ""

#: ../../ref/signals.txt:465
# 1ab9f927d35848b3b914590baed306f6
msgid "Test signals"
msgstr ""

#: ../../ref/signals.txt:470
# 74f751bd8053415eabcbde23bfca4df7
msgid "Signals only sent when :doc:`running tests </topics/testing>`."
msgstr ""

#: ../../ref/signals.txt:473
# e8f6c55c9e0f41f9bb30cfe3c8ea84ca
msgid "setting_changed"
msgstr ""

#: ../../ref/signals.txt:480
# 396f1b41c2a94ac8a02fef05f0b56d67
msgid "This signal is sent when the value of a setting is changed through the :meth:`django.test.TestCase.setting` context manager or the :func:`django.test.utils.override_settings` decorator/context manager."
msgstr ""

#: ../../ref/signals.txt:484
# 86ca48d4f3e541e68a12fe356e37c160
msgid "It's actually sent twice: when the new value is applied (\"setup\") and when the original value is restored (\"teardown\")."
msgstr ""

#: ../../ref/signals.txt:490
# 4d1a8a93ee6e42019bff3b1da4853c82
msgid "The settings handler."
msgstr ""

#: ../../ref/signals.txt:493
# 1e3795abac4b42679bafcbd3af1c5652
msgid "The name of the setting."
msgstr ""

#: ../../ref/signals.txt:496
# 3ecfd5b671e44146966330c0f71626cc
msgid "The value of the setting after the change. For settings that initially don't exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""

#: ../../ref/signals.txt:500
# 408b6cd1ca254dec9fc9f8eeae5ff7ab
msgid "template_rendered"
msgstr ""

#: ../../ref/signals.txt:505
# c3130a7e570944a1a4fb5bad731efd40
msgid "Sent when the test system renders a template. This signal is not emitted during normal operation of a Django server -- it is only available during testing."
msgstr ""

#: ../../ref/signals.txt:511
# 33b8f885ff0d460ab54c1fcf53421730
msgid "The :class:`~django.template.Template` object which was rendered."
msgstr ""

#: ../../ref/signals.txt:514
# 01a3601e1e9441b8912a7759e967464e
msgid "Same as sender"
msgstr ""

#: ../../ref/signals.txt:517
# 9004b5d1383e4569aa93a83b2ae9fef4
msgid "The :class:`~django.template.Context` with which the template was rendered."
msgstr ""

#: ../../ref/signals.txt:521
# f7669eb7e60a412abe013ed06198dcdd
msgid "Database Wrappers"
msgstr ""

#: ../../ref/signals.txt:526
# 0365deb07a35416ca82d12889cc0095f
msgid "Signals sent by the database wrapper when a database connection is initiated."
msgstr ""

#: ../../ref/signals.txt:530
# ccad7a9eedc5482c9e4eb0ed296997c9
msgid "connection_created"
msgstr ""

#: ../../ref/signals.txt:538
# 5ef5ff91b6244ecdb81063259d569f67
msgid "Sent when the database wrapper makes the initial connection to the database.  This is particularly useful if you'd like to send any post connection commands to the SQL backend."
msgstr ""

#: ../../ref/signals.txt:545
# 4abf2b805f4c47f386a0c40bc2033795
msgid "The database wrapper class -- i.e. :class:`django.db.backends.postgresql_psycopg2.DatabaseWrapper` or :class:`django.db.backends.mysql.DatabaseWrapper`, etc."
msgstr ""

#: ../../ref/signals.txt:550
# a68fb1f0637c4cf2aef132fa4f64f6ef
msgid "The database connection that was opened. This can be used in a multiple-database configuration to differentiate connection signals from different databases."
msgstr ""

#: ../../ref/template-response.txt:3
# 62c16afac99344199b59caa2569f4334
msgid "TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:10
# 2523c6448e6a4348ada46033acf34a8a
msgid "Standard :class:`~django.http.HttpResponse` objects are static structures. They are provided with a block of pre-rendered content at time of construction, and while that content can be modified, it isn't in a form that makes it easy to perform modifications."
msgstr ""

#: ../../ref/template-response.txt:15
# ba13e01cfd1342c488d7c97e55094758
msgid "However, it can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../ref/template-response.txt:20
# b9bc75025ff240f28a21afd2a6bcb5ba
msgid "TemplateResponse provides a way to do just that. Unlike basic :class:`~django.http.HttpResponse` objects, TemplateResponse objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../ref/template-response.txt:27
# 7f49e34bbd4b47299714aed6389ab306
msgid "SimpleTemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:36
# 3b2c6d828b134d53a0989ca8641f9399
msgid "The name of the template to be rendered. Accepts a :class:`~django.template.Template` object, a path to a template or list of template paths."
msgstr ""

#: ../../ref/template-response.txt:40
# 8bdf76acf06c47f49d22db863a0e6bc9
msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr ""

#: ../../ref/template-response.txt:44
# c58ddc9af11a4717b29bb3b3da15f50e
msgid "The context data to be used when rendering the template. It can be a dictionary or a context object."
msgstr ""

#: ../../ref/template-response.txt:47
# 4fc3cb77a00c492398168aa1e6e578c9
msgid "Example: ``{'foo': 123}``"
msgstr ""

#: ../../ref/template-response.txt:51
# c1a4c915ce344eaaa9d626bf58fee23e
msgid "The current rendered value of the response content, using the current template and context data."
msgstr ""

#: ../../ref/template-response.txt:56
# 5ad9dc6393e548fcb2296c9b2cf619dd
msgid "A boolean indicating whether the response content has been rendered."
msgstr ""

#: ../../ref/template-response.txt:63
# cd45add744584ec68e8e87c41b01332d
msgid "Instantiates a :class:`~django.template.response.SimpleTemplateResponse` object with the given template, context, MIME type and HTTP status."
msgstr ""

#: ../../ref/template-response.txt:68
#: ../../ref/template-response.txt:159
# bc8c7cc852764aaba5f98df2b8f2ed9f
# adc57c94d7d741b1805969e7b69127c0
msgid "The full name of a template, or a sequence of template names. :class:`~django.template.Template` instances can also be used."
msgstr ""

#: ../../ref/template-response.txt:72
#: ../../ref/template-response.txt:163
# 8f64a6572fa045ec85f8550566b72100
# 0a42c56c14d24373a9ed3ba514daad0b
msgid "A dictionary of values to add to the template context. By default, this is an empty dictionary. :class:`~django.template.Context` objects are also accepted as ``context`` values."
msgstr ""

#: ../../ref/template-response.txt:77
#: ../../ref/template-response.txt:168
# eb67dc4aaac84ae9a190e896e4a6d987
# ac9b281387724b619b672138f2e412f3
msgid "The HTTP Status code for the response."
msgstr ""

#: ../../ref/template-response.txt:80
#: ../../ref/template-response.txt:171
# 39f8b7a22114495982846a5f3f89840a
# 2ee179199f2d40079f53940532da129c
msgid "An alias for ``mimetype``. Historically, this parameter was only called ``mimetype``, but since this is actually the value included in the HTTP ``Content-Type`` header, it can also include the character set encoding, which makes it more than just a MIME type specification. If ``mimetype`` is specified (not ``None``), that value is used. Otherwise, ``content_type`` is used. If neither is given, :setting:`DEFAULT_CONTENT_TYPE` is used."
msgstr ""

#: ../../ref/template-response.txt:91
# f639d1d687dc4ea59435d26a3acd86f1
msgid "Converts context data into a context instance that can be used for rendering a template. Accepts a dictionary of context data or a context object. Returns a :class:`~django.template.Context` instance containing the provided data."
msgstr ""

#: ../../ref/template-response.txt:96
# 45f79f46e17c44c8bba61aae4675bc4a
msgid "Override this method in order to customize context instantiation."
msgstr ""

#: ../../ref/template-response.txt:100
# 7b9763f740da46cbabf0ae6d131d4f57
msgid "Resolves the template instance to use for rendering. Accepts a path of a template to use, or a sequence of template paths. :class:`~django.template.Template` instances may also be provided. Returns the :class:`~django.template.Template` instance to be rendered."
msgstr ""

#: ../../ref/template-response.txt:106
# cfd8e09f58044e449e42ae97bc77b220
msgid "Override this method in order to customize template rendering."
msgstr ""

#: ../../ref/template-response.txt:110
# 96ffa14fb3f749e6aa1965bb2532bb25
msgid "Add a callback that will be invoked after rendering has taken place. This hook can be used to defer certain processing operations (such as caching) until after rendering has occurred."
msgstr ""

#: ../../ref/template-response.txt:114
# 8718bebccbb74968a3a7235529a37e9d
msgid "If the :class:`~django.template.response.SimpleTemplateResponse` has already been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:118
# 112ef47ab8ee4dfd9204061986465fd9
msgid "When called, callbacks will be passed a single argument -- the rendered :class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""

#: ../../ref/template-response.txt:122
# cdf8089a974d452fbe061130ac1edbab
msgid "If the callback returns a value that is not `None`, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)"
msgstr ""

#: ../../ref/template-response.txt:128
# c9ce1264806b414bbbf7b16837621ff6
msgid "Sets :attr:`response.content` to the result obtained by :attr:`SimpleTemplateResponse.rendered_content`, runs all post-rendering callbacks, and returns the resulting response object."
msgstr ""

#: ../../ref/template-response.txt:132
# 9f25b0c2f99b468287055ad7476d42a8
msgid ":meth:`~SimpleTemplateResponse.render()` will only have an effect the first time it is called. On subsequent calls, it will return the result obtained from the first call."
msgstr ""

#: ../../ref/template-response.txt:138
# e6e5ca68abcd4c7f894c242b6497dc8d
msgid "TemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:142
# c1eaf53331c0491b808225865c6747a3
msgid "TemplateResponse is a subclass of :class:`~django.template.response.SimpleTemplateResponse` that uses a :class:`~django.template.RequestContext` instead of a :class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:152
# d0738974d318406bbf742a6eecdb4ef3
msgid "Instantiates an ``TemplateResponse`` object with the given template, context, MIME type and HTTP status."
msgstr ""

#: ../../ref/template-response.txt:156
# 7b6b7730d5cb47a7a18a5f750eeb2185
msgid "An :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/template-response.txt:180
# e74cbb1895b64d52b6f177e95db3a1c1
msgid "A hint indicating which application contains the current view. See the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` for more information."
msgstr ""

#: ../../ref/template-response.txt:186
# 3fb78d451740452ab90923e4a5496aca
msgid "The rendering process"
msgstr ""

#: ../../ref/template-response.txt:188
# 472916bedf4444fcaac47cc005de7701
msgid "Before a :class:`~django.template.response.TemplateResponse` instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client."
msgstr ""

#: ../../ref/template-response.txt:193
# 963cfb9e02424d25a5f112eb3fabcd96
msgid "There are three circumstances under which a TemplateResponse will be rendered:"
msgstr ""

#: ../../ref/template-response.txt:196
# 69a2f7817cde42a3ba1362e4abd43c70
msgid "When the TemplateResponse instance is explicitly rendered, using the :meth:`SimpleTemplateResponse.render()` method."
msgstr ""

#: ../../ref/template-response.txt:199
# 3916d3da1c8e4e4fb77cb8d68b481266
msgid "When the content of the response is explicitly set by assigning :attr:`response.content`."
msgstr ""

#: ../../ref/template-response.txt:202
# 61033f2b3d394b2cab84b347ac8df13e
msgid "After passing through template response middleware, but before passing through response middleware."
msgstr ""

#: ../../ref/template-response.txt:205
# 91440083809e41a09c87432bedd4e98a
msgid "A TemplateResponse can only be rendered once. The first call to :meth:`SimpleTemplateResponse.render` sets the content of the response; subsequent rendering calls do not change the response content."
msgstr ""

#: ../../ref/template-response.txt:210
# 5f35a85026ce42508c945b0f2f1fe54a
msgid "However, when :attr:`response.content` is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually::"
msgstr ""

#: ../../ref/template-response.txt:233
# f3674fc6b9d8430f8cbcf59e2920ac4c
msgid "Post-render callbacks"
msgstr ""

#: ../../ref/template-response.txt:235
# e5f65b364bf84cffb91b810bb9074b75
msgid "Some operations -- such as caching -- cannot be performed on an unrendered template. They must be performed on a fully complete and rendered response."
msgstr ""

#: ../../ref/template-response.txt:239
# c73532d6416542a7b76cc8c42645a71f
msgid "If you're using middleware, the solution is easy. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the Response middleware is guaranteed to execute after template rendering has taken place."
msgstr ""

#: ../../ref/template-response.txt:244
# 19646fb17389416bacf57e4e025a322e
msgid "However, if you're using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately."
msgstr ""

#: ../../ref/template-response.txt:247
# 164da16416b1450c881fe156c498694f
msgid "To compensate for this (and any other analogous use cases), :class:`TemplateResponse` allows you to register callbacks that will be invoked when rendering has completed. Using this callback, you can defer critical processing until a point where you can guarantee that rendered content will be available."
msgstr ""

#: ../../ref/template-response.txt:253
# 6a61e70c23374292ba7d6a91501735ec
msgid "To define a post-render callback, just define a function that takes a single argument -- response -- and register that function with the template response::"
msgstr ""

#: ../../ref/template-response.txt:269
# 485827f4bc37418c8eb1ccecbe72dcb7
msgid "``my_render_callback()`` will be invoked after the ``mytemplate.html`` has been rendered, and will be provided the fully rendered :class:`TemplateResponse` instance as an argument."
msgstr ""

#: ../../ref/template-response.txt:273
# 4d79b7d6a59142c28e068c5e29a7edaa
msgid "If the template has already been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:277
# 26cea4e9cc9a4ee892c655446a0dee5a
msgid "Using TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:279
# 09c10d38de544ebdb9c25a759a60dfbf
msgid "A TemplateResponse object can be used anywhere that a normal HttpResponse can be used. It can also be used as an alternative to calling :func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/template-response.txt:283
# 1856467a4cd94b87982a80f6d0a40a6e
msgid "For example, the following simple view returns a :class:`TemplateResponse()` with a simple template, and a context containing a queryset::"
msgstr ""

#: ../../ref/templates/api.txt:3
# 2abbc85713554e439f434f9b83655e40
msgid "The Django template language: For Python programmers"
msgstr ""

#: ../../ref/templates/api.txt:5
# 4c69102afdc54e2cac7d537ad5af9c3b
msgid "This document explains the Django template system from a technical perspective -- how it works and how to extend it. If you're just looking for reference on the language syntax, see :doc:`/topics/templates`."
msgstr ""

#: ../../ref/templates/api.txt:9
# 81fdbefaf9864abba349bb372f2ef238
msgid "If you're looking to use the Django template system as part of another application -- i.e., without the rest of the framework -- make sure to read the `configuration`_ section later in this document."
msgstr ""

#: ../../ref/templates/api.txt:18
# f3eeeced2eda49358c250f1413ff16c5
msgid "A **template** is a text document, or a normal Python string, that is marked-up using the Django template language. A template can contain **block tags** or **variables**."
msgstr ""

#: ../../ref/templates/api.txt:22
# 31a2298dfb454e84801a75f8225a92d4
msgid "A **block tag** is a symbol within a template that does something."
msgstr ""

#: ../../ref/templates/api.txt:24
# 9196fa35975d4c56a5f0603bbc2c7bff
msgid "This definition is deliberately vague. For example, a block tag can output content, serve as a control structure (an \"if\" statement or \"for\" loop), grab content from a database or enable access to other template tags."
msgstr ""

#: ../../ref/templates/api.txt:28
# d8ba3f88e7ef4820bb4cc3279cf7af87
msgid "Block tags are surrounded by ``\"{%\"`` and ``\"%}\"``."
msgstr ""

#: ../../ref/templates/api.txt:30
# 02c45deb39524b00aa762a448b3c7a12
msgid "Example template with block tags:"
msgstr ""

#: ../../ref/templates/api.txt:36
# de3a5e380c904f95ac37dfea21cf2a50
msgid "A **variable** is a symbol within a template that outputs a value."
msgstr ""

#: ../../ref/templates/api.txt:38
# 663772c710724875be2ba2a04212ebb9
msgid "Variable tags are surrounded by ``\"{{\"`` and ``\"}}\"``."
msgstr ""

#: ../../ref/templates/api.txt:40
# bd464d9798754632b8b69a5a19e13751
msgid "Example template with variables:"
msgstr ""

#: ../../ref/templates/api.txt:46
# 47433f2a47094290829dd6a4da4e1940
msgid "A **context** is a \"variable name\" -> \"variable value\" mapping that is passed to a template."
msgstr ""

#: ../../ref/templates/api.txt:49
# af90caa2ca1a499a97ae18a744d28c64
msgid "A template **renders** a context by replacing the variable \"holes\" with values from the context and executing all block tags."
msgstr ""

#: ../../ref/templates/api.txt:53
# 0445d40687bf4dc798f79fb3764a68dc
msgid "Using the template system"
msgstr ""

#: ../../ref/templates/api.txt:57
# 32e49370e6a740ceae3b40cf7b0c539c
msgid "Using the template system in Python is a two-step process:"
msgstr ""

#: ../../ref/templates/api.txt:59
# 98a8dcc528074299b43d18b9712f47e5
msgid "First, you compile the raw template code into a ``Template`` object."
msgstr ""

#: ../../ref/templates/api.txt:60
# 894e76e899fb425a8c0d44d1a176bffc
msgid "Then, you call the ``render()`` method of the ``Template`` object with a given context."
msgstr ""

#: ../../ref/templates/api.txt:64
# c2302e7e48e144fb9e55b15f96adcd02
msgid "Compiling a string"
msgstr ""

#: ../../ref/templates/api.txt:66
# 421467b90073473cad3f1304b6051888
msgid "The easiest way to create a ``Template`` object is by instantiating it directly. The class lives at :class:`django.template.Template`. The constructor takes one argument -- the raw template code::"
msgstr ""

#: ../../ref/templates/api.txt:77
# e802564adb3d45d9b671041fdfbe46fa
msgid "The system only parses your raw template code once -- when you create the ``Template`` object. From then on, it's stored internally as a \"node\" structure for performance."
msgstr ""

#: ../../ref/templates/api.txt:81
# 2e7c1e0bc71a48499251f1458fe4e00c
msgid "Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression."
msgstr ""

#: ../../ref/templates/api.txt:85
# 474dd92fa7fc4fafbc3feffde9e60232
msgid "Rendering a context"
msgstr ""

#: ../../ref/templates/api.txt:89
# 00cacd306b5a4f7fb13529470baf5375
msgid "Once you have a compiled ``Template`` object, you can render a context -- or multiple contexts -- with it. The ``Context`` class lives at :class:`django.template.Context`, and the constructor takes two (optional) arguments:"
msgstr ""

#: ../../ref/templates/api.txt:94
# d0b3845c6ae74e6ea94c0bc3bcefcc92
msgid "A dictionary mapping variable names to variable values."
msgstr ""

#: ../../ref/templates/api.txt:96
# 0d7caff05eee4f6c89a13e9e85a532a1
msgid "The name of the current application. This application name is used to help :ref:`resolve namespaced URLs<topics-http-reversing-url-namespaces>`. If you're not using namespaced URLs, you can ignore this argument."
msgstr ""

#: ../../ref/templates/api.txt:100
# e12610ea230c4459b261b3fcff6bd9b8
msgid "Call the ``Template`` object's ``render()`` method with the context to \"fill\" the template::"
msgstr ""

#: ../../ref/templates/api.txt:114
# 4e2582d29afd4cd190b3cbb43e3f05f1
msgid "Variable names must consist of any letter (A-Z), any digit (0-9), an underscore (but they must not start with an underscore) or a dot."
msgstr ""

#: ../../ref/templates/api.txt:117
# 821a9ba263a244028b537ca617082d03
msgid "Dots have a special meaning in template rendering. A dot in a variable name signifies a **lookup**. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:121
# 4476f0bc8c2f4bfb9464b91ca315bf1c
msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr ""

#: ../../ref/templates/api.txt:122
# b909106734d3442ab008dbfbf4d2e950
msgid "Attribute lookup. Example: ``foo.bar``"
msgstr ""

#: ../../ref/templates/api.txt:123
# b42b39fb838c40eaa2c246a14f516143
msgid "List-index lookup. Example: ``foo[bar]``"
msgstr ""

#: ../../ref/templates/api.txt:125
# 053ea15ef18a408ab41e98dee5d6bfbf
msgid "The template system uses the first lookup type that works. It's short-circuit logic. Here are a few examples::"
msgstr ""

#: ../../ref/templates/api.txt:146
# e56b59646fbe4cc98b19c18ef6b072cd
msgid "If any part of the variable is callable, the template system will try calling it. Example::"
msgstr ""

#: ../../ref/templates/api.txt:161
# 1b28357cc7ae453db2eac87e659f6822
msgid "Callable variables are slightly more complex than variables which only require straight lookups. Here are some things to keep in mind:"
msgstr ""

#: ../../ref/templates/api.txt:164
# b7c9baec59484ad0ac1afbcba4ceacdf
msgid "If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute ``silent_variable_failure`` whose value is ``True``. If the exception *does* have a ``silent_variable_failure`` attribute whose value is ``True``, the variable will render as an empty string. Example::"
msgstr ""

#: ../../ref/templates/api.txt:189
# dbb4bedc5df24c7d96d297b75fc6bca3
msgid "Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the base class for all Django database API ``DoesNotExist`` exceptions, has ``silent_variable_failure = True``. So if you're using Django templates with Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""

#: ../../ref/templates/api.txt:195
# da8bd3b33b864f109d6b2d59e1aeacef
msgid "A variable can only be called if it has no required arguments. Otherwise, the system will return an empty string."
msgstr ""

#: ../../ref/templates/api.txt:198
# a8c3ff165ea94fb5ad66d91ad13191c9
msgid "Obviously, there can be side effects when calling some variables, and it'd be either foolish or a security hole to allow the template system to access them."
msgstr ""

#: ../../ref/templates/api.txt:202
# a59d7a93496d4068afa5661b3c8e9565
msgid "A good example is the :meth:`~django.db.models.Model.delete` method on each Django model object. The template system shouldn't be allowed to do something like this::"
msgstr ""

#: ../../ref/templates/api.txt:208
# 6e2d7fdd948747818902855b5531ecb4
msgid "To prevent this, set an ``alters_data`` attribute on the callable variable. The template system won't call a variable if it has ``alters_data=True`` set, and will instead replace the variable with :setting:`TEMPLATE_STRING_IF_INVALID`, unconditionally.  The dynamically-generated :meth:`~django.db.models.Model.delete` and :meth:`~django.db.models.Model.save` methods on Django model objects get ``alters_data=True`` automatically. Example::"
msgstr ""

#: ../../ref/templates/api.txt:232
# 756dcf4d4144412d8775db9da30aa09b
msgid "How invalid variables are handled"
msgstr ""

#: ../../ref/templates/api.txt:234
# b018db55e91c48809019d98bb8029ca1
msgid "Generally, if a variable doesn't exist, the template system inserts the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to ``''`` (the empty string) by default."
msgstr ""

#: ../../ref/templates/api.txt:238
# b1f3b00df4dc44beb9478c079a6d4433
msgid "Filters that are applied to an invalid variable will only be applied if :setting:`TEMPLATE_STRING_IF_INVALID` is set to ``''`` (the empty string). If :setting:`TEMPLATE_STRING_IF_INVALID` is set to any other value, variable filters will be ignored."
msgstr ""

#: ../../ref/templates/api.txt:243
# d900e52a59a24c918e9f6da58ea2b1b8
msgid "This behavior is slightly different for the ``if``, ``for`` and ``regroup`` template tags. If an invalid variable is provided to one of these template tags, the variable will be interpreted as ``None``. Filters are always applied to invalid variables within these template tags."
msgstr ""

#: ../../ref/templates/api.txt:248
# 0f882462d9b64fa39e78134026c282bb
msgid "If :setting:`TEMPLATE_STRING_IF_INVALID` contains a ``'%s'``, the format marker will be replaced with the name of the invalid variable."
msgstr ""

#: ../../ref/templates/api.txt:253
# d42d5ce14d37418a87f7cad81d437a64
msgid "While :setting:`TEMPLATE_STRING_IF_INVALID` can be a useful debugging tool, it is a bad idea to turn it on as a 'development default'."
msgstr ""

#: ../../ref/templates/api.txt:256
# 767436f079df46a691e0d7f2054d6e1c
msgid "Many templates, including those in the Admin site, rely upon the silence of the template system when a non-existent variable is encountered. If you assign a value other than ``''`` to :setting:`TEMPLATE_STRING_IF_INVALID`, you will experience rendering problems with these templates and sites."
msgstr ""

#: ../../ref/templates/api.txt:262
# e627f93c206f45bb98f5320d1439db53
msgid "Generally, :setting:`TEMPLATE_STRING_IF_INVALID` should only be enabled in order to debug a specific template problem, then cleared once debugging is complete."
msgstr ""

#: ../../ref/templates/api.txt:267
# 08584ae7a6d54b5b8c5fcf09b37a3a5c
msgid "Playing with Context objects"
msgstr ""

#: ../../ref/templates/api.txt:271
# 78f0686e5c66446d9589391e1819ea4d
msgid "Most of the time, you'll instantiate ``Context`` objects by passing in a fully-populated dictionary to ``Context()``. But you can add and delete items from a ``Context`` object once it's been instantiated, too, using standard dictionary syntax::"
msgstr ""

#: ../../ref/templates/api.txt:290
# de2a49b741344b29bae485077e988f9d
msgid "A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` it. If you ``pop()`` too much, it'll raise ``django.template.ContextPopException``::"
msgstr ""

#: ../../ref/templates/api.txt:313
# 29fec6dbf7134758af963b11d04fa688
msgid "In addition to ``push()`` and ``pop()``, the ``Context`` object also defines an ``update()`` method. This works like ``push()`` but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one."
msgstr ""

#: ../../ref/templates/api.txt:329
# 5d408f7a5bea41dd8beda732251dca87
msgid "Using a ``Context`` as a stack comes in handy in some custom template tags, as you'll see below."
msgstr ""

#: ../../ref/templates/api.txt:335
# f5cb2bc48fff4195bcaea6ec1fe129ac
msgid "Subclassing Context: RequestContext"
msgstr ""

#: ../../ref/templates/api.txt:339
# ac06d3f494d8455d8e4f074b2eb9c776
msgid "Django comes with a special ``Context`` class, ``django.template.RequestContext``, that acts slightly differently than the normal ``django.template.Context``. The first difference is that it takes an :class:`~django.http.HttpRequest` as its first argument. For example::"
msgstr ""

#: ../../ref/templates/api.txt:348
# 74a10024698e468ca6980e65f3763a5f
msgid "The second difference is that it automatically populates the context with a few variables, according to your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:351
# 9bf1758c1dc948048a229dfd1144ca67
msgid "The :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting is a tuple of callables -- called **context processors** -- that take a request object as their argument and return a dictionary of items to be merged into the context. By default, :setting:`TEMPLATE_CONTEXT_PROCESSORS` is set to::"
msgstr ""

#: ../../ref/templates/api.txt:379
# 4d83bb7816e34d5fa0c7e449e5482efa
msgid "Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below."
msgstr ""

#: ../../ref/templates/api.txt:386
# dbfc64012d0b48f0939d79f900aa1684
msgid "When you use ``RequestContext``, the variables you supply directly are added first, followed any variables supplied by context processors. This means that a context processor may overwrite a variable you've supplied, so take care to avoid variable names which overlap with those supplied by your context processors."
msgstr ""

#: ../../ref/templates/api.txt:392
# eb7cccdd299a4abe8c929f1b75463983
msgid "Also, you can give ``RequestContext`` a list of additional processors, using the optional, third positional argument, ``processors``. In this example, the ``RequestContext`` instance gets a ``ip_address`` variable::"
msgstr ""

#: ../../ref/templates/api.txt:408
# 7747e2d22ce84515b34ca9a4e4009071
msgid "If you're using Django's :func:`~django.shortcuts.render_to_response()` shortcut to populate a template with the contents of a dictionary, your template will be passed a ``Context`` instance by default (not a ``RequestContext``). To use a ``RequestContext`` in your template rendering, pass an optional third argument to :func:`~django.shortcuts.render_to_response()`: a ``RequestContext`` instance. Your code might look like this::"
msgstr ""

#: ../../ref/templates/api.txt:422
# ec78e2cb482142ceb6f030ca2f2a52a3
msgid "Here's what each of the default processors does:"
msgstr ""

#: ../../ref/templates/api.txt:425
# 7b914979c2114bcca1e1f6bb4154d99b
msgid "django.contrib.auth.context_processors.auth"
msgstr ""

#: ../../ref/templates/api.txt:427
# 6fa4a15d795a4227a7a050ad4d3f7301
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these three variables:"
msgstr ""

#: ../../ref/templates/api.txt:430
# 9d74754e341a427b84b25f494bcbfe06
msgid "``user`` -- An ``auth.User`` instance representing the currently logged-in user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""

#: ../../ref/templates/api.txt:434
# d188fd43a3fb4581bc6baa6edf455d62
msgid "``perms`` -- An instance of ``django.contrib.auth.context_processors.PermWrapper``, representing the permissions that the currently logged-in user has."
msgstr ""

#: ../../ref/templates/api.txt:448
# 987de79857a34bf1a9086735804a4e3a
msgid "django.core.context_processors.debug"
msgstr ""

#: ../../ref/templates/api.txt:450
# 3d0ef53253f84259bb4c7c82b2b7afa0
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these two variables -- but only if your :setting:`DEBUG` setting is set to ``True`` and the request's IP address (``request.META['REMOTE_ADDR']``) is in the :setting:`INTERNAL_IPS` setting:"
msgstr ""

#: ../../ref/templates/api.txt:455
# 23ae82cf98a34377bda91d57f42a2f8d
msgid "``debug`` -- ``True``. You can use this in templates to test whether you're in :setting:`DEBUG` mode."
msgstr ""

#: ../../ref/templates/api.txt:457
# 6d406579655d4e8693fdd0cb5ac875b8
msgid "``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, representing every SQL query that has happened so far during the request and how long it took. The list is in order by query."
msgstr ""

#: ../../ref/templates/api.txt:462
# c892d13200a64d0cb9e81b54e5a9c76d
msgid "django.core.context_processors.i18n"
msgstr ""

#: ../../ref/templates/api.txt:464
# 5b999e1a779e4d84a453ebd26267a2d2
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these two variables:"
msgstr ""

#: ../../ref/templates/api.txt:467
# 62974b5996cd48a985fad43761db2884
msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/templates/api.txt:468
# 4c5dda7700c141cba68ce3435303bad2
msgid "``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/templates/api.txt:471
# 88ce0536a490489398ccc0d08ed420e8
msgid "See :doc:`/topics/i18n/index` for more."
msgstr ""

#: ../../ref/templates/api.txt:474
# d75e1f373421408a97699d5c10a4f3e7
msgid "django.core.context_processors.media"
msgstr ""

#: ../../ref/templates/api.txt:476
# edae24c89bab42f0a764c2e4a700ed7f
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``MEDIA_URL``, providing the value of the :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../ref/templates/api.txt:481
# a3391509c77145209a6a6c7dbbd57f72
msgid "django.core.context_processors.static"
msgstr ""

#: ../../ref/templates/api.txt:487
# ccd47c1644f4412492403fedb36d61dd
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``STATIC_URL``, providing the value of the :setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/templates/api.txt:492
# 1346b3fad0924050908951b912519dbe
msgid "django.core.context_processors.csrf"
msgstr ""

#: ../../ref/templates/api.txt:496
# 53e5cce122c3454f858727e875b616bf
msgid "This processor adds a token that is needed by the :ttag:`csrf_token` template tag for protection against :doc:`Cross Site Request Forgeries </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/templates/api.txt:501
# 06aef1f90c324b41b74c0f9bec260631
msgid "django.core.context_processors.request"
msgstr ""

#: ../../ref/templates/api.txt:503
# ea3b3518d0b6469c93bdd5de1e3c70dd
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``request``, which is the current :class:`~django.http.HttpRequest`. Note that this processor is not enabled by default; you'll have to activate it."
msgstr ""

#: ../../ref/templates/api.txt:509
# a0f88f6efe0b44fd8d3acc2a755ffcc9
msgid "django.contrib.messages.context_processors.messages"
msgstr ""

#: ../../ref/templates/api.txt:511
# 41802d4f40184364a2ad677a711ca3df
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a single additional variable:"
msgstr ""

#: ../../ref/templates/api.txt:514
# 7156ba5785184773bd2c2ded1ff355a5
msgid "``messages`` -- A list of messages (as strings) that have been set via the user model (using ``user.message_set.create``) or through the :doc:`messages framework </ref/contrib/messages>`."
msgstr ""

#: ../../ref/templates/api.txt:528
# 6102f7de709d42f7b6d805b80301d05a
msgid "Writing your own context processors"
msgstr ""

#: ../../ref/templates/api.txt:530
# c8de5babc1db42b3a9f39c6f887bf6dd
msgid "A context processor has a very simple interface: It's just a Python function that takes one argument, an :class:`~django.http.HttpRequest` object, and returns a dictionary that gets added to the template context. Each context processor *must* return a dictionary."
msgstr ""

#: ../../ref/templates/api.txt:535
# 40ec504a7cfd4bb89aa6f8a9f52b131f
msgid "Custom context processors can live anywhere in your code base. All Django cares about is that your custom context processors are pointed-to by your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:540
# 0dc6d5204fd74036b8a0d876b04ae537
msgid "Loading templates"
msgstr ""

#: ../../ref/templates/api.txt:542
# bebc38659dfb4f8e8c516738d4dc57d1
msgid "Generally, you'll store templates in files on your filesystem rather than using the low-level ``Template`` API yourself. Save templates in a directory specified as a **template directory**."
msgstr ""

#: ../../ref/templates/api.txt:546
# 710296b0bfa84fd6b2688ff52f630602
msgid "Django searches for template directories in a number of places, depending on your template-loader settings (see \"Loader types\" below), but the most basic way of specifying template directories is by using the :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/templates/api.txt:552
# 858addf8e32e4dc7a6c07022ed4560e1
msgid "The TEMPLATE_DIRS setting"
msgstr ""

#: ../../ref/templates/api.txt:554
# d721579841b745ec82ae5ebc60e8e20a
msgid "Tell Django what your template directories are by using the :setting:`TEMPLATE_DIRS` setting in your settings file. This should be set to a list or tuple of strings that contain full paths to your template directory(ies). Example::"
msgstr ""

#: ../../ref/templates/api.txt:564
# 0641cee5ab3f4e14ae7725d6454bea86
msgid "Your templates can go anywhere you want, as long as the directories and templates are readable by the Web server. They can have any extension you want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""

#: ../../ref/templates/api.txt:573
# 1e34eeb1f6544706b66df8955612053b
msgid "The Python API"
msgstr ""

#: ../../ref/templates/api.txt:575
# 012c128da7b7460b83725ef6c33f72bf
msgid "Django has two ways to load templates from files:"
msgstr ""

#: ../../ref/templates/api.txt:579
# 3e286335b33a476384ae72ff2c2909b3
msgid "``get_template`` returns the compiled template (a ``Template`` object) for the template with the given name. If the template doesn't exist, it raises ``django.template.TemplateDoesNotExist``."
msgstr ""

#: ../../ref/templates/api.txt:585
# bfdc6abe676242aa8a4822ca7f4c1a7e
msgid "``select_template`` is just like ``get_template``, except it takes a list of template names. Of the list, it returns the first template that exists."
msgstr ""

#: ../../ref/templates/api.txt:588
# dd4d83176c68406aadf35dfb96debbf0
msgid "For example, if you call ``get_template('story_detail.html')`` and have the above :setting:`TEMPLATE_DIRS` setting, here are the files Django will look for, in order:"
msgstr ""

#: ../../ref/templates/api.txt:592
#: ../../ref/templates/api.txt:600
# ffb9eafe01bc4f4194d4acd3bc78da0b
# f585abc24ca5457f875a3036ff0efba4
msgid "``/home/html/templates/lawrence.com/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:593
#: ../../ref/templates/api.txt:601
# 407bdc505a2246cd98b9563dcc6e737f
# 5e88542ae8e549c3bae2ec7a060c11a6
msgid "``/home/html/templates/default/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:595
# 2082687dfd5c4204af54ab9f97fea121
msgid "If you call ``select_template(['story_253_detail.html', 'story_detail.html'])``, here's what Django will look for:"
msgstr ""

#: ../../ref/templates/api.txt:598
# f61c434b762947e8a8e0dd9dbe0775da
msgid "``/home/html/templates/lawrence.com/story_253_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:599
# db79b4c564f049caaa5ebc8725f2f505
msgid "``/home/html/templates/default/story_253_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:603
# b7ad88a9b7664d459558fa4799bd4735
msgid "When Django finds a template that exists, it stops looking."
msgstr ""

#: ../../ref/templates/api.txt:607
# 3d11e8b998344bb395df9f0bfb7cf644
msgid "You can use ``select_template()`` for super-flexible \"templatability.\" For example, if you've written a news story and want some stories to have custom templates, use something like ``select_template(['story_%s_detail.html' % story.id, 'story_detail.html'])``. That'll allow you to use a custom template for an individual story, with a fallback template for stories that don't have custom templates."
msgstr ""

#: ../../ref/templates/api.txt:615
# bdb608b8782240bf8241ede212288f42
msgid "Using subdirectories"
msgstr ""

#: ../../ref/templates/api.txt:617
# a44c15eb34564b7e9ef46052621d60b1
msgid "It's possible -- and preferable -- to organize templates in subdirectories of the template directory. The convention is to make a subdirectory for each Django app, with subdirectories within those subdirectories as needed."
msgstr ""

#: ../../ref/templates/api.txt:621
# 15a126967ce84b0d8e2caecf345e5605
msgid "Do this for your own sanity. Storing all templates in the root level of a single directory gets messy."
msgstr ""

#: ../../ref/templates/api.txt:624
# d6d868a937f448f3bc373b2c13fd01e2
msgid "To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

#: ../../ref/templates/api.txt:628
# 379753eb0e674ae6b37aa9171b8ac465
msgid "Using the same :setting:`TEMPLATE_DIRS` setting from above, this example ``get_template()`` call will attempt to load the following templates:"
msgstr ""

#: ../../ref/templates/api.txt:631
# dbd1bba2078a4a45931eeb22d91abc3b
msgid "``/home/html/templates/lawrence.com/news/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:632
# d5ec5c4d34364bf6852a6518b4c7a189
msgid "``/home/html/templates/default/news/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:637
# 566efd9756504974b79a826b5b32021c
msgid "Loader types"
msgstr ""

#: ../../ref/templates/api.txt:639
# dcd891c11b2a4fa29e74123d864bfebf
msgid "By default, Django uses a filesystem-based template loader, but Django comes with a few other template loaders, which know how to load templates from other sources."
msgstr ""

#: ../../ref/templates/api.txt:643
# 0516be87420d47fd835c47d6eb68ab54
msgid "Some of these other loaders are disabled by default, but you can activate them by editing your :setting:`TEMPLATE_LOADERS` setting. :setting:`TEMPLATE_LOADERS` should be a tuple of strings, where each string represents a template loader class. Here are the template loaders that come with Django:"
msgstr ""

#: ../../ref/templates/api.txt:654
# 8e7284c91d23481e9c15fb982a11f43e
msgid "Loads templates from the filesystem, according to :setting:`TEMPLATE_DIRS`. This loader is enabled by default."
msgstr ""

#: ../../ref/templates/api.txt:658
# 9b57e7e073ab4875b4796b144e5a05db
msgid "Loads templates from Django apps on the filesystem. For each app in :setting:`INSTALLED_APPS`, the loader looks for a ``templates`` subdirectory. If the directory exists, Django looks for templates in there."
msgstr ""

#: ../../ref/templates/api.txt:662
# 936cc9013cea4dd3890328e9c20f6cae
msgid "This means you can store templates with your individual apps. This also makes it easy to distribute Django apps with default templates."
msgstr ""

#: ../../ref/templates/api.txt:665
# abafbb0c95574c3fa7c5cbb3ba70dc23
msgid "For example, for this setting::"
msgstr ""

#: ../../ref/templates/api.txt:669
# 4d7dbbb86f4a4511b4f5796008c073de
msgid "...then ``get_template('foo.html')`` will look for templates in these directories, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:672
# 45b2dd356b884db8915052842a22d3a8
msgid "``/path/to/myproject/polls/templates/foo.html``"
msgstr ""

#: ../../ref/templates/api.txt:673
# 9e46e6263a3c4a9e88dce6a1c99073cc
msgid "``/path/to/myproject/music/templates/foo.html``"
msgstr ""

#: ../../ref/templates/api.txt:675
# a3c4b979966a44bdb6386f05ed4a2c1e
msgid "Note that the loader performs an optimization when it is first imported: It caches a list of which :setting:`INSTALLED_APPS` packages have a ``templates`` subdirectory."
msgstr ""

#: ../../ref/templates/api.txt:679
# 72e682bd07034fd98d851ed27292b7d0
msgid "This loader is enabled by default."
msgstr ""

#: ../../ref/templates/api.txt:682
# 3a85fc5b93164d458cc47ab2bd3bb5b7
msgid "Just like ``app_directories`` above, but it loads templates from Python eggs rather than from the filesystem."
msgstr ""

#: ../../ref/templates/api.txt:685
#: ../../ref/templates/api.txt:717
# b4b14748bab145a1ada4c7519ee05fa2
# 105297f710bf4ea6a720a57b02f8bacc
msgid "This loader is disabled by default."
msgstr ""

#: ../../ref/templates/api.txt:688
# 5f650058a9804609b44d681a6fd906b9
msgid "By default, the templating system will read and compile your templates every time they need to be rendered. While the Django templating system is quite fast, the overhead from reading and compiling templates can add up."
msgstr ""

#: ../../ref/templates/api.txt:692
# c478c61baee64fbb801c28a0235cdb98
msgid "The cached template loader is a class-based loader that you configure with a list of other loaders that it should wrap. The wrapped loaders are used to locate unknown templates when they are first encountered. The cached loader then stores the compiled ``Template`` in memory. The cached ``Template`` instance is returned for subsequent requests to load the same template."
msgstr ""

#: ../../ref/templates/api.txt:698
# 3c80ac484204453a86274d71332f3c5a
msgid "For example, to enable template caching with the ``filesystem`` and ``app_directories`` template loaders you might use the following settings::"
msgstr ""

#: ../../ref/templates/api.txt:710
# 1ad137ecc19b447b9fbe58ced15d2d29
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../ref/templates/api.txt:719
# f6f6491feacc467ab3ccb7671061e8be
msgid "Django uses the template loaders in order according to the :setting:`TEMPLATE_LOADERS` setting. It uses each loader until a loader finds a match."
msgstr ""

#: ../../ref/templates/api.txt:724
# 0d83a9f4c50447aabc17d870431e949a
msgid "The ``render_to_string`` shortcut"
msgstr ""

#: ../../ref/templates/api.txt:728
# e7fe6a73dc4543549d136e12d2301a33
msgid "To cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which largely automates the process: ``render_to_string()`` in :mod:`django.template.loader`, which loads a template, renders it and returns the resulting string::"
msgstr ""

#: ../../ref/templates/api.txt:737
# f7a08aafa8774aaf9add65ef1a759767
msgid "The ``render_to_string`` shortcut takes one required argument -- ``template_name``, which should be the name of the template to load and render (or a list of template names, in which case Django will use the first template in the list that exists) -- and two optional arguments:"
msgstr ""

#: ../../ref/templates/api.txt:743
# dae967029e3d48f1b6f58479e0bd8828
msgid "A dictionary to be used as variables and values for the template's context. This can also be passed as the second positional argument."
msgstr ""

#: ../../ref/templates/api.txt:748
# 28dc97644a614cbf9e1f2b3a126e3f72
msgid "An instance of ``Context`` or a subclass (e.g., an instance of ``RequestContext``) to use as the template's context. This can also be passed as the third positional argument."
msgstr ""

#: ../../ref/templates/api.txt:752
# 76778a440744450fae2a45977141dfd2
msgid "See also the :func:`~django.shortcuts.render_to_response()` shortcut, which calls ``render_to_string`` and feeds the result into an :class:`~django.http.HttpResponse` suitable for returning directly from a view."
msgstr ""

#: ../../ref/templates/api.txt:757
# 01c28c8343094633bbee23b2da9703cf
msgid "Configuring the template system in standalone mode"
msgstr ""

#: ../../ref/templates/api.txt:761
# fcf48e508a0346599e2c181c4bade4c1
msgid "This section is only of interest to people trying to use the template system as an output component in another application. If you're using the template system as part of a Django application, nothing here applies to you."
msgstr ""

#: ../../ref/templates/api.txt:766
# 866e022734fb42418343de420504510c
msgid "Normally, Django will load all the configuration information it needs from its own default configuration file, combined with the settings in the module given in the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. But if you're using the template system independently of the rest of Django, the environment variable approach isn't very convenient, because you probably want to configure the template system in line with the rest of your application rather than dealing with settings files and pointing to them via environment variables."
msgstr ""

#: ../../ref/templates/api.txt:774
# 0cddb836007b4857897343d366d27a50
msgid "To solve this problem, you need to use the manual configuration option described in :ref:`settings-without-django-settings-module`. Simply import the appropriate pieces of the templating system and then, *before* you call any of the templating functions, call :func:`django.conf.settings.configure()` with any settings you wish to specify. You might want to consider setting at least :setting:`TEMPLATE_DIRS` (if you're going to use template loaders), :setting:`DEFAULT_CHARSET` (although the default of ``utf-8`` is probably fine) and :setting:`TEMPLATE_DEBUG`. All available settings are described in the :doc:`settings documentation </ref/settings>`, and any setting starting with ``TEMPLATE_`` is of obvious interest."
msgstr ""

#: ../../ref/templates/api.txt:788
# 0e6fa7db54244c749d16fff5709f2868
msgid "Using an alternative template language"
msgstr ""

#: ../../ref/templates/api.txt:792
# b277bae6199d4dd5b4daf6f3de3f5c72
msgid "The Django ``Template`` and ``Loader`` classes implement a simple API for loading and rendering templates. By providing some simple wrapper classes that implement this API we can use third party template systems like `Jinja2 <http://jinja.pocoo.org/2/>`_ or `Cheetah <http://www.cheetahtemplate.org/>`_. This allows us to use third-party template libraries without giving up useful Django features like the Django ``Context`` object and handy shortcuts like :func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/templates/api.txt:800
# b4ef7936ebd84641b13303ab27a87ffc
msgid "The core component of the Django templating system is the ``Template`` class. This class has a very simple interface: it has a constructor that takes a single positional argument specifying the template string, and a ``render()`` method that takes a :class:`~django.template.Context` object and returns a string containing the rendered response."
msgstr ""

#: ../../ref/templates/api.txt:806
# a42f96a78f1d42f18ad8b1a6bd712a0c
msgid "Suppose we're using a template language that defines a ``Template`` object with a ``render()`` method that takes a dictionary rather than a ``Context`` object. We can write a simple wrapper that implements the Django ``Template`` interface::"
msgstr ""

#: ../../ref/templates/api.txt:819
# 4ddddc235f574766a33283b4e9c4b338
msgid "That's all that's required to make our fictional ``Template`` class compatible with the Django loading and rendering system!"
msgstr ""

#: ../../ref/templates/api.txt:822
# b5f98d1215f14fa480c59f5815f87f6b
msgid "The next step is to write a ``Loader`` class that returns instances of our custom template class instead of the default :class:`~django.template.Template`. Custom ``Loader`` classes should inherit from ``django.template.loader.BaseLoader`` and override the ``load_template_source()`` method, which takes a ``template_name`` argument, loads the template from disk (or elsewhere), and returns a tuple: ``(template_string, template_origin)``."
msgstr ""

#: ../../ref/templates/api.txt:829
# 95fd7b7fcbe84bc7847efa0dce6b8165
msgid "The ``load_template()`` method of the ``Loader`` class retrieves the template string by calling ``load_template_source()``, instantiates a ``Template`` from the template source, and returns a tuple: ``(template, template_origin)``. Since this is the method that actually instantiates the ``Template``, we'll need to override it to use our custom template class instead. We can inherit from the builtin :class:`django.template.loaders.app_directories.Loader` to take advantage of the ``load_template_source()`` method implemented there::"
msgstr ""

#: ../../ref/templates/api.txt:846
# 82820c0f12ab4a408f32306c7dcef84a
msgid "Finally, we need to modify our project settings, telling Django to use our custom loader. Now we can write all of our templates in our alternative template language while continuing to use the rest of the Django templating system."
msgstr ""

#: ../../ref/templates/builtins.txt:3
# e38ab4d03558446a8e3c30eb95ca0440
msgid "Built-in template tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:5
# 20c1bb085654490694c6f2a41d9a2caa
msgid "This document describes Django's built-in template tags and filters. It is recommended that you use the :doc:`automatic documentation </ref/contrib/admin/admindocs>`, if available, as this will also include documentation for any custom tags or filters installed."
msgstr ""

#: ../../ref/templates/builtins.txt:13
# e733594674dd4c81a5becdf64242ab14
msgid "Built-in tag reference"
msgstr ""

#: ../../ref/templates/builtins.txt:20
# 7051730c119e4686a4130b63a85d7b2e
msgid "autoescape"
msgstr ""

#: ../../ref/templates/builtins.txt:22
# 541e9c0729114051b807aeab984cd9fc
msgid "Controls the current auto-escaping behavior. This tag takes either ``on`` or ``off`` as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an ``endautoescape`` ending tag."
msgstr ""

#: ../../ref/templates/builtins.txt:26
# 451af8a9a8da40f5a847a855bae21e84
msgid "When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the :tfilter:`escape` filter to each variable."
msgstr ""

#: ../../ref/templates/builtins.txt:31
# ae7205db587f4dbda32aa7ee4b3884b4
msgid "The only exceptions are variables that are already marked as \"safe\" from escaping, either by the code that populated the variable, or because it has had the :tfilter:`safe` or :tfilter:`escape` filters applied."
msgstr ""

#: ../../ref/templates/builtins.txt:35
#: ../../ref/templates/builtins.txt:227
#: ../../ref/templates/builtins.txt:249
#: ../../ref/utils.txt:228
# b658e9e92e02451293847cdc0c0134f3
# 5d023fd67c024d0b92448ec47d90c934
# e0ef0642fe1e4c6f81af4284fb594bfc
# 9bf2799079684316b08ea177e2658a1c
msgid "Sample usage::"
msgstr ""

#: ../../ref/templates/builtins.txt:44
# 52d69e0d0af34fffaea545e20b4c59ed
msgid "block"
msgstr ""

#: ../../ref/templates/builtins.txt:46
# 9f146ec5726d4a2a8fa68248c6a25757
msgid "Defines a block that can be overridden by child templates. See :ref:`Template inheritance <template-inheritance>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:52
# c1fbe7fac62042bc9cc85551bbdf1bf2
msgid "comment"
msgstr ""

#: ../../ref/templates/builtins.txt:54
# d39ed570feeb43eaa9ec84b0b14c3eb1
msgid "Ignores everything between ``{% comment %}`` and ``{% endcomment %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:59
# a636649c02b2440e9e15ed1c373b6b87
msgid "csrf_token"
msgstr ""

#: ../../ref/templates/builtins.txt:61
# fc50e2d22e0047fda3bb8ef537ba5ce4
msgid "In the Django 1.1.X series, this is a no-op tag that returns an empty string for future compatibility purposes.  In Django 1.2 and later, it is used for CSRF protection, as described in the documentation for :doc:`Cross Site Request Forgeries </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/templates/builtins.txt:69
# 82e3a494525a4cef803f4d0931efead4
msgid "cycle"
msgstr ""

#: ../../ref/templates/builtins.txt:71
# 136470bdc59842afaf6ece3fe07fda49
msgid "Cycles among the given strings or variables each time this tag is encountered."
msgstr ""

#: ../../ref/templates/builtins.txt:73
# 53786a41c8114c6eb02047c8daa54ab1
msgid "Within a loop, cycles among the given strings each time through the loop::"
msgstr ""

#: ../../ref/templates/builtins.txt:82
# 2bf248ec44ac486db20960c0aa71429f
msgid "You can use variables, too. For example, if you have two template variables, ``rowvalue1`` and ``rowvalue2``, you can cycle between their values like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:91
# 4e68d685343646c8a41185ef6b1d83cf
msgid "Note that variable arguments (``rowvalue1`` and ``rowvalue2`` above) are NOT auto-escaped! So either make sure that you trust their values, or use explicit escaping, like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:101
# f23cc56db0554b51a8a3515cf12d1538
msgid "You can mix variables and strings::"
msgstr ""

#: ../../ref/templates/builtins.txt:109
# 76fb91074d0944e9a9db1a81b226cb33
msgid "In some cases you might want to refer to the next value of a cycle from outside of a loop. To do this, just give the ``{% cycle %}`` tag a name, using \"as\", like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:115
# 6ee2d7253c3042c49efd5cea198d04db
msgid "From then on, you can insert the current value of the cycle wherever you'd like in your template by referencing the cycle name as a context variable. If you want to move the cycle onto the next value, you use the cycle tag again, using the name of the variable. So, the following template::"
msgstr ""

#: ../../ref/templates/builtins.txt:130
# 0ed126a4f3b54fb694e7ad42bf083cfd
msgid "would output::"
msgstr ""

#: ../../ref/templates/builtins.txt:141
# 0a0a76170cee46ed9999ceebe397a0f9
msgid "You can use any number of values in a ``{% cycle %}`` tag, separated by spaces. Values enclosed in single (``'``) or double quotes (``\"``) are treated as string literals, while values without quotes are treated as template variables."
msgstr ""

#: ../../ref/templates/builtins.txt:145
# 289c09524a0f43ac8c390971e55ed4fa
msgid "Note that the variables included in the cycle will not be escaped. This is because template tags do not escape their content. Any HTML or Javascript code contained in the printed variable will be rendered as-is, which could potentially lead to security issues."
msgstr ""

#: ../../ref/templates/builtins.txt:150
# 9b14a3b29f70483484ac1c592b1a107c
msgid "For backwards compatibility, the ``{% cycle %}`` tag supports the much inferior old syntax from previous Django versions. You shouldn't use this in any new projects, but for the sake of the people who are still using it, here's what it looks like::"
msgstr ""

#: ../../ref/templates/builtins.txt:157
# 6c64e5fe5e7b4ccc88535907a48ebf36
msgid "In this syntax, each value gets interpreted as a literal string, and there's no way to specify variable values. Or literal commas. Or spaces. Did we mention you shouldn't use this syntax in any new projects?"
msgstr ""

#: ../../ref/templates/builtins.txt:163
# 4bd67c364a58435589b03c0f9119e235
msgid "By default, when you use the ``as`` keyword with the cycle tag, the usage of ``{% cycle %}`` that declares the cycle will itself output the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you want to just declare the cycle, but not output the first value, you can add a ``silent`` keyword as the last keyword in the tag. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:175
# 65aac14f216748cf95e7b9d943af344b
msgid "This will output a list of ``<tr>`` elements with ``class`` alternating between ``row1`` and ``row2``; the subtemplate will have access to ``rowcolors`` in it's context that matches the class of the ``<tr>`` that encloses it. If the ``silent`` keyword were to be omitted, ``row1`` would be emitted as normal text, outside the ``<tr>`` element."
msgstr ""

#: ../../ref/templates/builtins.txt:182
# 7a794ce089304b20b2782a415febadf7
msgid "When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of the cycle tag. In, the following template would output *nothing*, even though the second call to ``{% cycle %}`` doesn't specify silent::"
msgstr ""

#: ../../ref/templates/builtins.txt:193
# a52d70d9c23c4c4a9c6f0f575bf04587
msgid "debug"
msgstr ""

#: ../../ref/templates/builtins.txt:195
# 25b1480edfe24b1c92b9d08afd799952
msgid "Outputs a whole load of debugging information, including the current context and imported modules."
msgstr ""

#: ../../ref/templates/builtins.txt:201
# 3dd69526280f461cb3e8841d4a3860b5
msgid "extends"
msgstr ""

#: ../../ref/templates/builtins.txt:203
# 811978ff159f4929aeec2fa7359eb2c0
msgid "Signals that this template extends a parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:205
# 226d004aeff9494a93ca19e309b6e9b2
msgid "This tag can be used in two ways:"
msgstr ""

#: ../../ref/templates/builtins.txt:207
# dd70a8597f0942b1b0e352363219c2fe
msgid "``{% extends \"base.html\" %}`` (with quotes) uses the literal value ``\"base.html\"`` as the name of the parent template to extend."
msgstr ""

#: ../../ref/templates/builtins.txt:210
# 3fd4958eff70426f8a963a99de6a8a6e
msgid "``{% extends variable %}`` uses the value of ``variable``. If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a ``Template`` object, Django will use that object as the parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:215
# 9b465d766f824a0788e0963b1973f312
msgid "See :ref:`template-inheritance` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:222
# 51b50075026a4565a3d939a72316316b
msgid "Filters the contents of the variable through variable filters."
msgstr ""

#: ../../ref/templates/builtins.txt:224
# 4431eae88c5b4a0e996cd6a1fa607a3d
msgid "Filters can also be piped through each other, and they can have arguments -- just like in variable syntax."
msgstr ""

#: ../../ref/templates/builtins.txt:235
# 6e1ff34fa3ca44b483d5158b3a9bb918
msgid "The :tfilter:`escape` and :tfilter:`safe` filters are not acceptable arguments. Instead, use the :ttag:`autoescape` tag to manage autoescaping for blocks of template code."
msgstr ""

#: ../../ref/templates/builtins.txt:242
# 3ae1e379ae854cabb12f913fcdea3143
msgid "firstof"
msgstr ""

#: ../../ref/templates/builtins.txt:244
# 496c0e5ad2ae47af8bff83aaa55d8894
msgid "Outputs the first variable passed that is not False. Does NOT auto-escape variable values."
msgstr ""

#: ../../ref/templates/builtins.txt:247
# 9853c8738af247fa99d8d73f05f3e2e0
msgid "Outputs nothing if all the passed variables are False."
msgstr ""

#: ../../ref/templates/builtins.txt:253
# daa771b72f904232a05b13f3b7e9c848
msgid "This is equivalent to::"
msgstr ""

#: ../../ref/templates/builtins.txt:263
# 03b4fc7bc4e548548d87655f08a684f3
msgid "You can also use a literal string as a fallback value in case all passed variables are False::"
msgstr ""

#: ../../ref/templates/builtins.txt:268
# 351c05e0502b42a199802f4cec0a5b5b
msgid "Note that the variables included in the firstof tag will not be escaped. This is because template tags do not escape their content. Any HTML or Javascript code contained in the printed variable will be rendered as-is, which could potentially lead to security issues. If you need to escape the variables in the firstof tag, you must do so explicitly::"
msgstr ""

#: ../../ref/templates/builtins.txt:282
# 9e9e2e3337b8432eb5391743aeb8cb83
msgid "for"
msgstr ""

#: ../../ref/templates/builtins.txt:284
# 9ad95aaeff08459ca8f7ae28c383aeb9
msgid "Loop over each item in an array.  For example, to display a list of athletes provided in ``athlete_list``::"
msgstr ""

#: ../../ref/templates/builtins.txt:293
# 367a0c78b00b4e16a23bc7783ff43070
msgid "You can loop over a list in reverse by using ``{% for obj in list reversed %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:296
# cd942e2a7b5149ab983670a915c90f70
msgid "If you need to loop over a list of lists, you can unpack the values in each sub-list into individual variables. For example, if your context contains a list of (x,y) coordinates called ``points``, you could use the following to output the list of points::"
msgstr ""

#: ../../ref/templates/builtins.txt:305
# ff910a8ad34a47828e26aad3aaad92b8
msgid "This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary ``data``, the following would display the keys and values of the dictionary::"
msgstr ""

#: ../../ref/templates/builtins.txt:313
# d0e6b587d7b647a6bdcdf904afcae634
msgid "The for loop sets a number of variables available within the loop:"
msgstr ""

#: ../../ref/templates/builtins.txt:316
# cbecd2e228ff4d82a12d6654a0974c4b
msgid "Variable"
msgstr ""

#: ../../ref/templates/builtins.txt:318
# a2cc5cbeb7ad42e1be648d5a10f6177c
msgid "``forloop.counter``"
msgstr ""

#: ../../ref/templates/builtins.txt:318
# ba222911bcf147bfa910fee17d63ab4e
msgid "The current iteration of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:319
# 224b8f3c24984440997c4b735cbb5957
msgid "``forloop.counter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:319
# 7dedb4561fba4a05af89dfef189b0701
msgid "The current iteration of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:320
# 768e273474754bb99c10e79e5b891694
msgid "``forloop.revcounter``"
msgstr ""

#: ../../ref/templates/builtins.txt:320
# 24908325afdc4dfd9d927f40c626689c
msgid "The number of iterations from the end of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:322
# 97c6352222504ab1b7f53c4e9254bd05
msgid "``forloop.revcounter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:322
# b1360b2c602540b69d684d1f86797dc3
msgid "The number of iterations from the end of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:324
# c2f75a89abba48c8a2c2309d9bc9f85c
msgid "``forloop.first``"
msgstr ""

#: ../../ref/templates/builtins.txt:324
# bb04446612aa45fca47ba52f48940136
msgid "True if this is the first time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:325
# 6a8e2ab05b734012aa5af6287dcb44b3
msgid "``forloop.last``"
msgstr ""

#: ../../ref/templates/builtins.txt:325
# bd16df95b1f54f508417166ded26cc48
msgid "True if this is the last time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:326
# 181fb739072d41bdaad4ada259f79b0f
msgid "``forloop.parentloop``"
msgstr ""

#: ../../ref/templates/builtins.txt:326
# 37d7438677834f689602575752aaec83
msgid "For nested loops, this is the loop \"above\" the current one"
msgstr ""

#: ../../ref/templates/builtins.txt:331
# 28e32e5ec4ed47c6bd8ff9428351ddc0
msgid "for ... empty"
msgstr ""

#: ../../ref/templates/builtins.txt:333
# dc3443fa93e04a95902cc4aaaee10efe
msgid "The ``for`` tag can take an optional ``{% empty %}`` clause that will be displayed if the given array is empty or could not be found::"
msgstr ""

#: ../../ref/templates/builtins.txt:344
# 98deeac84c2f4cd4b5d6613cb728f478
msgid "The above is equivalent to -- but shorter, cleaner, and possibly faster than -- the following::"
msgstr ""

#: ../../ref/templates/builtins.txt:360
# 2b1e2023776e42cfa488041d70165168
msgid "if"
msgstr ""

#: ../../ref/templates/builtins.txt:362
# f01e7ce8afe54a3487d794590de290c7
msgid "The ``{% if %}`` tag evaluates a variable, and if that variable is \"true\" (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output::"
msgstr ""

#: ../../ref/templates/builtins.txt:374
# 8839ba9ad317442cac3278e648f15d4c
msgid "In the above, if ``athlete_list`` is not empty, the number of athletes will be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../ref/templates/builtins.txt:377
# 615e16f3176a4bf2b0dbb7cd9481cc75
msgid "As you can see, the ``if`` tag may take one or several `` {% elif %}`` clauses, as well as an ``{% else %}`` clause that will be displayed if all previous conditions fail. These clauses are optional."
msgstr ""

#: ../../ref/templates/builtins.txt:383
# f6effb6dd3744d3192bfc0c4f0ecd409
msgid "The ``if`` tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../ref/templates/builtins.txt:386
# 321acf0bbc3f44a9a77b2de6a06c3c93
msgid "Boolean operators"
msgstr ""

#: ../../ref/templates/builtins.txt:388
# 4745259ed51341fea1a66ac747de9785
msgid ":ttag:`if` tags may use ``and``, ``or`` or ``not`` to test a number of variables or to negate a given variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:415
# fce7c0baafed41de81ce5851eaa38e8d
msgid "Use of both ``and`` and ``or`` clauses within the same tag is allowed, with ``and`` having higher precedence than ``or`` e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:420
# b6e507060cd54371868fbdfeaacd42cd
msgid "will be interpreted like:"
msgstr ""

#: ../../ref/templates/builtins.txt:426
# 28befec32dfa4b5ea13910b65eded880
msgid "Use of actual brackets in the :ttag:`if` tag is invalid syntax.  If you need them to indicate precedence, you should use nested :ttag:`if` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:432
# e3a27713f8ae4098af45915c97216246
msgid ":ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in`` which work as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:437
# 4c7f3f8dbea848ddbbae8c49ba086dcf
msgid "``==`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:439
# 9d6f8dce86b14104afd99b58910ce379
msgid "Equality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:446
# 761367e052bf449b8a454c18aa3baa3b
msgid "``!=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:448
# 1943130c6bb84bb5be6ef15b611e8be8
msgid "Inequality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:456
# 58bf33e206fc4a769824f8cc322399d2
msgid "``<`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:458
# a420edf315b445c38c8d3ed75a5be651
msgid "Less than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:465
# 913538a7c53a48d5bc28b37a1e106697
msgid "``>`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:467
# 3c64390d46174912a7fd8aa924d8a078
msgid "Greater than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:474
# bb582f52244c4dd3b37d38c1cbe22b1e
msgid "``<=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:476
# 0fe0f43e251d42e68d1372a6ab5eac17
msgid "Less than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:483
# 9cf78dafbed545e9b0d4a7c6befa1696
msgid "``>=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:485
# d04969769f3644debfaab81be37891fe
msgid "Greater than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:492
# ea0c275bb4c546d5bf3a91b8a2f8c412
msgid "``in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:494
# eef197bfb4a247fe92b3f71f821623c3
msgid "Contained within. This operator is supported by many Python containers to test whether the given value is in the container.  The following are some examples of how ``x in y`` will be interpreted::"
msgstr ""

#: ../../ref/templates/builtins.txt:513
# 63fd96c685b6472db1e2424ab858d9d8
msgid "``not in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:515
# a5b273a76952486b9ec5433a19456761
msgid "Not contained within.  This is the negation of the ``in`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:518
# 371e9c086feb47f89fa659dc77d473fe
msgid "The comparison operators cannot be 'chained' like in Python or in mathematical notation. For example, instead of using::"
msgstr ""

#: ../../ref/templates/builtins.txt:523
# 755f43bbdf094cb3837327eb6dd913a3
msgid "you should use::"
msgstr ""

#: ../../ref/templates/builtins.txt:529
# c9f96ab4f35a4fccbf0ee655a475cb91
msgid "Filters"
msgstr ""

#: ../../ref/templates/builtins.txt:531
# 26a6ed4df09f41fca1ec3b8b129a72e2
msgid "You can also use filters in the :ttag:`if` expression. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:538
# 3b84cb90f7294120b3da7ba6d9e59887
msgid "Complex expressions"
msgstr ""

#: ../../ref/templates/builtins.txt:540
# 7051803935a8422499fed9310d6d1477
msgid "All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules.  The precedence of the operators, from lowest to highest, is as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:545
# a24865bc8e2248d29b09eced88d9f9a8
msgid "``or``"
msgstr ""

#: ../../ref/templates/builtins.txt:546
# 8960e4697de14f0ea403933b7c6bc9fc
msgid "``and``"
msgstr ""

#: ../../ref/templates/builtins.txt:547
# c4a9f5695eb84b058ce87f78849b2a95
msgid "``not``"
msgstr ""

#: ../../ref/templates/builtins.txt:548
# 99c2088d44774ef1be66c955e5839797
msgid "``in``"
msgstr ""

#: ../../ref/templates/builtins.txt:549
# af34a743cd4d409f835aaea99e3a2764
msgid "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"
msgstr ""

#: ../../ref/templates/builtins.txt:551
# 3dafb43e641e420397764b8575f031f1
msgid "(This follows Python exactly). So, for example, the following complex :ttag:`if` tag:"
msgstr ""

#: ../../ref/templates/builtins.txt:558
# 36465365ae16448e85678466d1b59082
msgid "...will be interpreted as:"
msgstr ""

#: ../../ref/templates/builtins.txt:564
# f763e2c84215461ea38282a86e65e377
msgid "If you need different precedence, you will need to use nested :ttag:`if` tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules."
msgstr ""

#: ../../ref/templates/builtins.txt:572
# 3212b477a2934b0bb5aa04cbd07e7fa7
msgid "ifchanged"
msgstr ""

#: ../../ref/templates/builtins.txt:574
# 6f96d2b774cb42729e9bf7345346fa89
msgid "Check if a value has changed from the last iteration of a loop."
msgstr ""

#: ../../ref/templates/builtins.txt:576
# c3e29cd922ee498e8d912c7c5d6a7180
msgid "The ``{% ifchanged %}`` block tag is used within a loop. It has two possible uses."
msgstr ""

#: ../../ref/templates/builtins.txt:579
# e515716c4392499eb67a3e588c3d284a
msgid "Checks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes::"
msgstr ""

#: ../../ref/templates/builtins.txt:590
# 898efc815fab4826ab510a1a420ee42f
msgid "If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:601
# f80c33a2f387459fb88e3ac3932967a1
msgid "The ``ifchanged`` tag can also take an optional ``{% else %}`` clause that will be displayed if the value has not changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:617
# fdcad4f1de404308860c003b701bd84d
msgid "ifequal"
msgstr ""

#: ../../ref/templates/builtins.txt:619
# 15c9fe6d13694dbd89e976d155e33abe
msgid "Output the contents of the block if the two arguments equal each other."
msgstr ""

#: ../../ref/templates/builtins.txt:627
# 2185eb3a71c14005b8bbef7e2dc2c245
msgid "As in the :ttag:`if` tag, an ``{% else %}`` clause is optional."
msgstr ""

#: ../../ref/templates/builtins.txt:629
# b45a78b75dae498caaf36f3e83e3fa5e
msgid "The arguments can be hard-coded strings, so the following is valid::"
msgstr ""

#: ../../ref/templates/builtins.txt:635
# bc5ea4a0e5774b9689b6704f0f39bc37
msgid "It is only possible to compare an argument to template variables or strings. You cannot check for equality with Python objects such as ``True`` or ``False``.  If you need to test if something is true or false, use the :ttag:`if` tag instead."
msgstr ""

#: ../../ref/templates/builtins.txt:647
# 8fec155fa9b04201af115b1be3898994
msgid "ifnotequal"
msgstr ""

#: ../../ref/templates/builtins.txt:649
# 4f8e75402ba846a2a829cfee60992cbc
msgid "Just like :ttag:`ifequal`, except it tests that the two arguments are not equal."
msgstr ""

#: ../../ref/templates/builtins.txt:659
# 3149336fead64a8fbcc1bb4c0f655d7e
msgid "include"
msgstr ""

#: ../../ref/templates/builtins.txt:661
# 2ee2ac27cddc416facdaaae531c99543
msgid "Loads a template and renders it with the current context. This is a way of \"including\" other templates within a template."
msgstr ""

#: ../../ref/templates/builtins.txt:664
# 0ba28cf0275f40a3b476d3d262070718
msgid "The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes."
msgstr ""

#: ../../ref/templates/builtins.txt:667
# 8fb3395374424ffd9f3bdb6a2dc4f33a
msgid "This example includes the contents of the template ``\"foo/bar.html\"``::"
msgstr ""

#: ../../ref/templates/builtins.txt:671
# 2baf8ac402164d6a9421da837de48d5d
msgid "This example includes the contents of the template whose name is contained in the variable ``template_name``::"
msgstr ""

#: ../../ref/templates/builtins.txt:676
# 193cb9abc06b4b9fbb4c788d5ebe9279
msgid "An included template is rendered with the context of the template that's including it. This example produces the output ``\"Hello, John\"``:"
msgstr ""

#: ../../ref/templates/builtins.txt:679
# f090518241454a0480a59f292800ab87
msgid "Context: variable ``person`` is set to ``\"john\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:680
# 30b7a531accd4c098ed797b9313a3c70
msgid "Template::"
msgstr ""

#: ../../ref/templates/builtins.txt:684
# f4ee027ccee64c59ba039d6a7bddc065
msgid "The ``name_snippet.html`` template::"
msgstr ""

#: ../../ref/templates/builtins.txt:691
# 1da5e9691c0f49c3990f94cf21763543
msgid "You can pass additional context to the template using keyword arguments::"
msgstr ""

#: ../../ref/templates/builtins.txt:695
# ac559f0bf71b4f86a6378174a9ff15d3
msgid "If you want to only render the context with the variables provided (or even no variables at all), use the ``only`` option::"
msgstr ""

#: ../../ref/templates/builtins.txt:701
# 4911c1ebf1334a7686f5079facf24dab
msgid "The :ttag:`include` tag should be considered as an implementation of \"render this subtemplate and include the HTML\", not as \"parse this subtemplate and include its contents as if it were part of the parent\". This means that there is no shared state between included templates -- each include is a completely independent rendering process."
msgstr ""

#: ../../ref/templates/builtins.txt:707
# b780d09ced1044a893639f8988e58006
msgid "See also: :ttag:`{% ssi %}<ssi>`."
msgstr ""

#: ../../ref/templates/builtins.txt:712
# f4c49ab3b42b4619bfed8b4b24e107aa
msgid "load"
msgstr ""

#: ../../ref/templates/builtins.txt:714
# 834a097fddf9478d93c4d86d3c971ccd
msgid "Loads a custom template tag set."
msgstr ""

#: ../../ref/templates/builtins.txt:716
# e360f03c5de84e3daa4dbeb79ddc3161
msgid "For example, the following template would load all the tags and filters registered in ``somelibrary`` and ``otherlibrary`` located in package ``package``::"
msgstr ""

#: ../../ref/templates/builtins.txt:724
# feb3461a15f44a27a30b09fb5ffabe69
msgid "You can also selectively load individual filters or tags from a library, using the ``from`` argument. In this example, the template tags/filters named ``foo`` and ``bar`` will be loaded from ``somelibrary``::"
msgstr ""

#: ../../ref/templates/builtins.txt:730
# 3779de64716e4ccd884b9b056e049ac5
msgid "See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:736
# 0c3fae8be45d4b5aa0ce9dfb5002dc6f
msgid "now"
msgstr ""

#: ../../ref/templates/builtins.txt:738
# 8dc00df648294597a23e9a5fcfe656a6
msgid "Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the :tfilter:`date` filter section."
msgstr ""

#: ../../ref/templates/builtins.txt:746
# c1fd2e9035ac4429809fd74289c19f84
msgid "Note that you can backslash-escape a format string if you want to use the \"raw\" value. In this example, \"f\" is backslash-escaped, because otherwise \"f\" is a format string that displays the time. The \"o\" doesn't need to be escaped, because it's not a format character::"
msgstr ""

#: ../../ref/templates/builtins.txt:753
# 4b20ce5ca88c4debb331f24c004cea13
msgid "This would display as \"It is the 4th of September\"."
msgstr ""

#: ../../ref/templates/builtins.txt:759
# 46a35e962aa4438b9a7786d183ad1059
msgid "The format passed can also be one of the predefined ones :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`. The predefined formats may vary depending on the current locale and if :ref:`format-localization` is enabled, e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:770
# ee7d4f8110ba42a7b03fd21c8d425df7
msgid "regroup"
msgstr ""

#: ../../ref/templates/builtins.txt:772
# 15460bc4025e4be986656cb1d2666dd5
msgid "Regroups a list of alike objects by a common attribute."
msgstr ""

#: ../../ref/templates/builtins.txt:774
# d14c9d398c7943ec8bd5357928115c5b
msgid "This complex tag is best illustrated by use of an example: say that ``people`` is a list of people represented by dictionaries with ``first_name``, ``last_name``, and ``gender`` keys:"
msgstr ""

#: ../../ref/templates/builtins.txt:788
# cd253bb3c29e4a0b9db13432113b16d0
msgid "...and you'd like to display a hierarchical list that is ordered by gender, like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:791
#: ../../ref/templates/builtins.txt:855
#: ../../ref/templates/builtins.txt:867
# 973aad7feeca40c08619886ea796bb05
# 101b05026d96480896ec929f7eca84ef
# 311fe1a30a9043a58f4bf8c87cc59b01
msgid "Male:"
msgstr ""

#: ../../ref/templates/builtins.txt:793
#: ../../ref/templates/builtins.txt:869
# 3168c3e63ca54fbeb91cf4951e1c6ff4
# c7050396caca42b08551aee417942601
msgid "George Bush"
msgstr ""

#: ../../ref/templates/builtins.txt:794
#: ../../ref/templates/builtins.txt:857
# a7e842f3fbc441c1add68c4fac9acd06
# d813ee5c5057492bb8017fb2d59b0ca2
msgid "Bill Clinton"
msgstr ""

#: ../../ref/templates/builtins.txt:796
#: ../../ref/templates/builtins.txt:863
#: ../../ref/templates/builtins.txt:871
# e3a2aecf751c41018dd8d772347795f9
# 99ba6dd2a9f1418b8a0830d50054546c
# b7693382258349d6a30ae43d00903394
msgid "Female:"
msgstr ""

#: ../../ref/templates/builtins.txt:798
#: ../../ref/templates/builtins.txt:865
# aa7eb017b8b14c759797826ffdebbba0
# 29edbffa31a046ff8e80627ff937d1a0
msgid "Margaret Thatcher"
msgstr ""

#: ../../ref/templates/builtins.txt:799
#: ../../ref/templates/builtins.txt:873
# b6de623f864948e0a1d3aa2b5dc405a5
# dcfdefe1df8f4abb90c7c66850f7a9d2
msgid "Condoleezza Rice"
msgstr ""

#: ../../ref/templates/builtins.txt:801
#: ../../ref/templates/builtins.txt:859
# e5eec76e02d5439a85c4a618ce0481fe
# 9387f8f8032c45cd926d71f9833cdbf8
msgid "Unknown:"
msgstr ""

#: ../../ref/templates/builtins.txt:803
#: ../../ref/templates/builtins.txt:861
# 1852842802ea4ae8a56b04699507504e
# c663e3593d424b07ad9e390f78608b48
msgid "Pat Smith"
msgstr ""

#: ../../ref/templates/builtins.txt:805
# 33c833135e1447a3a6fd3537f04e7074
msgid "You can use the ``{% regroup %}`` tag to group the list of people by gender. The following snippet of template code would accomplish this::"
msgstr ""

#: ../../ref/templates/builtins.txt:822
# b15456ded56045d39f1292bfc43289bc
msgid "Let's walk through this example. ``{% regroup %}`` takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we're regrouping the ``people`` list by the ``gender`` attribute and calling the result ``gender_list``."
msgstr ""

#: ../../ref/templates/builtins.txt:827
# 48dee1c21e03473fbbbbd249c4af8946
msgid "``{% regroup %}`` produces a list (in this case, ``gender_list``) of **group objects**. Each group object has two attributes:"
msgstr ""

#: ../../ref/templates/builtins.txt:830
# cce2e150de8d4384a98b5b6de2711ca1
msgid "``grouper`` -- the item that was grouped by (e.g., the string \"Male\" or \"Female\")."
msgstr ""

#: ../../ref/templates/builtins.txt:832
# 85f96598a25446a4a21d34d226701c87
msgid "``list`` -- a list of all items in this group (e.g., a list of all people with gender='Male')."
msgstr ""

#: ../../ref/templates/builtins.txt:835
# a8470e9553174163bc3793d178757714
msgid "Note that ``{% regroup %}`` does not order its input! Our example relies on the fact that the ``people`` list was ordered by ``gender`` in the first place. If the ``people`` list did *not* order its members by ``gender``, the regrouping would naively display more than one group for a single gender. For example, say the ``people`` list was set to this (note that the males are not grouped together):"
msgstr ""

#: ../../ref/templates/builtins.txt:852
# b6a268e89d9349189b5b2b5284cf39b3
msgid "With this input for ``people``, the example ``{% regroup %}`` template code above would result in the following output:"
msgstr ""

#: ../../ref/templates/builtins.txt:875
# 2911d08fc2214304adac0af193626a23
msgid "The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it."
msgstr ""

#: ../../ref/templates/builtins.txt:878
# e738eb207bb1489aa725893041fadbf4
msgid "Another solution is to sort the data in the template using the :tfilter:`dictsort` filter, if your data is in a list of dictionaries::"
msgstr ""

#: ../../ref/templates/builtins.txt:885
# 0e02e678db2149c6838256c7947471ca
msgid "Grouping on other properties"
msgstr ""

#: ../../ref/templates/builtins.txt:887
# 22986e700ede49a0865ba1ff3b03a78f
msgid "Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the \"gender\" field is a foreign key to a class with an attribute \"description,\" you could use::"
msgstr ""

#: ../../ref/templates/builtins.txt:894
# 6eee78c80ebc4314b3477be5c9f92aaa
msgid "Or, if ``gender`` is a field with ``choices``, it will have a :meth:`^django.db.models.Model.get_FOO_display` method available as an attribute, allowing  you to group on the display string rather than the ``choices`` key::"
msgstr ""

#: ../../ref/templates/builtins.txt:901
# 8b99af964665459086f7310599b6004c
msgid "``{{ gender.grouper }}`` will now display the value fields from the ``choices`` set rather than the keys."
msgstr ""

#: ../../ref/templates/builtins.txt:907
# 4e421c64dbad40e0b5cd44d580aa24f1
msgid "spaceless"
msgstr ""

#: ../../ref/templates/builtins.txt:909
# 85b2cd4a9d7d4e63a2f14773b9ab399b
msgid "Removes whitespace between HTML tags. This includes tab characters and newlines."
msgstr ""

#: ../../ref/templates/builtins.txt:920
# 6556e778faab4aa6a30711987d96fa2e
msgid "This example would return this HTML::"
msgstr ""

#: ../../ref/templates/builtins.txt:924
# 1cc7c6e409a54d30b69e04414c79cde4
msgid "Only space between *tags* is removed -- not space between tags and text. In this example, the space around ``Hello`` won't be stripped::"
msgstr ""

#: ../../ref/templates/builtins.txt:936
# 5aceda8415d6477f82d9a23d9a41e746
msgid "ssi"
msgstr ""

#: ../../ref/templates/builtins.txt:938
# 09aacd0295d94d62ae813db8588d77bc
msgid "Outputs the contents of a given file into the page."
msgstr ""

#: ../../ref/templates/builtins.txt:940
# 30be4daaf3fb4d2a8b7ba2d611685ce3
msgid "Like a simple :ttag:`include` tag, ``{% ssi %}`` includes the contents of another file -- which must be specified using an absolute path -- in the current page::"
msgstr ""

#: ../../ref/templates/builtins.txt:946
# 5f4e7f73b8e64f07a02bd65eb7f8066d
msgid "If the optional \"parsed\" parameter is given, the contents of the included file are evaluated as template code, within the current context::"
msgstr ""

#: ../../ref/templates/builtins.txt:951
# e6f9a6fd69d040159c5db01530d190fd
msgid "Note that if you use ``{% ssi %}``, you'll need to define :setting:`ALLOWED_INCLUDE_ROOTS` in your Django settings, as a security measure."
msgstr ""

#: ../../ref/templates/builtins.txt:955
# 6d15223010a94d45addda8f0a73bfd86
msgid "See also: :ttag:`{% include %}<include>`."
msgstr ""

#: ../../ref/templates/builtins.txt:961
# 51eb57f637364934b973263b7e460c6d
msgid "In Django 1.5, the behavior of the :ttag:`ssi` template tag will change, with the first argument being made into a context variable, rather than being a special case unquoted constant. This will allow the :ttag:`ssi` tag to use a context variable as the value of the page to be included."
msgstr ""

#: ../../ref/templates/builtins.txt:967
# b87b7b8641fe4a149ddec3eee1ff331d
msgid "In order to provide a forwards compatibility path, Django 1.3 provides a future compatibility library -- ``future`` -- that implements the new behavior. To use this library, add a :ttag:`load` call at the top of any template using the :ttag:`ssi` tag, and wrap the first argument to the :ttag:`ssi` tag in quotes. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:977
# 96d2b87424a040e18d548ab5115f99f5
msgid "In Django 1.5, the unquoted constant behavior will be replaced with the behavior provided by the ``future`` tag library. Existing templates should be migrated to use the new syntax."
msgstr ""

#: ../../ref/templates/builtins.txt:984
# fbd0abfd0f68460186689f996f2a1e54
msgid "templatetag"
msgstr ""

#: ../../ref/templates/builtins.txt:986
# 8195a9346fb148af90586b73e878b40e
msgid "Outputs one of the syntax characters used to compose template tags."
msgstr ""

#: ../../ref/templates/builtins.txt:988
# 368b4783a7744c9bb7184717940a6ab0
msgid "Since the template system has no concept of \"escaping\", to display one of the bits used in template tags, you must use the ``{% templatetag %}`` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:991
# 4aec1b5542e44820a29652cb7bf5c6b2
msgid "The argument tells which template bit to output:"
msgstr ""

#: ../../ref/templates/builtins.txt:994
#: ../../ref/templates/builtins.txt:2343
# 2231de373bc641728096729b6445b7bb
# a7660a3900fd4139bc801c5c18cfd18b
msgid "Outputs"
msgstr ""

#: ../../ref/templates/builtins.txt:996
# 7c120ecbb1cd4bb2a0b700394e5d748e
msgid "``openblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:996
# 69f26503d5fc4944a6d7c44ff13efd5e
msgid "``{%``"
msgstr ""

#: ../../ref/templates/builtins.txt:997
# 34d35979079b4081b820303bb55e3bb7
msgid "``closeblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:997
# b740638336414b52919ee82072fdfefc
msgid "``%}``"
msgstr ""

#: ../../ref/templates/builtins.txt:998
# 0cbcbb7768354d27a4265c7860af572c
msgid "``openvariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:998
# 5fd1d27367904743b60b39e59002fe60
msgid "``{{``"
msgstr ""

#: ../../ref/templates/builtins.txt:999
# 23f43c42e3984083920de54abb4695b8
msgid "``closevariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:999
# 90ef3382f7954623b82f559053e633c1
msgid "``}}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1000
# c130f67af99d424a9785ed4879be44a8
msgid "``openbrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:1000
# 77a6319736ff418685d1c08b8097863c
msgid "``{``"
msgstr ""

#: ../../ref/templates/builtins.txt:1001
# d52660d2998b4be88f1043c18ac8d6b9
msgid "``closebrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:1001
# ee0d0e06e241432498ceccb06fad54e9
msgid "``}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1002
# 1b781fc92e044139a912971bf8823ba2
msgid "``opencomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:1002
# 4a523f23566f4225a08d100b5049dac2
msgid "``{#``"
msgstr ""

#: ../../ref/templates/builtins.txt:1003
# 29e5e721a0e74cef9ae2a1a74c7276af
msgid "``closecomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:1003
# e273cf5bf23e4177818b503ac5ad59b3
msgid "``#}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1009
# 6e583def06a447b4b871d668b061de87
msgid "url"
msgstr ""

#: ../../ref/templates/builtins.txt:1011
# 51a4f1c32b934644bdbe8c9cb1859281
msgid "Returns an absolute path reference (a URL without the domain name) matching a given view function and optional parameters. This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates::"
msgstr ""

#: ../../ref/templates/builtins.txt:1018
# ce1f5e26f60e4cbe82857a24317c71bb
msgid "The first argument is a path to a view function in the format ``package.package.module.function``. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax::"
msgstr ""

#: ../../ref/templates/builtins.txt:1026
# 1dcbbae4133c4a74a64e9e6a472ff592
msgid "Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present."
msgstr ""

#: ../../ref/templates/builtins.txt:1029
# eb2e1ccb3ad941789a2f2b34a4c19b26
msgid "For example, suppose you have a view, ``app_views.client``, whose URLconf takes a client ID (here, ``client()`` is a method inside the views file ``app_views.py``). The URLconf line might look like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:1037
# a2205ca1124e4b7c8042d5b434df6465
msgid "If this app's URLconf is included into the project's URLconf under a path such as this:"
msgstr ""

#: ../../ref/templates/builtins.txt:1044
# e7b4af6cafe04554a6c330210de5461e
msgid "...then, in a template, you can create a link to this view like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:1048
# 830c654322164ea2bbbcf5f6dcdd7d74
msgid "The template tag will output the string ``/clients/client/123/``."
msgstr ""

#: ../../ref/templates/builtins.txt:1050
# 364e094767db43dab7da476506d3ae99
msgid "If you're using :ref:`named URL patterns <naming-url-patterns>`, you can refer to the name of the pattern in the ``url`` tag instead of using the path to the view."
msgstr ""

#: ../../ref/templates/builtins.txt:1054
# ccd3860a294e4b2e953d373b96a63c48
msgid "Note that if the URL you're reversing doesn't exist, you'll get an :exc:`^django.core.urlresolvers.NoReverseMatch` exception raised, which will cause your site to display an error page."
msgstr ""

#: ../../ref/templates/builtins.txt:1058
# b7fca9166f234de58cdd16ed1256a933
msgid "If you'd like to retrieve a URL without displaying it, you can use a slightly different call::"
msgstr ""

#: ../../ref/templates/builtins.txt:1066
# 24ab96f0d9dd4f94b256fbfaa6cd52db
msgid "This ``{% url ... as var %}`` syntax will *not* cause an error if the view is missing. In practice you'll use this to link to views that are optional::"
msgstr ""

#: ../../ref/templates/builtins.txt:1074
# a038ae7576614d9b8b1b047517b06d27
msgid "If you'd like to retrieve a namespaced URL, specify the fully qualified name::"
msgstr ""

#: ../../ref/templates/builtins.txt:1078
# 6a8c46ad2676465790022913a43c57ef
msgid "This will follow the normal :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`, including using any hints provided by the context as to the current application."
msgstr ""

#: ../../ref/templates/builtins.txt:1084
# 0fd4fe428dfc4defa92ae7aefccf7bb9
msgid "For backwards compatibility, the ``{% url %}`` tag also supports the use of commas to separate arguments. You shouldn't use this in any new projects, but for the sake of the people who are still using it, here's what it looks like::"
msgstr ""

#: ../../ref/templates/builtins.txt:1092
# af7e3fda0a364a04bea55fe947bed659
msgid "This syntax doesn't support the use of literal commas, or equals signs. Did we mention you shouldn't use this syntax in any new projects?"
msgstr ""

#: ../../ref/templates/builtins.txt:1100
# 6c97d34ff3524400a32e18e73774c50e
msgid "In Django 1.5, the behavior of the :ttag:`url` template tag will change, with the first argument being made into a context variable, rather than being a special case unquoted constant. This will allow the :ttag:`url` tag to use a context variable as the value of the URL name to be reversed."
msgstr ""

#: ../../ref/templates/builtins.txt:1106
# b20e948c7f6341958ab2911c02e4c681
msgid "In order to provide a forwards compatibility path, Django 1.3 provides a future compatibility library -- ``future`` -- that implements the new behavior. To use this library, add a :ttag:`load` call at the top of any template using the :ttag:`url` tag, and wrap the first argument to the :ttag:`url` tag in quotes. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1128
# 921d9d1aebd043ddb6277ae99d758b2e
msgid "The new library also drops support for the comma syntax for separating arguments to the :ttag:`url` template tag."
msgstr ""

#: ../../ref/templates/builtins.txt:1131
# 2c97b58f449f4c9b9b489ef1c0632dd7
msgid "In Django 1.5, the old behavior will be replaced with the behavior provided by the ``future`` tag library. Existing templates be migrated to use the new syntax."
msgstr ""

#: ../../ref/templates/builtins.txt:1138
# 23e3b2750f474deaa453d7fae9482a43
msgid "widthratio"
msgstr ""

#: ../../ref/templates/builtins.txt:1140
# 228bd31886af48378b89195688fa02ad
msgid "For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant."
msgstr ""

#: ../../ref/templates/builtins.txt:1147
# aeb88311e5544cdab1d40a39e19a0b61
msgid "Above, if ``this_value`` is 175 and ``max_value`` is 200, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88)."
msgstr ""

#: ../../ref/templates/builtins.txt:1154
# 9e616c643e1a43e497b5636b87a8b7d1
msgid "with"
msgstr ""

#: ../../ref/templates/builtins.txt:1159
# abc2f8e6b86248088d8c014b4cad666c
msgid "Caches a complex variable under a simpler name. This is useful when accessing an \"expensive\" method (e.g., one that hits the database) multiple times."
msgstr ""

#: ../../ref/templates/builtins.txt:1168
# 1d8f6230740641b7ab2f70dcc7090042
msgid "The populated variable (in the example above, ``total``) is only available between the ``{% with %}`` and ``{% endwith %}`` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1171
# f25efdfdcf2843d8a8f2a772912052b7
msgid "You can assign more than one context variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:1177
# 81caf88c04994a0d800adadc98469501
msgid "The previous more verbose format is still supported: ``{% with business.employees.count as total %}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1183
# 39770d0af0734f439c604d4298f7cebf
msgid "Built-in filter reference"
msgstr ""

#: ../../ref/templates/builtins.txt:1188
# ce4a2934b459421e9ae076ae3fce1796
msgid "add"
msgstr ""

#: ../../ref/templates/builtins.txt:1190
# b2270c7e7d21462884552e2a1b0ea36b
msgid "Adds the argument to the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1196
# da13383597664677b3d1d7960e19e2ee
msgid "If ``value`` is ``4``, then the output will be ``6``."
msgstr ""

#: ../../ref/templates/builtins.txt:1201
# 3d702df9cea946b1b29a9fd97721a142
msgid "This filter will first try to coerce both values to integers. If this fails, it'll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:1206
# c7d0f3ad388b47a2821b02d2605c97cb
msgid "For example, if we have::"
msgstr ""

#: ../../ref/templates/builtins.txt:1210
# b7d958d526fc45e0b40a77a005556bc2
msgid "and ``first`` is ``[1, 2, 3]`` and ``second`` is ``[4, 5, 6]``, then the output will be ``[1, 2, 3, 4, 5, 6]``."
msgstr ""

#: ../../ref/templates/builtins.txt:1215
# 958fb0db166c4a5ab99728e7b9a3adb7
msgid "Strings that can be coerced to integers will be **summed**, not concatenated, as in the first example above."
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# e7c9c9b509634ea7af73418befe85797
msgid "addslashes"
msgstr ""

#: ../../ref/templates/builtins.txt:1223
# 72d70bbcec5244aa9a32485d5ace335f
msgid "Adds slashes before quotes. Useful for escaping strings in CSV, for example."
msgstr ""

#: ../../ref/templates/builtins.txt:1229
# 6919692076bf46869be06777ff9dc083
msgid "If ``value`` is ``\"I'm using Django\"``, the output will be ``\"I\\'m using Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1235
# 64fa3adf74c34087922da30e8478c665
msgid "capfirst"
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# 9246b1c4168a4b6f85f6c691b14266d9
msgid "Capitalizes the first character of the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# eb28da73e70f4f8494bf23c946df06e9
msgid "If ``value`` is ``\"django\"``, the output will be ``\"Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# 89969d3d199f4d30909de03136d6f378
msgid "center"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
# 8282e76473824d5591e40886e3ae77b5
msgid "Centers the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1256
# 3538e5150961433e89963276c403ab97
msgid "If ``value`` is ``\"Django\"``, the output will be ``\"     Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# 2d2706283db14b07a266254920444726
msgid "cut"
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# 1a206efd9d8541739687d3ee0104f260
msgid "Removes all values of arg from the given string."
msgstr ""

#: ../../ref/templates/builtins.txt:1269
# c393437e96ae4e0cb551536adcf48079
msgid "If ``value`` is ``\"String with spaces\"``, the output will be ``\"Stringwithspaces\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# dab26d09cd624fdd8c9b2dd7e67537e9
msgid "date"
msgstr ""

#: ../../ref/templates/builtins.txt:1277
# b3a84262add34db3a4402cd24e5fe3ec
msgid "Formats a date according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:1279
# 5629976a1603426ca08065905b1c67de
msgid "Uses a similar format as PHP's ``date()`` function (http://php.net/date) with some differences."
msgstr ""

#: ../../ref/templates/builtins.txt:1282
# 5d293c782c9d4e68abde44889423ac00
msgid "Available format strings:"
msgstr ""

#: ../../ref/templates/builtins.txt:1285
# 68258f16b8c04de094fcca6286ffb3a2
msgid "Format character"
msgstr ""

#: ../../ref/templates/builtins.txt:1285
# 036ddfa835e84f2fa5ae21b4df5cabed
msgid "Example output"
msgstr ""

#: ../../ref/templates/builtins.txt:1287
# 12b869b4d2924727bc858669f8a1b88f
msgid "a"
msgstr ""

#: ../../ref/templates/builtins.txt:1287
# efd99b084b524a39b289c819445366e2
msgid "``'a.m.'`` or ``'p.m.'`` (Note that this is slightly different than PHP's output, because this includes periods to match Associated Press style.)"
msgstr ""

#: ../../ref/templates/builtins.txt:1287
# 6e0dbb8217564ce58c86af8478976ff1
msgid "``'a.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1291
# 1b010673315a441d9d83cda9688bc27d
msgid "A"
msgstr ""

#: ../../ref/templates/builtins.txt:1291
# 751ffd53e47343e183f1b65c11cf3325
msgid "``'AM'`` or ``'PM'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1291
# 3470c6540bb44904b1dd2c3212b41a45
msgid "``'AM'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1292
# 51b19103464447b49eeb3663fb6a5982
msgid "b"
msgstr ""

#: ../../ref/templates/builtins.txt:1292
# 2eeaa5174e514c14961fc29b54d0b30e
msgid "Month, textual, 3 letters, lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1292
# 980b01cd158f43da8b0f142c878199e9
msgid "``'jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1293
# 7a776eceb0ba421ba013ece151d52dc7
msgid "B"
msgstr ""

#: ../../ref/templates/builtins.txt:1293
#: ../../ref/templates/builtins.txt:1319
# 9e14c7772dff4fa1a28b6583b7c42d03
# bc3ac4a8090e43feb7c258b86be062a5
msgid "Not implemented."
msgstr ""

#: ../../ref/templates/builtins.txt:1294
# 07808522b9334d948190d37fdc86539e
msgid "c"
msgstr ""

#: ../../ref/templates/builtins.txt:1294
# 20f356420a2b4c4cb0232f303ea58975
msgid "ISO 8601 format. (Note: unlike others formatters, such as \"Z\", \"O\" or \"r\", the \"c\" formatter will not add timezone offset if value is a naive datetime (see :class:`datetime.tzinfo`)."
msgstr ""

#: ../../ref/templates/builtins.txt:1294
# 76a2592dcc284648907026b845c0338d
msgid "``2008-01-02T10:30:00.000123+02:00``, or ``2008-01-02T10:30:00.000123`` if the datetime is naive"
msgstr ""

#: ../../ref/templates/builtins.txt:1299
# e0b72405908d4190b1dd6a1ec6bc1370
msgid "d"
msgstr ""

#: ../../ref/templates/builtins.txt:1299
# ae029f8d78b34cafb660dc373b6dfb46
msgid "Day of the month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1299
# 08e84105199d4335ad2ac03441358daa
msgid "``'01'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1301
# ba5cba2a879540b8a7ecc37df6c4692e
msgid "D"
msgstr ""

#: ../../ref/templates/builtins.txt:1301
# 2ca506d9965c4e34bd0d6fa4c5137e98
msgid "Day of the week, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1301
# 7c4ae2d976de4ca1a49ea629552d964b
msgid "``'Fri'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1302
# 27ec6a37e12c4214a9b62abd7f489b8e
msgid "e"
msgstr ""

#: ../../ref/templates/builtins.txt:1302
# 67b0d57fc5f746d4ab67c8bca7253f7e
msgid "Timezone name. Could be in any format, or might return an empty string, depending on the datetime."
msgstr ""

#: ../../ref/templates/builtins.txt:1303
# a6d6ffad73904b31b8d3d5f0f8f31765
msgid "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``, etc."
msgstr ""

#: ../../ref/templates/builtins.txt:1305
# ab9b86eb6caf4328b1d44e1067b2716b
msgid "E"
msgstr ""

#: ../../ref/templates/builtins.txt:1305
# 30094515f9c04d5eb47e3e736296f33e
msgid "Month, locale specific alternative representation usually used for long date representation."
msgstr ""

#: ../../ref/templates/builtins.txt:1307
# 470a2b1354624a39a61670107c9503d1
msgid "``'listopada'`` (for Polish locale, as opposed to ``'Listopad'``)"
msgstr ""

#: ../../ref/templates/builtins.txt:1308
# b9913b5af2e64d67b6a5d27bca455933
msgid "f"
msgstr ""

#: ../../ref/templates/builtins.txt:1308
# 10595d872a2e4723abbb943e0305a18f
msgid "Time, in 12-hour hours and minutes, with minutes left off if they're zero. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1308
# 110f8a70183b4620846e3337a8539dff
msgid "``'1'``, ``'1:30'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1311
# 1f9d340b64c94dff85e39213d178c2ad
msgid "F"
msgstr ""

#: ../../ref/templates/builtins.txt:1311
# 663c3321fa314d3db967a2982a3f335c
msgid "Month, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1311
# b583edb709dd45ab8e2e0203e76d6dd8
msgid "``'January'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1312
# 9e8f8d1721ba452b81e479d822a2a2d9
msgid "g"
msgstr ""

#: ../../ref/templates/builtins.txt:1312
# f62a6b38aa7d48a3b8075f32efa0a3ae
msgid "Hour, 12-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1312
#: ../../ref/templates/builtins.txt:1326
# 787b8c2c75e2410db45863f1b5c03aeb
# 3183b7ea35fa4c1c8405ac08f5e80da2
msgid "``'1'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1314
# 96efd412d3b04be18e1f83ebb7605b50
msgid "G"
msgstr ""

#: ../../ref/templates/builtins.txt:1314
# 32a7e7c0c64540f4b5f166a532843058
msgid "Hour, 24-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1314
# 0c5cc255f22d471e9ef1c7e7b89fe38b
msgid "``'0'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1316
# 80f2ff3bad2241e7a0f28a1a8834f307
msgid "h"
msgstr ""

#: ../../ref/templates/builtins.txt:1316
# ace923c40c3f4de8962473bb05e5dbe1
msgid "Hour, 12-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1316
#: ../../ref/templates/builtins.txt:1324
# b9424f0abcec4c68a681455942737028
# 0b51436d7bc44e47bfa50254eeed5779
msgid "``'01'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1317
# ed03f573f8aa4ca9af9113f2806cf32d
msgid "H"
msgstr ""

#: ../../ref/templates/builtins.txt:1317
# ac2dd3f7b0124d3a90ff638cb61369ed
msgid "Hour, 24-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1317
# bbd64c42258a4ec09e55d50d9b95aa3c
msgid "``'00'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1318
# a382f559cf51477c90d342f4daa664b4
msgid "i"
msgstr ""

#: ../../ref/templates/builtins.txt:1318
# 35aae92f08e64fa38429e327833f75c9
msgid "Minutes."
msgstr ""

#: ../../ref/templates/builtins.txt:1318
#: ../../ref/templates/builtins.txt:1339
# 414f44f50fa74811b199d9b0262e89fc
# 647b076ed9104c65b54f5555adec8729
msgid "``'00'`` to ``'59'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1319
# 60183dc1b16f458abb72ab105f79fd90
msgid "I"
msgstr ""

#: ../../ref/templates/builtins.txt:1320
# 0ecfa494cec54feba70f9a23a63c27df
msgid "j"
msgstr ""

#: ../../ref/templates/builtins.txt:1320
# e27e741bc0ee414fad4c088bfffc1ea5
msgid "Day of the month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1320
# addd031d32ff4776b13f33ed5f2ffc21
msgid "``'1'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1322
# 34d5fe97ebd14139aa93a7d0bd2a98b5
msgid "l"
msgstr ""

#: ../../ref/templates/builtins.txt:1322
# 542324447a0f433bb440011b0320acc8
msgid "Day of the week, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1322
# 938d4c1e512a47f987b659c9c64aa01c
msgid "``'Friday'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1323
# d5e279827fb0432eac81a748face9ce3
msgid "L"
msgstr ""

#: ../../ref/templates/builtins.txt:1323
# 789dec53fc004f04b020c700508bd20c
msgid "Boolean for whether it's a leap year."
msgstr ""

#: ../../ref/templates/builtins.txt:1323
# b5125373e30e486aa6d2090149d53a74
msgid "``True`` or ``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:1324
# 8974beb17d424886bb78932c121faa48
msgid "m"
msgstr ""

#: ../../ref/templates/builtins.txt:1324
# 1f11d46480514a64bb758bd1b2cbc3e8
msgid "Month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1325
# 9503b0541090438498ba58f003370863
msgid "M"
msgstr ""

#: ../../ref/templates/builtins.txt:1325
# d6df8ac71ca2499bb90e1121fbba790e
msgid "Month, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1325
# b7027c2692c54eae81084e3ac370917b
msgid "``'Jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1326
# 09b0a036781c4f96947c073fadbdd865
msgid "n"
msgstr ""

#: ../../ref/templates/builtins.txt:1326
# 8dc1ec36f91141c3960a45ea7f9efed7
msgid "Month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1327
# b0980e73801e4acb8771a338c152caf6
msgid "N"
msgstr ""

#: ../../ref/templates/builtins.txt:1327
# b20dd590ad2343fb9fc656b2998f8ecb
msgid "Month abbreviation in Associated Press style. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1327
# 1be4fd83c0c2481799b66fe2281358e3
msgid "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1329
# 133d12b2d0b94f8bb1c2e227466395e3
msgid "o"
msgstr ""

#: ../../ref/templates/builtins.txt:1329
# 2c891c1506fc4e7b9bd10412c392ae6b
msgid "ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W)"
msgstr ""

#: ../../ref/templates/builtins.txt:1329
#: ../../ref/templates/builtins.txt:1352
# 495b8747b47d4257862c46c9d6a3ba0e
# 01dcd7bcc63e4740a03f9b63a569e5f3
msgid "``'1999'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1332
# 0bb72593f2e6409b81bb0906c6110d8b
msgid "O"
msgstr ""

#: ../../ref/templates/builtins.txt:1332
# 49f45f420cc14cc69a15473c6cd0c2da
msgid "Difference to Greenwich time in hours."
msgstr ""

#: ../../ref/templates/builtins.txt:1332
# 77b5837d55034b47a50e475fc7097c26
msgid "``'+0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1333
# aab1d3b766ba4faeba6ce2907947863a
msgid "P"
msgstr ""

#: ../../ref/templates/builtins.txt:1333
# b0041857c001419da2bd6b26d317b94b
msgid "Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if they're zero and the special-case strings 'midnight' and 'noon' if appropriate. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1333
# 408f0c676d68462383864762819e5c5d
msgid "``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1338
# 7d74979b153b444489abfde3f95f1619
msgid "r"
msgstr ""

#: ../../ref/templates/builtins.txt:1338
# 0071fff5eaa647c19c9dc79e33f9e365
msgid ":rfc:`2822` formatted date."
msgstr ""

#: ../../ref/templates/builtins.txt:1338
# 1c866a982573400c89895994d68396d7
msgid "``'Thu, 21 Dec 2000 16:01:07 +0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1339
# e02d16a7e79f4613b62391a52eed2657
msgid "s"
msgstr ""

#: ../../ref/templates/builtins.txt:1339
# 85d036fff8fd45bea0a8b0f37042056f
msgid "Seconds, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1340
# a8da7c69b9ff4b08b71942d0cabd008f
msgid "S"
msgstr ""

#: ../../ref/templates/builtins.txt:1340
# d67944be3ff049d09c8e7e43d59555b5
msgid "English ordinal suffix for day of the month, 2 characters."
msgstr ""

#: ../../ref/templates/builtins.txt:1340
# ee96a1203022465887427cc2b46a1b6b
msgid "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1342
# c6489e8d69fb4ba38844ad06bd94dbd1
msgid "t"
msgstr ""

#: ../../ref/templates/builtins.txt:1342
# 712bfb7fc4214fb483c558c2d32e7835
msgid "Number of days in the given month."
msgstr ""

#: ../../ref/templates/builtins.txt:1342
# e68e6022ca8c4928acc32780c7c48566
msgid "``28`` to ``31``"
msgstr ""

#: ../../ref/templates/builtins.txt:1343
# 9f8a154bb18b4f1ba07602ebb3341ced
msgid "T"
msgstr ""

#: ../../ref/templates/builtins.txt:1343
# be6463aa4c7741c4951011333cd2ca96
msgid "Time zone of this machine."
msgstr ""

#: ../../ref/templates/builtins.txt:1343
# a3d079acd98848c9866301d9e3842362
msgid "``'EST'``, ``'MDT'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1344
# 2dea8e571d01458d9005a68010539efc
msgid "u"
msgstr ""

#: ../../ref/templates/builtins.txt:1344
# 9e2b35b17e8a4e338a3b2f8e21b4bf6a
msgid "Microseconds."
msgstr ""

#: ../../ref/templates/builtins.txt:1344
# 58ee2e105f8a454aafc61ad988ead1b8
msgid "``0`` to ``999999``"
msgstr ""

#: ../../ref/templates/builtins.txt:1345
# 34be0c93efc14ee1931f8eb87e30e1af
msgid "U"
msgstr ""

#: ../../ref/templates/builtins.txt:1345
# 466684802d5f41df923f7eabaaa3b652
msgid "Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC)."
msgstr ""

#: ../../ref/templates/builtins.txt:1347
# c9192127262945ddbb5b21f242d9795b
msgid "w"
msgstr ""

#: ../../ref/templates/builtins.txt:1347
# dd582351059648f0afdf282a356329f3
msgid "Day of the week, digits without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1347
# c79ecbd013ae4c85a7e5a81d3c61c723
msgid "``'0'`` (Sunday) to ``'6'`` (Saturday)"
msgstr ""

#: ../../ref/templates/builtins.txt:1349
# 585ea03a10ae4839adcedbd1f87078d3
msgid "W"
msgstr ""

#: ../../ref/templates/builtins.txt:1349
# c6de2408508b4f099bf8d426e67aa0df
msgid "ISO-8601 week number of year, with weeks starting on Monday."
msgstr ""

#: ../../ref/templates/builtins.txt:1349
# d6ba2b7c23fd47198e11848075e31041
msgid "``1``, ``53``"
msgstr ""

#: ../../ref/templates/builtins.txt:1351
# 08d999d6fd3141a8912cea7c21a44e06
msgid "y"
msgstr ""

#: ../../ref/templates/builtins.txt:1351
# 59eec9a36ab14acbaf045d3d8040cc81
msgid "Year, 2 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1351
# f4a773b02edb4ee3896675804c7b7d1f
msgid "``'99'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1352
# c64f99f3783d497295041100c58b304e
msgid "Y"
msgstr ""

#: ../../ref/templates/builtins.txt:1352
# b3b3f4cd51354733ab8fe9a29ee08397
msgid "Year, 4 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1353
# 2515cddf583a4667bf058293c02bd2b3
msgid "z"
msgstr ""

#: ../../ref/templates/builtins.txt:1353
# f5334a31e7014ea0bb20a7448c7fd79a
msgid "Day of the year."
msgstr ""

#: ../../ref/templates/builtins.txt:1353
# 2df3bf8bf4974591bddaa4543d43fed1
msgid "``0`` to ``365``"
msgstr ""

#: ../../ref/templates/builtins.txt:1354
# cc444df04e144e548e1a5d4756213c09
msgid "Z"
msgstr ""

#: ../../ref/templates/builtins.txt:1354
# 0993b281deb54a11984396cc01e59cad
msgid "Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive."
msgstr ""

#: ../../ref/templates/builtins.txt:1354
# 2c5d82275c104984aaca93cb59ff197a
msgid "``-43200`` to ``43200``"
msgstr ""

#: ../../ref/templates/builtins.txt:1362
# 6a418003bd36438a858b361cbacf8b47
msgid "The ``c`` and ``u`` format specification characters were added in Django 1.2."
msgstr ""

#: ../../ref/templates/builtins.txt:1366
# 3c883700d36e45e2abcd4bb7cc52a31e
msgid "The ``e`` and ``o`` format specification characters were added in Django 1.4."
msgstr ""

#: ../../ref/templates/builtins.txt:1372
# 35949f2a09a74fc7b31a8238d9cea776
msgid "If ``value`` is a ``datetime`` object (e.g., the result of ``datetime.datetime.now()``), the output will be the string ``'Wed 09 Jan 2008'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1376
# 4d75c8ee0b5a4a5683e45506e842e7fa
msgid "The format passed can be one of the predefined ones :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale."
msgstr ""

#: ../../ref/templates/builtins.txt:1382
# f6285c20244146d19a0b92b91e1a3d98
msgid "Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` is, for example, ``\"es\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:1387
# afee482a98524de886d24cb87e6f4fc7
msgid "the output would be the string ``\"09/01/2008\"`` (the ``\"SHORT_DATE_FORMAT\"`` format specifier for the ``es`` locale as shipped with Django is ``\"d/m/Y\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1390
#: ../../ref/templates/builtins.txt:2049
# c0bced03f71f41ef9fcb567f04e050ba
# 6701e02238a2439a95509a5e6fdf7774
msgid "When used without a format string::"
msgstr ""

#: ../../ref/templates/builtins.txt:1394
# 4d9fc246ba914561980777066c64c560
msgid "...the formatting string defined in the :setting:`DATE_FORMAT` setting will be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:1403
# d3b26a9d5b1749a2a0a1ed077e237d98
msgid "default"
msgstr ""

#: ../../ref/templates/builtins.txt:1405
# e9e44cddd96f489f823463178a4e4bf7
msgid "If value evaluates to ``False``, uses the given default. Otherwise, uses the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1412
# 2d2c52bd027a4ccd8f75bdacd09d8730
msgid "If ``value`` is ``\"\"`` (the empty string), the output will be ``nothing``."
msgstr ""

#: ../../ref/templates/builtins.txt:1417
# e24dbb5439ce46229ab4aae9c7427c3c
msgid "default_if_none"
msgstr ""

#: ../../ref/templates/builtins.txt:1419
# 21cba3b2bdac4b248c3c48ae8ad105d9
msgid "If (and only if) value is ``None``, uses the given default. Otherwise, uses the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1422
# 317469aaadbb4333bffa1d8e6cd79cde
msgid "Note that if an empty string is given, the default value will *not* be used. Use the :tfilter:`default` filter if you want to fallback for empty strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1429
# efc118a0769548fbae2d2078cd1825e1
msgid "If ``value`` is ``None``, the output will be the string ``\"nothing\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1434
# 8a6c43f2b52f4b62a4eabcc4dc59affe
msgid "dictsort"
msgstr ""

#: ../../ref/templates/builtins.txt:1436
# 29a884ce3506431b9c5281c179c3632d
msgid "Takes a list of dictionaries and returns that list sorted by the key given in the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1443
# 4815bd57d0b6468da3a485e53dbe0493
msgid "If ``value`` is:"
msgstr ""

#: ../../ref/templates/builtins.txt:1453
# 8c06b01d4d894f12ad7599e62b56a1ca
msgid "then the output would be:"
msgstr ""

#: ../../ref/templates/builtins.txt:1466
# 2b1c4e8ff49e47a19d4ab38f3cb89619
msgid "dictsortreversed"
msgstr ""

#: ../../ref/templates/builtins.txt:1468
# 42e81ea5ea5c4029a5dd89d3ca65e57d
msgid "Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order."
msgstr ""

#: ../../ref/templates/builtins.txt:1475
# 0a62e322d8a34f96815ac5b33df70013
msgid "divisibleby"
msgstr ""

#: ../../ref/templates/builtins.txt:1477
# 8bc0588c908546e785fe5149b9ee307d
msgid "Returns ``True`` if the value is divisible by the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1483
# febe84a8feee41b4899dd0b7b22295e4
msgid "If ``value`` is ``21``, the output would be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1488
# 39cdc4ae4d71486d8646b4012a5baed2
msgid "escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1490
# 5dcf61da63374e2989c890e858038348
msgid "Escapes a string's HTML. Specifically, it makes these replacements:"
msgstr ""

#: ../../ref/templates/builtins.txt:1492
# 2dfda31710ec449099e3085dfa70043a
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1493
# 9ec3c5ace7e1426b85f8cb6cf4867c9d
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1494
# 03d5e558744641638d4e5d209dd9fdac
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1495
# 7dae42f2e0934ae0b2351a9ebecc6ba0
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1496
# 58615438734d443baeda0392b5fc14aa
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1498
# d05f3ca29f15429693c2d39c77e5db8e
msgid "The escaping is only applied when the string is output, so it does not matter where in a chained sequence of filters you put ``escape``: it will always be applied as though it were the last filter. If you want escaping to be applied immediately, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1503
# 5d6983ee837b4be694b44710f4b8296b
msgid "Applying ``escape`` to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1511
# 8e3de896264e4b1aaf472973da321a3d
msgid "escapejs"
msgstr ""

#: ../../ref/templates/builtins.txt:1513
# 6ce9743158f84b61a35b1518431684d1
msgid "Escapes characters for use in JavaScript strings. This does *not* make the string safe for use in HTML, but does protect you from syntax errors when using templates to generate JavaScript/JSON."
msgstr ""

#: ../../ref/templates/builtins.txt:1521
# 9c9aba8122244bcab149244fa50ec06f
msgid "If ``value`` is ``\"testing\\r\\njavascript \\'string\" <b>escaping</b>\"``, the output will be ``\"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1527
# a6fb0f5726d948a48f557911e9b2b1bc
msgid "filesizeformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1529
# b3498d083bc140138f5f67224d977d9a
msgid "Formats the value like a 'human-readable' file size (i.e. ``'13 KB'``, ``'4.1 MB'``, ``'102 bytes'``, etc)."
msgstr ""

#: ../../ref/templates/builtins.txt:1536
# c72b37d5eafe44d0a0bd2eec22451b16
msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr ""

#: ../../ref/templates/builtins.txt:1541
# 6fd5b3191eff441a95764dd1fcd8e95a
msgid "first"
msgstr ""

#: ../../ref/templates/builtins.txt:1543
# d7a365e4cdd2470f9e551c701d6a25df
msgid "Returns the first item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1549
# 195ae24737cf4193a70f2829abc9338c
msgid "If ``value`` is the list ``['a', 'b', 'c']``, the output will be ``'a'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1554
# 5371119e79f84040814605a7769ac666
msgid "fix_ampersands"
msgstr ""

#: ../../ref/templates/builtins.txt:1558
# 9d94117f8aaf42fa9e97f0f7c07fc85e
msgid "This is rarely useful as ampersands are automatically escaped. See :tfilter:`escape` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:1561
# b8103323253b4fec8786ee37febb67f2
msgid "Replaces ampersands with ``&amp;`` entities."
msgstr ""

#: ../../ref/templates/builtins.txt:1567
# fcfb13d0d5584e1eaa5659d73dde4448
msgid "If ``value`` is ``Tom & Jerry``, the output will be ``Tom &amp; Jerry``."
msgstr ""

#: ../../ref/templates/builtins.txt:1569
# 9f50f5e713e84ead97a6b3fe4b42fcbc
msgid "However, ampersands used in named entities and numeric character references will not be replaced. For example, if ``value`` is ``Caf&eacute;``, the output will *not* be ``Caf&amp;eacute;`` but remain ``Caf&eacute;``. This means that in some edge cases, such as acronyms followed by semicolons, this filter will not replace ampersands that need replacing. For example, if ``value`` is ``Contact the R&D;``, the output will remain unchanged because ``&D;`` resembles a named entity."
msgstr ""

#: ../../ref/templates/builtins.txt:1580
# ed71df56e6b64e99953c8a65f373c6bd
msgid "floatformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1582
# 58c91d145ff14a64a1846d5a9df5332d
msgid "When used without an argument, rounds a floating-point number to one decimal place -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1586
#: ../../ref/templates/builtins.txt:1597
#: ../../ref/templates/builtins.txt:1609
# 0e004a0694f440adbcfc13c60fd2b697
# 2447beb46a31492796ae8aa10b3b3b2f
# 64b9da751fb54443a6d084231f40a0d0
msgid "``value``"
msgstr ""

#: ../../ref/templates/builtins.txt:1586
#: ../../ref/templates/builtins.txt:1597
#: ../../ref/templates/builtins.txt:1609
# e24411786c5242fcb83177e619d79ffa
# bfea5e5991b142a6bce018859f78e950
# fdcdeab4e3cf4efea4cd76ad07b2b20b
msgid "Output"
msgstr ""

#: ../../ref/templates/builtins.txt:1588
#: ../../ref/templates/builtins.txt:1599
#: ../../ref/templates/builtins.txt:1611
# b7f5fe777e524bd7b7919aa8e9c2122a
# 4741f0fcddd44cd399d14e9161e7f495
# 56c8e78369f14f29a12554e08cf0199f
msgid "``34.23234``"
msgstr ""

#: ../../ref/templates/builtins.txt:1588
#: ../../ref/templates/builtins.txt:1589
#: ../../ref/templates/builtins.txt:1590
# 4f052c72e64b4ec8b915c1e4cbe4f78c
# 04459c9227c24cf98b4552047547e185
# 37754a54da5a430f9008d162c4431d1b
msgid "``{{ value|floatformat }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1588
# b51be6bf9c00477b9cd85bda3cf35472
msgid "``34.2``"
msgstr ""

#: ../../ref/templates/builtins.txt:1589
#: ../../ref/templates/builtins.txt:1600
#: ../../ref/templates/builtins.txt:1612
# 721e3ecebe6a48cb8be8f55a6e4d684b
# 390ed91d963f410b837a9483f5526eae
# 5019969d702a468ea089b8cc69037405
msgid "``34.00000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1589
#: ../../ref/templates/builtins.txt:1612
# 7e1fccb7a8984bd3bfa89ae135a86472
# 011f0ee6556a40d8b2f483c8c106b175
msgid "``34``"
msgstr ""

#: ../../ref/templates/builtins.txt:1590
#: ../../ref/templates/builtins.txt:1601
#: ../../ref/templates/builtins.txt:1613
# 77e30707191f4161ab57e43fd267532f
# a2dad05a5fdc4915bdad188922d0a712
# 9625876d46544ac083098dc0f8c85418
msgid "``34.26000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1590
# 8cd6ff33a62a494b9041c61347d71124
msgid "``34.3``"
msgstr ""

#: ../../ref/templates/builtins.txt:1593
# 1b82776c9e154611b29100610b599749
msgid "If used with a numeric integer argument, ``floatformat`` rounds a number to that many decimal places. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1599
#: ../../ref/templates/builtins.txt:1600
#: ../../ref/templates/builtins.txt:1601
# d6c3032d1fb7464fb4ffdb801bbdee02
# ac7a282f74d8436ca9dcad4575aea12e
# e935e479447745358f46ad4ac02fd8b6
msgid "``{{ value|floatformat:3 }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1599
#: ../../ref/templates/builtins.txt:1611
# bc3944d37bef449eab78d48a5c3fb1fc
# 7dddd8ef26304c6f9ba4ac577809ef8f
msgid "``34.232``"
msgstr ""

#: ../../ref/templates/builtins.txt:1600
# cc01210379314fef902e1c7652fdf702
msgid "``34.000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1601
#: ../../ref/templates/builtins.txt:1613
# a3121cdce33e4bbc810b0d0e94ce9efc
# 1d6e11e7b1844f9180834974d729f255
msgid "``34.260``"
msgstr ""

#: ../../ref/templates/builtins.txt:1604
# c311bab15f9f4b79a4c8f59ea8d690aa
msgid "If the argument passed to ``floatformat`` is negative, it will round a number to that many decimal places -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1611
#: ../../ref/templates/builtins.txt:1612
#: ../../ref/templates/builtins.txt:1613
# 34d5ce78297544b9a5bf82d9fc9bc988
# 17ca75425a364022a9e3453dbed2a0fd
# 2b5dcdc7dfc4415699022c6532d014f8
msgid "``{{ value|floatformat:\"-3\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1616
# 5a4825a157fe4852b790683f90225486
msgid "Using ``floatformat`` with no argument is equivalent to using ``floatformat`` with an argument of ``-1``."
msgstr ""

#: ../../ref/templates/builtins.txt:1622
# 4cfc56b3a864485d8f74e9d94f43a449
msgid "force_escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1624
# 303f7fdf39f04509afa1e907f7839a4a
msgid "Applies HTML escaping to a string (see the :tfilter:`escape` filter for details). This filter is applied *immediately* and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the :tfilter:`escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1633
# e4e02bbbfe7445c08ea29b95af9c6a34
msgid "get_digit"
msgstr ""

#: ../../ref/templates/builtins.txt:1635
# 8794d576eb5849e5881424f0e76fbb68
msgid "Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1644
# 0b7adc281fe7498aa9590d4384349ad9
msgid "If ``value`` is ``123456789``, the output will be ``8``."
msgstr ""

#: ../../ref/templates/builtins.txt:1649
# b27435834f134260ad0683ece4d25cf3
msgid "iriencode"
msgstr ""

#: ../../ref/templates/builtins.txt:1651
# ce1a1731e47d45e8a8392230bd74084a
msgid "Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you're trying to use strings containing non-ASCII characters in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:1655
# 9ceca83881884130b64c3676c95f0a4c
msgid "It's safe to use this filter on a string that has already gone through the :tfilter:`urlencode` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1662
# 7cc50aef2c0448669115cd93b29585be
msgid "If ``value`` is ``\"?test=1&me=2\"``, the output will be ``\"?test=1&amp;me=2\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1667
# a22637a015d74018a0e28c9a274d24a6
msgid "join"
msgstr ""

#: ../../ref/templates/builtins.txt:1669
# 41f503d61a444079aaab208ec408133b
msgid "Joins a list with a string, like Python's ``str.join(list)``"
msgstr ""

#: ../../ref/templates/builtins.txt:1675
# 1d75d0367dbc495592f24cd232410dd8
msgid "If ``value`` is the list ``['a', 'b', 'c']``, the output will be the string ``\"a // b // c\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1681
# f91c110d2f6f45aab23f228579e9982b
msgid "last"
msgstr ""

#: ../../ref/templates/builtins.txt:1683
# c763620ce71e4fb2908ac226fdb96c6a
msgid "Returns the last item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1689
# 75030aebfe464b84bba06840ba0f8d80
msgid "If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output will be the string ``\"d\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1695
# 24476d696a94493a8c311470521b85a1
msgid "length"
msgstr ""

#: ../../ref/templates/builtins.txt:1697
# 17dbb92f88c6430b9efc2239076fab95
msgid "Returns the length of the value. This works for both strings and lists."
msgstr ""

#: ../../ref/templates/builtins.txt:1703
# acc00f7e67954a24aea3b5e41c4f41a0
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:1708
# c2eb574317e34b5f8b7a96a47b19f550
msgid "length_is"
msgstr ""

#: ../../ref/templates/builtins.txt:1710
# 0176a2fef317434fbac27f06a5d0fbb3
msgid "Returns ``True`` if the value's length is the argument, or ``False`` otherwise."
msgstr ""

#: ../../ref/templates/builtins.txt:1716
# b5ed9f0e500d4b36bb9f887deae59557
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1721
# 8f8b975bd8524c04a32d88364c5f0692
msgid "linebreaks"
msgstr ""

#: ../../ref/templates/builtins.txt:1723
# 81fb86049c434592aa6091ddc14b9a7a
msgid "Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (``<br />``) and a new line followed by a blank line becomes a paragraph break (``</p>``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1731
# 6d5bf9d2f7db4826b8d92406a7aad81b
msgid "If ``value`` is ``Joel\\nis a slug``, the output will be ``<p>Joel<br />is a slug</p>``."
msgstr ""

#: ../../ref/templates/builtins.txt:1737
# 6c0477ef638e42c29362630fa8f4b232
msgid "linebreaksbr"
msgstr ""

#: ../../ref/templates/builtins.txt:1739
# 22ba0cb3dd7d4fd9bc7dfccb66db5a86
msgid "Converts all newlines in a piece of plain text to HTML line breaks (``<br />``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1746
# d70454c6845b4ec7923857894f2eed55
msgid "If ``value`` is ``Joel\\nis a slug``, the output will be ``Joel<br />is a slug``."
msgstr ""

#: ../../ref/templates/builtins.txt:1752
# 6612a6d6ccac42bc8e17099fb88d28a3
msgid "linenumbers"
msgstr ""

#: ../../ref/templates/builtins.txt:1754
# 94fe57d275b949b1b10e9a9e9e3d0893
msgid "Displays text with line numbers."
msgstr ""

#: ../../ref/templates/builtins.txt:1760
# 48ebd66672e144a9a1e6626c34913d9e
msgid "If ``value`` is::"
msgstr ""

#: ../../ref/templates/builtins.txt:1766
# 4cbda56e2dfc4e52838fb75174b60df8
msgid "the output will be::"
msgstr ""

#: ../../ref/templates/builtins.txt:1775
# e6fb01f3409f41dcb1035804e09fd335
msgid "ljust"
msgstr ""

#: ../../ref/templates/builtins.txt:1777
# a5e3bccc0b864c6eaef04cfc131dc385
msgid "Left-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1779
#: ../../ref/templates/builtins.txt:1912
# deada7950f7d41f782a4fe2cf61da186
# fc9f78e6c90044b18fe89650bfeeaec4
msgid "**Argument:** field size"
msgstr ""

#: ../../ref/templates/builtins.txt:1785
# bdb7c8e3880d4881948d87d25913b2cd
msgid "If ``value`` is ``Django``, the output will be ``\"Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1790
# 096a94fc29294f43b73fc69f38e35e5f
msgid "lower"
msgstr ""

#: ../../ref/templates/builtins.txt:1792
# a61d1a871f804914970e120f5fc57095
msgid "Converts a string into all lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1798
# 7c92ecd4c0624800815af614f5c63ae8
msgid "If ``value`` is ``Still MAD At Yoko``, the output will be ``still mad at yoko``."
msgstr ""

#: ../../ref/templates/builtins.txt:1804
# ee11fd171c2842cb9647ea8a0cbf217c
msgid "make_list"
msgstr ""

#: ../../ref/templates/builtins.txt:1806
# e65662ffc6974bbcb85ec74bb671e585
msgid "Returns the value turned into a list. For a string, it's a list of characters. For an integer, the argument is cast into an unicode string before creating a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1814
# 35c7763191c647edab8037e943b0f3c6
msgid "If ``value`` is the string ``\"Joel\"``, the output would be the list ``[u'J', u'o', u'e', u'l']``. If ``value`` is ``123``, the output will be the list ``[u'1', u'2', u'3']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1821
# 2ed5b00c9cf546ed85b2fb8098808299
msgid "phone2numeric"
msgstr ""

#: ../../ref/templates/builtins.txt:1823
# 4d464523361742158e96d3111ae67883
msgid "Converts a phone number (possibly containing letters) to its numerical equivalent."
msgstr ""

#: ../../ref/templates/builtins.txt:1826
# 5ec31a89a41049c6aa1f0b92cb7df1ac
msgid "The input doesn't have to be a valid phone number. This will happily convert any string."
msgstr ""

#: ../../ref/templates/builtins.txt:1833
# 5f4f890465754253a2b194579b9daaf5
msgid "If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``."
msgstr ""

#: ../../ref/templates/builtins.txt:1838
# 1559d055c29b4a9788cd644d89566d77
msgid "pluralize"
msgstr ""

#: ../../ref/templates/builtins.txt:1840
# c57a98cc222b4efe88b0c7b4f3595413
msgid "Returns a plural suffix if the value is not 1. By default, this suffix is ``'s'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1847
# f749c8362bee440fa6db51919275d21e
msgid "If ``num_messages`` is ``1``, the output will be ``You have 1 message.`` If ``num_messages`` is ``2``  the output will be ``You have 2 messages.``"
msgstr ""

#: ../../ref/templates/builtins.txt:1850
# 53cad25337b844458287220a8699cd12
msgid "For words that require a suffix other than ``'s'``, you can provide an alternate suffix as a parameter to the filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1857
# c87b97f918dc4114883cef121e9cd137
msgid "For words that don't pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma."
msgstr ""

#: ../../ref/templates/builtins.txt:1864
# 6a042b39f96e4243a30647f644e1aa04
msgid "Use :ttag:`blocktrans` to pluralize translated strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1869
# 293d31bebfa64b88b42d296c7b105047
msgid "pprint"
msgstr ""

#: ../../ref/templates/builtins.txt:1871
# f9305a9428c5499ab7276032f2a485d7
msgid "A wrapper around :func:`pprint.pprint` -- for debugging, really."
msgstr ""

#: ../../ref/templates/builtins.txt:1876
# 841cc4be241d480385f422222e6e6bf0
msgid "random"
msgstr ""

#: ../../ref/templates/builtins.txt:1878
# 6f69719c8c12432d8952a49d239f68b6
msgid "Returns a random item from the given list."
msgstr ""

#: ../../ref/templates/builtins.txt:1884
# d38b39c52f8a49e8b0b6cd92375cda8d
msgid "If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be ``\"b\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1889
# f89c12f44e124798bbcd77d2bf28cd86
msgid "removetags"
msgstr ""

#: ../../ref/templates/builtins.txt:1891
# 0a8e9a1def504feab9aa4b3491ae7148
msgid "Removes a space-separated list of [X]HTML tags from the output."
msgstr ""

#: ../../ref/templates/builtins.txt:1897
# 411910da33224354a0b4c66a9201129f
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the output will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1900
# 1bee05f92b314b16add439b77aed6c28
msgid "Note that this filter is case-sensitive."
msgstr ""

#: ../../ref/templates/builtins.txt:1902
# 21be1967c30249c89f4f22819971846b
msgid "If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` the output will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1908
# ade93304ec8b4c2ab72f28a0a5996405
msgid "rjust"
msgstr ""

#: ../../ref/templates/builtins.txt:1910
# 6301fc74e7804fc89782f2c27bd676a9
msgid "Right-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1918
# f3b815eb45e74cb8858467e47318d994
msgid "If ``value`` is ``Django``, the output will be ``\"    Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1923
# 0c46f63e76254721b5b2fb5ca18aec9b
msgid "safe"
msgstr ""

#: ../../ref/templates/builtins.txt:1925
# 7e2d6457daca4403a734e2ad137c46fc
msgid "Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect."
msgstr ""

#: ../../ref/templates/builtins.txt:1930
# 710bfb24d48a4883835bb5f5c5fe8112
msgid "If you are chaining filters, a filter applied after ``safe`` can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:"
msgstr ""

#: ../../ref/templates/builtins.txt:1941
# 4f4f6e7542154f8f967b80bce0c165d7
msgid "safeseq"
msgstr ""

#: ../../ref/templates/builtins.txt:1943
# d2fc3886b0284c6da207053d88d6a1a9
msgid "Applies the :tfilter:`safe` filter to each element of a sequence.  Useful in conjunction with other filters that operate on sequences, such as :tfilter:`join`.  For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1949
# 9cfd66a62098464eb12a49437e4e0485
msgid "You couldn't use the :tfilter:`safe` filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence."
msgstr ""

#: ../../ref/templates/builtins.txt:1956
# 1a26a44312ee4dfeb998584f5b380178
msgid "slice"
msgstr ""

#: ../../ref/templates/builtins.txt:1958
# 84cc2a0bfa454bce9fbbb369c652f662
msgid "Returns a slice of the list."
msgstr ""

#: ../../ref/templates/builtins.txt:1960
# 3adcae43d9d047ed89c2a9e0c43100aa
msgid "Uses the same syntax as Python's list slicing. See http://diveintopython.net/native_data_types/lists.html#odbchelper.list.slice for an introduction."
msgstr ""

#: ../../ref/templates/builtins.txt:1968
# a9e3bd09ab7e40fd8bbaa2c9cc6dfaa7
msgid "If ``some_list`` is ``['a', 'b', 'c']``, the output will be ``['a', 'b']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1973
# 6e1e6a32ea7f43a5abaf83988fb4ba19
msgid "slugify"
msgstr ""

#: ../../ref/templates/builtins.txt:1975
# 0c4c261779e04cffb998bcee0afe422f
msgid "Converts to lowercase, removes non-word characters (alphanumerics and underscores) and converts spaces to hyphens. Also strips leading and trailing whitespace."
msgstr ""

#: ../../ref/templates/builtins.txt:1983
# 84c243c9c04d4dc582fc28148e5325fc
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"joel-is-a-slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1988
# c7435f5e2ece437eb20b37db4a80562e
msgid "stringformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1990
# 23359b4b468341abbf451514ad6b3d9e
msgid "Formats the variable according to the argument, a string formatting specifier. This specifier uses Python string formatting syntax, with the exception that the leading \"%\" is dropped."
msgstr ""

#: ../../ref/templates/builtins.txt:1994
# 855b2a5792fb49f5bf12d6b892b5e64b
msgid "See http://docs.python.org/library/stdtypes.html#string-formatting-operations for documentation of Python string formatting"
msgstr ""

#: ../../ref/templates/builtins.txt:2001
# 7b500d01faee4a83ab333d6d18e968d7
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2006
# 16b67dddde6b47be822fd8432899ef6c
msgid "striptags"
msgstr ""

#: ../../ref/templates/builtins.txt:2008
# 8024e6bbb6974f2980b59519d3dda00e
msgid "Strips all [X]HTML tags."
msgstr ""

#: ../../ref/templates/builtins.txt:2014
# d2f00e58ea5b4be6b9536ccb8711156d
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2020
# 6861ba53cd374d76a7857e4531ca2ae6
msgid "time"
msgstr ""

#: ../../ref/templates/builtins.txt:2022
# ed8103beb60e47b69baa5969035151bb
msgid "Formats a time according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:2024
# ac927a2104234bc494d840a9f12c82d1
msgid "Given format can be the predefined one :setting:`TIME_FORMAT`, or a custom format, same as the :tfilter:`date` filter. Note that the predefined format is locale-dependant."
msgstr ""

#: ../../ref/templates/builtins.txt:2028
# b64b3abff3454527b2897ef84e71f26c
msgid "The time filter will only accept parameters in the format string that relate to the time of day, not the date (for obvious reasons). If you need to format a date, use the :tfilter:`date` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:2036
# a6b0b38dcbd7433b8d4559778cd05839
msgid "If ``value`` is equivalent to ``datetime.datetime.now()``, the output will be the string ``\"01:23\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2039
# 3fc321819afd461f9ad5ac540508a616
msgid "Another example:"
msgstr ""

#: ../../ref/templates/builtins.txt:2041
# bfe6b9e9f4d346a286eae24590f53dcb
msgid "Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` is, for example, ``\"de\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:2046
# 0b7d9a2d5d984ab6a477c79c74e591ff
msgid "the output will be the string ``\"01:23:00\"`` (The ``\"TIME_FORMAT\"`` format specifier for the ``de`` locale as shipped with Django is ``\"H:i:s\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:2053
# ecdd379837de495695894e620f9ebc13
msgid "...the formatting string defined in the :setting:`TIME_FORMAT` setting will be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:2062
# 2d5af53a6e9d4926b5548a814a7db99c
msgid "timesince"
msgstr ""

#: ../../ref/templates/builtins.txt:2064
# 7fdf523b7ac34a5496a229c2e1aade95
msgid "Formats a date as the time since that date (e.g., \"4 days, 6 hours\")."
msgstr ""

#: ../../ref/templates/builtins.txt:2066
# 5370120819ff4b48b1ae78f84a2b3353
msgid "Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is *now*). For example, if ``blog_date`` is a date instance representing midnight on 1 June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006, then ``{{ blog_date|timesince:comment_date }}`` would return \"8 hours\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2072
#: ../../ref/templates/builtins.txt:2091
# b1395329d50743409aafbd7258c233ce
# 79f7668938304ca596756e661bd07593
msgid "Comparing offset-naive and offset-aware datetimes will return an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:2074
# de6885ebc6ba4bd19dde6a353f41c5ea
msgid "Minutes is the smallest unit used, and \"0 minutes\" will be returned for any date that is in the future relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2080
# b0cfbd8f029c49db9098b69898a58a25
msgid "timeuntil"
msgstr ""

#: ../../ref/templates/builtins.txt:2082
# 61b90e3123b64d54a284820e8c3081e3
msgid "Similar to ``timesince``, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and ``conference_date`` is a date instance holding 29 June 2006, then ``{{ conference_date|timeuntil }}`` will return \"4 weeks\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2087
# 7b3f3ed122a544ebb0fb65187ba67927
msgid "Takes an optional argument that is a variable containing the date to use as the comparison point (instead of *now*). If ``from_date`` contains 22 June 2006, then ``{{ conference_date|timeuntil:from_date }}`` will return \"1 week\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2093
# d2727b4c2d994973998a85f2ef2a8418
msgid "Minutes is the smallest unit used, and \"0 minutes\" will be returned for any date that is in the past relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2099
# 29bbb8d21b4247c59fd81c7de1ee21cd
msgid "title"
msgstr ""

#: ../../ref/templates/builtins.txt:2101
# 181d2927d8f14c698cc120bd873079f4
msgid "Converts a string into titlecase."
msgstr ""

#: ../../ref/templates/builtins.txt:2107
# 647035eb9bd549b898637636d59b69ac
msgid "If ``value`` is ``\"my first post\"``, the output will be ``\"My First Post\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2112
# ae0402a3b27a4091a8badd4399961e97
msgid "truncatechars"
msgstr ""

#: ../../ref/templates/builtins.txt:2116
# aeb4d073afc548498976bfdd8f83772f
msgid "Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis sequence (\"...\")."
msgstr ""

#: ../../ref/templates/builtins.txt:2119
# 257ccc2fb6a64623a17c108c2f7503a6
msgid "**Argument:** Number of characters to truncate to"
msgstr ""

#: ../../ref/templates/builtins.txt:2125
# 85da6843a3c649ca8397c1bf7308b02e
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel i...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2130
# 4eea0db37ad6408091d7b4a2eb730ee3
msgid "truncatewords"
msgstr ""

#: ../../ref/templates/builtins.txt:2132
# f33d357ff603454a979d6abbed41644f
msgid "Truncates a string after a certain number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2134
# 17f322ecea9345efb133f4ddb9a1d4e6
msgid "**Argument:** Number of words to truncate after"
msgstr ""

#: ../../ref/templates/builtins.txt:2140
# 7bf2c52e9eb042e5831efce6c2c5d803
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is ...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2142
# 6dfa1ae668604562b9564b814070c258
msgid "Newlines within the string will be removed."
msgstr ""

#: ../../ref/templates/builtins.txt:2147
# 94a6985e429940babc45c5ecd5466a67
msgid "truncatewords_html"
msgstr ""

#: ../../ref/templates/builtins.txt:2149
# 9fb455cf0c694fa5b8932cf4eb01c8ac
msgid "Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation."
msgstr ""

#: ../../ref/templates/builtins.txt:2153
# d479f487d5084e07a52a65ae9c52a1c9
msgid "This is less efficient than :tfilter:`truncatewords`, so should only be used when it is being passed HTML text."
msgstr ""

#: ../../ref/templates/builtins.txt:2160
# 2bf5b525d75547218e950370832bf08b
msgid "If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be ``\"<p>Joel is ...</p>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2163
# 41b628c58bd042ddabc213ace1e277d1
msgid "Newlines in the HTML content will be preserved."
msgstr ""

#: ../../ref/templates/builtins.txt:2168
# 8dfc491775484817b92b8ea51dc818c8
msgid "unordered_list"
msgstr ""

#: ../../ref/templates/builtins.txt:2170
# a164738e0da64202a431a81ba909f1b1
msgid "Recursively takes a self-nested list and returns an HTML unordered list -- WITHOUT opening and closing <ul> tags."
msgstr ""

#: ../../ref/templates/builtins.txt:2173
# 6dd559d9b66a42e0adbfde65113a77ed
msgid "The list is assumed to be in the proper format. For example, if ``var`` contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then ``{{ var|unordered_list }}`` would return::"
msgstr ""

#: ../../ref/templates/builtins.txt:2189
# 6aaf923e2d8e40529207d5b4e5e6266f
msgid "Note: An older, more restrictive and verbose input format is also supported: ``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``,"
msgstr ""

#: ../../ref/templates/builtins.txt:2195
# d6ff91ca82804765a6060bf3534f8e64
msgid "upper"
msgstr ""

#: ../../ref/templates/builtins.txt:2197
# 2de81a97ab3a47a0b5b618c3abaa1d93
msgid "Converts a string into all uppercase."
msgstr ""

#: ../../ref/templates/builtins.txt:2203
# 78823d5cd2dd498bacbc411ae8b5ea05
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"JOEL IS A SLUG\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2208
# 7dcf4010472446d3b355c79c15bc0dc6
msgid "urlencode"
msgstr ""

#: ../../ref/templates/builtins.txt:2210
# f931f1df54b8483a93bfac18823ff5cb
msgid "Escapes a value for use in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:2216
# 71fce6fbb0314f0686f5de74a26d4864
msgid "If ``value`` is ``\"http://www.example.org/foo?a=b&c=d\"``, the output will be ``\"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2221
# 4687ea5a934a4899857407747a6ebe47
msgid "An optional argument containing the characters which should not be escaped can be provided."
msgstr ""

#: ../../ref/templates/builtins.txt:2224
# c14cabd188834c549b587e98e20d104f
msgid "If not provided, the '/' character is assumed safe. An empty string can be provided when *all* characters should be escaped. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:2229
# 95051f185e254594bab4585edd25d9ae
msgid "If ``value`` is ``\"http://www.example.org/\"``, the output will be ``\"http%3A%2F%2Fwww.example.org%2F\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2235
# 488480d67a344c0d8ca4647d780231e2
msgid "urlize"
msgstr ""

#: ../../ref/templates/builtins.txt:2237
# afaa672efab44016bd845e497398cb27
msgid "Converts URLs in text into clickable links."
msgstr ""

#: ../../ref/templates/builtins.txt:2239
# cfd8078a7be7476988540d230d36531a
msgid "This template tag works on links prefixed with ``http://``, ``https://``, or ``www.``. For example, ``http://goo.gl/aia1t`` will get converted but ``goo.gl/aia1t`` won't."
msgstr ""

#: ../../ref/templates/builtins.txt:2243
# b2835127dda8457abde0205c07279060
msgid "It also supports domain-only links ending in one of the original top level domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and ``.org``). For example, ``djangoproject.com`` gets converted."
msgstr ""

#: ../../ref/templates/builtins.txt:2249
# 61a6e039866d44bb850a2ebc4fc06d18
msgid "Until Django 1.4, only the ``.com``, ``.net`` and ``.org`` suffixes were supported for domain-only links."
msgstr ""

#: ../../ref/templates/builtins.txt:2252
# 02528bc47699426cbe2090e9fc68be8a
msgid "Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and ``urlize`` will still do the right thing."
msgstr ""

#: ../../ref/templates/builtins.txt:2255
# ca853ba55e4644d3ad9921667de484c5
msgid "Links generated by ``urlize`` have a ``rel=\"nofollow\"`` attribute added to them."
msgstr ""

#: ../../ref/templates/builtins.txt:2262
# 1e284c5d845d4cdeab5da124978fceed
msgid "If ``value`` is ``\"Check out www.djangoproject.com\"``, the output will be ``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproject.com</a>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2266
# f8f5af5f66dd4dbf856061bc13d6c0ba
msgid "The ``urlize`` filter also takes an optional parameter ``autoescape``. If ``autoescape`` is ``True``, the link text and URLs will be escaped using Django's built-in :tfilter:`escape` filter. The default value for ``autoescape`` is ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:2273
# b35da694bd4144efaaffde20110ecbd6
msgid "If ``urlize`` is applied to text that already contains HTML markup, things won't work as expected. Apply this filter only to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2279
# 7f6d9a2476b34d6b967c6af27aef37c4
msgid "urlizetrunc"
msgstr ""

#: ../../ref/templates/builtins.txt:2281
# f2156102929f4592bd6dc042b69690d7
msgid "Converts URLs into clickable links just like urlize_, but truncates URLs longer than the given character limit."
msgstr ""

#: ../../ref/templates/builtins.txt:2284
# a8e0715dfb424e5a9d359157a46d8fac
msgid "**Argument:** Number of characters that link text should be truncated to, including the ellipsis that's added if truncation is necessary."
msgstr ""

#: ../../ref/templates/builtins.txt:2291
# 2388a23113e84738b5c006b8e19091ce
msgid "If ``value`` is ``\"Check out www.djangoproject.com\"``, the output would be ``'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangopr...</a>'``."
msgstr ""

#: ../../ref/templates/builtins.txt:2295
# c5657933334047938b52a6024c01fba4
msgid "As with urlize_, this filter should only be applied to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2300
# 5147fc1c3ab64981abd883ff5826336c
msgid "wordcount"
msgstr ""

#: ../../ref/templates/builtins.txt:2302
# 740e328abb5947f880dd5a4e9c4e145a
msgid "Returns the number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2308
# cab5a2c874ca4056ac3a68e4542983dd
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:2313
# 67c4ddacc7624fa4b1460fda77612c63
msgid "wordwrap"
msgstr ""

#: ../../ref/templates/builtins.txt:2315
# 31e94367ca3b47cf96cff6b0d59a90aa
msgid "Wraps words at specified line length."
msgstr ""

#: ../../ref/templates/builtins.txt:2317
# c8628ea2e6a544bea4454733bfe98219
msgid "**Argument:** number of characters at which to wrap the text"
msgstr ""

#: ../../ref/templates/builtins.txt:2323
# 5fc6aa6e23dc42a9bbb3de3222ec4054
msgid "If ``value`` is ``Joel is a slug``, the output would be::"
msgstr ""

#: ../../ref/templates/builtins.txt:2332
# 3c2413985f2646b0baf32ecfbcca3f10
msgid "yesno"
msgstr ""

#: ../../ref/templates/builtins.txt:2334
# 620c9334fdea4331b6ead14a5a7e7cac
msgid "Maps values for true, false and (optionally) None, to the strings \"yes\", \"no\", \"maybe\", or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:"
msgstr ""

#: ../../ref/templates/builtins.txt:2345
#: ../../ref/templates/builtins.txt:2346
# 76345d5a190b4bd1934eadffdcdd4e8d
# b66391ac415e41f899bae2c15cd945d2
msgid "``True``"
msgstr ""

#: ../../ref/templates/builtins.txt:2345
# 7fac58150552428b915f42acb682162b
msgid "``yes``"
msgstr ""

#: ../../ref/templates/builtins.txt:2346
#: ../../ref/templates/builtins.txt:2347
#: ../../ref/templates/builtins.txt:2348
# e2c8d46e7ad2459380643b85847917ef
# 475d34d9240940db9e6573faddd14890
# b17e383720f44072b62fbc1acbcf4ec6
msgid "``\"yeah,no,maybe\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2346
# 21652e00dca74765b9ceaf5ad6f6402a
msgid "``yeah``"
msgstr ""

#: ../../ref/templates/builtins.txt:2347
# 94c20bb4001d420e8663ec5c3c3126dd
msgid "``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:2347
# 79896fbafb0a4e82811c2a2a79436817
msgid "``no``"
msgstr ""

#: ../../ref/templates/builtins.txt:2348
#: ../../ref/templates/builtins.txt:2349
# e293cfff0f144e54b16381e1e05bc019
# d70f800405b446f4a858b99bc1d1caf3
msgid "``None``"
msgstr ""

#: ../../ref/templates/builtins.txt:2348
# 50c3e2f389e2462385c304ffea2f5c53
msgid "``maybe``"
msgstr ""

#: ../../ref/templates/builtins.txt:2349
# 4afbf48e4c4b4d16989a70bd4ffdf312
msgid "``\"yeah,no\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2349
# 57efe185d1374caf999615ef4e66c61e
msgid "``\"no\"`` (converts None to False if no mapping for None is given)"
msgstr ""

#: ../../ref/templates/builtins.txt:2354
# bdbd2fb01d2241cb85ea4bfe9dd69a5f
msgid "Internationalization tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:2356
# f39a19d4939a424ea039b7c53f64dd7e
msgid "Django provides template tags and filters to control each aspect of :doc:`internationalization </topics/i18n/index>` in templates. They allow for granular control of translations, formatting, and time zone conversions."
msgstr ""

#: ../../ref/templates/builtins.txt:2361
# 1b0c6abff8274d6f82aafe58065c3194
msgid "i18n"
msgstr ""

#: ../../ref/templates/builtins.txt:2363
# 312c4ff1df5a47f2b0cc4ab3f7c29a4f
msgid "This library allows specifying translatable text in templates. To enable it, set :setting:`USE_I18N` to ``True``, then load it with ``{% load i18n %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:2367
# 522859bdd0ce44108577e13d8c00e807
msgid "See :ref:`specifying-translation-strings-in-template-code`."
msgstr ""

#: ../../ref/templates/builtins.txt:2370
# 16d7b05d417f47eb95ce488299064304
msgid "l10n"
msgstr ""

#: ../../ref/templates/builtins.txt:2372
# 05b54590767e4608b489638395d9ca13
msgid "This library provides control over the localization of values in templates. You only need to load the library using ``{% load l10n %}``, but you'll often set :setting:`USE_L10N` to ``True`` so that localization is active by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2376
# c6eba3a28370448aa5ae7843662b4cdd
msgid "See :ref:`topic-l10n-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2379
# 051fc9414f06442cb22b4284765e0bd6
msgid "tz"
msgstr ""

#: ../../ref/templates/builtins.txt:2383
# 97b3408ea8d8425f85a12bba7f8954c7
msgid "This library provides control over time zone conversions in templates. Like ``l10n``, you only need to load the library using ``{% load tz %}``, but you'll usually also set :setting:`USE_TZ` to ``True`` so that conversion to local time happens by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2388
# d4a635a452914cd1982134a248c0593e
msgid "See :ref:`time-zones-in-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2391
# 141cb9e32f15428982525097c1827906
msgid "Other tags and filters libraries"
msgstr ""

#: ../../ref/templates/builtins.txt:2393
# d6b513eb46354539bac505bf65704f5f
msgid "Django comes with a couple of other template-tag libraries that you have to enable explicitly in your :setting:`INSTALLED_APPS` setting and enable in your template with the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:2400
# fe6d5960c5774988b38415f2fce2f392
msgid "A set of Django template filters useful for adding a \"human touch\" to data. See :doc:`/ref/contrib/humanize`."
msgstr ""

#: ../../ref/templates/builtins.txt:2406
# 904dae79a7d740c5a17c57b36287f3f0
msgid "A collection of template filters that implement these common markup languages:"
msgstr ""

#: ../../ref/templates/builtins.txt:2408
# 5c579f14d2194174851f12811de8d1f8
msgid "Textile"
msgstr ""

#: ../../ref/templates/builtins.txt:2410
# 4a5c230b944a4ad69430ba65b7c322d9
msgid "reST (reStructuredText)"
msgstr ""

#: ../../ref/templates/builtins.txt:2417
# f2d7f632912e409c8dca0db9fcee35fc
msgid "A collection of template tags that can be useful while designing a Web site, such as a generator of Lorem Ipsum text. See :doc:`/ref/contrib/webdesign`."
msgstr ""

#: ../../ref/templates/builtins.txt:2430
# 9b12e90b945a44af9cbae0e77f0fc439
msgid "To link to static files that are saved in :setting:`STATIC_ROOT` Django ships with a :ttag:`static` template tag. You can use this regardless if you're using :class:`~django.template.RequestContext` or not."
msgstr ""

#: ../../ref/templates/builtins.txt:2439
# 08890a875fa44181bde781d6616a3237
msgid "It is also able to consume standard context variables, e.g. assuming a ``user_stylesheet`` variable is passed to the template:"
msgstr ""

#: ../../ref/templates/builtins.txt:2449
# 2df5179e92ef48c3bd14d35fcf0d9d2a
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app also ships with a :ttag:`static template tag<staticfiles-static>` which uses ``staticfiles'`` :setting:`STATICFILES_STORAGE` to build the URL of the given path. Use that instead if you have an advanced use case such as :ref:`using a cloud service to serve static files<staticfiles-from-cdn>`::"
msgstr ""

#: ../../ref/templates/builtins.txt:2461
# e1ca6d709de4414eab32b7dd7974c1da
msgid "get_static_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2465
# 53daed143a6744d6889d2ca2410aa69b
msgid "If you're not using :class:`~django.template.RequestContext`, or if you need more control over exactly where and how :setting:`STATIC_URL` is injected into the template, you can use the :ttag:`get_static_prefix` template tag instead::"
msgstr ""

#: ../../ref/templates/builtins.txt:2473
# f4d2135acb614af5bd7673ef37680094
msgid "There's also a second form you can use to avoid extra processing if you need the value multiple times::"
msgstr ""

#: ../../ref/templates/builtins.txt:2485
# 746dcaac2adb4ab49e6edf32f70dca61
msgid "get_media_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2489
# b264120383ff45b887bd1b8a094029a5
msgid "Similar to the :ttag:`get_static_prefix`, ``get_media_prefix`` populates a template variable with the media prefix :setting:`MEDIA_URL`, e.g.::"
msgstr ""

#: ../../ref/templates/index.txt:5
# 98d0da7451604142a65eb405dce03e1c
msgid "Django's template engine provides a powerful mini-language for defining the user-facing layer of your application, encouraging a clean separation of application and presentation logic. Templates can be maintained by anyone with an understanding of HTML; no knowledge of Python is required."
msgstr ""

#: ../../ref/templates/index.txt:18
# 30b4900f7c214818a59690beb9e84aa1
msgid "For information on writing your own custom tags and filters, see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../ref/unicode.txt:3
# e9b8fdde323d4d1e8197b9979ecba8ec
msgid "Unicode data"
msgstr ""

#: ../../ref/unicode.txt:5
# 425ab0bb5e3c43e69acc7a4254c60890
msgid "Django natively supports Unicode data everywhere. Providing your database can somehow store the data, you can safely pass around Unicode strings to templates, models and the database."
msgstr ""

#: ../../ref/unicode.txt:9
# f8494afc31c64b77a79816ebf1f3b7dc
msgid "This document tells you what you need to know if you're writing applications that use data or templates that are encoded in something other than ASCII."
msgstr ""

#: ../../ref/unicode.txt:13
# 524e33c0fc12458ab6bcb4e851035db9
msgid "Creating the database"
msgstr ""

#: ../../ref/unicode.txt:15
# 2a84871b81bc4ec9ae5a8ef7688ce672
msgid "Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you won't be able to store certain characters in the database, and information will be lost."
msgstr ""

#: ../../ref/unicode.txt:20
# fafb349576e44a5088f8b86ebd9454b0
msgid "MySQL users, refer to the `MySQL manual`_ (section 9.1.3.2 for MySQL 5.1) for details on how to set or alter the database character set encoding."
msgstr ""

#: ../../ref/unicode.txt:23
# d01137d2aedb4ffc94db10e9a1fb360d
msgid "PostgreSQL users, refer to the `PostgreSQL manual`_ (section 21.2.2 in PostgreSQL 8) for details on creating databases with the correct encoding."
msgstr ""

#: ../../ref/unicode.txt:26
# d877f55c19154cae8b343c99a1001b08
msgid "SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for internal encoding."
msgstr ""

#: ../../ref/unicode.txt:32
# ff6458a30e6241e2964862ed0d49cb45
msgid "All of Django's database backends automatically convert Unicode strings into the appropriate encoding for talking to the database. They also automatically convert strings retrieved from the database into Python Unicode strings. You don't even need to tell Django what encoding your database uses: that is handled transparently."
msgstr ""

#: ../../ref/unicode.txt:38
# c02b6b7eb817465394de616cdad8560e
msgid "For more, see the section \"The database API\" below."
msgstr ""

#: ../../ref/unicode.txt:41
# afddf288dd6f4238841cf93b6c82069d
msgid "General string handling"
msgstr ""

#: ../../ref/unicode.txt:43
# a4668416acb14b52b659697bf9c7f324
msgid "Whenever you use strings with Django -- e.g., in database lookups, template rendering or anywhere else -- you have two choices for encoding those strings. You can use Unicode strings, or you can use normal strings (sometimes called \"bytestrings\") that are encoded using UTF-8."
msgstr ""

#: ../../ref/unicode.txt:50
# 402c21f316564403b13dd488987a7c27
msgid "A bytestring does not carry any information with it about its encoding. For that reason, we have to make an assumption, and Django assumes that all bytestrings are in UTF-8."
msgstr ""

#: ../../ref/unicode.txt:54
# edda22abd85e4b749fe0059001c0c4b4
msgid "If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a ``UnicodeDecodeError`` at some point."
msgstr ""

#: ../../ref/unicode.txt:58
# 6d2711608deb488a83a6cff3a1525688
msgid "If your code only uses ASCII data, it's safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""

#: ../../ref/unicode.txt:61
# f1e66c52bd5f47759debc0609c1d348e
msgid "Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` setting is set to something other than ``'utf-8'`` you can use that other encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the :setting:`DEFAULT_CHARSET` setting is not actually under your control (if you are the application developer). It's under the control of the person installing and using your application -- and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting."
msgstr ""

#: ../../ref/unicode.txt:71
# e33c54692d4f46f5a5df16f836e7323d
msgid "In most cases when Django is dealing with strings, it will convert them to Unicode strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a Unicode string back in the result."
msgstr ""

#: ../../ref/unicode.txt:76
# fd2fc175d53a42629437034e87a1c019
msgid "Translated strings"
msgstr ""

#: ../../ref/unicode.txt:78
# 65b774e3ef1d4f3d84a98ca48246ea24
msgid "Aside from Unicode strings and bytestrings, there's a third type of string-like object you may encounter when using Django. The framework's internationalization features introduce the concept of a \"lazy translation\" -- a string that has been marked as translated but whose actual translation result isn't determined until the object is used in a string. This feature is useful in cases where the translation locale is unknown until the string is used, even though the string might have originally been created when the code was first imported."
msgstr ""

#: ../../ref/unicode.txt:87
# f782ff5341c2477298aaf9f667d04b73
msgid "Normally, you won't have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a ``django.utils.functional.__proxy__`` object, it is a lazy translation. Calling ``unicode()`` with the lazy translation as the argument will generate a Unicode string in the current locale."
msgstr ""

#: ../../ref/unicode.txt:93
# 1e4340150c094a2a9383e896d80c0054
msgid "For more details about lazy translation objects, refer to the :doc:`internationalization </topics/i18n/index>` documentation."
msgstr ""

#: ../../ref/unicode.txt:97
# 7277ad519c52455da09affdc1d043ef4
msgid "Useful utility functions"
msgstr ""

#: ../../ref/unicode.txt:99
# 55199d5b875b433b931974a3985acf47
msgid "Because some string operations come up again and again, Django ships with a few useful functions that should make working with Unicode and bytestring objects a bit easier."
msgstr ""

#: ../../ref/unicode.txt:104
# 9bfe4a49e73f4c23bf87dc8091cedd4f
msgid "Conversion functions"
msgstr ""

#: ../../ref/unicode.txt:106
# b843908195cc4dc4b06ef536795f6178
msgid "The ``django.utils.encoding`` module contains a few functions that are handy for converting back and forth between Unicode and bytestrings."
msgstr ""

#: ../../ref/unicode.txt:109
# 177fc5f02b7848c5ab0ebe672020ad72
msgid "``smart_unicode(s, encoding='utf-8', strings_only=False, errors='strict')`` converts its input to a Unicode string. The ``encoding`` parameter specifies the input encoding. (For example, Django uses this internally when processing form input data, which might not be UTF-8 encoded.) The ``strings_only`` parameter, if set to True, will result in Python numbers, booleans and ``None`` not being converted to a string (they keep their original types). The ``errors`` parameter takes any of the values that are accepted by Python's ``unicode()`` function for its error handling."
msgstr ""

#: ../../ref/unicode.txt:119
# 29b2b095c3604fafa8999b32425df704
msgid "If you pass ``smart_unicode()`` an object that has a ``__unicode__`` method, it will use that method to do the conversion."
msgstr ""

#: ../../ref/unicode.txt:122
# 9b288c8f3aec478db5a598c854d26c19
msgid "``force_unicode(s, encoding='utf-8', strings_only=False, errors='strict')`` is identical to ``smart_unicode()`` in almost all cases. The difference is when the first argument is a :ref:`lazy translation <lazy-translations>` instance. While ``smart_unicode()`` preserves lazy translations, ``force_unicode()`` forces those objects to a Unicode string (causing the translation to occur). Normally, you'll want to use ``smart_unicode()``. However, ``force_unicode()`` is useful in template tags and filters that absolutely *must* have a string to work with, not just something that can be converted to a string."
msgstr ""

#: ../../ref/unicode.txt:132
# 366d6233b4584d178cf3408005ea5e67
msgid "``smart_str(s, encoding='utf-8', strings_only=False, errors='strict')`` is essentially the opposite of ``smart_unicode()``. It forces the first argument to a bytestring. The ``strings_only`` parameter has the same behavior as for ``smart_unicode()`` and ``force_unicode()``. This is slightly different semantics from Python's builtin ``str()`` function, but the difference is needed in a few places within Django's internals."
msgstr ""

#: ../../ref/unicode.txt:139
# 8e954c16c8174917b2c3505ecfa6e8d5
msgid "Normally, you'll only need to use ``smart_unicode()``. Call it as early as possible on any input data that might be either Unicode or a bytestring, and from then on, you can treat the result as always being Unicode."
msgstr ""

#: ../../ref/unicode.txt:146
# a8965081c48146aab20cc8f952ae918c
msgid "URI and IRI handling"
msgstr ""

#: ../../ref/unicode.txt:148
# d2eb5f1296bb4e729c04566f1bc09817
msgid "Web frameworks have to deal with URLs (which are a type of IRI_). One requirement of URLs is that they are encoded using only ASCII characters. However, in an international environment, you might need to construct a URL from an IRI_ -- very loosely speaking, a URI_ that can contain Unicode characters. Quoting and converting an IRI to URI can be a little tricky, so Django provides some assistance."
msgstr ""

#: ../../ref/unicode.txt:155
# 78b4a7f51d7249d8bed6c30d6ee359fe
msgid "The function ``django.utils.encoding.iri_to_uri()`` implements the conversion from IRI to URI as required by the specification (:rfc:`3987`)."
msgstr ""

#: ../../ref/unicode.txt:158
# 202178a74caf40c1ba8f9aa0d7ef52e6
msgid "The functions ``django.utils.http.urlquote()`` and ``django.utils.http.urlquote_plus()`` are versions of Python's standard ``urllib.quote()`` and ``urllib.quote_plus()`` that work with non-ASCII characters. (The data is converted to UTF-8 prior to encoding.)"
msgstr ""

#: ../../ref/unicode.txt:163
# fb53983f38b1468da502eb1677e46d3a
msgid "These two groups of functions have slightly different purposes, and it's important to keep them straight. Normally, you would use ``urlquote()`` on the individual portions of the IRI or URI path so that any reserved characters such as '&' or '%' are correctly encoded. Then, you apply ``iri_to_uri()`` to the full IRI and it converts any non-ASCII characters to the correct encoded values."
msgstr ""

#: ../../ref/unicode.txt:171
# 5138506bb4334409be3ff4ba64537e64
msgid "Technically, it isn't correct to say that ``iri_to_uri()`` implements the full algorithm in the IRI specification. It doesn't (yet) perform the international domain name encoding portion of the algorithm."
msgstr ""

#: ../../ref/unicode.txt:175
# 92564ea678184bfdaebbbbc2bebc4598
msgid "The ``iri_to_uri()`` function will not change ASCII characters that are otherwise permitted in a URL. So, for example, the character '%' is not further encoded when passed to ``iri_to_uri()``. This means you can pass a full URL to this function and it will not mess up the query string or anything like that."
msgstr ""

#: ../../ref/unicode.txt:181
# b62aeee5af0e4ef6bc899bc249c8e49c
msgid "An example might clarify things here::"
msgstr ""

#: ../../ref/unicode.txt:188
# 53eff62274d3414e8d707cd8161dc941
msgid "If you look carefully, you can see that the portion that was generated by ``urlquote()`` in the second example was not double-quoted when passed to ``iri_to_uri()``. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call ``iri_to_uri()`` on the result."
msgstr ""

#: ../../ref/unicode.txt:195
# 98bf6b66276a48cb8786143ae7aced90
msgid "The ``iri_to_uri()`` function is also idempotent, which means the following is always true::"
msgstr ""

#: ../../ref/unicode.txt:200
# 199d2d8ccb594515ab4908f9c8722a17
msgid "So you can safely call it multiple times on the same IRI without risking double-quoting problems."
msgstr ""

#: ../../ref/unicode.txt:209
# 200736ad18174b31938b7dbdf906a2d1
msgid "Because all strings are returned from the database as Unicode strings, model fields that are character based (CharField, TextField, URLField, etc) will contain Unicode values when Django retrieves data from the database. This is *always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""

#: ../../ref/unicode.txt:214
# 2adf3260e16c4650825721b1ce0de34a
msgid "You can pass in bytestrings when creating a model or populating a field, and Django will convert it to Unicode when it needs to."
msgstr ""

#: ../../ref/unicode.txt:218
# f248d0c58e2446ea9876d57c725f7a73
msgid "Choosing between ``__str__()`` and ``__unicode__()``"
msgstr ""

#: ../../ref/unicode.txt:220
# 9eb3d2a514ea4b748d77731d2af64969
msgid "One consequence of using Unicode by default is that you have to take some care when printing data from the model."
msgstr ""

#: ../../ref/unicode.txt:223
# 7405169f8bb041bfb2d53ff055db9779
msgid "In particular, rather than giving your model a ``__str__()`` method, we recommended you implement a ``__unicode__()`` method. In the ``__unicode__()`` method, you can quite safely return the values of all your fields without having to worry about whether they fit into a bytestring or not. (The way Python works, the result of ``__str__()`` is *always* a bytestring, even if you accidentally try to return a Unicode object)."
msgstr ""

#: ../../ref/unicode.txt:230
# 3156db7573904b5cbe77e9484ce76e75
msgid "You can still create a ``__str__()`` method on your models if you want, of course, but you shouldn't need to do this unless you have a good reason. Django's ``Model`` base class automatically provides a ``__str__()`` implementation that calls ``__unicode__()`` and encodes the result into UTF-8. This means you'll normally only need to implement a ``__unicode__()`` method and let Django handle the coercion to a bytestring when required."
msgstr ""

#: ../../ref/unicode.txt:238
# 864678fa6a574b8abcd475ca96ff3679
msgid "Taking care in ``get_absolute_url()``"
msgstr ""

#: ../../ref/unicode.txt:240
# 0cb89e3be6b54a6d8bb2b6e9a9ecd833
msgid "URLs can only contain ASCII characters. If you're constructing a URL from pieces of data that might be non-ASCII, be careful to encode the results in a way that is suitable for a URL. The ``django.db.models.permalink()`` decorator handles this for you automatically."
msgstr ""

#: ../../ref/unicode.txt:245
# f341346fbee744b48b5c92629334adc0
msgid "If you're constructing a URL manually (i.e., *not* using the ``permalink()`` decorator), you'll need to take care of the encoding yourself. In this case, use the ``iri_to_uri()`` and ``urlquote()`` functions that were documented above_. For example::"
msgstr ""

#: ../../ref/unicode.txt:257
# c59041af990648f5b961c6e31e776a7d
msgid "This function returns a correctly encoded URL even if ``self.location`` is something like \"Jack visited Paris & Orléans\". (In fact, the ``iri_to_uri()`` call isn't strictly necessary in the above example, because all the non-ASCII characters would have been removed in quoting in the first line.)"
msgstr ""

#: ../../ref/unicode.txt:265
# 6d4f5669371744309e524d5ea5b439c7
msgid "The database API"
msgstr ""

#: ../../ref/unicode.txt:267
# e63e6a50b2a2497db0f5879822b990ef
msgid "You can pass either Unicode strings or UTF-8 bytestrings as arguments to ``filter()`` methods and the like in the database API. The following two querysets are identical::"
msgstr ""

#: ../../ref/unicode.txt:277
# 6889d9eed027483786014c563c1ab685
msgid "You can use either Unicode or bytestrings when creating templates manually::"
msgstr ""

#: ../../ref/unicode.txt:283
# cef41e7353c7461bb69027465269e48f
msgid "But the common case is to read templates from the filesystem, and this creates a slight complication: not all filesystems store their data encoded as UTF-8. If your template files are not stored with a UTF-8 encoding, set the :setting:`FILE_CHARSET` setting to the encoding of the files on disk. When Django reads in a template file, it will convert the data from this encoding to Unicode. (:setting:`FILE_CHARSET` is set to ``'utf-8'`` by default.)"
msgstr ""

#: ../../ref/unicode.txt:290
# 4637a675bd3e4be1ba19ea7faa470e7e
msgid "The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered templates. This is set to UTF-8 by default."
msgstr ""

#: ../../ref/unicode.txt:294
# 2bb18fd06d4649d3b8f33aaf1878de37
msgid "Template tags and filters"
msgstr ""

#: ../../ref/unicode.txt:296
# 25a36b476a9c4158bcda292a0aeec38f
msgid "A couple of tips to remember when writing your own template tags and filters:"
msgstr ""

#: ../../ref/unicode.txt:298
# f92a20a9b8f14e6bafe06e2577055ed5
msgid "Always return Unicode strings from a template tag's ``render()`` method and from template filters."
msgstr ""

#: ../../ref/unicode.txt:301
# 4dd314e8b8ff413590c1e56c9af2f939
msgid "Use ``force_unicode()`` in preference to ``smart_unicode()`` in these places. Tag rendering and filter calls occur as the template is being rendered, so there is no advantage to postponing the conversion of lazy translation objects into strings. It's easier to work solely with Unicode strings at that point."
msgstr ""

#: ../../ref/unicode.txt:308
# 9b06b283a765454493cc9d72f7f9bd70
msgid "Email"
msgstr ""

#: ../../ref/unicode.txt:310
# eb80f95246ff4c4795f9ed34670d052a
msgid "Django's email framework (in ``django.core.mail``) supports Unicode transparently. You can use Unicode data in the message bodies and any headers. However, you're still obligated to respect the requirements of the email specifications, so, for example, email addresses should use only ASCII characters."
msgstr ""

#: ../../ref/unicode.txt:316
# b0b58043eb5f4f63b9ce3b1264c02428
msgid "The following code example demonstrates that everything except email addresses can be non-ASCII::"
msgstr ""

#: ../../ref/unicode.txt:330
# 37050296a0c8464c9964eccd00ce91e9
msgid "Form submission"
msgstr ""

#: ../../ref/unicode.txt:332
# dd0c05798b374913ace05740f5ce8248
msgid "HTML form submission is a tricky area. There's no guarantee that the submission will include encoding information, which means the framework might have to guess at the encoding of submitted data."
msgstr ""

#: ../../ref/unicode.txt:336
# 1243d4d5e0114acd84bc6fbcafb47103
msgid "Django adopts a \"lazy\" approach to decoding form data. The data in an ``HttpRequest`` object is only decoded when you access it. In fact, most of the data is not decoded at all. Only the ``HttpRequest.GET`` and ``HttpRequest.POST`` data structures have any decoding applied to them. Those two fields will return their members as Unicode data. All other attributes and methods of ``HttpRequest`` return data exactly as it was submitted by the client."
msgstr ""

#: ../../ref/unicode.txt:344
# 6025001a99a54164b58728c7b15ff62e
msgid "By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed encoding for form data. If you need to change this for a particular form, you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For example::"
msgstr ""

#: ../../ref/unicode.txt:353
# 7219269e9623465a9dba31c532ce9c6c
msgid "You can even change the encoding after having accessed ``request.GET`` or ``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""

#: ../../ref/unicode.txt:356
# fa5d9b682bb64e6ebca4a16512786bf2
msgid "Most developers won't need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control."
msgstr ""

#: ../../ref/unicode.txt:360
# 1058d07ccd034174b046136479a3e1c5
msgid "Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes."
msgstr ""

#: ../../ref/utils.txt:3
# 27ecd9b0c6b24c759e9526713ca03291
msgid "Django Utils"
msgstr ""

#: ../../ref/utils.txt:8
# fc07a41fcda54789a7355fe85178cb46
msgid "This document covers all stable modules in ``django.utils``. Most of the modules in ``django.utils`` are designed for internal use and only the following parts can be considered stable and thus backwards compatible as per the :ref:`internal release deprecation policy <internal-release-deprecation-policy>`."
msgstr ""

#: ../../ref/utils.txt:14
# 9222c90193644480ba408852a90624c4
msgid "``django.utils.cache``"
msgstr ""

#: ../../ref/utils.txt:19
# 200909364ed544a3bdb5fba4175005cb
msgid "This module contains helper functions for controlling caching. It does so by managing the ``Vary`` header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves."
msgstr ""

#: ../../ref/utils.txt:24
# badc9b5c268a46b2b3904d8a6d325742
msgid "For information on the ``Vary`` header, see :rfc:`2616#section-14.44` section 14.44."
msgstr ""

#: ../../ref/utils.txt:27
# 11d87e8504bd4d558ff2bc1a123f375a
msgid "Essentially, the ``Vary`` HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in ``Vary`` need to get different cache keys to prevent delivery of wrong content."
msgstr ""

#: ../../ref/utils.txt:32
# 4ff6c7ee7b9349d7b60ac1e60a66ef8b
msgid "For example, :doc:`internationalization </topics/i18n/index>` middleware would need to distinguish caches by the ``Accept-language`` header."
msgstr ""

#: ../../ref/utils.txt:37
# 1ae651c57c1646df94eea27c9cc6aaf8
msgid "This function patches the ``Cache-Control`` header by adding all keyword arguments to it. The transformation is as follows:"
msgstr ""

#: ../../ref/utils.txt:40
# 3a4cf9e3b57c4a04a7c5011628e1a4d6
msgid "All keyword parameter names are turned to lowercase, and underscores are converted to hyphens."
msgstr ""

#: ../../ref/utils.txt:42
# 04392263e9e548049292031f57044556
msgid "If the value of a parameter is ``True`` (exactly ``True``, not just a true value), only the parameter name is added to the header."
msgstr ""

#: ../../ref/utils.txt:44
# a8e71651af9642389348e16c7494f5e9
msgid "All other parameters are added with their value, after applying ``str()`` to it."
msgstr ""

#: ../../ref/utils.txt:49
# e223c4279e3b4dafbd3b462cf582d7b0
msgid "Returns the max-age from the response Cache-Control header as an integer (or ``None`` if it wasn't found or wasn't an integer)."
msgstr ""

#: ../../ref/utils.txt:54
# 4bf35c852a554d599be90ecb7cdb0393
msgid "Adds some useful headers to the given ``HttpResponse`` object:"
msgstr ""

#: ../../ref/utils.txt:56
# 5756284633474a75b1627586dd02b123
msgid "``ETag``"
msgstr ""

#: ../../ref/utils.txt:57
# 63b1f9627d7d4c239fda63dd028b8643
msgid "``Last-Modified``"
msgstr ""

#: ../../ref/utils.txt:58
# f4a6e5729a5c434cb1c44ce62c1509e2
msgid "``Expires``"
msgstr ""

#: ../../ref/utils.txt:59
# 21007c660b434043af4b41793319f483
msgid "``Cache-Control``"
msgstr ""

#: ../../ref/utils.txt:61
# 67aacfef85d741b38acb79381e67d8ac
msgid "Each header is only added if it isn't already set."
msgstr ""

#: ../../ref/utils.txt:63
# 5f2561fc77ff4ce784f3f1987d9fb9de
msgid "``cache_timeout`` is in seconds. The :setting:`CACHE_MIDDLEWARE_SECONDS` setting is used by default."
msgstr ""

#: ../../ref/utils.txt:68
# 64666cb598c145c0a40450a5acd86bea
msgid "Adds headers to a response to indicate that a page should never be cached."
msgstr ""

#: ../../ref/utils.txt:72
# a954c203753d44fa8d2ff8dd55a127dd
msgid "Adds (or updates) the ``Vary`` header in the given ``HttpResponse`` object. ``newheaders`` is a list of header names that should be in ``Vary``. Existing headers in ``Vary`` aren't removed."
msgstr ""

#: ../../ref/utils.txt:78
# 5ea9b77b79d740ed90aacb6d83467047
msgid "Returns a cache key based on the request path. It can be used in the request phase because it pulls the list of headers to take into account from the global path registry and uses those to build a cache key to check against."
msgstr ""

#: ../../ref/utils.txt:83
# e61f09a38f65421199179fc52fd5fc9f
msgid "If there is no headerlist stored, the page needs to be rebuilt, so this function returns ``None``."
msgstr ""

#: ../../ref/utils.txt:88
# cccaa3e23ff04d90ade9b1540d94f236
msgid "Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the ``Vary`` header of the response, but we want to prevent response generation."
msgstr ""

#: ../../ref/utils.txt:95
# dbc9c2ae30454cb5b82d46e66d582840
msgid "The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this just means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key."
msgstr ""

#: ../../ref/utils.txt:101
# f8234762a46e4d228932e8cbe210b5e6
msgid "``django.utils.datastructures``"
msgstr ""

#: ../../ref/utils.txt:108
# d0ca0dbdcea548e393bbedc4d2779ad4
msgid "The :class:`django.utils.datastructures.SortedDict` class is a dictionary that keeps its keys in the order in which they're inserted. ``SortedDict`` adds two additional methods to the standard Python ``dict`` class:"
msgstr ""

#: ../../ref/utils.txt:115
# eeef5382cf5c465b9ce394307f8c053b
msgid "Inserts the key, value pair before the item with the given index."
msgstr ""

#: ../../ref/utils.txt:119
# a60dc2e1151547679fd89a1995549283
msgid "Returns the value of the item at the given zero-based index."
msgstr ""

#: ../../ref/utils.txt:122
# 4ea14deac9894e2998d2e456bc274b1d
msgid "Creating a new SortedDict"
msgstr ""

#: ../../ref/utils.txt:124
# da74c7ed6d8346c38a6bde1e485172de
msgid "Creating a new ``SortedDict`` must be done in a way where ordering is guaranteed. For example::"
msgstr ""

#: ../../ref/utils.txt:129
# 1dc8cdd16f8b4375b66e802318c0d3da
msgid "will not work. Passing in a basic Python ``dict`` could produce unreliable results. Instead do::"
msgstr ""

#: ../../ref/utils.txt:135
# a11b21b4cefb4391b6f8b76c4e8b7a51
msgid "``django.utils.dateparse``"
msgstr ""

#: ../../ref/utils.txt:142
# 02f831d9d28848e1bf278952320b06c2
msgid "The functions defined in this module share the following properties:"
msgstr ""

#: ../../ref/utils.txt:144
# c9ff1c23f61b4cf7b1992900009499cb
msgid "They raise :exc:`ValueError` if their input is well formatted but isn't a valid date or time."
msgstr ""

#: ../../ref/utils.txt:146
# 855293378e3b45958e324df4feb7318b
msgid "They return ``None`` if it isn't well formatted at all."
msgstr ""

#: ../../ref/utils.txt:147
# 8f57253d81c346129a9aed2cdd762c7f
msgid "They accept up to picosecond resolution in input, but they truncate it to microseconds, since that's what Python supports."
msgstr ""

#: ../../ref/utils.txt:152
# e7d225927c8845c7a7f51c4006955b86
msgid "Parses a string and returns a :class:`datetime.date`."
msgstr ""

#: ../../ref/utils.txt:156
# c5b850ef1434404e8b5494dbbc43614f
msgid "Parses a string and returns a :class:`datetime.time`."
msgstr ""

#: ../../ref/utils.txt:158
# 1d87983d2c20483fb3d41914de802dcd
msgid "UTC offsets aren't supported; if ``value`` describes one, the result is ``None``."
msgstr ""

#: ../../ref/utils.txt:163
# 67ba733db9814df49e3f468f5b757ee5
msgid "Parses a string and returns a :class:`datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:165
# a11e8b362d2443ecbbf19613957e1bd2
msgid "UTC offsets are supported; if ``value`` describes one, the result's ``tzinfo`` attribute is a :class:`~django.utils.tzinfo.FixedOffset` instance."
msgstr ""

#: ../../ref/utils.txt:170
# 4221938b79664ded9bb468a71dd84def
msgid "``django.utils.encoding``"
msgstr ""

#: ../../ref/utils.txt:177
# 2fcceae421ed4dad987925ce5c9ff024
msgid "A class whose ``__str__`` returns its ``__unicode__`` as a UTF-8 bytestring. Useful as a mix-in."
msgstr ""

#: ../../ref/utils.txt:182
# cf54cfcb74cf4f1ea966b96f1479618d
msgid "Returns a ``unicode`` object representing ``s``. Treats bytestrings using the 'encoding' codec."
msgstr ""

#: ../../ref/utils.txt:185
#: ../../ref/utils.txt:200
#: ../../ref/utils.txt:208
# eaf902aa9dd6480d85f55638f1f462d0
# 0f8720a52d90410fb2c282185dd1b60b
# 66bb79d5a8944d34b7841c251d75f217
msgid "If ``strings_only`` is ``True``, don't convert (some) non-string-like objects."
msgstr ""

#: ../../ref/utils.txt:190
# 157d31b919f44d6b954072c218c591d4
msgid "Determine if the object instance is of a protected type."
msgstr ""

#: ../../ref/utils.txt:192
# 649dec218c90428f881ec46e66ad514c
msgid "Objects of protected types are preserved as-is when passed to ``force_unicode(strings_only=True)``."
msgstr ""

#: ../../ref/utils.txt:197
# e9f1d8ab99b24629a7decbee37cf01aa
msgid "Similar to ``smart_unicode``, except that lazy instances are resolved to strings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:205
# 06f01f58506843909330e18e93625174
msgid "Returns a bytestring version of ``s``, encoded as specified in ``encoding``."
msgstr ""

#: ../../ref/utils.txt:213
# f48986a610dd47338b541c78a535742e
msgid "Convert an Internationalized Resource Identifier (IRI) portion to a URI portion that is suitable for inclusion in a URL."
msgstr ""

#: ../../ref/utils.txt:216
# ea9b13d78c6c4cd197832283c1989500
msgid "This is the algorithm from section 3.1 of :rfc:`3987#section-3.1`. However, since we are assuming input is either UTF-8 or unicode already, we can simplify things a little from the full method."
msgstr ""

#: ../../ref/utils.txt:220
# dbebb4a7845b4b44921597f9ef2d159d
msgid "Returns an ASCII string containing the encoded result."
msgstr ""

#: ../../ref/utils.txt:223
# ad4e00ffc17a4935bde3c3e58992e2c4
msgid "``django.utils.feedgenerator``"
msgstr ""

#: ../../ref/utils.txt:246
# 36b9a0b055624952bf9d91d93903fe85
msgid "For simplifying the selection of a generator use ``feedgenerator.DefaultFeed`` which is currently ``Rss201rev2Feed``"
msgstr ""

#: ../../ref/utils.txt:249
# 0f2e678ace97486bbea77b7afdf0a408
msgid "For definitions of the different versions of RSS, see: http://diveintomark.org/archives/2004/02/04/incompatible-rss"
msgstr ""

#: ../../ref/utils.txt:254
# fa90c4b9874c44c08e4473356729e4a4
msgid "Creates a TagURI."
msgstr ""

#: ../../ref/utils.txt:256
# f37b5fd2fdef45af8589e0ee978fdd49
msgid "See http://diveintomark.org/archives/2004/05/28/howto-atom-id"
msgstr ""

#: ../../ref/utils.txt:259
# 35efc72fccb44c5e91925f4b63744739
msgid "SyndicationFeed"
msgstr ""

#: ../../ref/utils.txt:263
# 856fddb6d2ce4331a0f3b89c43bcf250
msgid "Base class for all syndication feeds. Subclasses should provide write()."
msgstr ""

#: ../../ref/utils.txt:267
# 264722ca9f464e5dbc4538d279a82253
msgid "Initialize the feed with the given dictionary of metadata, which applies to the entire feed."
msgstr ""

#: ../../ref/utils.txt:270
# 770b8c5cba754b4f808275ba40a3ee75
msgid "Any extra keyword arguments you pass to ``__init__`` will be stored in ``self.feed``."
msgstr ""

#: ../../ref/utils.txt:278
# a7c5cab2db3043a599615cb7d26cbdfe
msgid "Adds an item to the feed. All args are expected to be Python ``unicode`` objects except ``pubdate``, which is a ``datetime.datetime`` object, and ``enclosure``, which is an instance of the ``Enclosure`` class."
msgstr ""

#: ../../ref/utils.txt:286
# e3a11e0dac0a46fcbebccf72f3d7537d
msgid "Return extra attributes to place on the root (i.e. feed/channel) element. Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:291
# d0b0f4576bc14c2cb87ebe57124aa50a
msgid "Add elements in the root (i.e. feed/channel) element. Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:296
# 23a4b0eaf60f4940af436f7034f3de4a
msgid "Return extra attributes to place on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:301
# 2e75bc56c638410fb7f7802f790979a7
msgid "Add elements on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:305
# b984dc723121410e8cce75eebad84844
msgid "Outputs the feed in the given encoding to ``outfile``, which is a file-like object. Subclasses should override this."
msgstr ""

#: ../../ref/utils.txt:310
# 232b2f6b26c145aa9d553a049b69cb1b
msgid "Returns the feed in the given encoding as a string."
msgstr ""

#: ../../ref/utils.txt:314
# 834d6a781ed54db591b02dbae19c125a
msgid "Returns the latest item's ``pubdate``. If none of them have a ``pubdate``, this returns the current date/time."
msgstr ""

#: ../../ref/utils.txt:318
# d90bbc990bc946a990180f95cf69fc49
msgid "Enclosure"
msgstr ""

#: ../../ref/utils.txt:322
# f67678cd0f5847e9b83b8fcf4b87dde6
msgid "Represents an RSS enclosure"
msgstr ""

#: ../../ref/utils.txt:325
# 71ea84ca7bd54fdeb328f1498eb15f40
msgid "RssFeed"
msgstr ""

#: ../../ref/utils.txt:330
# ad544b1203e04d398abaa2ac9b6780e8
msgid "Rss201rev2Feed"
msgstr ""

#: ../../ref/utils.txt:334
# bae62e28fc374871b697acddf42ee57f
msgid "Spec: http://blogs.law.harvard.edu/tech/rss"
msgstr ""

#: ../../ref/utils.txt:337
# ddeb9f9e04e8491f98c2b4810f59c3c2
msgid "RssUserland091Feed"
msgstr ""

#: ../../ref/utils.txt:341
# 9bc9688b69d0453b91c685c4084ad8f3
msgid "Spec: http://backend.userland.com/rss091"
msgstr ""

#: ../../ref/utils.txt:344
# d802f0270c3d4f29bc13b4e5b4f8a9f9
msgid "Atom1Feed"
msgstr ""

#: ../../ref/utils.txt:348
# 356b247ce8a84a6f838978ff71c684f6
msgid "Spec: http://www.atomenabled.org/developers/syndication/atom-format-spec.php"
msgstr ""

#: ../../ref/utils.txt:351
# 155c89c0bfca4f13bc4b672fbd2f7b79
msgid "``django.utils.functional``"
msgstr ""

#: ../../ref/utils.txt:358
# d32d7fb5983b41d896f047ac2475a6e3
msgid "Django offers many utility functions (particularly in ``django.utils``) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code."
msgstr ""

#: ../../ref/utils.txt:362
# 0b3cd85e8e504b8981c54bbd276d2525
msgid "If you write your own similar functions and deal with translations, you'll face the problem of what to do when the first argument is a lazy translation object. You don't want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread's locale setting will not be correct)."
msgstr ""

#: ../../ref/utils.txt:368
# 6266d4f1e0514f6698f02f35427f8274
msgid "For cases like this, use the ``django.utils.functional.allow_lazy()`` decorator. It modifies the function so that *if* it's called with a lazy translation as the first argument, the function evaluation is delayed until it needs to be converted to a string."
msgstr ""

#: ../../ref/utils.txt:382
# 84605065266b49078aae6039fc59c45c
msgid "The ``allow_lazy()`` decorator takes, in addition to the function to decorate, a number of extra arguments (``*args``) specifying the type(s) that the original function can return. Usually, it's enough to include ``unicode`` here and ensure that your function returns only Unicode strings."
msgstr ""

#: ../../ref/utils.txt:387
# a9002379fddb44a4be028f40059bcc8d
msgid "Using this decorator means you can write your function and assume that the input is a proper string, then add support for lazy translation objects at the end."
msgstr ""

#: ../../ref/utils.txt:393
# 07600783e82848948b3056fcad367e36
msgid "``django.utils.http``"
msgstr ""

#: ../../ref/utils.txt:400
# 43dd04a884dd4fcab48b79b1b5df65d4
msgid "A version of Python's ``urllib.quote()`` function that can operate on unicode strings. The url is first UTF-8 encoded before quoting. The returned string can safely be used as part of an argument to a subsequent ``iri_to_uri()`` call without double-quoting occurring. Employs lazy execution."
msgstr ""

#: ../../ref/utils.txt:408
# e267893fb7674ea1b623063de6905c1c
msgid "A version of Python's urllib.quote_plus() function that can operate on unicode strings. The url is first UTF-8 encoded before quoting. The returned string can safely be used as part of an argument to a subsequent ``iri_to_uri()`` call without double-quoting occurring. Employs lazy execution."
msgstr ""

#: ../../ref/utils.txt:416
# f3d20e336a1e4e8e94c9ff4906224b9a
msgid "A version of Python's urllib.urlencode() function that can operate on unicode strings. The parameters are first case to UTF-8 encoded strings and then encoded as per normal."
msgstr ""

#: ../../ref/utils.txt:422
# 2a4bf553dfcf410f8af69930a2825abb
msgid "Formats the time to ensure compatibility with Netscape's cookie standard."
msgstr ""

#: ../../ref/utils.txt:424
#: ../../ref/utils.txt:435
# 7a673f214ee342b2b3b9f53c75e0e08d
# 7d414a4337bc49d691efe81ec99def84
msgid "Accepts a floating point number expressed in seconds since the epoch in UTC--such as that outputted by ``time.time()``. If set to ``None``, defaults to the current time."
msgstr ""

#: ../../ref/utils.txt:428
# 029ccca582e1424eaa848aaa85cc3ddb
msgid "Outputs a string in the format ``Wdy, DD-Mon-YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:432
# 20c17f62304448b4874f26cfe7e464c6
msgid "Formats the time to match the :rfc:`1123` date format as specified by HTTP :rfc:`2616#section-3.3.1` section 3.3.1."
msgstr ""

#: ../../ref/utils.txt:439
# a28a71c97ccb451682f2cb280f43c89d
msgid "Outputs a string in the format ``Wdy, DD Mon YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:443
# 29dc3a1fbf124862b97ae07b16c40f03
msgid "Converts a base 36 string to an integer."
msgstr ""

#: ../../ref/utils.txt:447
# 53df7aab6b6c4745960391848f0140ce
msgid "Converts a positive integer less than sys.maxint to a base 36 string."
msgstr ""

#: ../../ref/utils.txt:450
# 295baf4820aa48da9f5197f9d534e4ae
msgid "``django.utils.safestring``"
msgstr ""

#: ../../ref/utils.txt:455
# 59d923feab7949a3b62dd8d42458f4ce
msgid "Functions and classes for working with \"safe strings\": strings that can be displayed safely without further escaping in HTML. Marking something as a \"safe string\" means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. '<') into the appropriate entities."
msgstr ""

#: ../../ref/utils.txt:463
# 90e9b0774d164009aac20880d878bf69
msgid "A string subclass that has been specifically marked as \"safe\" (requires no further escaping) for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:468
# 4c408c916c8d4ac68e3b75b56ec76b29
msgid "A unicode subclass that has been specifically marked as \"safe\" for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:473
# 742826f4e5e8449ca4236dca8acfa2f5
msgid "Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string or unicode object is appropriate."
msgstr ""

#: ../../ref/utils.txt:476
# 2afe9a6e0e5e4aae9030598eaec6ecd6
msgid "Can be called multiple times on a single string."
msgstr ""

#: ../../ref/utils.txt:480
# 5633c8b0d7554595a53b6ba08114ad81
msgid "Explicitly mark a string as requiring HTML escaping upon output. Has no effect on ``SafeData`` subclasses."
msgstr ""

#: ../../ref/utils.txt:483
# d003188f1ae64b57945f0fbc52b49a7d
msgid "Can be called multiple times on a single string (the resulting escaping is only applied once)."
msgstr ""

#: ../../ref/utils.txt:487
# b4fcc2f3ee39445bb183694484fe4103
msgid "``django.utils.translation``"
msgstr ""

#: ../../ref/utils.txt:492
# 5234176939cd4c9d9f2567817d0f9247
msgid "For a complete discussion on the usage of the following see the :doc:`translation documentation </topics/i18n/translation>`."
msgstr ""

#: ../../ref/utils.txt:497
# 2668af4a95674ccfa07f143c4d04776a
msgid "Translates ``message`` and returns it in a UTF-8 bytestring"
msgstr ""

#: ../../ref/utils.txt:501
# 80ecd4ef25d14d2b8a1f2ecbf18798e4
msgid "Translates ``message`` and returns it in a unicode string"
msgstr ""

#: ../../ref/utils.txt:505
# a43afe2befb0402a95e6088d9fe60e53
msgid "Translates ``message`` given the ``context`` and returns it in a unicode string."
msgstr ""

#: ../../ref/utils.txt:508
# 02a294f2205c4eca8e03cfbfe83a0d69
msgid "For more information, see :ref:`contextual-markers`."
msgstr ""

#: ../../ref/utils.txt:514
#: ../../ref/utils.txt:545
# 639515e91af546b89e50fe55797f7188
# f6c02c9c6ab54ef8bfc6afe78557b8ee
msgid "Same as the non-lazy versions above, but using lazy execution."
msgstr ""

#: ../../ref/utils.txt:516
#: ../../ref/utils.txt:547
# 1b3d000ca8274a1380af1319bc7b1977
# b41540d2f77c4309b5cfcd2ee164fc48
msgid "See :ref:`lazy translations documentation <lazy-translations>`."
msgstr ""

#: ../../ref/utils.txt:521
# 6485e2635c574af483120483c4307d0b
msgid "Marks strings for translation but doesn't translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later."
msgstr ""

#: ../../ref/utils.txt:528
# ebd83f41c591478dbd3230078c8dd8b2
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` in a UTF-8 bytestring."
msgstr ""

#: ../../ref/utils.txt:533
# e25bd30232e24434a4f8ddf85aa115fd
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:538
# fe64887cacbe48acb5a22533808ced3e
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` and the ``context`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:551
# e1f2421611974f6885470396ff737be0
msgid "Lazy variant of string concatenation, needed for translations that are constructed from multiple parts."
msgstr ""

#: ../../ref/utils.txt:556
# b70068df50f3471cb05e977f8af6b3ba
msgid "Fetches the translation object for a given language and installs it as the current translation object for the current thread."
msgstr ""

#: ../../ref/utils.txt:561
# 5d78bf24a773464ba83546e75466b8f5
msgid "De-installs the currently active translation object so that further _ calls will resolve against the default translation object, again."
msgstr ""

#: ../../ref/utils.txt:566
# e72529b7caa14429a13d7050ecc1f844
msgid "Makes the active translation object a NullTranslations() instance. This is useful when we want delayed translations to appear as the original string for some reason."
msgstr ""

#: ../../ref/utils.txt:574
# 7836a84f66ed4bbc9aa6e5257073b6b1
msgid "A Python context manager that uses :func:`django.utils.translation.activate` to fetch the translation object for a given language, installing it as the translation object for the current thread and reinstall the previous active language on exit. Optionally it can simply deinstall the temporary translation on exit with :func:`django.utils.translation.deactivate` if the deactivate argument is True. If you pass None as the language argument, a NullTranslations() instance is installed while the context is active."
msgstr ""

#: ../../ref/utils.txt:585
# 765decf3b31244b3aa4328d6a3e1dd05
msgid "Returns the currently selected language code."
msgstr ""

#: ../../ref/utils.txt:589
# 9f4146f4da1540e187ff84db88f5d2a4
msgid "Returns selected language's BiDi layout:"
msgstr ""

#: ../../ref/utils.txt:591
# 771173e21d944c968cc0feeb268c6fb5
msgid "``False`` = left-to-right layout"
msgstr ""

#: ../../ref/utils.txt:592
# aa6b691ce7bb414fb776b1ab9dc549c8
msgid "``True`` = right-to-left layout"
msgstr ""

#: ../../ref/utils.txt:598
# e0fec6a2434f4574ad639025a94ff9f8
msgid "Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language."
msgstr ""

#: ../../ref/utils.txt:603
# 474eff58627c41e9a41da6ee7a40195d
msgid "If ``check_path`` is ``True``, the function first checks the requested URL for whether its path begins with a language code listed in the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/utils.txt:609
# 6bbbf5c9e64a44c6832e3397cfcb55b7
msgid "Turns a language name (en-us) into a locale name (en_US)."
msgstr ""

#: ../../ref/utils.txt:613
# c2a86e3a0cc344b1a2df5dbc30268836
msgid "Turns a Django template into something that is understood by xgettext. It does so by translating the Django translation tags into standard gettext function invocations."
msgstr ""

#: ../../ref/utils.txt:620
# f0238d64c2a24c289f94a825f551bb7e
msgid "``django.utils.timezone``"
msgstr ""

#: ../../ref/utils.txt:629
# f6020082ef624a15a0241edcd768058e
msgid ":class:`~datetime.tzinfo` instance that represents UTC."
msgstr ""

#: ../../ref/utils.txt:633
# 6cd32c96cb7f4f8797093e4ee1535688
msgid "Returns a :class:`~datetime.tzinfo` instance that represents the :ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:638
# 133e211807f24b5eb22e93913663a3c9
msgid "Returns the name of the :ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:643
# 3309c3dc20a84ce69079b2709ffa99f1
msgid "Returns a :class:`~datetime.tzinfo` instance that represents the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:648
# 0862eae0c56949de8632b73d38d9dc53
msgid "Returns the name of the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:653
# cb70aef3ad554a0daa1b8f12cbfae7a7
msgid "Sets the :ref:`current time zone <default-current-time-zone>`. The ``timezone`` argument must be an instance of a :class:`~datetime.tzinfo` subclass or, if pytz_ is available, a time zone name."
msgstr ""

#: ../../ref/utils.txt:659
# 3e9484af90bd4db3a5c7020e3f8ff313
msgid "Unsets the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:663
# 987b86cebb624decb4a57ac115856a99
msgid "This is a Python context manager that sets the :ref:`current time zone <default-current-time-zone>` on entry with :func:`activate()`, and restores the previously active time zone on exit. If the ``timezone`` argument is ``None``, the :ref:`current time zone <default-current-time-zone>` is unset on entry with :func:`deactivate()` instead."
msgstr ""

#: ../../ref/utils.txt:671
# a6024bc6fdd94795acf919091db8aaea
msgid "Returns an aware or naive :class:`~datetime.datetime` that represents the current point in time when :setting:`USE_TZ` is ``True`` or ``False`` respectively."
msgstr ""

#: ../../ref/utils.txt:677
# d2ba32b912674968a39319757e781e9d
msgid "Returns ``True`` if ``value`` is aware, ``False`` if it is naive. This function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:682
# 3c394ca5dbe841b7a7a3f9929467d1d8
msgid "Returns ``True`` if ``value`` is naive, ``False`` if it is aware. This function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:687
# 324c1cc2eb1446b6a74c5deb78e9b262
msgid "Returns an aware :class:`~datetime.datetime` that represents the same point in time as ``value`` in ``timezone``, ``value`` being a naive :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:691
# 0bd828aafbac41008b83acbe96bc04fe
msgid "This function can raise an exception if ``value`` doesn't exist or is ambiguous because of DST transitions."
msgstr ""

#: ../../ref/utils.txt:696
# 3807cfa3edae40daa942d321aebe550b
msgid "Returns an naive :class:`~datetime.datetime` that represents in ``timezone``  the same point in time as ``value``, ``value`` being an aware :class:`~datetime.datetime`"
msgstr ""

#: ../../ref/utils.txt:703
# bf1ffe9c76b641f28564563fbc09269e
msgid "``django.utils.tzinfo``"
msgstr ""

#: ../../ref/utils.txt:710
# ced47b0e68234055927e3eac6caae309
msgid "Fixed offset in minutes east from UTC."
msgstr ""

#: ../../ref/utils.txt:714
# d6711837c7574be5aa07ea57f40eb599
msgid "Proxy timezone information from time module."
msgstr ""

#: ../../ref/validators.txt:3
# 621a0b0f45414cabaec7dd3a5f058d22
msgid "Validators"
msgstr ""

#: ../../ref/validators.txt:10
# e8d996194a024d31b5fde8359277b1a6
msgid "Writing validators"
msgstr ""

#: ../../ref/validators.txt:12
# 368a0e1d508944c48ca0551cda0a4a0a
msgid "A validator is a callable that takes a value and raises a :exc:`~django.core.exceptions.ValidationError` if it doesn't meet some criteria. Validators can be useful for re-using validation logic between different types of fields."
msgstr ""

#: ../../ref/validators.txt:17
# 07897a7c91ce42b9ac5d2e1ac49029bd
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""

#: ../../ref/validators.txt:25
# 6e84b8aba76f4f59babcf1002a7c9cf7
msgid "You can add this to a model field via the field's :attr:`~django.db.models.Field.validators` argument::"
msgstr ""

#: ../../ref/validators.txt:33
# a3e6825da1f64cabbb9d5e33f0e73368
msgid "Because values are converted to Python before validators are run, you can even use the same validator with forms::"
msgstr ""

#: ../../ref/validators.txt:42
# 5311ac8722404b758ca16d17c078c6f7
msgid "How validators are run"
msgstr ""

#: ../../ref/validators.txt:44
# a5de822bf741461f9831c97f941ef4ce
msgid "See the :doc:`form validation </ref/forms/validation>` for more information on how validators are run in forms, and :ref:`Validating objects <validating-objects>` for how they're run in models. Note that validators will not be run automatically when you save a model, but if you are using a :class:`~django.forms.ModelForm`, it will run your validators on any fields that are included in your form. See the :doc:`ModelForm documentation </topics/forms/modelforms>` for information on how model validation interacts with forms."
msgstr ""

#: ../../ref/validators.txt:54
# 7e64b596ac1949008209f5687433c019
msgid "Built-in validators"
msgstr ""

#: ../../ref/validators.txt:56
# ed84417e7a5a4a9dbe2ee6402cb17396
msgid "The :mod:`django.core.validators` module contains a collection of callable validators for use with model and form fields. They're used internally but are available for use with your own fields, too. They can be used in addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""

#: ../../ref/validators.txt:62
# 65eee4a47a774c408f0734b215dd58f8
msgid "``RegexValidator``"
msgstr ""

#: ../../ref/validators.txt:72
# 390c1e70735e4df0b8dd27c0d115b213
msgid "The regular expression pattern to search for the provided ``value``, or a pre-compiled regular expression. Raises a :exc:`~django.core.exceptions.ValidationError` with :attr:`message` and :attr:`code` if no match is found. By default, matches any string (including an empty string)."
msgstr ""

#: ../../ref/validators.txt:80
# 18c0e478800c490f9f3aee752895c169
msgid "The error message used by :exc:`~django.core.exceptions.ValidationError` if validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""

#: ../../ref/validators.txt:86
# 0b89759ddce04da0822fe466cdd76e10
msgid "The error code used by :exc:`~django.core.exceptions.ValidationError` if validation fails. Defaults to ``\"invalid\"``."
msgstr ""

#: ../../ref/validators.txt:90
# 01676f44cd014103afbd009c7cc2e6d4
msgid "``URLValidator``"
msgstr ""

#: ../../ref/validators.txt:93
# d440fee510a4431f97780984f31e20de
msgid "A :class:`RegexValidator` that ensures a value looks like a URL and optionally verifies that the URL actually exists (i.e., doesn't return a 404 status code). Raises an error code of ``'invalid'`` if it doesn't look like a URL, and a code of ``'invalid_link'`` if it doesn't exist."
msgstr ""

#: ../../ref/validators.txt:105
# 45db6cda160c4d0eaac110cddcf7570c
msgid "If set to ``True``, this validator checks that the URL actually exists."
msgstr ""

#: ../../ref/validators.txt:109
# 706499295b70410fbfb6e07bac900a46
msgid "If :attr:`verify_exists` is ``True``, Django uses this value as the \"User-agent\" for the request."
msgstr ""

#: ../../ref/validators.txt:113
# ad695763ed6f4bba83f8fd10486f945b
msgid "``validate_email``"
msgstr ""

#: ../../ref/validators.txt:116
# 9baa37e42f7b4daa97d9181712c90893
msgid "A :class:`RegexValidator` instance that ensures a value looks like an email address."
msgstr ""

#: ../../ref/validators.txt:120
# 2fbcc0e8bb904316926aa668420402a2
msgid "``validate_slug``"
msgstr ""

#: ../../ref/validators.txt:123
# e356c7fd69e044ffb56cb844dc8d22c5
msgid "A :class:`RegexValidator` instance that ensures a value consists of only letters, numbers, underscores or hyphens."
msgstr ""

#: ../../ref/validators.txt:127
# cba781a70ad245f8b8572bee9756acfa
msgid "``validate_ipv4_address``"
msgstr ""

#: ../../ref/validators.txt:130
# 425014c8da724beaaff30b1d99b47c33
msgid "A :class:`RegexValidator` instance that ensures a value looks like an IPv4 address."
msgstr ""

#: ../../ref/validators.txt:134
# ea9e1966194246798e9f899a5b9e7d4e
msgid "``validate_ipv6_address``"
msgstr ""

#: ../../ref/validators.txt:139
# 71a941bde291426e92742d8cd98b5201
msgid "Uses :mod:`django.utils.ipv6` to check the validity of an IPv6 address."
msgstr ""

#: ../../ref/validators.txt:142
# 0dece8208a98443ab482275b53f224c7
msgid "``validate_ipv46_address``"
msgstr ""

#: ../../ref/validators.txt:147
# ecf7f0d4a7724e5784b8b655b1df7764
msgid "Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure a value is either a valid IPv4 or IPv6 address."
msgstr ""

#: ../../ref/validators.txt:151
# 92acbe8e2cc84fd69b8d4d7e3d502d71
msgid "``validate_comma_separated_integer_list``"
msgstr ""

#: ../../ref/validators.txt:154
# f35c1fa1a36b4869a174b131934e7a2f
msgid "A :class:`RegexValidator` instance that ensures a value is a comma-separated list of integers."
msgstr ""

#: ../../ref/validators.txt:158
# 4fdaf87caf184fffa4fa04e4ea78e325
msgid "``MaxValueValidator``"
msgstr ""

#: ../../ref/validators.txt:161
# 9e9843bb445542339e49dce424587675
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""

#: ../../ref/validators.txt:165
# b90657150d9c451fbca7c7dfec1300d7
msgid "``MinValueValidator``"
msgstr ""

#: ../../ref/validators.txt:168
# c16485290d1e4d938a5419af35a4176d
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""

#: ../../ref/validators.txt:172
# ea6442b25faa4ad39e6a0cd102579b88
msgid "``MaxLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:175
# a284b0a0f9164d6ca63a6352a82f890d
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""

#: ../../ref/validators.txt:179
# f79f245d510343528492e49ecb27bee5
msgid "``MinLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:182
# ef70d22ec6da4932a20026a5508ce5c4
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""

