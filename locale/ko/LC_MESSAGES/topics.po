# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-29 22:44\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/auth.txt:3
# 9cdd56d40a374228ad840fbfaf23d698
msgid "User authentication in Django"
msgstr ""

#: ../../topics/auth.txt:8
# 60e339fba2444baaad310230c554a518
msgid "Django comes with a user authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This document explains how things work."
msgstr ""

#: ../../topics/auth.txt:13
#: ../../topics/forms/index.txt:26
#: ../../topics/http/urls.txt:20
#: ../../topics/i18n/formatting.txt:10
#: ../../topics/i18n/index.txt:14
#: ../../topics/i18n/timezones.txt:12
#: ../../topics/i18n/translation.txt:8
# 01b4c43dcda54d8fb12436f291d4fce8
# 55a4ddeaff3b4d81b7200d0175675d7b
# 3db8de8235f04e71ae0777f806e9ab28
# 266e234c74f14bae9e44ee82ba61cdc1
# 49c07d9b7cde4ffc96f83c1b8bcc76b2
# 377ab9b857a84e769d47a27eea415779
# dafaebe4ea3f4f2f9913550f1c141fac
msgid "Overview"
msgstr ""

#: ../../topics/auth.txt:15
# 426fbe1912ea44c985079e300f060945
msgid "The auth system consists of:"
msgstr ""

#: ../../topics/auth.txt:17
#: ../../topics/auth.txt:50
#: ../../topics/auth.txt:1635
# b0605cf9c77f497a92d6d06533080022
# d72640b18b1b4afd81f1a5bf298bd6c2
# 64da306c938047d98787ee68d7884f33
msgid "Users"
msgstr ""

#: ../../topics/auth.txt:18
# 9ca5eb0be6964d3a846b6fcd12b88c4e
msgid "Permissions: Binary (yes/no) flags designating whether a user may perform a certain task."
msgstr ""

#: ../../topics/auth.txt:20
# 646b5d6405dc4c90ac962c04ebd098db
msgid "Groups: A generic way of applying labels and permissions to more than one user."
msgstr ""

#: ../../topics/auth.txt:24
# 4d250ff0cd00459d8e09e1565d4371eb
msgid "Installation"
msgstr ""

#: ../../topics/auth.txt:26
# 36cd4af1d8af4a34b4c275a1bb1f1df4
msgid "Authentication support is bundled as a Django application in ``django.contrib.auth``. To install it, do the following:"
msgstr ""

#: ../../topics/auth.txt:29
# df5c45bb375d4d189baad0edf7f7a1b2
msgid "Put ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in your :setting:`INSTALLED_APPS` setting. (The :class:`~django.contrib.auth.models.Permission` model in :mod:`django.contrib.auth` depends on :mod:`django.contrib.contenttypes`.)"
msgstr ""

#: ../../topics/auth.txt:33
# 4bc043129d4b49fab499a747b5f72156
msgid "Run the command ``manage.py syncdb``."
msgstr ""

#: ../../topics/auth.txt:35
# 3d7e0203ba864fc38ef8722f85c3a4f7
msgid "Note that the default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in :setting:`INSTALLED_APPS` for convenience.  If your :setting:`INSTALLED_APPS` already contains these apps, feel free to run :djadmin:`manage.py syncdb <syncdb>` again; you can run that command as many times as you'd like, and each time it'll only install what's needed."
msgstr ""

#: ../../topics/auth.txt:43
# 19a6133f8034401aa20123bd92d85581
msgid "The :djadmin:`syncdb` command creates the necessary database tables, creates permission objects for all installed apps that need 'em, and prompts you to create a superuser account the first time you run it."
msgstr ""

#: ../../topics/auth.txt:47
# d3a90e54b0c64ac6afee4364b09f4675
msgid "Once you've taken those steps, that's it."
msgstr ""

#: ../../topics/auth.txt:55
#: ../../topics/auth.txt:1566
#: ../../topics/auth.txt:1712
# 04c7075a530348e79d1be726ed8a2789
# a87a5c2cb02b4abab31dcd83e2146cfb
# d999aa98b9a94cc99ac197f70b7c6428
msgid "API reference"
msgstr ""

#: ../../topics/auth.txt:58
#: ../../topics/auth.txt:1573
#: ../../topics/auth.txt:1717
#: ../../topics/db/models.txt:83
# c9b7c95dd4c649cfaf6e577603aaf537
# 27563f700c88434988f70ad9588e5688
# d289b3e0ffdf46568d7bf45eed9571c0
# 2c8b3f2bc18e49f3929121cdc3c9c03c
msgid "Fields"
msgstr ""

#: ../../topics/auth.txt:62
# 1df37341c4f94beb81dc7828ed87bd0a
msgid ":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

#: ../../topics/auth.txt:67
# de0787f43b954372adb82845f782b632
msgid "Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores)."
msgstr ""

#: ../../topics/auth.txt:75
#: ../../topics/auth.txt:79
# 6694325d18b14792963f843175c5b391
# 4d86460b27a349adbd045381717a0197
msgid "Optional. 30 characters or fewer."
msgstr ""

#: ../../topics/auth.txt:83
# 7bb821786c324c46a656654a9d198b73
msgid "Optional. Email address."
msgstr ""

#: ../../topics/auth.txt:87
# 3366f7c0214040d1b172cb7725ec360a
msgid "Required. A hash of, and metadata about, the password. (Django doesn't store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the \"Passwords\" section below."
msgstr ""

#: ../../topics/auth.txt:93
# 5c42fdad6bf04352a801ba7773452cf4
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

#: ../../topics/auth.txt:97
# e91876b1c5b541acafeb58987e68e239
msgid "Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to ``False`` instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won't break."
msgstr ""

#: ../../topics/auth.txt:102
# 05f5900f05b4499ea9bcc4c629016e6c
msgid "This doesn't necessarily control whether or not the user can log in. Authentication backends aren't required to check for the ``is_active`` flag, so if you want to reject a login based on ``is_active`` being ``False``, it's up to you to check that in your own login view. However, the :class:`~django.contrib.auth.forms.AuthenticationForm` used by the :func:`~django.contrib.auth.views.login` view *does* perform this check, as do the permission-checking methods such as :meth:`~models.User.has_perm` and the authentication in the Django admin. All of those functions/methods will return ``False`` for inactive users."
msgstr ""

#: ../../topics/auth.txt:115
# 1b27b796466a4e32839e03eaca4f7269
msgid "Boolean. Designates that this user has all permissions without explicitly assigning them."
msgstr ""

#: ../../topics/auth.txt:120
# 6f3c2d49cab449f797a9c731095427ea
msgid "A datetime of the user's last login. Is set to the current date/time by default."
msgstr ""

#: ../../topics/auth.txt:125
# 78139d02efa74195bbc0aa7d36eb2f2e
msgid "A datetime designating when the account was created. Is set to the current date/time by default when the account is created."
msgstr ""

#: ../../topics/auth.txt:129
#: ../../topics/auth.txt:1592
#: ../../topics/pagination.txt:169
#: ../../topics/pagination.txt:240
#: ../../topics/testing.txt:2078
# 4b4cf2835f8e4b3ea8783fa37e7ef8a8
# 2907683b5c74462c88ea0ac566557f02
# ceaf47a9d2624c06836612df108c4f3a
# 38e2fe42490f4e5cbdaaa0acb09a13a7
# c71a862b6bd441eea80f31bbc76c76df
msgid "Methods"
msgstr ""

#: ../../topics/auth.txt:133
# 71f0cca2c63b4c6ebfd8c0a1cac2ccd7
msgid ":class:`~django.contrib.auth.models.User` objects have two many-to-many fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth.models.User` objects can access their related objects in the same way as any other :doc:`Django model </topics/db/models>`:"
msgstr ""

#: ../../topics/auth.txt:150
# 747d3afdf2df41de984da9693d2bd9b2
msgid "In addition to those automatic API methods, :class:`~django.contrib.auth.models.User` objects have the following custom methods:"
msgstr ""

#: ../../topics/auth.txt:156
# f4e10fd56129407488d65fe54be52709
msgid "Always returns ``False``. This is a way of differentiating :class:`~django.contrib.auth.models.User` and :class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should prefer using :meth:`~django.contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

#: ../../topics/auth.txt:165
# 21264d0f3eba49909143064827774085
msgid "Always returns ``True``. This is a way to tell if the user has been authenticated. This does not imply any permissions, and doesn't check if the user is active - it only indicates that the user has provided a valid username and password."
msgstr ""

#: ../../topics/auth.txt:172
# 42cd6154c9fd4aa7af6ce58f6fc56c02
msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

#: ../../topics/auth.txt:178
# 3eedc6b165464e5cb657f409e3747701
msgid "Sets the user's password to the given raw string, taking care of the password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../topics/auth.txt:184
# 5fba07160f624388a4739ffec533f201
msgid "Returns ``True`` if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

#: ../../topics/auth.txt:190
# 4f455221e97048c0b142b18df3a05abf
msgid "Marks the user as having no password set.  This isn't the same as having a blank string for a password. :meth:`~django.contrib.auth.models.User.check_password()` for this user will never return ``True``. Doesn't save the :class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../topics/auth.txt:196
# bb461df58db84d7780cbe57e4c22ac48
msgid "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory."
msgstr ""

#: ../../topics/auth.txt:201
# ba022c6825524495b540930d87d215ca
msgid "Returns ``False`` if :meth:`~django.contrib.auth.models.User.set_unusable_password()` has been called for this user."
msgstr ""

#: ../../topics/auth.txt:207
# 5337e160464e48be8e8cfc272ddef023
msgid "Returns a set of permission strings that the user has, through his/her groups."
msgstr ""

#: ../../topics/auth.txt:212
# f248e95e7c5248d08422dbd25255df68
msgid "If ``obj`` is passed in, only returns the group permissions for this specific object."
msgstr ""

#: ../../topics/auth.txt:217
# e88136eb3f5e42b1939def1aba0359bf
msgid "Returns a set of permission strings that the user has, both through group and user permissions."
msgstr ""

#: ../../topics/auth.txt:222
# fbbb42a38f6549dbb6c7e7df93ed040d
msgid "If ``obj`` is passed in, only returns the permissions for this specific object."
msgstr ""

#: ../../topics/auth.txt:227
# 11f3e63005cf48de8ad76a7b645aa59e
msgid "Returns ``True`` if the user has the specified permission, where perm is in the format ``\"<app label>.<permission codename>\"``. (see `permissions`_ section below). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth.txt:234
# 887befa5728e48d79756107cd7885ca0
msgid "If ``obj`` is passed in, this method won't check for a permission for the model, but for this specific object."
msgstr ""

#: ../../topics/auth.txt:239
# 954ab920de764522a88d06e07d04e731
msgid "Returns ``True`` if the user has each of the specified permissions, where each perm is in the format ``\"<app label>.<permission codename>\"``. If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth.txt:246
# 5753cc5127bf422897baca1d3fada132
msgid "If ``obj`` is passed in, this method won't check for permissions for the model, but for the specific object."
msgstr ""

#: ../../topics/auth.txt:251
# 0d9faff149394f0bb01237aca261036d
msgid "Returns ``True`` if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth.txt:257
# abf8966249c14267b44c0e4c75778437
msgid "Sends an email to the user. If :attr:`~django.contrib.auth.models.User.from_email` is ``None``, Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../topics/auth.txt:263
# b1baf911f5674d3aa63a8aaf7e0138b8
msgid "Returns a site-specific profile for this user. Raises :exc:`django.contrib.auth.models.SiteProfileNotAvailable` if the current site doesn't allow profiles, or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user does not have a profile. For information on how to define a site-specific user profile, see the section on `storing additional user information`_ below."
msgstr ""

#: ../../topics/auth.txt:273
# 49e6afe1a2e147a29dda90641cfef96c
msgid "Manager functions"
msgstr ""

#: ../../topics/auth.txt:277
# be37f6e22db640958af3dd0dc1624ee8
msgid "The :class:`~django.contrib.auth.models.User` model has a custom manager that has the following helper functions:"
msgstr ""

#: ../../topics/auth.txt:287
# fcf93fdd275e49f3aac02022ea287cb1
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/auth.txt:289
# c573347710a64cbeaa90a39ab7cb1b1a
msgid "The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django.contrib.auth.models.User.password` are set as given. The domain portion of :attr:`~django.contrib.auth.models.User.email` is automatically converted to lowercase, and the returned :class:`~django.contrib.auth.models.User` object will have :attr:`~models.User.is_active` set to ``True``."
msgstr ""

#: ../../topics/auth.txt:296
# ade79ffac2754209a4dec5810db3dde7
msgid "If no password is provided, :meth:`~django.contrib.auth.models.User.set_unusable_password()` will be called."
msgstr ""

#: ../../topics/auth.txt:300
# 1b6593a62db04589ab317c04ee5ff46c
msgid "See `Creating users`_ for example usage."
msgstr ""

#: ../../topics/auth.txt:304
# 6409dd0440384ccaac45d8733f7a6960
msgid "Returns a random password with the given length and given string of allowed characters. (Note that the default value of ``allowed_chars`` doesn't contain letters that can cause user confusion, including:"
msgstr ""

#: ../../topics/auth.txt:308
# bfed9430d8bd4d1d809fb8163965173e
msgid "``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, uppercase letter i, and the number one)"
msgstr ""

#: ../../topics/auth.txt:310
# 82b66d454e9a4ab6b0966eaa9767e38f
msgid "``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""

#: ../../topics/auth.txt:314
# db37630f868d417fb13c1972fb69a4f8
msgid "Basic usage"
msgstr ""

#: ../../topics/auth.txt:319
# 3dd3434df2264d8d87c1365e6f666da1
msgid "Creating users"
msgstr ""

#: ../../topics/auth.txt:321
# 3fb6a08dfe2349128748332c38fdb6c3
msgid "The most basic way to create users is to use the :meth:`~django.contrib.auth.models.UserManager.create_user` helper function that comes with Django::"
msgstr ""

#: ../../topics/auth.txt:334
# 19f653fe2cdf4c7facf4952c8539f44a
msgid "You can also create users using the Django admin site. Assuming you've enabled the admin site and hooked it to the URL ``/admin/``, the \"Add user\" page is at ``/admin/auth/user/add/``. You should also see a link to \"Users\" in the \"Auth\" section of the main admin index page. The \"Add user\" admin page is different than standard admin pages in that it requires you to choose a username and password before allowing you to edit the rest of the user's fields."
msgstr ""

#: ../../topics/auth.txt:341
# a7a5164797664c1491b181015d1fc556
msgid "Also note: if you want your own user account to be able to create users using the Django admin site, you'll need to give yourself permission to add users *and* change users (i.e., the \"Add user\" and \"Change user\" permissions). If your account has permission to add users but not to change them, you won't be able to add users. Why? Because if you have permission to add users, you have the power to create superusers, which can then, in turn, change other users. So Django requires add *and* change permissions as a slight security measure."
msgstr ""

#: ../../topics/auth.txt:350
# 65806ec3519949b4a3543428ff9fb8b2
msgid "Changing passwords"
msgstr ""

#: ../../topics/auth.txt:355
# 9556a6d36ec24787a09584fc65d5789d
msgid ":djadmin:`manage.py changepassword *username* <changepassword>` offers a method of changing a User's password from the command line. It prompts you to change the password of a given user which you must enter twice. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current user."
msgstr ""

#: ../../topics/auth.txt:362
# 4f984d1fd3404e5a8a9f63069a3fa43c
msgid "You can also change a password programmatically, using :meth:`~django.contrib.auth.models.User.set_password()`:"
msgstr ""

#: ../../topics/auth.txt:372
# 4efeb47889214176a2ada1f26429d3f8
msgid "Don't set the :attr:`~django.contrib.auth.models.User.password` attribute directly unless you know what you're doing. This is explained in the next section."
msgstr ""

#: ../../topics/auth.txt:379
# c82ebaf52358491dafdecb6b63458acc
msgid "How Django stores passwords"
msgstr ""

#: ../../topics/auth.txt:386
# 75a7d5b004f9454b8fd90d536fd1d336
msgid "The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

#: ../../topics/auth.txt:391
# 4deea52175a54f5e861d00035155201b
msgid "That's a storage algorithm, and hash, separated by the dollar-sign character. The algorithm is one of a number of one way hashing or password storage algorithms Django can use; see below. The hash is the result of the one- way function."
msgstr ""

#: ../../topics/auth.txt:396
# 8210cd27df5e4ff3b7780e764e06ccd7
msgid "By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password stretching mechanism recommended by NIST_. This should be sufficient for most users: it's quite secure, requiring massive amounts of computing time to break."
msgstr ""

#: ../../topics/auth.txt:401
# f7a555118b474587a06928d9b0eb4ad5
msgid "However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn't need to do this -- if you're not sure, you probably don't.  If you do, please read on:"
msgstr ""

#: ../../topics/auth.txt:406
# 88ac319b72424d91a4235a6b0e49ed1e
msgid "Django chooses the an algorithm by consulting the :setting:`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that this Django installation supports. The first entry in this list (that is, ``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all the other entries are valid hashers that can be used to check existing passwords. This means that if you want to use a different algorithm, you'll need to modify :setting:`PASSWORD_HASHERS` to list your prefered algorithm first in the list."
msgstr ""

#: ../../topics/auth.txt:414
# 7a604d52db6b4d869b237ee0ab636f77
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

#: ../../topics/auth.txt:425
# 661608782022478bb2d53319c6ffe89f
msgid "This means that Django will use PBKDF2_ to store all passwords, but will support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The next few sections describe a couple of common ways advanced users may want to modify this setting."
msgstr ""

#: ../../topics/auth.txt:431
# 245040c15abb4e6a925cfca0bbe9905d
msgid "Using bcrypt with Django"
msgstr ""

#: ../../topics/auth.txt:433
# 37ada963192c49ffa57af707f0a23cb9
msgid "Bcrypt_ is a popular password storage algorithm that's specifically designed for long-term password storage. It's not the default used by Django since it requires the use of third-party libraries, but since many people may want to use it Django supports bcrypt with minimal effort."
msgstr ""

#: ../../topics/auth.txt:438
# b2ee2b561fee45fb8ad1de6bca33e287
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

#: ../../topics/auth.txt:440
# 5677cef93d154328ac7abb3d5d1751d3
msgid "Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-bcrypt``, or downloading the library and installing it with ``python setup.py install``)."
msgstr ""

#: ../../topics/auth.txt:444
# e4ce5d13dc774e2a9e9445e2813cafb3
msgid "Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. That is, in your settings file, you'd put::"
msgstr ""

#: ../../topics/auth.txt:456
# 1c2900575add4df98a580b8bcbd54197
msgid "(You need to keep the other entries in this list, or else Django won't be able to upgrade passwords; see below)."
msgstr ""

#: ../../topics/auth.txt:459
# 4d2c10aa713144ad974c4a57a1d3abc2
msgid "That's it -- now your Django install will use Bcrypt as the default storage algorithm."
msgstr ""

#: ../../topics/auth.txt:464
# 454e7b51171d44a3a279623827011274
msgid "There are several other implementations that allow bcrypt to be used with Django. Django's bcrypt support is NOT directly compatible with these. To upgrade, you will need to modify the hashes in your database to be in the form `bcrypt$(raw bcrypt output)`. For example: `bcrypt$$2a$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy`."
msgstr ""

#: ../../topics/auth.txt:472
# d870a39d75794d19a9054dc840816aba
msgid "Increasing the work factor"
msgstr ""

#: ../../topics/auth.txt:474
# f833265f19ac4a47bf80c9a933b794a3
msgid "The PDKDF2 and bcrypt algorithms use a number of iterations or rounds of hashing. This deliberately slows down attackers, making attacks against hashed passwords harder. However, as computing power increases, the number of iterations needs to be increased. We've chosen a reasonable default (and will increase it with each release of Django), but you may wish to tune it up or down, depending on your security needs and available processing power. To do so, you'll subclass the appropriate algorithm and override the ``iterations`` parameters. For example, to increase the number of iterations used by the default PDKDF2 algorithm:"
msgstr ""

#: ../../topics/auth.txt:484
# 9c39e022287245029692c42f4e491f5e
msgid "Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

#: ../../topics/auth.txt:494
# 29ba4546eb7549b3bea17e9487a0c1e1
msgid "Save this somewhere in your project. For example, you might put this in a file like ``myproject/hashers.py``."
msgstr ""

#: ../../topics/auth.txt:497
# 9295417b5a824424a80e1aad9dcda0fb
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

#: ../../topics/auth.txt:510
# a354ec07031f4500b11d2cf32e8dab91
msgid "That's it -- now your Django install will use more iterations when it stores passwords using PBKDF2."
msgstr ""

#: ../../topics/auth.txt:514
# 8662d613bc894e99b01f205976033e55
msgid "Password upgrading"
msgstr ""

#: ../../topics/auth.txt:516
# f32d75d3f0324f149947931cb3d5860d
msgid "When users log in, if their passwords are stored with anything other than the preferred algorithm, Django will automatically upgrade the algorithm to the preferred one. This means that old installs of Django will get automatically more secure as users log in, and it also means that you can switch to new (and better) storage algorithms as they get invented."
msgstr ""

#: ../../topics/auth.txt:522
# df35ee2d21004f818d48c2ef9e7973d1
msgid "However, Django can only upgrade passwords that use algorithms mentioned in :setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make sure never to *remove* entries from this list. If you do, users using un- mentioned algorithms won't be able to upgrade."
msgstr ""

#: ../../topics/auth.txt:534
# ea8acf0916de4914907fda79160404ad
msgid "Anonymous users"
msgstr ""

#: ../../topics/auth.txt:538
# 0c0c45171f804980b4e0e42e75e66e5c
msgid ":class:`django.contrib.auth.models.AnonymousUser` is a class that implements the :class:`django.contrib.auth.models.User` interface, with these differences:"
msgstr ""

#: ../../topics/auth.txt:542
# 4745219c00c947999ee6846734690d8f
msgid ":attr:`~django.contrib.auth.models.User.id` is always ``None``."
msgstr ""

#: ../../topics/auth.txt:543
# dd09fb558659435bacfef97232a627d6
msgid ":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib.auth.models.User.is_superuser` are always ``False``."
msgstr ""

#: ../../topics/auth.txt:546
# e529d408ed1040c39aaf0eca281bc773
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

#: ../../topics/auth.txt:547
# 35233f173ba6448d841f7105769517e6
msgid ":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib.auth.models.User.user_permissions` are always empty."
msgstr ""

#: ../../topics/auth.txt:550
# 12990f0cee034e2c83710bbd9367280b
msgid ":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` instead of ``False``."
msgstr ""

#: ../../topics/auth.txt:552
# a2013231aa8347729d170133834d459c
msgid ":meth:`~django.contrib.auth.models.User.is_authenticated()` returns ``False`` instead of ``True``."
msgstr ""

#: ../../topics/auth.txt:554
# 92230a41220b406a88f0453a862efd87
msgid ":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django.contrib.auth.models.User.check_password()`, :meth:`~django.contrib.auth.models.User.save()`, :meth:`~django.contrib.auth.models.User.delete()`, :meth:`~django.contrib.auth.models.User.set_groups()` and :meth:`~django.contrib.auth.models.User.set_permissions()` raise :exc:`NotImplementedError`."
msgstr ""

#: ../../topics/auth.txt:562
# cfdc1c90973c47c7b6d91bf0fbf2c022
msgid "In practice, you probably won't need to use :class:`~django.contrib.auth.models.AnonymousUser` objects on your own, but they're used by Web requests, as explained in the next section."
msgstr ""

#: ../../topics/auth.txt:569
# 9ac554d8be7f455ab2cbe042fd8fd486
msgid "Creating superusers"
msgstr ""

#: ../../topics/auth.txt:571
# 2dfc7adb95c840c792b909bf88e209ec
msgid ":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the first time you run it after adding ``'django.contrib.auth'`` to your :setting:`INSTALLED_APPS`. If you need to create a superuser at a later date, you can use a command line utility::"
msgstr ""

#: ../../topics/auth.txt:578
# 7ea6f803932c48a4b486dbb1e2ea9665
msgid "You will be prompted for a password. After you enter one, the user will be created immediately. If you leave off the :djadminopt:`--username` or the :djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

#: ../../topics/auth.txt:582
# 8988670e4b1f4d358bab094415c61626
msgid "If you're using an older release of Django, the old way of creating a superuser on the command line still works::"
msgstr ""

#: ../../topics/auth.txt:587
# c22f16db9ef34080acc5a273f55d6642
msgid "...where :file:`/path/to` is the path to the Django codebase on your filesystem. The ``manage.py`` command is preferred because it figures out the correct path and environment for you."
msgstr ""

#: ../../topics/auth.txt:594
# 5ea4b315c7114b0099846d90b0d64179
msgid "Storing additional information about users"
msgstr ""

#: ../../topics/auth.txt:596
# 675500f7d9134f1db313c81f82b8ab45
msgid "If you'd like to store additional information related to your users, Django provides a method to specify a site-specific related model -- termed a \"user profile\" -- for this purpose."
msgstr ""

#: ../../topics/auth.txt:600
# ccd7d06fdd5141c385a803a35bebfd7b
msgid "To make use of this feature, define a model with fields for the additional information you'd like to store, or additional methods you'd like to have available, and also add a :class:`~django.db.models.Field.OneToOneField` named ``user`` from your model to the :class:`~django.contrib.auth.models.User` model. This will ensure only one instance of your model can be created for each :class:`~django.contrib.auth.models.User`. For example::"
msgstr ""

#: ../../topics/auth.txt:619
# 937a4d00e34b40c59a918833179aa5b5
msgid "To indicate that this model is the user profile model for a given site, fill in the setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of the following items, separated by a dot:"
msgstr ""

#: ../../topics/auth.txt:623
# 21192bc5dd2a40e48973c6bd7e98743e
msgid "The name of the application (case sensitive) in which the user profile model is defined (in other words, the name which was passed to :djadmin:`manage.py startapp <startapp>` to create the application)."
msgstr ""

#: ../../topics/auth.txt:628
# 08abbf492e9c4aeab06e490a43f18591
msgid "The name of the model (not case sensitive) class."
msgstr ""

#: ../../topics/auth.txt:630
# 0486b2bd5a6f4dbca3ecd833fc0f1671
msgid "For example, if the profile model was a class named ``UserProfile`` and was defined inside an application named ``accounts``, the appropriate setting would be::"
msgstr ""

#: ../../topics/auth.txt:636
# ea83a97525254ef8bd9a1013511549c4
msgid "When a user profile model has been defined and specified in this manner, each :class:`~django.contrib.auth.models.User` object will have a method -- :class:`~django.contrib.auth.models.User.get_profile()` -- which returns the instance of the user profile model associated with that :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/auth.txt:642
# 74844f026af64a1888e9ed318c134c15
msgid "The method :class:`~django.contrib.auth.models.User.get_profile()` does not create a profile if one does not exist. You need to register a handler for the User model's :attr:`django.db.models.signals.post_save` signal and, in the handler, if ``created`` is ``True``, create the associated user profile::"
msgstr ""

#: ../../topics/auth.txt:665
# 572f7176074f46808f4e117667cf5be3
msgid "Authentication in Web requests"
msgstr ""

#: ../../topics/auth.txt:667
# ca716251a28b4816a00d084ea4f1b349
msgid "Until now, this document has dealt with the low-level APIs for manipulating authentication-related objects. On a higher level, Django can hook this authentication framework into its system of :class:`request objects <django.http.HttpRequest>`."
msgstr ""

#: ../../topics/auth.txt:672
# 140e69fba48b4956aeeb195e666be4fc
msgid "First, install the :class:`~django.contrib.sessions.middleware.SessionMiddleware` and :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` middlewares by adding them to your :setting:`MIDDLEWARE_CLASSES` setting. See the :doc:`session documentation </topics/http/sessions>` for more information."
msgstr ""

#: ../../topics/auth.txt:678
# d9b5ce4dc5ac43cfad261dac13bfd77b
msgid "Once you have those middlewares installed, you'll be able to access :attr:`request.user <django.http.HttpRequest.user>` in views. :attr:`request.user <django.http.HttpRequest.user>` will give you a :class:`~django.contrib.auth.models.User` object representing the currently logged-in user. If a user isn't currently logged in, :attr:`request.user <django.http.HttpRequest.user>` will be set to an instance of :class:`~django.contrib.auth.models.AnonymousUser` (see the previous section). You can tell them apart with :meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

#: ../../topics/auth.txt:696
# e9899c3eeb944008a724aa3e6cf7e3af
msgid "How to log a user in"
msgstr ""

#: ../../topics/auth.txt:698
# 1a4b6b616d4b43c8899ea40a76551599
msgid "Django provides two functions in :mod:`django.contrib.auth`: :func:`~django.contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`."
msgstr ""

#: ../../topics/auth.txt:704
# c5ce5279dd344759bca532a18e1ab5bb
msgid "To authenticate a given username and password, use :func:`~django.contrib.auth.authenticate()`. It takes two keyword arguments, ``username`` and ``password``, and it returns a :class:`~django.contrib.auth.models.User` object if the password is valid for the given username. If the password is invalid, :func:`~django.contrib.auth.authenticate()` returns ``None``. Example::"
msgstr ""

#: ../../topics/auth.txt:723
# e916ce1e6683410a823402beeaecdb3b
msgid "To log a user in, in a view, use :func:`~django.contrib.auth.login()`. It takes an :class:`~django.http.HttpRequest` object and a :class:`~django.contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves the user's ID in the session, using Django's session framework, so, as mentioned above, you'll need to make sure to have the session middleware installed."
msgstr ""

#: ../../topics/auth.txt:730
# 178297fbbf0e4bca8842dde8183d5719
msgid "Note that data set during the anonymous session is retained when the user logs in."
msgstr ""

#: ../../topics/auth.txt:733
# 1f0d1ec83ed74351bc8e4e602a71a6d8
msgid "This example shows how you might use both :func:`~django.contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

#: ../../topics/auth.txt:754
# 5f7258e1602a405baa19301b8a8db6ac
msgid "When you're manually logging a user in, you *must* call :func:`~django.contrib.auth.authenticate()` before you call :func:`~django.contrib.auth.login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on the :class:`~django.contrib.auth.models.User` noting which authentication backend successfully authenticated that user (see the `backends documentation`_ for details), and this information is needed later during the login process."
msgstr ""

#: ../../topics/auth.txt:766
# bf005ed80fb249788adc57428c895060
msgid "Manually managing a user's password"
msgstr ""

#: ../../topics/auth.txt:779
# 6d1fdd8b2f344906bd29b07401fedb17
msgid "If you'd like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function :func:`django.contrib.auth.hashers.check_password`. It takes two arguments: the plain-text password to check, and the full value of a user's ``password`` field in the database to check against, and returns ``True`` if they match, ``False`` otherwise."
msgstr ""

#: ../../topics/auth.txt:790
# aaee91f6d9294e3496355d9c5d8a6d73
msgid "Creates a hashed password in the format used by this application. It takes two arguments: hashing algorithm to use and the password in plain-text. Currently supported algorithms are: ``'sha1'``, ``'md5'`` and ``'crypt'`` if you have the ``crypt`` library installed. If the second argument is ``None``, an unusable password is returned (a one that will be never accepted by :func:`django.contrib.auth.hashers.check_password`)."
msgstr ""

#: ../../topics/auth.txt:801
# f5b23690b1b74a8faaedd19d1434a1a6
msgid "Checks if the given string is a hashed password that has a chance of being verified against :func:`django.contrib.auth.hashers.check_password`."
msgstr ""

#: ../../topics/auth.txt:806
# b201a336fca44f2dbe6923064e26f130
msgid "How to log a user out"
msgstr ""

#: ../../topics/auth.txt:812
# a4982c35f49b4250bec39c685777d54c
msgid "To log out a user who has been logged in via :func:`django.contrib.auth.login()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

#: ../../topics/auth.txt:824
# 9409cf35603042e6af2a85d7fca6291e
msgid "Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if the user wasn't logged in."
msgstr ""

#: ../../topics/auth.txt:827
# 2528e857faa94cad9ac6470b70de58b2
msgid "When you call :func:`~django.contrib.auth.logout()`, the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same Web browser to log in and have access to the previous user's session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that *after* calling :func:`django.contrib.auth.logout()`."
msgstr ""

#: ../../topics/auth.txt:838
# e8761259788146c9b2999880fd9decd6
msgid "Login and logout signals"
msgstr ""

#: ../../topics/auth.txt:842
# 25535b187f9a474a8b030e10d1f421b9
msgid "The auth framework uses two :doc:`signals </topics/signals>` that can be used for notification when a user logs in or out."
msgstr ""

#: ../../topics/auth.txt:847
# 1362b30c104e42b2a1998ffe4d164538
msgid "Sent when a user logs in successfully."
msgstr ""

#: ../../topics/auth.txt:849
# 1370366ee9d742429f45d9093beef707
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../topics/auth.txt:852
# 66bba30c068a4e37a2ff1703c5b6d429
msgid "As above: the class of the user that just logged in."
msgstr ""

#: ../../topics/auth.txt:855
#: ../../topics/auth.txt:869
# 08bd964246a34d86807aff0c3274bc40
# 0b252275f8c847bda96f7924a90fe0ed
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../topics/auth.txt:858
# 12b6a59abfb74be7b2575bfeeea1ce9d
msgid "The user instance that just logged in."
msgstr ""

#: ../../topics/auth.txt:862
# 1454ad3473054571871d26f179be3960
msgid "Sent when the logout method is called."
msgstr ""

#: ../../topics/auth.txt:865
# 7cdfbf8bdc36449491daf96f81928977
msgid "As above: the class of the user that just logged out or ``None`` if the user was not authenticated."
msgstr ""

#: ../../topics/auth.txt:872
# fcd319ab57ee4ef8b61dce043628108d
msgid "The user instance that just logged out or ``None`` if the user was not authenticated."
msgstr ""

#: ../../topics/auth.txt:876
# 1e9c2a1a2e7640fd8587766810be8dc8
msgid "Limiting access to logged-in users"
msgstr ""

#: ../../topics/auth.txt:879
# ebdb9cf120f74e428ac31bf752be7b4f
msgid "The raw way"
msgstr ""

#: ../../topics/auth.txt:881
# a4e3871acd394401ad5db39d2be85314
msgid "The simple, raw way to limit access to pages is to check :meth:`request.user.is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and either redirect to a login page::"
msgstr ""

#: ../../topics/auth.txt:893
# d7972761819545bc9d09bebc6c11d092
msgid "...or display an error message::"
msgstr ""

#: ../../topics/auth.txt:901
# 140d355eb75a496b80043c355195f8e5
msgid "The login_required decorator"
msgstr ""

#: ../../topics/auth.txt:905
# 1a346cc960354c9fb01017f842f87fb1
msgid "As a shortcut, you can use the convenient :func:`~django.contrib.auth.decorators.login_required` decorator::"
msgstr ""

#: ../../topics/auth.txt:914
# 0a0b4e3b76a34ff18ee27c5fa2e83689
msgid ":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

#: ../../topics/auth.txt:916
# 925aa7c2eb4b4ee2a49f0a28ac285e74
msgid "If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL <LOGIN_URL>`, passing the current absolute path in the query string. Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

#: ../../topics/auth.txt:920
# f0114402f8c149bf8d872b456a4235b7
msgid "If the user is logged in, execute the view normally. The view code is free to assume the user is logged in."
msgstr ""

#: ../../topics/auth.txt:923
# 3a5f9dc749384ef1b58f13d195bffec4
msgid "By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called ``\"next\"``. If you would prefer to use a different name for this parameter, :func:`~django.contrib.auth.decorators.login_required` takes an optional ``redirect_field_name`` parameter::"
msgstr ""

#: ../../topics/auth.txt:935
# 51361542e8b0418d952d4f39543f931e
msgid "Note that if you provide a value to ``redirect_field_name``, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of ``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

#: ../../topics/auth.txt:942
# 926cf9f18e70454f91a21f98874d5ddd
msgid ":func:`~django.contrib.auth.decorators.login_required` also takes an optional ``login_url`` parameter. Example::"
msgstr ""

#: ../../topics/auth.txt:951
# 92af94ca0b954902b43123645e45adaf
msgid "Note that if you don't specify the ``login_url`` parameter, you'll need to map the appropriate Django view to :setting:`settings.LOGIN_URL <LOGIN_URL>`. For example, using the defaults, add the following line to your URLconf::"
msgstr ""

#: ../../topics/auth.txt:959
# a43295bdaa1a4591b9dfe73aae6ebe2e
msgid "**URL name:** ``login``"
msgstr ""

#: ../../topics/auth.txt:961
#: ../../topics/auth.txt:1081
# accafc1823a84d4b9181d6fa1ace75a6
# 75d1c91b11e54d6da5bd371d05b2fba4
msgid "See :doc:`the URL documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""

#: ../../topics/auth.txt:964
# 9ef43c2cfdbe477d9f13d6e1b076fb99
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

#: ../../topics/auth.txt:966
# 00198d73e8b541fd9c5651946ed73639
msgid "If called via ``GET``, it displays a login form that POSTs to the same URL. More on this in a bit."
msgstr ""

#: ../../topics/auth.txt:969
# 81fe0e23360f43598376c01e643b1699
msgid "If called via ``POST``, it tries to log the user in. If login is successful, the view redirects to the URL specified in ``next``. If ``next`` isn't provided, it redirects to :setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/profile/``). If login isn't successful, it redisplays the login form."
msgstr ""

#: ../../topics/auth.txt:976
# 58d5807ba0564ee6833bc7f7a78d086d
msgid "It's your responsibility to provide the login form in a template called ``registration/login.html`` by default. This template gets passed four template context variables:"
msgstr ""

#: ../../topics/auth.txt:980
# 5fc9610b0b00479b8f9397e99b02662a
msgid "``form``: A :class:`~django.forms.Form` object representing the login form. See the :doc:`forms documentation </topics/forms/index>` for more on ``Form`` objects."
msgstr ""

#: ../../topics/auth.txt:984
# 0edb3a29f78449c7b5e48869938b1acb
msgid "``next``: The URL to redirect to after successful login. This may contain a query string, too."
msgstr ""

#: ../../topics/auth.txt:987
#: ../../topics/auth.txt:1100
# 9b39a91177a64a4db63776345cdcaac3
# 2c30def9fcce47238010d564f86b97a4
msgid "``site``: The current :class:`~django.contrib.sites.models.Site`, according to the :setting:`SITE_ID` setting. If you don't have the site framework installed, this will be set to an instance of :class:`~django.contrib.sites.models.RequestSite`, which derives the site name and domain from the current :class:`~django.http.HttpRequest`."
msgstr ""

#: ../../topics/auth.txt:994
#: ../../topics/auth.txt:1107
#: ../../topics/auth.txt:1220
# d77799b80a8a48839df6c0528ac2bb6b
# 6778950465b84b5897e1daa9dd2728aa
# c4dc1f1d50314d699518d5d699b8b35c
msgid "``site_name``: An alias for ``site.name``. If you don't have the site framework installed, this will be set to the value of :attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:`/ref/contrib/sites`."
msgstr ""

#: ../../topics/auth.txt:999
# 58e26de72c58408d9ac58d49e3ac9780
msgid "If you'd prefer not to call the template :file:`registration/login.html`, you can pass the ``template_name`` parameter via the extra arguments to the view in your URLconf. For example, this URLconf line would use :file:`myapp/login.html` instead::"
msgstr ""

#: ../../topics/auth.txt:1006
# 9bba64efeee04a4eb3cd54d3e5e6b21f
msgid "You can also specify the name of the ``GET`` field which contains the URL to redirect to after login by passing ``redirect_field_name`` to the view. By default, the field is called ``next``."
msgstr ""

#: ../../topics/auth.txt:1010
# 45f203afa0dc4895ac39834b989afc4a
msgid "Here's a sample :file:`registration/login.html` template you can use as a starting point. It assumes you have a :file:`base.html` template that defines a ``content`` block:"
msgstr ""

#: ../../topics/auth.txt:1046
# ceca37d0ade640d0af5ee0cbca1ff95c
msgid "If you are using alternate authentication (see :ref:`authentication-backends`) you can pass a custom authentication form to the login view via the ``authentication_form`` parameter. This form must accept a ``request`` keyword argument in its ``__init__`` method, and provide a ``get_user`` method which returns the authenticated user object (this method is only ever called after successful form validation)."
msgstr ""

#: ../../topics/auth.txt:1058
# 846bdac885fb4503894fb9f714a5d443
msgid "The :func:`~views.login` view and the :ref:`other-built-in-views` now all return a :class:`~django.template.response.TemplateResponse` instance, which allows you to easily customize the response data before rendering. For more details, see the :doc:`TemplateResponse documentation </ref/template-response>`."
msgstr ""

#: ../../topics/auth.txt:1067
# 26a1a7834ee944ac8f90792d73877ee9
msgid "Other built-in views"
msgstr ""

#: ../../topics/auth.txt:1071
# bfa2a932bdf243b2bee659bd0684ba02
msgid "In addition to the :func:`~views.login` view, the authentication system includes a few other useful built-in views located in :mod:`django.contrib.auth.views`:"
msgstr ""

#: ../../topics/auth.txt:1077
# 9c4277913eae43679f76e8955800de55
msgid "Logs a user out."
msgstr ""

#: ../../topics/auth.txt:1079
# 40548993f218436fa4393e1f3f82f0c9
msgid "**URL name:** ``logout``"
msgstr ""

#: ../../topics/auth.txt:1084
#: ../../topics/auth.txt:1118
#: ../../topics/auth.txt:1129
#: ../../topics/auth.txt:1155
#: ../../topics/auth.txt:1178
#: ../../topics/auth.txt:1255
#: ../../topics/auth.txt:1267
#: ../../topics/auth.txt:1302
#: ../../topics/auth.txt:1321
# 8bb904c23623479eb6cde7c3fb513411
# 1c82f260821f43cdad47f1c1610115a0
# 0595485dd0d2486ebdb9e5870e25d1ac
# a102f8812e4b4d098828ca17ca5fa4bd
# be8b0bc6158e4a379e74bfeb2a917ae5
# 1ae4d6c328ed4114869f10acf064bce5
# 968cb40d1fcf450293123808656009e7
# ad7f218ca95047beb251ff16b5d136da
# 3b316bfc50c34e4fa7e267879dc34d66
msgid "**Optional arguments:**"
msgstr ""

#: ../../topics/auth.txt:1086
# 1008072899f0427e91fe8a5148f09272
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

#: ../../topics/auth.txt:1088
# f2acb39393144bbe8d961495c2226f94
msgid "``template_name``: The full name of a template to display after logging the user out. Defaults to :file:`registration/logged_out.html` if no argument is supplied."
msgstr ""

#: ../../topics/auth.txt:1092
# 38fbf4c7995944c2bfd23444625021a1
msgid "``redirect_field_name``: The name of a ``GET`` field containing the URL to redirect to after log out. Overrides ``next_page`` if the given ``GET`` parameter is passed."
msgstr ""

#: ../../topics/auth.txt:1096
#: ../../topics/auth.txt:1145
#: ../../topics/auth.txt:1207
#: ../../topics/auth.txt:1287
# 9fc36f65a893487f8d04180fef8f89b1
# 06f9eed1af2643b695ae36c19aeb7c86
# ee7ffa1067454d8281fb8125da851bb0
# 4533ed21de27424cb87b32c4795b7706
msgid "**Template context:**"
msgstr ""

#: ../../topics/auth.txt:1098
# 74da1e0733684566bde8f04859fbdc23
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

#: ../../topics/auth.txt:1114
# e781da6f5db2400bbe1ca2a85c3e60b8
msgid "Logs a user out, then redirects to the login page."
msgstr ""

#: ../../topics/auth.txt:1116
# 7c34a2b84c7f41c3ab2a5b98acc861cd
msgid "**URL name:** No default URL provided"
msgstr ""

#: ../../topics/auth.txt:1120
#: ../../topics/auth.txt:1323
# b96deac1512b447199b207be52e7e64f
# ea54d5ac3e5140bea559fb102defd766
msgid "``login_url``: The URL of the login page to redirect to. Defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1125
# 6e24081f53f949c0b49076795536c6cd
msgid "Allows a user to change their password."
msgstr ""

#: ../../topics/auth.txt:1127
# 93337d7d386f452080c083d70317d8fe
msgid "**URL name:** ``password_change``"
msgstr ""

#: ../../topics/auth.txt:1131
# 0a96e34160f3441aa414730a4d810c44
msgid "``template_name``: The full name of a template to use for displaying the password change form. Defaults to :file:`registration/password_change_form.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1135
# cd4eb5bf60644371b897d54f5f84ff0d
msgid "``post_change_redirect``: The URL to redirect to after a successful password change."
msgstr ""

#: ../../topics/auth.txt:1140
# 8a3e58e7046544e6a0af01823e7f47fe
msgid "``password_change_form``: A custom \"change password\" form which must accept a ``user`` keyword argument. The form is responsible for actually changing the user's password. Defaults to :class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr ""

#: ../../topics/auth.txt:1147
# 397f9150bfd54a34bd9b5691fd321f6e
msgid "``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

#: ../../topics/auth.txt:1151
# d195ab01f405413e80e3351d08f04f95
msgid "The page shown after a user has changed their password."
msgstr ""

#: ../../topics/auth.txt:1153
# 18c826ffd5de446f8df0ff3e786bcd83
msgid "**URL name:** ``password_change_done``"
msgstr ""

#: ../../topics/auth.txt:1157
# a8a5698840a149c4993a25404b2649a8
msgid "``template_name``: The full name of a template to use. Defaults to :file:`registration/password_change_done.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1163
# 857e0f4663c24f70b0ee975dee9cd9c9
msgid "Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user's registered email address."
msgstr ""

#: ../../topics/auth.txt:1176
# a30e4f0bdfb7488f963c2c07eb20189c
msgid "**URL name:** ``password_reset``"
msgstr ""

#: ../../topics/auth.txt:1180
# 8eaeee4361a14be6b2b1889eb89763cc
msgid "``template_name``: The full name of a template to use for displaying the password reset form. Defaults to :file:`registration/password_reset_form.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1184
# 36b3dbdd625d4eb29af815e458c650d5
msgid "``email_template_name``: The full name of a template to use for generating the email with the new password. Defaults to :file:`registration/password_reset_email.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1188
# a93a35c16f8049eebdba8a340ccfac92
msgid "``subject_template_name``: The full name of a template to use for the subject of the email with the new password. Defaults to :file:`registration/password_reset_subject.txt` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1194
# f24ec8b29083426eb5a5b4f277e09ce2
msgid "``password_reset_form``: Form that will be used to set the password. Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

#: ../../topics/auth.txt:1197
#: ../../topics/auth.txt:1277
# a75e287fadfd4460a7d189b790eda9ae
# 64c29969576d4d1e83a104eb21f4a6e1
msgid "``token_generator``: Instance of the class to check the password. This will default to ``default_token_generator``, it's an instance of ``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

#: ../../topics/auth.txt:1201
# 69122426c02f4a96947427f66d1e8590
msgid "``post_reset_redirect``: The URL to redirect to after a successful password change."
msgstr ""

#: ../../topics/auth.txt:1204
# e8b24d30d5fb4de6bd26ed44e3f3168d
msgid "``from_email``: A valid email address. By default Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../topics/auth.txt:1209
# 99a87a4354764145ab4d9cd0a7414289
msgid "``form``: The form (see ``password_reset_form`` above) for resetting the user's password."
msgstr ""

#: ../../topics/auth.txt:1212
# cc8694238cf341d487fc196a0baf99f1
msgid "**Email template context:**"
msgstr ""

#: ../../topics/auth.txt:1214
# d6f26f387cc849efa00376decba5686d
msgid "``email``: An alias for ``user.email``"
msgstr ""

#: ../../topics/auth.txt:1216
# 449e9e184ffd445c91cdcd280a0070e3
msgid "``user``: The current :class:`~django.contrib.auth.models.User`, according to the ``email`` form field. Only active users are able to reset their passwords (``User.is_active is True``)."
msgstr ""

#: ../../topics/auth.txt:1225
# e2526bb3f1494f00896c8db139562726
msgid "``domain``: An alias for ``site.domain``. If you don't have the site framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

#: ../../topics/auth.txt:1229
# 739cda2eb4a34d22bc0ede5a5a9e597b
msgid "``protocol``: http or https"
msgstr ""

#: ../../topics/auth.txt:1231
# 8adfff9eba5742c8b3c5702faa2a3d38
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

#: ../../topics/auth.txt:1233
# f2719f6b0b7c406a8d2beda9a3fe23da
msgid "``token``: Token to check that the password is valid."
msgstr ""

#: ../../topics/auth.txt:1235
# a3ce905df47c409ab1f1c5ca15ca3fee
msgid "Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

#: ../../topics/auth.txt:1243
# e3d3a9115ccf4b71996723b1e1d4cbb0
msgid "The same template context is used for subject template. Subject must be single line plain text string."
msgstr ""

#: ../../topics/auth.txt:1249
# ae897d2857c544f99b2149981911a703
msgid "The page shown after a user has been emailed a link to reset their password. This view is called by default if the :func:`password_reset` view doesn't have an explicit ``post_reset_redirect`` URL set."
msgstr ""

#: ../../topics/auth.txt:1253
# ff6e4ed911c945908e2fd8ca37b5434d
msgid "**URL name:** ``password_reset_done``"
msgstr ""

#: ../../topics/auth.txt:1257
# 8630178f08d642c4a7f2a56ed361de79
msgid "``template_name``: The full name of a template to use. Defaults to :file:`registration/password_reset_done.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1263
# 9d5bd591193b48388ec07e545ff87e22
msgid "Presents a form for entering a new password."
msgstr ""

#: ../../topics/auth.txt:1265
# a5fbb1fe311a4c87b43edaf5781bc7d7
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

#: ../../topics/auth.txt:1269
# fe0f38767a004cc1b8fdfc00b2a09426
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

#: ../../topics/auth.txt:1271
# 963448c0589a4d05981e02480a220813
msgid "``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

#: ../../topics/auth.txt:1274
# 3f690dacc6234dd2b9fce71a1f0ccf9c
msgid "``template_name``: The full name of a template to display the confirm password view. Default value is :file:`registration/password_reset_confirm.html`."
msgstr ""

#: ../../topics/auth.txt:1281
# a7ac36286fb24ec2a0208830635842e4
msgid "``set_password_form``: Form that will be used to set the password. Defaults to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

#: ../../topics/auth.txt:1284
# 653dc121fe17468fa7fea13400dafac3
msgid "``post_reset_redirect``: URL to redirect after the password reset done. Defaults to ``None``."
msgstr ""

#: ../../topics/auth.txt:1289
# 01ca77c87cb7428d9d1e2001eda18ae8
msgid "``form``: The form (see ``set_password_form`` above) for setting the new user's password."
msgstr ""

#: ../../topics/auth.txt:1292
# 7dc2d3ac139a498a900983436e06ee2a
msgid "``validlink``: Boolean, True if the link (combination of uidb36 and token) is valid or unused yet."
msgstr ""

#: ../../topics/auth.txt:1297
# bc3fe4f049744640921d80852fc48732
msgid "Presents a view which informs the user that the password has been successfully changed."
msgstr ""

#: ../../topics/auth.txt:1300
# 593bcfb181ce4d9e97996b397e42c0f3
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

#: ../../topics/auth.txt:1304
# 66fbbc7038614c62b540d57f5e766aa8
msgid "``template_name``: The full name of a template to display the view. Defaults to :file:`registration/password_reset_complete.html`."
msgstr ""

#: ../../topics/auth.txt:1308
# 7a1d9ef40bb1428dbec5bb73a1d46370
msgid "Helper functions"
msgstr ""

#: ../../topics/auth.txt:1314
# 7c597a857ecb445ea63f027c51efca8b
msgid "Redirects to the login page, and then back to another URL after a successful login."
msgstr ""

#: ../../topics/auth.txt:1317
# eac261888e624f508e721d3e65410576
msgid "**Required arguments:**"
msgstr ""

#: ../../topics/auth.txt:1319
# 93a499f9ad50408cb1ab1da2fb1b096e
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

#: ../../topics/auth.txt:1326
# 9acbf7c582bc427ea7cdb6cce748e1fd
msgid "``redirect_field_name``: The name of a ``GET`` field containing the URL to redirect to after log out. Overrides ``next`` if the given ``GET`` parameter is passed."
msgstr ""

#: ../../topics/auth.txt:1331
# 845aea5efa514d8ebed5a27c14baaad1
msgid "Built-in forms"
msgstr ""

#: ../../topics/auth.txt:1335
# 2f243383f7444188b8f3f2760904b630
msgid "If you don't want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

#: ../../topics/auth.txt:1341
# 5bf1a05657d34d4aaf2b339d19f313d5
msgid "A form used in the admin interface to change a user's password."
msgstr ""

#: ../../topics/auth.txt:1345
# faa955155dd343c692fbddfc9423bdc1
msgid "A form for logging a user in."
msgstr ""

#: ../../topics/auth.txt:1349
# 56e31a18f1ea4d42b7140e72e1dfd76b
msgid "A form for allowing a user to change their password."
msgstr ""

#: ../../topics/auth.txt:1353
# ff3067b5c1f84c0791ac31ba51ffdca3
msgid "A form for generating and emailing a one-time use link to reset a user's password."
msgstr ""

#: ../../topics/auth.txt:1358
# f37e99186c40437fb9ac420451056894
msgid "A form that lets a user change his/her password without entering the old password."
msgstr ""

#: ../../topics/auth.txt:1363
# 4bc02a8a3830459f820f55ea6ec69c93
msgid "A form used in the admin interface to change a user's information and permissions."
msgstr ""

#: ../../topics/auth.txt:1368
# 3e90540de1904916a019f34d344f71c2
msgid "A form for creating a new user."
msgstr ""

#: ../../topics/auth.txt:1371
# 74d844151caa406f8df34837ceb907b3
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

#: ../../topics/auth.txt:1375
# f009a502a52e4b79b548b40fc26854d9
msgid "To limit access based on certain permissions or some other test, you'd do essentially the same thing as described in the previous section."
msgstr ""

#: ../../topics/auth.txt:1378
# e9f4c0ac8d7a45bab4c8249debb6cd0a
msgid "The simple way is to run your test on :attr:`request.user <django.http.HttpRequest.user>` in the view directly. For example, this view checks to make sure the user is logged in and has the permission ``polls.can_vote``::"
msgstr ""

#: ../../topics/auth.txt:1390
# 9a9c9df619154d64a72257c0a1984fcf
msgid "As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

#: ../../topics/auth.txt:1398
# d0962243babf40eeb83683fe86ed4cc9
msgid "We're using this particular test as a relatively simple example. However, if you just want to test whether a permission is available to a user, you can use the :func:`~django.contrib.auth.decorators.permission_required()` decorator, described later in this document."
msgstr ""

#: ../../topics/auth.txt:1403
# ad2f23e0673c40e99f19673095e5ea6a
msgid ":func:`~django.contrib.auth.decorators.user_passes_test` takes a required argument: a callable that takes a :class:`~django.contrib.auth.models.User` object and returns ``True`` if the user is allowed to view the page. Note that :func:`~django.contrib.auth.decorators.user_passes_test` does not automatically check that the :class:`~django.contrib.auth.models.User` is not anonymous."
msgstr ""

#: ../../topics/auth.txt:1411
# fd261bf3a1734cbab523d05c0abcadda
msgid ":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional ``login_url`` argument, which lets you specify the URL for your login page (:setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

#: ../../topics/auth.txt:1415
#: ../../topics/db/managers.txt:147
#: ../../topics/db/queries.txt:1188
#: ../../topics/email.txt:271
#: ../../topics/email.txt:314
#: ../../topics/forms/modelforms.txt:23
#: ../../topics/http/urls.txt:571
#: ../../topics/i18n/formatting.txt:122
#: ../../topics/i18n/formatting.txt:142
#: ../../topics/i18n/timezones.txt:345
#: ../../topics/i18n/timezones.txt:358
#: ../../topics/i18n/timezones.txt:374
#: ../../topics/i18n/translation.txt:177
#: ../../topics/i18n/translation.txt:265
#: ../../topics/i18n/translation.txt:1298
#: ../../topics/serialization.txt:167
#: ../../topics/templates.txt:136
#: ../../topics/testing.txt:1348
#: ../../topics/testing.txt:1386
# 8f541d26efd349589d0257e6be9acd48
# 7b19246213dc4aa9a978f6b6676997d3
# d02f078dc01945239c6e6dff39161947
# 4c183e7523ce4a8fb0104e712b52a076
# 0a04113d1615421baf5334f0917a8088
# cf4f21b865a14465bfaaaf5906f2f3f3
# 1823836d62904383936654c1c720087a
# 808c7417cafb480ca0addfa2e29a9e89
# 84fa12ea4b4744eb9c0c51a21e497467
# 1906b910997b4466b64edd336cfc55bf
# c741b0f2526648cd8cc790a1a43599e2
# 5d0e75ecb9654cf0adca89f21d1258a2
# 09c0f43c645a4d8892b38d7734d3e22a
# 1f077d89620f4564adcac97c7655eb2d
# d9ddb09591e1449b89cf7913c7c9c9dd
# 1f15e36ab1784011bbcb73d1dfbadfd8
# e27131e4a24d4caf86c7cdf08010890b
# fdc6afa72ac143e1860e1e996f4f81ab
# d20586a6097b42d3847e03ce0c61fbab
msgid "For example::"
msgstr ""

#: ../../topics/auth.txt:1424
# 417b2c07cd31471e8ac46ce308c90d39
msgid "The permission_required decorator"
msgstr ""

#: ../../topics/auth.txt:1428
# 192518ed59704e1ba33e50fde730cd3c
msgid "It's a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the :func:`~django.contrib.auth.decorators.permission_required()` decorator. Using this decorator, the earlier example can be written as::"
msgstr ""

#: ../../topics/auth.txt:1439
# dab55f25814149f589dc4a471ec0c177
msgid "As for the :meth:`User.has_perm` method, permission names take the form ``\"<app label>.<permission codename>\"`` (i.e. ``polls.can_vote`` for a permission on a model in the ``polls`` application)."
msgstr ""

#: ../../topics/auth.txt:1443
# 646ce03404f649b0828f1f8ced153ac7
msgid "Note that :func:`~django.contrib.auth.decorators.permission_required()` also takes an optional ``login_url`` parameter. Example::"
msgstr ""

#: ../../topics/auth.txt:1452
# 08308e90f8934b098001fa2d744ac47b
msgid "As in the :func:`~decorators.login_required` decorator, ``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../topics/auth.txt:1457
# 2cdd351202d04688bf77ed8450926385
msgid "Added ``raise_exception`` parameter. If given, the decorator will raise :exc:`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` instead of redirecting to the login page."
msgstr ""

#: ../../topics/auth.txt:1465
# e6dfea1e422242bd8c6c0e751484f912
msgid "Limiting access to generic views"
msgstr ""

#: ../../topics/auth.txt:1467
# 04c26e3806cc439eac93349cd1927fd0
msgid "To limit access to a :doc:`class-based generic view </ref/class-based-views>`, decorate the :meth:`View.dispatch <django.views.generic.base.View.dispatch>` method on the class. See :ref:`decorating-class-based-views` for details."
msgstr ""

#: ../../topics/auth.txt:1472
# 4c5e51cfa6a34ff2b66ec51df5fc8aad
msgid "Function-based generic views"
msgstr ""

#: ../../topics/auth.txt:1474
# fedd70f83bb541338fa080fd46acd248
msgid "To limit access to a :doc:`function-based generic view </ref/generic-views>`, write a thin wrapper around the view, and point your URLconf to your wrapper instead of the generic view itself. For example::"
msgstr ""

#: ../../topics/auth.txt:1487
#: ../../topics/auth.txt:1654
# aa0f58cf63cd455ab70b6016ee62db50
# 4110ddc516504379a1512a23a1865760
msgid "Permissions"
msgstr ""

#: ../../topics/auth.txt:1489
# 3df1824f4f744f0c8a4b938f9b667385
msgid "Django comes with a simple permissions system. It provides a way to assign permissions to specific users and groups of users."
msgstr ""

#: ../../topics/auth.txt:1492
# 870e525de41c4d5b895481c3f391603e
msgid "It's used by the Django admin site, but you're welcome to use it in your own code."
msgstr ""

#: ../../topics/auth.txt:1495
# 75390bebfdf2496cac529364c6e3d1da
msgid "The Django admin site uses permissions as follows:"
msgstr ""

#: ../../topics/auth.txt:1497
# 02bb3860fa9b492497360960cbc7e17c
msgid "Access to view the \"add\" form and add an object is limited to users with the \"add\" permission for that type of object."
msgstr ""

#: ../../topics/auth.txt:1499
# 13a909d586fb457089feb9c106afe97f
msgid "Access to view the change list, view the \"change\" form and change an object is limited to users with the \"change\" permission for that type of object."
msgstr ""

#: ../../topics/auth.txt:1502
# 2bc9246e51c7416180d0a3fa292591ec
msgid "Access to delete an object is limited to users with the \"delete\" permission for that type of object."
msgstr ""

#: ../../topics/auth.txt:1505
# 60d14deb18294d94a870221c0b2e8ae5
msgid "Permissions are set globally per type of object, not per specific object instance. For example, it's possible to say \"Mary may change news stories,\" but it's not currently possible to say \"Mary may change news stories, but only the ones she created herself\" or \"Mary may only change news stories that have a certain status, publication date or ID.\" The latter functionality is something Django developers are currently discussing."
msgstr ""

#: ../../topics/auth.txt:1513
# 9b1c96c812ec407aa0842cf2c4aaa1f3
msgid "Default permissions"
msgstr ""

#: ../../topics/auth.txt:1515
# 952bac1d50fd49d6b76ad76c1f0ed84e
msgid "When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` setting, it will ensure that three default permissions -- add, change and delete -- are created for each Django model defined in one of your installed applications."
msgstr ""

#: ../../topics/auth.txt:1520
# 572b118b3895480a92d9598bacfb09b0
msgid "These permissions will be created when you run :djadmin:`manage.py syncdb <syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib.auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../topics/auth.txt:1528
# fdabef46a8f24f17b8e5665e4979a23c
msgid "Assuming you have an application with an :attr:`~django.db.models.Options.app_label` ``foo`` and a model named ``Bar``, to test for basic permissions you should use:"
msgstr ""

#: ../../topics/auth.txt:1532
# 198057ca78284728be350062b3ed20c1
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

#: ../../topics/auth.txt:1533
# c1b2d2a92b6e4369a6804d03e221f15b
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

#: ../../topics/auth.txt:1534
# faac0459917b4d15a7935a5b1312664d
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

#: ../../topics/auth.txt:1539
# b131336e5e074451bf412a817bc3a9f0
msgid "Custom permissions"
msgstr ""

#: ../../topics/auth.txt:1541
# 28ab93bdc1594ff2bd547800079097a4
msgid "To create custom permissions for a given model object, use the ``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

#: ../../topics/auth.txt:1544
# a8cb305826ff4d128a34e2ec3f6fbb2e
msgid "This example Task model creates three custom permissions, i.e., actions users can or cannot do with Task instances, specific to your application::"
msgstr ""

#: ../../topics/auth.txt:1556
# e1a46cc478f34ab6bebeab2527310a17
msgid "The only thing this does is create those extra permissions when you run :djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the value of these permissions when an user is trying to access the functionality provided by the application (viewing tasks, changing the status of tasks, closing tasks.) Continuing the above example, the following checks if a user may view tasks::"
msgstr ""

#: ../../topics/auth.txt:1575
# 521751a768b744debb9715237040d03b
msgid ":class:`~django.contrib.auth.models.Permission` objects have the following fields:"
msgstr ""

#: ../../topics/auth.txt:1580
# eaa07ef176564fb6bbc69ec2c74fa1ad
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

#: ../../topics/auth.txt:1584
# 95c068408c9941d7af18c1e6ced3266e
msgid "Required. A reference to the ``django_content_type`` database table, which contains a record for each installed Django model."
msgstr ""

#: ../../topics/auth.txt:1589
# 8e17963266cb401a953d3aea1dc19e41
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

#: ../../topics/auth.txt:1594
# 7257de77c53449bf84030ecc94ed408c
msgid ":class:`~django.contrib.auth.models.Permission` objects have the standard data-access methods like any other :doc:`Django model </ref/models/instances>`."
msgstr ""

#: ../../topics/auth.txt:1600
# 36715fd1fe724aebbfeddd794267967d
msgid "Programmatically creating permissions"
msgstr ""

#: ../../topics/auth.txt:1602
# fdbf9a579db0479a9a2d0158368bb098
msgid "While custom permissions can be defined within a model's ``Meta`` class, you can also create permissions directly. For example, you can create the ``can_publish`` permission for a ``BlogPost`` model in ``myapp``::"
msgstr ""

#: ../../topics/auth.txt:1614
# ab6369e34bcc416bbd9ef67222a44458
msgid "The permission can then be assigned to a :class:`~django.contrib.auth.models.User` via its ``user_permissions`` attribute or to a :class:`~django.contrib.auth.models.Group` via its ``permissions`` attribute."
msgstr ""

#: ../../topics/auth.txt:1620
# 3afd64599a5a4a9287cae4ba1a11757e
msgid "Authentication data in templates"
msgstr ""

#: ../../topics/auth.txt:1622
# 4b5a307eb1a3463cb427f035568515cc
msgid "The currently logged-in user and his/her permissions are made available in the :doc:`template context </ref/templates/api>` when you use :class:`~django.template.context.RequestContext`."
msgstr ""

#: ../../topics/auth.txt:1628
# 6f55457b236c40c4989238fa7ac23543
msgid "Technically, these variables are only made available in the template context if you use :class:`~django.template.context.RequestContext` *and* your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib.auth.context_processors.auth\"``, which is default. For more, see the :ref:`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

#: ../../topics/auth.txt:1637
# e594e12629d74d26af8b044468705d96
msgid "When rendering a template :class:`~django.template.context.RequestContext`, the currently logged-in user, either a  :class:`~django.contrib.auth.models.User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

#: ../../topics/auth.txt:1650
# 0ad54055975041bcae4076ff947c2a1f
msgid "This template context variable is not available if a ``RequestContext`` is not being used."
msgstr ""

#: ../../topics/auth.txt:1656
# e2ecb9dc6a3f4ed79a7dd976fe3398f2
msgid "The currently logged-in user's permissions are stored in the template variable ``{{ perms }}``. This is an instance of :class:`django.contrib.auth.context_processors.PermWrapper`, which is a template-friendly proxy of permissions."
msgstr ""

#: ../../topics/auth.txt:1665
# e1c78589121b4b69a06303aeedc1eb4d
msgid "In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. This example would display ``True`` if the logged-in user had any permissions in the ``foo`` app::"
msgstr ""

#: ../../topics/auth.txt:1672
# 61c930c28fc44a278e6d69792ccfcd49
msgid "Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django.contrib.auth.models.User.has_perm>`. This example would display ``True`` if the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

#: ../../topics/auth.txt:1679
# 0fca52e4de204192a7dbc2b5521a16b4
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

#: ../../topics/auth.txt:1696
# f61c52c716f0457db5340ddac97b853e
msgid "Groups"
msgstr ""

#: ../../topics/auth.txt:1698
# e583b6c8781044d0b7c33f14a2ad4687
msgid "Groups are a generic way of categorizing users so you can apply permissions, or some other label, to those users. A user can belong to any number of groups."
msgstr ""

#: ../../topics/auth.txt:1701
# 6db234289cef4ce29eee8e69dcbf5f09
msgid "A user in a group automatically has the permissions granted to that group. For example, if the group ``Site editors`` has the permission ``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

#: ../../topics/auth.txt:1705
# 7c2b832d81114634aac362bc6dd76196
msgid "Beyond permissions, groups are a convenient way to categorize users to give them some label, or extended functionality. For example, you could create a group ``'Special users'``, and you could write code that could, say, give them access to a members-only portion of your site, or send them members-only email messages."
msgstr ""

#: ../../topics/auth.txt:1719
# 6f94e02b01b045408bafa8eee0e817e2
msgid ":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

#: ../../topics/auth.txt:1723
# a204681842ed4f51887c723318cf6544
msgid "Required. 80 characters or fewer. Any characters are permitted. Example: ``'Awesome Users'``."
msgstr ""

#: ../../topics/auth.txt:1728
# 5701562ac7ce4d47bf9f2e638b17ba7c
msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permissions`::"
msgstr ""

#: ../../topics/auth.txt:1738
# 7cc4a9c5170a4fe69d86352208099f2f
msgid "Other authentication sources"
msgstr ""

#: ../../topics/auth.txt:1740
# e6ad1c8af0424f258b7e7eaa245b58eb
msgid "The authentication that comes with Django is good enough for most common cases, but you may have the need to hook into another authentication source -- that is, another source of usernames and passwords or authentication methods."
msgstr ""

#: ../../topics/auth.txt:1744
# 9024e6c4d9ee4bb4bfa199a4d5b83010
msgid "For example, your company may already have an LDAP setup that stores a username and password for every employee. It'd be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications."
msgstr ""

#: ../../topics/auth.txt:1749
# d0ee83630d484a45886a95e3e6c24cd8
msgid "So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django's default database-based scheme, or you can use the default system in tandem with other systems."
msgstr ""

#: ../../topics/auth.txt:1754
# 370b52d0b3bc42858482cc7734148567
msgid "See the :doc:`authentication backend reference </ref/authbackends>` for information on the authentication backends included with Django."
msgstr ""

#: ../../topics/auth.txt:1758
# c63818c48b524b69b5e775be815dc182
msgid "Specifying authentication backends"
msgstr ""

#: ../../topics/auth.txt:1760
# ab2f01aebf464c548312f95f3db16bb4
msgid "Behind the scenes, Django maintains a list of \"authentication backends\" that it checks for authentication. When somebody calls :func:`django.contrib.auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-log-a-user-in>` above -- Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted."
msgstr ""

#: ../../topics/auth.txt:1767
# 647fd737e9aa4785bdf72010e4053ead
msgid "The list of authentication backends to use is specified in the :setting:`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path."
msgstr ""

#: ../../topics/auth.txt:1772
# f564d47e0cc2421faafaec1e6f75815f
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""

#: ../../topics/auth.txt:1776
# c3e8002fffc14cca824b76fcecf720e7
msgid "That's the basic authentication scheme that checks the Django users database."
msgstr ""

#: ../../topics/auth.txt:1778
# d44ea0cb2e014d6eb680561f892424bb
msgid "The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match."
msgstr ""

#: ../../topics/auth.txt:1784
# e1d480428a694f3e949874c00603d447
msgid "Once a user has authenticated, Django stores which backend was used to authenticate the user in the user's session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change :setting:`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

#: ../../topics/auth.txt:1794
# dc8abe28de03498e83c30bb6ea4d2100
msgid "Writing an authentication backend"
msgstr ""

#: ../../topics/auth.txt:1796
# ea401e9ab079415fa0a2f3d66c08c9ea
msgid "An authentication backend is a class that implements two methods: ``get_user(user_id)`` and ``authenticate(**credentials)``."
msgstr ""

#: ../../topics/auth.txt:1799
# 820c6cfab4104e4986223f2109d54a2a
msgid "The ``get_user`` method takes a ``user_id`` -- which could be a username, database ID or whatever -- and returns a ``User`` object."
msgstr ""

#: ../../topics/auth.txt:1802
# 90664133f4f14ad49f7eb26edbd601dc
msgid "The ``authenticate`` method takes credentials as keyword arguments. Most of the time, it'll just look like this::"
msgstr ""

#: ../../topics/auth.txt:1809
# 7651d6d06fbf4569ad6e4c5cf8a227b3
msgid "But it could also authenticate a token, like so::"
msgstr ""

#: ../../topics/auth.txt:1815
# ac393e49703e489084af00c5de01e6c5
msgid "Either way, ``authenticate`` should check the credentials it gets, and it should return a ``User`` object that matches those credentials, if the credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

#: ../../topics/auth.txt:1819
# 4c0bfbb5da124e18b8c428a8c582962a
msgid "The Django admin system is tightly coupled to the Django ``User`` object described at the beginning of this document. For now, the best way to deal with this is to create a Django ``User`` object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your ``authenticate`` method can do it the first time a user logs in."
msgstr ""

#: ../../topics/auth.txt:1826
# f1edf0ae3ad84066ac1110d2897f4d6a
msgid "Here's an example backend that authenticates against a username and password variable defined in your ``settings.py`` file and creates a Django ``User`` object the first time a user authenticates::"
msgstr ""

#: ../../topics/auth.txt:1869
# c5b2e7a4ffa74016a70e6e3f5c61d851
msgid "Handling authorization in custom backends"
msgstr ""

#: ../../topics/auth.txt:1871
# ca422926b8b7458b8eaf2e3053cfe07d
msgid "Custom auth backends can provide their own permissions."
msgstr ""

#: ../../topics/auth.txt:1873
# 7f5f124f962e447c89fb7a4fe3b70049
msgid "The user model will delegate permission lookup functions (:meth:`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models.User.has_perm()`, and :meth:`~django.contrib.auth.models.User.has_module_perms()`) to any authentication backend that implements these functions."
msgstr ""

#: ../../topics/auth.txt:1880
# 7d7c4c15fdc0419082e3701c4b007e6b
msgid "The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants."
msgstr ""

#: ../../topics/auth.txt:1884
# 25d635a6a04a41c187ef03cd58574d15
msgid "The simple backend above could implement permissions for the magic admin fairly simply::"
msgstr ""

#: ../../topics/auth.txt:1897
# 5137887d1ae3442b9de770ff673a226a
msgid "This gives full permissions to the user granted access in the above example. Notice that the backend auth functions all take the user object as an argument, and they also accept the same arguments given to the associated :class:`django.contrib.auth.models.User` functions."
msgstr ""

#: ../../topics/auth.txt:1902
# 5a583ea3f3e6491b99085d6ea103ec45
msgid "A full authorization implementation can be found in `django/contrib/auth/backends.py`_, which is the default backend and queries the ``auth_permission`` table most of the time."
msgstr ""

#: ../../topics/auth.txt:1911
# dfdb2980dc664037bf75e7d8fc897938
msgid "Authorization for anonymous users"
msgstr ""

#: ../../topics/auth.txt:1915
# a15a46e2690d4395b0f097fa399d40f1
msgid "An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most Web sites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc."
msgstr ""

#: ../../topics/auth.txt:1921
# 8bd5bce5f2394530a2c23fcd0b29a8a0
msgid "Django's permission framework does not have a place to store permissions for anonymous users. However, it has a foundation that allows custom authentication backends to specify authorization for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access."
msgstr ""

#: ../../topics/auth.txt:1930
# 6c78647ddadb45e29d3aef3c73988938
msgid "Authorization for inactive users"
msgstr ""

#: ../../topics/auth.txt:1934
# 592babf5704b4102b51e0297c9577cb2
msgid "An inactive user is a one that is authenticated but has its attribute ``is_active`` set to ``False``. However this does not mean they are not authorized to do anything. For example they are allowed to activate their account."
msgstr ""

#: ../../topics/auth.txt:1939
# 8d94c2ebfaf9450f85c760559f8d8e66
msgid "The support for anonymous users in the permission system allows for anonymous users to have permissions to do something while inactive authenticated users do not."
msgstr ""

#: ../../topics/auth.txt:1943
# ca12b78b832843d7a61cc5f2b9e7db29
msgid "To enable this on your own backend, you must set the class attribute ``supports_inactive_user`` to ``True``."
msgstr ""

#: ../../topics/auth.txt:1946
# e1ac60c2bebf4eafb9caf94f9d96faf6
msgid "A nonexisting ``supports_inactive_user`` attribute will raise a ``PendingDeprecationWarning`` if used in Django 1.3. In Django 1.4, this warning will be updated to a ``DeprecationWarning`` which will be displayed loudly. Additionally ``supports_inactive_user`` will be set to ``False``. Django 1.5 will assume that every backend supports inactive users being passed to the authorization methods."
msgstr ""

#: ../../topics/auth.txt:1955
# 9f41ead4f60c4890bb0ee9b7120b36aa
msgid "Handling object permissions"
msgstr ""

#: ../../topics/auth.txt:1957
# 5ded31cff8f6425cb093bfdd1aa6de99
msgid "Django's permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return ``False`` or an empty list (depending on the check performed)."
msgstr ""

#: ../../topics/cache.txt:3
# 5e9c063402264fe79a09c53033bd3a3f
msgid "Django's cache framework"
msgstr ""

#: ../../topics/cache.txt:5
# 092dcaea80f048bd8c314bea721513d2
msgid "A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each time a user requests a page, the Web server makes all sorts of calculations -- from database queries to template rendering to business logic -- to create the page that your site's visitor sees. This is a lot more expensive, from a processing-overhead perspective, than your standard read-a-file-off-the-filesystem server arrangement."
msgstr ""

#: ../../topics/cache.txt:12
# a710f00204a24f0d969467db84f7e669
msgid "For most Web applications, this overhead isn't a big deal. Most Web applications aren't washingtonpost.com or slashdot.org; they're simply small- to medium-sized sites with so-so traffic. But for medium- to high-traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

#: ../../topics/cache.txt:17
# 43e00fadbe30464a8d2cd6f55c6eb602
msgid "That's where caching comes in."
msgstr ""

#: ../../topics/cache.txt:19
# 5dd66293236e441ca1b01d058059a73e
msgid "To cache something is to save the result of an expensive calculation so that you don't have to perform the calculation next time. Here's some pseudocode explaining how this would work for a dynamically generated Web page::"
msgstr ""

#: ../../topics/cache.txt:31
# f3577a6c56e0472cb8800cc5557817f8
msgid "Django comes with a robust cache system that lets you save dynamic pages so they don't have to be calculated for each request. For convenience, Django offers different levels of cache granularity: You can cache the output of specific views, you can cache only the pieces that are difficult to produce, or you can cache your entire site."
msgstr ""

#: ../../topics/cache.txt:37
# 383fe7ed6d6a44cfbb5a65a2512edc5b
msgid "Django also works well with \"upstream\" caches, such as `Squid <http://www.squid-cache.org>`_ and browser-based caches. These are the types of caches that you don't directly control but to which you can provide hints (via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""

#: ../../topics/cache.txt:43
# 14566e78fed34ea080053284a08aa56b
msgid "Setting up the cache"
msgstr ""

#: ../../topics/cache.txt:45
# e51a89d35a884829bdf3856a4cc65f6b
msgid "The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live -- whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache's performance; yes, some cache types are faster than others."
msgstr ""

#: ../../topics/cache.txt:50
# 0eb614e8419d4295aacf21c5cb95651f
msgid "Your cache preference goes in the :setting:`CACHES` setting in your settings file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

#: ../../topics/cache.txt:64
# 5a54d6e7c99a4cd89a3de3fcaab2a0dc
msgid "Memcached"
msgstr ""

#: ../../topics/cache.txt:66
# e1645019db3d47f091c240c9e08a7fb5
msgid "By far the fastest, most efficient type of cache available to Django, Memcached__ is an entirely memory-based cache framework originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive.  It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance."
msgstr ""

#: ../../topics/cache.txt:74
# 22b42971334f4748a42d174f169ed523
msgid "Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting arbitrary data in the cache.  All data is stored directly in memory, so there's no overhead of database or filesystem usage."
msgstr ""

#: ../../topics/cache.txt:79
# 8f1e866f88a34818b385f406a0f2836c
msgid "After installing Memcached itself, you'll need to install a memcached binding. There are several python memcached bindings available; the two most common are `python-memcached`_ and `pylibmc`_."
msgstr ""

#: ../../topics/cache.txt:95
# 228e7b48308342e6ba676728c4a29bd8
msgid "To use Memcached with Django:"
msgstr ""

#: ../../topics/cache.txt:97
# 9447cad65d1b4e7389d5b5fe7ac08c34
msgid "Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.memcached.MemcachedCache`` or ``django.core.cache.backends.memcached.PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

#: ../../topics/cache.txt:102
# 419192f63b5f4f72800ce4c8eb17b281
msgid "Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where ``ip`` is the IP address of the Memcached daemon and ``port`` is the port on which Memcached is running, or to a ``unix:path`` value, where ``path`` is the path to a Memcached Unix socket file."
msgstr ""

#: ../../topics/cache.txt:107
# 9dedcee88dd1435cb96abe4f59e5b02c
msgid "In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the ``python-memcached`` binding::"
msgstr ""

#: ../../topics/cache.txt:117
# f263fb7c5310497b8ecca06c1ccb7e35
msgid "In this example, Memcached is available through a local Unix socket file :file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

#: ../../topics/cache.txt:127
# 693501a01a2c45118655fc0f3114d82f
msgid "One excellent feature of Memcached is its ability to share cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a *single* cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in :setting:`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""

#: ../../topics/cache.txt:134
# b3067974ec894485852892e3c6f1fe38
msgid "In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

#: ../../topics/cache.txt:147
# 4127e0830bd34e20ad6b5f359939c870
msgid "In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213)::"
msgstr ""

#: ../../topics/cache.txt:162
# 6f66af7c40124921b9ca7bc9c7a5f99d
msgid "A final point about Memcached is that memory-based caching has one disadvantage: Because the cached data is stored in memory, the data will be lost if your server crashes. Clearly, memory isn't intended for permanent data storage, so don't rely on memory-based caching as your only data storage. Without a doubt, *none* of the Django caching backends should be used for permanent storage -- they're all intended to be solutions for caching, not storage -- but we point this out here because memory-based caching is particularly temporary."
msgstr ""

#: ../../topics/cache.txt:172
# ea75f1a58e8d44d8907f14dd20d4a0f6
msgid "Database caching"
msgstr ""

#: ../../topics/cache.txt:174
# f6ffd4a2e1d34c5f9492695d8a8a1291
msgid "To use a database table as your cache backend, first create a cache table in your database by running this command::"
msgstr ""

#: ../../topics/cache.txt:179
# 274ea0aa88f948f8affafd1ba5f9ed98
msgid "...where ``[cache_table_name]`` is the name of the database table to create. (This name can be whatever you want, as long as it's a valid table name that's not already being used in your database.) This command creates a single table in your database that is in the proper format that Django's database-cache system expects."
msgstr ""

#: ../../topics/cache.txt:185
# 7572522feb754a46869a2005bebd4c3d
msgid "Once you've created that database table, set your :setting:`BACKEND <CACHES-BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of the database table. In this example, the cache table's name is ``my_cache_table``::"
msgstr ""

#: ../../topics/cache.txt:199
# f260f17678f042369fd86910eb4ce10e
msgid "The database caching backend uses the same database as specified in your settings file. You can't use a different database backend for your cache table."
msgstr ""

#: ../../topics/cache.txt:202
# b074e368c2bf4823bb539805c369caf9
msgid "Database caching works best if you've got a fast, well-indexed database server."
msgstr ""

#: ../../topics/cache.txt:205
# e6d426a8ac934d42b4d1a250e8fe3f13
msgid "Database caching and multiple databases"
msgstr ""

#: ../../topics/cache.txt:207
# 1a9fd81f0a984f64b9a65d9977491323
msgid "If you use database caching with multiple databases, you'll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named ``CacheEntry``, in an application named ``django_cache``. This model won't appear in the models cache, but the model details can be used for routing purposes."
msgstr ""

#: ../../topics/cache.txt:214
# 087cc202d7494fc2ab6ba953ca6e632b
msgid "For example, the following router would direct all cache read operations to ``cache_slave``, and all write operations to ``cache_master``. The cache table will only be synchronized onto ``cache_master``::"
msgstr ""

#: ../../topics/cache.txt:240
# 366df747ee154932b870ca313c2bd498
msgid "If you don't specify routing directions for the database cache model, the cache backend will use the ``default`` database."
msgstr ""

#: ../../topics/cache.txt:243
# a9a9e3ec297d4c9087929f20034e4807
msgid "Of course, if you don't use the database cache backend, you don't need to worry about providing routing instructions for the database cache model."
msgstr ""

#: ../../topics/cache.txt:248
# a020657bba76437aa5c6b0e1416a8ff5
msgid "Filesystem caching"
msgstr ""

#: ../../topics/cache.txt:250
# fde14a3105164938a63bb4a1ea8ec987
msgid "To store cached items on a filesystem, use ``\"django.core.cache.backends.filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For example, to store cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""

#: ../../topics/cache.txt:263
# 53f558a5ed744ae68af301a14da5cfb4
msgid "If you're on Windows, put the drive letter at the beginning of the path, like this::"
msgstr ""

#: ../../topics/cache.txt:273
# 40114ffd862a4a49a29de1fe05f5e059
msgid "The directory path should be absolute -- that is, it should start at the root of your filesystem. It doesn't matter whether you put a slash at the end of the setting."
msgstr ""

#: ../../topics/cache.txt:277
# b547caeca56d452d834f2a9355f00b4c
msgid "Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user ``apache``, make sure the directory ``/var/tmp/django_cache`` exists and is readable and writable by the user ``apache``."
msgstr ""

#: ../../topics/cache.txt:283
# eb43d57e0a984fa990690b5762b8f887
msgid "Each cache value will be stored as a separate file whose contents are the cache data saved in a serialized (\"pickled\") format, using Python's ``pickle`` module. Each file's name is the cache key, escaped for safe filesystem use."
msgstr ""

#: ../../topics/cache.txt:288
# af38e67b41c445b4bdfefe0d086dd39f
msgid "Local-memory caching"
msgstr ""

#: ../../topics/cache.txt:290
# 9922ee2f61b04c649ce577a526c06523
msgid "If you want the speed advantages of in-memory caching but don't have the capability of running Memcached, consider the local-memory cache backend. This cache is multi-process and thread-safe. To use it, set :setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem.LocMemCache\"``. For example::"
msgstr ""

#: ../../topics/cache.txt:303
# cd839167937646398336abc5b3a5e6e5
msgid "The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify individual memory stores. If you only have one locmem cache, you can omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more that one local memory cache, you will need to assign a name to at least one of them in order to keep them separate."
msgstr ""

#: ../../topics/cache.txt:309
# 7446ce76dbb54d7d8d3feaf1c1dfa0a2
msgid "Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn't particularly memory-efficient, so it's probably not a good choice for production environments. It's nice for development."
msgstr ""

#: ../../topics/cache.txt:315
# ab735ebb4a8d442a9f8318bdb6300780
msgid "Dummy caching (for development)"
msgstr ""

#: ../../topics/cache.txt:317
# b5d707551eaf43e89c17d542516790d3
msgid "Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- it just implements the cache interface without doing anything."
msgstr ""

#: ../../topics/cache.txt:320
# 2517c5be630240729ba488fbb732ad4f
msgid "This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don't want to cache and don't want to have to change your code to special-case the latter. To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

#: ../../topics/cache.txt:332
# 93cd4f819dc14516a2c7dc642ea36f11
msgid "Using a custom cache backend"
msgstr ""

#: ../../topics/cache.txt:334
# 9373d39c59024761982c9e3a8ca1e301
msgid "While Django includes support for a number of cache backends out-of-the-box, sometimes you might want to use a customized cache backend. To use an external cache backend with Django, use the Python import path as the :setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like so::"
msgstr ""

#: ../../topics/cache.txt:345
# f707295dbcb74484a45d13370ff0a6b4
msgid "If you're building your own backend, you can use the standard cache backends as reference implementations. You'll find the code in the ``django/core/cache/backends/`` directory of the Django source."
msgstr ""

#: ../../topics/cache.txt:349
# 0fb2813873e54b3a96ee33da4369062c
msgid "Note: Without a really compelling reason, such as a host that doesn't support them, you should stick to the cache backends included with Django. They've been well-tested and are easy to use."
msgstr ""

#: ../../topics/cache.txt:354
# 6fc96de87e65493c9c581a80bc2e1b71
msgid "Cache arguments"
msgstr ""

#: ../../topics/cache.txt:356
# a747e98b5a1f4645a9ff083521179c4d
msgid "In addition to the defining the engine and name of the each cache backend, each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the :setting:`CACHES` setting. Valid arguments are as follows:"
msgstr ""

#: ../../topics/cache.txt:361
# 150497c9bab349de983a79f5b4cc27c5
msgid ":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use for the cache. This argument defaults to 300 seconds (5 minutes)."
msgstr ""

#: ../../topics/cache.txt:365
# cd6d84144ea44d0398fb3966bdf0d58b
msgid ":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to cache backend. The list options understood by each backend vary with each backend."
msgstr ""

#: ../../topics/cache.txt:369
# 7c918c12ca274c0b8c1383cb693f00a0
msgid "Cache backends that implement their own culling strategy (i.e., the ``locmem``, ``filesystem`` and ``database`` backends) will honor the following options:"
msgstr ""

#: ../../topics/cache.txt:373
# 183b10923be14784b10cb170eda93679
msgid "``MAX_ENTRIES``: the maximum number of entries allowed in the cache before old values are deleted. This argument defaults to ``300``."
msgstr ""

#: ../../topics/cache.txt:377
# e7fbe027d325474e9eff77da178efece
msgid "``CULL_FREQUENCY``: The fraction of entries that are culled when ``MAX_ENTRIES`` is reached. The actual ratio is ``1/CULL_FREQUENCY``, so set ``CULL_FREQUENCY``: to ``2`` to cull half of the entries when ``MAX_ENTRIES`` is reached."
msgstr ""

#: ../../topics/cache.txt:382
# 79e00e95c8ce4fc78aa3f5e7257f0101
msgid "A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be dumped when ``MAX_ENTRIES`` is reached. This makes culling *much* faster at the expense of more cache misses."
msgstr ""

#: ../../topics/cache.txt:387
# f4b358ebedee4fefb621ce8b77fcdc60
msgid "Cache backends backed by a third-party library will pass their options directly to the underlying cache library. As a result, the list of valid options depends on the library in use."
msgstr ""

#: ../../topics/cache.txt:391
# ca92f88d0d5c4e5bb8536a29d0514b39
msgid ":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be automatically included (prepended by default) to all cache keys used by the Django server."
msgstr ""

#: ../../topics/cache.txt:395
# 898efd8ae63e4c48b34a2ca148010f9f
msgid "See the :ref:`cache documentation <cache_key_prefixing>` for more information."
msgstr ""

#: ../../topics/cache.txt:398
# 7cd7916ddf6641b292cf929527414f78
msgid ":setting:`VERSION <CACHES-VERSION>`: The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../topics/cache.txt:401
# 7f3209943b584946b0ac1777f81cf14c
msgid "See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../topics/cache.txt:404
# 9589740d17bd4e75925ad51882320e9c
msgid ":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key."
msgstr ""

#: ../../topics/cache.txt:408
# 2ff87ac52b9b43628de5c80ce0d62b34
msgid "See the :ref:`cache documentation <cache_key_transformation>` for more information."
msgstr ""

#: ../../topics/cache.txt:411
# 5825ba1089494b2eae38be93e93e5d52
msgid "In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

#: ../../topics/cache.txt:425
# 0d263dc3f66e45079e091bc231570c3c
msgid "Invalid arguments are silently ignored, as are invalid values of known arguments."
msgstr ""

#: ../../topics/cache.txt:429
# bcf0075a49154bd0905560acb0b091e5
msgid "The per-site cache"
msgstr ""

#: ../../topics/cache.txt:431
# fa7fadc158a144248445c66a963ddb87
msgid "Once the cache is set up, the simplest way to use caching is to cache your entire site. You'll need to add ``'django.middleware.cache.UpdateCacheMiddleware'`` and ``'django.middleware.cache.FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, as in this example::"
msgstr ""

#: ../../topics/cache.txt:445
# 2098af32fc304372afdad90cb1acc589
msgid "No, that's not a typo: the \"update\" middleware must be first in the list, and the \"fetch\" middleware must be last. The details are a bit obscure, but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

#: ../../topics/cache.txt:449
# 6eb8ded603a3451abef05b36af30a057
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

#: ../../topics/cache.txt:451
# a2c3e691fe824e519d8b6fcd80752844
msgid ":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

#: ../../topics/cache.txt:452
# 2e5ef1d4d7ce43b0a38b2f7549cbc449
msgid ":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page should be cached."
msgstr ""

#: ../../topics/cache.txt:454
# c6b860c262ca40d8b0241dd73e3d5134
msgid ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across multiple sites using the same Django installation, set this to the name of the site, or some other string that is unique to this Django instance, to prevent key collisions. Use an empty string if you don't care."
msgstr ""

#: ../../topics/cache.txt:459
# 955391b98d7f4032a8a20ca1e16d35b6
msgid "The cache middleware caches GET and HEAD responses with status 200, where the request and response headers allow. Responses to requests for the same URL with different query parameters are considered to be unique pages and are cached separately. Optionally, if the :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous requests (i.e., not those made by a logged-in user) will be cached. This is a simple and effective way of disabling caching for any user-specific pages (including Django's admin interface). Note that if you use :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated ``AuthenticationMiddleware``. The cache middleware expects that a HEAD request is answered with the same response headers as the corresponding GET request; in which case it can return a cached GET response for HEAD request."
msgstr ""

#: ../../topics/cache.txt:472
# 23103bbe38c34cefb50e3303ed6e309b
msgid "Additionally, the cache middleware automatically sets a few headers in each :class:`~django.http.HttpResponse`:"
msgstr ""

#: ../../topics/cache.txt:475
# bb8563b8eb134d739f36754c2656c648
msgid "Sets the ``Last-Modified`` header to the current date/time when a fresh (uncached) version of the page is requested."
msgstr ""

#: ../../topics/cache.txt:478
# 1ff121bbba8142d4b57e2405e3135392
msgid "Sets the ``Expires`` header to the current date/time plus the defined :setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

#: ../../topics/cache.txt:481
# 10817564c9d84d0c8abffd9bd1093c5f
msgid "Sets the ``Cache-Control`` header to give a max age for the page -- again, from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

#: ../../topics/cache.txt:484
# ba4befbd0be641b78540c09fcd9a1b49
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

#: ../../topics/cache.txt:486
# bfd55187c0944d95a951ac8ce7387917
msgid "If a view sets its own cache expiry time (i.e. it has a ``max-age`` section in its ``Cache-Control`` header) then the page will be cached until the expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the decorators in ``django.views.decorators.cache`` you can easily set a view's expiry time (using the ``cache_control`` decorator) or disable caching for a view (using the ``never_cache`` decorator). See the `using other headers`__ section for more on these decorators."
msgstr ""

#: ../../topics/cache.txt:498
# 37627726885e486a898c1e535a26a801
msgid "If :setting:`USE_I18N` is set to ``True`` then the generated cache key will include the name of the active :term:`language<language code>` -- see also :ref:`how-django-discovers-language-preference`). This allows you to easily cache multilingual sites without having to create the cache key yourself."
msgstr ""

#: ../../topics/cache.txt:505
# 8dacd44b4f49435d9d340304f6ca9be6
msgid "Cache keys also include the active :term:`language <language code>` when :setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone <default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

#: ../../topics/cache.txt:512
# 0e22c5f7540e406c99d24d327cca0cd1
msgid "The per-view cache"
msgstr ""

#: ../../topics/cache.txt:516
# 4d65e88ff16f4e74a7064b393fed18bc
msgid "A more granular way to use the caching framework is by caching the output of individual views. ``django.views.decorators.cache`` defines a ``cache_page`` decorator that will automatically cache the view's response for you. It's easy to use::"
msgstr ""

#: ../../topics/cache.txt:527
# 0f2352fb7e124895b21d94771616f33d
msgid "``cache_page`` takes a single argument: the cache timeout, in seconds. In the above example, the result of the ``my_view()`` view will be cached for 15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes multiplied by 60 seconds per minute.)"
msgstr ""

#: ../../topics/cache.txt:533
# 2e45ec5a83db44eab7bd1e293be4611e
msgid "The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

#: ../../topics/cache.txt:541
# 18a6144bd2d84abdbd57691180245a89
msgid "then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as you may expect. But once a particular URL (e.g., ``/foo/23/``) has been requested, subsequent requests to that URL will use the cache."
msgstr ""

#: ../../topics/cache.txt:545
# f8b8a578861d48aea1763978a19f6bf3
msgid "``cache_page`` can also take an optional keyword argument, ``cache``, which directs the decorator to use a specific cache (from your :setting:`CACHES` setting) when caching view results. By default, the ``default`` cache will be used, but you can specify any cache you want::"
msgstr ""

#: ../../topics/cache.txt:555
# 5522f1bbe7b541038b506c16c4871d2f
msgid "You can also override the cache prefix on a per-view basis. ``cache_page`` takes an optional keyword argument, ``key_prefix``, which works in the same way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the middleware.  It can be used like this::"
msgstr ""

#: ../../topics/cache.txt:564
# 2509f17cf3704a82b4fc0833b634e6f5
msgid "The two settings can also be combined. If you specify a ``cache`` *and* a ``key_prefix``, you will get all the settings of the requested cache alias, but with the key_prefix overridden."
msgstr ""

#: ../../topics/cache.txt:569
# b3f35341b84c44ae812b56ffed54905e
msgid "Specifying per-view cache in the URLconf"
msgstr ""

#: ../../topics/cache.txt:571
# 1a42db64dccd4f9bac4292c74c6984b6
msgid "The examples in the previous section have hard-coded the fact that the view is cached, because ``cache_page`` alters the ``my_view`` function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves."
msgstr ""

#: ../../topics/cache.txt:580
# 6946a123e99d4732b96bc55746c8c4b1
msgid "Doing so is easy: simply wrap the view function with ``cache_page`` when you refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

#: ../../topics/cache.txt:587
# 37aff55fe71a4aa8a463312c9ddcb5c9
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

#: ../../topics/cache.txt:598
# a042675fd73e48318a212217312c588e
msgid "Template fragment caching"
msgstr ""

#: ../../topics/cache.txt:600
# e6e2af01f33d4fb2b8f1486681ac88c1
msgid "If you're after even more control, you can also cache template fragments using the ``cache`` template tag. To give your template access to this tag, put ``{% load cache %}`` near the top of your template."
msgstr ""

#: ../../topics/cache.txt:604
# c703478187064235bedeffa0bf00facf
msgid "The ``{% cache %}`` template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. For example:"
msgstr ""

#: ../../topics/cache.txt:615
# d393d8f4397f45c78a10370cc64d76c2
msgid "Sometimes you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment. For example, you might want a separate cached copy of the sidebar used in the previous example for every user of your site. Do this by passing additional arguments to the ``{% cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

#: ../../topics/cache.txt:628
# e4e5f924e3e34ea0a1eff304d006e749
msgid "It's perfectly fine to specify more than one argument to identify the fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

#: ../../topics/cache.txt:631
# 0e18f04d1db547ba88b491d645f3f945
msgid "If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` template tag you could use one of the :ref:`translation-specific variables<template-translation-vars>` available in templates to achieve the same result:"
msgstr ""

#: ../../topics/cache.txt:648
# e44b280820434968bf301d34f50d8814
msgid "The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable ``my_timeout`` is set to the value ``600``, then the following two examples are equivalent:"
msgstr ""

#: ../../topics/cache.txt:658
# bd503c8e483a47b8a2dfc29f2c9a69c0
msgid "This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and just reuse that value."
msgstr ""

#: ../../topics/cache.txt:662
# 94631e4670d4479aabe3a0801355f670
msgid "The low-level cache API"
msgstr ""

#: ../../topics/cache.txt:666
# be0b39c93ffa4b4598d303827b707291
msgid "Sometimes, caching an entire rendered page doesn't gain you very much and is, in fact, inconvenient overkill."
msgstr ""

#: ../../topics/cache.txt:669
# 1c611e63821547edab7ce846a38872e9
msgid "Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn't want to cache the entire result (since some of the data changes often), but you'd still want to cache the results that rarely change."
msgstr ""

#: ../../topics/cache.txt:676
# dead3873cd054889928b50d8a047b31a
msgid "For cases like this, Django exposes a simple, low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)"
msgstr ""

#: ../../topics/cache.txt:683
# 9e36ee8fd684442a9a57f8ff53c33eeb
msgid "The cache module, ``django.core.cache``, has a ``cache`` object that's automatically created from the ``'default'`` entry in the :setting:`CACHES` setting::"
msgstr ""

#: ../../topics/cache.txt:689
# 15e8b56987474ebe917b213cf2a67c81
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

#: ../../topics/cache.txt:695
# a73a9ae03131454ca154f8beb8ad7625
msgid "The ``timeout`` argument is optional and defaults to the ``timeout`` argument of the ``'default'`` backend in :setting:`CACHES` setting (explained above). It's the number of seconds the value should be stored in the cache."
msgstr ""

#: ../../topics/cache.txt:700
# 276a8eedb4a447c0b21435705e5008a7
msgid "If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

#: ../../topics/cache.txt:707
# 77d17edd47134d51a39e3fc45b5247bc
msgid "We advise against storing the literal value ``None`` in the cache, because you won't be able to distinguish between your stored ``None`` value and a cache miss signified by a return value of ``None``."
msgstr ""

#: ../../topics/cache.txt:711
# 145e8f90e7ec47a284d468b23c55324c
msgid "``cache.get()`` can take a ``default`` argument. This specifies which value to return if the object doesn't exist in the cache::"
msgstr ""

#: ../../topics/cache.txt:717
# 06307d5934ce45efb87d9bf8a10fb602
msgid "To add a key only if it doesn't already exist, use the ``add()`` method. It takes the same parameters as ``set()``, but it will not attempt to update the cache if the key specified is already present::"
msgstr ""

#: ../../topics/cache.txt:726
# 8f7910a929d14d0aa75ae364c91b6560
msgid "If you need to know whether ``add()`` stored a value in the cache, you can check the return value. It will return ``True`` if the value was stored, ``False`` otherwise."
msgstr ""

#: ../../topics/cache.txt:730
# 1cea179a386d4598bce398dcbc5e9f0c
msgid "There's also a ``get_many()`` interface that only hits the cache once. ``get_many()`` returns a dictionary with all the keys you asked for that actually exist in the cache (and haven't expired)::"
msgstr ""

#: ../../topics/cache.txt:742
# bdd016f6f51646fd9e49406710369329
msgid "To set multiple values more efficiently, use ``set_many()`` to pass a dictionary of key-value pairs::"
msgstr ""

#: ../../topics/cache.txt:749
# cb2e48535e8d442199b7b5b7246d96d5
msgid "Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

#: ../../topics/cache.txt:751
# d3403cad16894576b36f290e33ac7a48
msgid "You can delete keys explicitly with ``delete()``. This is an easy way of clearing the cache for a particular object::"
msgstr ""

#: ../../topics/cache.txt:758
# eaf8ff8745024a4aaad08fb906fdb490
msgid "If you want to clear a bunch of keys at once, ``delete_many()`` can take a list of keys to be cleared::"
msgstr ""

#: ../../topics/cache.txt:765
# 8defa72dbcb1467d8621331fa55cd0ab
msgid "Finally, if you want to delete all the keys in the cache, use ``cache.clear()``.  Be careful with this; ``clear()`` will remove *everything* from the cache, not just the keys set by your application. ::"
msgstr ""

#: ../../topics/cache.txt:771
# d35b9d3731e944948b9f20760ee9e4f1
msgid "You can also increment or decrement a key that already exists using the ``incr()`` or ``decr()`` methods, respectively. By default, the existing cache value will incremented or decremented by 1. Other increment/decrement values can be specified by providing an argument to the increment/decrement call. A ValueError will be raised if you attempt to increment or decrement a nonexistent cache key.::"
msgstr ""

#: ../../topics/cache.txt:790
# 2632ec6fcf7d4f00a69020eb1d476e0d
msgid "``incr()``/``decr()`` methods are not guaranteed to be atomic. On those backends that support atomic increment/decrement (most notably, the memcached backend), increment and decrement operations will be atomic. However, if the backend doesn't natively provide an increment/decrement operation, it will be implemented using a two-step retrieve/update."
msgstr ""

#: ../../topics/cache.txt:799
# 3b16f5632ec843bd8be4ec4ac7df0f53
msgid "Cache key prefixing"
msgstr ""

#: ../../topics/cache.txt:803
# 3b133d1394ac484183db5454e8dc5828
msgid "If you are sharing a cache instance between servers, or between your production and development environments, it's possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems."
msgstr ""

#: ../../topics/cache.txt:809
# aaae9c33094544c79ba8af0fb7a8f5c0
msgid "To prevent this, Django provides the ability to prefix all cache keys used by a server. When a particular cache key is saved or retrieved, Django will automatically prefix the cache key with the value of the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

#: ../../topics/cache.txt:814
# 949db438ee9b4e67b88694615cfc3024
msgid "By ensuring each Django instance has a different :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in cache values."
msgstr ""

#: ../../topics/cache.txt:821
# ab9a4a7515374360828d8dd379be6c1b
msgid "Cache versioning"
msgstr ""

#: ../../topics/cache.txt:825
# a5c32b162981416ab01292e021e1145f
msgid "When you change running code that uses cached values, you may need to purge any existing cached values. The easiest way to do this is to flush the entire cache, but this can lead to the loss of cache values that are still valid and useful."
msgstr ""

#: ../../topics/cache.txt:830
# d989e4178f0f4137b5e8c5f4a0f935b6
msgid "Django provides a better way to target individual cache values. Django's cache framework has a system-wide version identifier, specified using the :setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key."
msgstr ""

#: ../../topics/cache.txt:836
# 7636c10349b5466aae17efcc45352872
msgid "By default, any key request will automatically include the site default cache key version. However, the primitive cache functions all include a ``version`` argument, so you can specify a particular cache key version to set or get. For example::"
msgstr ""

#: ../../topics/cache.txt:850
# 9fbf2f01d4754eb6bed153375c88e91e
msgid "The version of a specific key can be incremented and decremented using the :func:`incr_version()` and :func:`decr_version()` methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example::"
msgstr ""

#: ../../topics/cache.txt:870
# c7a81b29ad5d4b78894e8cf49c0477b2
msgid "Cache key transformation"
msgstr ""

#: ../../topics/cache.txt:874
# 56c5eba29e8f4d029781d79c0729dd4a
msgid "As described in the previous two sections, the cache key provided by a user is not used verbatim -- it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string::"
msgstr ""

#: ../../topics/cache.txt:882
# 0b0567f15cfa4a6883e43de97ef0b256
msgid "If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function."
msgstr ""

#: ../../topics/cache.txt:886
# 458e4c510b074dfc96838c72cfd562e3
msgid "The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a dotted-path to a function matching the prototype of :func:`make_key()` above. If provided, this custom key function will be used instead of the default key combining function."
msgstr ""

#: ../../topics/cache.txt:892
# 175097cf26d848f4bfcf09422373df60
msgid "Cache key warnings"
msgstr ""

#: ../../topics/cache.txt:896
# 304ddf6028b443a9acfa00380769f512
msgid "Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (``django.core.cache.backends.base.CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

#: ../../topics/cache.txt:903
# 00674cb60e7d44a2a4fd89aea2ce82ff
msgid "If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence ``CacheKeyWarning`` with this code in the ``management`` module of one of your :setting:`INSTALLED_APPS`::"
msgstr ""

#: ../../topics/cache.txt:915
# 301ff1c849144fda915088d0929d5481
msgid "If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the ``validate_key`` method, and follow the instructions for `using a custom cache backend`_. For instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

#: ../../topics/cache.txt:927
# dfa7f769466741cbaf4296d80c054482
msgid "...and use the dotted Python path to this class in the :setting:`BACKEND <CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

#: ../../topics/cache.txt:931
# a51b5b939cfd4a81a32be74072182743
msgid "Upstream caches"
msgstr ""

#: ../../topics/cache.txt:933
# 26f0cf7b404040dcb851f20ad1a30d27
msgid "So far, this document has focused on caching your *own* data. But another type of caching is relevant to Web development, too: caching performed by \"upstream\" caches. These are systems that cache pages for users even before the request reaches your Web site."
msgstr ""

#: ../../topics/cache.txt:938
# 122a3442810e48458a18d59f53a793fe
msgid "Here are a few examples of upstream caches:"
msgstr ""

#: ../../topics/cache.txt:940
# 6643512abdcd4f4bbe04718790fdd2c8
msgid "Your ISP may cache certain pages, so if you requested a page from http://example.com/, your ISP would send you the page without having to access example.com directly. The maintainers of example.com have no knowledge of this caching; the ISP sits between example.com and your Web browser, handling all of the caching transparently."
msgstr ""

#: ../../topics/cache.txt:946
# 60e0ba6460c9436398cb080431d08266
msgid "Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy Cache (http://www.squid-cache.org/), that caches pages for performance. In this case, each request first would be handled by the proxy, and it would be passed to your application only if needed."
msgstr ""

#: ../../topics/cache.txt:951
# d9effb96e8fd4926809d564f8c15a3c3
msgid "Your Web browser caches pages, too. If a Web page sends out the appropriate headers, your browser will use the local cached copy for subsequent requests to that page, without even contacting the Web page again to see whether it has changed."
msgstr ""

#: ../../topics/cache.txt:956
# aaf052cb6c814fb0baa7b15759bb388d
msgid "Upstream caching is a nice efficiency boost, but there's a danger to it: Many Web pages' contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages."
msgstr ""

#: ../../topics/cache.txt:961
# b73e20dc0c3d43df97dae8f964addd81
msgid "For example, say you operate a Web email system, and the contents of the \"inbox\" page obviously depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have his user-specific inbox page cached for subsequent visitors to the site. That's not cool."
msgstr ""

#: ../../topics/cache.txt:967
# 66d5d08d7eee48c6806b98cb8f54c6e9
msgid "Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct upstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We'll look at some of these headers in the sections that follow."
msgstr ""

#: ../../topics/cache.txt:975
# 9b865356da09489f9bc9f55fbcab477a
msgid "Using Vary headers"
msgstr ""

#: ../../topics/cache.txt:977
# b983259d652642809919c3992253fa65
msgid "The ``Vary`` header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a Web page depend on a user's language preference, the page is said to \"vary on language.\""
msgstr ""

#: ../../topics/cache.txt:986
# b296c417f92447a1b4741ad218fe2a36
msgid "By default, Django's cache system creates its cache keys using the requested path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means every request to that URL will use the same cached version, regardless of user-agent differences such as cookies or language preferences. However, if this page produces different content based on some difference in request headers -- such as a cookie, or a language, or a user-agent -- you'll need to use the ``Vary`` header to tell caching mechanisms that the page output depends on those things."
msgstr ""

#: ../../topics/cache.txt:994
# 80ca35b7b5824e5b94b7e11e4aedf8ec
msgid "To do this in Django, use the convenient ``vary_on_headers`` view decorator, like so::"
msgstr ""

#: ../../topics/cache.txt:1003
# bc5884a9c8c74d56bf59bfde519e4bbc
msgid "In this case, a caching mechanism (such as Django's own cache middleware) will cache a separate version of the page for each unique user-agent."
msgstr ""

#: ../../topics/cache.txt:1006
# 6a945d872799460bbca97b4757fb0cb6
msgid "The advantage to using the ``vary_on_headers`` decorator rather than manually setting the ``Vary`` header (using something like ``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the ``Vary`` header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there."
msgstr ""

#: ../../topics/cache.txt:1012
# c18fa21ef1304f33ba2a6b6011a6eac7
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

#: ../../topics/cache.txt:1018
# 7b4a0d7ab9714bc4b53a09ac46a84d9f
msgid "This tells upstream caches to vary on *both*, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` will be considered different from a request with the user-agent ``Mozilla`` and the cookie value ``foo=ham``."
msgstr ""

#: ../../topics/cache.txt:1024
# 189be14f54994ec1b8312d82317842ae
msgid "Because varying on cookie is so common, there's a ``vary_on_cookie`` decorator. These two views are equivalent::"
msgstr ""

#: ../../topics/cache.txt:1035
# ebe72cab86254678b01a3f2b06c08448
msgid "The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

#: ../../topics/cache.txt:1038
# bd6c525df4e941e99e8e30f3e4b6f65b
msgid "You can also use a helper function, ``django.utils.cache.patch_vary_headers``, directly. This function sets, or adds to, the ``Vary header``. For example::"
msgstr ""

#: ../../topics/cache.txt:1049
# 62bdd36b2b1949f8aa48f167802b0c73
msgid "``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance as its first argument and a list/tuple of case-insensitive header names as its second argument."
msgstr ""

#: ../../topics/cache.txt:1053
# b2bfb125a2fb4b70a4a53f4c3335f7c9
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

#: ../../topics/cache.txt:1058
# 27a98a2edfcf49a7b7afe0457cecea7f
msgid "Controlling cache: Using other headers"
msgstr ""

#: ../../topics/cache.txt:1060
# b4e894ce426345feb2fab4aac550c7e3
msgid "Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches."
msgstr ""

#: ../../topics/cache.txt:1063
# 1e0dc00429d049c29c0a50f91b61d61a
msgid "A user usually faces two kinds of caches: his or her own browser cache (a private cache) and his or her provider's cache (a public cache). A public cache is used by multiple users and controlled by someone else. This poses problems with sensitive data--you don't want, say, your bank account number stored in a public cache. So Web applications need a way to tell caches which data is private and which is public."
msgstr ""

#: ../../topics/cache.txt:1070
# 233d3db493244f47ae2cea06b6e1f07b
msgid "The solution is to indicate a page's cache should be \"private.\" To do this in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

#: ../../topics/cache.txt:1079
# cf9e94190785445a99bc21749e3db98f
msgid "This decorator takes care of sending out the appropriate HTTP header behind the scenes."
msgstr ""

#: ../../topics/cache.txt:1082
# 7b2af24fe1e64129b910b5f3d3b12317
msgid "Note that the cache control settings \"private\" and \"public\" are mutually exclusive. The decorator ensures that the \"public\" directive is removed if \"private\" should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses ``patch_cache_control``, the manual way to modify the cache control header (it is internally called by the ``cache_control`` decorator)::"
msgstr ""

#: ../../topics/cache.txt:1104
# 3fe9bc77b11849ffa3eddd5cc95f7631
msgid "There are a few other ways to control cache parameters. For example, HTTP allows applications to do the following:"
msgstr ""

#: ../../topics/cache.txt:1107
# b3d1d0bd286f4ab484a4d98fd5594282
msgid "Define the maximum time a page should be cached."
msgstr ""

#: ../../topics/cache.txt:1109
# 4d08d6de80fb4e588052da7ed80155ef
msgid "Specify whether a cache should always check for newer versions, only delivering the cached content when there are no changes. (Some caches might deliver cached content even if the server page changed, simply because the cache copy isn't yet expired.)"
msgstr ""

#: ../../topics/cache.txt:1114
# b30ecfd9af2d4f68bd1e91ff0d37f146
msgid "In Django, use the ``cache_control`` view decorator to specify these cache parameters. In this example, ``cache_control`` tells caches to revalidate the cache on every access and to store cached versions for, at most, 3,600 seconds::"
msgstr ""

#: ../../topics/cache.txt:1124
# 41bb72c2fb924558a7b1c2ad4e0c66a0
msgid "Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. Here's a full list:"
msgstr ""

#: ../../topics/cache.txt:1127
# 6a583dd000834731a42a63ae01f0f22b
msgid "``public=True``"
msgstr ""

#: ../../topics/cache.txt:1128
# ffabec4393b144c9b284a172a3c35828
msgid "``private=True``"
msgstr ""

#: ../../topics/cache.txt:1129
# ea02ff5d6e59472e9b808c062fcc5008
msgid "``no_cache=True``"
msgstr ""

#: ../../topics/cache.txt:1130
# a1d3f8b7806f42a8987c702d5bfb9433
msgid "``no_transform=True``"
msgstr ""

#: ../../topics/cache.txt:1131
# b0884272e50f4dc4853ffe7bffb4ae6e
msgid "``must_revalidate=True``"
msgstr ""

#: ../../topics/cache.txt:1132
# c486cf9a4b9e4856868a3a042ab269b1
msgid "``proxy_revalidate=True``"
msgstr ""

#: ../../topics/cache.txt:1133
# 748057986fbb4602b4719b2778d5a06f
msgid "``max_age=num_seconds``"
msgstr ""

#: ../../topics/cache.txt:1134
# cfa50046afea4ca680b72d3b29040aff
msgid "``s_maxage=num_seconds``"
msgstr ""

#: ../../topics/cache.txt:1136
# 451615ffccc44fe5ac775c5a11e68ad5
msgid "For explanation of Cache-Control HTTP directives, see the `Cache-Control spec`_."
msgstr ""

#: ../../topics/cache.txt:1138
# 43cd1403bf794f128102a428c2c5f3bc
msgid "(Note that the caching middleware already sets the cache header's max-age with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you use a custom ``max_age`` in a ``cache_control`` decorator, the decorator will take precedence, and the header values will be merged correctly.)"
msgstr ""

#: ../../topics/cache.txt:1143
# cdba07b3ce794ded88139518f78ea0f2
msgid "If you want to use headers to disable caching altogether, ``django.views.decorators.cache.never_cache`` is a view decorator that adds headers to ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

#: ../../topics/cache.txt:1157
# 2e50f634a62f4c809dd122422c651e1c
msgid "Other optimizations"
msgstr ""

#: ../../topics/cache.txt:1159
# 490170675bbd40faa2a7dd778a1de882
msgid "Django comes with a few other pieces of middleware that can help optimize your site's performance:"
msgstr ""

#: ../../topics/cache.txt:1162
# 9a090874349840d2aac2cbcd423623e2
msgid "``django.middleware.http.ConditionalGetMiddleware`` adds support for modern browsers to conditionally GET responses based on the ``ETag`` and ``Last-Modified`` headers."
msgstr ""

#: ../../topics/cache.txt:1166
# 369183d337ff4a5baff6f297f8aae669
msgid ":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all modern browsers, saving bandwidth and transfer time."
msgstr ""

#: ../../topics/cache.txt:1170
# 3eac268098b24aa296e2232444d29713
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

#: ../../topics/cache.txt:1172
# 596b308c2b544af1a3361de720acf589
msgid "If you use caching middleware, it's important to put each half in the right place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""

#: ../../topics/cache.txt:1177
# ce7974cf84d740409c37f9ecfcb10b1c
msgid "``UpdateCacheMiddleware`` runs during the response phase, where middleware is run in reverse order, so an item at the top of the list runs *last* during the response phase. Thus, you need to make sure that ``UpdateCacheMiddleware`` appears *before* any other middleware that might add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

#: ../../topics/cache.txt:1183
# 45ebe6eb5ac44f4ea73f6b6131c1c1cc
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

#: ../../topics/cache.txt:1184
# 1c028445f6784f368fdec5bbab5b52c4
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

#: ../../topics/cache.txt:1185
# b34f3a7c07214c5b91f818da91cec47f
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

#: ../../topics/cache.txt:1187
# 9d75f24f21ef4ecebea27cf72048ee51
msgid "``FetchFromCacheMiddleware``, on the other hand, runs during the request phase, where middleware is applied first-to-last, so an item at the top of the list runs *first* during the request phase. The ``FetchFromCacheMiddleware`` also needs to run after other middleware updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* any item that does so."
msgstr ""

#: ../../topics/class-based-views.txt:3
# 85d26c6822eb4f8cb269b63e3e041551
msgid "Class-based generic views"
msgstr ""

#: ../../topics/class-based-views.txt:8
# df46b5ed602d4270833431f2100c8f78
msgid "Prior to Django 1.3, generic views were implemented as functions. The function-based implementation has been deprecated in favor of the class-based approach described here."
msgstr ""

#: ../../topics/class-based-views.txt:12
# 0c91338dc32b4b3d93efdecc85dd7089
msgid "For details on the previous generic views implementation, see the :doc:`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/generic-views>`."
msgstr ""

#: ../../topics/class-based-views.txt:16
#: ../../topics/generic-views.txt:15
# dd456aff63ed43089fa261d4ea1341a1
# d7958e1cbd8e4fb2b99691045f2f7d64
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but Web developers also experience this boredom at the view level."
msgstr ""

#: ../../topics/class-based-views.txt:21
#: ../../topics/generic-views.txt:20
# 5302f82524fb4fcc93abefc92db0b133
# 0c091282704b4b4f8816c06b8eb98244
msgid "Django's *generic views* were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code."
msgstr ""

#: ../../topics/class-based-views.txt:26
#: ../../topics/generic-views.txt:25
# 5d4e0ed8adc9454db8373459ed646faa
# daa8c2b9d09f4fbd90b8388b1fd0f050
msgid "We can recognize certain common tasks, like displaying a list of objects, and write code that displays a list of *any* object. Then the model in question can be passed as an extra argument to the URLconf."
msgstr ""

#: ../../topics/class-based-views.txt:30
#: ../../topics/generic-views.txt:29
# 74095fa094b54f28b3b022d38081fdf9
# a573a15fcd03448dbc6b7f3737412219
msgid "Django ships with generic views to do the following:"
msgstr ""

#: ../../topics/class-based-views.txt:32
#: ../../topics/generic-views.txt:31
# 76b03609a3b8423ea643c6162276bc87
# f5bfe1f6f5914244b638ca030a16e961
msgid "Perform common \"simple\" tasks: redirect to a different page and render a given template."
msgstr ""

#: ../../topics/class-based-views.txt:35
# 7d1d70e7dc8c477a989a808e41a8bbfc
msgid "Display list and detail pages for a single object. If we were creating an application to manage conferences then a ``TalkListView`` and a ``RegisteredUserListView`` would be examples of list views. A single talk page is an example of what we call a \"detail\" view."
msgstr ""

#: ../../topics/class-based-views.txt:40
# 545e869e9e1a4740a8a9bdba10821ebf
msgid "Present date-based objects in year/month/day archive pages, associated detail, and \"latest\" pages. `The Django Weblog <https://www.djangoproject.com/weblog/>`_'s year, month, and day archives are built with these, as would be a typical newspaper's archives."
msgstr ""

#: ../../topics/class-based-views.txt:46
#: ../../topics/generic-views.txt:45
# ea7977c8bcf54ce6809dbf1f00f1fe48
# ca82a2e8ef044219a345a23588fe3fa4
msgid "Allow users to create, update, and delete objects -- with or without authorization."
msgstr ""

#: ../../topics/class-based-views.txt:49
#: ../../topics/generic-views.txt:48
# a35db31742954d5093aae33b1e8d50ac
# 220af9d28e2a4d67b39db71fdffaadf0
msgid "Taken together, these views provide easy interfaces to perform the most common tasks developers encounter."
msgstr ""

#: ../../topics/class-based-views.txt:54
# 3ee950bfbeb2406595510382a7cdd847
msgid "Simple usage"
msgstr ""

#: ../../topics/class-based-views.txt:56
# 644fcb1e230d46f791c106cf6fb43de9
msgid "Class-based generic views (and any class-based views that inherit from the base classes Django provides) can be configured in two ways: subclassing, or passing in arguments directly in the URLconf."
msgstr ""

#: ../../topics/class-based-views.txt:60
# 5b33b4bf2c294dd9bd48fc5f57b45d3e
msgid "When you subclass a class-based view, you can override attributes (such as the ``template_name``) or methods (such as ``get_context_data``) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, ``about.html``. Django has a generic view to do this - :class:`~django.views.generic.base.TemplateView` - so we can just subclass it, and override the template name::"
msgstr ""

#: ../../topics/class-based-views.txt:73
# da266b2dd230497f97b84d695f3ebbe6
msgid "Then, we just need to add this new view into our URLconf. As the class-based views themselves are classes, we point the URL to the ``as_view`` class method instead, which is the entry point for class-based views::"
msgstr ""

#: ../../topics/class-based-views.txt:85
# 72b4ad810da44ba3bec85122c8cc5dc0
msgid "Alternatively, if you're only changing a few simple attributes on a class-based view, you can simply pass the new attributes into the ``as_view`` method call itself::"
msgstr ""

#: ../../topics/class-based-views.txt:96
# 3f62f07f55774e3487182b16a83fba73
msgid "A similar overriding pattern can be used for the ``url`` attribute on :class:`~django.views.generic.base.RedirectView`, another simple generic view."
msgstr ""

#: ../../topics/class-based-views.txt:102
#: ../../topics/generic-views.txt:128
# 0f7922ae5ed04a9787fa2b93810e7e5b
# d7abcc54fd254ec399866b963c6ca758
msgid "Generic views of objects"
msgstr ""

#: ../../topics/class-based-views.txt:104
# aa3672d87bf644cc948009722f9a819c
msgid ":class:`~django.views.generic.base.TemplateView` certainly is useful, but Django's generic views really shine when it comes to presenting views of your database content. Because it's such a common task, Django comes with a handful of built-in generic views that make generating list and detail views of objects incredibly easy."
msgstr ""

#: ../../topics/class-based-views.txt:110
#: ../../topics/generic-views.txt:135
# 7412848c637b469392812c05076e8a42
# c3f478b3dd7948a5a16404ac6ee878e2
msgid "Let's take a look at one of these generic views: the \"object list\" view. We'll be using these models::"
msgstr ""

#: ../../topics/class-based-views.txt:136
#: ../../topics/generic-views.txt:161
# aa429ada68094cbe99a575c6b9b7a044
# 9bb8ea3ad46a40f4a731154aabe25b70
msgid "To build a list page of all publishers, we'd use a URLconf along these lines::"
msgstr ""

#: ../../topics/class-based-views.txt:148
# 64aa692422c540dcadf2aacefb269eac
msgid "That's all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by including a ``template_name`` key in the arguments to as_view, but in the absence of an explicit template Django will infer one from the object's name. In this case, the inferred template will be ``\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of the app that defines the model, while the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../topics/class-based-views.txt:158
# 8b270feb087b4d52920b817c4ac9f8c5
msgid "Thus, when (for example) the :class:`django.template.loaders.app_directories.Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, the template location would be::"
msgstr ""

#: ../../topics/class-based-views.txt:166
#: ../../topics/generic-views.txt:186
# f0a7ed32bc4d4bca8b47f5334eb06cf1
# e50c4f43cf4b463788445350116c996f
msgid "This template will be rendered against a context containing a variable called ``object_list`` that contains all the publisher objects. A very simple template might look like the following::"
msgstr ""

#: ../../topics/class-based-views.txt:181
# f8606f5346154d2f9d5f3dc5d389e276
msgid "That's really all there is to it. All the cool features of generic views come from changing the \"info\" dictionary passed to the generic view. The :doc:`generic views reference</ref/class-based-views>` documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../topics/class-based-views.txt:189
#: ../../topics/generic-views.txt:208
# a10a8a0b36b14ae3b7ca217abccad1fb
# 9f8529135e154363bc8f63a2cc996b59
msgid "Extending generic views"
msgstr ""

#: ../../topics/class-based-views.txt:193
#: ../../topics/generic-views.txt:212
# f398aaaf7d4c472f8e9f715fc00fa17d
# 1f0fb5fc491d4a32afe5dcf4d4bec930
msgid "There's no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations."
msgstr ""

#: ../../topics/class-based-views.txt:199
# e76187bf15b243babe515a2d8d91a3cc
msgid "This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were just view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods."
msgstr ""

#: ../../topics/class-based-views.txt:207
#: ../../topics/generic-views.txt:223
# 04ff565b3a3b49feacce63ca5659d018
# 17ae4280f38b47aebaf7959eb1fe89db
msgid "Making \"friendly\" template contexts"
msgstr ""

#: ../../topics/class-based-views.txt:209
# 857341673c6c4c578c5b7e80c316b852
msgid "You might have noticed that our sample publisher list template stores all the publishers in a variable named ``object_list``. While this works just fine, it isn't all that \"friendly\" to template authors: they have to \"just know\" that they're dealing with publishers here."
msgstr ""

#: ../../topics/class-based-views.txt:214
# 2ce3465ae7ae4f26b0d0f5bbcb2b6281
msgid "Well, if you're dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the verbose name (or the plural verbose name, in the case of a list of objects) of the object being displayed. This is provided in addition to the default ``object_list`` entry, but contains exactly the same data."
msgstr ""

#: ../../topics/class-based-views.txt:221
# d8e5c3cba64449c6abec968c9da15991
msgid "If the verbose name (or plural verbose name) still isn't a good match, you can manually set the name of the context variable. The ``context_object_name`` attribute on a generic view specifies the context variable to use. In this example, we'll override it in the URLconf, since it's a simple change:"
msgstr ""

#: ../../topics/class-based-views.txt:236
# 437b14ae8c12463ea0b5b25388545bdc
msgid "Providing a useful ``context_object_name`` is always a good idea. Your coworkers who design templates will thank you."
msgstr ""

#: ../../topics/class-based-views.txt:241
#: ../../topics/generic-views.txt:249
# 2fe4749bb1b74c42af190043689da0b3
# 8002591dea444f10993cf3721bd67ad9
msgid "Adding extra context"
msgstr ""

#: ../../topics/class-based-views.txt:243
# 2237a2dc9ace4b4cb06ba04937165927
msgid "Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The :class:`~django.views.generic.detail.DetailView` generic view provides the publisher to the context, but it seems there's no way to get additional information in that template."
msgstr ""

#: ../../topics/class-based-views.txt:250
# c6390cc69f13485cbe0ea6426376dcca
msgid "However, there is; you can subclass :class:`~django.views.generic.detail.DetailView` and provide your own implementation of the ``get_context_data`` method. The default implementation of this that comes with :class:`~django.views.generic.detail.DetailView` simply adds in the object being displayed to the template, but you can override it to show more::"
msgstr ""

#: ../../topics/class-based-views.txt:275
#: ../../topics/generic-views.txt:322
# 9be71bee1f294e72b95210dc9fc982c3
# fa60af894fa44f3986973a2e4109215f
msgid "Viewing subsets of objects"
msgstr ""

#: ../../topics/class-based-views.txt:277
# 1c5bf1be308f47079e6f66eedc8ea1ab
msgid "Now let's take a closer look at the ``model`` argument we've been using all along. The ``model`` argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the ``model`` argument is not the only way to specify the objects that the view will operate upon -- you can also specify the list of objects using the ``queryset`` argument::"
msgstr ""

#: ../../topics/class-based-views.txt:293
# f6af3c3e7b834a6d97477f254ff52e85
msgid "Specifying ``model = Publisher`` is really just shorthand for saying ``queryset = Publisher.objects.all()``. However, by using ``queryset`` to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see :doc:`/topics/db/queries` for more information about :class:`QuerySet` objects, and see the :doc:`class-based views reference </ref/class-based-views>` for the complete details)."
msgstr ""

#: ../../topics/class-based-views.txt:301
# 8edf58d96e1a4714abfed8d884b55ecb
msgid "To pick a simple example, we might want to order a list of books by publication date, with the most recent first::"
msgstr ""

#: ../../topics/class-based-views.txt:316
# 737c348256e74bdbaaeeabeaa9d17aa8
msgid "That's a pretty simple example, but it illustrates the idea nicely. Of course, you'll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique (here, illustrated using subclassing rather than by passing arguments in the URLconf)::"
msgstr ""

#: ../../topics/class-based-views.txt:331
#: ../../topics/generic-views.txt:362
# a1e5f024cd5b49849551f2ecee99fd7d
# 88d980996fa54c1baf6e5be28d96f5f1
msgid "Notice that along with a filtered ``queryset``, we're also using a custom template name. If we didn't, the generic view would use the same template as the \"vanilla\" object list, which might not be what we want."
msgstr ""

#: ../../topics/class-based-views.txt:335
#: ../../topics/generic-views.txt:366
# b467efcfebfa4c20846fbcea41407d12
# b23b5c620bc94c2daab80be856f997a8
msgid "Also notice that this isn't a very elegant way of doing publisher-specific books. If we want to add another publisher page, we'd need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We'll deal with this problem in the next section."
msgstr ""

#: ../../topics/class-based-views.txt:342
# bb44a8ce5f274a12bcfef5922b083e89
msgid "If you get a 404 when requesting ``/books/acme/``, check to ensure you actually have a Publisher with the name 'ACME Publishing'.  Generic views have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-views reference</ref/class-based-views>` for more details."
msgstr ""

#: ../../topics/class-based-views.txt:349
# 7cbe709ea9aa45d0a9fa368a4b8e44e0
msgid "Dynamic filtering"
msgstr ""

#: ../../topics/class-based-views.txt:351
# be03b90ecd77474ab9d41baf0633d0dd
msgid "Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher's name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?"
msgstr ""

#: ../../topics/class-based-views.txt:356
# 1b2940c6e0c5475ca898e104dfa62757
msgid "Handily, the ``ListView`` has a :meth:`~django.views.generic.detail.ListView.get_queryset` method we can override. Previously, it has just been returning the value of the ``queryset`` attribute, but now we can add more logic."
msgstr ""

#: ../../topics/class-based-views.txt:361
# fe7ba912d71a4ff19f9b82f6e13dca79
msgid "The key part to making this work is that when class-based views are called, various useful things are stored on ``self``; as well as the request (``self.request``) this includes the positional (``self.args``) and name-based (``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

#: ../../topics/class-based-views.txt:366
# e093cd4797704db5ab28127f59ef96fc
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

#: ../../topics/class-based-views.txt:374
# 1417578d5cf94565a44b907a8df8805a
msgid "Next, we'll write the ``PublisherBookListView`` view itself::"
msgstr ""

#: ../../topics/class-based-views.txt:389
# eeca4089e1f64848b9f268928ea7cd82
msgid "As you can see, it's quite easy to add more logic to the queryset selection; if we wanted, we could use ``self.request.user`` to filter using the current user, or other more complex logic."
msgstr ""

#: ../../topics/class-based-views.txt:393
# 01913f18056c425386c4cf9ea987b397
msgid "We can also add the publisher into the context at the same time, so we can use it in the template::"
msgstr ""

#: ../../topics/class-based-views.txt:413
#: ../../topics/generic-views.txt:433
# 94f8a8fb2f854a6f9024166149c9305a
# 118f180829684f9f9cb12bff729a2b9d
msgid "Performing extra work"
msgstr ""

#: ../../topics/class-based-views.txt:415
#: ../../topics/generic-views.txt:435
# 2ecaad78812341a4a96c3ed4685166b7
# 3cd22036ab7247b8bc6e364215a41c27
msgid "The last common pattern we'll look at involves doing some extra work before or after calling the generic view."
msgstr ""

#: ../../topics/class-based-views.txt:418
#: ../../topics/generic-views.txt:438
# bffc4267636548cd983371075e1da695
# bda22e347a704aa58d720e5774557882
msgid "Imagine we had a ``last_accessed`` field on our ``Author`` object that we were using to keep track of the last time anybody looked at that author::"
msgstr ""

#: ../../topics/class-based-views.txt:431
# 082246384ba144e3a014d6decd5a24ef
msgid "The generic ``DetailView`` class, of course, wouldn't know anything about this field, but once again we could easily write a custom view to keep that field updated."
msgstr ""

#: ../../topics/class-based-views.txt:435
#: ../../topics/generic-views.txt:455
# 05a2a587d29443abaaf59fb807f4cbfb
# 883b48e56e664148b954f5ad10c80e4a
msgid "First, we'd need to add an author detail bit in the URLconf to point to a custom view:"
msgstr ""

#: ../../topics/class-based-views.txt:447
# 08e1998be7fe4955907668468c7f360b
msgid "Then we'd write our new view -- ``get_object`` is the method that retrieves the object -- so we simply override it and wrap the call::"
msgstr ""

#: ../../topics/class-based-views.txt:470
#: ../../topics/generic-views.txt:491
# d5c86fb825ac403a9c1895730f838199
# 0b5de258d30443c2a8aec492b9716b29
msgid "This code won't actually work unless you create a ``books/author_detail.html`` template."
msgstr ""

#: ../../topics/class-based-views.txt:475
# 64139b1834864994ae81a145d6e84441
msgid "The URLconf here uses the named group ``pk`` - this name is the default name that ``DetailView`` uses to find the value of the primary key used to filter the queryset."
msgstr ""

#: ../../topics/class-based-views.txt:479
# 21190932c6764171beee7a55ec12c3fe
msgid "If you want to change it, you'll need to do your own ``get()`` call on ``self.queryset`` using the new named parameter from ``self.kwargs``."
msgstr ""

#: ../../topics/class-based-views.txt:483
# d34217ebf0154fe39ec55eead9a7446e
msgid "More than just HTML"
msgstr ""

#: ../../topics/class-based-views.txt:485
# 48f0bf2d677649a5a3802c2f447c2b42
msgid "So far, we've been focusing on rendering templates to generate responses. However, that's not all generic views can do."
msgstr ""

#: ../../topics/class-based-views.txt:488
# 0b45b7566e8b426eae2a1b9a6ecd07aa
msgid "Each generic view is composed out of a series of mixins, and each mixin contributes a little piece of the entire view. Some of these mixins -- such as :class:`~django.views.generic.base.TemplateResponseMixin` -- are specifically designed for rendering content to an HTML response using a template. However, you can write your own mixins that perform different rendering behavior."
msgstr ""

#: ../../topics/class-based-views.txt:496
# a177b44b46e14ba98fac22f065cfda02
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

#: ../../topics/class-based-views.txt:520
# 5af97b204be14852be25e9e7383f27bf
msgid "Then, you could build a JSON-returning :class:`~django.views.generic.detail.DetailView` by mixing your :class:`JSONResponseMixin` with the :class:`~django.views.generic.detail.BaseDetailView` -- (the :class:`~django.views.generic.detail.DetailView` before template rendering behavior has been mixed in)::"
msgstr ""

#: ../../topics/class-based-views.txt:530
# d4692c1232614b1d8824c21c397bac8c
msgid "This view can then be deployed in the same way as any other :class:`~django.views.generic.detail.DetailView`, with exactly the same behavior -- except for the format of the response."
msgstr ""

#: ../../topics/class-based-views.txt:534
# 242bc5192feb48079d38f417a654a361
msgid "If you want to be really adventurous, you could even mix a :class:`~django.views.generic.detail.DetailView` subclass that is able to return *both* HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Just mix in both the :class:`JSONResponseMixin` and a :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, and override the implementation of :func:`render_to_response()` to defer to the appropriate subclass depending on the type of response that the user requested::"
msgstr ""

#: ../../topics/class-based-views.txt:552
# 6fa854d194f64b69bdc9af9f6ce4a75e
msgid "Because of the way that Python resolves method overloading, the local ``render_to_response()`` implementation will override the versions provided by :class:`JSONResponseMixin` and :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../topics/class-based-views.txt:558
# e08852f4ba414f42bcb197f488522752
msgid "Decorating class-based views"
msgstr ""

#: ../../topics/class-based-views.txt:562
# d848cd2a8bdf43d9948919d63fd4db53
msgid "The extension of class-based views isn't limited to using mixins. You can use also use decorators."
msgstr ""

#: ../../topics/class-based-views.txt:566
# f9cdea2b20294026ba677cedf4bcef47
msgid "Decorating in URLconf"
msgstr ""

#: ../../topics/class-based-views.txt:568
# b8aa27e2cb6d4142887417fd817207fd
msgid "The simplest way of decorating class-based views is to decorate the result of the :meth:`~django.views.generic.base.View.as_view` method. The easiest place to do this is in the URLconf where you deploy your view::"
msgstr ""

#: ../../topics/class-based-views.txt:583
# 4ae11534cb5d45e69537fe6a983aac1c
msgid "This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach."
msgstr ""

#: ../../topics/class-based-views.txt:590
# 5d47222d34a24847bac9653fd68b94bc
msgid "Decorating the class"
msgstr ""

#: ../../topics/class-based-views.txt:592
# 872947c1d0ab4e8b92ff0fcb3685dec0
msgid "To decorate every instance of a class-based view, you need to decorate the class definition itself. To do this you apply the decorator to the :meth:`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

#: ../../topics/class-based-views.txt:596
# 9455dc79a19640628096b5b99f1d8a71
msgid "A method on a class isn't quite the same as a standalone function, so you can't just apply a function decorator to the method -- you need to transform it into a method decorator first. The ``method_decorator`` decorator transforms a function decorator into a method decorator so that it can be used on an instance method. For example::"
msgstr ""

#: ../../topics/class-based-views.txt:613
# 123ff1a861c7405fb59943c0543ced60
msgid "In this example, every instance of ``ProtectedView`` will have login protection."
msgstr ""

#: ../../topics/class-based-views.txt:618
# 121dcc8cb05a48cb83fd623a9a8bcda3
msgid "``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the decorated method on the class. If your method does not accept a compatible set of parameters it will raise a ``TypeError`` exception."
msgstr ""

#: ../../topics/conditional-view-processing.txt:3
# 2257dd61855d45fab47536a3dc6ca834
msgid "Conditional View Processing"
msgstr ""

#: ../../topics/conditional-view-processing.txt:5
# 551da926f43a4ca5b342dc6fefdd93be
msgid "HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, etc)."
msgstr ""

#: ../../topics/conditional-view-processing.txt:11
# 1862fb5e909f472c99ab630911775124
msgid "For each page (response) that Django sends back from a view, it might provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the :class:`~django.middleware.common.CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

#: ../../topics/conditional-view-processing.txt:17
# 336a68099c704b1ca3133acfa3ab6c2f
msgid "When the client next requests the same resource, it might send along a header such as `If-modified-since`_, containing the date of the last modification time it was sent, or `If-none-match`_, containing the ``ETag`` it was sent. If the current version of the page matches the ``ETag`` sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed."
msgstr ""

#: ../../topics/conditional-view-processing.txt:27
# ad96904f8de0496bb9759e1b4138625a
msgid "When you need more fine-grained control you may use per-view conditional processing functions."
msgstr ""

#: ../../topics/conditional-view-processing.txt:33
# 4581259ecce4400ab10a7c284f7a5c6a
msgid "The ``condition`` decorator"
msgstr ""

#: ../../topics/conditional-view-processing.txt:35
# 7f368eb3aa864e4098e389ad8f1dfeb6
msgid "Sometimes (in fact, quite often) you can create functions to rapidly compute the ETag_ value or the last-modified time for a resource, **without** needing to do all the computations needed to construct the full view. Django can then use these functions to provide an \"early bailout\" option for the view processing. Telling the client that the content has not been modified since the last request, perhaps."
msgstr ""

#: ../../topics/conditional-view-processing.txt:44
# f5685782811949368fe68403b65f0be6
msgid "These two functions are passed as parameters the ``django.views.decorators.http.condition`` decorator. This decorator uses the two functions (you only need to supply one, if you can't compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don't match, a new copy of the resource must be computed and your normal view is called."
msgstr ""

#: ../../topics/conditional-view-processing.txt:51
# 21d0aa63b2874ed08453b4fc3fcf8e15
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:55
# f55c9b049f5d41e781afc42ba59d6a21
msgid "The two functions, to compute the ETag and the last modified time, will be passed the incoming ``request`` object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed ``last_modified_func`` should return a standard datetime value specifying the last time the resource was modified, or ``None`` if the resource doesn't exist. The function passed to the ``etag`` decorator should return a string representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

#: ../../topics/conditional-view-processing.txt:63
# 613780c43d66425892b5d04b2646a11f
msgid "Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:77
# 28aea0b604514de7bc1336b13d16c1aa
msgid "If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest ``published`` date for every entry associated with that blog. One way to do this would be::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:85
# 716ed55b9ff14949867ae3ec870ea188
msgid "You can then use this function to provide early detection of an unchanged page for your front page view::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:95
# 6e0713307be8461bb1eff515c5cebec1
msgid "Shortcuts for only computing one value"
msgstr ""

#: ../../topics/conditional-view-processing.txt:97
# 580b645db2584db5951c5d6fdf686ac0
msgid "As a general rule, if you can provide functions to compute *both* the ETag and the last modified time, you should do so. You don't know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations."
msgstr ""

#: ../../topics/conditional-view-processing.txt:103
# 677c9b9db6504830ab05cbdaad6a7c94
msgid "The ``django.views.decorators.http.etag`` and ``django.views.decorators.http.last_modified`` decorators are passed the same type of functions as the ``condition`` decorator. Their signatures are::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:110
# 41e21852e30643e49ab354b3dc44dee5
msgid "We could write the earlier example, which only uses a last-modified function, using one of these decorators::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:117
# 1de603c4791b4ec2b9b7351455637697
msgid "...or::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:124
# 3639ca51a60f45a3a5e34d2b7910ce94
msgid "Use ``condition`` when testing both conditions"
msgstr ""

#: ../../topics/conditional-view-processing.txt:126
# d8c76173e98d41868b07426faf4458db
msgid "It might look nicer to some people to try and chain the ``etag`` and ``last_modified`` decorators if you want to test both preconditions. However, this would lead to incorrect behavior."
msgstr ""

#: ../../topics/conditional-view-processing.txt:140
# 56e1cdfb316c4515a0994c4b89a627d3
msgid "The first decorator doesn't know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The ``condition`` decorator uses both callback functions simultaneously to work out the right action to take."
msgstr ""

#: ../../topics/conditional-view-processing.txt:146
# 7d9dafad8c574b36ad0b389df6c95937
msgid "Using the decorators with other HTTP methods"
msgstr ""

#: ../../topics/conditional-view-processing.txt:148
# 9c641814cc9a4f0696963dbdbf87ab45
msgid "The ``condition`` decorator is useful for more than only ``GET`` and ``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this situation). It can be used also to be used to provide checking for ``POST``, ``PUT`` and ``DELETE`` requests. In these situations, the idea isn't to return a \"not modified\" response, but to tell the client that the resource they are trying to change has been altered in the meantime."
msgstr ""

#: ../../topics/conditional-view-processing.txt:155
# 7ad92b43fc884f1bb96f3501263f984e
msgid "For example, consider the following exchange between the client and server:"
msgstr ""

#: ../../topics/conditional-view-processing.txt:157
# fc5ec3845ed94fe08ae1e36e2f456005
msgid "Client requests ``/foo/``."
msgstr ""

#: ../../topics/conditional-view-processing.txt:158
# de20e765089342eabf33b226a43a5d94
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

#: ../../topics/conditional-view-processing.txt:159
# 386a1ecd100c49318b92ef9d598a801c
msgid "Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is trying to update."
msgstr ""

#: ../../topics/conditional-view-processing.txt:162
# c3c5cd22192540bb8072ee3ff642179a
msgid "Server checks to see if the resource has changed, by computing the ETag the same way it does for a ``GET`` request (using the same function). If the resource *has* changed, it will return a 412 status code code, meaning \"precondition failed\"."
msgstr ""

#: ../../topics/conditional-view-processing.txt:166
# 023f2a06fdce45199e9aa4fbacbb612b
msgid "Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, to retrieve an updated version of the content before updating it."
msgstr ""

#: ../../topics/conditional-view-processing.txt:170
# 5b2113be50e04a408e63d9e0b0f3b74b
msgid "The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you **should** use the same functions, so that the same values are returned every time."
msgstr ""

#: ../../topics/conditional-view-processing.txt:176
# 8f4cbd73b1a8486aaf312b7dcafa6ff6
msgid "Comparison with middleware conditional processing"
msgstr ""

#: ../../topics/conditional-view-processing.txt:178
# a365db2679444edb81478cf0ab0293a8
msgid "You may notice that Django already provides simple and straightforward conditional ``GET`` handling via the :class:`django.middleware.http.ConditionalGetMiddleware` and :class:`~django.middleware.common.CommonMiddleware`. Whilst certainly being easy to use and suitable for many situations, those pieces of middleware functionality have limitations for advanced usage:"
msgstr ""

#: ../../topics/conditional-view-processing.txt:185
# 008e7d1f216445ecbf2ca82f3b848b20
msgid "They are applied globally to all views in your project"
msgstr ""

#: ../../topics/conditional-view-processing.txt:186
# 5836c490cdba44ef8e379f838ed2c2ba
msgid "They don't save you from generating the response itself, which may be expensive"
msgstr ""

#: ../../topics/conditional-view-processing.txt:188
# 2deed66e6b894dab82fcb628a51d6fde
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

#: ../../topics/conditional-view-processing.txt:190
# b51cc87e20334ba9a5a5a8147cb6b9ca
msgid "You should choose the most appropriate tool for your particular problem here. If you have a way to compute ETags and modification times quickly and if some view takes a while to generate the content, you should consider using the ``condition`` decorator described in this document. If everything already runs fairly quickly, stick to using the middleware and the amount of network traffic sent back to the clients will still be reduced if the view hasn't changed."
msgstr ""

#: ../../topics/db/aggregation.txt:3
# 019591be233942ddb0ea1b9ec6660c31
msgid "Aggregation"
msgstr ""

#: ../../topics/db/aggregation.txt:7
# 40c3f0323c5e4f39a8cb92e45e3d4417
msgid "The topic guide on :doc:`Django's database-abstraction API </topics/db/queries>` described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or *aggregating* a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries."
msgstr ""

#: ../../topics/db/aggregation.txt:14
# 0a3f791efda0426f9cdb5a8e2a1df502
msgid "Throughout this guide, we'll refer to the following models. These models are used to track the inventory for a series of online bookstores:"
msgstr ""

#: ../../topics/db/aggregation.txt:45
# 3ff69baa48464758897746fd65e639da
msgid "Cheat sheet"
msgstr ""

#: ../../topics/db/aggregation.txt:47
# ec8ccfe6b61a4e04a64cdd257ac877e4
msgid "In a hurry? Here's how to do common aggregate queries, assuming the models above::"
msgstr ""

#: ../../topics/db/aggregation.txt:82
# 75c8641d00254898899814b2a144cc9b
msgid "Generating aggregates over a QuerySet"
msgstr ""

#: ../../topics/db/aggregation.txt:84
# 431725b4594a494098a10cd582a049df
msgid "Django provides two ways to generate aggregates. The first way is to generate summary values over an entire ``QuerySet``. For example, say you wanted to calculate the average price of all books available for sale. Django's query syntax provides a means for describing the set of all books::"
msgstr ""

#: ../../topics/db/aggregation.txt:91
# 739ca1f9a4234bd2a720a1f746f2ad60
msgid "What we need is a way to calculate summary values over the objects that belong to this ``QuerySet``. This is done by appending an ``aggregate()`` clause onto the ``QuerySet``::"
msgstr ""

#: ../../topics/db/aggregation.txt:99
# 00234f2257984e9bb7485f39fe10df2d
msgid "The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

#: ../../topics/db/aggregation.txt:104
# ae9483877ce749dbaf5d26ca8e300749
msgid "The argument to the ``aggregate()`` clause describes the aggregate value that we want to compute - in this case, the average of the ``price`` field on the ``Book`` model. A list of the aggregate functions that are available can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

#: ../../topics/db/aggregation.txt:109
# 27c50a7f99c84c4295a0d9796fbf9715
msgid "``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

#: ../../topics/db/aggregation.txt:119
# 3d47b288b5164f16868b237ddeea597f
msgid "If you want to generate more than one aggregate, you just add another argument to the ``aggregate()`` clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:128
# 04e912279b744591a8f2e67726623a3a
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

#: ../../topics/db/aggregation.txt:130
# 7cf8479a2c7544f397c875ea1a623393
msgid "The second way to generate summary values is to generate an independent summary for each object in a ``QuerySet``. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the ``QuerySet``."
msgstr ""

#: ../../topics/db/aggregation.txt:136
# b6c1a223acd14a1faa890999be37a22d
msgid "Per-object summaries can be generated using the ``annotate()`` clause. When an ``annotate()`` clause is specified, each object in the ``QuerySet`` will be annotated with the specified values."
msgstr ""

#: ../../topics/db/aggregation.txt:140
# 83f5ae4c555b4143bcfe41233c4ffbfe
msgid "The syntax for these annotations is identical to that used for the ``aggregate()`` clause. Each argument to ``annotate()`` describes an aggregate that is to be calculated. For example, to annotate Books with the number of authors::"
msgstr ""

#: ../../topics/db/aggregation.txt:158
# c334727f513542b69bbdd890b23ed948
msgid "As with ``aggregate()``, the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation::"
msgstr ""

#: ../../topics/db/aggregation.txt:169
# 44b5c7f5db98421fa475cc8a7da7cad7
msgid "Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can be modified using any other ``QuerySet`` operation, including ``filter()``, ``order_by``, or even additional calls to ``annotate()``."
msgstr ""

#: ../../topics/db/aggregation.txt:175
# 649f24c86a9e46a1b8dbf1fc47a79a41
msgid "Joins and aggregates"
msgstr ""

#: ../../topics/db/aggregation.txt:177
# 675f5f3b332a45888da02183995011da
msgid "So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying."
msgstr ""

#: ../../topics/db/aggregation.txt:181
# 594073803a7a46debdeaced5c9dd8d32
msgid "When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same :ref:`double underscore notation <field-lookups-intro>` that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value."
msgstr ""

#: ../../topics/db/aggregation.txt:187
# 91e1607b7509492d81fed5d6c5055ed4
msgid "For example, to find the price range of books offered in each store, you could use the annotation::"
msgstr ""

#: ../../topics/db/aggregation.txt:192
# b6ddc0093f5f4198bbccc3ff60530486
msgid "This tells Django to retrieve the Store model, join (through the many-to-many relationship) with the Book model, and aggregate on the price field of the book model to produce a minimum and maximum value."
msgstr ""

#: ../../topics/db/aggregation.txt:196
# ae50003e9d204ed6995a307d63cabda2
msgid "The same rules apply to the ``aggregate()`` clause. If you wanted to know the lowest and highest price of any book that is available for sale in a store, you could use the aggregate::"
msgstr ""

#: ../../topics/db/aggregation.txt:202
# 903462c773ba422186eb64289a88cd76
msgid "Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:209
# fffac3f73c704360a6d2dd8efb52bb48
msgid "Aggregations and other QuerySet clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:212
# c43ad68fc95240ffba54204a39b5f1f1
msgid "``filter()`` and ``exclude()``"
msgstr ""

#: ../../topics/db/aggregation.txt:214
# 1c79aa2601674afc98641259968155b1
msgid "Aggregates can also participate in filters. Any ``filter()`` (or ``exclude()``) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation."
msgstr ""

#: ../../topics/db/aggregation.txt:218
# dcf59064318e4722a96f7706784df032
msgid "When used with an ``annotate()`` clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with \"Django\" using the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:225
# e0699fad015b4f77aaaddd7f98379137
msgid "When used with an ``aggregate()`` clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with \"Django\" using the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:233
# 9233148225294f20b6a1ed43e61e719c
msgid "Filtering on annotations"
msgstr ""

#: ../../topics/db/aggregation.txt:235
# 07a496ada7c44a6fb47406ac5c682002
msgid "Annotated values can also be filtered. The alias for the annotation can be used in ``filter()`` and ``exclude()`` clauses in the same way as any other model field."
msgstr ""

#: ../../topics/db/aggregation.txt:239
# 8a65c2a970ab475280e4b67a7ec2cdc0
msgid "For example, to generate a list of books that have more than one author, you can issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:244
# dbcd3be1d32c4c0aa294fb500c26148e
msgid "This query generates an annotated result set, and then generates a filter based upon that annotation."
msgstr ""

#: ../../topics/db/aggregation.txt:248
# ff0d696ea8654dc48618df299db6fd00
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:250
# 6daf5aa9f77748958674647f831d40a0
msgid "When developing a complex query that involves both ``annotate()`` and ``filter()`` clauses, particular attention should be paid to the order in which the clauses are applied to the ``QuerySet``."
msgstr ""

#: ../../topics/db/aggregation.txt:254
# bf46aed952064b9b806cc09bbef24ac9
msgid "When an ``annotate()`` clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that ``filter()`` and ``annotate()`` are not commutative operations -- that is, there is a difference between the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:262
# b096d66e873b4906a6d0322573304987
msgid "and the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:266
# 5a71a093ea7847cbbbef4216a0d98372
msgid "Both queries will return a list of Publishers that have at least one good book (i.e., a book with a rating exceeding 3.0). However, the annotation in the first query will provide the total number of all books published by the publisher; the second query will only include good books in the annotated count. In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. In the second query, the filter precedes the annotation, and as a result, the filter constrains the objects considered when calculating the annotation."
msgstr ""

#: ../../topics/db/aggregation.txt:276
# e502aa447d0947f088076f381dd9d32c
msgid "``order_by()``"
msgstr ""

#: ../../topics/db/aggregation.txt:278
# c4319d05a1134f9aae8c793d4b9bac52
msgid "Annotations can be used as a basis for ordering. When you define an ``order_by()`` clause, the aggregates you provide can reference any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:282
# 1d6e2c034eba45b793832202543a3c91
msgid "For example, to order a ``QuerySet`` of books by the number of authors that have contributed to the book, you could use the following query::"
msgstr ""

#: ../../topics/db/aggregation.txt:288
# 97ce0823226d426390fa9c3e9e08a2f1
msgid "``values()``"
msgstr ""

#: ../../topics/db/aggregation.txt:290
# 8d9c38317c444bbfb01bd27f800b4f3e
msgid "Ordinarily, annotations are generated on a per-object basis - an annotated ``QuerySet`` will return one result for each object in the original ``QuerySet``. However, when a ``values()`` clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original ``QuerySet``, the original results are grouped according to the unique combinations of the fields specified in the ``values()`` clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group."
msgstr ""

#: ../../topics/db/aggregation.txt:300
# b17dfc47637246edae6bcf05ab2b865b
msgid "For example, consider an author query that attempts to find out the average rating of books written by each author:"
msgstr ""

#: ../../topics/db/aggregation.txt:305
# d0713522060646c3b7a6bc42c8383310
msgid "This will return one result for each author in the database, annotated with their average book rating."
msgstr ""

#: ../../topics/db/aggregation.txt:308
# d20dda77a8a846fe8002629d2b85d534
msgid "However, the result will be slightly different if you use a ``values()`` clause::"
msgstr ""

#: ../../topics/db/aggregation.txt:312
# d557e2f3bbba49189f3257f133204739
msgid "In this example, the authors will be grouped by name, so you will only get an annotated result for each *unique* author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors."
msgstr ""

#: ../../topics/db/aggregation.txt:319
# c7b8ca45f2b340cb88f0835d2c50f2f1
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:321
# 0a4a23ebdd3b48879926e4f97f40b352
msgid "As with the ``filter()`` clause, the order in which ``annotate()`` and ``values()`` clauses are applied to a query is significant. If the ``values()`` clause precedes the ``annotate()``, the annotation will be computed using the grouping described by the ``values()`` clause."
msgstr ""

#: ../../topics/db/aggregation.txt:326
# 5c388736c0dc414db46270856a4b931c
msgid "However, if the ``annotate()`` clause precedes the ``values()`` clause, the annotations will be generated over the entire query set. In this case, the ``values()`` clause only constrains the fields that are generated on output."
msgstr ""

#: ../../topics/db/aggregation.txt:331
# 6b7bef0ec3f640eda8673e3b689e0411
msgid "For example, if we reverse the order of the ``values()`` and ``annotate()`` clause from our previous example::"
msgstr ""

#: ../../topics/db/aggregation.txt:336
# 64a63aa9dead434bad5592b0197b557f
msgid "This will now yield one unique result for each author; however, only the author's name and the ``average_rating`` annotation will be returned in the output data."
msgstr ""

#: ../../topics/db/aggregation.txt:340
# 51cb1cdf2c48470f9f182a39aa3e9aee
msgid "You should also note that ``average_rating`` has been explicitly included in the list of values to be returned. This is required because of the ordering of the ``values()`` and ``annotate()`` clause."
msgstr ""

#: ../../topics/db/aggregation.txt:344
# 4d5a73c332db4fe1b26a5da124e8eba8
msgid "If the ``values()`` clause precedes the ``annotate()`` clause, any annotations will be automatically added to the result set. However, if the ``values()`` clause is applied after the ``annotate()`` clause, you need to explicitly include the aggregate column."
msgstr ""

#: ../../topics/db/aggregation.txt:350
# b3fb96e99e3343cf99098d0b415c8f36
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

#: ../../topics/db/aggregation.txt:352
# 2fd48f397c5446dfb3f03095069292f3
msgid "Fields that are mentioned in the ``order_by()`` part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the ``values()`` call. These extra fields are used to group \"like\" results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things."
msgstr ""

#: ../../topics/db/aggregation.txt:359
# e546c99729fb4eb59b0482edf7d9ae32
msgid "By way of example, suppose you have a model like this::"
msgstr ""

#: ../../topics/db/aggregation.txt:368
# fe772dd1699e4ee6b6cd4a91f47b5065
msgid "The important part here is the default ordering on the ``name`` field. If you want to count how many times each distinct ``data`` value appears, you might try this::"
msgstr ""

#: ../../topics/db/aggregation.txt:375
# 335b49d55796472c8c3e15c01c9a54c0
msgid "...which will group the ``Item`` objects by their common ``data`` values and then count the number of ``id`` values in each group. Except that it won't quite work. The default ordering by ``name`` will also play a part in the grouping, so this query will group by distinct ``(data, name)`` pairs, which isn't what you want. Instead, you should construct this queryset::"
msgstr ""

#: ../../topics/db/aggregation.txt:383
# 14d2c09011104ad39a2d8e19da51e594
msgid "...clearing any ordering in the query. You could also order by, say, ``data`` without any harmful effects, since that is already playing a role in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:387
# 4ad8ad6c90144ae5989223f954688a68
msgid "This behavior is the same as that noted in the queryset documentation for :meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the same: normally you won't want extra columns playing a part in the result, so clear out the ordering, or at least make sure it's restricted only to those fields you also select in a ``values()`` call."
msgstr ""

#: ../../topics/db/aggregation.txt:394
# b8c41d99790044fd8e8d502791dfc7f1
msgid "You might reasonably ask why Django doesn't remove the extraneous columns for you. The main reason is consistency with ``distinct()`` and other places: Django **never** removes ordering constraints that you have specified (and we can't change those other methods' behavior, as that would violate our :doc:`/misc/api-stability` policy)."
msgstr ""

#: ../../topics/db/aggregation.txt:401
# 949eea69e152481ab608664209f0ab2b
msgid "Aggregating annotations"
msgstr ""

#: ../../topics/db/aggregation.txt:403
# bebb8de4303642e1a8106620fed90ba0
msgid "You can also generate an aggregate on the result of an annotation. When you define an ``aggregate()`` clause, the aggregates you provide can reference any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:407
# 16663264c4364a9f9bdc1ceb7783717b
msgid "For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field::"
msgstr ""

#: ../../topics/db/examples/index.txt:3
# dff848cf7b69436c92a5989a40565dd8
msgid "Examples of model relationship API usage"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:3
#: ../../topics/db/models.txt:324
#: ../../topics/db/queries.txt:1154
# 76070b53b50444d5a774612e1bf623b9
# a84578ff451c4100bd7aa885d67e8185
# 087f89fdb9b4489eb1500debb23cf36f
msgid "Many-to-many relationships"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:7
# 75024c99acb34a91869b1fb78df5be9e
msgid "To define a many-to-many relationship, use :ref:`ref-manytomany`."
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:9
# c8e783eff3f1451597804908140870a4
msgid "In this example, an ``Article`` can be published in multiple ``Publication`` objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:35
#: ../../topics/db/examples/many_to_one.txt:32
#: ../../topics/db/examples/one_to_one.txt:37
# cac15a7356f744c9a725e33510813305
# a881729712f2475881fdbc4f9d0301a7
# ea3b7a96b0ff468aa2f7a33373c6c5fe
msgid "What follows are examples of operations that can be performed using the Python API facilities."
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:38
# 8078b5ee9283460cb5e03827c087d52a
msgid "Create a couple of Publications::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:47
#: ../../topics/db/examples/many_to_one.txt:43
# 8fbdbe775ecd4d28974b84556fb9992c
# 4becd845dcf2490a81092fc46cfc7272
msgid "Create an Article::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:51
# 0b84f64266de4f8880180afe0b97c230
msgid "You can't associate it with a Publication until it's been saved::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:58
# c0ddcb86a2234e1295971831d4e0956f
msgid "Save it! ::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:63
# 9c3b8d54c1294871808fb72af502a0fd
msgid "Associate the Article with a Publication::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:67
# 61a95904fb214802b737e14aa97cf4bb
msgid "Create another Article, and set it to appear in both Publications::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:74
# 905a0d9881a641718b92880006267a21
msgid "Adding a second time is OK::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:78
#: ../../topics/db/examples/many_to_one.txt:95
# 2aedaf7c21824529a37f4045c0ba2b8b
# fbbf67459a02472b898ca4b6293b2c00
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:85
# dce7ac2cec184dcb9744a9005e4768a3
msgid "Add a Publication directly via publications.add by using keyword arguments::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:89
# 154a009159a2454b87dcbc9f0792e469
msgid "Article objects have access to their related Publication objects::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:96
# a6e2d525c062470f878017cb41f626d9
msgid "Publication objects have access to their related Article objects::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:105
# b7ed382d3ff04302aa1cc74b06c04335
msgid "Many-to-many relationships can be queried using :ref:`lookups across relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:122
# 674429ced4cc4739a781b41d0e130c9b
msgid "The count() function respects distinct() as well::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:135
# 2648f7e7770f4f6c8f1d5d9515dbd220
msgid "Reverse m2m queries are supported (i.e., starting at the table that doesn't have a ManyToManyField)::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:160
# e56ba23068f84ea5a1f21f0b5e8900ca
msgid "Excluding a related item works as you would expect, too (although the SQL involved is a little complex)::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:166
# 76f7228e618146af990685364ae8278b
msgid "If we delete a Publication, its Articles won't be able to access it::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:175
# df6a9fefe066441da0e977f93d27c338
msgid "If we delete an Article, its Publications won't be able to access it::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:183
# 83d187c353fb449facf6c559b5a64b22
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:193
# 8c41992c93394dcbb621d08ca5298e85
msgid "Adding via the other end using keywords::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:202
# 9f4ebf7abc9e435cad0de6960426070c
msgid "Removing publication from an article::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:210
# 65f97dbef5b94b879b905587114230c3
msgid "And from the other end::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:218
# ab7da132d15c4062941cfc109cec9c0e
msgid "Relation sets can be assigned. Assignment clears any existing set members::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:226
# e9bc6864104149b9a296b8f42ae78e29
msgid "Relation sets can be cleared::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:232
# 41aa691d587943c4af425b3e95a55ba2
msgid "And you can clear from the other end::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:245
# a3fb748d052442329e05d9413e8258fb
msgid "Recreate the article and Publication we have deleted::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:253
# 47067a19450f4f83b3fe28cab14f9e57
msgid "Bulk delete some Publications - references to deleted publications should go::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:263
# cb43feec3ae140399140a3865db224e0
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:270
# ac6eddee54be4f2d9b5c56f0b9cced76
msgid "After the delete, the QuerySet cache needs to be cleared, and the referenced objects should be gone::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:278
# 9c0f10d9912c432086a805caead40575
msgid "An alternate to calling clear() is to assign the empty set::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:3
#: ../../topics/db/models.txt:278
# 6988a42678bf477e858c75586a304c65
# 933e3e17ca91477aab0f8a02b4c5f541
msgid "Many-to-one relationships"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:7
# f5d27fae1a35456284c4243abab6c34f
msgid "To define a many-to-one relationship, use :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:35
# 0df08aef93c84b71a36ef0ac2727fed6
msgid "Create a few Reporters::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:55
# f6b5a68bb1a0402b90202efd1ca6ed0e
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:59
# 40387969282c4168976471ecefbe4ce7
msgid "These are strings instead of unicode strings because that's what was used in the creation of this reporter (and we haven't refreshed the data from the database, which always returns unicode strings)::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:66
# 56438ae7d7de475da1cbb607f57dc4cc
msgid "Create an Article via the Reporter object::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:76
# f80cf940f37f49ad9855045482e5f0af
msgid "Create a new article, and add it to the article set::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:87
# a452e8189da34d9c92317fe865745f39
msgid "Add the same article to a different article set - check that it moves::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:113
# 60c3be1f36e84d84be0f70c789aa7eeb
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:115
# d22b1f7d665440fcbf06780b07f75c04
msgid "Related managers support field lookups as well. The API automatically follows relationships as far as you need. Use double underscores to separate relationships. This works as many levels deep as you want. There's no limit. For example::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:127
# 1101d4695b6d47e280e81776e89cf680
msgid "Exact match is implied here::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:132
# e1eaf2acf9564acf8055b34e3fa93dc0
msgid "Query twice over the related field. This translates to an AND condition in the WHERE clause::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:138
# 0101a93679c546e8aeb66ed00e04b51a
msgid "For the related lookup you can supply a primary key value or pass the related object explicitly::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:153
# 796cebd8246249d89a8d9b0b85d7ebb6
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:158
# 62b9ceeec3994dce9cdb5c34dc30d028
msgid "Querying in the opposite direction::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:172
# dbd1643e1da5436e8bc2b6c284e59563
msgid "Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:179
# 776d5b7a94224ef9b5d566d6ec36f6cb
msgid "Queries can go round in circles::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:188
# 9c3348962283429497d07df85b6ae4bf
msgid "If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` set to ``CASCADE``, which is the default)::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:202
# f29c9708a7a04c279b12198244912592
msgid "You can delete using a JOIN in the query::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:3
#: ../../topics/db/models.txt:528
#: ../../topics/db/queries.txt:1181
# 3805423c75224fc8853f93b9f0269da0
# 7fb8a0439bb84dba984f071a2d519219
# 1c607235b3bd4c62a0b44321d5fe4012
msgid "One-to-one relationships"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:7
# 64420bc4f5904fad8882f10c2ce532b3
msgid "To define a one-to-one relationship, use :ref:`ref-onetoone`."
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:9
# 0051b05edfce49ce863f69969058e4da
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``:"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:40
# f741a400116b4529997469d9148b0e78
msgid "Create a couple of Places::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:47
# 5102100d8bef41bc8a35528b3b63fe66
msgid "Create a Restaurant. Pass the ID of the \"parent\" object as this object's ID::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:52
# 9f7bf3b367e6420c81511f5f9c75a870
msgid "A Restaurant can access its place::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:57
# a9fa94dd681f440ba6ca3f3d947770e3
msgid "A Place can access its restaurant, if available::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:62
# 4fab2289308e47a3873cd12fe26a3a96
msgid "p2 doesn't have an associated restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:69
# fb47e4ef1bcb42f0aaff68d43ac9ed77
msgid "Set the place using assignment notation. Because place is the primary key on Restaurant, the save will create a new restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:79
# 48a9257d7e2645e7a1bdaee2d13bc1e8
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:85
# 16522c02274e44ca8c11fbbc81e3bd39
msgid "Restaurant.objects.all() just returns the Restaurants, not the Places.  Note that there are two restaurants - Ace Hardware the Restaurant was created in the call to r.place = p2::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:92
# 57965e8155374dbeb892c2f3cad5f114
msgid "Place.objects.all() returns all Places, regardless of whether they have Restaurants::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:98
# 8952de5090ca426e98f963d75e4b640a
msgid "You can query the models using :ref:`lookups across relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:109
# 4b3d44b0ffe549929796b196034e6137
msgid "This of course works in reverse::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:120
# ad1493b39f3b47d4943e1b3a2c6c7a75
msgid "Add a Waiter to the Restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:127
# 526320b1d422482c92814abc4ae543c9
msgid "Query the waiters::"
msgstr ""

#: ../../topics/db/index.txt:2
# 8a061242f4dd4afdbcd786bf604aea29
msgid "Models and databases"
msgstr ""

#: ../../topics/db/index.txt:6
#: ../../topics/db/models.txt:7
# 705b6b1ac7554af681dff92789d0810a
# c2745f4d55144322ba983689d004af1f
msgid "A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you're storing. Generally, each model maps to a single database table."
msgstr ""

#: ../../topics/db/managers.txt:3
# 738da3a0352e49d7a8b5187ba5783a00
msgid "Managers"
msgstr ""

#: ../../topics/db/managers.txt:9
# 9453be180f624a53b527790421bd9288
msgid "A ``Manager`` is the interface through which database query operations are provided to Django models. At least one ``Manager`` exists for every model in a Django application."
msgstr ""

#: ../../topics/db/managers.txt:13
# 2db8799e1a634349b458770e92f5585f
msgid "The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; this document specifically touches on model options that customize ``Manager`` behavior."
msgstr ""

#: ../../topics/db/managers.txt:20
# fd930e62a04a4dc08f1fba62775d0c29
msgid "Manager names"
msgstr ""

#: ../../topics/db/managers.txt:22
# ef1a728c13b04c8c9f5894771efb3e10
msgid "By default, Django adds a ``Manager`` with the name ``objects`` to every Django model class. However, if you want to use ``objects`` as a field name, or if you want to use a name other than ``objects`` for the ``Manager``, you can rename it on a per-model basis. To rename the ``Manager`` for a given class, define a class attribute of type ``models.Manager()`` on that model. For example::"
msgstr ""

#: ../../topics/db/managers.txt:34
# 099109d58d6540d19cff88d35deaf39c
msgid "Using this example model, ``Person.objects`` will generate an ``AttributeError`` exception, but ``Person.people.all()`` will provide a list of all ``Person`` objects."
msgstr ""

#: ../../topics/db/managers.txt:41
# 932e05e4d2b049f5a356bfa38a510660
msgid "Custom Managers"
msgstr ""

#: ../../topics/db/managers.txt:43
# 2646c93f319b4405ba69f9b46a8b500d
msgid "You can use a custom ``Manager`` in a particular model by extending the base ``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

#: ../../topics/db/managers.txt:46
# 2d2d7691597445f186ac83ef5536430d
msgid "There are two reasons you might want to customize a ``Manager``: to add extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the ``Manager`` returns."
msgstr ""

#: ../../topics/db/managers.txt:51
# e28ac1e54c40462aa325e1923b14cc19
msgid "Adding extra Manager methods"
msgstr ""

#: ../../topics/db/managers.txt:53
# f0378bc6c821412ba14629f41a899a16
msgid "Adding extra ``Manager`` methods is the preferred way to add \"table-level\" functionality to your models. (For \"row-level\" functionality -- i.e., functions that act on a single instance of a model object -- use :ref:`Model methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

#: ../../topics/db/managers.txt:58
# af100646b19d4a068bd3157470c7ec6c
msgid "A custom ``Manager`` method can return anything you want. It doesn't have to return a ``QuerySet``."
msgstr ""

#: ../../topics/db/managers.txt:61
# af464d307f314316a65ad05c665f9889
msgid "For example, this custom ``Manager`` offers a method ``with_counts()``, which returns a list of all ``OpinionPoll`` objects, each with an extra ``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

#: ../../topics/db/managers.txt:92
# e334915dbcc04a5c90b01e1c6fbff416
msgid "With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

#: ../../topics/db/managers.txt:95
# 31b8973e86c04dc6ab46faef76df2bdf
msgid "Another thing to note about this example is that ``Manager`` methods can access ``self.model`` to get the model class to which they're attached."
msgstr ""

#: ../../topics/db/managers.txt:99
# 5c6b6d314c464daaadc94b4bf8270029
msgid "Modifying initial Manager QuerySets"
msgstr ""

#: ../../topics/db/managers.txt:101
# 355083a3108c4353ad4d2503ef3c0bf6
msgid "A ``Manager``'s base ``QuerySet`` returns all objects in the system. For example, using this model::"
msgstr ""

#: ../../topics/db/managers.txt:108
# cb1a393c3d9a42709f6720fc81bb41d6
msgid "...the statement ``Book.objects.all()`` will return all books in the database."
msgstr ""

#: ../../topics/db/managers.txt:110
# 2f7b2e678af846f4a192ff8863bb3fe2
msgid "You can override a ``Manager``\\'s base ``QuerySet`` by overriding the ``Manager.get_query_set()`` method. ``get_query_set()`` should return a ``QuerySet`` with the properties you require."
msgstr ""

#: ../../topics/db/managers.txt:114
# 8265fe5e54cb406c9d890b50d39bac9b
msgid "For example, the following model has *two* ``Manager``\\s -- one that returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

#: ../../topics/db/managers.txt:130
# b2542b55e3414daaac97337329d73b2d
msgid "With this sample model, ``Book.objects.all()`` will return all books in the database, but ``Book.dahl_objects.all()`` will only return the ones written by Roald Dahl."
msgstr ""

#: ../../topics/db/managers.txt:134
# 85ec43762c3a4f78a046572b34144534
msgid "Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on it. So these statements are all legal::"
msgstr ""

#: ../../topics/db/managers.txt:142
# 3fb414cc3c3843c0ad9da1f4ee3f9749
msgid "This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many ``Manager()`` instances to a model as you'd like. This is an easy way to define common \"filters\" for your models."
msgstr ""

#: ../../topics/db/managers.txt:165
# 6de9050587264c31a7b619fc64810924
msgid "This example allows you to request ``Person.men.all()``, ``Person.women.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

#: ../../topics/db/managers.txt:168
# b2a4f78b0609465fb947d67d88d623b0
msgid "If you use custom ``Manager`` objects, take note that the first ``Manager`` Django encounters (in the order in which they're defined in the model) has a special status. Django interprets the first ``Manager`` defined in a class as the \"default\" ``Manager``, and several parts of Django (including :djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As a result, it's a good idea to be careful in your choice of default manager in order to avoid a situation where overriding ``get_query_set()`` results in an inability to retrieve objects you'd like to work with."
msgstr ""

#: ../../topics/db/managers.txt:181
# 5ae1388d71964298ad884e518b32ab33
msgid "Using managers for related object access"
msgstr ""

#: ../../topics/db/managers.txt:183
# b21b74fd069542e0b747e57bea3b14d5
msgid "By default, Django uses an instance of a \"plain\" manager class when accessing related objects (i.e. ``choice.poll``), not the default manager on the related object. This is because Django needs to be able to retrieve the related object, even if it would otherwise be filtered out (and hence be inaccessible) by the default manager."
msgstr ""

#: ../../topics/db/managers.txt:189
# 4297d915a5a84f2895107514ff48a615
msgid "If the normal plain manager class (:class:`django.db.models.Manager`) is not appropriate for your circumstances, you can force Django to use the same class as the default manager for your model by setting the `use_for_related_fields` attribute on the manager class. This is documented fully below_."
msgstr ""

#: ../../topics/db/managers.txt:199
# e6d9d633599a4aa2ba9d9ec004715dcf
msgid "Custom managers and model inheritance"
msgstr ""

#: ../../topics/db/managers.txt:201
# ff6c18ae4b1a48b2aec5b6afc940f857
msgid "Class inheritance and model managers aren't quite a perfect match for each other. Managers are often specific to the classes they are defined on and inheriting them in subclasses isn't necessarily a good idea. Also, because the first manager declared is the *default manager*, it is important to allow that to be controlled. So here's how Django handles custom managers and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

#: ../../topics/db/managers.txt:208
# 720d543bdd5d409dab3f604871510f5a
msgid "Managers defined on non-abstract base classes are *not* inherited by child classes. If you want to reuse a manager from a non-abstract base, redeclare it explicitly on the child class. These sorts of managers are likely to be fairly specific to the class they are defined on, so inheriting them can often lead to unexpected results (particularly as far as the default manager goes). Therefore, they aren't passed onto child classes."
msgstr ""

#: ../../topics/db/managers.txt:216
# 6985c6f2fa2242b5b8a43b76a79e500f
msgid "Managers from abstract base classes are always inherited by the child class, using Python's normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on). Abstract base classes are designed to capture information and behavior that is common to their child classes. Defining common managers is an appropriate part of this common information."
msgstr ""

#: ../../topics/db/managers.txt:223
# de007267a577434eba7e79eacc04d945
msgid "The default manager on a class is either the first manager declared on the class, if that exists, or the default manager of the first abstract base class in the parent hierarchy, if that exists. If no default manager is explicitly declared, Django's normal default manager is used."
msgstr ""

#: ../../topics/db/managers.txt:229
# bb05716a1ab84e6a95140a4e5fa82e3a
msgid "These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class::"
msgstr ""

#: ../../topics/db/managers.txt:241
# 00fc19768968414687f15f27f2325935
msgid "If you use this directly in a subclass, ``objects`` will be the default manager if you declare no managers in the base class::"
msgstr ""

#: ../../topics/db/managers.txt:248
# 1ad9aa8d3f6c45368dd2e4b911837052
msgid "If you want to inherit from ``AbstractBase``, but provide a different default manager, you can provide the default manager on the child class::"
msgstr ""

#: ../../topics/db/managers.txt:256
# 2c1ef7ddea8d488692671d14cf13e180
msgid "Here, ``default_manager`` is the default. The ``objects`` manager is still available, since it's inherited. It just isn't used as the default."
msgstr ""

#: ../../topics/db/managers.txt:259
# 3814e3b808754335b7a1ad7c5de8c802
msgid "Finally for this example, suppose you want to add extra managers to the child class, but still use the default from ``AbstractBase``. You can't add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy *after* the defaults::"
msgstr ""

#: ../../topics/db/managers.txt:278
# 03a067bc2df8409c98a6a95e262441e2
msgid "Implementation concerns"
msgstr ""

#: ../../topics/db/managers.txt:280
# efc731d1652344bc8b488323d8d54218
msgid "Whatever features you add to your custom ``Manager``, it must be possible to make a shallow copy of a ``Manager`` instance; i.e., the following code must work::"
msgstr ""

#: ../../topics/db/managers.txt:288
# efd18791b9d6437f81fce6468f8512fa
msgid "Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail."
msgstr ""

#: ../../topics/db/managers.txt:291
# f4822ad6db3c4aeaa7c4456a3130e403
msgid "This won't be an issue for most custom managers. If you are just adding simple methods to your ``Manager``, it is unlikely that you will inadvertently make instances of your ``Manager`` uncopyable. However, if you're overriding ``__getattr__`` or some other private method of your ``Manager`` object that controls object state, you should ensure that you don't affect the ability of your ``Manager`` to be copied."
msgstr ""

#: ../../topics/db/managers.txt:302
# 1b0fb490452f45ce9ff0409f1e0edc9b
msgid "Controlling automatic Manager types"
msgstr ""

#: ../../topics/db/managers.txt:304
# 83bec7c6ec13429bb1fdfab9359ab52e
msgid "This document has already mentioned a couple of places where Django creates a manager class for you: `default managers`_ and the \"plain\" manager used to `access related objects`_. There are other places in the implementation of Django where temporary plain managers are needed. Those automatically created managers will normally be instances of the :class:`django.db.models.Manager` class."
msgstr ""

#: ../../topics/db/managers.txt:314
# dd2a5b9241a64ca587e47e288b53f992
msgid "Throughout this section, we will use the term \"automatic manager\" to mean a manager that Django creates for you -- either as a default manager on a model with no managers, or to use temporarily when accessing related objects."
msgstr ""

#: ../../topics/db/managers.txt:318
# 4f2d0b2b9458482b968b05f83dead9c3
msgid "Sometimes this default class won't be the right choice. One example is in the :mod:`django.contrib.gis` application that ships with Django itself. All ``gis`` models must use a special manager class (:class:`~django.contrib.gis.db.models.GeoManager`) because they need a special queryset (:class:`~django.contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the database.  It turns out that models which require a special manager like this need to use the same manager class wherever an automatic manager is created."
msgstr ""

#: ../../topics/db/managers.txt:326
# f1c05880c1e74efebfc9d2f29ab4f04b
msgid "Django provides a way for custom manager developers to say that their manager class should be used for automatic managers whenever it is the default manager on a model. This is done by setting the ``use_for_related_fields`` attribute on the manager class::"
msgstr ""

#: ../../topics/db/managers.txt:336
# 6bb69acbae1242ad8c9b4a5652c3a9f3
msgid "If this attribute is set on the *default* manager for a model (only the default manager is considered in these situations), Django will use that class whenever it needs to automatically create a manager for the class.  Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

#: ../../topics/db/managers.txt:343
# f13280c69175410ca53152eb80e22980
msgid "Given the purpose for which it's used, the name of this attribute (``use_for_related_fields``) might seem a little odd. Originally, the attribute only controlled the type of manager used for related field access, which is where the name came from. As it became clear the concept was more broadly useful, the name hasn't been changed. This is primarily so that existing code will :doc:`continue to work </misc/api-stability>` in future Django versions."
msgstr ""

#: ../../topics/db/managers.txt:352
# 2dca0c23eabf4d7592eebb1cd77888f8
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

#: ../../topics/db/managers.txt:354
# 5006328078df4502ba7505cde40f1b63
msgid "As already suggested by the `django.contrib.gis` example, above, the ``use_for_related_fields`` feature is primarily for managers that need to return a custom ``QuerySet`` subclass. In providing this functionality in your manager, there are a couple of things to remember."
msgstr ""

#: ../../topics/db/managers.txt:360
# 07499fce73e042efb2d234185cc13a11
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

#: ../../topics/db/managers.txt:362
# 836e8272307945779c3bea296f0f8e4e
msgid "One reason an automatic manager is used is to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that *anything* which is referred to can be retrieved."
msgstr ""

#: ../../topics/db/managers.txt:367
# 7372c794df934d6a81e1e80cc1ff408f
msgid "If you override the ``get_query_set()`` method and filter out any rows, Django will return incorrect results. Don't do that. A manager that filters results in ``get_query_set()`` is not appropriate for use as an automatic manager."
msgstr ""

#: ../../topics/db/managers.txt:372
# a27aef13e61d4753b5cffbaeb2727a0d
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

#: ../../topics/db/managers.txt:374
# 1786c707cb884697a885b6c550ab6ec5
msgid "The ``use_for_related_fields`` attribute must be set on the manager *class*, not on an *instance* of the class. The earlier example shows the correct way to set it, whereas the following will not work::"
msgstr ""

#: ../../topics/db/managers.txt:393
# b667a8447a72424faa05cae303b30358
msgid "You also shouldn't change the attribute on the class object after it has been used in a model, since the attribute's value is processed when the model class is created and not subsequently reread. Set the attribute on the manager class when it is first defined, as in the initial example of this section and everything will work smoothly."
msgstr ""

#: ../../topics/db/models.txt:3
# 7d60c395a86543ebac0b55d126bf4b22
msgid "Models"
msgstr ""

#: ../../topics/db/models.txt:11
# 5d704cf41a6f4e449d073d8c9baeb346
msgid "The basics:"
msgstr ""

#: ../../topics/db/models.txt:13
# 9628137a3f5b40f28673120015b25b15
msgid "Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

#: ../../topics/db/models.txt:16
# d738f72feec24da28289cb17e53b06a6
msgid "Each attribute of the model represents a database field."
msgstr ""

#: ../../topics/db/models.txt:18
# 6d5bacd349f347698d4a554a77653012
msgid "With all of this, Django gives you an automatically-generated database-access API; see :doc:`/topics/db/queries`."
msgstr ""

#: ../../topics/db/models.txt:23
#: ../../topics/email.txt:17
# 7f7920ae709e4ee3a4c8863a1b318d75
# b6d18a3d29a54cecb78828fd2cec5b3b
msgid "Quick example"
msgstr ""

#: ../../topics/db/models.txt:25
# 703f74c8fd6a473aa70603c7f25c8d13
msgid "This example model defines a ``Person``, which has a ``first_name`` and ``last_name``::"
msgstr ""

#: ../../topics/db/models.txt:34
# fd1988594d624084aa095ae0677fa474
msgid "``first_name`` and ``last_name`` are fields_ of the model. Each field is specified as a class attribute, and each attribute maps to a database column."
msgstr ""

#: ../../topics/db/models.txt:37
# 486a9cb3a90745b798b391e19791206c
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

#: ../../topics/db/models.txt:47
# e64adc69626a4cd38036c63afd11c963
msgid "Some technical notes:"
msgstr ""

#: ../../topics/db/models.txt:49
# 3954b782fbcb40c28093b0c5ce551f7b
msgid "The name of the table, ``myapp_person``, is automatically derived from some model metadata but can be overridden. See :ref:`table-names` for more details.."
msgstr ""

#: ../../topics/db/models.txt:53
# 92638e7acd314d28a68e09dd52181951
msgid "An ``id`` field is added automatically, but this behavior can be overridden. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../topics/db/models.txt:56
# a6684b78a7cd494e8bf8eb8b86904c68
msgid "The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL syntax, but it's worth noting Django uses SQL tailored to the database backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

#: ../../topics/db/models.txt:61
# 765505714b71403b9c8cae07e28630ab
msgid "Using models"
msgstr ""

#: ../../topics/db/models.txt:63
# f9f93ac247d643539470345326e9d641
msgid "Once you have defined your models, you need to tell Django you're going to *use* those models. Do this by editing your settings file and changing the :setting:`INSTALLED_APPS` setting to add the name of the module that contains your ``models.py``."
msgstr ""

#: ../../topics/db/models.txt:68
# 52cb2e8f499d482dad155774c633e9b3
msgid "For example, if the models for your application live in the module ``mysite.myapp.models`` (the package structure that is created for an application by the :djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` should read, in part::"
msgstr ""

#: ../../topics/db/models.txt:79
# f8ee09213f4244d1a73f32ca08e1a899
msgid "When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../topics/db/models.txt:85
# f809c4ef9dbd4a88baeb3b04e735f5e5
msgid "The most important part of a model -- and the only required part of a model -- is the list of database fields it defines. Fields are specified by class attributes."
msgstr ""

#: ../../topics/db/models.txt:89
#: ../../topics/db/queries.txt:258
#: ../../topics/db/queries.txt:1033
#: ../../topics/db/queries.txt:1082
#: ../../topics/db/transactions.txt:120
#: ../../topics/settings.txt:180
# 78c5a41fc9be4c6d97da4c2cde0a3d12
# 9f8643c818df44258f0ae5ccf1f1297f
# fa7dec9afef54a96b8150958897598e2
# 32adef8686b844659e383aeeab3f508d
# ab8b0a092095473892c732bd82f2c26f
# 20a80fa0ab7a4a8e8a27582e9a3b7100
msgid "Example::"
msgstr ""

#: ../../topics/db/models.txt:103
#: ../../topics/forms/modelforms.txt:40
# ac5f2c8b0f8549ec8ce15286b8422903
# a950fb92b4c844b395f77472366fa84b
msgid "Field types"
msgstr ""

#: ../../topics/db/models.txt:105
# 2299c43fb41542af996e360c08ba92ae
msgid "Each field in your model should be an instance of the appropriate :class:`~django.db.models.Field` class. Django uses the field class types to determine a few things:"
msgstr ""

#: ../../topics/db/models.txt:109
# 9cff5a317bfc48149e88ce976b11e10b
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

#: ../../topics/db/models.txt:111
# 9bccd40214544ba2b358f54093cb44df
msgid "The :doc:`widget </ref/forms/widgets>` to use in Django's admin interface, if you care to use it (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

#: ../../topics/db/models.txt:114
# 334618ea80eb4192ab904a4147c4b75a
msgid "The minimal validation requirements, used in Django's admin and in automatically-generated forms."
msgstr ""

#: ../../topics/db/models.txt:117
# 77386827edb64fffad45a407a3fb273f
msgid "Django ships with dozens of built-in field types; you can find the complete list in the :ref:`model field reference <model-field-types>`. You can easily write your own fields if Django's built-in ones don't do the trick; see :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../topics/db/models.txt:123
# 889bc16b1ed34cd898fe298907ca8610
msgid "Field options"
msgstr ""

#: ../../topics/db/models.txt:125
# cb715bb6c1ad4e58963440db7d4a180c
msgid "Each field takes a certain set of field-specific arguments (documented in the :ref:`model field reference <model-field-types>`). For example, :class:`~django.db.models.CharField` (and its subclasses) require a :attr:`~django.db.models.CharField.max_length` argument which specifies the size of the ``VARCHAR`` database field used to store the data."
msgstr ""

#: ../../topics/db/models.txt:131
# 0f7a875d75344683b2a9e4375506ee46
msgid "There's also a set of common arguments available to all field types. All are optional. They're fully explained in the :ref:`reference <common-model-field-options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

#: ../../topics/db/models.txt:137
# dbc2bc91da90497e9da68f6a2b1cd72a
msgid "If ``True``, Django will store empty values as ``NULL`` in the database. Default is ``False``."
msgstr ""

#: ../../topics/db/models.txt:141
# e21e5fc10d564a269996a2325097dc70
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../topics/db/models.txt:143
# d0e727bc5dc04be288b858dc255a7c46
msgid "Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is purely database-related, whereas :attr:`~Field.blank` is validation-related. If a field has :attr:`blank=True <Field.blank>`, validation on Django's admin site will allow entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, the field will be required."
msgstr ""

#: ../../topics/db/models.txt:151
# 0fca1964ab28437fab93a277e2a241ee
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. If this is given, Django's admin will use a select box instead of the standard text field and will limit choices to the choices given."
msgstr ""

#: ../../topics/db/models.txt:156
# 33a04007078f43b4bb4782264678af13
msgid "A choices list looks like this::"
msgstr ""

#: ../../topics/db/models.txt:166
# 1db4489af0ae4c00b8280a5627529fe8
msgid "The first element in each tuple is the value that will be stored in the database, the second element will be displayed by the admin interface, or in a ModelChoiceField. Given an instance of a model object, the display value for a choices field can be accessed using the ``get_FOO_display`` method. For example::"
msgstr ""

#: ../../topics/db/models.txt:192
# 4cfa4979879643368e3c1a6f04b51b58
msgid "The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created."
msgstr ""

#: ../../topics/db/models.txt:197
# 11a4988932024957a1dc840e847163e3
msgid "Extra \"help\" text to be displayed under the field on the object's admin form. It's useful for documentation even if your object doesn't have an admin form."
msgstr ""

#: ../../topics/db/models.txt:202
# 321ff09ef1be4fe4b7895e16d95e9f1f
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../topics/db/models.txt:204
# 31cc60b7f7744d9abae4e04dc127a983
msgid "If you don't specify :attr:`primary_key=True <Field.primary_key>` for any fields in your model, Django will automatically add an :class:`IntegerField` to hold the primary key, so you don't need to set :attr:`primary_key=True <Field.primary_key>` on any of your fields unless you want to override the default primary-key behavior. For more, see :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../topics/db/models.txt:212
# e362947c49fd4cbc97e72cb989f57050
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../topics/db/models.txt:214
# 48262a5ae2884dbca0cd92245325360c
msgid "Again, these are just short descriptions of the most common field options. Full details can be found in the :ref:`common model field option reference <common-model-field-options>`."
msgstr ""

#: ../../topics/db/models.txt:221
# 09110f7c749241f48d421513d0a5f8ad
msgid "Automatic primary key fields"
msgstr ""

#: ../../topics/db/models.txt:223
# 07678c9af8794929a3d9b7d6f004d68c
msgid "By default, Django gives each model the following field::"
msgstr ""

#: ../../topics/db/models.txt:227
# 28240799dbd64dd2a62e7681cb2b1252
msgid "This is an auto-incrementing primary key."
msgstr ""

#: ../../topics/db/models.txt:229
# 26af0f07025b46ca9d4d85192d189def
msgid "If you'd like to specify a custom primary key, just specify :attr:`primary_key=True <Field.primary_key>` on one of your fields. If Django sees you've explicitly set :attr:`Field.primary_key`, it won't add the automatic ``id`` column."
msgstr ""

#: ../../topics/db/models.txt:234
# bcbe8797138449bf8cd63b98e6132b4a
msgid "Each model requires exactly one field to have :attr:`primary_key=True <Field.primary_key>`."
msgstr ""

#: ../../topics/db/models.txt:240
# 0b253526c64a4519800aa4c2c013b5d6
msgid "Verbose field names"
msgstr ""

#: ../../topics/db/models.txt:242
# b073eac562144044a2f1085395436805
msgid "Each field type, except for :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField`, takes an optional first positional argument -- a verbose name. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces."
msgstr ""

#: ../../topics/db/models.txt:249
# 3bb7bfaa19534b90a9f9d56313ccc2d4
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

#: ../../topics/db/models.txt:253
# 6964307d8079450cb3d17eb4cdbe6aa0
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

#: ../../topics/db/models.txt:257
# 9254833519a94e5cac029cc10857bb7d
msgid ":class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField` require the first argument to be a model class, so use the :attr:`~Field.verbose_name` keyword argument::"
msgstr ""

#: ../../topics/db/models.txt:266
# b7d6c373d2f5422db4d3dc4f2d4b8fa0
msgid "The convention is not to capitalize the first letter of the :attr:`~Field.verbose_name`. Django will automatically capitalize the first letter where it needs to."
msgstr ""

#: ../../topics/db/models.txt:271
# 7e8adb03ded04a61a7b27728027f88c5
msgid "Relationships"
msgstr ""

#: ../../topics/db/models.txt:273
# 403bdc462167456b8d336dcb300c0e3c
msgid "Clearly, the power of relational databases lies in relating tables to each other. Django offers ways to define the three most common types of database relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

#: ../../topics/db/models.txt:280
# 8fb9e1caab154a278f2a05baa2d7243b
msgid "To define a many-to-one relationship, use :class:`django.db.models.ForeignKey`. You use it just like any other :class:`~django.db.models.Field` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:284
# 81cb17cae8944172a2d5f7c86998b616
msgid ":class:`~django.db.models.ForeignKey` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:287
# c36e53e60b214240a4aa35661d2c5d48
msgid "For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a ``Manufacturer`` makes multiple cars but each ``Car`` only has one ``Manufacturer`` -- use the following definitions::"
msgstr ""

#: ../../topics/db/models.txt:298
# 83e7e83d8a6e490bbee2c0bee1c5e516
msgid "You can also create :ref:`recursive relationships <recursive-relationships>` (an object with a many-to-one relationship to itself) and :ref:`relationships to models not yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-foreignkey>` for details."
msgstr ""

#: ../../topics/db/models.txt:303
# 17adf12c615a4b1d9bdd6025ae25e639
msgid "It's suggested, but not required, that the name of a :class:`~django.db.models.ForeignKey` field (``manufacturer`` in the example above) be the name of the model, lowercase. You can, of course, call the field whatever you want. For example::"
msgstr ""

#: ../../topics/db/models.txt:314
# e107caee4a7c4816baf8f7eaf4904934
msgid ":class:`~django.db.models.ForeignKey` fields accept a number of extra arguments which are explained in :ref:`the model field reference <foreign-key-arguments>`. These options help define how the relationship should work; all are optional."
msgstr ""

#: ../../topics/db/models.txt:319
# 91ce30dc6dc946bfa839a25be7359abf
msgid "For details on accessing backwards-related objects, see the :ref:`Following relationships backward example <backwards-related-objects>`."
msgstr ""

#: ../../topics/db/models.txt:326
# fd50a4b3408f44a79e1ba40b9304b177
msgid "To define a many-to-many relationship, use :class:`~django.db.models.ManyToManyField`. You use it just like any other :class:`~django.db.models.Field` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:331
# 1d0cf105e8b349bb91af6a074b4a8f0f
msgid ":class:`~django.db.models.ManyToManyField` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:334
# 273aa0dfa9b14022be64d40153000df8
msgid "For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a ``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple toppings -- here's how you'd represent that::"
msgstr ""

#: ../../topics/db/models.txt:345
# 75db27747664447e8919f519678519b4
msgid "As with :class:`~django.db.models.ForeignKey`, you can also create :ref:`recursive relationships <recursive-relationships>` (an object with a many-to-many relationship to itself) and :ref:`relationships to models not yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-manytomany>` for details."
msgstr ""

#: ../../topics/db/models.txt:351
# 9c60e0a8179c4bb085d025a7e250dea6
msgid "It's suggested, but not required, that the name of a :class:`~django.db.models.ManyToManyField` (``toppings`` in the example above) be a plural describing the set of related model objects."
msgstr ""

#: ../../topics/db/models.txt:355
# 637acc070f374e6cb8f9482dd4341ccb
msgid "It doesn't matter which model has the :class:`~django.db.models.ManyToManyField`, but you should only put it in one of the models -- not both."
msgstr ""

#: ../../topics/db/models.txt:359
# 1a5d9df4493b4d5fbab53d63bc4d8048
msgid "Generally, :class:`~django.db.models.ManyToManyField` instances should go in the object that's going to be edited in the admin interface, if you're using Django's admin. In the above example, ``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :class:`~django.db.models.ManyToManyField` ) because it's more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it's set up above, the ``Pizza`` admin form would let users select the toppings."
msgstr ""

#: ../../topics/db/models.txt:369
# 1a70fea5fb7d4034b53fdc1e9d43bc7b
msgid ":class:`~django.db.models.ManyToManyField` fields also accept a number of extra arguments which are explained in :ref:`the model field reference <manytomany-arguments>`. These options help define how the relationship should work; all are optional."
msgstr ""

#: ../../topics/db/models.txt:377
# ad43cf45459349859154c822ebd312d8
msgid "Extra fields on many-to-many relationships"
msgstr ""

#: ../../topics/db/models.txt:379
# a29fe60f3bc6449380101563854450a8
msgid "When you're only dealing with simple many-to-many relationships such as mixing and matching pizzas and toppings, a standard :class:`~django.db.models.ManyToManyField` is all you need. However, sometimes you may need to associate data with the relationship between two models."
msgstr ""

#: ../../topics/db/models.txt:383
# ec1a36224f2744f290706e0559e66be0
msgid "For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a :class:`~django.db.models.ManyToManyField` to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group."
msgstr ""

#: ../../topics/db/models.txt:390
# f1e9a25ba17944d68210660daacea674
msgid "For these situations, Django allows you to specify the model that will be used to govern the many-to-many relationship. You can then put extra fields on the intermediate model. The intermediate model is associated with the :class:`~django.db.models.ManyToManyField` using the :attr:`through <ManyToManyField.through>` argument to point to the model that will act as an intermediary. For our musician example, the code would look something like this::"
msgstr ""

#: ../../topics/db/models.txt:417
# c590aab6bfa248cdb0e0b452476096bb
msgid "When you set up the intermediary model, you explicitly specify foreign keys to the models that are involved in the ManyToMany relation. This explicit declaration defines how the two models are related."
msgstr ""

#: ../../topics/db/models.txt:421
# e237ca987c8a4b58a1482df71560ed69
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

#: ../../topics/db/models.txt:423
# d13ebc642f8d46ebbbd0be673ef4884c
msgid "Your intermediate model must contain one - and *only* one - foreign key to the target model (this would be ``Person`` in our example). If you have more than one foreign key, a validation error will be raised."
msgstr ""

#: ../../topics/db/models.txt:427
# 5c3ee88e622e4674a3bdc15a4970a5ab
msgid "Your intermediate model must contain one - and *only* one - foreign key to the source model (this would be ``Group`` in our example). If you have more than one foreign key, a validation error will be raised."
msgstr ""

#: ../../topics/db/models.txt:431
# 3f09f3f1d8bb4001840924d8b5c79a79
msgid "The only exception to this is a model which has a many-to-many relationship to itself, through an intermediary model. In this case, two foreign keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many relation."
msgstr ""

#: ../../topics/db/models.txt:437
# 9a7f005992b941369d518e6e1509ba38
msgid "When defining a many-to-many relationship from a model to itself, using an intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField.symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

#: ../../topics/db/models.txt:442
# 3170f869dee042a5aafe1dd3695b356b
msgid "Now that you have set up your :class:`~django.db.models.ManyToManyField` to use your intermediary model (``Membership``, in this case), you're ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model::"
msgstr ""

#: ../../topics/db/models.txt:464
# 222ff01867f44013ba9afcd08ae9723e
msgid "Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

#: ../../topics/db/models.txt:474
# fe7396142f7043bd9477f540ec87267f
msgid "Why? You can't just create a relationship between a ``Person`` and a ``Group`` - you need to specify all the detail for the relationship required by the ``Membership`` model. The simple ``add``, ``create`` and assignment calls don't provide a way to specify this extra detail. As a result, they are disabled for many-to-many relationships that use an intermediate model. The only way to create this type of relationship is to create instances of the intermediate model."
msgstr ""

#: ../../topics/db/models.txt:482
# 09844b8cbef4413683a2f49606636c15
msgid "The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is disabled for similar reasons. However, the :meth:`~django.db.models.fields.related.RelatedManager.clear` method can be used to remove all many-to-many relationships for an instance::"
msgstr ""

#: ../../topics/db/models.txt:490
# c88744cecd3e497fa1a545efd2085378
msgid "Once you have established the many-to-many relationships by creating instances of your intermediate model, you can issue queries. Just as with normal many-to-many relationships, you can query using the attributes of the many-to-many-related model::"
msgstr ""

#: ../../topics/db/models.txt:499
# bce3145655c74988aebe4c4b60469596
msgid "As you are using an intermediate model, you can also query on its attributes::"
msgstr ""

#: ../../topics/db/models.txt:507
# ecdfe33daacd495c9b2d621b4b8c2634
msgid "If you need to access a membership's information you may do so by directly querying the ``Membership`` model::"
msgstr ""

#: ../../topics/db/models.txt:516
# 54ae8864342341d9a684efc3cad4b968
msgid "Another way to access the same information is by querying the :ref:`many-to-many reverse relationship<m2m-reverse-relationships>` from a ``Person`` object::"
msgstr ""

#: ../../topics/db/models.txt:530
# fec0f430252a4aef8cf97c0da43fb445
msgid "To define a one-to-one relationship, use :class:`~django.db.models.OneToOneField`. You use it just like any other ``Field`` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:534
# eb69f29be51449478bd8dd6807d21b18
msgid "This is most useful on the primary key of an object when that object \"extends\" another object in some way."
msgstr ""

#: ../../topics/db/models.txt:537
# 03742400baf24caf88856f7c38ddf45d
msgid ":class:`~django.db.models.OneToOneField` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:540
# d1ebcb8f35664132ab76a8b3504eb1f0
msgid "For example, if you were building a database of \"places\", you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the ``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django.db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; in fact, to handle this you'd typically use :ref:`inheritance <model-inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

#: ../../topics/db/models.txt:550
# 4f60d1e9368b497f8ffa1edd4aaaa3b6
msgid "As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive relationship <recursive-relationships>` can be defined and :ref:`references to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the model field reference <ref-onetoone>` for details."
msgstr ""

#: ../../topics/db/models.txt:558
# 0c98876728d0451290c48fb06c9b78d5
msgid ":class:`~django.db.models.OneToOneField` fields also accept one optional argument described in the :ref:`model field reference <ref-onetoone>`."
msgstr ""

#: ../../topics/db/models.txt:561
# 4531f2adf7974e45864432dd0cca017c
msgid ":class:`~django.db.models.OneToOneField` classes used to automatically become the primary key on a model. This is no longer true (although you can manually pass in the :attr:`~django.db.models.Field.primary_key` argument if you like). Thus, it's now possible to have multiple fields of type :class:`~django.db.models.OneToOneField` on a single model."
msgstr ""

#: ../../topics/db/models.txt:568
# 4f1056f2de50426bb219c75009fca232
msgid "Models across files"
msgstr ""

#: ../../topics/db/models.txt:570
# ba994416dd464858bdbe360d557ae392
msgid "It's perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the model that holds your model. Then, just refer to the other model class wherever needed. For example::"
msgstr ""

#: ../../topics/db/models.txt:581
# c0bfded051334fa2a3b753ca48bf63cc
msgid "Field name restrictions"
msgstr ""

#: ../../topics/db/models.txt:583
# bcb46d2aa2914c73b3f52663c76102ad
msgid "Django places only two restrictions on model field names:"
msgstr ""

#: ../../topics/db/models.txt:585
# 765dbf16160b452eb6d63027a0620895
msgid "A field name cannot be a Python reserved word, because that would result in a Python syntax error. For example::"
msgstr ""

#: ../../topics/db/models.txt:591
# 8f0b1cced6eb423dba83258d35edb2b1
msgid "A field name cannot contain more than one underscore in a row, due to the way Django's query lookup syntax works. For example::"
msgstr ""

#: ../../topics/db/models.txt:597
# b96510d7e84a406b98c342c6656c40c3
msgid "These limitations can be worked around, though, because your field name doesn't necessarily have to match your database column name. See the :attr:`~Field.db_column` option."
msgstr ""

#: ../../topics/db/models.txt:601
# ea5a3f434ee541309e383d34f53f51ff
msgid "SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed as model field names, because Django escapes all database table names and column names in every underlying SQL query. It uses the quoting syntax of your particular database engine."
msgstr ""

#: ../../topics/db/models.txt:607
# 5aacc2f7f92145c6ae5d803b699addec
msgid "Custom field types"
msgstr ""

#: ../../topics/db/models.txt:609
# 150b65cd24ca4da990c991624da9dcd9
msgid "If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../topics/db/models.txt:617
# 04728a31ac8b4bc486b35ef14554d1b2
msgid "Meta options"
msgstr ""

#: ../../topics/db/models.txt:619
# 3214304583c349e8a03116dae3bec939
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

#: ../../topics/db/models.txt:628
# 2f40dba55fe54ce6aef54afb005840e1
msgid "Model metadata is \"anything that's not a field\", such as ordering options (:attr:`~Options.ordering`), database table name (:attr:`~Options.db_table`), or human-readable singular and plural names (:attr:`~Options.verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, and adding ``class Meta`` to a model is completely optional."
msgstr ""

#: ../../topics/db/models.txt:634
# b9f43f8f18dd4c0a97d0bd1b0ad47011
msgid "A complete list of all possible ``Meta`` options can be found in the :doc:`model option reference </ref/models/options>`."
msgstr ""

#: ../../topics/db/models.txt:640
# dd848089c0634a27a64e59a5aab48c10
msgid "Model methods"
msgstr ""

#: ../../topics/db/models.txt:642
# fba65abb51ab40cb9ee926e6eaa84d34
msgid "Define custom methods on a model to add custom \"row-level\" functionality to your objects. Whereas :class:`~django.db.models.Manager` methods are intended to do \"table-wide\" things, model methods should act on a particular model instance."
msgstr ""

#: ../../topics/db/models.txt:646
# 6c1ead821ff54d72be0f14accf5c8f4c
msgid "This is a valuable technique for keeping business logic in one place -- the model."
msgstr ""

#: ../../topics/db/models.txt:649
# 07bfc51fa6744f68bec24631e3a8c312
msgid "For example, this model has a few custom methods::"
msgstr ""

#: ../../topics/db/models.txt:679
# 271e07467e8b42ab9b5817ec26cbb298
msgid "The last method in this example is a :term:`property`."
msgstr ""

#: ../../topics/db/models.txt:681
# f5ad4052fccd4dcfb42350a7f92d6b68
msgid "The :doc:`model instance reference </ref/models/instances>` has a complete list of :ref:`methods automatically given to each model <model-instance-methods>`. You can override most of these -- see `overriding predefined model methods`_, below -- but there are a couple that you'll almost always want to define:"
msgstr ""

#: ../../topics/db/models.txt:687
# 48ab805f3f964aa088281894c1694c15
msgid "A Python \"magic method\" that returns a unicode \"representation\" of any object. This is what Python and Django will use whenever a model instance needs to be coerced and displayed as a plain string. Most notably, this happens when you display an object in an interactive console or in the admin."
msgstr ""

#: ../../topics/db/models.txt:693
# 29130b850ae24e2c836e0e685d657003
msgid "You'll always want to define this method; the default isn't very helpful at all."
msgstr ""

#: ../../topics/db/models.txt:697
# 2117217a053946fb91829f4d0a3eb7ac
msgid "This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object."
msgstr ""

#: ../../topics/db/models.txt:701
# c61f7b1f289f455bb7aa1b54b7e14093
msgid "Any object that has a URL that uniquely identifies it should define this method."
msgstr ""

#: ../../topics/db/models.txt:707
# 15b2af31d3ad46c581caf2a488cd50f2
msgid "Overriding predefined model methods"
msgstr ""

#: ../../topics/db/models.txt:709
# cc50c295e1df40c2bef6900e002eb4ec
msgid "There's another set of :ref:`model methods <model-instance-methods>` that encapsulate a bunch of database behavior that you'll want to customize. In particular you'll often want to change the way :meth:`~Model.save` and :meth:`~Model.delete` work."
msgstr ""

#: ../../topics/db/models.txt:714
# 08d5b47d98da4fe0aa4661f12e9dda69
msgid "You're free to override these methods (and any other model method) to alter behavior."
msgstr ""

#: ../../topics/db/models.txt:717
# eab76a34af074a01b25ecd3851af74a6
msgid "A classic use-case for overriding the built-in methods is if you want something to happen whenever you save an object. For example (see :meth:`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

#: ../../topics/db/models.txt:730
# c9841a49c533421bb9b805e7003c6df0
msgid "You can also prevent saving::"
msgstr ""

#: ../../topics/db/models.txt:742
# 559103b7a47542e19906ef94cb0b188c
msgid "It's important to remember to call the superclass method -- that's that ``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won't happen and the database won't get touched."
msgstr ""

#: ../../topics/db/models.txt:748
# f7697f6f745f456ab269695943283fd2
msgid "It's also important that you pass through the arguments that can be passed to the model method -- that's what the ``*args, **kwargs`` bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new arguments. If you use ``*args, **kwargs`` in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added."
msgstr ""

#: ../../topics/db/models.txt:757
# aeac76ac60fd48e4bff1403dec3bbeff
msgid "Note that the :meth:`~Model.delete()` method for an object is not necessarily called when :ref:`deleting objects in bulk using a QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :data:`~django.db.models.signals.post_delete` signals."
msgstr ""

#: ../../topics/db/models.txt:764
# 61fb49a662b248afa2b7df551fb09a47
msgid "Executing custom SQL"
msgstr ""

#: ../../topics/db/models.txt:766
# f1874f92c276477b98cc45ae3d38642f
msgid "Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

#: ../../topics/db/models.txt:773
# 8002f5964ff6446da3a76c0d5a8c96b4
msgid "Model inheritance"
msgstr ""

#: ../../topics/db/models.txt:775
# 3924bc3c04104760911450dbc6cb0282
msgid "Model inheritance in Django works almost identically to the way normal class inheritance works in Python. The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models."
msgstr ""

#: ../../topics/db/models.txt:782
# ca3dc8290e0b49a4a5b8ce6268323cd4
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

#: ../../topics/db/models.txt:784
# 882360a3c49c4ef090a51a6dcd4717b9
msgid "Often, you will just want to use the parent class to hold information that you don't want to have to type out for each child model. This class isn't going to ever be used in isolation, so :ref:`abstract-base-classes` are what you're after."
msgstr ""

#: ../../topics/db/models.txt:788
# 8b497afcf0b54a35a0403c6a65dbbad1
msgid "If you're subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, :ref:`multi-table-inheritance` is the way to go."
msgstr ""

#: ../../topics/db/models.txt:791
# 067f4b428a274967a8bc0e5de678a9b1
msgid "Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use :ref:`proxy-models`."
msgstr ""

#: ../../topics/db/models.txt:798
# f76b1bd066a04a648264f7d1aec2eb64
msgid "Abstract base classes"
msgstr ""

#: ../../topics/db/models.txt:800
# 99959cbf760140cc8d4dc83143a5474b
msgid "Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put ``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class. It is an error to have fields in the abstract base class with the same name as those in the child (and Django will raise an exception)."
msgstr ""

#: ../../topics/db/models.txt:809
#: ../../topics/i18n/translation.txt:574
# e2443a84b28c489ea6e963fffd3f5389
# f4535363b0394e6696a40272452c8156
msgid "An example::"
msgstr ""

#: ../../topics/db/models.txt:821
# 78abea3b3c5f409eabb12687a882b422
msgid "The ``Student`` model will have three fields: ``name``, ``age`` and ``home_group``. The ``CommonInfo`` model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

#: ../../topics/db/models.txt:826
# dcf0343a09814da1be6890567b15a983
msgid "For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, whilst still only creating one database table per child model at the database level."
msgstr ""

#: ../../topics/db/models.txt:831
# 157c42902cdd4159848e157ba50193f1
msgid "``Meta`` inheritance"
msgstr ""

#: ../../topics/db/models.txt:833
# be7ea0b416654830b1f900ddee80e50c
msgid "When an abstract base class is created, Django makes any :ref:`Meta <meta-options>` inner class you declared in the base class available as an attribute. If a child class does not declare its own :ref:`Meta <meta-options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If the child wants to extend the parent's :ref:`Meta <meta-options>` class, it can subclass it. For example::"
msgstr ""

#: ../../topics/db/models.txt:850
# 798c84ffa74b48fb8c426c9ee6aaafba
msgid "Django does make one adjustment to the :ref:`Meta <meta-options>` class of an abstract base class: before installing the :ref:`Meta <meta-options>` attribute, it sets ``abstract=False``. This means that children of abstract base classes don't automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set ``abstract=True`` each time."
msgstr ""

#: ../../topics/db/models.txt:857
# c5142d98351e482fa4d0790106c6bc73
msgid "Some attributes won't make sense to include in the :ref:`Meta <meta-options>` class of an abstract base class. For example, including ``db_table`` would mean that all the child classes (the ones that don't specify their own :ref:`Meta <meta-options>`) would use the same database table, which is almost certainly not what you want."
msgstr ""

#: ../../topics/db/models.txt:865
# 3ef3d5bee935458d91bfd8830aeb9741
msgid "Be careful with ``related_name``"
msgstr ""

#: ../../topics/db/models.txt:867
# 0b782ae2d781401d845abde4560606fd
msgid "If you are using the :attr:`~django.db.models.ForeignKey.related_name` attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always specify a *unique* reverse name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) each time."
msgstr ""

#: ../../topics/db/models.txt:875
# cba9d7352b644f6ca2f16caf9f889e87
msgid "To work around this problem, when you are using :attr:`~django.db.models.ForeignKey.related_name` in an abstract base class (only), part of the name should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

#: ../../topics/db/models.txt:879
# 361401a85fc443c9906ba22da147874b
msgid "``'%(class)s'`` is replaced by the lower-cased name of the child class that the field is used in."
msgstr ""

#: ../../topics/db/models.txt:881
# d8cc451dc1db46259eb52a7a42c227e8
msgid "``'%(app_label)s'`` is replaced by the lower-cased name of the app the child class is contained within. Each installed application name must be unique and the model class names within each app must also be unique, therefore the resulting name will end up being different."
msgstr ""

#: ../../topics/db/models.txt:886
# 386de9aba0a94b40a1bb2463553a362d
msgid "For example, given an app ``common/models.py``::"
msgstr ""

#: ../../topics/db/models.txt:900
# 5e5b9684a5da4f8b8bb91801f48f1c68
msgid "Along with another app ``rare/models.py``::"
msgstr ""

#: ../../topics/db/models.txt:907
# 427bb3053170468e92e5443b2c515341
msgid "The reverse name of the ``common.ChildA.m2m`` field will be ``common_childa_related``, whilst the reverse name of the ``common.ChildB.m2m`` field will be ``common_childb_related``, and finally the reverse name of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to construct your related name, but if you forget to use it, Django will raise errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

#: ../../topics/db/models.txt:915
# 0c355e33ae05456a80bae2df4fbb31f4
msgid "If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by ``'_set'``, just as it normally would be if you'd declared the field directly on the child class. For example, in the above code, if the :attr:`~django.db.models.ForeignKey.related_name` attribute was omitted, the reverse name for the ``m2m`` field would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the ``ChildB`` field."
msgstr ""

#: ../../topics/db/models.txt:927
# b56ffbf35f39441c8396e6cd807ad4ba
msgid "Multi-table inheritance"
msgstr ""

#: ../../topics/db/models.txt:929
# 57ffba38c53342479fcb363d04e45c2f
msgid "The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created :class:`~django.db.models.OneToOneField`). For example::"
msgstr ""

#: ../../topics/db/models.txt:944
# 2292d3a9dd904a73912f6ac346516bde
msgid "All of the fields of ``Place`` will also be available in ``Restaurant``, although the data will reside in a different database table. So these are both possible::"
msgstr ""

#: ../../topics/db/models.txt:951
# 1c7aaaad5f6645c0a930f3c49778f9aa
msgid "If you have a ``Place`` that is also a ``Restaurant``, you can get from the ``Place`` object to the ``Restaurant`` object by using the lower-case version of the model name::"
msgstr ""

#: ../../topics/db/models.txt:960
# 94ef90d0c9774cd5adf9650adfaee8ef
msgid "However, if ``p`` in the above example was *not* a ``Restaurant`` (it had been created directly as a ``Place`` object or was the parent of some other class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist exception."
msgstr ""

#: ../../topics/db/models.txt:965
# 43791d104fbb4e0e9d3a801810a72397
msgid "``Meta`` and multi-table inheritance"
msgstr ""

#: ../../topics/db/models.txt:967
# 19a934209fd34f78a19513606020fb5c
msgid "In the multi-table inheritance situation, it doesn't make sense for a child class to inherit from its parent's :ref:`Meta <meta-options>` class. All the :ref:`Meta <meta-options>` options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn't exist in its own right)."
msgstr ""

#: ../../topics/db/models.txt:974
# b9cefa33388d4c4b9aa4d90cdc9ffcbd
msgid "So a child model does not have access to its parent's :ref:`Meta <meta-options>` class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an :attr:`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models.Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

#: ../../topics/db/models.txt:981
# d38c3a5276e14983b644fb8b37315de4
msgid "If the parent has an ordering and you don't want the child to have any natural ordering, you can explicitly disable it::"
msgstr ""

#: ../../topics/db/models.txt:991
# 07b1e787a48d439982a8a9d55b058b85
msgid "Inheritance and reverse relations"
msgstr ""

#: ../../topics/db/models.txt:993
# 20883f8f43dc435fb310989385efedfd
msgid "Because multi-table inheritance uses an implicit :class:`~django.db.models.OneToOneField` to link the child and the parent, it's possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default :attr:`~django.db.models.ForeignKey.related_name` value for :class:`~django.db.models.ForeignKey` and :class:`~django.db.models.ManyToManyField` relations.  If you are putting those types of relations on a subclass of another model, you **must** specify the :attr:`~django.db.models.ForeignKey.related_name` attribute on each such field. If you forget, Django will raise an error when you run :djadmin:`validate` or :djadmin:`syncdb`."
msgstr ""

#: ../../topics/db/models.txt:1006
# a0249a7e4b8b4c98aa1fd1bb80fc9155
msgid "For example, using the above ``Place`` class again, let's create another subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

#: ../../topics/db/models.txt:1015
# 642821d70c2c4382afccff0b16e33b11
msgid "Specifying the parent link field"
msgstr ""

#: ../../topics/db/models.txt:1017
# 9b3cea8144094f24bbfa6f9169953fda
msgid "As mentioned, Django will automatically create a :class:`~django.db.models.OneToOneField` linking your child class back any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own :class:`~django.db.models.OneToOneField` and set :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to indicate that your field is the link back to the parent class."
msgstr ""

#: ../../topics/db/models.txt:1028
# 7e65d86141664f41a16a72278402a358
msgid "Proxy models"
msgstr ""

#: ../../topics/db/models.txt:1030
# e254784ccfbd4976a220ac97da0b1bd4
msgid "When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model -- perhaps to change the default manager, or add a new method."
msgstr ""

#: ../../topics/db/models.txt:1037
# f7f9504f97964c979013a53fc578a5f6
msgid "This is what proxy model inheritance is for: creating a *proxy* for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original."
msgstr ""

#: ../../topics/db/models.txt:1044
# 74afc9ee398c409fa709c4e935df3ae3
msgid "Proxy models are declared like normal models. You tell Django that it's a proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute of the ``Meta`` class to ``True``."
msgstr ""

#: ../../topics/db/models.txt:1048
# 2fe7792f062a4d858ba40af7c24829a0
msgid "For example, suppose you want to add a method to the standard :class:`~django.contrib.auth.models.User` model that will be used in your templates. You can do it like this::"
msgstr ""

#: ../../topics/db/models.txt:1061
# 8ae37742e93841698c3d81162f86877f
msgid "The ``MyUser`` class operates on the same database table as its parent :class:`~django.contrib.auth.models.User` class. In particular, any new instances of :class:`~django.contrib.auth.models.User` will also be accessible through ``MyUser``, and vice-versa::"
msgstr ""

#: ../../topics/db/models.txt:1070
# e74af8a887f345a6bbf88a0d314900b9
msgid "You could also use a proxy model to define a different default ordering on a model. The standard :class:`~django.contrib.auth.models.User` model has no ordering defined on it (intentionally; sorting is expensive and we don't want to do it all the time when we fetch users). You might want to regularly order by the ``username`` attribute when you use the proxy. This is easy::"
msgstr ""

#: ../../topics/db/models.txt:1081
# a34fd06a095c478d8f693b988f61418d
msgid "Now normal :class:`~django.contrib.auth.models.User` queries will be unordered and ``OrderedUser`` queries will be ordered by ``username``."
msgstr ""

#: ../../topics/db/models.txt:1085
# 04d800374500439f9ce26c74d4483329
msgid "QuerySets still return the model that was requested"
msgstr ""

#: ../../topics/db/models.txt:1087
# a72e57c9874647f5a0537959c81dae2d
msgid "There is no way to have Django return, say, a ``MyUser`` object whenever you query for :class:`~django.contrib.auth.models.User` objects. A queryset for ``User`` objects will return those types of objects. The whole point of proxy objects is that code relying on the original ``User`` will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the ``User`` (or any other) model everywhere with something of your own creation."
msgstr ""

#: ../../topics/db/models.txt:1096
# c4643d31a33b436dadc1f4302ea1e2eb
msgid "Base class restrictions"
msgstr ""

#: ../../topics/db/models.txt:1098
# c05510c078a84b0a9a3e5f87e3b3540b
msgid "A proxy model must inherit from exactly one non-abstract model class. You can't inherit from multiple non-abstract models as the proxy model doesn't provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do *not* define any model fields."
msgstr ""

#: ../../topics/db/models.txt:1104
# 737fe6fc0fd3461bb3435eaefc9a3a83
msgid "Proxy models inherit any ``Meta`` options that they don't define from their non-abstract model parent (the model they are proxying for)."
msgstr ""

#: ../../topics/db/models.txt:1108
# d77ab69e39b5484aacb2bc7369953049
msgid "Proxy model managers"
msgstr ""

#: ../../topics/db/models.txt:1110
# 82d338751cbb4284bb0837f4d6cc6287
msgid "If you don't specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available."
msgstr ""

#: ../../topics/db/models.txt:1115
# bdb7596f426946948c352d2afea03bdf
msgid "Continuing our example from above, you could change the default manager used when you query the ``User`` model like this::"
msgstr ""

#: ../../topics/db/models.txt:1127
# 5ee02c2eeee44330a52848e0d0b040c0
msgid "If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the :ref:`custom manager <custom-managers-and-inheritance>` documentation: create a base class containing the new managers and inherit that after the primary base class::"
msgstr ""

#: ../../topics/db/models.txt:1143
# 798b8620344f41a29edc1dca5c04f4bc
msgid "You probably won't need to do this very often, but, when you do, it's possible."
msgstr ""

#: ../../topics/db/models.txt:1149
# 78b50db1bc7445ad81d3b023c49a209b
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

#: ../../topics/db/models.txt:1151
# 46110c126061478fa21db234e690214f
msgid "Proxy model inheritance might look fairly similar to creating an unmanaged model, using the :attr:`~django.db.models.Options.managed` attribute on a model's ``Meta`` class. The two alternatives are not quite the same and it's worth considering which one you should use."
msgstr ""

#: ../../topics/db/models.txt:1156
# a5714d62e32e4190868b7f0e73f8cf4d
msgid "One difference is that you can (and, in fact, must unless you want an empty model) specify model fields on models with ``Meta.managed=False``. You could, with careful setting of :attr:`Meta.db_table <django.db.models.Options.db_table>` create an unmanaged model that shadowed an existing model and add Python methods to it. However, that would be very repetitive and fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

#: ../../topics/db/models.txt:1164
# 8ebf134807ed41c7b39994fe84c3cdc9
msgid "The other difference that is more important for proxy models, is how model managers are handled. Proxy models are intended to behave exactly like the model they are proxying for. So they inherit the parent model's managers, including the default manager. In the normal multi-table model inheritance case, children do not inherit managers from their parents as the custom managers aren't always appropriate when extra fields are involved. The :ref:`manager documentation <custom-managers-and-inheritance>` has more details about this latter case."
msgstr ""

#: ../../topics/db/models.txt:1173
# 1018a50ea73641a48f7b60f12e2e1f6b
msgid "When these two features were implemented, attempts were made to squash them into a single option. It turned out that interactions with inheritance, in general, and managers, in particular, made the API very complicated and potentially difficult to understand and use. It turned out that two options were needed in any case, so the current separation arose."
msgstr ""

#: ../../topics/db/models.txt:1179
# 0eba3a0792d34323b0958cd3a082eb4d
msgid "So, the general rules are:"
msgstr ""

#: ../../topics/db/models.txt:1181
# df4f6758464b4ceabf1f4bee649e5cfd
msgid "If you are mirroring an existing model or database table and don't want all the original database table columns, use ``Meta.managed=False``. That option is normally useful for modeling database views and tables not under the control of Django."
msgstr ""

#: ../../topics/db/models.txt:1185
# e7c5a9dc71284d94b8c7b00f39462d34
msgid "If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use ``Meta.proxy=True``. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved."
msgstr ""

#: ../../topics/db/models.txt:1191
# 0c4000b5aff7449dacad90f13fdd0e74
msgid "Multiple inheritance"
msgstr ""

#: ../../topics/db/models.txt:1193
# 0899d7551b3d4f49aed24c30d11dbb2a
msgid "Just as with Python's subclassing, it's possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. :ref:`Meta <meta-options>`) appears in will be the one that is used; for example, this means that if multiple parents contain a :ref:`Meta <meta-options>` class, only the first one is going to be used, and all others will be ignored."
msgstr ""

#: ../../topics/db/models.txt:1200
# a499c1020aa94032b387412908c00f03
msgid "Generally, you won't need to inherit from multiple parents. The main use-case where this is useful is for \"mix-in\" classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won't have to struggle to work out where a particular piece of information is coming from."
msgstr ""

#: ../../topics/db/models.txt:1208
# c7b198047f21405eb518142b9e5f98aa
msgid "Field name \"hiding\" is not permitted"
msgstr ""

#: ../../topics/db/models.txt:1210
# 69025232b6b646ee82c4d0794d6799a4
msgid "In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this is not permitted for attributes that are :class:`~django.db.models.Field` instances (at least, not at the moment). If a base class has a field called ``author``, you cannot create another model field called ``author`` in any class that inherits from that base class."
msgstr ""

#: ../../topics/db/models.txt:1217
# 84b08a8ea4b2453b8e6edb23d05e116d
msgid "Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in ``Model.__init__``) and serialization. These are features which normal Python class inheritance doesn't have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn't arbitrary."
msgstr ""

#: ../../topics/db/models.txt:1224
# a39b4a94e51b4ab9a5a255598b4e5301
msgid "This restriction only applies to attributes which are :class:`~django.db.models.Field` instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables)."
msgstr ""

#: ../../topics/db/models.txt:1232
# 2b003125094e4871a4a617781ade1bd7
msgid "Django will raise a :exc:`~django.core.exceptions.FieldError` if you override any model field in any ancestor model."
msgstr ""

#: ../../topics/db/multi-db.txt:3
# cc681829c6a94ee5b37bd6433a9d93e6
msgid "Multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:7
# 3f2774f82ad847caa3ae97aeec86205a
msgid "This topic guide describes Django's support for interacting with multiple databases. Most of the rest of Django's documentation assumes you are interacting with a single database. If you want to interact with multiple databases, you'll need to take some additional steps."
msgstr ""

#: ../../topics/db/multi-db.txt:13
# 8ad10675300d433a968211d2b2ff105c
msgid "Defining your databases"
msgstr ""

#: ../../topics/db/multi-db.txt:15
# dc95651dfae6460fa447fdafec057ccc
msgid "The first step to using more than one database with Django is to tell Django about the database servers you'll be using. This is done using the :setting:`DATABASES` setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the :setting:`DATABASES` documentation."
msgstr ""

#: ../../topics/db/multi-db.txt:23
# b17113e995b2400692fa82fd3b917d74
msgid "Databases can have any alias you choose. However, the alias ``default`` has special significance. Django uses the database with the alias of ``default`` when no other database has been selected. If you don't have a ``default`` database, you need to be careful to always specify the database that you want to use."
msgstr ""

#: ../../topics/db/multi-db.txt:29
# 45fce75e2c7d462e969fcb0b67b9a170
msgid "The following is an example ``settings.py`` snippet defining two databases -- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

#: ../../topics/db/multi-db.txt:50
# 19f96b417752469fb9ec9d62dc3bfa78
msgid "If you attempt to access a database that you haven't defined in your :setting:`DATABASES` setting, Django will raise a ``django.db.utils.ConnectionDoesNotExist`` exception."
msgstr ""

#: ../../topics/db/multi-db.txt:55
# bdf52456bd564e61aa99ce4b7d1931b8
msgid "Synchronizing your databases"
msgstr ""

#: ../../topics/db/multi-db.txt:57
# 62d506b3df3143a48db4b4a4f454eac6
msgid "The :djadmin:`syncdb` management command operates on one database at a time. By default, it operates on the ``default`` database, but by providing a :djadminopt:`--database` argument, you can tell syncdb to synchronize a different database. So, to synchronize all models onto all databases in our example, you would need to call::"
msgstr ""

#: ../../topics/db/multi-db.txt:66
# b34cdc4d37964d0c93f6f40fc5b37167
msgid "If you don't want every application to be synchronized onto a particular database, you can define a :ref:`database router<topics-db-multi-db-routing>` that implements a policy constraining the availability of particular models."
msgstr ""

#: ../../topics/db/multi-db.txt:71
# f0654530547d4e608242e0d775a083aa
msgid "Alternatively, if you want fine-grained control of synchronization, you can pipe all or part of the output of :djadmin:`sqlall` for a particular application directly into your database prompt, like this::"
msgstr ""

#: ../../topics/db/multi-db.txt:78
# 143e36ba391642c58e49e85c440d653b
msgid "Using other management commands"
msgstr ""

#: ../../topics/db/multi-db.txt:80
# d72db41ea5774157b9a9d6cb70c2b669
msgid "The other ``django-admin.py`` commands that interact with the database operate in the same way as :djadmin:`syncdb` -- they only ever operate on one database at a time, using :djadminopt:`--database` to control the database used."
msgstr ""

#: ../../topics/db/multi-db.txt:88
# 0bb91faaeba24493a33284b810114e4b
msgid "Automatic database routing"
msgstr ""

#: ../../topics/db/multi-db.txt:90
# 27acdd228f9f45cda4c89d754d775279
msgid "The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain 'sticky' to their original database (i.e., an object retrieved from the ``foo`` database will be saved on the same database). The default routing scheme ensures that if a database isn't specified, all queries fall back to the ``default`` database."
msgstr ""

#: ../../topics/db/multi-db.txt:97
# eee3cfa146b5461e87beb4f096765bee
msgid "You don't have to do anything to activate the default routing scheme -- it is provided 'out of the box' on every Django project. However, if you want to implement more interesting database allocation behaviors, you can define and install your own database routers."
msgstr ""

#: ../../topics/db/multi-db.txt:103
# c3b481eeb4324a85988efcf1d1d8fd18
msgid "Database routers"
msgstr ""

#: ../../topics/db/multi-db.txt:105
# b8e54565bc9a4adbaa27979e5f3158ec
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

#: ../../topics/db/multi-db.txt:109
# 6fd229e4b27b4ec0af2e3b0e3f65e407
msgid "Suggest the database that should be used for read operations for objects of type ``model``."
msgstr ""

#: ../../topics/db/multi-db.txt:112
#: ../../topics/db/multi-db.txt:124
# f9b77b2dc7dd43a79309f2fb0a9a06dc
# bf224893c8aa40a384941508155c3aa2
msgid "If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the ``hints`` dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-db-hints>`."
msgstr ""

#: ../../topics/db/multi-db.txt:117
#: ../../topics/db/multi-db.txt:129
# 8948028c4f444378bab55ac5f76d03cc
# b1af9b896f164bb49c19f1da38f34c71
msgid "Returns None if there is no suggestion."
msgstr ""

#: ../../topics/db/multi-db.txt:121
# efda8aa5f43a4f8a9d2282df85dc2983
msgid "Suggest the database that should be used for writes of objects of type Model."
msgstr ""

#: ../../topics/db/multi-db.txt:133
# 0b3051a00ba341799d6e8e4adcf8d3e5
msgid "Return True if a relation between obj1 and obj2 should be allowed, False if the relation should be prevented, or None if the router has no opinion. This is purely a validation operation, used by foreign key and many to many operations to determine if a relation should be allowed between two objects."
msgstr ""

#: ../../topics/db/multi-db.txt:141
# ce906348aec3469689da7c9fb6cc84de
msgid "Determine if the ``model`` should be synchronized onto the database with alias ``db``. Return True if the model should be synchronized, False if it should not be synchronized, or None if the router has no opinion. This method can be used to determine the availability of a model on a given database."
msgstr ""

#: ../../topics/db/multi-db.txt:147
# b0fd7c8ba91d41e49c00e607766f88f9
msgid "A router doesn't have to provide *all* these methods -- it may omit one or more of them. If one of the methods is omitted, Django will skip that router when performing the relevant check."
msgstr ""

#: ../../topics/db/multi-db.txt:154
# 2510d4d1d4aa452ab7a5539e21b5add7
msgid "Hints"
msgstr ""

#: ../../topics/db/multi-db.txt:156
# a2ac0f21b99847e09d65bd183898e88b
msgid "The hints received by the database router can be used to decide which database should receive a given request."
msgstr ""

#: ../../topics/db/multi-db.txt:159
# 7d642ad24acb455d955b37a9b7219dba
msgid "At present, the only hint that will be provided is ``instance``, an object instance that is related to the read or write operation that is underway. This might be the instance that is being saved, or it might be an instance that is being added in a many-to-many relation. In some cases, no instance hint will be provided at all. The router checks for the existence of an instance hint, and determine if that hint should be used to alter routing behavior."
msgstr ""

#: ../../topics/db/multi-db.txt:168
# 9fca1f8dc2ff4c5895815a064a42027a
msgid "Using routers"
msgstr ""

#: ../../topics/db/multi-db.txt:170
# 72528f4d576e49939f9f499390a8d729
msgid "Database routers are installed using the :setting:`DATABASE_ROUTERS` setting. This setting defines a list of class names, each specifying a router that should be used by the master router (``django.db.router``)."
msgstr ""

#: ../../topics/db/multi-db.txt:175
# de6e6b711fd5412c90cde2cce73963fe
msgid "The master router is used by Django's database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current ``_state.db`` of the hint instance. If a hint instance wasn't provided, or the instance doesn't currently have database state, the master router will allocate the ``default`` database."
msgstr ""

#: ../../topics/db/multi-db.txt:185
#: ../../topics/db/tablespaces.txt:45
#: ../../topics/logging.txt:231
# 16b35148c6f54c02a77dc042fdfa0730
# c20fa00de07b4452a084b682c66a6855
# 66bf02f932ba4576ab0f6a2bdefddb94
msgid "An example"
msgstr ""

#: ../../topics/db/multi-db.txt:189
# 67137bbdccc04d748612c41d720bc4d9
msgid "This example is intended as a demonstration of how the router infrastructure can be used to alter database usage. It intentionally ignores some complex issues in order to demonstrate how routers are used."
msgstr ""

#: ../../topics/db/multi-db.txt:194
# 2feca3703aff4ce28e92da0472f0940f
msgid "This example won't work if any of the models in ``myapp`` contain relationships to models outside of the ``other`` database. :ref:`Cross-database relationships <no_cross_database_relations>` introduce referential integrity problems that Django can't currently handle."
msgstr ""

#: ../../topics/db/multi-db.txt:200
# 435bacb8ef4f431cbe9705fff402d714
msgid "The master/slave configuration described is also flawed -- it doesn't provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the slaves). It also doesn't consider the interaction of transactions with the database utilization strategy."
msgstr ""

#: ../../topics/db/multi-db.txt:206
# 2b66082981d94b378e7e5d186fa37e15
msgid "So - what does this mean in practice? Say you want ``myapp`` to exist on the ``other`` database, and you want all other models in a master/slave relationship between the databases ``master``, ``slave1`` and ``slave2``. To implement this, you would need 2 routers::"
msgstr ""

#: ../../topics/db/multi-db.txt:263
# 2d784fe7b7204de3a92cd642f380a509
msgid "Then, in your settings file, add the following (substituting ``path.to.`` with the actual python path to the module where you define the routers)::"
msgstr ""

#: ../../topics/db/multi-db.txt:268
# 2c6cc6eec9a2490f946813cab0a686aa
msgid "The order in which routers are processed is significant. Routers will be queried in the order the are listed in the :setting:`DATABASE_ROUTERS` setting . In this example, the ``MyAppRouter`` is processed before the ``MasterSlaveRouter``, and as a result, decisions concerning the models in ``myapp`` are processed before any other decision is made. If the :setting:`DATABASE_ROUTERS` setting listed the two routers in the other order, ``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all nature of the MasterSlaveRouter implementation would mean that all models would be available on all databases."
msgstr ""

#: ../../topics/db/multi-db.txt:279
# dd245c8346f54453b776a16d081b97d3
msgid "With this setup installed, lets run some Django code::"
msgstr ""

#: ../../topics/db/multi-db.txt:306
# 95af9a88d53d449cb79bc97b241306ba
msgid "Manually selecting a database"
msgstr ""

#: ../../topics/db/multi-db.txt:308
# 32cd58009f674beea3ce9b0a5f855320
msgid "Django also provides an API that allows you to maintain complete control over database usage in your code. A manually specified database allocation will take priority over a database allocated by a router."
msgstr ""

#: ../../topics/db/multi-db.txt:313
# 88d6c4a8c6994e5eaef6b580fb1734e6
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

#: ../../topics/db/multi-db.txt:315
# 68aacc2405c64c7cbf524bc7a2091e80
msgid "You can select the database for a ``QuerySet`` at any point in the ``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get another ``QuerySet`` that uses the specified database."
msgstr ""

#: ../../topics/db/multi-db.txt:319
# 3eb970130a26450087de6846ef20c597
msgid "``using()`` takes a single argument: the alias of the database on which you want to run the query. For example::"
msgstr ""

#: ../../topics/db/multi-db.txt:332
# 0559e0c8b00943ada47ca22ff2f6cf5a
msgid "Selecting a database for ``save()``"
msgstr ""

#: ../../topics/db/multi-db.txt:334
# 039a720809774fb999ecbcd61fbd39bc
msgid "Use the ``using`` keyword to ``Model.save()`` to specify to which database the data should be saved."
msgstr ""

#: ../../topics/db/multi-db.txt:337
# 14931a82462a4b6e934a6fc88c9744a1
msgid "For example, to save an object to the ``legacy_users`` database, you'd use this::"
msgstr ""

#: ../../topics/db/multi-db.txt:342
# 99a68387594f49ac99f7d475d629726b
msgid "If you don't specify ``using``, the ``save()`` method will save into the default database allocated by the routers."
msgstr ""

#: ../../topics/db/multi-db.txt:346
# a5de0f8e284c4a5897a025291abc7d46
msgid "Moving an object from one database to another"
msgstr ""

#: ../../topics/db/multi-db.txt:348
# d43f9ac515814038af2f381d3ef90f98
msgid "If you've saved an instance to one database, it might be tempting to use ``save(using=...)`` as a way to migrate the instance to a new database. However, if you don't take appropriate steps, this could have some unexpected consequences."
msgstr ""

#: ../../topics/db/multi-db.txt:353
# 0eb2d1aa7af74a56997d6f6c299d5e14
msgid "Consider the following example::"
msgstr ""

#: ../../topics/db/multi-db.txt:359
# 68675b8fed494b15a5d7bf70176e4c3b
msgid "In statement 1, a new ``Person`` object is saved to the ``first`` database. At this time, ``p`` doesn't have a primary key, so Django issues a SQL ``INSERT`` statement. This creates a primary key, and Django assigns that primary key to ``p``."
msgstr ""

#: ../../topics/db/multi-db.txt:364
# 2345c2e0391141e98eb52be080c66a5b
msgid "When the save occurs in statement 2, ``p`` already has a primary key value, and Django will attempt to use that primary key on the new database. If the primary key value isn't in use in the ``second`` database, then you won't have any problems -- the object will be copied to the new database."
msgstr ""

#: ../../topics/db/multi-db.txt:370
# 9c933e03912747da961616594bc05897
msgid "However, if the primary key of ``p`` is already in use on the ``second`` database, the existing object in the ``second`` database will be overridden when ``p`` is saved."
msgstr ""

#: ../../topics/db/multi-db.txt:374
# 61d871ddce484e66ab6066238219f2c1
msgid "You can avoid this in two ways. First, you can clear the primary key of the instance. If an object has no primary key, Django will treat it as a new object, avoiding any loss of data on the ``second`` database::"
msgstr ""

#: ../../topics/db/multi-db.txt:384
# dde65a5bce6f404a8596c882bad2458a
msgid "The second option is to use the ``force_insert`` option to ``save()`` to ensure that Django does a SQL ``INSERT``::"
msgstr ""

#: ../../topics/db/multi-db.txt:391
# f6d8e62088134cfbb287eae196a13543
msgid "This will ensure that the person named ``Fred`` will have the same primary key on both databases. If that primary key is already in use when you try to save onto the ``second`` database, an error will be raised."
msgstr ""

#: ../../topics/db/multi-db.txt:397
# f0af32b4602949feae69ab10c7adb7ec
msgid "Selecting a database to delete from"
msgstr ""

#: ../../topics/db/multi-db.txt:399
# 4a508af5aefa4c37b99d740c1a4fa9aa
msgid "By default, a call to delete an existing object will be executed on the same database that was used to retrieve the object in the first place::"
msgstr ""

#: ../../topics/db/multi-db.txt:406
# fd8f387b5ba14df0a05edd82a1936638
msgid "To specify the database from which a model will be deleted, pass a ``using`` keyword argument to the ``Model.delete()`` method. This argument works just like the ``using`` keyword argument to ``save()``."
msgstr ""

#: ../../topics/db/multi-db.txt:410
# d2f3d2bad5e642ab976919063c9bdc8b
msgid "For example, if you're migrating a user from the ``legacy_users`` database to the ``new_users`` database, you might use these commands::"
msgstr ""

#: ../../topics/db/multi-db.txt:417
# c0a81338af7144b4b05eadbb8b260669
msgid "Using managers with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:419
# ac933064d22f43498620193e95cd2898
msgid "Use the ``db_manager()`` method on managers to give managers access to a non-default database."
msgstr ""

#: ../../topics/db/multi-db.txt:422
# 5b881163b73849049b66d364f9a8206d
msgid "For example, say you have a custom manager method that touches the database -- ``User.objects.create_user()``. Because ``create_user()`` is a manager method, not a ``QuerySet`` method, you can't do ``User.objects.using('new_users').create_user()``. (The ``create_user()`` method is only available on ``User.objects``, the manager, not on ``QuerySet`` objects derived from the manager.) The solution is to use ``db_manager()``, like this::"
msgstr ""

#: ../../topics/db/multi-db.txt:432
# a5369b0100174a23be931ab7996660af
msgid "``db_manager()`` returns a copy of the manager bound to the database you specify."
msgstr ""

#: ../../topics/db/multi-db.txt:435
# 0d8fdf2f77914c2197370beefa082a27
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:437
# 70bcbbcb9fa8480fb6b93fcf2b139b4b
msgid "If you're overriding ``get_query_set()`` on your manager, be sure to either call the method on the parent (using ``super()``) or do the appropriate handling of the ``_db`` attribute on the manager (a string containing the name of the database to use)."
msgstr ""

#: ../../topics/db/multi-db.txt:442
# 85ac3c05417d4f0c9bdd3912c74eec58
msgid "For example, if you want to return a custom ``QuerySet`` class from the ``get_query_set`` method, you could do this::"
msgstr ""

#: ../../topics/db/multi-db.txt:453
# 439d04e2da0d4f979728dee20aae4eae
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

#: ../../topics/db/multi-db.txt:455
# a0de4135f17a4c67b1198e824dd0fe8d
msgid "Django's admin doesn't have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you'll need to write custom :class:`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use a specific database for content."
msgstr ""

#: ../../topics/db/multi-db.txt:461
# b03d64c3c8414162a603481267d96615
msgid "``ModelAdmin`` objects have five methods that require customization for multiple-database support::"
msgstr ""

#: ../../topics/db/multi-db.txt:490
# db134582387240878d1d5fa253ab002c
msgid "The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all ``User`` objects are in the ``other`` database). If your usage of multiple databases is more complex, your ``ModelAdmin`` will need to reflect that strategy."
msgstr ""

#: ../../topics/db/multi-db.txt:496
# 3600596c7a7c4f78b34e5518addf9d0a
msgid "Inlines can be handled in a similar fashion. They require three customized methods::"
msgstr ""

#: ../../topics/db/multi-db.txt:515
# e966d683d9324e1eaceb0faf8abe4b89
msgid "Once you've written your model admin definitions, they can be registered with any ``Admin`` instance::"
msgstr ""

#: ../../topics/db/multi-db.txt:533
# 1d12ba7eb84d4fc28ee380069cac7c35
msgid "This example sets up two admin sites. On the first site, the ``Author`` and ``Publisher`` objects are exposed; ``Publisher`` objects have an tabular inline showing books published by that publisher. The second site exposes just publishers, without the inlines."
msgstr ""

#: ../../topics/db/multi-db.txt:540
# c98ec976dfb34add81a650787f160680
msgid "Using raw cursors with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:542
#: ../../topics/db/sql.txt:232
# fd4c13f36cf442e3a947f08fe11bec32
# d8aab94f5323436283521409a45b9da0
msgid "If you are using more than one database you can use ``django.db.connections`` to obtain the connection (and cursor) for a specific database. ``django.db.connections`` is a dictionary-like object that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../topics/db/multi-db.txt:552
# 675d5f834b5e4b30b3f3036026d99769
msgid "Limitations of multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:557
# 89957d76f036486b843c1487b3099ed3
msgid "Cross-database relations"
msgstr ""

#: ../../topics/db/multi-db.txt:559
# eb8a6c13ffc245d382c9e30f3679f84e
msgid "Django doesn't currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database."
msgstr ""

#: ../../topics/db/multi-db.txt:565
# a9e1bb6461f1423c8f9493fa42255164
msgid "This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

#: ../../topics/db/multi-db.txt:571
# c424720c22404eb78e02e24d1326e4c2
msgid "If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level -- database level key constraints prevent the creation of relations that can't be validated."
msgstr ""

#: ../../topics/db/multi-db.txt:575
# fa31327027db4c348454d25f56698d67
msgid "However, if you're using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to 'fake' cross database foreign keys. However, this configuration is not officially supported by Django."
msgstr ""

#: ../../topics/db/optimization.txt:3
# bb826875262740ac95262e4f594bb8d1
msgid "Database access optimization"
msgstr ""

#: ../../topics/db/optimization.txt:5
# cefd18f2da764f569c0bad02b316b575
msgid "Django's database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage."
msgstr ""

#: ../../topics/db/optimization.txt:11
# c0c374464af14d7c9c6926299f19392b
msgid "Profile first"
msgstr ""

#: ../../topics/db/optimization.txt:13
# 1bc98857209644a58fe13044d055b21b
msgid "As general programming practice, this goes without saying. Find out :ref:`what queries you are doing and what they are costing you <faq-see-raw-sql-queries>`. You may also want to use an external project like django-debug-toolbar_, or a tool that monitors your database directly."
msgstr ""

#: ../../topics/db/optimization.txt:18
# ddaa6a5873ff4fcf85c7e171a3dd0111
msgid "Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server."
msgstr ""

#: ../../topics/db/optimization.txt:26
# 74cffbc226f44287a73ef00e5d287f9c
msgid "With everything that follows, remember to profile after every change to ensure that the change is a benefit, and a big enough benefit given the decrease in readability of your code. **All** of the suggestions below come with the caveat that in your circumstances the general principle might not apply, or might even be reversed."
msgstr ""

#: ../../topics/db/optimization.txt:35
# 9e1d92adbab1458bb32c32dfcd198270
msgid "Use standard DB optimization techniques"
msgstr ""

#: ../../topics/db/optimization.txt:37
# 9b099c08626f458eb7ff164c830123f8
msgid "...including:"
msgstr ""

#: ../../topics/db/optimization.txt:39
# 4106d15bd6c74b9e8c2ef4b1bc86f280
msgid "Indexes. This is a number one priority, *after* you have determined from profiling what indexes should be added. Use :attr:`django.db.models.Field.db_index` to add these from Django."
msgstr ""

#: ../../topics/db/optimization.txt:43
# 09fc863bfd204b7cbb3b8dbb65ca93a8
msgid "Appropriate use of field types."
msgstr ""

#: ../../topics/db/optimization.txt:45
# 7ab7f364b59d42a397f009058caf360e
msgid "We will assume you have done the obvious things above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as :doc:`general purpose caching </topics/cache>`."
msgstr ""

#: ../../topics/db/optimization.txt:52
# 01fad7c7a2f2415d9770582c13164600
msgid "Understand QuerySets"
msgstr ""

#: ../../topics/db/optimization.txt:54
# d925faab5b104149994cc1bd37aa22a3
msgid "Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting good performance with simple code. In particular:"
msgstr ""

#: ../../topics/db/optimization.txt:58
# c4ef8d353f374841a5d44719f32422ad
msgid "Understand QuerySet evaluation"
msgstr ""

#: ../../topics/db/optimization.txt:60
# c20fadcdbebb428b9679e43bccdba067
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

#: ../../topics/db/optimization.txt:62
# eadb79d93f7742d7b4d790332ad9e0e3
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

#: ../../topics/db/optimization.txt:64
# fc07b952b319418b89399b869cefdbcc
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

#: ../../topics/db/optimization.txt:66
# be2a816a5f02422bad260f2e6c13a841
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

#: ../../topics/db/optimization.txt:69
# 0ab001e55f08434d96881643e501aaa6
msgid "Understand cached attributes"
msgstr ""

#: ../../topics/db/optimization.txt:71
# b0d5a50a7fbf4c14a79e9a835aa3234c
msgid "As well as caching of the whole ``QuerySet``, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

#: ../../topics/db/optimization.txt:80
# 5cf584a6bf524330a303a75e224c5022
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

#: ../../topics/db/optimization.txt:86
# 37d6092bd3f64d65a8bf45364547aa78
msgid "Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction."
msgstr ""

#: ../../topics/db/optimization.txt:90
# 3c80a3fbcba342329ef207de9f06e5bd
msgid "Be careful with your own custom properties - it is up to you to implement caching."
msgstr ""

#: ../../topics/db/optimization.txt:94
# 37ddaae87a784b7eb4d7ac8511f8f66e
msgid "Use the ``with`` template tag"
msgstr ""

#: ../../topics/db/optimization.txt:96
# 93df123152a74b4998882b7975c0f253
msgid "To make use of the caching behavior of ``QuerySet``, you may need to use the :ttag:`with` template tag."
msgstr ""

#: ../../topics/db/optimization.txt:100
# a2ca88b656824b5989d63013608ba39f
msgid "Use ``iterator()``"
msgstr ""

#: ../../topics/db/optimization.txt:102
# 321c1733874b443391b2870f67d74e0a
msgid "When you have a lot of objects, the caching behavior of the ``QuerySet`` can cause a large amount of memory to be used. In this case, :meth:`~django.db.models.query.QuerySet.iterator()` may help."
msgstr ""

#: ../../topics/db/optimization.txt:107
# 9201a7e47aa24e34ad5e6816de175827
msgid "Do database work in the database rather than in Python"
msgstr ""

#: ../../topics/db/optimization.txt:109
# 86adb801d4eb4f3cb39499cd120c3b13
msgid "For instance:"
msgstr ""

#: ../../topics/db/optimization.txt:111
# 83a225dc6047400e802cd562e5c4df52
msgid "At the most basic level, use :ref:`filter and exclude <queryset-api>` to do filtering in the database."
msgstr ""

#: ../../topics/db/optimization.txt:114
# 54d0c91c01a44202bc1d11b667a72163
msgid "Use :ref:`F() object query expressions <query-expressions>` to do filtering against other fields within the same model."
msgstr ""

#: ../../topics/db/optimization.txt:117
# 6fb8250873eb4c2d9e58e9a816b1e372
msgid "Use :doc:`annotate to do aggregation in the database </topics/db/aggregation>`."
msgstr ""

#: ../../topics/db/optimization.txt:119
# c12264900a894cae9e0e7312f4148395
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

#: ../../topics/db/optimization.txt:122
# fc23a6423bfa4583ac7d8513ce88b5b3
msgid "Use ``QuerySet.extra()``"
msgstr ""

#: ../../topics/db/optimization.txt:124
# bf23ba2992564b9abc08e78ec9328da2
msgid "A less portable but more powerful method is :meth:`~django.db.models.query.QuerySet.extra()`, which allows some SQL to be explicitly added to the query. If that still isn't powerful enough:"
msgstr ""

#: ../../topics/db/optimization.txt:129
# c1c885ed9a0c4bac8863a1454d7f6e94
msgid "Use raw SQL"
msgstr ""

#: ../../topics/db/optimization.txt:131
# 0ac17387e6b1486989ba53283a087e10
msgid "Write your own :doc:`custom SQL to retrieve data or populate models </topics/db/sql>`. Use ``django.db.connection.queries`` to find out what Django is writing for you and start from there."
msgstr ""

#: ../../topics/db/optimization.txt:136
# 9902e5ae3aac4728896b63e957b3739a
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

#: ../../topics/db/optimization.txt:138
# edd77455ede14385b33f464cf65c745b
msgid "Hitting the database multiple times for different parts of a single 'set' of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:"
msgstr ""

#: ../../topics/db/optimization.txt:145
# 8b8d6af4fc864711a15377e76b76476d
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

#: ../../topics/db/optimization.txt:147
# c6865ee5c4f548e3998e409b4a07d4cc
msgid "Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

#: ../../topics/db/optimization.txt:151
# a7698c99e7924c699a24c52f0e5ac36f
msgid "in view code,"
msgstr ""

#: ../../topics/db/optimization.txt:153
# 66daefab5bf544bcae6e56274bc85b92
msgid "and in :doc:`managers and default managers </topics/db/managers>` where appropriate. Be aware when your manager is and is not used; sometimes this is tricky so don't make assumptions."
msgstr ""

#: ../../topics/db/optimization.txt:158
# 45f47331a7cf4aed91458bd659a4192a
msgid "Don't retrieve things you don't need"
msgstr ""

#: ../../topics/db/optimization.txt:161
# bd3963afea644445bd06be896849e9d1
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

#: ../../topics/db/optimization.txt:163
# 1bd0d327601840ef92961e54b0ff32af
msgid "When you just want a ``dict`` or ``list`` of values, and don't need ORM model objects, make appropriate usage of :meth:`~django.db.models.query.QuerySet.values()`. These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine."
msgstr ""

#: ../../topics/db/optimization.txt:171
# 489b6d50be7d4faf846c4898b194d27c
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

#: ../../topics/db/optimization.txt:173
# 8f87808da3354accb680ae811e20f9ba
msgid "Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db.models.query.QuerySet.only()` if there are database columns you know that you won't need (or won't need in most cases) to avoid loading them. Note that if you *do* use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately."
msgstr ""

#: ../../topics/db/optimization.txt:179
# c1e2cdb452334686bd483756a5750de8
msgid "Also, be aware that there is some (small extra) overhead incurred inside Django when constructing a model with deferred fields. Don't be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The ``defer()`` and ``only()`` methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize."
msgstr ""

#: ../../topics/db/optimization.txt:189
# 22abcf2ee75d47fa8d02c6fa4b2b5c60
msgid "Use QuerySet.count()"
msgstr ""

#: ../../topics/db/optimization.txt:191
# 0a643fe245b844a8b10d858e46260e34
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

#: ../../topics/db/optimization.txt:194
# bfb009fbdc9a467ea42c28f3803d5521
msgid "Use QuerySet.exists()"
msgstr ""

#: ../../topics/db/optimization.txt:196
# cd7cd62902b444599968d1a936a86a69
msgid "...if you only want to find out if at least one result exists, rather than ``if queryset``."
msgstr ""

#: ../../topics/db/optimization.txt:199
# f11969cbd3b44a8eb724bd733488addc
msgid "But:"
msgstr ""

#: ../../topics/db/optimization.txt:202
# 62e05c67edb04761bdc05ff3c8bf36fc
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

#: ../../topics/db/optimization.txt:204
# 5a2b616d2e9a4d3992fe1dd79af2eb78
msgid "If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

#: ../../topics/db/optimization.txt:206
# 0494b0671c754237b5a40810793cd79d
msgid "For example, assuming an Email model that has a ``body`` attribute and a many-to-many relation to User, the following template code is optimal:"
msgstr ""

#: ../../topics/db/optimization.txt:225
# 9bf0c82470aa449fa270581531fda79c
msgid "It is optimal because:"
msgstr ""

#: ../../topics/db/optimization.txt:227
# 781ef38f05da4429b31dfaedcc11602d
msgid "Since QuerySets are lazy, this does no database queries if 'display_inbox' is False."
msgstr ""

#: ../../topics/db/optimization.txt:230
# afcdf6215b0d41b2a2e5d263cf31a1e6
msgid "Use of :ttag:`with` means that we store ``user.emails.all`` in a variable for later use, allowing its cache to be re-used."
msgstr ""

#: ../../topics/db/optimization.txt:233
# fdc55c97e84d4b5cae026c25742f45a1
msgid "The line ``{% if emails %}`` causes ``QuerySet.__nonzero__()`` to be called, which causes the ``user.emails.all()`` query to be run on the database, and at the least the first line to be turned into an ORM object. If there aren't any results, it will return False, otherwise True."
msgstr ""

#: ../../topics/db/optimization.txt:238
# 897652da9a5e4f01970b69a8f45ce74e
msgid "The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out the rest of the cache without doing another query."
msgstr ""

#: ../../topics/db/optimization.txt:241
# 25c553d1065e4ef28b21db344399c198
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

#: ../../topics/db/optimization.txt:243
# 3efb451b6fb241bf9b0e9958451fe3cf
msgid "In total, this code does either one or zero database queries. The only deliberate optimization performed is the use of the :ttag:`with` tag. Using ``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause additional queries."
msgstr ""

#: ../../topics/db/optimization.txt:249
# 8e52d1723b5f4b62a418c192c91189c0
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

#: ../../topics/db/optimization.txt:251
# 0ea8893a6c3e4e089cae70f829c9c2fe
msgid "Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() <topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-queries-delete>` where possible."
msgstr ""

#: ../../topics/db/optimization.txt:256
# 9ba6243b731b493a8c219c09a7b1b029
msgid "Note, however, that these bulk update methods cannot call the ``save()`` or ``delete()`` methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object :doc:`signals </ref/signals>`."
msgstr ""

#: ../../topics/db/optimization.txt:262
# 9978df04f84540a09e15dc545dba6aae
msgid "Use foreign key values directly"
msgstr ""

#: ../../topics/db/optimization.txt:264
# 9309d8a8d995441d8f3c223eed0825cb
msgid "If you only need a foreign key value, use the foreign key value that is already on the object you've got, rather than getting the whole related object and taking its primary key. i.e. do::"
msgstr ""

#: ../../topics/db/optimization.txt:270
# 0818be9fb7704a4b9022a7c46760d866
msgid "instead of::"
msgstr ""

#: ../../topics/db/optimization.txt:275
# 2bcaea2abef748b5b4bbbff35ef0e147
msgid "Insert in bulk"
msgstr ""

#: ../../topics/db/optimization.txt:277
# 08f8275d13794eda88d258038597415d
msgid "When creating objects, where possible, use the :meth:`~django.db.models.query.QuerySet.bulk_create()` method to reduce the number of SQL queries. For example::"
msgstr ""

#: ../../topics/db/optimization.txt:286
#: ../../topics/db/optimization.txt:300
# 2e7160d78b8f4b3f821761ffa191dfd7
# 4298f34ca8884addabe8575f83229267
msgid "...is preferable to::"
msgstr ""

#: ../../topics/db/optimization.txt:291
# cc0bb3f30a0c4f85864a3dbf06e03151
msgid "Note that there are a number of :meth:`caveats to this method <django.db.models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your use case."
msgstr ""

#: ../../topics/db/optimization.txt:295
# 37805f8c91e940d18dd542018f465879
msgid "This also applies to :class:`ManyToManyFields <django.db.models.ManyToManyField>`, so doing::"
msgstr ""

#: ../../topics/db/optimization.txt:305
# 5ae4cb2e7ddc4160b3c3c10cb939e5de
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

#: ../../topics/db/queries.txt:3
# 3a518505937a4442976da0e287f35e31
msgid "Making queries"
msgstr ""

#: ../../topics/db/queries.txt:7
# 3b3e9ea275cb450189e8004f96616234
msgid "Once you've created your :doc:`data models </topics/db/models>`, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects. This document explains how to use this API. Refer to the :doc:`data model reference </ref/models/index>` for full details of all the various model lookup options."
msgstr ""

#: ../../topics/db/queries.txt:13
# f2b2099fe0834893afc062c4970bab9c
msgid "Throughout this guide (and in the reference), we'll refer to the following models, which comprise a Weblog application:"
msgstr ""

#: ../../topics/db/queries.txt:49
# 27ffa33fa6754a2b8e031102d9695871
msgid "Creating objects"
msgstr ""

#: ../../topics/db/queries.txt:51
# 7cf9b8d30c094a69b668e3f3c98324a1
msgid "To represent database-table data in Python objects, Django uses an intuitive system: A model class represents a database table, and an instance of that class represents a particular record in the database table."
msgstr ""

#: ../../topics/db/queries.txt:55
# bc91092f675f4140a2815b26f4657479
msgid "To create an object, instantiate it using keyword arguments to the model class, then call :meth:`~django.db.models.Model.save` to save it to the database."
msgstr ""

#: ../../topics/db/queries.txt:58
# b9b49731fcfc4c10b85018b5d33634c0
msgid "You import the model class from wherever it lives on the Python path, as you may expect. (We point this out here because previous Django versions required funky model importing.)"
msgstr ""

#: ../../topics/db/queries.txt:62
# 4e88f9175f6842d2bb6b33cb149d3e3d
msgid "Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

#: ../../topics/db/queries.txt:68
# 8a64577b235049778c050fd0c35c3fe8
msgid "This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't hit the database until you explicitly call :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:71
# c3a1e8374eed4180b2b64906ab6b7c70
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

#: ../../topics/db/queries.txt:75
# 729ae47199244825a776d197a8e6bfe2
msgid ":meth:`~django.db.models.Model.save` takes a number of advanced options not described here. See the documentation for :meth:`~django.db.models.Model.save` for complete details."
msgstr ""

#: ../../topics/db/queries.txt:79
# 858d9ec5f1d04eb8965139fa3043f4f5
msgid "To create and save an object in a single step, use the :meth:`~django.db.models.query.QuerySet.create()` method."
msgstr ""

#: ../../topics/db/queries.txt:83
# d71760d2cd28475eb3d8860b5e2d7ceb
msgid "Saving changes to objects"
msgstr ""

#: ../../topics/db/queries.txt:85
# 0533be4dfb214339843ca22305481e80
msgid "To save changes to an object that's already in the database, use :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:88
# 1725485f315d4568ba8726e4d67b72f2
msgid "Given a ``Blog`` instance ``b5`` that has already been saved to the database, this example changes its name and updates its record in the database::"
msgstr ""

#: ../../topics/db/queries.txt:94
# a1dbadf1a9d6403d8fbfed40a5b0207a
msgid "This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't hit the database until you explicitly call :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:98
# b90236cbd0fa4c26aa06ac15a05b3e78
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

#: ../../topics/db/queries.txt:100
# 3bb626e9fc924215b9fd285d19776378
msgid "Updating a :class:`~django.db.models.ForeignKey` field works exactly the same way as saving a normal field -- simply assign an object of the right type to the field in question. This example updates the ``blog`` attribute of an ``Entry`` instance ``entry``::"
msgstr ""

#: ../../topics/db/queries.txt:111
# 6f7d9da5e86a42df9e3177da248ff8dd
msgid "Updating a :class:`~django.db.models.ManyToManyField` works a little differently -- use the :meth:`~django.db.models.fields.related.RelatedManager.add` method on the field to add a record to the relation. This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

#: ../../topics/db/queries.txt:121
# 8f73228d773f4fe095265cad41cf8996
msgid "To add multiple records to a :class:`~django.db.models.ManyToManyField` in one go, include multiple arguments in the call to :meth:`~django.db.models.fields.related.RelatedManager.add`, like this::"
msgstr ""

#: ../../topics/db/queries.txt:131
# dac9e66fab2a4c0cb0c97262e09a91d1
msgid "Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

#: ../../topics/db/queries.txt:134
# 31e8bef60cd84d818fb56224997612f0
msgid "Retrieving objects"
msgstr ""

#: ../../topics/db/queries.txt:136
# 87c4acece68b4612813269b451fbcff8
msgid "To retrieve objects from your database, construct a :class:`~django.db.models.query.QuerySet` via a :class:`~django.db.models.Manager` on your model class."
msgstr ""

#: ../../topics/db/queries.txt:140
# 87e5f3e072d04c628e55f0f8a14c1246
msgid "A :class:`~django.db.models.query.QuerySet` represents a collection of objects from your database. It can have zero, one or many *filters* -- criteria that narrow down the collection based on given parameters. In SQL terms, a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

#: ../../topics/db/queries.txt:146
# aa69275455fb469b894feec100cf5aab
msgid "You get a :class:`~django.db.models.query.QuerySet` by using your model's :class:`~django.db.models.Manager`. Each model has at least one :class:`~django.db.models.Manager`, and it's called ``objects`` by default. Access it directly via the model class, like so::"
msgstr ""

#: ../../topics/db/queries.txt:161
# b701c3c98ea445da939a551b6cd13e1a
msgid "``Managers`` are accessible only via model classes, rather than from model instances, to enforce a separation between \"table-level\" operations and \"record-level\" operations."
msgstr ""

#: ../../topics/db/queries.txt:165
# 987879a7eb04487f8a04581f1bb4c1e3
msgid "The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` for a model. It acts as a \"root\" :class:`~django.db.models.query.QuerySet` that describes all objects in the model's database table. For example, ``Blog.objects`` is the initial :class:`~django.db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""

#: ../../topics/db/queries.txt:172
# 3d848df6de6d423b8640bf2ea979fff7
msgid "Retrieving all objects"
msgstr ""

#: ../../topics/db/queries.txt:174
# 130f6a4f2912495c95992b36e0578576
msgid "The simplest way to retrieve objects from a table is to get all of them. To do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :class:`~django.db.models.Manager`::"
msgstr ""

#: ../../topics/db/queries.txt:180
# 0582bfc0724043668b3f00a72045c798
msgid "The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

#: ../../topics/db/queries.txt:183
# 079bba3dcf604b31bfe40b5c0b011bd1
msgid "(If ``Entry.objects`` is a :class:`~django.db.models.query.QuerySet`, why can't we just do ``Entry.objects``?  That's because ``Entry.objects``, the root :class:`~django.db.models.query.QuerySet`, is a special case that cannot be evaluated. The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:`~django.db.models.query.QuerySet` that *can* be evaluated.)"
msgstr ""

#: ../../topics/db/queries.txt:191
# 70aa886dd1694bfd8786699d0588ee93
msgid "Retrieving specific objects with filters"
msgstr ""

#: ../../topics/db/queries.txt:193
# 3c1e55f3979944fa9c93dcc1168e1d40
msgid "The root :class:`~django.db.models.query.QuerySet` provided by the :class:`~django.db.models.Manager` describes all objects in the database table. Usually, though, you'll need to select only a subset of the complete set of objects."
msgstr ""

#: ../../topics/db/queries.txt:198
# f8f8c11273c446f0a7e2db744afa3ac8
msgid "To create such a subset, you refine the initial :class:`~django.db.models.query.QuerySet`, adding filter conditions. The two most common ways to refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

#: ../../topics/db/queries.txt:203
# ddd98bb805c04f3484640dd1576132a6
msgid "Returns a new :class:`~django.db.models.query.QuerySet` containing objects that match the given lookup parameters."
msgstr ""

#: ../../topics/db/queries.txt:207
# 38f736a62c1b4ffc8d29f52bab0c837b
msgid "Returns a new :class:`~django.db.models.query.QuerySet` containing objects that do *not* match the given lookup parameters."
msgstr ""

#: ../../topics/db/queries.txt:210
# b31213a2ed0f4a1e80e03ac02272737e
msgid "The lookup parameters (``**kwargs`` in the above function definitions) should be in the format described in `Field lookups`_ below."
msgstr ""

#: ../../topics/db/queries.txt:213
# acea37a825e24cf09350bcb13f4c966e
msgid "For example, to get a :class:`~django.db.models.query.QuerySet` of blog entries from the year 2006, use :meth:`~django.db.models.query.QuerySet.filter` like so::"
msgstr ""

#: ../../topics/db/queries.txt:219
# c8723589a5ac43e19e4d09e91235ba6b
msgid "We don't have to add an :meth:`~django.db.models.query.QuerySet.all` -- ``Entry.objects.all().filter(...)``. That would still work, but you only need :meth:`~django.db.models.query.QuerySet.all` when you want all objects from the root :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:227
# a8909378c25a4f6fb2aa5bf12320ba61
msgid "Chaining filters"
msgstr ""

#: ../../topics/db/queries.txt:229
# 6822f2a0ce264c3691c74b3d2d08de61
msgid "The result of refining a :class:`~django.db.models.query.QuerySet` is itself a :class:`~django.db.models.query.QuerySet`, so it's possible to chain refinements together. For example::"
msgstr ""

#: ../../topics/db/queries.txt:241
# 203e2b1bc6ff434e8f071570f41f1e36
msgid "This takes the initial :class:`~django.db.models.query.QuerySet` of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a :class:`~django.db.models.query.QuerySet` containing all entries with a headline that starts with \"What\", that were published between January 1, 2005, and the current day."
msgstr ""

#: ../../topics/db/queries.txt:250
# a7b40e35f0594043b342152f8c0997ec
msgid "Filtered QuerySets are unique"
msgstr ""

#: ../../topics/db/queries.txt:252
# bd43a8bbeee04097911a8f3cca0fcb8a
msgid "Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound to the previous :class:`~django.db.models.query.QuerySet`. Each refinement creates a separate and distinct :class:`~django.db.models.query.QuerySet` that can be stored, used and reused."
msgstr ""

#: ../../topics/db/queries.txt:264
# 4c796a6dfe9c4b43ac5d3c8e1a82f838
msgid "These three ``QuerySets`` are separate. The first is a base :class:`~django.db.models.query.QuerySet` containing all entries that contain a headline starting with \"What\". The second is a subset of the first, with an additional criteria that excludes records whose ``pub_date`` is greater than now. The third is a subset of the first, with an additional criteria that selects only the records whose ``pub_date`` is greater than now. The initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by the refinement process."
msgstr ""

#: ../../topics/db/queries.txt:276
# b6cd1e87bbbd4bdcac0b85e26e89eda2
msgid "QuerySets are lazy"
msgstr ""

#: ../../topics/db/queries.txt:278
# ac52d2a5efef4bc996e59ea7e64839b9
msgid "``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models.query.QuerySet` doesn't involve any database activity. You can stack filters together all day long, and Django won't actually run the query until the :class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this example::"
msgstr ""

#: ../../topics/db/queries.txt:289
# bfa356bfc3624405a51bbc6124d0bf61
msgid "Though this looks like three database hits, in fact it hits the database only once, at the last line (``print q``). In general, the results of a :class:`~django.db.models.query.QuerySet` aren't fetched from the database until you \"ask\" for them. When you do, the :class:`~django.db.models.query.QuerySet` is *evaluated* by accessing the database. For more details on exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

#: ../../topics/db/queries.txt:301
# b7e98ea8dd624a578d2d47a6c52e26f5
msgid "Retrieving a single object with get"
msgstr ""

#: ../../topics/db/queries.txt:303
# 2882cbacdb1a41cd83abea4903dfd98b
msgid ":meth:`~django.db.models.query.QuerySet.filter` will always give you a :class:`~django.db.models.query.QuerySet`, even if only a single object matches the query - in this case, it will be a :class:`~django.db.models.query.QuerySet` containing a single element."
msgstr ""

#: ../../topics/db/queries.txt:308
# 15769f9a4eaf4b56a773a3b4d601110b
msgid "If you know there is only one object that matches your query, you can use the :meth:`~django.db.models.query.QuerySet.get` method on a `Manager` which returns the object directly::"
msgstr ""

#: ../../topics/db/queries.txt:314
# 469a7324f997440980f54c8006b9fa77
msgid "You can use any query expression with :meth:`~django.db.models.query.QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet.filter` - again, see `Field lookups`_ below."
msgstr ""

#: ../../topics/db/queries.txt:319
# b21142c3c98b4df9b2926f6b4535c914
msgid "Note that there is a difference between using :meth:`~django.db.models.query.QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` with a slice of ``[0]``. If there are no results that match the query, :meth:`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no ``Entry`` object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

#: ../../topics/db/queries.txt:328
# 08a3185ea6fb433dbca10c4e6646c2b4
msgid "Similarly, Django will complain if more than one item matches the :meth:`~django.db.models.query.QuerySet.get` query. In this case, it will raise ``MultipleObjectsReturned``, which again is an attribute of the model class itself."
msgstr ""

#: ../../topics/db/queries.txt:335
# bd4d155c9b9349acbb73e81fae4b542f
msgid "Other QuerySet methods"
msgstr ""

#: ../../topics/db/queries.txt:337
# f0b07d5705b64ad1bb61b9f5703cd0a9
msgid "Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query.QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when you need to look up objects from the database. However, that's far from all there is; see the :ref:`QuerySet API Reference <queryset-api>` for a complete list of all the various :class:`~django.db.models.query.QuerySet` methods."
msgstr ""

#: ../../topics/db/queries.txt:348
# aa73c79ca34544d7baf2636e5c66af9c
msgid "Limiting QuerySets"
msgstr ""

#: ../../topics/db/queries.txt:350
# a68e3f359adc4efd87bc43aba5c8b5d8
msgid "Use a subset of Python's array-slicing syntax to limit your :class:`~django.db.models.query.QuerySet` to a certain number of results. This is the equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

#: ../../topics/db/queries.txt:354
# 54c178285c564b6eb9abe4b4435d4f7b
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

#: ../../topics/db/queries.txt:358
# cd68de273ae749dbbe8d8d5fcbac0dc0
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

#: ../../topics/db/queries.txt:362
# eb411920055b4ead9bd2788f047aff8c
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

#: ../../topics/db/queries.txt:364
# 1dc7c12b65de4aed8dfea3ee5e6ed4b9
msgid "Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the query. An exception is if you use the \"step\" parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every *second* object of the first 10::"
msgstr ""

#: ../../topics/db/queries.txt:372
# b8207dd7783a4a68a81d0ab8028ea845
msgid "To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar LIMIT 1``), use a simple index instead of a slice. For example, this returns the first ``Entry`` in the database, after ordering entries alphabetically by headline::"
msgstr ""

#: ../../topics/db/queries.txt:379
# 09906004fa8848c59ed5ae56f5694c86
msgid "This is roughly equivalent to::"
msgstr ""

#: ../../topics/db/queries.txt:383
# 6d3d6c6ab06540e4b376a4fe1de9801b
msgid "Note, however, that the first of these will raise ``IndexError`` while the second will raise ``DoesNotExist`` if no objects match the given criteria. See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

#: ../../topics/db/queries.txt:390
# 8e94505b527949c197c4e79dd91afca0
msgid "Field lookups"
msgstr ""

#: ../../topics/db/queries.txt:392
# de78c2c0487443169e348c900d9886c0
msgid "Field lookups are how you specify the meat of an SQL ``WHERE`` clause. They're specified as keyword arguments to the :class:`~django.db.models.query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models.query.QuerySet.get`."
msgstr ""

#: ../../topics/db/queries.txt:398
# c9f8f100cd7d47df8b56d26801af2ffc
msgid "Basic lookups keyword arguments take the form ``field__lookuptype=value``. (That's a double-underscore). For example::"
msgstr ""

#: ../../topics/db/queries.txt:403
# aa4b0490af12479284c73990afb63f5c
msgid "translates (roughly) into the following SQL::"
msgstr ""

#: ../../topics/db/queries.txt:409
# 4c6e3b247e434442994af7258258c34f
msgid "Python has the ability to define functions that accept arbitrary name-value arguments whose names and values are evaluated at runtime. For more information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

#: ../../topics/db/queries.txt:424
# 11e01ec5baf840e0a1d4c9bd4e5ba0a0
msgid "If you pass an invalid keyword argument, a lookup function will raise ``TypeError``."
msgstr ""

#: ../../topics/db/queries.txt:427
# f364066a3829439288f86684203928a6
msgid "The database API supports about two dozen lookup types; a complete reference can be found in the :ref:`field lookup reference <field-lookups>`. To give you a taste of what's available, here's some of the more common lookups you'll probably use:"
msgstr ""

#: ../../topics/db/queries.txt:433
# 3181277e18d8465199cc056bd8887431
msgid "An \"exact\" match. For example::"
msgstr ""

#: ../../topics/db/queries.txt:437
# 0e425b4660294c5caa9f3829289743f2
msgid "Would generate SQL along these lines:"
msgstr ""

#: ../../topics/db/queries.txt:443
# 3f98e09636af4582ae7af45f738e190e
msgid "If you don't provide a lookup type -- that is, if your keyword argument doesn't contain a double underscore -- the lookup type is assumed to be ``exact``."
msgstr ""

#: ../../topics/db/queries.txt:447
# 34d1b50517434822a8e5c1133ab59318
msgid "For example, the following two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:452
# 11816200c94e4bfd8a370f836d4e7de0
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

#: ../../topics/db/queries.txt:455
# d14c18e442a14ef18ebb41984cbf424f
msgid "A case-insensitive match. So, the query::"
msgstr ""

#: ../../topics/db/queries.txt:459
# c80d5a6bbed640d7ad9a63df18c78aeb
msgid "Would match a ``Blog`` titled \"Beatles Blog\", \"beatles blog\", or even \"BeAtlES blOG\"."
msgstr ""

#: ../../topics/db/queries.txt:463
# 09e04961be8d4d659b1512b2fef14bed
msgid "Case-sensitive containment test. For example::"
msgstr ""

#: ../../topics/db/queries.txt:467
# c6294a1f10ba49509b800e7626d213f0
msgid "Roughly translates to this SQL:"
msgstr ""

#: ../../topics/db/queries.txt:473
# 94e21ab9ffbc428493762eb80f1bc1e3
msgid "Note this will match the headline ``'Today Lennon honored'`` but not ``'today lennon honored'``."
msgstr ""

#: ../../topics/db/queries.txt:476
# 51bc03da9a1d4376acbc1819fb415366
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

#: ../../topics/db/queries.txt:479
# 7f21e0b6e5f3457eb21b0002dbd17808
msgid "Starts-with and ends-with search, respectively. There are also case-insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

#: ../../topics/db/queries.txt:483
# 6701422bef7e4f42b93323a395c3b25a
msgid "Again, this only scratches the surface. A complete reference can be found in the :ref:`field lookup reference <field-lookups>`."
msgstr ""

#: ../../topics/db/queries.txt:489
# 30d22fa51a4e4f689c1c3e43b7803f70
msgid "Lookups that span relationships"
msgstr ""

#: ../../topics/db/queries.txt:491
# 59203c62b75d49c39e95f61c046bd6ec
msgid "Django offers a powerful and intuitive way to \"follow\" relationships in lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind the scenes. To span a relationship, just use the field name of related fields across models, separated by double underscores, until you get to the field you want."
msgstr ""

#: ../../topics/db/queries.txt:497
# 8f6d44f2925f488eb01385517b9bec35
msgid "This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` is ``'Beatles Blog'``::"
msgstr ""

#: ../../topics/db/queries.txt:502
# 15eeb4fb88364a59b638cd126e3940a1
msgid "This spanning can be as deep as you'd like."
msgstr ""

#: ../../topics/db/queries.txt:504
# b12845f4dcdd4d6c83d7757067a7135e
msgid "It works backwards, too. To refer to a \"reverse\" relationship, just use the lowercase name of the model."
msgstr ""

#: ../../topics/db/queries.txt:507
# 5237baed42854adb9fdc5a54a793d88d
msgid "This example retrieves all ``Blog`` objects which have at least one ``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

#: ../../topics/db/queries.txt:512
# dada56636ef54f66b15e08daaaf5f23e
msgid "If you are filtering across multiple relationships and one of the intermediate models doesn't have a value that meets the filter condition, Django will treat it as if there is an empty (all values are ``NULL``), but valid, object there. All this means is that no error will be raised. For example, in this filter::"
msgstr ""

#: ../../topics/db/queries.txt:519
# 528bb898d8fa4c17981f340be86c5750
msgid "(if there was a related ``Author`` model), if there was no ``author`` associated with an entry, it would be treated as if there was also no ``name`` attached, rather than raising an error because of the missing ``author``. Usually this is exactly what you want to have happen. The only case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

#: ../../topics/db/queries.txt:527
# 499b323ec224431c86792acd1883d259
msgid "will return ``Blog`` objects that have an empty ``name`` on the ``author`` and also those which have an empty ``author`` on the ``entry``. If you don't want those latter objects, you could write::"
msgstr ""

#: ../../topics/db/queries.txt:535
# 94adcf973f0b45ccad40c00c93928543
msgid "Spanning multi-valued relationships"
msgstr ""

#: ../../topics/db/queries.txt:537
# f408899dd09c47d3808b4df44310a83e
msgid "When you are filtering an object based on a :class:`~django.db.models.ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there are two different sorts of filter you may be interested in. Consider the ``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many relation). We might be interested in finding blogs that have an entry which has both *\"Lennon\"* in the headline and was published in 2008. Or we might want to find blogs that have an entry with *\"Lennon\"* in the headline as well as an entry that was published in 2008. Since there are multiple entries associated with a single ``Blog``, both of these queries are possible and make sense in some situations."
msgstr ""

#: ../../topics/db/queries.txt:548
# 78378ed2c0124b24961a71bae26da4dc
msgid "The same type of situation arises with a :class:`~django.db.models.ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db.models.ManyToManyField` called ``tags``, we might want to find entries linked to tags called *\"music\"* and *\"bands\"* or we might want an entry that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

#: ../../topics/db/queries.txt:554
# 81a0a77418fa4ef99211d8e1ecbecf2c
msgid "To handle both of these situations, Django has a consistent way of processing :meth:`~django.db.models.query.QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` calls. Everything inside a single :meth:`~django.db.models.query.QuerySet.filter` call is applied simultaneously to filter out items matching all those requirements. Successive :meth:`~django.db.models.query.QuerySet.filter` calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` call."
msgstr ""

#: ../../topics/db/queries.txt:564
# a718cc71d1254c66b47658b4b8b5f44b
msgid "That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both *\"Lennon\"* in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write::"
msgstr ""

#: ../../topics/db/queries.txt:572
# 28f90283e9d94a0aba0a00dc9a0eaff8
msgid "To select all blogs that contain an entry with *\"Lennon\"* in the headline **as well as** an entry that was published in 2008, we would write::"
msgstr ""

#: ../../topics/db/queries.txt:578
# 29dd40f3d9ca4ca6ae4fefacc138b6a5
msgid "In this second example, the first filter restricted the queryset to all those blogs linked to that particular type of entry. The second filter restricted the set of blogs *further* to those that are also linked to the second type of entry. The entries select by the second filter may or may not be the same as the entries in the first filter. We are filtering the ``Blog`` items with each filter statement, not the ``Entry`` items."
msgstr ""

#: ../../topics/db/queries.txt:585
# 4194fbfb54804a6ca1f525238e0337b8
msgid "All of this behavior also applies to :meth:`~django.db.models.query.QuerySet.exclude`: all the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` statement apply to a single instance (if those conditions are talking about the same multi-valued relation). Conditions in subsequent :meth:`~django.db.models.query.QuerySet.filter` or :meth:`~django.db.models.query.QuerySet.exclude` calls that refer to the same relation may end up filtering on different linked objects."
msgstr ""

#: ../../topics/db/queries.txt:597
# 588555f92e4145ebac2d3410004de45d
msgid "Filters can reference fields on the model"
msgstr ""

#: ../../topics/db/queries.txt:599
# aa8bc26c8d6c4a718d2dd3ce1ad2d4a8
msgid "In the examples given so far, we have constructed filters that compare the value of a model field with a constant. But what if you want to compare the value of a model field with another field on the same model?"
msgstr ""

#: ../../topics/db/queries.txt:603
# c742308a20ea4dfdb8a1a65bd0daa269
msgid "Django provides the :ref:`F() expressions <query-expressions>` to allow such comparisons. Instances of ``F()`` act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance."
msgstr ""

#: ../../topics/db/queries.txt:608
# 0044028739a341b3a2093e72a8136bab
msgid "For example, to find a list of all blog entries that have had more comments than pingbacks, we construct an ``F()`` object to reference the pingback count, and use that ``F()`` object in the query::"
msgstr ""

#: ../../topics/db/queries.txt:615
# 4c64f2cb9fa04ea79a027550444c4a39
msgid "Django supports the use of addition, subtraction, multiplication, division and modulo arithmetic with ``F()`` objects, both with constants and with other ``F()`` objects. To find all the blog entries with more than *twice* as many comments as pingbacks, we modify the query::"
msgstr ""

#: ../../topics/db/queries.txt:622
# 6a9ea7983bd2410cad06478beabbb6f0
msgid "To find all the entries where the rating of the entry is less than the sum of the pingback count and comment count, we would issue the query::"
msgstr ""

#: ../../topics/db/queries.txt:628
# 3e3f307a056e40f5a5f7345ea065ee7b
msgid "You can also use the double underscore notation to span relationships in an ``F()`` object. An ``F()`` object with a double underscore will introduce any joins needed to access the related object. For example, to retrieve all the entries where the author's name is the same as the blog name, we could issue the query::"
msgstr ""

#: ../../topics/db/queries.txt:638
# ad19eabf33e2434f852ab212cdb07acf
msgid "For date and date/time fields, you can add or subtract a :class:`~datetime.timedelta` object. The following would return all entries that were modified more than 3 days after they were published::"
msgstr ""

#: ../../topics/db/queries.txt:646
# 768e455234ac4e2e9a08a6c482d9e0fb
msgid "The pk lookup shortcut"
msgstr ""

#: ../../topics/db/queries.txt:648
# 258cd8fbc81c46c4870e3882819bbef8
msgid "For convenience, Django provides a ``pk`` lookup shortcut, which stands for \"primary key\"."
msgstr ""

#: ../../topics/db/queries.txt:651
# e660a62620594a61822c61ac660ef412
msgid "In the example ``Blog`` model, the primary key is the ``id`` field, so these three statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:658
# b7438a1844364af59d40bbb24a27f476
msgid "The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

#: ../../topics/db/queries.txt:667
# 4f36a15466da4965b2236bffdeebbd7e
msgid "``pk`` lookups also work across joins. For example, these three statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:675
# 126cfd98abf3488eaba352c8dcb652ec
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

#: ../../topics/db/queries.txt:677
# f62e16f2007244b58cec9db9f0f7163c
msgid "The field lookups that equate to ``LIKE`` SQL statements (``iexact``, ``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` and ``iendswith``) will automatically escape the two special characters used in ``LIKE`` statements -- the percent sign and the underscore. (In a ``LIKE`` statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)"
msgstr ""

#: ../../topics/db/queries.txt:684
# 61b1683b889d4902baaf0c959b9fa866
msgid "This means things should work intuitively, so the abstraction doesn't leak. For example, to retrieve all the entries that contain a percent sign, just use the percent sign as any other character::"
msgstr ""

#: ../../topics/db/queries.txt:690
# cda831d1e3e849c49c28bd933b1ed9bc
msgid "Django takes care of the quoting for you; the resulting SQL will look something like this:"
msgstr ""

#: ../../topics/db/queries.txt:697
# 9bf6254f63244536922fba8f9a289bcb
msgid "Same goes for underscores. Both percentage signs and underscores are handled for you transparently."
msgstr ""

#: ../../topics/db/queries.txt:703
# 602be145958d4aad8ae02c9afb411466
msgid "Caching and QuerySets"
msgstr ""

#: ../../topics/db/queries.txt:705
# 34b64105dc974cdf8d6e1277bcf2995d
msgid "Each :class:`~django.db.models.query.QuerySet` contains a cache, to minimize database access. It's important to understand how it works, in order to write the most efficient code."
msgstr ""

#: ../../topics/db/queries.txt:709
# fca55de8286d4d87aa5b951e03f70f94
msgid "In a newly created :class:`~django.db.models.query.QuerySet`, the cache is empty. The first time a :class:`~django.db.models.query.QuerySet` is evaluated -- and, hence, a database query happens -- Django saves the query results in the :class:`~django.db.models.query.QuerySet`\\'s cache and returns the results that have been explicitly requested (e.g., the next element, if the :class:`~django.db.models.query.QuerySet` is being iterated over). Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` reuse the cached results."
msgstr ""

#: ../../topics/db/queries.txt:718
# 7eae7a4ebac4463ba3553168ebbb5a0c
msgid "Keep this caching behavior in mind, because it may bite you if you don't use your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, the following will create two :class:`~django.db.models.query.QuerySet`\\s, evaluate them, and throw them away::"
msgstr ""

#: ../../topics/db/queries.txt:726
# aa074c7e725d4d66a0ce7efd31f1cbe7
msgid "That means the same database query will be executed twice, effectively doubling your database load. Also, there's a possibility the two lists may not include the same database records, because an ``Entry`` may have been added or deleted in the split second between the two requests."
msgstr ""

#: ../../topics/db/queries.txt:731
# 9adb13ca0cc1478ca25fe58b6b9b65a2
msgid "To avoid this problem, simply save the :class:`~django.db.models.query.QuerySet` and reuse it::"
msgstr ""

#: ../../topics/db/queries.txt:741
# 5d9f529c8f034358a9dad8b08f21db86
msgid "Complex lookups with Q objects"
msgstr ""

#: ../../topics/db/queries.txt:743
# 78579d5d1421455880ebf26b82731abe
msgid "Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet.filter`, etc. -- are \"AND\"ed together. If you need to execute more complex queries (for example, queries with ``OR`` statements), you can use ``Q`` objects."
msgstr ""

#: ../../topics/db/queries.txt:749
# 91e8ee266ed9481997b95174830d4d2b
msgid "A :class:`~django.db.models.Q` object (``django.db.models.Q``) is an object used to encapsulate a collection of keyword arguments. These keyword arguments are specified as in \"Field lookups\" above."
msgstr ""

#: ../../topics/db/queries.txt:753
# cda38e2f4cab4310b5dea583fdb1bebe
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

#: ../../topics/db/queries.txt:758
# da47b9afa08241a8811e10149f247234
msgid "``Q`` objects can be combined using the ``&`` and ``|`` operators. When an operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

#: ../../topics/db/queries.txt:761
# d12d9fd3e00244099aeac9ff40bc6fbc
msgid "For example, this statement yields a single ``Q`` object that represents the \"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

#: ../../topics/db/queries.txt:766
# 49b6b5d25ae2465cb12ccb182bd82645
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

#: ../../topics/db/queries.txt:770
# b94ed8e7475d427ead7e876d0a68005a
msgid "You can compose statements of arbitrary complexity by combining ``Q`` objects with the ``&`` and ``|`` operators and use parenthetical grouping. Also, ``Q`` objects can be negated using the ``~`` operator, allowing for combined lookups that combine both a normal query and a negated (``NOT``) query::"
msgstr ""

#: ../../topics/db/queries.txt:777
# df84f37852b945a2820bd964048e4083
msgid "Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed one or more ``Q`` objects as positional (not-named) arguments. If you provide multiple ``Q`` object arguments to a lookup function, the arguments will be \"AND\"ed together. For example::"
msgstr ""

#: ../../topics/db/queries.txt:790
# 9a0e2369f7084999bd8f296d5844287c
msgid "... roughly translates into the SQL::"
msgstr ""

#: ../../topics/db/queries.txt:795
# 6bbbd7c5ba9344579803d306ff0dad48
msgid "Lookup functions can mix the use of ``Q`` objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or ``Q`` objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it must precede the definition of any keyword arguments. For example::"
msgstr ""

#: ../../topics/db/queries.txt:804
# ecd34eb58375458ca3243ad1f8349766
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

#: ../../topics/db/queries.txt:811
# 1bc8f4787ac54535b20497bb7ca22fc5
msgid "... would not be valid."
msgstr ""

#: ../../topics/db/queries.txt:815
# beed5c6093604145bc5a4cf6a0936219
msgid "The `OR lookups examples`_ in the Django unit tests show some possible uses of ``Q``."
msgstr ""

#: ../../topics/db/queries.txt:821
# 216b8cf9c4444bae9c11ae611578781e
msgid "Comparing objects"
msgstr ""

#: ../../topics/db/queries.txt:823
# 432b0601c062433b82d6682629733546
msgid "To compare two model instances, just use the standard Python comparison operator, the double equals sign: ``==``. Behind the scenes, that compares the primary key values of two models."
msgstr ""

#: ../../topics/db/queries.txt:827
# 094739d1df164e7a8c858087ace6603d
msgid "Using the ``Entry`` example above, the following two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:832
# 701e33942a274871851c7940dbd68b88
msgid "If a model's primary key isn't called ``id``, no problem. Comparisons will always use the primary key, whatever it's called. For example, if a model's primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:842
# 5aaaf1bd597c45a4ab37c673e5b9a94e
msgid "Deleting objects"
msgstr ""

#: ../../topics/db/queries.txt:844
# 8e69299c7c8042e38d137170c8e838c4
msgid "The delete method, conveniently, is named :meth:`~django.db.models.Model.delete`. This method immediately deletes the object and has no return value. Example::"
msgstr ""

#: ../../topics/db/queries.txt:850
# 373b138fcfc7458e8494d626c7e2e35f
msgid "You can also delete objects in bulk. Every :class:`~django.db.models.query.QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:855
# b50962fd99754438b6bc4313bba03eae
msgid "For example, this deletes all ``Entry`` objects with a ``pub_date`` year of 2005::"
msgstr ""

#: ../../topics/db/queries.txt:860
# 8f17f77153f84699bb3a409e822ce37a
msgid "Keep in mind that this will, whenever possible, be executed purely in SQL, and so the ``delete()`` methods of individual object instances will not necessarily be called during the process. If you've provided a custom ``delete()`` method on a model class and want to ensure that it is called, you will need to \"manually\" delete instances of that model (e.g., by iterating over a :class:`~django.db.models.query.QuerySet` and calling ``delete()`` on each object individually) rather than using the bulk :meth:`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:870
# 8d7baef5ce32456c8666baf82b428af9
msgid "When Django deletes an object, by default it emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which had foreign keys pointing at the object to be deleted will be deleted along with it. For example::"
msgstr ""

#: ../../topics/db/queries.txt:884
# ad66b60305f44cfa802ae1f2839da3a3
msgid "Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:`~django.db.models.query.QuerySet` method that is not exposed on a :class:`~django.db.models.Manager` itself. This is a safety mechanism to prevent you from accidentally requesting ``Entry.objects.delete()``, and deleting *all* the entries. If you *do* want to delete all the objects, then you have to explicitly request a complete query set::"
msgstr ""

#: ../../topics/db/queries.txt:896
# 60acf3668f0a4e22b81ff7579aa48e28
msgid "Copying model instances"
msgstr ""

#: ../../topics/db/queries.txt:898
# 3e87d9374c784b508aa236c7f558f602
msgid "Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields' values copied. In the simplest case, you can just set ``pk`` to ``None``. Using our blog example::"
msgstr ""

#: ../../topics/db/queries.txt:908
# c5f752f13c2848d5b007bb3aef80eb31
msgid "Things get more complicated if you use inheritance. Consider a subclass of ``Blog``::"
msgstr ""

#: ../../topics/db/queries.txt:917
# d7998d7b029d4ac98f4c8c082e282464
msgid "Due to how inheritance works, you have to set both ``pk`` and ``id`` to None::"
msgstr ""

#: ../../topics/db/queries.txt:923
# 69877634c2f345ef9402caca42f7b69b
msgid "This process does not copy related objects. If you want to copy relations, you have to write a little bit more code. In our example, ``Entry`` has a many to many field to ``Author``::"
msgstr ""

#: ../../topics/db/queries.txt:936
# 29dfe42cb8aa474388a790353ebad1e3
msgid "Updating multiple objects at once"
msgstr ""

#: ../../topics/db/queries.txt:938
# d6139c016af14260a6f12a53fdde3ecb
msgid "Sometimes you want to set a field to a particular value for all the objects in a :class:`~django.db.models.query.QuerySet`. You can do this with the :meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

#: ../../topics/db/queries.txt:945
# ea19a9335b644e6d81e59305ea36add4
msgid "You can only set non-relation fields and :class:`~django.db.models.ForeignKey` fields using this method. To update a non-relation field, provide the new value as a constant. To update :class:`~django.db.models.ForeignKey` fields, set the new value to be the new model instance you want to point to. For example::"
msgstr ""

#: ../../topics/db/queries.txt:955
# d953cf40665c47799899b1febaddfb8c
msgid "The ``update()`` method is applied instantly and returns the number of rows affected by the query. The only restriction on the :class:`~django.db.models.query.QuerySet` that is updated is that it can only access one database table, the model's main table. You can filter based on related fields, but you can only update columns in the model's main table. Example::"
msgstr ""

#: ../../topics/db/queries.txt:967
# f5354982113f432fbff8e51efbf30f28
msgid "Be aware that the ``update()`` method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn't run any :meth:`~django.db.models.Model.save` methods on your models, or emit the ``pre_save`` or ``post_save`` signals (which are a consequence of calling :meth:`~django.db.models.Model.save`). If you want to save every item in a :class:`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db.models.Model.save` method is called on each instance, you don't need any special function to handle that. Just loop over them and call :meth:`~django.db.models.Model.save`::"
msgstr ""

#: ../../topics/db/queries.txt:980
# cf18c12cba104ca983690c2aaf4bca1a
msgid "Calls to update can also use :ref:`F() objects <query-expressions>` to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value. For example, to increment the pingback count for every entry in the blog::"
msgstr ""

#: ../../topics/db/queries.txt:987
# 973a863b1af540b4ada7f9e5db4208ad
msgid "However, unlike ``F()`` objects in filter and exclude clauses, you can't introduce joins when you use ``F()`` objects in an update -- you can only reference fields local to the model being updated. If you attempt to introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

#: ../../topics/db/queries.txt:998
# 16192d1263cc491299f1f8044d7ce84a
msgid "Related objects"
msgstr ""

#: ../../topics/db/queries.txt:1000
# 08556627ab494db595d94ac5198fa1d1
msgid "When you define a relationship in a model (i.e., a :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db.models.ManyToManyField`), instances of that model will have a convenient API to access the related object(s)."
msgstr ""

#: ../../topics/db/queries.txt:1006
# 0133e7446dd543b3ba2cd5e386094309
msgid "Using the models at the top of this page, for example, an ``Entry`` object ``e`` can get its associated ``Blog`` object by accessing the ``blog`` attribute: ``e.blog``."
msgstr ""

#: ../../topics/db/queries.txt:1010
# f6cef978c49a4c76bbe1acffff3c8719
msgid "(Behind the scenes, this functionality is implemented by Python descriptors_. This shouldn't really matter to you, but we point it out here for the curious.)"
msgstr ""

#: ../../topics/db/queries.txt:1013
# d5a833684ef1454cb48d269905a0cff0
msgid "Django also creates API accessors for the \"other\" side of the relationship -- the link from the related model to the model that defines the relationship. For example, a ``Blog`` object ``b`` has access to a list of all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set.all()``."
msgstr ""

#: ../../topics/db/queries.txt:1018
# a38d045a7e1d427297fdd4bedca6f1d5
msgid "All examples in this section use the sample ``Blog``, ``Author`` and ``Entry`` models defined at the top of this page."
msgstr ""

#: ../../topics/db/queries.txt:1024
# 300894ffdeb64c47a13b0dbd0c6fb712
msgid "One-to-many relationships"
msgstr ""

#: ../../topics/db/queries.txt:1027
# a1c5592fd7264257842f80e903b6ee93
msgid "Forward"
msgstr ""

#: ../../topics/db/queries.txt:1029
# 6b74d7690b9943838abced7b5c4143a2
msgid "If a model has a :class:`~django.db.models.ForeignKey`, instances of that model will have access to the related (foreign) object via a simple attribute of the model."
msgstr ""

#: ../../topics/db/queries.txt:1038
# d01cee6e913d47eb8c4b2d9993a023b3
msgid "You can get and set via a foreign-key attribute. As you may expect, changes to the foreign key aren't saved to the database until you call :meth:`~django.db.models.Model.save`. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1046
# dcf20b1282d047478a29406f37dfd1e2
msgid "If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i.e., it allows ``NULL`` values), you can assign ``None`` to it. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1053
# 52585913df5549488f95fcd2bdc07006
msgid "Forward access to one-to-many relationships is cached the first time the related object is accessed. Subsequent accesses to the foreign key on the same object instance are cached. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1061
# 92af4aa73be6429fabf41f94787c6c71
msgid "Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:`~django.db.models.query.QuerySet` method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1072
# d7232db370a5485bbe3db32f1372d19d
msgid "Following relationships \"backward\""
msgstr ""

#: ../../topics/db/queries.txt:1074
# a77751e2e6284ea0af37333d1faa7338
msgid "If a model has a :class:`~django.db.models.ForeignKey`, instances of the foreign-key model will have access to a :class:`~django.db.models.Manager` that returns all instances of the first model. By default, this :class:`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the source model name, lowercased. This :class:`~django.db.models.Manager` returns ``QuerySets``, which can be filtered and manipulated as described in the \"Retrieving objects\" section above."
msgstr ""

#: ../../topics/db/queries.txt:1091
# 96cd259e505743668f4e68b138d5d964
msgid "You can override the ``FOO_set`` name by setting the ``related_name`` parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, the above example code would look like this::"
msgstr ""

#: ../../topics/db/queries.txt:1103
# c1ebca75e09d4b85b3c1914b3c5e493a
msgid "You cannot access a reverse :class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` from the class; it must be accessed from an instance::"
msgstr ""

#: ../../topics/db/queries.txt:1112
# fe541009a46a4123861008f65a68aa3f
msgid "In addition to the :class:`~django.db.models.query.QuerySet` methods defined in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

#: ../../topics/db/queries.txt:1119
# 9308b2ded6b44e5cbc614aab5d3bc39d
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1122
# 6c7226e0dcd1445da6f368c7def3e5c0
msgid "Creates a new object, saves it and puts it in the related object set. Returns the newly created object."
msgstr ""

#: ../../topics/db/queries.txt:1126
# 8aabc074332a4cac810b18dd7a109946
msgid "Removes the specified model objects from the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1129
# 1ff72f081d6e45f98369481a973fb4e7
msgid "Removes all objects from the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1131
# 8038be67a81a4d58966e4bff8af8797c
msgid "To assign the members of a related set in one fell swoop, just assign to it from any iterable object. The iterable can contain object instances, or just a list of primary key values. For example::"
msgstr ""

#: ../../topics/db/queries.txt:1138
# 12ffab4f268e4acf96bbe9bde49760bd
msgid "In this example, ``e1`` and ``e2`` can be full Entry instances, or integer primary key values."
msgstr ""

#: ../../topics/db/queries.txt:1141
# 271cbd951d0e4369aaee9de6a13dd007
msgid "If the ``clear()`` method is available, any pre-existing objects will be removed from the ``entry_set`` before all objects in the iterable (in this case, a list) are added to the set. If the ``clear()`` method is *not* available, all objects in the iterable will be added without removing any existing elements."
msgstr ""

#: ../../topics/db/queries.txt:1147
# 28146a9bd3314cbfbdd34a41ba64ff70
msgid "Each \"reverse\" operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database."
msgstr ""

#: ../../topics/db/queries.txt:1156
# 61231a55178d47bdbce00b5fb2da14e3
msgid "Both ends of a many-to-many relationship get automatic API access to the other end. The API works just as a \"backward\" one-to-many relationship, above."
msgstr ""

#: ../../topics/db/queries.txt:1159
# d3ec190f700040fb8c07454290e2078e
msgid "The only difference is in the attribute naming: The model that defines the :class:`~django.db.models.ManyToManyField` uses the attribute name of that field itself, whereas the \"reverse\" model uses the lowercased model name of the original model, plus ``'_set'`` (just like reverse one-to-many relationships)."
msgstr ""

#: ../../topics/db/queries.txt:1164
# 8fd82027ea964bc49c598ba0b4bd6093
msgid "An example makes this easier to understand::"
msgstr ""

#: ../../topics/db/queries.txt:1174
# beaf18525f144a939eec6473794b946f
msgid "Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` can specify ``related_name``. In the above example, if the :class:`~django.db.models.ManyToManyField` in ``Entry`` had specified ``related_name='entries'``, then each ``Author`` instance would have an ``entries`` attribute instead of ``entry_set``."
msgstr ""

#: ../../topics/db/queries.txt:1183
# a8a86c8a27ba4aef9c674b1882080d70
msgid "One-to-one relationships are very similar to many-to-one relationships. If you define a :class:`~django.db.models.OneToOneField` on your model, instances of that model will have access to the related object via a simple attribute of the model."
msgstr ""

#: ../../topics/db/queries.txt:1197
# 905e26a61a2c42c1bc9a781e91e1a787
msgid "The difference comes in \"reverse\" queries. The related model in a one-to-one relationship also has access to a :class:`~django.db.models.Manager` object, but that :class:`~django.db.models.Manager` represents a single object, rather than a collection of objects::"
msgstr ""

#: ../../topics/db/queries.txt:1205
# d8957132f6824168b1c2b01f6dfc3c63
msgid "If no object has been assigned to this relationship, Django will raise a ``DoesNotExist`` exception."
msgstr ""

#: ../../topics/db/queries.txt:1208
# 2635cb1392b54cb0b6b8df802c7c8071
msgid "Instances can be assigned to the reverse relationship in the same way as you would assign the forward relationship::"
msgstr ""

#: ../../topics/db/queries.txt:1214
# 48055379319e4451b530c7761b6d5290
msgid "How are the backward relationships possible?"
msgstr ""

#: ../../topics/db/queries.txt:1216
# 4ebbc5d0306640519caac84f4f699258
msgid "Other object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don't Repeat Yourself) principle, so Django only requires you to define the relationship on one end."
msgstr ""

#: ../../topics/db/queries.txt:1221
# 47e059cdc3bf4aa3b69c143a22cbdd15
msgid "But how is this possible, given that a model class doesn't know which other model classes are related to it until those other model classes are loaded?"
msgstr ""

#: ../../topics/db/queries.txt:1224
# 1bf53d50a4ad43e5bc7649faa158769f
msgid "The answer lies in the :setting:`INSTALLED_APPS` setting. The first time any model is loaded, Django iterates over every model in :setting:`INSTALLED_APPS` and creates the backward relationships in memory as needed. Essentially, one of the functions of :setting:`INSTALLED_APPS` is to tell Django the entire model domain."
msgstr ""

#: ../../topics/db/queries.txt:1231
# 78672069229d46f4af1d30383a64a74e
msgid "Queries over related objects"
msgstr ""

#: ../../topics/db/queries.txt:1233
# 7b85c92daf2c490bb28860197093a33c
msgid "Queries involving related objects follow the same rules as queries involving normal value fields. When specifying the value for a query to match, you may use either an object instance itself, or the primary key value for the object."
msgstr ""

#: ../../topics/db/queries.txt:1237
# 7b5b28108525471bb0036df778ca339e
msgid "For example, if you have a Blog object ``b`` with ``id=5``, the following three queries would be identical::"
msgstr ""

#: ../../topics/db/queries.txt:1245
# 8484e99af01a45de8f9b64dd218196d8
msgid "Falling back to raw SQL"
msgstr ""

#: ../../topics/db/queries.txt:1247
# ee327d38e2a544bb8530d266b0a6ca72
msgid "If you find yourself needing to write an SQL query that is too complex for Django's database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see :doc:`/topics/db/sql`."
msgstr ""

#: ../../topics/db/queries.txt:1252
# fde8107b1e554d8cb6881f7b207301eb
msgid "Finally, it's important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there's nothing Django-specific about your database."
msgstr ""

#: ../../topics/db/sql.txt:3
# e3b4ae05642b4032ace386b30b88067a
msgid "Performing raw SQL queries"
msgstr ""

#: ../../topics/db/sql.txt:7
# 954489094b3f4899b0f85e312b5ca325
msgid "When the :doc:`model query APIs </topics/db/queries>` don't go far enough, you can fall back to writing raw SQL. Django gives you two ways of performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform raw queries and return model instances`__, or you can avoid the model layer entirely and `execute custom SQL directly`__."
msgstr ""

#: ../../topics/db/sql.txt:19
# da9a59136bc54e70a05d4354387d5a43
msgid "Performing raw queries"
msgstr ""

#: ../../topics/db/sql.txt:23
# c2cc4295ffa247029db68e5fd4108bd8
msgid "The ``raw()`` manager method can be used to perform raw SQL queries that return model instances:"
msgstr ""

#: ../../topics/db/sql.txt:28
# d2e528d6ff254ea0ba65b6ff7d9e2397
msgid "This method method takes a raw SQL query, executes it, and returns a :class:`~django.db.models.query.RawQuerySet` instance. This :class:`~django.db.models.query.RawQuerySet` instance can be iterated over just like an normal QuerySet to provide object instances."
msgstr ""

#: ../../topics/db/sql.txt:33
# e5f2d2eeb94c41cf86564baed4458fa5
msgid "This is best illustrated with an example. Suppose you've got the following model::"
msgstr ""

#: ../../topics/db/sql.txt:40
# fb2bbdba28124d7bb7a4c7ce2b80c968
msgid "You could then execute custom SQL like so::"
msgstr ""

#: ../../topics/db/sql.txt:47
# ba391dcf9da04ef7ae2c83dff3342a9c
msgid "Of course, this example isn't very exciting -- it's exactly the same as running ``Person.objects.all()``. However, ``raw()`` has a bunch of other options that make it very powerful."
msgstr ""

#: ../../topics/db/sql.txt:53
# ed597ae5cec845b485015ae300a78a71
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

#: ../../topics/db/sql.txt:55
# 19e1e07c39174dedaa762d611df27a1b
msgid "By default, Django figures out a database table name by joining the model's \"app label\" -- the name you used in ``manage.py startapp`` -- to the model's class name, with an underscore between them. In the example we've assumed that the ``Person`` model lives in an app named ``myapp``, so its table would be ``myapp_person``."
msgstr ""

#: ../../topics/db/sql.txt:61
# a88859caf61a4fe2b2a6763411adcd61
msgid "For more details check out the documentation for the :attr:`~Options.db_table` option, which also lets you manually set the database table name."
msgstr ""

#: ../../topics/db/sql.txt:67
# 1cb3fa468f314cc6bd1c2492853e7602
msgid "No checking is done on the SQL statement that is passed in to ``.raw()``. Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result."
msgstr ""

#: ../../topics/db/sql.txt:73
# eaa7299875b24d5f814e19451a09163c
msgid "Mapping query fields to model fields"
msgstr ""

#: ../../topics/db/sql.txt:75
# 09fb7b0fc1b145b6b851649fac4ca86c
msgid "``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

#: ../../topics/db/sql.txt:77
# 3376a5bbb6934256ad2749f1bd1e8749
msgid "The order of fields in your query doesn't matter. In other words, both of the following queries work identically::"
msgstr ""

#: ../../topics/db/sql.txt:85
# d7de8089606d487abf449861a32f74c2
msgid "Matching is done by name. This means that you can use SQL's ``AS`` clauses to map fields in the query to model fields. So if you had some other table that had ``Person`` data in it, you could easily map it into ``Person`` instances::"
msgstr ""

#: ../../topics/db/sql.txt:95
# 60d6e2bbd2f9476f8433e34bc2c3e99f
msgid "As long as the names match, the model instances will be created correctly."
msgstr ""

#: ../../topics/db/sql.txt:97
# 9fd021fe76954bf3a8bdb8eaae68e7e8
msgid "Alternatively, you can map fields in the query to model fields using the ``translations`` argument to ``raw()``. This is a dictionary mapping names of fields in the query to names of fields on the model. For example, the above query could also be written::"
msgstr ""

#: ../../topics/db/sql.txt:106
# 31f09903ae6d48b089ee0166bf2e39db
msgid "Index lookups"
msgstr ""

#: ../../topics/db/sql.txt:108
# 3433aebf03264f228a4b0f38d71bb2ea
msgid "``raw()`` supports indexing, so if you need only the first result you can write::"
msgstr ""

#: ../../topics/db/sql.txt:113
# 4ba6abaa55b442deb414d868ed118347
msgid "However, the indexing and slicing are not performed at the database level. If you have a big amount of ``Person`` objects in your database, it is more efficient to limit the query at the SQL level::"
msgstr ""

#: ../../topics/db/sql.txt:120
# 508a4931d5c94ed095e7ec10f588739f
msgid "Deferring model fields"
msgstr ""

#: ../../topics/db/sql.txt:122
# b4d3a2fb5f97439897dd8171187a48f0
msgid "Fields may also be left out::"
msgstr ""

#: ../../topics/db/sql.txt:126
# 34ef1a42b34e40809902888dc93f4792
msgid "The ``Person`` objects returned by this query will be deferred model instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means that the fields that are omitted from the query will be loaded on demand. For example::"
msgstr ""

#: ../../topics/db/sql.txt:137
# bd7043bbf2a046b2a093f063b6d50ccd
msgid "From outward appearances, this looks like the query has retrieved both the first name and last name. However, this example actually issued 3 queries. Only the first names were retrieved by the raw() query -- the last names were both retrieved on demand when they were printed."
msgstr ""

#: ../../topics/db/sql.txt:142
# e05e87486a1a4aaf9b7f8d115934aeb8
msgid "There is only one field that you can't leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An ``InvalidQuery`` exception will be raised if you forget to include the primary key."
msgstr ""

#: ../../topics/db/sql.txt:148
# d7e818a2cb9c4b67a210995fb98a26ec
msgid "Adding annotations"
msgstr ""

#: ../../topics/db/sql.txt:150
# fe91fd1112b74249b509e29fe7f8c335
msgid "You can also execute queries containing fields that aren't defined on the model. For example, we could use `PostgreSQL's age() function`__ to get a list of people with their ages calculated by the database::"
msgstr ""

#: ../../topics/db/sql.txt:164
# b9a9f842ac384384b860e870ac088c48
msgid "Passing parameters into ``raw()``"
msgstr ""

#: ../../topics/db/sql.txt:166
# 4e245fb301a9437f8f55dd17e8eecc35
msgid "If you need to perform parameterized queries, you can use the ``params`` argument to ``raw()``::"
msgstr ""

#: ../../topics/db/sql.txt:172
# 072e0a359e3f49978ad19ade7f5434fd
msgid "``params`` is a list of parameters. You'll use ``%s`` placeholders in the query string (regardless of your database engine); they'll be replaced with parameters from the ``params`` list."
msgstr ""

#: ../../topics/db/sql.txt:178
# bcb94df689f3491f801d2f550e70b7b7
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

#: ../../topics/db/sql.txt:180
# 6f37fd723d6144f19cfe8c2adf7d4f3a
msgid "It's tempting to write the above query as::"
msgstr ""

#: ../../topics/db/sql.txt:185
# 41d3c6c901654d8eafe1ba5d7016489f
msgid "**Don't.**"
msgstr ""

#: ../../topics/db/sql.txt:187
# 491774864a4540f984e8758ffbe249c5
msgid "Using the ``params`` list completely protects you from `SQL injection attacks`__, a common exploit where attackers inject arbitrary SQL into your database. If you use string interpolation, sooner or later you'll fall victim to SQL injection. As long as you remember to always use the ``params`` list you'll be protected."
msgstr ""

#: ../../topics/db/sql.txt:198
# dc91ecc3f49945f58bc91d531254f694
msgid "Executing custom SQL directly"
msgstr ""

#: ../../topics/db/sql.txt:200
# caac98898d504572ab35996a2d231fe3
msgid "Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to perform queries that don't map cleanly to models, or directly execute ``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

#: ../../topics/db/sql.txt:204
# 1b3f3af2280445cfb48fe1d48c9b38b1
msgid "In these cases, you can always access the database directly, routing around the model layer entirely."
msgstr ""

#: ../../topics/db/sql.txt:207
# 786491cdbd2e4d829a6c20b78609778f
msgid "The object ``django.db.connection`` represents the default database connection, and ``django.db.transaction`` represents the default database transaction. To use the database connection, call ``connection.cursor()`` to get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the resulting rows. After performing a data changing operation, you should then call ``transaction.commit_unless_managed()`` to ensure your changes are committed to the database. If your query is purely a data retrieval operation, no commit is required. For example::"
msgstr ""

#: ../../topics/db/sql.txt:243
# 043b5c8a9af94f01935e939aeb329151
msgid "By default, the Python DB API will return results without their field names, which means you end up with a ``list`` of values, rather than a ``dict``. At a small performance cost, you can return results as a ``dict`` by using something like this::"
msgstr ""

#: ../../topics/db/sql.txt:256
# 7753b9bd2c974adbaf97698d13897b62
msgid "Here is an example of the difference between the two::"
msgstr ""

#: ../../topics/db/sql.txt:270
# 7721540769e94db29532169226032416
msgid "Transactions and raw SQL"
msgstr ""

#: ../../topics/db/sql.txt:272
# 5eb6d5075dcd4ccf8e5de672688d4478
msgid "When you make a raw SQL call, Django will automatically mark the current transaction as dirty. You must then ensure that the transaction containing those calls is closed correctly. See :ref:`the notes on the requirements of Django's transaction handling <topics-db-transactions-requirements>` for more details."
msgstr ""

#: ../../topics/db/sql.txt:280
# 9fe0ac0d180c4500bd25a6f3171e39d8
msgid "Prior to Django 1.3, it was necessary to manually mark a transaction as dirty using ``transaction.set_dirty()`` when using raw SQL calls."
msgstr ""

#: ../../topics/db/sql.txt:284
# b8cd5de4853a4b7ca8144625136d9341
msgid "Connections and cursors"
msgstr ""

#: ../../topics/db/sql.txt:286
# b605f90650d64f11a54fc9002cc22ae6
msgid "``connection`` and ``cursor`` mostly implement the standard Python DB-API described in :pep:`249` (except when it comes to :doc:`transaction handling </topics/db/transactions>`). If you're not familiar with the Python DB-API, note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically add quotes and escaping to your parameter(s) as necessary. (Also note that Django expects the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used by the SQLite Python bindings. This is for the sake of consistency and sanity.)"
msgstr ""

#: ../../topics/db/tablespaces.txt:3
# 547f628a93224e8cb0571c95d9398a82
msgid "Tablespaces"
msgstr ""

#: ../../topics/db/tablespaces.txt:5
# c2e9b4d4e58e4621a33c6a1122aae795
msgid "A common paradigm for optimizing performance in database systems is the use of `tablespaces`_ to organize disk layout."
msgstr ""

#: ../../topics/db/tablespaces.txt:11
# ca923740c40e44388fa7960e29541a1e
msgid "Django does not create the tablespaces for you. Please refer to your database engine's documentation for details on creating and managing tablespaces."
msgstr ""

#: ../../topics/db/tablespaces.txt:17
# fffd8b17761842bcb3aae31bdf5a4344
msgid "Declaring tablespaces for tables"
msgstr ""

#: ../../topics/db/tablespaces.txt:19
# 5d74ccc4b6cb4cc3959d92e24839fa05
msgid "A tablespace can be specified for the table generated by a model by supplying the :attr:`~django.db.models.Options.db_tablespace` option inside the model's ``class Meta``. This option also affects tables automatically created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

#: ../../topics/db/tablespaces.txt:24
# ac10ff9391d24aea80668bd27f8702e8
msgid "You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default value for :attr:`~django.db.models.Options.db_tablespace`. This is useful for setting a tablespace for the built-in Django apps and other applications whose code you cannot control."
msgstr ""

#: ../../topics/db/tablespaces.txt:30
# b92d4932898f4ed597f55646e1ecac69
msgid "Declaring tablespaces for indexes"
msgstr ""

#: ../../topics/db/tablespaces.txt:32
# 99d4c0dfcdbc4e24ad0b611f9a601df9
msgid "You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a ``Field`` constructor to specify an alternate tablespace for the ``Field``'s column index. If no index would be created for the column, the option is ignored."
msgstr ""

#: ../../topics/db/tablespaces.txt:37
# 5d375660053f4fa98ce5f1aaf99f0c54
msgid "You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

#: ../../topics/db/tablespaces.txt:40
# 3790e274cf784cf299d8a09b9f2a0ab8
msgid "If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the same tablespace as the tables."
msgstr ""

#: ../../topics/db/tablespaces.txt:57
# 155e530a8d464358a0ad493ee3aa3906
msgid "In this example, the tables generated by the ``TablespaceExample`` model (i.e. the model table and the many-to-many table) would be stored in the ``tables`` tablespace. The index for the name field and the indexes on the many-to-many table would be stored in the ``indexes`` tablespace. The ``data`` field would also generate an index, but no tablespace for it is specified, so it would be stored in the model tablespace ``tables`` by default."
msgstr ""

#: ../../topics/db/tablespaces.txt:65
# 6c48f8b8501a4cf8acfde3f0c68f994a
msgid "Database support"
msgstr ""

#: ../../topics/db/tablespaces.txt:67
# 88aa3d4d174b46f1849696910d837fff
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

#: ../../topics/db/tablespaces.txt:69
# 93bcb22f5f274b24a97c146a77c2f368
msgid "When you use a backend that lacks support for tablespaces, Django ignores all tablespace-related options."
msgstr ""

#: ../../topics/db/transactions.txt:3
# f1c9a2ee694d4302b88e1bd30a21112b
msgid "Managing database transactions"
msgstr ""

#: ../../topics/db/transactions.txt:7
# 997228c4f0c543f892982643d3257ce6
msgid "Django gives you a few ways to control how database transactions are managed, if you're using a database that supports transactions."
msgstr ""

#: ../../topics/db/transactions.txt:11
# bcace43c27314a8181857ef2a1b4ce66
msgid "Django's default transaction behavior"
msgstr ""

#: ../../topics/db/transactions.txt:13
# 8280dbf6a193469bafca3e4b57c89438
msgid "Django's default behavior is to run with an open transaction which it commits automatically when any built-in, data-altering model function is called. For example, if you call ``model.save()`` or ``model.delete()``, the change will be committed immediately."
msgstr ""

#: ../../topics/db/transactions.txt:18
# a0890139e189488bbdf95b53d6db8446
msgid "This is much like the auto-commit setting for most databases. As soon as you perform an action that needs to write to the database, Django produces the ``INSERT``/``UPDATE``/``DELETE`` statements and then does the ``COMMIT``. There's no implicit ``ROLLBACK``."
msgstr ""

#: ../../topics/db/transactions.txt:24
# 87f6fc20040047afbd567b9e5d4a5b7a
msgid "Tying transactions to HTTP requests"
msgstr ""

#: ../../topics/db/transactions.txt:26
# d8375b226a2b4797beaef41ee3f5beaf
msgid "The recommended way to handle transactions in Web requests is to tie them to the request and response phases via Django's ``TransactionMiddleware``."
msgstr ""

#: ../../topics/db/transactions.txt:29
# 0d0cd1b04e5a43759fc80c3dafdc2f3e
msgid "It works like this: When a request starts, Django starts a transaction. If the response is produced without problems, Django commits any pending transactions. If the view function produces an exception, Django rolls back any pending transactions."
msgstr ""

#: ../../topics/db/transactions.txt:34
# ed82e488eab143b38832efe1d21e2830
msgid "To activate this feature, just add the ``TransactionMiddleware`` middleware to your :setting:`MIDDLEWARE_CLASSES` setting::"
msgstr ""

#: ../../topics/db/transactions.txt:45
# e4d934840da749158e3c3bbf964432b0
msgid "The order is quite important. The transaction middleware applies not only to view functions, but also for all middleware modules that come after it. So if you use the session middleware after the transaction middleware, session creation will be part of the transaction."
msgstr ""

#: ../../topics/db/transactions.txt:50
# 54bcc4c55073479f94993993dd720847
msgid "The various cache middlewares are an exception: :class:`~django.middleware.cache.CacheMiddleware`, :class:`~django.middleware.cache.UpdateCacheMiddleware`, and :class:`~django.middleware.cache.FetchFromCacheMiddleware` are never affected. Even when using database caching, Django's cache backend uses its own database cursor (which is mapped to its own database connection internally)."
msgstr ""

#: ../../topics/db/transactions.txt:60
# b5babc9af6e94c4faf2679d4242c62b8
msgid "Controlling transaction management in views"
msgstr ""

#: ../../topics/db/transactions.txt:65
# b32008f5ba3845fd892f00abc76e8a98
msgid "For most people, implicit request-based transactions work wonderfully. However, if you need more fine-grained control over how transactions are managed, you can use a set of functions in ``django.db.transaction`` to control transactions on a per-function or per-code-block basis."
msgstr ""

#: ../../topics/db/transactions.txt:70
# a313a8224853495cbe567a567a1521a8
msgid "These functions, described in detail below, can be used in two different ways:"
msgstr ""

#: ../../topics/db/transactions.txt:72
# 71ec2530f376465cb42714a82943fc3f
msgid "As a decorator_ on a particular function. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:82
# 5fd1e1e7706c44fc919443088fabaf0c
msgid "As a `context manager`_ around a particular block of code::"
msgstr ""

#: ../../topics/db/transactions.txt:96
# 597b24c3d66e497fbad57fe35ee59f63
msgid "Both techniques work with all supported version of Python. However, in Python 2.5, you must add ``from __future__ import with_statement`` at the beginning of your module if you are using the ``with`` statement."
msgstr ""

#: ../../topics/db/transactions.txt:103
# c8f86cb143bc462ab3bb231e99521a17
msgid "For maximum compatibility, all of the examples below show transactions using the decorator syntax, but all of the follow functions may be used as context managers, too."
msgstr ""

#: ../../topics/db/transactions.txt:109
# 45c37e53410d4056a9bc2709b4184cdc
msgid "Although the examples below use view functions as examples, these decorators and context managers can be used anywhere in your code that you need to deal with transactions."
msgstr ""

#: ../../topics/db/transactions.txt:117
# fe40ed90137a47d48e1046e0c8c2a09b
msgid "Use the ``autocommit`` decorator to switch a view function to Django's default commit behavior, regardless of the global transaction setting."
msgstr ""

#: ../../topics/db/transactions.txt:132
# 7703190a05054cf992cc8608736681a7
msgid "Within ``viewfunc()``, transactions will be committed as soon as you call ``model.save()``, ``model.delete()``, or any other function that writes to the database.  ``viewfunc2()`` will have this same behavior, but for the ``\"my_other_database\"`` connection."
msgstr ""

#: ../../topics/db/transactions.txt:139
# e60079199341487aa42cbc30e6f9f8b6
msgid "Use the ``commit_on_success`` decorator to use a single transaction for all the work done in a function::"
msgstr ""

#: ../../topics/db/transactions.txt:152
# 72fea321bb0c40d4ab05ee41e0ae9188
msgid "If the function returns successfully, then Django will commit all work done within the function at that point. If the function raises an exception, though, Django will roll back the transaction."
msgstr ""

#: ../../topics/db/transactions.txt:158
# 7e8538c9ee6c475bb9847e3a2529549b
msgid "Use the ``commit_manually`` decorator if you need full control over transactions. It tells Django you'll be managing the transaction on your own."
msgstr ""

#: ../../topics/db/transactions.txt:162
# 8654b250ecb448dfb0cd2568ef3bdb6c
msgid "If your view changes data and doesn't ``commit()`` or ``rollback()``, Django will raise a ``TransactionManagementError`` exception."
msgstr ""

#: ../../topics/db/transactions.txt:165
# 9be8cd0a6332460481c50b10ccae44d1
msgid "Manual transaction management looks like this::"
msgstr ""

#: ../../topics/db/transactions.txt:191
# 6419e8bdb922431c94d741db3b6386e5
msgid "Requirements for transaction handling"
msgstr ""

#: ../../topics/db/transactions.txt:195
# b46c45ea43014497ac19918dc02255bb
msgid "Django requires that every transaction that is opened is closed before the completion of a request. If you are using :func:`autocommit` (the default commit mode) or :func:`commit_on_success`, this will be done for you automatically. However, if you are manually managing transactions (using the :func:`commit_manually` decorator), you must ensure that the transaction is either committed or rolled back before a request is completed."
msgstr ""

#: ../../topics/db/transactions.txt:203
# 710aa2092a9b4e0bbc14eda9926e86cc
msgid "This applies to all database operations, not just write operations. Even if your transaction only reads from the database, the transaction must be committed or rolled back before you complete a request."
msgstr ""

#: ../../topics/db/transactions.txt:208
# 09d3858e1f2f4b3e81b1a6c140da87c8
msgid "How to globally deactivate transaction management"
msgstr ""

#: ../../topics/db/transactions.txt:210
# 40978ab2a7ce428ca31e82424bc1ea91
msgid "Control freaks can totally disable all transaction management by setting ``DISABLE_TRANSACTION_MANAGEMENT`` to ``True`` in the Django settings file."
msgstr ""

#: ../../topics/db/transactions.txt:213
# 6f976c755c584531bff9d44aeff70399
msgid "If you do this, Django won't provide any automatic transaction management whatsoever. Middleware will no longer implicitly commit transactions, and you'll need to roll management yourself. This even requires you to commit changes done by middleware somewhere else."
msgstr ""

#: ../../topics/db/transactions.txt:218
# f76a097f4e894dfeb1531e156c7cd1bd
msgid "Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange. In almost all situations, you'll be better off using the default behavior, or the transaction middleware, and only modify selected functions as needed."
msgstr ""

#: ../../topics/db/transactions.txt:226
# 87c660bacfa948e9968ad185dd02fa82
msgid "Savepoints"
msgstr ""

#: ../../topics/db/transactions.txt:228
# 07352d758d86446983a11ba70c417e94
msgid "A savepoint is a marker within a transaction that enables you to roll back part of a transaction, rather than the full transaction. Savepoints are available with the PostgreSQL 8, Oracle and MySQL (version 5.0.3 and newer, when using the InnoDB storage engine) backends. Other backends provide the savepoint functions, but they're empty operations -- they don't actually do anything."
msgstr ""

#: ../../topics/db/transactions.txt:237
# 3ecdde779f9f401faaa9a7603dc6ad8e
msgid "Savepoints aren't especially useful if you are using the default ``autocommit`` behavior of Django. However, if you are using ``commit_on_success`` or ``commit_manually``, each open transaction will build up a series of database operations, awaiting a commit or rollback. If you issue a rollback, the entire transaction is rolled back. Savepoints provide the ability to perform a fine-grained rollback, rather than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""

#: ../../topics/db/transactions.txt:245
# 83d116ca0893445baed36d19b5d60c83
msgid "Each of these functions takes a ``using`` argument which should be the name of a database for which the behavior applies.  If no ``using`` argument is provided then the ``\"default\"`` database is used."
msgstr ""

#: ../../topics/db/transactions.txt:249
# f9de7088618c4407b4e94a9657103ef3
msgid "Savepoints are controlled by three methods on the transaction object:"
msgstr ""

#: ../../topics/db/transactions.txt:253
# cace5e0edc6c48c1b054c1df427fc699
msgid "Creates a new savepoint. This marks a point in the transaction that is known to be in a \"good\" state."
msgstr ""

#: ../../topics/db/transactions.txt:256
# ef754ec7487f4da9ace6862854fcc437
msgid "Returns the savepoint ID (sid)."
msgstr ""

#: ../../topics/db/transactions.txt:260
# bdc2fcbfb3704b4290c50a1aeee1a019
msgid "Updates the savepoint to include any operations that have been performed since the savepoint was created, or since the last commit."
msgstr ""

#: ../../topics/db/transactions.txt:265
# 8489208dce4242bc98fec653b894ab4a
msgid "Rolls the transaction back to the last point at which the savepoint was committed."
msgstr ""

#: ../../topics/db/transactions.txt:268
# 091c186cef1b415ab7bb68c91f3cc6b5
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

#: ../../topics/db/transactions.txt:292
# 500c9d10a7164342ae06fb6c6c0a622b
msgid "Transactions in MySQL"
msgstr ""

#: ../../topics/db/transactions.txt:294
# 28e16fafd715431f967f8df43bb18e75
msgid "If you're using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you're using. (By \"table types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has `information on MySQL transactions`_."
msgstr ""

#: ../../topics/db/transactions.txt:300
# 3c5a72c5487b4a889b69d8feb97d1cb4
msgid "If your MySQL setup does *not* support transactions, then Django will function in auto-commit mode: Statements will be executed and committed as soon as they're called. If your MySQL setup *does* support transactions, Django will handle transactions as explained in this document."
msgstr ""

#: ../../topics/db/transactions.txt:308
# 429ac55542934f20b9e7e59e605e2557
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

#: ../../topics/db/transactions.txt:310
# 57bd832aa25e47f995579f25a6e392c8
msgid "When a call to a PostgreSQL cursor raises an exception (typically ``IntegrityError``), all subsequent SQL in the same transaction will fail with the error \"current transaction is aborted, queries ignored until end of transaction block\". Whilst simple use of ``save()`` is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL."
msgstr ""

#: ../../topics/db/transactions.txt:318
# f8da9572f1dd4fe2a380b478b4818a12
msgid "There are several ways to recover from this sort of error."
msgstr ""

#: ../../topics/db/transactions.txt:321
# e511db712e8241358901584ffe01d662
msgid "Transaction rollback"
msgstr ""

#: ../../topics/db/transactions.txt:323
# 289c7fc8281541c9aa53d5b722e7faca
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:332
# 20905022c72942fe963fb7d75e0495d1
msgid "Calling ``transaction.rollback()`` rolls back the entire transaction. Any uncommitted database operations will be lost. In this example, the changes made by ``a.save()`` would be lost, even though that operation raised no error itself."
msgstr ""

#: ../../topics/db/transactions.txt:338
# e9aaa5f593bf42d59a0a88be5c0feb4d
msgid "Savepoint rollback"
msgstr ""

#: ../../topics/db/transactions.txt:340
# d875fe4db4ee4748b2d79a873669f649
msgid "If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-db-transactions-savepoints>` to control the extent of a rollback. Before performing a database operation that could fail, you can set or update the savepoint; that way, if the operation fails, you can roll back the single offending operation, rather than the entire transaction. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:355
# 4e164ec09a3a4993b02ed85355f17ccb
msgid "In this example, ``a.save()`` will not be undone in the case where ``b.save()`` raises an exception."
msgstr ""

#: ../../topics/db/transactions.txt:359
# 78080ee01e8d4c22b6e4f90b6beac3f6
msgid "Database-level autocommit"
msgstr ""

#: ../../topics/db/transactions.txt:361
# 57990e9e4fc74a59af2611981090d9a1
msgid "With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL with :doc:`database-level autocommit </ref/databases>`. If you use this option, there is no constantly open transaction, so it is always possible to continue after catching an exception. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:375
# 72f96d8104264aa690ec59e0ae0039c1
msgid "This is not the same as the :ref:`autocommit decorator <topics-db-transactions-autocommit>`. When using database level autocommit there is no database transaction at all. The ``autocommit`` decorator still uses transactions, automatically committing each transaction when a database modifying operation occurs."
msgstr ""

#: ../../topics/email.txt:3
# 5ce7a1e985c3471794f2cc634f2d5488
msgid "Sending email"
msgstr ""

#: ../../topics/email.txt:8
# d2dc24a1484942b0ae073093261cf2fc
msgid "Although Python makes sending email relatively easy via the :mod:`smtplib` module, Django provides a couple of light wrappers over it. These wrappers are provided to make sending email extra quick, to make it easy to test email sending during development, and to provide support for platforms that can't use SMTP."
msgstr ""

#: ../../topics/email.txt:14
# c7f56d8fc3d0479e933b6ffba299717e
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

#: ../../topics/email.txt:19
# d0a13ac410f7480f9ea934f2915eb299
msgid "In two lines::"
msgstr ""

#: ../../topics/email.txt:26
# 2fea8849f65f4c8ab65a9f78bf7b9f61
msgid "Mail is sent using the SMTP host and port specified in the :setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` setting controls whether a secure connection is used."
msgstr ""

#: ../../topics/email.txt:34
# 70215964284d41e9a9f37f5f81b084c7
msgid "The character set of email sent with ``django.core.mail`` will be set to the value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

#: ../../topics/email.txt:38
# b3d4130100f5429790acdce11d078761
msgid "send_mail()"
msgstr ""

#: ../../topics/email.txt:42
# 4667d50af8bd42c7b7d05bc33be96089
msgid "The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

#: ../../topics/email.txt:45
# 864e817a4ffe4303a2fdf09778edcaae
msgid "The ``subject``, ``message``, ``from_email`` and ``recipient_list`` parameters are required."
msgstr ""

#: ../../topics/email.txt:48
# 0ccacf45bce14e9a833bbdffd4f98668
msgid "``subject``: A string."
msgstr ""

#: ../../topics/email.txt:49
# 1c6fe1bd8a744b12afc30a80a2279869
msgid "``message``: A string."
msgstr ""

#: ../../topics/email.txt:50
# f484b294d3114598996fb8257345c724
msgid "``from_email``: A string."
msgstr ""

#: ../../topics/email.txt:51
# b5da476f4833487c98e409fd8fd6d1e0
msgid "``recipient_list``: A list of strings, each an email address. Each member of ``recipient_list`` will see the other recipients in the \"To:\" field of the email message."
msgstr ""

#: ../../topics/email.txt:54
# 3ba908da5a924e5eb89a784b88aed5f5
msgid "``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of possible exceptions, all of which are subclasses of :exc:`~smtplib.SMTPException`."
msgstr ""

#: ../../topics/email.txt:58
# 09fa6f8977484784a7f8e818cd7fb336
msgid "``auth_user``: The optional username to use to authenticate to the SMTP server. If this isn't provided, Django will use the value of the :setting:`EMAIL_HOST_USER` setting."
msgstr ""

#: ../../topics/email.txt:61
# bac4e3f927ad400dadf795e4c56c8b45
msgid "``auth_password``: The optional password to use to authenticate to the SMTP server. If this isn't provided, Django will use the value of the :setting:`EMAIL_HOST_PASSWORD` setting."
msgstr ""

#: ../../topics/email.txt:64
# 78ad9949bf784159b0557830d9f6fdf4
msgid "``connection``: The optional email backend to use to send the mail. If unspecified, an instance of the default backend will be used. See the documentation on :ref:`Email backends <topic-email-backends>` for more details."
msgstr ""

#: ../../topics/email.txt:70
# def8f4be95ec4baf986c216865de4fb9
msgid "send_mass_mail()"
msgstr ""

#: ../../topics/email.txt:74
# a24274cdf37b4dde8b180a958fcf2525
msgid "``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

#: ../../topics/email.txt:76
# 46c229218a9e4803b2fa4caf43087b19
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

#: ../../topics/email.txt:80
# ce62e7f10cf245a2bcd25326ed00dae4
msgid "``fail_silently``, ``auth_user`` and ``auth_password`` have the same functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

#: ../../topics/email.txt:83
# 57c5e09b35084f2daebfa8edded7d919
msgid "Each separate element of ``datatuple`` results in a separate email message. As in :meth:`~django.core.mail.send_mail()`, recipients in the same ``recipient_list`` will all see the other addresses in the email messages' \"To:\" field."
msgstr ""

#: ../../topics/email.txt:88
# 5a02e53acf684b11bbefa613bbe54dae
msgid "For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened::"
msgstr ""

#: ../../topics/email.txt:97
# c8042c23f1f5468fa56f22e0caf2afad
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

#: ../../topics/email.txt:99
# 40b60bc8cc1a49c19379c2ea06f903b7
msgid "The main difference between :meth:`~django.core.mail.send_mass_mail()` and :meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail.send_mail()` opens a connection to the mail server each time it's executed, while :meth:`~django.core.mail.send_mass_mail()` uses a single connection for all of its messages. This makes :meth:`~django.core.mail.send_mass_mail()` slightly more efficient."
msgstr ""

#: ../../topics/email.txt:107
# abda4f123b1d483fb479852d426a9586
msgid "mail_admins()"
msgstr ""

#: ../../topics/email.txt:111
# 69bd17f63a6e41fd887e75d2f4b9c9e1
msgid "``django.core.mail.mail_admins()`` is a shortcut for sending an email to the site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

#: ../../topics/email.txt:114
# 512fa11bbb06430ab9e13f419f187713
msgid "``mail_admins()`` prefixes the subject with the value of the :setting:`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

#: ../../topics/email.txt:117
# 6debf52962fe4a6aafb23dbbe4f18636
msgid "The \"From:\" header of the email will be the value of the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../topics/email.txt:120
# f15dac8d75ff420da82c4177dda9f780
msgid "This method exists for convenience and readability."
msgstr ""

#: ../../topics/email.txt:124
# 38e5b84a134e4bcabda52fd88b11bf79
msgid "If ``html_message`` is provided, the resulting email will be a :mimetype:`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

#: ../../topics/email.txt:130
# 07467f8aae7a4051b34d37299ea65a52
msgid "mail_managers()"
msgstr ""

#: ../../topics/email.txt:134
# 173ae5cd92304594ab76b73a65ed9909
msgid "``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except it sends an email to the site managers, as defined in the :setting:`MANAGERS` setting."
msgstr ""

#: ../../topics/email.txt:139
#: ../../topics/http/sessions.txt:277
#: ../../topics/http/shortcuts.txt:176
# d439227bc3d54773adcdcc36ed4cc164
# d4510470249446fe891dd3813fa03c12
# c22d0d4f08c04b15b7b3c24e89b6403b
msgid "Examples"
msgstr ""

#: ../../topics/email.txt:141
# 4403138591f044d4bcb084b77c62feed
msgid "This sends a single email to john@example.com and jane@example.com, with them both appearing in the \"To:\"::"
msgstr ""

#: ../../topics/email.txt:147
# cc91e2855383457f88cfc66060be3ffe
msgid "This sends a message to john@example.com and jane@example.com, with them both receiving a separate email::"
msgstr ""

#: ../../topics/email.txt:157
# 9a3f3c732bd44ab5a55d360f58781353
msgid "Preventing header injection"
msgstr ""

#: ../../topics/email.txt:159
# 02f1cf9007874a0ab02766174043e246
msgid "`Header injection`_ is a security exploit in which an attacker inserts extra email headers to control the \"To:\" and \"From:\" in email messages that your scripts generate."
msgstr ""

#: ../../topics/email.txt:163
# 28fdb8354be743b28896a400050b2dc1
msgid "The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any ``subject``, ``from_email`` or ``recipient_list`` contains a newline (in either Unix, Windows or Mac style), the email function (e.g. :meth:`~django.core.mail.send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of ``ValueError``) and, hence, will not send the email. It's your responsibility to validate all data before passing it to the email functions."
msgstr ""

#: ../../topics/email.txt:171
# d61c121ae38f4df185841cae815b9f12
msgid "If a ``message`` contains headers at the start of the string, the headers will simply be printed as the first bit of the email message."
msgstr ""

#: ../../topics/email.txt:174
# d1d6d6f7acb5429a9273133836ff8e88
msgid "Here's an example view that takes a ``subject``, ``message`` and ``from_email`` from the request's POST data, sends that to admin@example.com and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

#: ../../topics/email.txt:200
# 035361d58cc44fe4b437e33d102ff892
msgid "The EmailMessage class"
msgstr ""

#: ../../topics/email.txt:202
# 48129bdde62a4a0f8511acebf40a5dfa
msgid "Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail.send_mass_mail()` functions are actually thin wrappers that make use of the :class:`~django.core.mail.EmailMessage` class."
msgstr ""

#: ../../topics/email.txt:206
# aa81f96092674ef2bc8dafc076648186
msgid "Not all features of the :class:`~django.core.mail.EmailMessage` class are available through the :meth:`~django.core.mail.send_mail()` and related wrapper functions. If you wish to use advanced features, such as BCC'ed recipients, file attachments, or multi-part email, you'll need to create :class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

#: ../../topics/email.txt:213
# d08cff41e5ab410b813d37a3907964a1
msgid "This is a design feature. :meth:`~django.core.mail.send_mail()` and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility."
msgstr ""

#: ../../topics/email.txt:220
# ed320e56c62c4263a59e8eda48599c36
msgid ":class:`~django.core.mail.EmailMessage` is responsible for creating the email message itself. The :ref:`email backend <topic-email-backends>` is then responsible for sending the email."
msgstr ""

#: ../../topics/email.txt:224
# 6da2fec8911f411b8a189319d983f099
msgid "For convenience, :class:`~django.core.mail.EmailMessage` provides a simple ``send()`` method for sending a single email. If you need to send multiple messages, the email backend API :ref:`provides an alternative <topics-sending-multiple-emails>`."
msgstr ""

#: ../../topics/email.txt:230
# c29ab740344146e7b1d3028bc1663ec0
msgid "EmailMessage Objects"
msgstr ""

#: ../../topics/email.txt:234
# 7173a58ccbb44dd5a3cadc0be28ef578
msgid "The :class:`~django.core.mail.EmailMessage` class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the ``send()`` method."
msgstr ""

#: ../../topics/email.txt:242
# e3e3baf896e740c18cad3da426d1c781
msgid "``subject``: The subject line of the email."
msgstr ""

#: ../../topics/email.txt:244
# 4db86c7a30fa4be69e4d372966aac5cb
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

#: ../../topics/email.txt:246
# cf9a1444593b430a81d6bf1abc119898
msgid "``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred <fred@example.com>`` forms are legal. If omitted, the :setting:`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

#: ../../topics/email.txt:250
# 1b31c7c144ad4a66acd58ce40985dc09
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

#: ../../topics/email.txt:252
# 4cc241fe7f48493f9bbab83cc21c8a21
msgid "``bcc``: A list or tuple of addresses used in the \"Bcc\" header when sending the email."
msgstr ""

#: ../../topics/email.txt:255
# 5d0ac81055444c4889fd1fda80dd138a
msgid "``connection``: An email backend instance. Use this parameter if you want to use the same connection for multiple messages. If omitted, a new connection is created when ``send()`` is called."
msgstr ""

#: ../../topics/email.txt:259
# 1d1d79ffec1c4f4e9b3542b32ebc029c
msgid "``attachments``: A list of attachments to put on the message. These can be either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, mimetype)`` triples."
msgstr ""

#: ../../topics/email.txt:263
# a2816bf867a64dc1bc85f173e72f73dd
msgid "``headers``: A dictionary of extra headers to put on the message. The keys are the header name, values are the header values. It's up to the caller to ensure header names and values are in the correct format for an email message."
msgstr ""

#: ../../topics/email.txt:268
# 0e6ae8bf046148b789734c12dcff2d69
msgid "``cc``: A list or tuple of recipient addresses used in the \"Cc\" header when sending the email."
msgstr ""

#: ../../topics/email.txt:277
# 1e1a71e24f8a4247be2b4b9d93ab251b
msgid "The class has the following methods:"
msgstr ""

#: ../../topics/email.txt:279
# b6dbfc18d1e74377a4f77ee17359878b
msgid "``send(fail_silently=False)`` sends the message. If a connection was specified when the email was constructed, that connection will be used. Otherwise, an instance of the default backend will be instantiated and used. If the keyword argument ``fail_silently`` is ``True``, exceptions raised while sending the message will be quashed."
msgstr ""

#: ../../topics/email.txt:285
# 02f6fcd81933454492d7911512490762
msgid "``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core.mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever need to extend the :class:`~django.core.mail.EmailMessage` class, you'll probably want to override this method to put the content you want into the MIME object."
msgstr ""

#: ../../topics/email.txt:292
# 59de7efd92d14246b3c7349749fa3482
msgid "``recipients()`` returns a list of all the recipients of the message, whether they're recorded in the ``to`` or ``bcc`` attributes. This is another method you might need to override when subclassing, because the SMTP server needs to be told the full list of recipients when the message is sent. If you add another way to specify recipients in your class, they need to be returned from this method as well."
msgstr ""

#: ../../topics/email.txt:299
# 62c843e992ef47478d80b8cc659bba3b
msgid "``attach()`` creates a new file attachment and adds it to the message. There are two ways to call ``attach()``:"
msgstr ""

#: ../../topics/email.txt:302
# afd23137984d4493b75549938bd964c2
msgid "You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` instance. This will be inserted directly into the resulting message."
msgstr ""

#: ../../topics/email.txt:306
# 4dd660b88df6496aa2098dfa2b1efd45
msgid "Alternatively, you can pass ``attach()`` three arguments: ``filename``, ``content`` and ``mimetype``. ``filename`` is the name of the file attachment as it will appear in the email, ``content`` is the data that will be contained inside the attachment and ``mimetype`` is the optional MIME type for the attachment. If you omit ``mimetype``, the MIME content type will be guessed from the filename of the attachment."
msgstr ""

#: ../../topics/email.txt:318
# fa74c7c8fd7f4f60a0bfd499745bb2b1
msgid "``attach_file()`` creates a new attachment using a file from your filesystem. Call it with the path of the file to attach and, optionally, the MIME type to use for the attachment. If the MIME type is omitted, it will be guessed from the filename. The simplest use would be::"
msgstr ""

#: ../../topics/email.txt:328
# 1e369e92b1a04d9cac7def9989b11ca6
msgid "Sending alternative content types"
msgstr ""

#: ../../topics/email.txt:330
# ba934cd0e9514d069e8ac7af90cfef9a
msgid "It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django's email library, you can do this using the ``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail.EmailMessage` has an ``attach_alternative()`` method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from :class:`~django.core.mail.EmailMessage`."
msgstr ""

#: ../../topics/email.txt:338
# edeb83dd3dd64c4bb23f31011c679d59
msgid "To send a text and HTML combination, you could write::"
msgstr ""

#: ../../topics/email.txt:349
# 10c53692fcd84e48baf62846ecc0696c
msgid "By default, the MIME type of the ``body`` parameter in an :class:`~django.core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the ``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` class to change the main content type. The major type will always be ``\"text\"``, but you can change the subtype. For example::"
msgstr ""

#: ../../topics/email.txt:366
# 37965ffdd5424d009d2d316378a5e801
msgid "Email backends"
msgstr ""

#: ../../topics/email.txt:370
# 5417e83fc809439880f6530b0bb97a71
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

#: ../../topics/email.txt:372
# 1351f73b58df4279b1a3dee0723ee90e
msgid "The email backend class has the following methods:"
msgstr ""

#: ../../topics/email.txt:374
# 291e73d88133417395e34b5b9ccbc699
msgid "``open()`` instantiates an long-lived email-sending connection."
msgstr ""

#: ../../topics/email.txt:376
# c2b2733cddc243489cf1f2eaf99d6c54
msgid "``close()`` closes the current email-sending connection."
msgstr ""

#: ../../topics/email.txt:378
# 2a55c17824654d769394a8c27b70e5fb
msgid "``send_messages(email_messages)`` sends a list of :class:`~django.core.mail.EmailMessage` objects. If the connection is not open, this call will implicitly open the connection, and close the connection afterwards. If the connection is already open, it will be left open after mail has been sent."
msgstr ""

#: ../../topics/email.txt:385
# f1daa77d24f6471697831d9a3ba6d178
msgid "Obtaining an instance of an email backend"
msgstr ""

#: ../../topics/email.txt:387
# d61193ea101d453e85ae3a22f1d42dfb
msgid "The :meth:`get_connection` function in ``django.core.mail`` returns an instance of the email backend that you can use."
msgstr ""

#: ../../topics/email.txt:394
# db87624f5c4748d68ec2726c364bf03d
msgid "By default, a call to ``get_connection()`` will return an instance of the email backend specified in :setting:`EMAIL_BACKEND`. If you specify the ``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

#: ../../topics/email.txt:398
# 9fb37922dd514549b13d65374928b1e7
msgid "The ``fail_silently`` argument controls how the backend should handle errors. If ``fail_silently`` is True, exceptions during the email sending process will be silently ignored."
msgstr ""

#: ../../topics/email.txt:402
# ed65d022a7dc4c05bb3ea6eec2c35096
msgid "All other arguments are passed directly to the constructor of the email backend."
msgstr ""

#: ../../topics/email.txt:405
# c23c4cf92f7741cc8b2a4f5f05ed7a43
msgid "Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

#: ../../topics/email.txt:413
# 05eb1f6563204eb5a3ff537f372f4828
msgid "SMTP backend"
msgstr ""

#: ../../topics/email.txt:415
# 3675a568eb4e4b70ab48a4354a00cbe5
msgid "This is the default backend. Email will be sent through a SMTP server. The server address and authentication credentials are set in the :setting:`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:`EMAIL_HOST_PASSWORD` and :setting:`EMAIL_USE_TLS` settings in your settings file."
msgstr ""

#: ../../topics/email.txt:421
# 5f1e49762769443186b629ed8e25f119
msgid "The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:428
# 739f4c35af774b66a7f3ebd0c794436b
msgid "Prior to version 1.2, Django provided a :class:`~django.core.mail.SMTPConnection` class. This class provided a way to directly control the use of SMTP to send email. This class has been deprecated in favor of the generic email backend API."
msgstr ""

#: ../../topics/email.txt:433
# 89b9e81236d0448b851676c7d5e6e239
msgid "For backwards compatibility :class:`~django.core.mail.SMTPConnection` is still available in ``django.core.mail`` as an alias for the SMTP backend. New code should use :meth:`~django.core.mail.get_connection` instead."
msgstr ""

#: ../../topics/email.txt:440
# d127256ebb904ffabec88c607f5e868d
msgid "Console backend"
msgstr ""

#: ../../topics/email.txt:442
# 7acc1722ad8a4e039b670b9326f334bc
msgid "Instead of sending out real emails the console backend just writes the emails that would be send to the standard output. By default, the console backend writes to ``stdout``. You can use a different stream-like object by providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

#: ../../topics/email.txt:447
#: ../../topics/email.txt:465
#: ../../topics/email.txt:484
# 5d81fae232524ffa8e0f6f13c52653ee
# e3b8639767274c28bb9ed0738880130c
# bddc3af9a2504487a4c269ebe9439b62
msgid "To specify this backend, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:451
#: ../../topics/email.txt:470
#: ../../topics/email.txt:501
# 325f60a77d064d0fb3bc07d7f3e3300f
# 995c51ddf6ab4238a1804ffd62025631
# e88d9da44cb14aae8c7f3b6b1b5927af
msgid "This backend is not intended for use in production -- it is provided as a convenience that can be used during development."
msgstr ""

#: ../../topics/email.txt:457
# c31dc608fa7d417abd098d9291054f32
msgid "File backend"
msgstr ""

#: ../../topics/email.txt:459
# 28842993e3bf45afa084393d65f6f79f
msgid "The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from the ``file_path`` keyword when creating a connection with :meth:`~django.core.mail.get_connection`."
msgstr ""

#: ../../topics/email.txt:476
# 77fc9261fe7e490582c269513e499960
msgid "In-memory backend"
msgstr ""

#: ../../topics/email.txt:478
# 86d5e774c7ca453fa0c62a8e40773670
msgid "The ``'locmem'`` backend stores messages in a special attribute of the ``django.core.mail`` module. The ``outbox`` attribute is created when the first message is sent. It's a list with an :class:`~django.core.mail.EmailMessage` instance for each message that would be send."
msgstr ""

#: ../../topics/email.txt:488
# c546baf9cad34cadab8f1cd0cd974628
msgid "This backend is not intended for use in production -- it is provided as a convenience that can be used during development and testing."
msgstr ""

#: ../../topics/email.txt:494
# eac221c02bcc468e9d544a94b0c21458
msgid "Dummy backend"
msgstr ""

#: ../../topics/email.txt:496
# 79f5018bffb84fde87a010f693ff8d56
msgid "As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:507
# 4791caf2fd4a40b3b9d7d76ffcec7f92
msgid "Defining a custom email backend"
msgstr ""

#: ../../topics/email.txt:509
# 8035d1018e1b48f5b502cc3799ced59c
msgid "If you need to change how emails are sent you can write your own email backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then the Python import path for your backend class."
msgstr ""

#: ../../topics/email.txt:513
# 0f0090a48845415887a1b45f6d7bc1b6
msgid "Custom email backends should subclass ``BaseEmailBackend`` that is located in the ``django.core.mail.backends.base`` module. A custom email backend must implement the ``send_messages(email_messages)`` method. This method receives a list of :class:`~django.core.mail.EmailMessage` instances and returns the number of successfully delivered messages. If your backend has any concept of a persistent session or connection, you should also implement the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a reference implementation."
msgstr ""

#: ../../topics/email.txt:525
# 14c415b9ef96497baf13aa1d01791777
msgid "Sending multiple emails"
msgstr ""

#: ../../topics/email.txt:527
# 36162db0a289479aa8052f93e79a2df4
msgid "Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email."
msgstr ""

#: ../../topics/email.txt:532
# 840ad1d1c9d9472c88177361524a28aa
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

#: ../../topics/email.txt:534
# 5e81b41015a84e61b1cf565ccfddd0c4
msgid "Firstly, you can use the ``send_messages()`` method. ``send_messages()`` takes a list of :class:`~django.core.mail.EmailMessage` instances (or subclasses), and sends them all using a single connection."
msgstr ""

#: ../../topics/email.txt:538
# 66dd7ef60eb54ece9e0a055f264732b3
msgid "For example, if you have a function called ``get_notification_email()`` that returns a list of :class:`~django.core.mail.EmailMessage` objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages::"
msgstr ""

#: ../../topics/email.txt:548
# fe79688bac2d4785a9513c2587cb9dd0
msgid "In this example, the call to ``send_messages()`` opens a connection on the backend, sends the list of messages, and then closes the connection again."
msgstr ""

#: ../../topics/email.txt:551
# 72696ef038f943dba6a1a49508aa08a0
msgid "The second approach is to use the ``open()`` and ``close()`` methods on the email backend to manually control the connection. ``send_messages()`` will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example::"
msgstr ""

#: ../../topics/email.txt:581
# 30295036795c4115b14254a73d285fa0
msgid "Testing email sending"
msgstr ""

#: ../../topics/email.txt:583
# 3ceb6d9578644582a505ce063a430587
msgid "There are times when you do not want Django to send emails at all. For example, while developing a Web site, you probably don't want to send out thousands of emails -- but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content."
msgstr ""

#: ../../topics/email.txt:589
# 011fb5248e794b12977347dc95b7eca1
msgid "The easiest way to test your project's use of email is to use the ``console`` email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""

#: ../../topics/email.txt:593
# a87cfb0615c94b98beb39e7579b3eb31
msgid "The ``file`` email backend can also be useful during development -- this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure."
msgstr ""

#: ../../topics/email.txt:597
# 61c8b72122414e97977ae96007d17e55
msgid "Another approach is to use a \"dumb\" SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command::"
msgstr ""

#: ../../topics/email.txt:603
# 0115799d5b0b49539fd74c5db5e02d72
msgid "This command will start a simple SMTP server listening on port 1025 of localhost. This server simply prints to standard output all email headers and the email body. You then only need to set the :setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` accordingly, and you are set."
msgstr ""

#: ../../topics/email.txt:608
# 3286ee530322493f9eb77e429ac4e6f2
msgid "For a more detailed discussion of testing and processing of emails locally, see the Python documentation for the :mod:`smtpd` module."
msgstr ""

#: ../../topics/email.txt:612
# edc25259c164426993a5bc6e8bb744c3
msgid "SMTPConnection"
msgstr ""

#: ../../topics/email.txt:618
# d6b03ddcf73a4b69817d1c54962bc815
msgid "The ``SMTPConnection`` class has been deprecated in favor of the generic email backend API."
msgstr ""

#: ../../topics/email.txt:621
# a12dd0a4e39948d29e98100a01d9c632
msgid "For backwards compatibility ``SMTPConnection`` is still available in ``django.core.mail`` as an alias for the :ref:`SMTP backend <topic-email-smtp-backend>`. New code should use :meth:`~django.core.mail.get_connection` instead."
msgstr ""

#: ../../topics/files.txt:3
# 8337f836bf104d4bae7d4909c57683ca
msgid "Managing files"
msgstr ""

#: ../../topics/files.txt:5
# fa118ec4cc93449cb80a4ce19e28cda9
msgid "This document describes Django's file access APIs."
msgstr ""

#: ../../topics/files.txt:7
# 5922b98f70934c2a87ae1eb41b51f4ee
msgid "By default, Django stores files locally, using the :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` settings. The examples below assume that you're using these defaults."
msgstr ""

#: ../../topics/files.txt:11
# 42011bd3e1ae496a9c9301df066bc650
msgid "However, Django provides ways to write custom `file storage systems`_ that allow you to completely customize where and how Django stores files. The second half of this document describes how these storage systems work."
msgstr ""

#: ../../topics/files.txt:18
# d4287c0c06cb46ee8375c8d91a1dd6af
msgid "Using files in models"
msgstr ""

#: ../../topics/files.txt:20
# 41877374c60f4beb997e49f6b86fe771
msgid "When you use a :class:`~django.db.models.FileField` or :class:`~django.db.models.ImageField`, Django provides a set of APIs you can use to deal with that file."
msgstr ""

#: ../../topics/files.txt:24
# 914260f6d2a343279f0459809850cc97
msgid "Consider the following model, using an :class:`~django.db.models.ImageField` to store a photo::"
msgstr ""

#: ../../topics/files.txt:32
# 956fe88803c5476aa19138bf5704b0f6
msgid "Any ``Car`` instance will have a ``photo`` attribute that you can use to get at the details of the attached photo::"
msgstr ""

#: ../../topics/files.txt:45
# 32dd24ab8413493cb1a53f881c6021b7
msgid "This object -- ``car.photo`` in the example -- is a ``File`` object, which means it has all the methods and attributes described below."
msgstr ""

#: ../../topics/files.txt:49
# 14eed897196240e7b3e4808891efa6b1
msgid "The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved."
msgstr ""

#: ../../topics/files.txt:55
# 9b55158eef5c4ba08706f7e4e910f0e7
msgid "The ``File`` object"
msgstr ""

#: ../../topics/files.txt:57
# 99ad4545c0bf4bc2847ceb35ca238b51
msgid "Internally, Django uses a :class:`django.core.files.File` instance any time it needs to represent a file. This object is a thin wrapper around Python's `built-in file object`_ with some Django-specific additions."
msgstr ""

#: ../../topics/files.txt:63
# f41a710fd3474027b71c68631996ce2a
msgid "Most of the time you'll simply use a ``File`` that Django's given you (i.e. a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

#: ../../topics/files.txt:66
# 4c5e1a33fbb2498caa80d0d9e6123640
msgid "If you need to construct a ``File`` yourself, the easiest way is to create one using a Python built-in ``file`` object::"
msgstr ""

#: ../../topics/files.txt:75
# 19f5bda4066e4c43bd17d79d1444d9ba
msgid "Now you can use any of the documented attributes and methods of the :class:`~django.core.files.File` class."
msgstr ""

#: ../../topics/files.txt:79
# 8844ddf604b14508946a0b3612ea0f05
msgid "File storage"
msgstr ""

#: ../../topics/files.txt:81
# ebbab529f7014036846fb0236c85a000
msgid "Behind the scenes, Django delegates decisions about how and where to store files to a file storage system. This is the object that actually understands things like file systems, opening and reading files, etc."
msgstr ""

#: ../../topics/files.txt:85
# 261f6e20c7554457a9768b79d6ba55ad
msgid "Django's default file storage is given by the :setting:`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage system, this is the one that will be used."
msgstr ""

#: ../../topics/files.txt:89
# 96dbc585bd1d4b619c7514f61f3fb5f2
msgid "See below for details of the built-in default file storage system, and see :doc:`/howto/custom-file-storage` for information on writing your own file storage system."
msgstr ""

#: ../../topics/files.txt:94
# c9d26b2f92d74201a97dae18e458109e
msgid "Storage objects"
msgstr ""

#: ../../topics/files.txt:96
# 090f6bc9174d411fa14373478b159e50
msgid "Though most of the time you'll want to use a ``File`` object (which delegates to the proper storage for that file), you can use file storage systems directly. You can create an instance of some custom file storage class, or -- often more useful -- you can use the global default storage system::"
msgstr ""

#: ../../topics/files.txt:117
# 289edd384f524018b488d90283277165
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

#: ../../topics/files.txt:120
# 5decf294b934424cbc57fc9cb06893d3
msgid "The built-in filesystem storage class"
msgstr ""

#: ../../topics/files.txt:122
# 17b2259c39f04e31b8b4e5cc9a8699e7
msgid "Django ships with a built-in ``FileSystemStorage`` class (defined in ``django.core.files.storage``) which implements basic local filesystem file storage. Its initializer takes two arguments:"
msgstr ""

#: ../../topics/files.txt:127
# 8552968cf5bb4301af0654f77f5bc34d
msgid "Argument"
msgstr ""

#: ../../topics/files.txt:127
# 3e637c42b1764b78b08134ce00138e30
msgid "Description"
msgstr ""

#: ../../topics/files.txt:129
# aecce4d977db4a4bb3cb12cbcbd4f5b5
msgid "``location``"
msgstr ""

#: ../../topics/files.txt:129
# 022d50dbd59f45edbbea4c36fdb0d1cd
msgid "Optional. Absolute path to the directory that will hold the files. If omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

#: ../../topics/files.txt:132
# 10433f141dbc435f99eccf5a71ded201
msgid "``base_url``"
msgstr ""

#: ../../topics/files.txt:132
# 16dc6e1b4c0040188453abe168269746
msgid "Optional. URL that serves the files stored at this location. If omitted, it will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../topics/files.txt:137
# 27e57edd7913450fb04de1779bcd8c34
msgid "For example, the following code will store uploaded files under ``/media/photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

#: ../../topics/files.txt:149
# 3f4959d02b7640aa8d49cc3deca3c456
msgid ":doc:`Custom storage systems </howto/custom-file-storage>` work the same way: you can pass them in as the ``storage`` argument to a :class:`~django.db.models.FileField`."
msgstr ""

#: ../../topics/forms/formsets.txt:4
# 21f2306634e5466883a09c146405f6ce
msgid "Formsets"
msgstr ""

#: ../../topics/forms/formsets.txt:6
# b04cec2acff74c0b9880a7b3b94cb1db
msgid "A formset is a layer of abstraction to working with multiple forms on the same page. It can be best compared to a data grid. Let's say you have the following form::"
msgstr ""

#: ../../topics/forms/formsets.txt:15
# a8ff4c693777415a93f62cacc34a7872
msgid "You might want to allow the user to create several articles at once. To create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

#: ../../topics/forms/formsets.txt:21
# 50a4f4745b2f4677b0f0d17d75a84ccb
msgid "You now have created a formset named ``ArticleFormSet``. The formset gives you the ability to iterate over the forms in the formset and display them as you would with a regular form::"
msgstr ""

#: ../../topics/forms/formsets.txt:31
# 93df88ecb6d54a0fbccd4acee5799ddb
msgid "As you can see it only displayed one empty form. The number of empty forms that is displayed is controlled by the ``extra`` parameter. By default, ``formset_factory`` defines one extra form; the following example will display two blank forms::"
msgstr ""

#: ../../topics/forms/formsets.txt:40
# 9752914148fa492cb8ccafa9d2a4dd4f
msgid "Prior to Django 1.3, formset instances were not iterable. To render the formset you iterated over the ``forms`` attribute::"
msgstr ""

#: ../../topics/forms/formsets.txt:47
# a25142e7fecd4bd9bfeadd120a4c8b1c
msgid "Iterating over ``formset.forms`` will render the forms in the order they were created. The default formset iterator also renders the forms in this order, but you can change this order by providing an alternate implementation for the :meth:`__iter__()` method."
msgstr ""

#: ../../topics/forms/formsets.txt:52
# b2e27e2ee6a046c3ae445d1f03bed7ee
msgid "Formsets can also be indexed into, which returns the corresponding form. If you override ``__iter__``, you will need to also override ``__getitem__`` to have matching behavior."
msgstr ""

#: ../../topics/forms/formsets.txt:59
# dfb2a6d64c8541d89624046e15c57ed0
msgid "Using initial data with a formset"
msgstr ""

#: ../../topics/forms/formsets.txt:61
# 397dc6afb17342edad4b9bc5061b90f3
msgid "Initial data is what drives the main usability of a formset. As shown above you can define the number of extra forms. What this means is that you are telling the formset how many additional forms to show in addition to the number of forms it generates from the initial data. Lets take a look at an example::"
msgstr ""

#: ../../topics/forms/formsets.txt:82
# 1fce4aba092d4c39849558f26bbf092b
msgid "There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data."
msgstr ""

#: ../../topics/forms/formsets.txt:88
# 92455e7ebf56492688acf247952e1376
msgid ":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

#: ../../topics/forms/formsets.txt:93
# 703cdb8d4402493589c6c63e99366c3b
msgid "Limiting the maximum number of forms"
msgstr ""

#: ../../topics/forms/formsets.txt:95
# a4efc1c734ea49c8835d399da720e8cc
msgid "The ``max_num`` parameter to ``formset_factory`` gives you the ability to limit the maximum number of empty forms the formset will display::"
msgstr ""

#: ../../topics/forms/formsets.txt:107
# 591b53405c9546c1bbf5282b401e6cc2
msgid "If the value of ``max_num`` is greater than the number of existing objects, up to ``extra`` additional blank forms will be added to the formset, so long as the total number of forms does not exceed ``max_num``."
msgstr ""

#: ../../topics/forms/formsets.txt:111
# c1f28516fd364f77b739af13bc69c32a
msgid "A ``max_num`` value of ``None`` (the default) puts no limit on the number of forms displayed. Please note that the default value of ``max_num`` was changed from ``0`` to ``None`` in version 1.2 to allow ``0`` as a valid value."
msgstr ""

#: ../../topics/forms/formsets.txt:116
# c8f2018d7aa746afb33a97a9c5b26022
msgid "Formset validation"
msgstr ""

#: ../../topics/forms/formsets.txt:118
# ff0a4632f94f4d7e82a38e4b40634f33
msgid "Validation with a formset is almost identical to a regular ``Form``. There is an ``is_valid`` method on the formset to provide a convenient way to validate all forms in the formset::"
msgstr ""

#: ../../topics/forms/formsets.txt:132
# e0ebfbc25c82448b9a0a71feeb784d56
msgid "We passed in no data to the formset which is resulting in a valid form. The formset is smart enough to ignore extra forms that were not changed. If we provide an invalid article::"
msgstr ""

#: ../../topics/forms/formsets.txt:151
# 2986e59aba594c469f643d4edf924877
msgid "As we can see, ``formset.errors`` is a list whose entries correspond to the forms in the formset. Validation was performed for each of the two forms, and the expected error message appears for the second item."
msgstr ""

#: ../../topics/forms/formsets.txt:155
# a8850d273b524163ad5780436e17287b
msgid "We can also check if form data differs from the initial data (i.e. the form was sent without any data)::"
msgstr ""

#: ../../topics/forms/formsets.txt:172
# 429f62e141e0479c883752eb1ea0c6e5
msgid "Understanding the ManagementForm"
msgstr ""

#: ../../topics/forms/formsets.txt:174
# 07fea8095cab43e99c9d863571d2650a
msgid "You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the formset's data above. This data is required for the ``ManagementForm``. This form is used by the formset to manage the collection of forms contained in the formset. If you don't provide this management data, an exception will be raised::"
msgstr ""

#: ../../topics/forms/formsets.txt:190
# df0a5b0ce2284cc7891c61c836ea1da4
msgid "It is used to keep track of how many form instances are being displayed. If you are adding new forms via JavaScript, you should increment the count fields in this form as well."
msgstr ""

#: ../../topics/forms/formsets.txt:194
# 2747c9e374fa44b6b0f899917db1d8cb
msgid "The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering ``{{ my_formset.management_form }}`` (substituting the name of your formset as appropriate)."
msgstr ""

#: ../../topics/forms/formsets.txt:200
# 65522c9b320a435dad30e6258898a9dc
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

#: ../../topics/forms/formsets.txt:202
# 9f2b3e22f5aa4771a4c32f607a32ce9a
msgid "``BaseFormSet`` has a couple of methods that are closely related to the ``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

#: ../../topics/forms/formsets.txt:205
# 2cc6dc4a8d754da4b46a19c25c5367b4
msgid "``total_form_count`` returns the total number of forms in this formset. ``initial_form_count`` returns the number of forms in the formset that were pre-filled, and is also used to determine how many forms are required. You will probably never need to override either of these methods, so please be sure you understand what they do before doing so."
msgstr ""

#: ../../topics/forms/formsets.txt:214
# e435e25ce5a5486997b7912877f511fd
msgid "``empty_form``"
msgstr ""

#: ../../topics/forms/formsets.txt:216
# 9d847062f7bb4e9aab99f5340f75e4b0
msgid "``BaseFormSet`` provides an additional attribute ``empty_form`` which returns a form instance with a prefix of ``__prefix__`` for easier use in dynamic forms with JavaScript."
msgstr ""

#: ../../topics/forms/formsets.txt:221
# b194d00b5a834de3a8aba274dd65baec
msgid "Custom formset validation"
msgstr ""

#: ../../topics/forms/formsets.txt:223
# 81608f672cf3419db838ab499ef788dc
msgid "A formset has a ``clean`` method similar to the one on a ``Form`` class. This is where you define your own validation that works at the formset level::"
msgstr ""

#: ../../topics/forms/formsets.txt:260
# c43e6ccde32845918a8032969b244e81
msgid "The formset ``clean`` method is called after all the ``Form.clean`` methods have been called. The errors will be found using the ``non_form_errors()`` method on the formset."
msgstr ""

#: ../../topics/forms/formsets.txt:265
# 8f040eb739574863af24bb1897140b6b
msgid "Dealing with ordering and deletion of forms"
msgstr ""

#: ../../topics/forms/formsets.txt:267
# 3cf5b34fd8a74975b10f44b3329ccf87
msgid "Common use cases with a formset is dealing with ordering and deletion of the form instances. This has been dealt with for you. The ``formset_factory`` provides two optional parameters ``can_order`` and ``can_delete`` that will do the extra work of adding the extra fields and providing simpler ways of getting to that data."
msgstr ""

#: ../../topics/forms/formsets.txt:274
# 647aa8a7a7b447f186f3fce40f84427b
msgid "``can_order``"
msgstr ""

#: ../../topics/forms/formsets.txt:276
#: ../../topics/forms/formsets.txt:332
#: ../../topics/http/sessions.txt:543
#: ../../topics/http/sessions.txt:552
#: ../../topics/http/sessions.txt:560
# ecba2287ae534e778f1a96daed7d2903
# 91aa1f721f71494d9b8ccb03fd20dc12
# 08d49499de714f6890080765f78f937f
# 9b409df054d04ebbb8148870aee0d609
# 36cc809e83624af685718aa59d439907
msgid "Default: ``False``"
msgstr ""

#: ../../topics/forms/formsets.txt:278
# a64708283b9b4126b95a4f3cd8efc2b2
msgid "Lets you create a formset with the ability to order::"
msgstr ""

#: ../../topics/forms/formsets.txt:297
# 7f0db07f89694ff5b33af1b3aba15096
msgid "This adds an additional field to each form. This new field is named ``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the initial data it automatically assigned them a numeric value. Let's look at what will happen when the user changes these values::"
msgstr ""

#: ../../topics/forms/formsets.txt:330
# 2964fd69c8fd4ba494e0d2c18f97f56b
msgid "``can_delete``"
msgstr ""

#: ../../topics/forms/formsets.txt:334
# f9c154d2da004efe80603a6f7f0ef034
msgid "Lets you create a formset with the ability to delete::"
msgstr ""

#: ../../topics/forms/formsets.txt:354
# 2ddbcb2489814bb88b9231004d568836
msgid "Similar to ``can_order`` this adds a new field to each form named ``DELETE`` and is a ``forms.BooleanField``. When data comes through marking any of the delete fields you can access them with ``deleted_forms``::"
msgstr ""

#: ../../topics/forms/formsets.txt:381
# 46ad5bd703e043098ab73d29ab80590f
msgid "Adding additional fields to a formset"
msgstr ""

#: ../../topics/forms/formsets.txt:383
# 8c7c91b973094f538b3ca965820388f4
msgid "If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an ``add_fields`` method. You can simply override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields::"
msgstr ""

#: ../../topics/forms/formsets.txt:402
# 1ebdbd61748345f5a23ca184a78afa56
msgid "Using a formset in views and templates"
msgstr ""

#: ../../topics/forms/formsets.txt:404
# cab769ac5a504ee18217103ee0edcdee
msgid "Using a formset inside a view is as easy as using a regular ``Form`` class. The only thing you will want to be aware of is making sure to use the management form inside the template. Let's look at a sample view:"
msgstr ""

#: ../../topics/forms/formsets.txt:421
# 56d13bc6547c41129ca8641d27380ac2
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

#: ../../topics/forms/formsets.txt:434
# f61deeb7aca14a4d9e2fa332a4d87095
msgid "However the above can be slightly shortcutted and let the formset itself deal with the management form:"
msgstr ""

#: ../../topics/forms/formsets.txt:445
# 249b7f6037d2459ab8d0dd15f327b20c
msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

#: ../../topics/forms/formsets.txt:450
# 69775d0b4a1c4917b907cab3862cda87
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

#: ../../topics/forms/formsets.txt:452
# 291846ae671d454d8333830a4cb1c76f
msgid "If you manually render fields in the template, you can render ``can_delete`` parameter with ``{{ form.DELETE }}``:"
msgstr ""

#: ../../topics/forms/formsets.txt:471
# 2c4344baa5144858bc24ce07f8f914b2
msgid "Similarly, if the formset has the ability to order (``can_order=True``), it is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

#: ../../topics/forms/formsets.txt:475
# 1351cf7aa2d640e6a879991bc0536855
msgid "Using more than one formset in a view"
msgstr ""

#: ../../topics/forms/formsets.txt:477
# 7e69f742b4f04fc585aae03229b34855
msgid "You are able to use more than one formset in a view if you like. Formsets borrow much of its behavior from forms. With that said you are able to use ``prefix`` to prefix formset form field names with a given value to allow more than one formset to be sent to a view without name clashing. Lets take a look at how this might be accomplished:"
msgstr ""

#: ../../topics/forms/formsets.txt:502
# e0de0f9f11984909854de48f6f91025b
msgid "You would then render the formsets as normal. It is important to point out that you need to pass ``prefix`` on both the POST and non-POST cases so that it is rendered and processed correctly."
msgstr ""

#: ../../topics/forms/index.txt:3
# 5ecd342f9eb04acb90d88d3d78697db0
msgid "Working with forms"
msgstr ""

#: ../../topics/forms/index.txt:7
# ed4b3061216c45c8b61e1047eb5d67cb
msgid "This document provides an introduction to Django's form handling features. For a more detailed look at specific areas of the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:`/ref/forms/validation`."
msgstr ""

#: ../../topics/forms/index.txt:14
# 8e2101fb81c84a0a8652bf9502845eeb
msgid "``django.forms`` is Django's form-handling library."
msgstr ""

#: ../../topics/forms/index.txt:16
# 001a1d96bccb4034b651c03e61ce9402
msgid "While it is possible to process form submissions just using Django's :class:`~django.http.HttpRequest` class, using the form library takes care of a number of common form-related tasks. Using it, you can:"
msgstr ""

#: ../../topics/forms/index.txt:20
# 39b356401a2348c096b88707d93ea7a1
msgid "Display an HTML form with automatically generated form widgets."
msgstr ""

#: ../../topics/forms/index.txt:21
# c7004afa88ae43228877f67e42c080d8
msgid "Check submitted data against a set of validation rules."
msgstr ""

#: ../../topics/forms/index.txt:22
# c2c95659ffda42a9b8415337beb22b36
msgid "Redisplay a form in the case of validation errors."
msgstr ""

#: ../../topics/forms/index.txt:23
# 9e73781bf06e4f78819429640d18e212
msgid "Convert submitted form data to the relevant Python data types."
msgstr ""

#: ../../topics/forms/index.txt:28
# e96bee72c07a4bd0a35d22b27498966b
msgid "The library deals with these concepts:"
msgstr ""

#: ../../topics/forms/index.txt:33
# f7c0e313354d499ea65b5b7bbe602121
msgid "A class that corresponds to an HTML form widget, e.g. ``<input type=\"text\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
msgstr ""

#: ../../topics/forms/index.txt:38
# 453b04a3309d483eb39504440326c26d
msgid "A class that is responsible for doing validation, e.g. an ``EmailField`` that makes sure its data is a valid email address."
msgstr ""

#: ../../topics/forms/index.txt:42
# fbf3950203e44decbd3c5ddf31d9653a
msgid "A collection of fields that knows how to validate itself and display itself as HTML."
msgstr ""

#: ../../topics/forms/index.txt:46
# b718f8b3a04a42fe8e7a0da1a7c50042
msgid "The CSS and JavaScript resources that are required to render a form."
msgstr ""

#: ../../topics/forms/index.txt:48
# 78f2af689b704a3f81ad67766edad082
msgid "The library is decoupled from the other Django components, such as the database layer, views and templates. It relies only on Django settings, a couple of ``django.utils`` helper functions and Django's internationalization hooks (but you're not required to be using internationalization features to use this library)."
msgstr ""

#: ../../topics/forms/index.txt:55
# 1f138cefbc5e4e6a918be81a7fc2b503
msgid "Form objects"
msgstr ""

#: ../../topics/forms/index.txt:57
# 3f8ec7c90c0341c1809454f95e4a11e7
msgid "A Form object encapsulates a sequence of form fields and a collection of validation rules that must be fulfilled in order for the form to be accepted. Form classes are created as subclasses of ``django.forms.Form`` and make use of a declarative style that you'll be familiar with if you've used Django's database models."
msgstr ""

#: ../../topics/forms/index.txt:63
# eebe6f721ccc42c0ab712dbcc96cc64c
msgid "For example, consider a form used to implement \"contact me\" functionality on a personal Web site:"
msgstr ""

#: ../../topics/forms/index.txt:76
# d700b4ee49004153be48b9fe1f813a4d
msgid "A form is composed of ``Field`` objects. In this case, our form has four fields: ``subject``, ``message``, ``sender`` and ``cc_myself``. ``CharField``, ``EmailField`` and ``BooleanField`` are just three of the available field types; a full list can be found in :doc:`/ref/forms/fields`."
msgstr ""

#: ../../topics/forms/index.txt:81
# 72244632006443648a0b5517ee791259
msgid "If your form is going to be used to directly add or edit a Django model, you can use a :doc:`ModelForm </topics/forms/modelforms>` to avoid duplicating your model description."
msgstr ""

#: ../../topics/forms/index.txt:86
# 1a7e25ab3b214b2e9595dc805193eadd
msgid "Using a form in a view"
msgstr ""

#: ../../topics/forms/index.txt:88
# cb9d52e40d504211ab041f1ca067a8fd
msgid "The standard pattern for processing a form in a view looks like this:"
msgstr ""

#: ../../topics/forms/index.txt:107
# 77dd44093a344d5d8c7367fe3886a647
msgid "There are three code paths here:"
msgstr ""

#: ../../topics/forms/index.txt:109
# eff9b673f8ed4e2096798a0406159bd5
msgid "If the form has not been submitted, an unbound instance of ContactForm is created and passed to the template."
msgstr ""

#: ../../topics/forms/index.txt:111
# 8d362215123a466ba8ae3cb085e22115
msgid "If the form has been submitted, a bound instance of the form is created using ``request.POST``. If the submitted data is valid, it is processed and the user is re-directed to a \"thanks\" page."
msgstr ""

#: ../../topics/forms/index.txt:114
# c95bf4bf41a542eba68db65e68c48acf
msgid "If the form has been submitted but is invalid, the bound form instance is passed on to the template."
msgstr ""

#: ../../topics/forms/index.txt:117
# 21f3283ed7d0417e839eb2a048778ec6
msgid "The distinction between **bound** and **unbound** forms is important. An unbound form does not have any data associated with it; when rendered to the user, it will be empty or will contain default values. A bound form does have submitted data, and hence can be used to tell if that data is valid. If an invalid bound form is rendered it can include inline error messages telling the user where they went wrong."
msgstr ""

#: ../../topics/forms/index.txt:124
# 193e6f1384544da8aecfde4c877aba90
msgid "See :ref:`ref-forms-api-bound-unbound` for further information on the differences between bound and unbound forms."
msgstr ""

#: ../../topics/forms/index.txt:128
# 67a8491d75184608a4456dc6bdac8cdd
msgid "Handling file uploads with a form"
msgstr ""

#: ../../topics/forms/index.txt:130
# 96f9396dae5a48479206cb1c30c21705
msgid "To see how to handle file uploads with your form see :ref:`binding-uploaded-files` for more information."
msgstr ""

#: ../../topics/forms/index.txt:134
# 5cdcf50d65cc4ce084c6ded0e346ff63
msgid "Processing the data from a form"
msgstr ""

#: ../../topics/forms/index.txt:136
# e54dff5f819b42a7aa0e779c072717af
msgid "Once ``is_valid()`` returns ``True``, you can process the form submission safe in the knowledge that it conforms to the validation rules defined by your form. While you could access ``request.POST`` directly at this point, it is better to access ``form.cleaned_data``. This data has not only been validated but will also be converted in to the relevant Python types for you. In the above example, ``cc_myself`` will be a boolean value. Likewise, fields such as ``IntegerField`` and ``FloatField`` convert values to a Python int and float respectively. Note that read-only fields are not available in ``form.cleaned_data`` (and setting a value in a custom ``clean()`` method won't have any effect) because these fields are displayed as text rather than as input elements, and thus are not posted back to the server."
msgstr ""

#: ../../topics/forms/index.txt:148
# 5612dc010beb44aea8ad3574686a0636
msgid "Extending the above example, here's how the form data could be processed:"
msgstr ""

#: ../../topics/forms/index.txt:166
# f2c9bc0ea83c4072adbe0988e17c824a
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

#: ../../topics/forms/index.txt:169
# 95d1b43531a143169539a91bcf743a21
msgid "Displaying a form using a template"
msgstr ""

#: ../../topics/forms/index.txt:171
# a5d91b96a67b46f49b078308a4942c9e
msgid "Forms are designed to work with the Django template language. In the above example, we passed our ``ContactForm`` instance to the template using the context variable ``form``. Here's a simple example template::"
msgstr ""

#: ../../topics/forms/index.txt:180
# 0f18166a60ec4736bdcd6616dde52e8c
msgid "The form only outputs its own fields; it is up to you to provide the surrounding ``<form>`` tags and the submit button."
msgstr ""

#: ../../topics/forms/index.txt:185
# 9c218877f5bc4d6a950a3fa0d304ea73
msgid "Django ships with an easy-to-use :doc:`protection against Cross Site Request Forgeries </ref/contrib/csrf>`. When submitting a form via POST with CSRF protection enabled you must use the :ttag:`csrf_token` template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document."
msgstr ""

#: ../../topics/forms/index.txt:192
# e5851ad8e8694c2ea1473f08698cedfe
msgid "``form.as_p`` will output the form with each form field and accompanying label wrapped in a paragraph. Here's the output for our example template::"
msgstr ""

#: ../../topics/forms/index.txt:207
# d63d942f2fb549f5834018c678d11539
msgid "Note that each form field has an ID attribute set to ``id_<field-name>``, which is referenced by the accompanying label tag. This is important for ensuring forms are accessible to assistive technology such as screen reader software. You can also :ref:`customize the way in which labels and ids are generated <ref-forms-api-configuring-label>`."
msgstr ""

#: ../../topics/forms/index.txt:213
# af61415ad2134d948093bb31e8aa8203
msgid "You can also use ``form.as_table`` to output table rows (you'll need to provide your own ``<table>`` tags) and ``form.as_ul`` to output list items."
msgstr ""

#: ../../topics/forms/index.txt:217
# 01a7753fd9284f76838c4d6d3b9d3bd4
msgid "Customizing the form template"
msgstr ""

#: ../../topics/forms/index.txt:219
# 1bfd81f6ea9a4b0d8b7c99577a24db4c
msgid "If the default generated HTML is not to your taste, you can completely customize the way a form is presented using the Django template language. Extending the above example::"
msgstr ""

#: ../../topics/forms/index.txt:248
# 3532a477634446d19ccb0b1ac61aa9d5
msgid "Each named form-field can be output to the template using ``{{ form.name_of_field }}``, which will produce the HTML needed to display the form widget. Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, rendered as an unordered list. This might look like::"
msgstr ""

#: ../../topics/forms/index.txt:257
# 07b835181cae41b1aa367f7e50fcf7a9
msgid "The list has a CSS class of ``errorlist`` to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them::"
msgstr ""

#: ../../topics/forms/index.txt:270
# dba460ebedd54e7994ab92e8675ae2be
msgid "Looping over the form's fields"
msgstr ""

#: ../../topics/forms/index.txt:272
# 4207e29171774f67a56d926664ee4c24
msgid "If you're using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a ``{% for %}`` loop::"
msgstr ""

#: ../../topics/forms/index.txt:286
# 04cfc6589050456d9f5d3ee06222237f
msgid "Within this loop, ``{{ field }}`` is an instance of :class:`BoundField`. ``BoundField`` also has the following attributes, which can be useful in your templates:"
msgstr ""

#: ../../topics/forms/index.txt:291
# 1d8f81ba84094076b9ec5d7ca6191a58
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

#: ../../topics/forms/index.txt:294
# 79577ad524324bfb844777f0c693a986
msgid "The field's label wrapped in the appropriate HTML ``<label>`` tag, e.g. ``<label for=\"id_email\">Email address</label>``"
msgstr ""

#: ../../topics/forms/index.txt:298
# ec1a0bf7874c4605ba58d5a421616458
msgid "The value of the field. e.g ``someone@example.com``"
msgstr ""

#: ../../topics/forms/index.txt:301
# 9bb9401a708b4ff699f99a76f24ad869
msgid "The name of the field that will be used in the input element's name field. This takes the form prefix into account, if it has been set."
msgstr ""

#: ../../topics/forms/index.txt:305
# 0932d1ed3c794c01b737f65f3d35083b
msgid "Any help text that has been associated with the field."
msgstr ""

#: ../../topics/forms/index.txt:308
# 508c11b73979454ba1c33688f0bacea8
msgid "Outputs a ``<ul class=\"errorlist\">`` containing any validation errors corresponding to this field. You can customize the presentation of the errors with a ``{% for error in field.errors %}`` loop. In this case, each object in the loop is a simple string containing the error message."
msgstr ""

#: ../../topics/forms/index.txt:315
# 3fde64aec2a7418aae3ccdf7b9576128
msgid "This attribute is ``True`` if the form field is a hidden field and ``False`` otherwise. It's not particularly useful as a template variable, but could be useful in conditional tests such as::"
msgstr ""

#: ../../topics/forms/index.txt:324
# e86ac45d74444b4d8311dbbdbeb4483d
msgid "Looping over hidden and visible fields"
msgstr ""

#: ../../topics/forms/index.txt:326
# 39dfd78189fa4c81811d31329ed11ff4
msgid "If you're manually laying out a form in a template, as opposed to relying on Django's default form layout, you might want to treat ``<input type=\"hidden\">`` fields differently than non-hidden fields. For example, because hidden fields don't display anything, putting error messages \"next to\" the field could cause confusion for your users -- so errors for those fields should be handled differently."
msgstr ""

#: ../../topics/forms/index.txt:333
# 9444caaeec00457cae17afdfb367ab51
msgid "Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: ``hidden_fields()`` and ``visible_fields()``. Here's a modification of an earlier example that uses these two methods::"
msgstr ""

#: ../../topics/forms/index.txt:353
# 0a3e7ad082074e60a4dfce444c425f92
msgid "This example does not handle any errors in the hidden fields. Usually, an error in a hidden field is a sign of form tampering, since normal form interaction won't alter them. However, you could easily insert some error displays for those form errors, as well."
msgstr ""

#: ../../topics/forms/index.txt:359
# 2bbba44e82684314a47841ef84f26391
msgid "Reusable form templates"
msgstr ""

#: ../../topics/forms/index.txt:361
# 637779625bf2438b9eb0f9c2b2bab396
msgid "If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form's loop in a standalone template and using the :ttag:`include` tag to reuse it in other templates::"
msgstr ""

#: ../../topics/forms/index.txt:379
# 1508a46d450b433586c815d63991c967
msgid "If the form object passed to a template has a different name within the context, you can alias it using the ``with`` argument of the :ttag:`include` tag::"
msgstr ""

#: ../../topics/forms/index.txt:388
# a8ba702e14ec4a60b2d58530f4c9c1d3
msgid "If you find yourself doing this often, you might consider creating a custom :ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../topics/forms/index.txt:392
# 2dbd2edf51fd47f18014fb98e39f433e
msgid "Further topics"
msgstr ""

#: ../../topics/forms/index.txt:394
# c670672990474d87925a7b9d0465a4f9
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

#: ../../topics/forms/index.txt:406
# 260ac669974a440999bca3598acedfa7
msgid "Covers the full API reference, including form fields, form widgets, and form and field validation."
msgstr ""

#: ../../topics/forms/media.txt:2
# 1cef8e8613664d23836fc3e2b3b2f54d
msgid "Form Media"
msgstr ""

#: ../../topics/forms/media.txt:4
# 688a6ac47a1e4e2f9267aec69304a0a7
msgid "Rendering an attractive and easy-to-use Web form requires more than just HTML - it also requires CSS stylesheets, and if you want to use fancy \"Web2.0\" widgets, you may also need to include some JavaScript on each page. The exact combination of CSS and JavaScript that is required for any given page will depend upon the widgets that are in use on that page."
msgstr ""

#: ../../topics/forms/media.txt:10
# 683e45798d7645ee8eb5c42e086f4343
msgid "This is where Django media definitions come in. Django allows you to associate different media files with the forms and widgets that require that media. For example, if you want to use a calendar to render DateFields, you can define a custom Calendar widget. This widget can then be associated with the CSS and JavaScript that is required to render the calendar. When the Calendar widget is used on a form, Django is able to identify the CSS and JavaScript files that are required, and provide the list of file names in a form suitable for easy inclusion on your Web page."
msgstr ""

#: ../../topics/forms/media.txt:21
# d0d84276e145453fa58140f6558e6941
msgid "The Django Admin application defines a number of customized widgets for calendars, filtered selections, and so on. These widgets define media requirements, and the Django Admin uses the custom widgets in place of the Django defaults. The Admin templates will only include those media files that are required to render the widgets on any given page."
msgstr ""

#: ../../topics/forms/media.txt:28
# b10452bd20ea40dd83a78560275a3c00
msgid "If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They're all stored in ``django.contrib.admin.widgets``."
msgstr ""

#: ../../topics/forms/media.txt:34
# c9057ac500d9479fa8cec146467cfcf1
msgid "Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

#: ../../topics/forms/media.txt:42
# 4e53c1494ecb49c7899de8215306c5f3
msgid "Media as a static definition"
msgstr ""

#: ../../topics/forms/media.txt:44
# a90d0dcdfea348a08a489c98e51281a6
msgid "The easiest way to define media is as a static definition. Using this method, the media declaration is an inner class. The properties of the inner class define the media requirements."
msgstr ""

#: ../../topics/forms/media.txt:48
# dd44d8a44d3c46bba8a7d94e5582c2eb
msgid "Here's a simple example::"
msgstr ""

#: ../../topics/forms/media.txt:57
# 5a37b7b8196d4baeb7ec01a37dab4944
msgid "This code defines a ``CalendarWidget``, which will be based on ``TextInput``. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file ``pretty.css``, and the JavaScript files ``animations.js`` and ``actions.js``."
msgstr ""

#: ../../topics/forms/media.txt:62
# 1ed5c6b1fe8c456992b41fd297743ae9
msgid "This static media definition is converted at runtime into a widget property named ``media``. The media for a CalendarWidget instance can be retrieved through this property::"
msgstr ""

#: ../../topics/forms/media.txt:72
# 1de715f59c054bb784b2dacd3f5a6f09
msgid "Here's a list of all possible ``Media`` options. There are no required options."
msgstr ""

#: ../../topics/forms/media.txt:75
# fc17d9ebbc25481681b47cc5ebd1140f
msgid "``css``"
msgstr ""

#: ../../topics/forms/media.txt:77
# 3acfdb1611164a22be416b95208be310
msgid "A dictionary describing the CSS files required for various forms of output media."
msgstr ""

#: ../../topics/forms/media.txt:80
# aa69c863f94443049ae00712c4304d8c
msgid "The values in the dictionary should be a tuple/list of file names. See `the section on media paths`_ for details of how to specify paths to media files."
msgstr ""

#: ../../topics/forms/media.txt:86
# 696c90f641544ac7b13c2a71eb17dd1b
msgid "The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: 'all', 'aural', 'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' and 'tv'. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options -- one for the screen, and one for print::"
msgstr ""

#: ../../topics/forms/media.txt:99
# fa1b75b0967a401b8a69a9145819a43c
msgid "If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV's and projectors will have the same media requirements::"
msgstr ""

#: ../../topics/forms/media.txt:111
# 7da74b1f22a44914905409aae6d54800
msgid "If this last CSS definition were to be rendered, it would become the following HTML::"
msgstr ""

#: ../../topics/forms/media.txt:118
# ca0f473d621c4dc3bfdcdafdfad8e0e4
msgid "``js``"
msgstr ""

#: ../../topics/forms/media.txt:120
# 6f420084823b4c6980b9eb6b0686e791
msgid "A tuple describing the required JavaScript files. See `the section on media paths`_ for details of how to specify paths to media files."
msgstr ""

#: ../../topics/forms/media.txt:125
# 5e5e948800984194b9ff6bc165d33881
msgid "``extend``"
msgstr ""

#: ../../topics/forms/media.txt:127
# ae4fbcda120b4a44adc58bc1adc44e29
msgid "A boolean defining inheritance behavior for media declarations."
msgstr ""

#: ../../topics/forms/media.txt:129
# 98b02528aab84d2c9e727845db6f7cd5
msgid "By default, any object using a static media definition will inherit all the media associated with the parent widget. This occurs regardless of how the parent defines its media requirements. For example, if we were to extend our basic Calendar widget from the example above::"
msgstr ""

#: ../../topics/forms/media.txt:149
# 8b3bbaa6b49a48829da29219904ecbf2
msgid "The FancyCalendar widget inherits all the media from it's parent widget. If you don't want media to be inherited in this way, add an ``extend=False`` declaration to the media declaration::"
msgstr ""

#: ../../topics/forms/media.txt:166
# 9e42c93b613949a8b5227648c4faf8df
msgid "If you require even more control over media inheritance, define your media using a `dynamic property`_. Dynamic properties give you complete control over which media files are inherited, and which are not."
msgstr ""

#: ../../topics/forms/media.txt:173
# 95299629935a4eb8b2d585435ccabfc1
msgid "Media as a dynamic property"
msgstr ""

#: ../../topics/forms/media.txt:175
# ae986b89e3c749248b4f9f4b01bf5788
msgid "If you need to perform some more sophisticated manipulation of media requirements, you can define the media property directly. This is done by defining a widget property that returns an instance of ``forms.Media``. The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword arguments in the same format as that used in a static media definition."
msgstr ""

#: ../../topics/forms/media.txt:181
# ca810fb35a9a44a491a09f48c8b0538b
msgid "For example, the static media definition for our Calendar Widget could also be defined in a dynamic fashion::"
msgstr ""

#: ../../topics/forms/media.txt:190
# 50b9d46cf50247a78731d840db3db173
msgid "See the section on `Media objects`_ for more details on how to construct return values for dynamic media properties."
msgstr ""

#: ../../topics/forms/media.txt:196
# 07993ea960624a81abd04860e97565bd
msgid "Paths in media definitions"
msgstr ""

#: ../../topics/forms/media.txt:200
# 7c58e3a96cc245ec8918d42eec1b04dd
msgid "Paths used to specify media can be either relative or absolute. If a path starts with '/', 'http://' or 'https://', it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix."
msgstr ""

#: ../../topics/forms/media.txt:205
# 4f8593713ef749d7be5b63e9f8bf4370
msgid "As part of the introduction of the :doc:`staticfiles app </ref/contrib/staticfiles>` two new settings were added to refer to \"static files\" (images, CSS, Javascript, etc.) that are needed to render a complete web page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

#: ../../topics/forms/media.txt:210
# 066f0e76d87d4cf2ab9750beb7323662
msgid "To find the appropriate prefix to use, Django will check if the :setting:`STATIC_URL` setting is not ``None`` and automatically fall back to using :setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was ``None``::"
msgstr ""

#: ../../topics/forms/media.txt:229
# daa2ef8929db4660b5038d18b61269f1
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

#: ../../topics/forms/media.txt:239
# 17b89e1ec1494e6f942dbe547be5d203
msgid "Media objects"
msgstr ""

#: ../../topics/forms/media.txt:241
# 6628823153af40a09a39897df73b622d
msgid "When you interrogate the media attribute of a widget or form, the value that is returned is a ``forms.Media`` object. As we have already seen, the string representation of a Media object is the HTML required to include media in the ``<head>`` block of your HTML page."
msgstr ""

#: ../../topics/forms/media.txt:246
# a9b56b9408934152b349f7ee76fd6bc4
msgid "However, Media objects have some other interesting properties."
msgstr ""

#: ../../topics/forms/media.txt:249
# c850746903fe44d79ee3f2a20df1de41
msgid "Media subsets"
msgstr ""

#: ../../topics/forms/media.txt:251
# 8fe21b99cca849d59b5d96ec08c868e5
msgid "If you only want media of a particular type, you can use the subscript operator to filter out a medium of interest. For example::"
msgstr ""

#: ../../topics/forms/media.txt:263
# b8dc917e1eaa4d2f811fd9595b8e5f2a
msgid "When you use the subscript operator, the value that is returned is a new Media object -- but one that only contains the media of interest."
msgstr ""

#: ../../topics/forms/media.txt:267
# ad973fa3450c4ddb860aae1933ced7bb
msgid "Combining media objects"
msgstr ""

#: ../../topics/forms/media.txt:269
# 81a7e852050e41bb89fa5a0a7ff9a704
msgid "Media objects can also be added together. When two media objects are added, the resulting Media object contains the union of the media from both files::"
msgstr ""

#: ../../topics/forms/media.txt:292
# b14e514c512847de8e886212ed8fa420
msgid "Media on Forms"
msgstr ""

#: ../../topics/forms/media.txt:294
# bb84e3c2e5e04b4db68bd92320aadb1e
msgid "Widgets aren't the only objects that can have media definitions -- forms can also define media. The rules for media definitions on forms are the same as the rules for widgets: declarations can be static or dynamic; path and inheritance rules for those declarations are exactly the same."
msgstr ""

#: ../../topics/forms/media.txt:299
# 3bf0a6d2c9c845d4bdf1d088cfbcbc45
msgid "Regardless of whether you define a media declaration, *all* Form objects have a media property. The default value for this property is the result of adding the media definitions for all widgets that are part of the form::"
msgstr ""

#: ../../topics/forms/media.txt:314
# f445397a950d4fdca3e04e7fc24b580a
msgid "If you want to associate additional media with a form -- for example, CSS for form layout -- simply add a media declaration to the form::"
msgstr ""

#: ../../topics/forms/modelforms.txt:3
# 96ea0dceb9cc4b998a658e302f1bd4c7
msgid "Creating forms from models"
msgstr ""

#: ../../topics/forms/modelforms.txt:11
# 5014fc1b37bf4f12ae246fcbda36bbc4
msgid "``ModelForm``"
msgstr ""

#: ../../topics/forms/modelforms.txt:14
# c76565901cc747c8b52fcb7495f3e992
msgid "If you're building a database-driven app, chances are you'll have forms that map closely to Django models. For instance, you might have a ``BlogComment`` model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you've already defined the fields in your model."
msgstr ""

#: ../../topics/forms/modelforms.txt:20
# 63a6ab4bba464729877a7f9687e18c8b
msgid "For this reason, Django provides a helper class that let you create a ``Form`` class from a Django model."
msgstr ""

#: ../../topics/forms/modelforms.txt:42
# d4cad8faa67445b9a2d432da1709be9d
msgid "The generated ``Form`` class will have a form field for every model field. Each model field has a corresponding default form field. For example, a ``CharField`` on a model is represented as a ``CharField`` on a form. A model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here is the full list of conversions:"
msgstr ""

#: ../../topics/forms/modelforms.txt:49
# 10909c3e523c40b6bf092ef9e337f984
msgid "Model field"
msgstr ""

#: ../../topics/forms/modelforms.txt:49
# 90490f878f2443ab805bd491c71bb94c
msgid "Form field"
msgstr ""

#: ../../topics/forms/modelforms.txt:51
# 62999487cabb487b9eef8c05179897d9
msgid "``AutoField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:51
# 4cfbe41fb73742cd972632e3104f4475
msgid "Not represented in the form"
msgstr ""

#: ../../topics/forms/modelforms.txt:53
# 45160c9a62294bc2b9d4609fe8f8f798
msgid "``BigIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:53
# 0b4df695cbf84364be2bbceddc92e4c1
msgid "``IntegerField`` with ``min_value`` set to -9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""

#: ../../topics/forms/modelforms.txt:57
#: ../../topics/forms/modelforms.txt:57
# b23f74de7d7746b6a523a2bd4ed0d698
# d9fd1402a05d4c0fa901631e3e3ef511
msgid "``BooleanField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:59
#: ../../topics/forms/modelforms.txt:62
#: ../../topics/forms/modelforms.txt:74
#: ../../topics/forms/modelforms.txt:91
# dd59ba2712494be39e380fedd6b4a078
# cead02be81f54a51a70f9f10ae7d6000
# 37a17e9cdcf74b238ac836c042f1af85
# c661439050044c26869f3475b9434bdc
msgid "``CharField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:59
# bd0e8efac0d54d1ca0ef925cb721e0ce
msgid "``CharField`` with ``max_length`` set to the model field's ``max_length``"
msgstr ""

#: ../../topics/forms/modelforms.txt:62
# 1ad2155f26c648b481bebebabc6256e4
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:64
#: ../../topics/forms/modelforms.txt:64
# 9d757e5447244fe3b6376d9700114f04
# c8d236b17f164fa8b448c89ad14a0b0e
msgid "``DateField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:66
#: ../../topics/forms/modelforms.txt:66
# a8f9f52b4e5f4ae4a977b2826aa7e1d1
# 93a2732d9bed450ea7dc7d51b4b3dce7
msgid "``DateTimeField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:68
#: ../../topics/forms/modelforms.txt:68
# 42f5b3ebb71d42cab76146df6f78cbe6
# f204a8c31d5d4233bc0bd9144586f866
msgid "``DecimalField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:70
#: ../../topics/forms/modelforms.txt:70
# 2d5301fe988344c89c33f30e5214996c
# ec3a503ed2b343d1b9e1017c46b1a58e
msgid "``EmailField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:72
#: ../../topics/forms/modelforms.txt:72
# 0795e6163e974acd9d9c9bcb7b802330
# d8603bbcbcbc468e90f3cfcfaa548ced
msgid "``FileField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:74
# 0b896c6246ea460392876cb5ca891c21
msgid "``FilePathField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:76
#: ../../topics/forms/modelforms.txt:76
# 78dcce0206ed4c19a9f5fc96e7777150
# 39e38eca96fb4ca9a991f1baba6ab388
msgid "``FloatField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:78
# ac8cf314caf64561bbb5b6097bb8cc35
msgid "``ForeignKey``"
msgstr ""

#: ../../topics/forms/modelforms.txt:78
# ac2badcd5e084718ae85be3b52cbc7fe
msgid "``ModelChoiceField`` (see below)"
msgstr ""

#: ../../topics/forms/modelforms.txt:80
#: ../../topics/forms/modelforms.txt:80
# 5fc206b6dca444729a8cda99852463c2
# b361f632a3d34e548574d8352da50506
msgid "``ImageField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:82
#: ../../topics/forms/modelforms.txt:82
#: ../../topics/forms/modelforms.txt:96
#: ../../topics/forms/modelforms.txt:98
#: ../../topics/forms/modelforms.txt:102
# f605c5b25352411ca034ffa3ed440ff5
# ea58e3adb4324ecf9d82de15d65be6ba
# a80f0bd6a48e45898752242e929d9704
# 15c625e72631481fae624f52ab11315f
# cd6fb77f2dc94b4885c5795ce3e2613e
msgid "``IntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:84
#: ../../topics/forms/modelforms.txt:84
# d13b7f8fe7b64bcfbd010a2c664e4763
# fff9a9747efe488389e2d6e3040548c6
msgid "``IPAddressField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:86
#: ../../topics/forms/modelforms.txt:86
# bc3f2ad83b07473c81a28c687b871a49
# f503d8fdfaf74ecdbb62a010827a549e
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:88
# 01a59b1df12944a197134042c955cba3
msgid "``ManyToManyField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:88
# d0c612dbf9044ed8b7e2f80851fba71e
msgid "``ModelMultipleChoiceField`` (see below)"
msgstr ""

#: ../../topics/forms/modelforms.txt:91
# af63ac77b980428c96b6a6311c7fafaf
msgid "``NullBooleanField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:93
# 1d0d7a843b6d42dba0e97c92c031dc92
msgid "``PhoneNumberField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:93
# 93b7267b5138441fb793a01051451edd
msgid "``USPhoneNumberField`` (from ``django.contrib.localflavor.us``)"
msgstr ""

#: ../../topics/forms/modelforms.txt:96
# 67430779d3d348f6ad031dabbcc4f781
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:98
# 481fec0e77074aafa767c6108b0e85d9
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:100
#: ../../topics/forms/modelforms.txt:100
# f9999577afc14c2589a0ad3bc1b1947a
# 2a166e3bb176492fa45cca953abc101d
msgid "``SlugField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:102
# 309000f20e4240ae8b6be354de947685
msgid "``SmallIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:104
# a9bc640b8971495283e5e8fdb99b81d1
msgid "``TextField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:104
# 9af5db57c10140c2952276cd42dff440
msgid "``CharField`` with ``widget=forms.Textarea``"
msgstr ""

#: ../../topics/forms/modelforms.txt:107
#: ../../topics/forms/modelforms.txt:107
# ab1c9f1ae9664c1790848689d6cff049
# 1bbe4af4d6af4cc884a13a254af56b01
msgid "``TimeField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:109
# 10ef469a62b94db7bc64c696c5a93b61
msgid "``URLField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:109
# d57fa259419645cf9cb4c276d4a99b41
msgid "``URLField`` with ``verify_exists`` set to the model field's ``verify_exists``"
msgstr ""

#: ../../topics/forms/modelforms.txt:117
# be6c72d14c784bf9912173697e8aca8e
msgid "As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field types are special cases:"
msgstr ""

#: ../../topics/forms/modelforms.txt:120
# a2dcfb9d18e740d68c5387de00df58c3
msgid "``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

#: ../../topics/forms/modelforms.txt:123
# 5c5c2367f10e44069e180223a8384b53
msgid "``ManyToManyField`` is represented by ``django.forms.ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

#: ../../topics/forms/modelforms.txt:127
# 3db41f6ae1404e19a9544b3d8f7aaa64
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

#: ../../topics/forms/modelforms.txt:129
# c9307c5ed677402291a101b0d1758172
msgid "If the model field has ``blank=True``, then ``required`` is set to ``False`` on the form field. Otherwise, ``required=True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:132
# 515b9cd65b8b4f499cc19b3109fccc42
msgid "The form field's ``label`` is set to the ``verbose_name`` of the model field, with the first character capitalized."
msgstr ""

#: ../../topics/forms/modelforms.txt:135
# 1f581a0e33184a7f8274b01c80129c65
msgid "The form field's ``help_text`` is set to the ``help_text`` of the model field."
msgstr ""

#: ../../topics/forms/modelforms.txt:138
# c3247fff395e48ae91edaec3ef3a349f
msgid "If the model field has ``choices`` set, then the form field's ``widget`` will be set to ``Select``, with choices coming from the model field's ``choices``. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has ``blank=False`` and an explicit ``default`` value (the ``default`` value will be initially selected instead)."
msgstr ""

#: ../../topics/forms/modelforms.txt:146
# 05879bf435894d1c842979b0fcbec2a5
msgid "Finally, note that you can override the form field used for a given model field. See `Overriding the default field types or widgets`_ below."
msgstr ""

#: ../../topics/forms/modelforms.txt:150
# c642a58fa86f44349231ff75221ffcf4
msgid "A full example"
msgstr ""

#: ../../topics/forms/modelforms.txt:152
# 9a1456e38d014e649e8137d8892d76f8
msgid "Consider this set of models::"
msgstr ""

#: ../../topics/forms/modelforms.txt:183
# 8fc3e10611304badb45ec822429aff4c
msgid "With these models, the ``ModelForm`` subclasses above would be roughly equivalent to this (the only difference being the ``save()`` method, which we'll discuss in a moment.)::"
msgstr ""

#: ../../topics/forms/modelforms.txt:200
# 10a7f21d510e46769c4c75f5bfb007c3
msgid "The ``is_valid()`` method and ``errors``"
msgstr ""

#: ../../topics/forms/modelforms.txt:202
# cd5c0bda3a714210855e493eb1d48f3d
msgid "The first time you call ``is_valid()`` or access the ``errors`` attribute of a ``ModelForm`` triggers form validation as well as :ref:`model validation <validating-objects>`. This has the side-effect of cleaning the model you pass to the ``ModelForm`` constructor. For instance, calling ``is_valid()`` on your form will convert any date fields on your model to actual date objects."
msgstr ""

#: ../../topics/forms/modelforms.txt:210
# dd37ca2a162a4d1c8c95ce25cd06e3d9
msgid "The ``save()`` method"
msgstr ""

#: ../../topics/forms/modelforms.txt:212
# 6537b881d2904ad586d4ab9575a3e150
msgid "Every form produced by ``ModelForm`` also has a ``save()`` method. This method creates and saves a database object from the data bound to the form. A subclass of ``ModelForm`` can accept an existing model instance as the keyword argument ``instance``; if this is supplied, ``save()`` will update that instance. If it's not supplied, ``save()`` will create a new instance of the specified model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:236
# 671ab07202c5412f9ed54fd915ec2727
msgid "Note that ``save()`` will raise a ``ValueError`` if the data in the form doesn't validate -- i.e., if form.errors evaluates to True."
msgstr ""

#: ../../topics/forms/modelforms.txt:239
# 5e518331ce4443ab9955c44ea15036b5
msgid "This ``save()`` method accepts an optional ``commit`` keyword argument, which accepts either ``True`` or ``False``. If you call ``save()`` with ``commit=False``, then it will return an object that hasn't yet been saved to the database. In this case, it's up to you to call ``save()`` on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized :ref:`model saving options <ref-models-force-insert>`. ``commit`` is ``True`` by default."
msgstr ""

#: ../../topics/forms/modelforms.txt:248
# e51d9cec596849aca91746e788b46584
msgid "Another side effect of using ``commit=False`` is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify ``commit=False`` when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn't possible to save many-to-many data for an instance until the instance exists in the database."
msgstr ""

#: ../../topics/forms/modelforms.txt:255
# c4b5ca77383644beaf7c3631b9cb5a7b
msgid "To work around this problem, every time you save a form using ``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` subclass. After you've manually saved the instance produced by the form, you can invoke ``save_m2m()`` to save the many-to-many form data. For example::"
msgstr ""

#: ../../topics/forms/modelforms.txt:275
# 7c22c5cb6375438aad1d4cfebb774339
msgid "Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. When you use a simple ``save()`` on a form, all data -- including many-to-many data -- is saved without the need for any additional method calls. For example::"
msgstr ""

#: ../../topics/forms/modelforms.txt:287
# 067dcdb84dc9454d83948e961a6050ba
msgid "Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works exactly the same way as any other ``forms`` form. For example, the ``is_valid()`` method is used to check for validity, the ``is_multipart()`` method is used to determine whether a form requires multipart file upload (and hence whether ``request.FILES`` must be passed to the form), etc. See :ref:`binding-uploaded-files` for more information."
msgstr ""

#: ../../topics/forms/modelforms.txt:295
# 45131cc36b3f4574995e746519532c74
msgid "Using a subset of fields on the form"
msgstr ""

#: ../../topics/forms/modelforms.txt:297
# fac994228f2849fda14bf560fa533191
msgid "In some cases, you may not want all the model fields to appear on the generated form. There are three ways of telling ``ModelForm`` to use only a subset of the model fields:"
msgstr ""

#: ../../topics/forms/modelforms.txt:301
# 0112ba9c1a0a47978b763650fde5133e
msgid "Set ``editable=False`` on the model field. As a result, *any* form created from the model via ``ModelForm`` will not include that field."
msgstr ""

#: ../../topics/forms/modelforms.txt:305
# 90ad0cf561664d2f8866b814c5b5839d
msgid "Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` class.  This attribute, if given, should be a list of field names to include in the form. The order in which the fields names are specified in that list is respected when the form renders them."
msgstr ""

#: ../../topics/forms/modelforms.txt:310
# 420a94547e0b465f8a371a0d7173d320
msgid "Use the ``exclude`` attribute of the ``ModelForm``'s inner ``Meta`` class.  This attribute, if given, should be a list of field names to exclude from the form."
msgstr ""

#: ../../topics/forms/modelforms.txt:314
# 7ecc7e36a4f9411fb5eb811afd07fc15
msgid "For example, if you want a form for the ``Author`` model (defined above) that includes only the ``name`` and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:328
# f13fbed2422a4b4895eccb50240efeaa
msgid "Since the Author model has only 3 fields, 'name', 'title', and 'birth_date', the forms above will contain exactly the same fields."
msgstr ""

#: ../../topics/forms/modelforms.txt:333
# 358d4abefa444ac8b0734ec65ad15e63
msgid "If you specify ``fields`` or ``exclude`` when creating a form with ``ModelForm``, then the fields that are not in the resulting form will not be set by the form's ``save()`` method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:339
# 0ad4909849914983b1c5c5047cac06c4
msgid "Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to ``save()`` a ``ModelForm`` with missing fields will fail.  To avoid this failure, you must instantiate your model with initial values for the missing, but required fields::"
msgstr ""

#: ../../topics/forms/modelforms.txt:350
# 15ee767b2ec340dca4cd3b059ebe99af
msgid "Alternatively, you can use ``save(commit=False)`` and manually set any extra required fields::"
msgstr ""

#: ../../topics/forms/modelforms.txt:358
# 146ead6b191a47bd99445a31ecbfd8aa
msgid "See the `section on saving forms`_ for more details on using ``save(commit=False)``."
msgstr ""

#: ../../topics/forms/modelforms.txt:364
# c429495012de4ef786edf7cf191bdfdd
msgid "Overriding the default field types or widgets"
msgstr ""

#: ../../topics/forms/modelforms.txt:369
# 7e34852f8d024bd08cb5941a8c02939f
msgid "The default field types, as described in the `Field types`_ table above, are sensible defaults. If you have a ``DateField`` in your model, chances are you'd want that to be represented as a ``DateField`` in your form. But ``ModelForm`` gives you the flexibility of changing the form field type and widget for a given model field."
msgstr ""

#: ../../topics/forms/modelforms.txt:375
# 53f73c53da2242a28a7822d83643b700
msgid "To specify a custom widget for a field, use the ``widgets`` attribute of the inner ``Meta`` class. This should be a dictionary mapping field names to widget classes or instances."
msgstr ""

#: ../../topics/forms/modelforms.txt:379
# 2ab1f38329b24e1b96284ba82e7b5253
msgid "For example, if you want the a ``CharField`` for the ``name`` attribute of ``Author`` to be represented by a ``<textarea>`` instead of its default ``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

#: ../../topics/forms/modelforms.txt:394
# 89c535d36bc44319876a192e48c64432
msgid "The ``widgets`` dictionary accepts either widget instances (e.g., ``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

#: ../../topics/forms/modelforms.txt:397
# 5e9510fb66f74bb582f73076470bc07c
msgid "If you want to further customize a field -- including its type, label, etc. -- you can do this by declaratively specifying fields like you would in a regular ``Form``. Declared fields will override the default ones generated by using the ``model`` attribute."
msgstr ""

#: ../../topics/forms/modelforms.txt:402
# 485c1a5711da4ee1ade0f80f61896d4c
msgid "For example, if you wanted to use ``MyDateFormField`` for the ``pub_date`` field, you could do the following::"
msgstr ""

#: ../../topics/forms/modelforms.txt:411
# efb3b4c21de54561869ee95c8b3f100e
msgid "If you want to override a field's default label, then specify the ``label`` parameter when declaring the form field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:422
# 6551df94eb2743da86d688b252538e19
msgid "If you explicitly instantiate a form field like this, Django assumes that you want to completely define its behavior; therefore, default attributes (such as ``max_length`` or ``required``) are not drawn from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field."
msgstr ""

#: ../../topics/forms/modelforms.txt:428
# d33a1f6859f74e5b993d3c8f757c1ac2
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:435
# f6c04a15b7394b0aa3d2ca2cd1b05ec4
msgid "and you want to do some custom validation for ``headline``, while keeping the ``blank`` and ``help_text`` values as specified, you might define ``ArticleForm`` like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:446
# a0c6a5caf58e420c8d6d712ec80f4e2e
msgid "See the :doc:`form field documentation </ref/forms/fields>` for more information on fields and their arguments."
msgstr ""

#: ../../topics/forms/modelforms.txt:450
# 7784d28c3320497aa3f22cebd3d1ab00
msgid "Changing the order of fields"
msgstr ""

#: ../../topics/forms/modelforms.txt:452
# 5bacac164b844956b94c3f74c46dee75
msgid "By default, a ``ModelForm`` will render fields in the same order that they are defined on the model, with ``ManyToManyField`` instances appearing last. If you want to change the order in which fields are rendered, you can use the ``fields`` attribute on the ``Meta`` class."
msgstr ""

#: ../../topics/forms/modelforms.txt:457
# 80ef6759f0d849a0b7e7ca034fa9609e
msgid "The ``fields`` attribute defines the subset of model fields that will be rendered, and the order in which they will be rendered. For example given this model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:465
# 608c7a0192894fd5872df0063852986a
msgid "the ``author`` field would be rendered first. If we wanted the title field to be rendered first, we could specify the following ``ModelForm``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:476
# d69626a3cc494270aea45d18131cac3f
msgid "Overriding the clean() method"
msgstr ""

#: ../../topics/forms/modelforms.txt:478
# 30fe41352cdb43059f69b96bda4908f7
msgid "You can override the ``clean()`` method on a model form to provide additional validation in the same way you can on a normal form."
msgstr ""

#: ../../topics/forms/modelforms.txt:481
# cfc0a896934645308181fe1077ec5512
msgid "In this regard, model forms have two specific characteristics when compared to forms:"
msgstr ""

#: ../../topics/forms/modelforms.txt:484
# 442b961057fa47c794db8e441dd3e295
msgid "By default the ``clean()`` method validates the uniqueness of fields that are marked as ``unique``, ``unique_together`` or ``unique_for_date|month|year`` on the model.  Therefore, if you would like to override the ``clean()`` method and maintain the default validation, you must call the parent class's ``clean()`` method."
msgstr ""

#: ../../topics/forms/modelforms.txt:490
# 8755160499e84d1f9a88f0d5b69e3510
msgid "Also, a model form instance bound to a model object will contain a ``self.instance`` attribute that gives model form methods access to that specific model instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:495
# 28295f3102054baaaa21c9df6ca5439b
msgid "Form inheritance"
msgstr ""

#: ../../topics/forms/modelforms.txt:497
# 757d163760e44d9facaa76092e89de8e
msgid "As with basic forms, you can extend and reuse ``ModelForms`` by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous ``ArticleForm`` class::"
msgstr ""

#: ../../topics/forms/modelforms.txt:506
# ab2e834c8c434785a297b5b8f242baba
msgid "This creates a form that behaves identically to ``ArticleForm``, except there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

#: ../../topics/forms/modelforms.txt:509
# 2bdf048debed4e6e88a3e4c08c548b2b
msgid "You can also subclass the parent's ``Meta`` inner class if you want to change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

#: ../../topics/forms/modelforms.txt:516
# 0eec13657394412f808390fbe65d3762
msgid "This adds the extra method from the ``EnhancedArticleForm`` and modifies the original ``ArticleForm.Meta`` to remove one field."
msgstr ""

#: ../../topics/forms/modelforms.txt:519
# b458daf331be463aa8db36938d455aac
msgid "There are a couple of things to note, however."
msgstr ""

#: ../../topics/forms/modelforms.txt:521
# d9435ae7857a4ffe8d34bafca9b98fce
msgid "Normal Python name resolution rules apply. If you have multiple base classes that declare a ``Meta`` inner class, only the first one will be used. This means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the first parent, etc."
msgstr ""

#: ../../topics/forms/modelforms.txt:526
# 156e69a447a94357af406d85d24230a0
msgid "For technical reasons, a subclass cannot inherit from both a ``ModelForm`` and a ``Form`` simultaneously."
msgstr ""

#: ../../topics/forms/modelforms.txt:529
# 970ed1c42afe4c7f94fbfe033bfc495e
msgid "Chances are these notes won't affect you unless you're trying to do something tricky with subclassing."
msgstr ""

#: ../../topics/forms/modelforms.txt:533
# 7bf0e41fa8584ce9b57c2ba17a3fdf3b
msgid "Interaction with model validation"
msgstr ""

#: ../../topics/forms/modelforms.txt:535
# da41f15606c64d07a1e0b203b6d43892
msgid "As part of its validation process, ``ModelForm`` will call the ``clean()`` method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the :doc:`form validation </ref/forms/validation>` documentation for more on how field cleaning and validation work. Also, your model's ``clean()`` method will be called before any uniqueness checks are made. See :ref:`Validating objects <validating-objects>` for more information on the model's ``clean()`` hook."
msgstr ""

#: ../../topics/forms/modelforms.txt:547
# 92b3c74f96f24fed9ce8e7668729bee4
msgid "Model formsets"
msgstr ""

#: ../../topics/forms/modelforms.txt:549
# a19a5be194004a47b98ad0ddda12f0f2
msgid "Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a couple of enhanced formset classes that make it easy to work with Django models. Let's reuse the ``Author`` model from above::"
msgstr ""

#: ../../topics/forms/modelforms.txt:556
# 89d7d7607bc94b0093db48db16586d96
msgid "This will create a formset that is capable of working with the data associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

#: ../../topics/forms/modelforms.txt:572
# debc0a391ea54d1893a8684f99d762fd
msgid "``modelformset_factory`` uses ``formset_factory`` to generate formsets. This means that a model formset is just an extension of a basic formset that knows how to interact with a particular model."
msgstr ""

#: ../../topics/forms/modelforms.txt:577
# a3b23d5ae1b74b1e99e2d30354274340
msgid "Changing the queryset"
msgstr ""

#: ../../topics/forms/modelforms.txt:579
# f558b93c38984aeeb01aa8092bfff8ad
msgid "By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., ``Author.objects.all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

#: ../../topics/forms/modelforms.txt:586
# 9054074f45c843a989e3fdb27610e8de
msgid "Alternatively, you can create a subclass that sets ``self.queryset`` in ``__init__``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:596
# ce5b189befcb4f9e9250e0b13f9e3484
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

#: ../../topics/forms/modelforms.txt:600
# 7d10af53f8db463d8e26ed444ffd7ec4
msgid "If you want to return a formset that doesn't include *any* pre-existing instances of the model, you can specify an empty QuerySet::"
msgstr ""

#: ../../topics/forms/modelforms.txt:607
# df583f849f53486d9660bcd46716e2d2
msgid "Controlling which fields are used with ``fields`` and ``exclude``"
msgstr ""

#: ../../topics/forms/modelforms.txt:609
# b30c4f81bf4a4499ba40e1fe66c197ca
msgid "By default, a model formset uses all fields in the model that are not marked with ``editable=False``. However, this can be overridden at the formset level::"
msgstr ""

#: ../../topics/forms/modelforms.txt:614
# e837ee51cc4e41f1befff4c049d0be63
msgid "Using ``fields`` restricts the formset to use only the given fields. Alternatively, you can take an \"opt-out\" approach, specifying which fields to exclude::"
msgstr ""

#: ../../topics/forms/modelforms.txt:621
# 43e3217c0eca422c8cd6caa958ec0d2e
msgid "Providing initial values"
msgstr ""

#: ../../topics/forms/modelforms.txt:625
# b4e21e2a23584e5b930ba34215de3827
msgid "As with regular formsets, it's possible to :ref:`specify initial data <formsets-initial-data>` for forms in the formset by specifying an ``initial`` parameter when instantiating the model formset class returned by ``modelformset_factory``. However, with model formsets, the initial values only apply to extra forms, those that aren't bound to an existing object instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:634
# 2a2060cdffbf4d3d840f4936ca81850c
msgid "Saving objects in the formset"
msgstr ""

#: ../../topics/forms/modelforms.txt:636
# a6021e1126d64cf1a7dcee2637fa6171
msgid "As with a ``ModelForm``, you can save the data as a model object. This is done with the formset's ``save()`` method::"
msgstr ""

#: ../../topics/forms/modelforms.txt:645
# a140dbdb2b424c789e07b19a644b84cc
msgid "The ``save()`` method returns the instances that have been saved to the database. If a given instance's data didn't change in the bound data, the instance won't be saved to the database and won't be included in the return value (``instances``, in the above example)."
msgstr ""

#: ../../topics/forms/modelforms.txt:650
# eff74fdb453a4bd7b4fdb364f377aa4f
msgid "When fields are missing from the form (for example because they have been excluded), these fields will not be set by the ``save()`` method. You can find more information about this restriction, which also holds for regular ``ModelForms``, in `Using a subset of fields on the form`_."
msgstr ""

#: ../../topics/forms/modelforms.txt:656
# 7beb89d236124c8d8fefaee51712dd51
msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""

#: ../../topics/forms/modelforms.txt:664
# 9d4be4bdefdb4020972b568d42e4dd33
msgid "This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a ``ManyToManyField``, you'll also need to call ``formset.save_m2m()`` to ensure the many-to-many relationships are saved properly."
msgstr ""

#: ../../topics/forms/modelforms.txt:672
# 844d8d7f0fa14a56b0621a167dc917b2
msgid "Limiting the number of editable objects"
msgstr ""

#: ../../topics/forms/modelforms.txt:676
# 8381f86532fb417ea40223d74b2e0e44
msgid "As with regular formsets, you can use the ``max_num`` and ``extra`` parameters to ``modelformset_factory`` to limit the number of extra forms displayed."
msgstr ""

#: ../../topics/forms/modelforms.txt:679
# 2f2aba743de346e3b4b4e47b26055e21
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

#: ../../topics/forms/modelforms.txt:689
# 9768d13833cd4feea6299cf868998ba0
msgid "If the value of ``max_num`` is greater than the number of existing related objects, up to ``extra`` additional blank forms will be added to the formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:704
# 1bfbc485ea724a90a0b809222b14cc88
msgid "A ``max_num`` value of ``None`` (the default) puts no limit on the number of forms displayed."
msgstr ""

#: ../../topics/forms/modelforms.txt:708
# ebd79ca000eb4d568d215bdafaae5091
msgid "Using a model formset in a view"
msgstr ""

#: ../../topics/forms/modelforms.txt:710
# 6fcd761645204386afee95d17ad2ec2a
msgid "Model formsets are very similar to formsets. Let's say we want to present a formset to edit ``Author`` model instances::"
msgstr ""

#: ../../topics/forms/modelforms.txt:726
# 8982e98996954de2b3a3c090123aa63a
msgid "As you can see, the view logic of a model formset isn't drastically different than that of a \"normal\" formset. The only difference is that we call ``formset.save()`` to save the data into the database. (This was described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

#: ../../topics/forms/modelforms.txt:732
# f7346dfdd18641d49a2a5d6380ce3dcf
msgid "Overiding ``clean()`` on a ``model_formset``"
msgstr ""

#: ../../topics/forms/modelforms.txt:734
# f9c6e238bc9a4484986cd45922202b1b
msgid "Just like with ``ModelForms``, by default the ``clean()`` method of a ``model_formset`` will validate that none of the items in the formset violate the unique constraints on your model (either ``unique``, ``unique_together`` or ``unique_for_date|month|year``).  If you want to override the ``clean()`` method on a ``model_formset`` and maintain this validation, you must call the parent class's ``clean`` method::"
msgstr ""

#: ../../topics/forms/modelforms.txt:749
# 522dbd5b20ef46e4a3fdc5a86a4e96c8
msgid "Using a custom queryset"
msgstr ""

#: ../../topics/forms/modelforms.txt:751
# af88d16aeac64ab490ae6fdf747a437a
msgid "As stated earlier, you can override the default queryset used by the model formset::"
msgstr ""

#: ../../topics/forms/modelforms.txt:768
# 5a8f2f7e6c6f4678b8cb867e91930cd1
msgid "Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` cases in this example."
msgstr ""

#: ../../topics/forms/modelforms.txt:772
# a4be489eadbc49e7900310b2d1cc1841
msgid "Using the formset in the template"
msgstr ""

#: ../../topics/forms/modelforms.txt:776
# 7b95d7472ce9449f89b282fbe061db73
msgid "There are three ways to render a formset in a Django template."
msgstr ""

#: ../../topics/forms/modelforms.txt:778
# 61974f05b5e54d83ab7b322c08d73374
msgid "First, you can let the formset do most of the work::"
msgstr ""

#: ../../topics/forms/modelforms.txt:784
# 69521c2fc1eb462ca889ed94104e4e46
msgid "Second, you can manually render the formset, but let the form deal with itself::"
msgstr ""

#: ../../topics/forms/modelforms.txt:794
# 99724548219044fcb39785fd6b388c8f
msgid "When you manually render the forms yourself, be sure to render the management form as shown above. See the :ref:`management form documentation <understanding-the-managementform>`."
msgstr ""

#: ../../topics/forms/modelforms.txt:798
# cff6fa9034a74e5e9240d93d50d0ed41
msgid "Third, you can manually render each field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:809
# 5d6621ff1db54113bbf9d0fe1d303cf0
msgid "If you opt to use this third method and you don't iterate over the fields with a ``{% for %}`` loop, you'll need to render the primary key field. For example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:824
# 5b00a3ae3f6d495391f4f9eee87d7a44
msgid "Notice how we need to explicitly render ``{{ form.id }}``. This ensures that the model formset, in the ``POST`` case, will work correctly. (This example assumes a primary key named ``id``. If you've explicitly defined your own primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

#: ../../topics/forms/modelforms.txt:832
# 2b85bfeedef64a9498e1cba527d2944b
msgid "Inline formsets"
msgstr ""

#: ../../topics/forms/modelforms.txt:834
# e89b13da468b4bf98197e867d481b218
msgid "Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models::"
msgstr ""

#: ../../topics/forms/modelforms.txt:845
# 377fb2007b77401fb882e74713fa0a22
msgid "If you want to create a formset that allows you to edit books belonging to a particular author, you could do this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:854
# dbd617160279418e8adc0a471e523693
msgid "``inlineformset_factory`` uses ``modelformset_factory`` and marks ``can_delete=True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:859
# 505b73218e7e4d9689dc25e948bab047
msgid ":ref:`Manually rendered can_delete and can_order <manually-rendered-can-delete-and-can-order>`."
msgstr ""

#: ../../topics/forms/modelforms.txt:862
# 9086921c3e814cbbab6a371aca8ca2ce
msgid "More than one foreign key to the same model"
msgstr ""

#: ../../topics/forms/modelforms.txt:864
# 2b1be69566794ef19d6084d64d2a50e6
msgid "If your model contains more than one foreign key to the same model, you'll need to resolve the ambiguity manually using ``fk_name``. For example, consider the following model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:873
# 4eae63e004b142ea9b6fbc2296934a12
msgid "To resolve this, you can use ``fk_name`` to ``inlineformset_factory``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:878
# 1f1018b2be7f40d293669d7757284079
msgid "Using an inline formset in a view"
msgstr ""

#: ../../topics/forms/modelforms.txt:880
# f1f2003810b74b5588de827452fec169
msgid "You may want to provide a view that allows a user to edit the related objects of a model. Here's how you can do that::"
msgstr ""

#: ../../topics/forms/modelforms.txt:897
# e6e527a0551343c2bedfb7cc6b29cc06
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

#: ../../topics/generic-views.txt:3
#: ../../topics/http/generic-views.txt:3
# 5063410aeec2486686eb0e47f4d2f860
# 82babcc2bf4e4436af76284f0233efa0
msgid "Generic views"
msgstr ""

#: ../../topics/generic-views.txt:10
# 63939f5f900142e98ce2ffcc367f7559
msgid "From Django 1.3, function-based generic views have been deprecated in favor of a class-based approach, described in the class-based views :doc:`topic guide </topics/class-based-views>` and :doc:`detailed reference </ref/class-based-views>`."
msgstr ""

#: ../../topics/generic-views.txt:34
# 2cc5d7bc3dfd48bc9fbb4c3a78d805ee
msgid "Display list and detail pages for a single object. If we were creating an application to manage conferences then a ``talk_list`` view and a ``registered_user_list`` view would be examples of list views. A single talk page is an example of what we call a \"detail\" view."
msgstr ""

#: ../../topics/generic-views.txt:39
# 59e91b77bb3c4e348937ec7caea81342
msgid "Present date-based objects in year/month/day archive pages, associated detail, and \"latest\" pages. The Django Weblog's (https://www.djangoproject.com/weblog/) year, month, and day archives are built with these, as would be a typical newspaper's archives."
msgstr ""

#: ../../topics/generic-views.txt:52
# c00c3a0050d341138f42a428c3f72696
msgid "Using generic views"
msgstr ""

#: ../../topics/generic-views.txt:54
# bd41c01a83ab45a3a3b83f938c1a1f77
msgid "All of these views are used by creating configuration dictionaries in your URLconf files and passing those dictionaries as the third member of the URLconf tuple for a given pattern."
msgstr ""

#: ../../topics/generic-views.txt:58
# e6723d155f16404a82fc60302eebdfa7
msgid "For example, here's a simple URLconf you could use to present a static \"about\" page::"
msgstr ""

#: ../../topics/generic-views.txt:70
# 5967f9ae512044a688622ef4a46d6510
msgid "Though this might seem a bit \"magical\" at first glance  -- look, a view with no code! --, actually the ``direct_to_template`` view simply grabs information from the extra-parameters dictionary and uses that information when rendering the view."
msgstr ""

#: ../../topics/generic-views.txt:75
# 1d46d4e554104a8fba32b8d643b995bc
msgid "Because this generic view -- and all the others -- is a regular view function like any other, we can reuse it inside our own views. As an example, let's extend our \"about\" example to map URLs of the form ``/about/<whatever>/`` to statically rendered ``about/<whatever>.html``. We'll do this by first modifying the URLconf to point to a view function:"
msgstr ""

#: ../../topics/generic-views.txt:94
# 9d4a0fc6fb2a42cc9a142501b6932192
msgid "Next, we'll write the ``about_pages`` view::"
msgstr ""

#: ../../topics/generic-views.txt:106
# ebd88a6e50ad46a7874a9396f670d520
msgid "Here we're treating ``direct_to_template`` like any other function. Since it returns an ``HttpResponse``, we can simply return it as-is. The only slightly tricky business here is dealing with missing templates. We don't want a nonexistent template to cause a server error, so we catch ``TemplateDoesNotExist`` exceptions and return 404 errors instead."
msgstr ""

#: ../../topics/generic-views.txt:114
# eec90f807ff542b3bf7f95957b914501
msgid "Sharp-eyed readers may have noticed a possible security hole: we're constructing the template name using interpolated content from the browser (``template=\"about/%s.html\" % page``). At first glance, this looks like a classic *directory traversal* vulnerability. But is it really?"
msgstr ""

#: ../../topics/generic-views.txt:119
# d757926bdd12437d86ba868c437bd326
msgid "Not exactly. Yes, a maliciously crafted value of ``page`` could cause directory traversal, but although ``page`` *is* taken from the request URL, not every value will be accepted. The key is in the URLconf: we're using the regular expression ``\\w+`` to match the ``page`` part of the URL, and ``\\w`` only accepts letters and numbers. Thus, any malicious characters (dots and slashes, here) will be rejected by the URL resolver before they reach the view itself."
msgstr ""

#: ../../topics/generic-views.txt:130
# 5ef5704b5bd34481b7bdee7ab890b1d0
msgid "The ``direct_to_template`` certainly is useful, but Django's generic views really shine when it comes to presenting views on your database content. Because it's such a common task, Django comes with a handful of built-in generic views that make generating list and detail views of objects incredibly easy."
msgstr ""

#: ../../topics/generic-views.txt:175
# df4e00758dcb473691b32b51086ae981
msgid "That's all the Python code we need to write. We still need to write a template, however. We could explicitly tell the ``object_list`` view which template to use by including a ``template_name`` key in the extra arguments dictionary, but in the absence of an explicit template Django will infer one from the object's name. In this case, the inferred template will be ``\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of the app that defines the model, while the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../topics/generic-views.txt:201
# 9c9e003188e84443bd6f6126a1d0dc5b
msgid "That's really all there is to it. All the cool features of generic views come from changing the \"info\" dictionary passed to the generic view. The :doc:`generic views reference</ref/generic-views>` documents all the generic views and all their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../topics/generic-views.txt:218
# 7f9e8bbbadf54ec58eb307d0c1a74124
msgid "Luckily, in nearly every one of these cases, there are ways to simply extend generic views to handle a larger array of use cases. These situations usually fall into a handful of patterns dealt with in the sections that follow."
msgstr ""

#: ../../topics/generic-views.txt:225
# ab1e73ce6cf1406896d545d3a2bc5619
msgid "You might have noticed that our sample publisher list template stores all the books in a variable named ``object_list``. While this works just fine, it isn't all that \"friendly\" to template authors: they have to \"just know\" that they're dealing with publishers here. A better name for that variable would be ``publisher_list``; that variable's content is pretty obvious."
msgstr ""

#: ../../topics/generic-views.txt:231
# af6d10c21b49406eb265b302d883ff0d
msgid "We can change the name of that variable easily with the ``template_object_name`` argument:"
msgstr ""

#: ../../topics/generic-views.txt:245
# a3ca45d4c8fe4e54a628faa7e64b27f1
msgid "Providing a useful ``template_object_name`` is always a good idea. Your coworkers who design templates will thank you."
msgstr ""

#: ../../topics/generic-views.txt:251
# c1880973b4004a2ba9667f1c08d8c8b1
msgid "Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The ``object_detail`` generic view provides the publisher to the context, but it seems there's no way to get additional information in that template."
msgstr ""

#: ../../topics/generic-views.txt:257
# 84911a4eab1c42438581c3b49ff051de
msgid "But there is: all generic views take an extra optional parameter, ``extra_context``. This is a dictionary of extra objects that will be added to the template's context. So, to provide the list of all books on the detail detail view, we'd use an info dict like this:"
msgstr ""

#: ../../topics/generic-views.txt:272
# 158117efc943478184c9cacc44640a4c
msgid "This would populate a ``{{ book_list }}`` variable in the template context. This pattern can be used to pass any information down into the template for the generic view. It's very handy."
msgstr ""

#: ../../topics/generic-views.txt:276
# b7e0ff9706584da1a29758c650f982c8
msgid "However, there's actually a subtle bug here -- can you spot it?"
msgstr ""

#: ../../topics/generic-views.txt:278
# bd4e5548831646989b2391b021ef7020
msgid "The problem has to do with when the queries in ``extra_context`` are evaluated. Because this example puts ``Book.objects.all()`` in the URLconf, it will be evaluated only once (when the URLconf is first loaded). Once you add or remove books, you'll notice that the generic view doesn't reflect those changes until you reload the Web server (see :ref:`caching-and-querysets` for more information about when QuerySets are cached and evaluated)."
msgstr ""

#: ../../topics/generic-views.txt:287
# ae167811a83e4d318506ccff26f03433
msgid "This problem doesn't apply to the ``queryset`` generic view argument. Since Django knows that particular QuerySet should *never* be cached, the generic view takes care of clearing the cache when each view is rendered."
msgstr ""

#: ../../topics/generic-views.txt:291
# 3a4254ffc1204f9ab86afa1e9edd86e1
msgid "The solution is to use a callback in ``extra_context`` instead of a value. Any callable (i.e., a function) that's passed to ``extra_context`` will be evaluated when the view is rendered (instead of only once). You could do this with an explicitly defined function:"
msgstr ""

#: ../../topics/generic-views.txt:307
# 12230af536b74da890f9cb5c2ad85ffa
msgid "or you could use a less obvious but shorter version that relies on the fact that ``Book.objects.all`` is itself a callable:"
msgstr ""

#: ../../topics/generic-views.txt:318
# 984d20c3e9eb438ea5dfa3267102800b
msgid "Notice the lack of parentheses after ``Book.objects.all``; this references the function without actually calling it (which the generic view will do later)."
msgstr ""

#: ../../topics/generic-views.txt:324
# 962d7d2309c64ccc8269f2f4a471a606
msgid "Now let's take a closer look at this ``queryset`` key we've been using all along. Most generic views take one of these ``queryset`` arguments -- it's how the view knows which set of objects to display (see :doc:`/topics/db/queries` for more information about ``QuerySet`` objects, and see the :doc:`generic views reference</ref/generic-views>` for the complete details)."
msgstr ""

#: ../../topics/generic-views.txt:330
# 10bb76417d00461d8499ccf39952f3f9
msgid "To pick a simple example, we might want to order a list of books by publication date, with the most recent first:"
msgstr ""

#: ../../topics/generic-views.txt:345
# c3d5166972ee465990fa313e8451ec32
msgid "That's a pretty simple example, but it illustrates the idea nicely. Of course, you'll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:"
msgstr ""

#: ../../topics/generic-views.txt:373
# 08f11633028c46979b3dcd5400b38a72
msgid "If you get a 404 when requesting ``/books/acme/``, check to ensure you actually have a Publisher with the name 'ACME Publishing'.  Generic views have an ``allow_empty`` parameter for this case.  See the :doc:`generic views reference</ref/generic-views>` for more details."
msgstr ""

#: ../../topics/generic-views.txt:379
# ebda9a396f4c4698a596508d6cf92fec
msgid "Complex filtering with wrapper functions"
msgstr ""

#: ../../topics/generic-views.txt:381
# fad5448655954acc87a01d8b759489f3
msgid "Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher's name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher? We can \"wrap\" the ``object_list`` generic view to avoid writing a lot of code by hand. As usual, we'll start by writing a URLconf:"
msgstr ""

#: ../../topics/generic-views.txt:396
# e619f276fd1b412e8c0ab4ae88775fc1
msgid "Next, we'll write the ``books_by_publisher`` view itself::"
msgstr ""

#: ../../topics/generic-views.txt:419
# c5ab0e8af74246e29c3082bcf93e87ff
msgid "This works because there's really nothing special about generic views -- they're just Python functions. Like any view function, generic views expect a certain set of arguments and return ``HttpResponse`` objects. Thus, it's incredibly easy to wrap a small function around a generic view that does additional work before (or after; see the next section) handing things off to the generic view."
msgstr ""

#: ../../topics/generic-views.txt:427
# e8c3e8c69ab34bbfbf3eaf397c79f72f
msgid "Notice that in the preceding example we passed the current publisher being displayed in the ``extra_context``. This is usually a good idea in wrappers of this nature; it lets the template know which \"parent\" object is currently being browsed."
msgstr ""

#: ../../topics/generic-views.txt:451
# 3da3f16cbdd7431f9c3b589c16e2acb2
msgid "The generic ``object_detail`` view, of course, wouldn't know anything about this field, but once again we could easily write a custom view to keep that field updated."
msgstr ""

#: ../../topics/generic-views.txt:467
# 7744e0426876427db25b1b08e913acfb
msgid "Then we'd write our wrapper function::"
msgstr ""

#: ../../topics/generic-views.txt:494
# 380dfc7a62064a439a21217c4336562c
msgid "We can use a similar idiom to alter the response returned by the generic view. If we wanted to provide a downloadable plain-text version of the list of authors, we could use a view like this::"
msgstr ""

#: ../../topics/generic-views.txt:508
# 197571e8820d493caa90177c12ac9a71
msgid "This works because the generic views return simple ``HttpResponse`` objects that can be treated like dictionaries to set HTTP headers. This ``Content-Disposition`` business, by the way, instructs the browser to download and save the page instead of displaying it in the browser."
msgstr ""

#: ../../topics/generic-views-migration.txt:3
# fb6e8c3045e64684a0a5d0c1db75dbad
msgid "Migrating function-based generic views"
msgstr ""

#: ../../topics/generic-views-migration.txt:5
# e83ff9bd3e84404bae95154ac28f8482
msgid "All the :doc:`function-based generic views</ref/generic-views>` that existed in Django 1.2 have analogs as :doc:`class-based generic views</ref/class-based-views>` in Django 1.3. The feature set exposed in those function-based views can be replicated in a class-based way."
msgstr ""

#: ../../topics/generic-views-migration.txt:12
# d5f367f706e545a0942de36218993d02
msgid "How to migrate"
msgstr ""

#: ../../topics/generic-views-migration.txt:15
# d8c9fdb6d3aa4372922a37cd1cc7e7b7
msgid "Replace generic views with generic classes"
msgstr ""

#: ../../topics/generic-views-migration.txt:17
# c972a3fda58a494494793e4bc2465888
msgid "Existing usage of function-based generic views should be replaced with their class-based analogs:"
msgstr ""

#: ../../topics/generic-views-migration.txt:21
# 5be0b33399264146864debbf9c3d0974
msgid "Old function-based generic view"
msgstr ""

#: ../../topics/generic-views-migration.txt:21
# 701f8e9ba75f40eeaeefea2321c299b8
msgid "New class-based generic view"
msgstr ""

#: ../../topics/generic-views-migration.txt:23
# a844cbe8fd9b4c25841d1729bd692527
msgid "``django.views.generic.simple.direct_to_template``"
msgstr ""

#: ../../topics/generic-views-migration.txt:23
# ecbed6a51aa64e78a931b18809ea7fe5
msgid ":class:`django.views.generic.base.TemplateView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:24
# 95a15727cbb442faa3537161b2636234
msgid "``django.views.generic.simple.redirect_to``"
msgstr ""

#: ../../topics/generic-views-migration.txt:24
# 81970c697cd045db827c05ec857b288c
msgid ":class:`django.views.generic.base.RedirectView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:25
# 30a4abad12764b9a9ece4f517632e12e
msgid "``django.views.generic.list_detail.object_list``"
msgstr ""

#: ../../topics/generic-views-migration.txt:25
# 20dbf91c0892478c973f45b9c8d54f18
msgid ":class:`django.views.generic.list.ListView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:26
# af97e5439e3e4e69bda74c2a8ed1abe8
msgid "``django.views.generic.list_detail.object_detail``"
msgstr ""

#: ../../topics/generic-views-migration.txt:26
# 04e353e51a1c48d6af3efa1880009ac5
msgid ":class:`django.views.generic.detail.DetailView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:27
# 66c025ed53b2495fa066565eb62131c4
msgid "``django.views.generic.create_update.create_object``"
msgstr ""

#: ../../topics/generic-views-migration.txt:27
# c556e235cd654e56b2068518f223999f
msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:28
# 1634b8e9089b49b79ae48c7ac61dacff
msgid "``django.views.generic.create_update.update_object``"
msgstr ""

#: ../../topics/generic-views-migration.txt:28
# bbfed2d2381843d28ffd4cd76144614a
msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:29
# 060ca466abb045b59b17885829ffb83c
msgid "``django.views.generic.create_update.delete_object``"
msgstr ""

#: ../../topics/generic-views-migration.txt:29
# c6a998dd984c45d2b12cd8a19b2dd3c6
msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:30
# 18b8e63f10ac48b7aef020939ac3d68b
msgid "``django.views.generic.date_based.archive_index``"
msgstr ""

#: ../../topics/generic-views-migration.txt:30
# 69d978fe9edd478cb506a8bb83cdad5a
msgid ":class:`django.views.generic.dates.ArchiveIndexView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:31
# 43ca56e6278c4c0bb16822af676f51b6
msgid "``django.views.generic.date_based.archive_year``"
msgstr ""

#: ../../topics/generic-views-migration.txt:31
# 301174008dd54e2da36714deede6575e
msgid ":class:`django.views.generic.dates.YearArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:32
# a56c5062a79d4096a197794d15a09400
msgid "``django.views.generic.date_based.archive_month``"
msgstr ""

#: ../../topics/generic-views-migration.txt:32
# 449842e4a28140b5a115bb842ec27cf3
msgid ":class:`django.views.generic.dates.MonthArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:33
# 315526b427234adda69f15fa65d25fc0
msgid "``django.views.generic.date_based.archive_week``"
msgstr ""

#: ../../topics/generic-views-migration.txt:33
# 84b579333e6e4c859b5567f5e3cdafb3
msgid ":class:`django.views.generic.dates.WeekArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:34
# df66c5c677c644799aa9efaf8373b52d
msgid "``django.views.generic.date_based.archive_day``"
msgstr ""

#: ../../topics/generic-views-migration.txt:34
# f82f19bf1279495abedf6f5eeeb1d186
msgid ":class:`django.views.generic.dates.DayArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:35
# f630ac594afd470db1ece6c23e6dabe6
msgid "``django.views.generic.date_based.archive_today``"
msgstr ""

#: ../../topics/generic-views-migration.txt:35
# 70e05f2d0bb34641b93a31a4671fad49
msgid ":class:`django.views.generic.dates.TodayArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:36
# 182d9aaf00c545528a63b04c52b34193
msgid "``django.views.generic.date_based.object_detail``"
msgstr ""

#: ../../topics/generic-views-migration.txt:36
# fb406f54fd4146308425c09e4db430fd
msgid ":class:`django.views.generic.dates.DateDetailView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:39
# 63dec377c8c141a1b8ecf591855e36cf
msgid "To do this, replace the reference to the generic view function with a ``as_view()`` instantiation of the class-based view. For example, the old-style ``direct_to_template`` pattern::"
msgstr ""

#: ../../topics/generic-views-migration.txt:45
# 767f046325844470961bbd03c452df26
msgid "can be replaced with an instance of :class:`~django.views.generic.base.TemplateView`::"
msgstr ""

#: ../../topics/generic-views-migration.txt:51
# 00d31f5d81c74f55b9b5e7495cd9aa71
msgid "``template`` argument to ``direct_to_template`` views"
msgstr ""

#: ../../topics/generic-views-migration.txt:53
# 66cfe1d112b046eeaa21d953f98ccebd
msgid "The ``template`` argument to the ``direct_to_template`` view has been renamed ``template_name``. This has been done to maintain consistency with other views."
msgstr ""

#: ../../topics/generic-views-migration.txt:57
# a408c8654c3b48f9a1a0843d7b7eb41b
msgid "``object_id`` argument to detail views"
msgstr ""

#: ../../topics/generic-views-migration.txt:59
# 2622a06afed64eedb19ff1699b825680
msgid "The object_id argument to the ``object_detail`` view has been renamed ``pk`` on the :class:`~django.views.generic.detail.DetailView`."
msgstr ""

#: ../../topics/generic-views-migration.txt:63
# dfc5d6d52ba94740b90e4916aa5c93df
msgid "``template_object_name``"
msgstr ""

#: ../../topics/generic-views-migration.txt:65
# 87ade4ba91e14fdd9b05d05fe714b684
msgid "``template_object_name`` has been renamed ``context_object_name``, reflecting the fact that the context data can be used for purposes other than template rendering (e.g., to populate JSON output)."
msgstr ""

#: ../../topics/generic-views-migration.txt:70
# dddecbb1848b447cb5404ee57e3e1fe5
msgid "The ``_list`` suffix on list views"
msgstr ""

#: ../../topics/generic-views-migration.txt:72
# 598cc30538424adfb19a0fb3c9528ab5
msgid "In a function-based :class:`ListView`, the ``template_object_name`` was appended with the suffix ``'_list'`` to yield the final context variable name. In a class-based ``ListView``, the ``context_object_name`` is used verbatim. The ``'_list'`` suffix is only applied when generating a default context object name."
msgstr ""

#: ../../topics/generic-views-migration.txt:79
# 0f190a2fc5464dc8b93e390155e9bde6
msgid "The context data for ``object_list`` views"
msgstr ""

#: ../../topics/generic-views-migration.txt:81
# be044b2e780044c3aedf56db6c20f710
msgid "The context provided by :class:`~django.views.generic.list.MultipleObjectMixin` is quite different from that provided by ``object_list``, with most pagination related variables replaced by a single ``page_obj`` object. The following are no longer provided:"
msgstr ""

#: ../../topics/generic-views-migration.txt:86
# 9872d02213e44e3680b3e08d92f5c8f0
msgid "``first_on_page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:87
# 08f82c60aa4848f38f99fd7c42a6656d
msgid "``has_next``"
msgstr ""

#: ../../topics/generic-views-migration.txt:88
# 4a7a4718fb2a47d68a145a1184ce7b92
msgid "``has_previous``"
msgstr ""

#: ../../topics/generic-views-migration.txt:89
# 1d4d0b5f26a041d495a996da07bdf2ed
msgid "``hits``"
msgstr ""

#: ../../topics/generic-views-migration.txt:90
# 621aea5fbcd44d45941e9199b900246a
msgid "``last_on_page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:91
# 508811b6e151477cad4901eb813341a1
msgid "``next``"
msgstr ""

#: ../../topics/generic-views-migration.txt:92
# d5cb9f3b7c4243fd9bcb4494ebfc357a
msgid "``page_range``"
msgstr ""

#: ../../topics/generic-views-migration.txt:93
# 6c124f4b137342279c25cb50b8c4114b
msgid "``page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:94
# 0cb7b993cf914239a74b0e9e5b224d04
msgid "``pages``"
msgstr ""

#: ../../topics/generic-views-migration.txt:95
# 905ed4df0fb6409f8d13a6da1eeb0dc5
msgid "``previous``"
msgstr ""

#: ../../topics/generic-views-migration.txt:96
# 320f5a413c724fa8b131b2b40279242e
msgid "``results_per_page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:99
# 4a9a2f120ff84107b9e9cb6f327d38d8
msgid "``extra_context``"
msgstr ""

#: ../../topics/generic-views-migration.txt:101
# 87a580140cae41ecab109ebcbb39fcfa
msgid "Function-based generic views provided an ``extra_context`` argument as way to insert extra items into the context at time of rendering."
msgstr ""

#: ../../topics/generic-views-migration.txt:104
# efec6730cf594c89bd857186bd6ad814
msgid "Class-based views don't provide an ``extra_context`` argument. Instead, you subclass the view, overriding :meth:`get_context_data()`. For example::"
msgstr ""

#: ../../topics/generic-views-migration.txt:118
# cf19d4cc40ca4212b46d5b02f12eb6be
msgid "``post_save_redirect`` argument to create and update views"
msgstr ""

#: ../../topics/generic-views-migration.txt:120
# cd2e946216dd43eeb65a82fa2c4c7bc9
msgid "The ``post_save_redirect`` argument to the create and update views has been renamed ``success_url`` on the :class:`~django.views.generic.edit.ModelFormMixin`."
msgstr ""

#: ../../topics/generic-views-migration.txt:125
# 56bc8befdfca4f42af07e3e593fa286c
msgid "``mimetype``"
msgstr ""

#: ../../topics/generic-views-migration.txt:127
# 905c0fd995a4484eb8c173801e09f395
msgid "Some function-based generic views provided a ``mimetype`` argument as way to control the mimetype of the response."
msgstr ""

#: ../../topics/generic-views-migration.txt:130
# cb07cc3cc13d497a91503021fc4d0b8c
msgid "Class-based views don't provide a ``mimetype`` argument. Instead, you subclass the view, overriding :meth:`TemplateResponseMixin.render_to_response()` and pass in arguments for the TemplateResponse constructor. For example::"
msgstr ""

#: ../../topics/generic-views-migration.txt:141
# f27e07514e7148739de7402d5ce6f8ee
msgid "``context_processors``"
msgstr ""

#: ../../topics/generic-views-migration.txt:143
# a4dddf563e5e47d1b2b65b32587371ed
msgid "Some function-based generic views provided a ``context_processors`` argument that could be used to force the use of specialized context processors when rendering template content."
msgstr ""

#: ../../topics/generic-views-migration.txt:147
# 8a82fe8d8a394c669905029c4827cf8c
msgid "Class-based views don't provide a ``context_processors`` argument. Instead, you subclass the view, overriding :meth:`TemplateResponseMixin.render_to_response()`, and passing in a context instance that has been instantiated with the processors you want to use. For example::"
msgstr ""

#: ../../topics/http/decorators.txt:3
# a2182f6ec9f84753ab739429ae884d48
msgid "View decorators"
msgstr ""

#: ../../topics/http/decorators.txt:7
# dc2a1a1e39224a35b1d0beac26f57edc
msgid "Django provides several decorators that can be applied to views to support various HTTP features."
msgstr ""

#: ../../topics/http/decorators.txt:11
# 91cf31752eba495b844d6593481444cc
msgid "Allowed HTTP methods"
msgstr ""

#: ../../topics/http/decorators.txt:13
# cb2600ac2f764c859268a520514c2343
msgid "The decorators in :mod:`django.views.decorators.http` can be used to restrict access to views based on the request method. These decorators will return a :class:`django.http.HttpResponseNotAllowed` if the conditions are not met."
msgstr ""

#: ../../topics/http/decorators.txt:19
# 2ac8490199e04fb882d3d6d052cd48ae
msgid "Decorator to require that a view only accept particular request methods. Usage::"
msgstr ""

#: ../../topics/http/decorators.txt:30
# 3823d0f357564812adc69477dfa3d6bd
msgid "Note that request methods should be in uppercase."
msgstr ""

#: ../../topics/http/decorators.txt:34
# f9d325083be3447b94ccda614cb4ddaf
msgid "Decorator to require that a view only accept the GET method."
msgstr ""

#: ../../topics/http/decorators.txt:38
# 9cb64638d93b4ce49f9af760cc79b61a
msgid "Decorator to require that a view only accept the POST method."
msgstr ""

#: ../../topics/http/decorators.txt:44
# b2e77ee1191742b09bf88b0b63994183
msgid "Decorator to require that a view only accept the GET and HEAD methods. These methods are commonly considered \"safe\" because they should not have the significance of taking an action other than retrieving the requested resource."
msgstr ""

#: ../../topics/http/decorators.txt:50
# 64d8cc67dca347f9bf762d833aa4515c
msgid "Django will automatically strip the content of responses to HEAD requests while leaving the headers unchanged, so you may handle HEAD requests exactly like GET requests in your views. Since some software, such as link checkers, rely on HEAD requests, you might prefer using ``require_safe`` instead of ``require_GET``."
msgstr ""

#: ../../topics/http/decorators.txt:57
# 22d86aed43fc4737b825d27be3b2a536
msgid "Conditional view processing"
msgstr ""

#: ../../topics/http/decorators.txt:59
# 78bd326a9ed7439a9d1354ba434616a5
msgid "The following decorators in :mod:`django.views.decorators.http` can be used to control caching behavior on particular views."
msgstr ""

#: ../../topics/http/decorators.txt:68
# eb29bbf6f76c4f5eb974bf20bb89521e
msgid "These decorators can be used to generate ``ETag`` and ``Last-Modified`` headers; see :doc:`conditional view processing </topics/conditional-view-processing>`."
msgstr ""

#: ../../topics/http/decorators.txt:75
# 9f90017e4be340ca886dd489b24413af
msgid "GZip compression"
msgstr ""

#: ../../topics/http/decorators.txt:77
# 19626791cb594fa48cdb03a1e50e93a9
msgid "The decorators in :mod:`django.views.decorators.gzip` control content compression on a per-view basis."
msgstr ""

#: ../../topics/http/decorators.txt:82
# 7fa1f79de3c840cc877f5ab5d7640746
msgid "This decorator compresses content if the browser allows gzip compression. It sets the ``Vary`` header accordingly, so that caches will base their storage on the ``Accept-Encoding`` header."
msgstr ""

#: ../../topics/http/decorators.txt:89
# 9c2e7d24443a44c39bfc791891cb642b
msgid "Vary headers"
msgstr ""

#: ../../topics/http/decorators.txt:91
# 9a071d9f3d3f4b38b36a5a59b66db4f9
msgid "The decorators in :mod:`django.views.decorators.vary` can be used to control caching based on specific request headers."
msgstr ""

#: ../../topics/http/decorators.txt:98
# 71ff8d7272d44f2a989ee32b04bc8eb9
msgid "The ``Vary`` header defines which request headers a cache mechanism should take into account when building its cache key."
msgstr ""

#: ../../topics/http/decorators.txt:101
# 31f798693420435c90ba57c909113375
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

#: ../../topics/http/file-uploads.txt:3
# f08cda86c0dd45adb1b1bdd854342a6a
msgid "File Uploads"
msgstr ""

#: ../../topics/http/file-uploads.txt:7
# 0fa4a19625ef4e9e80f62417d727f570
msgid "When Django handles a file upload, the file data ends up placed in :attr:`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` object see the documentation for :doc:`request and response objects </ref/request-response>`). This document explains how files are stored on disk and in memory, and how to customize the default behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:14
# 6402547d306547a38cba337857faebcd
msgid "Basic file uploads"
msgstr ""

#: ../../topics/http/file-uploads.txt:16
# 70029bd5c81e4771a4c19ca5786b4071
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

#: ../../topics/http/file-uploads.txt:24
# 853bddb3af3c4a909ce315d0574b7dd3
msgid "A view handling this form will receive the file data in :attr:`request.FILES <django.http.HttpRequest.FILES>`, which is a dictionary containing a key for each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, or other :class:`~django.forms.FileField` subclass) in the form. So the data from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

#: ../../topics/http/file-uploads.txt:31
# 361decf4c4cf43f0a442799a56567805
msgid "Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only contain data if the request method was ``POST`` and the ``<form>`` that posted the request has the attribute ``enctype=\"multipart/form-data\"``. Otherwise, ``request.FILES`` will be empty."
msgstr ""

#: ../../topics/http/file-uploads.txt:36
# a7ce1e1e1ec54d2ca2efa85764a05687
msgid "Most of the time, you'll simply pass the file data from ``request`` into the form as described in :ref:`binding-uploaded-files`. This would look something like::"
msgstr ""

#: ../../topics/http/file-uploads.txt:56
# 7182b746cc8c4fd79b6c54db607e0163
msgid "Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest.FILES>` into the form's constructor; this is how file data gets bound into a form."
msgstr ""

#: ../../topics/http/file-uploads.txt:60
# cb80be272abf4484b72fef5318851c70
msgid "Handling uploaded files"
msgstr ""

#: ../../topics/http/file-uploads.txt:64
# 97ca64028f3d4605839ad4bf65fe14d6
msgid "The final piece of the puzzle is handling the actual file data from :attr:`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this dictionary is an ``UploadedFile`` object -- a simple wrapper around an uploaded file. You'll usually use one of these methods to access the uploaded content:"
msgstr ""

#: ../../topics/http/file-uploads.txt:71
# 0f123d986cb444459385f14e45901c0e
msgid "Read the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

#: ../../topics/http/file-uploads.txt:78
# 5f41dcea37c64bd4a58bb811eb994aba
msgid "Returns ``True`` if the uploaded file is big enough to require reading in multiple chunks. By default this will be any file larger than 2.5 megabytes, but that's configurable; see below."
msgstr ""

#: ../../topics/http/file-uploads.txt:84
# 6c83ffea17b34020a037b88447e3b86b
msgid "A generator returning chunks of the file. If ``multiple_chunks()`` is ``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

#: ../../topics/http/file-uploads.txt:87
# f0b3146c718543ba8eb9205345464529
msgid "In practice, it's often easiest simply to use ``chunks()`` all the time; see the example below."
msgstr ""

#: ../../topics/http/file-uploads.txt:92
# e4abd52277d74484b029d6bb841dce7f
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

#: ../../topics/http/file-uploads.txt:96
# 6730d93192864e31aed1f91330eb5297
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../topics/http/file-uploads.txt:98
# ec19300d933247cbb70505ea156d39c7
msgid "There are a few other methods and attributes available on ``UploadedFile`` objects; see `UploadedFile objects`_ for a complete reference."
msgstr ""

#: ../../topics/http/file-uploads.txt:101
# d23bb3264b724d6fab68e9297c158e26
msgid "Putting it all together, here's a common way you might handle an uploaded file::"
msgstr ""

#: ../../topics/http/file-uploads.txt:109
# 65a9d37796ab4211a4284279faab443f
msgid "Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures that large files don't overwhelm your system's memory."
msgstr ""

#: ../../topics/http/file-uploads.txt:113
# d3185c0c7a5e455d91d3f7a788b81e78
msgid "Where uploaded data is stored"
msgstr ""

#: ../../topics/http/file-uploads.txt:115
# 086160c5600a4017aca467a922fe2f96
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

#: ../../topics/http/file-uploads.txt:117
# 82c8999d8ace4406905d90d8caf1ab87
msgid "By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast."
msgstr ""

#: ../../topics/http/file-uploads.txt:121
# ebbbfdc89d35401f8800f03bc3cb6352
msgid "However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system's temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:127
# 10678e43bebb44ca89582b656d60ccc7
msgid "These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable defaults\". Read on for details on how you can customize or completely replace upload behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:132
# 24705c3d0c094c1d9143432443a2df02
msgid "Changing upload handler behavior"
msgstr ""

#: ../../topics/http/file-uploads.txt:134
# a029556795924f24940c3ada524d11ea
msgid "Three settings control Django's file upload behavior:"
msgstr ""

#: ../../topics/http/file-uploads.txt:137
# a5c68b9f2b6c4a8790cef0e325c43496
msgid "The maximum size, in bytes, for files that will be uploaded into memory. Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed to disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:141
# 6fdca51683d64db18aad1fdb788ca666
msgid "Defaults to 2.5 megabytes."
msgstr ""

#: ../../topics/http/file-uploads.txt:144
# 286182751fe34349b5271c8e8ef30072
msgid "The directory where uploaded files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
msgstr ""

#: ../../topics/http/file-uploads.txt:147
# 35b51fd599e5480596054ccabe165afd
msgid "Defaults to your system's standard temporary directory (i.e. ``/tmp`` on most Unix-like systems)."
msgstr ""

#: ../../topics/http/file-uploads.txt:151
# c2819ef346ce4c228ad464089f34b720
msgid "The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more information about what these modes mean, see the documentation for :func:`os.chmod`."
msgstr ""

#: ../../topics/http/file-uploads.txt:155
# effd9f874d95476883614149811dd7ef
msgid "If this isn't given or is ``None``, you'll get operating-system dependent behavior. On most platforms, temporary files will have a mode of ``0600``, and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../topics/http/file-uploads.txt:162
# 2c5a1a9ed5ec4344a9b800b9ad133ec1
msgid "If you're not familiar with file modes, please note that the leading ``0`` is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use ``644``, you'll get totally incorrect behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:167
# 83fab6b257a244dca99c3769e276c8ec
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../topics/http/file-uploads.txt:170
# 84755a0774a44092a5185a02476b2035
msgid "The actual handlers for uploaded files. Changing this setting allows complete customization -- even replacement -- of Django's upload process. See `upload handlers`_, below, for details."
msgstr ""

#: ../../topics/http/file-uploads.txt:174
# 7c194b9a138f4422bac74f07c79c8313
msgid "Defaults to::"
msgstr ""

#: ../../topics/http/file-uploads.txt:179
# 938cc69b101f46338293ef6d396805f0
msgid "Which means \"try to upload to memory first, then fall back to temporary files.\""
msgstr ""

#: ../../topics/http/file-uploads.txt:183
# b1bea80954984e3a9e6429a365ef44d5
msgid "``UploadedFile`` objects"
msgstr ""

#: ../../topics/http/file-uploads.txt:185
# 9595edb6db3c4742aba7599bbc69cbe4
msgid "In addition to those inherited from :class:`File`, all ``UploadedFile`` objects define the following methods/attributes:"
msgstr ""

#: ../../topics/http/file-uploads.txt:190
# 6bf17f2a3f3b43ca8be4d16fde50b3d1
msgid "The content-type header uploaded with the file (e.g. :mimetype:`text/plain` or :mimetype:`application/pdf`). Like any data supplied by the user, you shouldn't trust that the uploaded file is actually this type. You'll still need to validate that the file contains the content that the content-type header claims -- \"trust but verify.\""
msgstr ""

#: ../../topics/http/file-uploads.txt:198
# e6f9cddaca504700864f1c4701fc7428
msgid "For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

#: ../../topics/http/file-uploads.txt:203
# 7017b0f19fba4ca2940a32f47f0a268a
msgid "Only files uploaded onto disk will have this method; it returns the full path to the temporary uploaded file."
msgstr ""

#: ../../topics/http/file-uploads.txt:208
# e4507353012f409dad75f9412e6890ca
msgid "Like regular Python files, you can read the file line-by-line simply by iterating over the uploaded file:"
msgstr ""

#: ../../topics/http/file-uploads.txt:216
# 03e81659bbb048d18962f888106d1245
msgid "However, *unlike* standard Python files, :class:`UploadedFile` only understands ``\\n`` (also known as \"Unix-style\") line endings. If you know that you need to handle uploaded files with different line endings, you'll need to do so in your view."
msgstr ""

#: ../../topics/http/file-uploads.txt:222
# fb9a4af3fe324179b5b2936f34b8d510
msgid "Upload Handlers"
msgstr ""

#: ../../topics/http/file-uploads.txt:224
# 27231102ad89488db571d7483434bf1d
msgid "When a user uploads a file, Django passes off the file data to an *upload handler* -- a small class that handles file data as it gets uploaded. Upload handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` setting, which defaults to::"
msgstr ""

#: ../../topics/http/file-uploads.txt:232
# 318b28d1fccf43759f30caf7bbd52aed
msgid "Together the ``MemoryFileUploadHandler`` and ``TemporaryFileUploadHandler`` provide Django's default file upload behavior of reading small files into memory and large ones onto disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:236
# 21b72d743cf4412f82fe8a04e21687c2
msgid "You can write custom handlers that customize how Django handles files. You could, for example, use custom handlers to enforce user-level quotas, compress data on the fly, render progress bars, and even send data to another storage location directly without storing it locally."
msgstr ""

#: ../../topics/http/file-uploads.txt:244
# b762679ae5b543c79caa5e5ef2150a76
msgid "Modifying upload handlers on the fly"
msgstr ""

#: ../../topics/http/file-uploads.txt:246
# 2dd591a343a84e9caa1e431aa36dd68c
msgid "Sometimes particular views require different upload behavior. In these cases, you can override upload handlers on a per-request basis by modifying ``request.upload_handlers``. By default, this list will contain the upload handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the list as you would any other list."
msgstr ""

#: ../../topics/http/file-uploads.txt:252
# 0948fc35aed141bd94b6693c732c13e0
msgid "For instance, suppose you've written a ``ProgressBarUploadHandler`` that provides feedback on upload progress to some sort of AJAX widget. You'd add this handler to your upload handlers like this::"
msgstr ""

#: ../../topics/http/file-uploads.txt:258
# 9ccce57aa89746748cfb1b55e0c05fb5
msgid "You'd probably want to use ``list.insert()`` in this case (instead of ``append()``) because a progress bar handler would need to run *before* any other handlers. Remember, the upload handlers are processed in order."
msgstr ""

#: ../../topics/http/file-uploads.txt:262
# bacb7f9d231f4052851448f20a0a0134
msgid "If you want to replace the upload handlers completely, you can just assign a new list::"
msgstr ""

#: ../../topics/http/file-uploads.txt:269
# d0415bc14e8644e098ba2c5e852caf60
msgid "You can only modify upload handlers *before* accessing ``request.POST`` or ``request.FILES`` -- it doesn't make sense to change upload handlers after upload handling has already started. If you try to modify ``request.upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` Django will throw an error."
msgstr ""

#: ../../topics/http/file-uploads.txt:276
# 08b4dfa297e84501b5823f327b7fe02c
msgid "Thus, you should always modify uploading handlers as early in your view as possible."
msgstr ""

#: ../../topics/http/file-uploads.txt:279
# f3abd77125fd4d38b7f821c3bd2d5ad8
msgid "Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf.CsrfViewMiddleware` which is enabled by default. This means you will need to use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow you to change the upload handlers.  You will then need to use :func:`~django.views.decorators.csrf.csrf_protect` on the function that actually processes the request.  Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:"
msgstr ""

#: ../../topics/http/file-uploads.txt:304
# 512475d9028f44a0a41fa7374f123f9f
msgid "Writing custom upload handlers"
msgstr ""

#: ../../topics/http/file-uploads.txt:306
# 82696954476b4273ab7ddabdd310a743
msgid "All file upload handlers should be subclasses of ``django.core.files.uploadhandler.FileUploadHandler``. You can define upload handlers wherever you wish."
msgstr ""

#: ../../topics/http/file-uploads.txt:311
# 39447de3630c401f9b8a68100fa8c23e
msgid "Required methods"
msgstr ""

#: ../../topics/http/file-uploads.txt:313
# 4e82185580d4470faa98bac562aa15e1
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

#: ../../topics/http/file-uploads.txt:316
# f19da0e014a74d0c8ea6293b7a04d32b
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

#: ../../topics/http/file-uploads.txt:318
# a5b633bf38b94ba0a47ab0b0fc4b15c7
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

#: ../../topics/http/file-uploads.txt:320
# db365c9bb83b4670aee93dac928e5d65
msgid "``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

#: ../../topics/http/file-uploads.txt:323
# fa6677428c384e119693ae9fd83b4c4e
msgid "The data you return will get fed into the subsequent upload handlers' ``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" for other handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:327
# 3399d32991de49b6a7534da64664b37a
msgid "Return ``None`` from ``receive_data_chunk`` to sort-circuit remaining upload handlers from getting this chunk.. This is useful if you're storing the uploaded data yourself and don't want future handlers to store a copy of the data."
msgstr ""

#: ../../topics/http/file-uploads.txt:332
# 0320e444034d45e2a267a943710fcea4
msgid "If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will abort or the file will be completely skipped."
msgstr ""

#: ../../topics/http/file-uploads.txt:336
# 3f8f8d6edd5748c8807118737fd2aaef
msgid "Called when a file has finished uploading."
msgstr ""

#: ../../topics/http/file-uploads.txt:338
# 5f29b61cee3c49d8890143129d423236
msgid "The handler should return an ``UploadedFile`` object that will be stored in ``request.FILES``. Handlers may also return ``None`` to indicate that the ``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:343
# 2d4578e4eb854e7692cd72dec12e8181
msgid "Optional methods"
msgstr ""

#: ../../topics/http/file-uploads.txt:345
# 40018c17473d4552a365349c43d8a7aa
msgid "Custom upload handlers may also define any of the following optional methods or attributes:"
msgstr ""

#: ../../topics/http/file-uploads.txt:349
# 6a877760d625463a9aa421658420ba99
msgid "Size, in bytes, of the \"chunks\" Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

#: ../../topics/http/file-uploads.txt:353
# 178b5c2ce0f0474084376bc01f7e669d
msgid "For maximum performance the chunk sizes should be divisible by ``4`` and should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler."
msgstr ""

#: ../../topics/http/file-uploads.txt:358
# 559d26c2f6354a5485d91108ae41c370
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

#: ../../topics/http/file-uploads.txt:361
# 00a14b7304c14768be4e6a90baf3f3c8
msgid "Callback signaling that a new file upload is starting. This is called before any data has been fed to any upload handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:364
# 8ff3efa0546b4377a970ec2c6b507f3a
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

#: ../../topics/http/file-uploads.txt:366
# ec8bf7cde65b4ca6a9b2af0f8a2f1e0a
msgid "``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

#: ../../topics/http/file-uploads.txt:368
# 0d8c80dfeaec4eb08fe80f5abefef1c6
msgid "``content_type`` is the MIME type provided by the browser -- E.g. ``'image/jpeg'``."
msgstr ""

#: ../../topics/http/file-uploads.txt:371
# a32457c7a78d40deb858e0c2b06952a0
msgid "``content_length`` is the length of the image given by the browser. Sometimes this won't be provided and will be ``None``."
msgstr ""

#: ../../topics/http/file-uploads.txt:374
# e2878b3d60a74b0fa4ca6d5d2219493a
msgid "``charset`` is the character set (i.e. ``utf8``) given by the browser. Like ``content_length``, this sometimes won't be provided."
msgstr ""

#: ../../topics/http/file-uploads.txt:377
# d3eac8c56a6d411193eff5f5d8b60cb5
msgid "This method may raise a ``StopFutureHandlers`` exception to prevent future handlers from handling this file."
msgstr ""

#: ../../topics/http/file-uploads.txt:381
# 2e16efcbbfcf4b0e82d9c413e23fa6f6
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

#: ../../topics/http/file-uploads.txt:384
# 788cb5b7ea2546a5abc43e93330e9649
msgid "Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

#: ../../topics/http/file-uploads.txt:387
# 0cfa7ebb26d940a1a2f5438ff1f3d5ab
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

#: ../../topics/http/file-uploads.txt:389
# 08dc5eb201cb4a72b72ae59ac6560cf1
msgid "``META`` is the same object as ``request.META``."
msgstr ""

#: ../../topics/http/file-uploads.txt:391
# d6ca742a924a41b49e41c301a22761bc
msgid "``content_length`` is the length of the data in ``input_data``. Don't read more than ``content_length`` bytes from ``input_data``."
msgstr ""

#: ../../topics/http/file-uploads.txt:394
# fdcad0690c564f2e81d940d4663971b0
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

#: ../../topics/http/file-uploads.txt:396
# 70cd9915cab04c63a1330372c26584b8
msgid "``encoding`` is the encoding of the request."
msgstr ""

#: ../../topics/http/file-uploads.txt:398
# 71cfa781a48643549a7e17ce937e9eed
msgid "Return ``None`` if you want upload handling to continue, or a tuple of ``(POST, FILES)`` if you want to return the new data structures suitable for the request directly."
msgstr ""

#: ../../topics/http/generic-views.txt:5
# 5965897a20fd408fac6184bcc7dd1f06
msgid "See :doc:`/ref/generic-views`."
msgstr ""

#: ../../topics/http/index.txt:2
# a648d057a57f4fd1aca34e3fef2bdc53
msgid "Handling HTTP requests"
msgstr ""

#: ../../topics/http/index.txt:4
# f9833500ceed42ea85e92bfdbf931bae
msgid "Information on handling HTTP requests in Django:"
msgstr ""

#: ../../topics/http/middleware.txt:3
# ed9e58f7fdf54f999c493c5a5e37782f
msgid "Middleware"
msgstr ""

#: ../../topics/http/middleware.txt:5
# 19dd1df3a68c4ae795758b72dfe0615c
msgid "Middleware is a framework of hooks into Django's request/response processing. It's a light, low-level \"plugin\" system for globally altering Django's input and/or output."
msgstr ""

#: ../../topics/http/middleware.txt:9
# ade9729e10474fcc966882caad5e9d87
msgid "Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, ``XViewMiddleware``, that adds an ``\"X-View\"`` HTTP header to every response to a ``HEAD`` request."
msgstr ""

#: ../../topics/http/middleware.txt:13
# b54aa05ced81490082e303be269832a6
msgid "This document explains how middleware works, how you activate middleware, and how to write your own middleware. Django ships with some built-in middleware you can use right out of the box; they're documented in the :doc:`built-in middleware reference </ref/middleware>`."
msgstr ""

#: ../../topics/http/middleware.txt:19
# badbee32417d45b3a15b5cf6faac4538
msgid "Activating middleware"
msgstr ""

#: ../../topics/http/middleware.txt:21
# a7b4a188486d4356bbc21e46ea217575
msgid "To activate a middleware component, add it to the :setting:`MIDDLEWARE_CLASSES` list in your Django settings. In :setting:`MIDDLEWARE_CLASSES`, each middleware component is represented by a string: the full Python path to the middleware's class name. For example, here's the default :setting:`MIDDLEWARE_CLASSES` created by :djadmin:`django-admin.py startproject <startproject>`::"
msgstr ""

#: ../../topics/http/middleware.txt:35
# 21b24379c24c4c868e78009639da11df
msgid "During the request phases (:meth:`process_request` and :meth:`process_view` middleware), Django applies middleware in the order it's defined in :setting:`MIDDLEWARE_CLASSES`, top-down. During the response phases (:meth:`process_response` and :meth:`process_exception` middleware), the classes are applied in reverse order, from the bottom up. You can think of it like an onion: each middleware class is a \"layer\" that wraps the view:"
msgstr ""

#: ../../topics/http/middleware.txt:47
# 570c4a83d44941738648c5598f1b86f0
msgid "A Django installation doesn't require any middleware -- e.g., :setting:`MIDDLEWARE_CLASSES` can be empty, if you'd like -- but it's strongly suggested that you at least use :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../topics/http/middleware.txt:53
# 0fc96b053e234c7ea5dd2faa653a1f15
msgid "Writing your own middleware"
msgstr ""

#: ../../topics/http/middleware.txt:55
# 5fe040582b8e49aaa541b2db3bb5984d
msgid "Writing your own middleware is easy. Each middleware component is a single Python class that defines one or more of the following methods:"
msgstr ""

#: ../../topics/http/middleware.txt:61
# 42b48e94e07a4c9aac8763e7a7951521
msgid "``process_request``"
msgstr ""

#: ../../topics/http/middleware.txt:65
# 490f8ee195a1425b85f8e6bfc8566d78
msgid "``request`` is an :class:`~django.http.HttpRequest` object. This method is called on each request, before Django decides which view to execute."
msgstr ""

#: ../../topics/http/middleware.txt:68
# 4b49376d7eb84c1aa70154ff535dded4
msgid "``process_request()`` should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns ``None``, Django will continue processing this request, executing any other middleware and, then, the appropriate view. If it returns an :class:`~django.http.HttpResponse` object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that :class:`~django.http.HttpResponse`. Response middleware is always called on every response."
msgstr ""

#: ../../topics/http/middleware.txt:79
# a04a6612f6674c0e93af55698ff599a1
msgid "``process_view``"
msgstr ""

#: ../../topics/http/middleware.txt:83
# 88541672ca934157b356f3e82860c65b
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is the Python function that Django is about to use. (It's the actual function object, not the name of the function as a string.) ``view_args`` is a list of positional arguments that will be passed to the view, and ``view_kwargs`` is a dictionary of keyword arguments that will be passed to the view. Neither ``view_args`` nor ``view_kwargs`` include the first view argument (``request``)."
msgstr ""

#: ../../topics/http/middleware.txt:91
# f3445a3e55f64b1190c9a83d962cf939
msgid "``process_view()`` is called just before Django calls the view. It should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns ``None``, Django will continue processing this request, executing any other ``process_view()`` middleware and, then, the appropriate view. If it returns an :class:`~django.http.HttpResponse` object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that :class:`~django.http.HttpResponse`. Response middleware is always called on every response."
msgstr ""

#: ../../topics/http/middleware.txt:102
# 0846c49950594cfba11b64215f19e73d
msgid "Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from ``process_request`` or ``process_view`` will prevent any view running after the middleware from being able to :ref:`modify the upload handlers for the request <modifying_upload_handlers_on_the_fly>`, and should normally be avoided."
msgstr ""

#: ../../topics/http/middleware.txt:109
# 546043d7f7ad430b95c0afb83ca422f5
msgid "The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be considered an exception, as it provides the :func:`~django.views.decorators.csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` decorators which allow views to explicitly control at what point the CSRF validation should occur."
msgstr ""

#: ../../topics/http/middleware.txt:118
# 1ad04b3737cb4ffdacf54cf594f09bbe
msgid "``process_template_response``"
msgstr ""

#: ../../topics/http/middleware.txt:124
# f52c438d17474820ab5666914f0aeab0
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is a subclass of :class:`~django.template.response.SimpleTemplateResponse` (e.g. :class:`~django.template.response.TemplateResponse`) or any response object that implements a ``render`` method."
msgstr ""

#: ../../topics/http/middleware.txt:129
# a511903e0d00427d95c634063e1006bd
msgid "``process_template_response()`` must return a response object that implements a ``render`` method. It could alter the given ``response`` by changing ``response.template_name`` and ``response.context_data``, or it could create and return a brand-new :class:`~django.template.response.SimpleTemplateResponse` or equivalent."
msgstr ""

#: ../../topics/http/middleware.txt:135
# b0ffc64683ef4db1a6c752097aaf926f
msgid "``process_template_response()`` will only be called if the response instance has a ``render()`` method, indicating that it is a :class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

#: ../../topics/http/middleware.txt:139
# fdeecb7da220470d80fb42edf0a639f2
msgid "You don't need to explicitly render responses -- responses will be automatically rendered once all template response middleware has been called."
msgstr ""

#: ../../topics/http/middleware.txt:143
# 6bfd8652a5a64a7f80dc6c093041fa95
msgid "Middleware are run in reverse order during the response phase, which includes process_template_response."
msgstr ""

#: ../../topics/http/middleware.txt:149
# d25a845ba2464bde92e3da02769dfaf2
msgid "``process_response``"
msgstr ""

#: ../../topics/http/middleware.txt:153
# 345c26fe14524080bf704cf15423b764
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is the :class:`~django.http.HttpResponse` object returned by a Django view."
msgstr ""

#: ../../topics/http/middleware.txt:156
# 63b0471743c5480bbc0a0897936eb191
msgid "``process_response()`` must return an :class:`~django.http.HttpResponse` object. It could alter the given ``response``, or it could create and return a brand-new :class:`~django.http.HttpResponse`."
msgstr ""

#: ../../topics/http/middleware.txt:160
# fb4e4bed5c5d4aca831bd9b5505d09ba
msgid "Unlike the ``process_request()`` and ``process_view()`` methods, the ``process_response()`` method is always called, even if the ``process_request()`` and ``process_view()`` methods of the same middleware class were skipped because an earlier middleware method returned an :class:`~django.http.HttpResponse` (this means that your ``process_response()`` method cannot rely on setup done in ``process_request()``, for example). In addition, during the response phase the classes are applied in reverse order, from the bottom up. This means classes defined at the end of :setting:`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

#: ../../topics/http/middleware.txt:173
# 2c9e2ac5ca554f83aa0d40e4448e9ced
msgid "``process_exception``"
msgstr ""

#: ../../topics/http/middleware.txt:177
# 20b9cb0a5db54e34846e2128d2881776
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is an ``Exception`` object raised by the view function."
msgstr ""

#: ../../topics/http/middleware.txt:180
# 2e84f6604a2040cbbf2164cb53f60f17
msgid "Django calls ``process_exception()`` when a view raises an exception. ``process_exception()`` should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns an :class:`~django.http.HttpResponse` object, the response will be returned to the browser. Otherwise, default exception handling kicks in."
msgstr ""

#: ../../topics/http/middleware.txt:186
# 801f5dfa464b43308321b6dca6d25571
msgid "Again, middleware are run in reverse order during the response phase, which includes ``process_exception``. If an exception middleware returns a response, the middleware classes above that middleware will not be called at all."
msgstr ""

#: ../../topics/http/middleware.txt:191
# 8cae54384c424b0f88b10dd68c718f97
msgid "``__init__``"
msgstr ""

#: ../../topics/http/middleware.txt:193
# 9a999a88694a4372bc3098b3c59efe53
msgid "Most middleware classes won't need an initializer since middleware classes are essentially placeholders for the ``process_*`` methods. If you do need some global state you may use ``__init__`` to set up. However, keep in mind a couple of caveats:"
msgstr ""

#: ../../topics/http/middleware.txt:198
# de0f1ee5144b4ccdaebc4914f07801cd
msgid "Django initializes your middleware without any arguments, so you can't define ``__init__`` as requiring any arguments."
msgstr ""

#: ../../topics/http/middleware.txt:201
# ebc2d64b00d3410497d560fc0c590fa1
msgid "Unlike the ``process_*`` methods which get called once per request, ``__init__`` gets called only *once*, when the Web server starts up."
msgstr ""

#: ../../topics/http/middleware.txt:205
# 12755c92805d4f2386d6b25a7b0f0f5e
msgid "Marking middleware as unused"
msgstr ""

#: ../../topics/http/middleware.txt:207
# a87b4a5708fb4dcda5e718123bbc7a66
msgid "It's sometimes useful to determine at run-time whether a piece of middleware should be used. In these cases, your middleware's ``__init__`` method may raise ``django.core.exceptions.MiddlewareNotUsed``. Django will then remove that piece of middleware from the middleware process."
msgstr ""

#: ../../topics/http/middleware.txt:213
# 57403be4cf9e40b49c55efcd62e3c665
msgid "Guidelines"
msgstr ""

#: ../../topics/http/middleware.txt:215
# f4217deca4ba4096a8bc6c1e8cab4a82
msgid "Middleware classes don't have to subclass anything."
msgstr ""

#: ../../topics/http/middleware.txt:217
# 14c72ca8337d48c2913f9f160f7f7494
msgid "The middleware class can live anywhere on your Python path. All Django cares about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to it."
msgstr ""

#: ../../topics/http/middleware.txt:221
# 484768ef02a14fb7aef29063c87a9685
msgid "Feel free to look at :doc:`Django's available middleware </ref/middleware>` for examples."
msgstr ""

#: ../../topics/http/middleware.txt:224
# 520fac54457e41c089ee47a37c7823f8
msgid "If you write a middleware component that you think would be useful to other people, contribute to the community! :doc:`Let us know </internals/contributing/index>`, and we'll consider adding it to Django."
msgstr ""

#: ../../topics/http/sessions.txt:3
# 9582f2c1a9724a9e8da61f8ac034336c
msgid "How to use sessions"
msgstr ""

#: ../../topics/http/sessions.txt:8
# fe3e0bca3d0a4733a02c7931d8d790c6
msgid "Django provides full support for anonymous sessions. The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. It stores data on the server side and abstracts the sending and receiving of cookies. Cookies contain a session ID -- not the data itself (unless you're using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

#: ../../topics/http/sessions.txt:15
# 1e7d912505e7415ea9144c72a01801ec
msgid "Enabling sessions"
msgstr ""

#: ../../topics/http/sessions.txt:17
# acfbb57bcca6420c8e8e2a8e24e2cdd1
msgid "Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

#: ../../topics/http/sessions.txt:19
# ed4af74027f74b8b95e5c57206aa12c2
msgid "To enable session functionality, do the following:"
msgstr ""

#: ../../topics/http/sessions.txt:21
# 025f4fdf81d7417d99f826649806f51c
msgid "Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains ``'django.contrib.sessions.middleware.SessionMiddleware'``. The default ``settings.py`` created by ``django-admin.py startproject`` has ``SessionMiddleware`` activated."
msgstr ""

#: ../../topics/http/sessions.txt:26
# efe66cded1b44273b527736f5726840a
msgid "If you don't want to use sessions, you might as well remove the ``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django.contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a small bit of overhead."
msgstr ""

#: ../../topics/http/sessions.txt:32
# c0fc001964844880b3844f0b17461bdf
msgid "Configuring the session engine"
msgstr ""

#: ../../topics/http/sessions.txt:34
# 90a12dd848114b0ea208e3b3e814d60e
msgid "By default, Django stores sessions in your database (using the model ``django.contrib.sessions.models.Session``). Though this is convenient, in some setups it's faster to store session data elsewhere, so Django can be configured to store session data on your filesystem or in your cache."
msgstr ""

#: ../../topics/http/sessions.txt:40
# 88be10befc8041bd8999e061bbaeda9b
msgid "Using database-backed sessions"
msgstr ""

#: ../../topics/http/sessions.txt:42
# 862d7ecdbd68446a9acc24a70ddb7bd4
msgid "If you want to use a database-backed session, you need to add ``'django.contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../topics/http/sessions.txt:45
# c5fe6f4c64454295a99005252c71920b
msgid "Once you have configured your installation, run ``manage.py syncdb`` to install the single database table that stores session data."
msgstr ""

#: ../../topics/http/sessions.txt:49
# 221d413854d34feeb053eea6605eca44
msgid "Using cached sessions"
msgstr ""

#: ../../topics/http/sessions.txt:51
# 6b71b403991f4794aea8afb50d75dd61
msgid "For better performance, you may want to use a cache-based session backend."
msgstr ""

#: ../../topics/http/sessions.txt:53
# 46c1581ad1e94e0b8a16b672c4dd3ecd
msgid "To store session data using Django's cache system, you'll first need to make sure you've configured your cache; see the :doc:`cache documentation </topics/cache>` for details."
msgstr ""

#: ../../topics/http/sessions.txt:59
# 1eafacc543bb424db87260aeaf433bf4
msgid "You should only use cache-based sessions if you're using the Memcached cache backend. The local-memory cache backend doesn't retain data long enough to be a good choice, and it'll be faster to use file or database sessions directly instead of sending everything through the file or database cache backends."
msgstr ""

#: ../../topics/http/sessions.txt:65
# 828c743c0d4d4ba1abeb53a29fd91df9
msgid "Once your cache is configured, you've got two choices for how to store data in the cache:"
msgstr ""

#: ../../topics/http/sessions.txt:68
# f2958b9833c84e4c88ce1c3d625d8f68
msgid "Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache\"`` for a simple caching session store. Session data will be stored directly your cache. However, session data may not be persistent: cached data can be evicted if the cache fills up or if the cache server is restarted."
msgstr ""

#: ../../topics/http/sessions.txt:74
# 275d5bb1ea8c4422af844931dd8d8d57
msgid "For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- every write to the cache will also be written to the database. Session reads only use the database if the data is not already in the cache."
msgstr ""

#: ../../topics/http/sessions.txt:80
# 0de21a629577432b902b831a9851f54e
msgid "Both session stores are quite fast, but the simple cache is faster because it disregards persistence. In most cases, the ``cached_db`` backend will be fast enough, but if you need that last bit of performance, and are willing to let session data be expunged from time to time, the ``cache`` backend is for you."
msgstr ""

#: ../../topics/http/sessions.txt:85
# 83f1d940d0094807b4cea667c42808d2
msgid "If you use the ``cached_db`` session backend, you also need to follow the configuration instructions for the `using database-backed sessions`_."
msgstr ""

#: ../../topics/http/sessions.txt:89
# 05a5422f1ae3404eb373ce33164e1463
msgid "Using file-based sessions"
msgstr ""

#: ../../topics/http/sessions.txt:91
# f32360c56a544e6b916a7368c24853db
msgid "To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``\"django.contrib.sessions.backends.file\"``."
msgstr ""

#: ../../topics/http/sessions.txt:94
# 0fd5e4776f8c45dca0adf40aa602e50d
msgid "You might also want to set the :setting:`SESSION_FILE_PATH` setting (which defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to control where Django stores session files. Be sure to check that your Web server has permissions to read and write to this location."
msgstr ""

#: ../../topics/http/sessions.txt:102
# b9900a602c2b46a2ba017a36a67835b3
msgid "Using cookie-based sessions"
msgstr ""

#: ../../topics/http/sessions.txt:106
# 40aa578ac3c14088a7c469b5e18cb39d
msgid "To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to ``\"django.contrib.sessions.backends.signed_cookies\"``. The session data will be stored using Django's tools for :doc:`cryptographic signing </topics/signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

#: ../../topics/http/sessions.txt:113
# 70f6a7fe260843988cc623aa7eca4039
msgid "It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting ``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

#: ../../topics/http/sessions.txt:118
# 09b1fd3ab6554295a2ed9f5049934a32
msgid "**The session data is signed but not encrypted**"
msgstr ""

#: ../../topics/http/sessions.txt:120
# 36839af380fb4875920b09f4cc1a67ad
msgid "When using the cookies backend the session data can be read by the client."
msgstr ""

#: ../../topics/http/sessions.txt:122
# ac54900a23ef45f981ccfa696ec8c4e9
msgid "A MAC (Message Authentication Code) is used to protect the data against changes by the client, so that the session data will be invalidated when being tampered with. The same invalidation happens if the client storing the cookie (e.g. your user's browser) can't store all of the session cookie and drops data. Even though Django compresses the data, it's still entirely possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

#: ../../topics/http/sessions.txt:129
# 982f0ec776d64e0ba6c0393d45504f28
msgid "**No freshness guarantee**"
msgstr ""

#: ../../topics/http/sessions.txt:131
# d37f96f186d54be9a70a00b10f827318
msgid "Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to `replay attacks`_. Cookies will only be detected as 'stale' if they are older than your :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../topics/http/sessions.txt:140
# 81bf55322f8540dda91db4e3b26ec422
msgid "**Performance**"
msgstr ""

#: ../../topics/http/sessions.txt:142
# ea8318acc30643ebb203a4be6c5db919
msgid "Finally, the size of a cookie can have an impact on the `speed of your site`_."
msgstr ""

#: ../../topics/http/sessions.txt:149
# 3aadceaffdab4166a0918737f92d5643
msgid "Using sessions in views"
msgstr ""

#: ../../topics/http/sessions.txt:151
# 9636496e38da4cd885963de6e8b9788b
msgid "When ``SessionMiddleware`` is activated, each :class:`~django.http.HttpRequest` object -- the first argument to any Django view function -- will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

#: ../../topics/http/sessions.txt:155
# 4350bca9d34c4015b423fd6409954b56
msgid "You can read it and write to ``request.session`` at any point in your view. You can edit it multiple times."
msgstr ""

#: ../../topics/http/sessions.txt:160
# 93455fff74bf4c6aa4c36fdb422d0417
msgid "This is the base class for all session objects. It has the following standard dictionary methods:"
msgstr ""

#: ../../topics/http/sessions.txt:165
# 4ed3d48879c24373be60a94d6fca2cae
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

#: ../../topics/http/sessions.txt:169
# ab1fa0582fe6425299ac345a159710ba
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

#: ../../topics/http/sessions.txt:173
# a494d6c7b417484c8db569e2b87355b3
msgid "Example: ``del request.session['fav_color']``. This raises ``KeyError`` if the given ``key`` isn't already in the session."
msgstr ""

#: ../../topics/http/sessions.txt:178
# 13819d831f6d4f98a78cf67789793320
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

#: ../../topics/http/sessions.txt:182
# 66ce17cbc2e74a1da697cdbfeab8f845
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

#: ../../topics/http/sessions.txt:186
# bc185aa225694ac9873d39571dd4e612
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

#: ../../topics/http/sessions.txt:196
# 633d611d5c014a5bb5ddd41a92c06512
msgid "It also has these methods:"
msgstr ""

#: ../../topics/http/sessions.txt:200
# 59601109e38d40a58bcb22b3fe2919f4
msgid "Delete the current session data from the session and regenerate the session key value that is sent back to the user in the cookie. This is used if you want to ensure that the previous session data can't be accessed again from the user's browser (for example, the :func:`django.contrib.auth.logout()` function calls it)."
msgstr ""

#: ../../topics/http/sessions.txt:208
# 5197eab31b64459fb843a62054799921
msgid "Sets a test cookie to determine whether the user's browser supports cookies. Due to the way cookies work, you won't be able to test this until the user's next page request. See `Setting test cookies`_ below for more information."
msgstr ""

#: ../../topics/http/sessions.txt:215
# 30afd02045c443899b564190d27089ae
msgid "Returns either ``True`` or ``False``, depending on whether the user's browser accepted the test cookie. Due to the way cookies work, you'll have to call ``set_test_cookie()`` on a previous, separate page request. See `Setting test cookies`_ below for more information."
msgstr ""

#: ../../topics/http/sessions.txt:222
# 0705625a341f4af8b9f06dce9100c50f
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

#: ../../topics/http/sessions.txt:226
# 4d79800a5d714223a4cce288ab8f3dc7
msgid "Sets the expiration time for the session. You can pass a number of different values:"
msgstr ""

#: ../../topics/http/sessions.txt:229
# 081980d7885e48c8925d73b80c5af4b8
msgid "If ``value`` is an integer, the session will expire after that many seconds of inactivity. For example, calling ``request.session.set_expiry(300)`` would make the session expire in 5 minutes."
msgstr ""

#: ../../topics/http/sessions.txt:234
# a720593161c540dc8c554d3f901245cd
msgid "If ``value`` is a ``datetime`` or ``timedelta`` object, the session will expire at that specific date/time."
msgstr ""

#: ../../topics/http/sessions.txt:237
# f283701941c44f9fada321ddddb2f485
msgid "If ``value`` is ``0``, the user's session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../topics/http/sessions.txt:240
# 5553fb13464d4966924cb53f62a83b3a
msgid "If ``value`` is ``None``, the session reverts to using the global session expiry policy."
msgstr ""

#: ../../topics/http/sessions.txt:243
# a0db69b37ac941e1820b15672d9820f5
msgid "Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last time the session was *modified*."
msgstr ""

#: ../../topics/http/sessions.txt:249
# 60375d51306b4105bb57e5347720b9a2
msgid "Returns the number of seconds until this session expires. For sessions with no custom expiration (or those set to expire at browser close), this will equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../topics/http/sessions.txt:255
# 91a444105b2c4bdaae0f6b24e0c7eb64
msgid "Returns the date this session will expire. For sessions with no custom expiration (or those set to expire at browser close), this will equal the date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

#: ../../topics/http/sessions.txt:261
# c07f0d2aa4c84f4b810757a4245ab120
msgid "Returns either ``True`` or ``False``, depending on whether the user's session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../topics/http/sessions.txt:265
# 502bf9a9b7df4d32a0736323879c47e4
msgid "Session object guidelines"
msgstr ""

#: ../../topics/http/sessions.txt:267
# b727490b6567464da6d734e63e586de1
msgid "Use normal Python strings as dictionary keys on ``request.session``. This is more of a convention than a hard-and-fast rule."
msgstr ""

#: ../../topics/http/sessions.txt:270
# 1a16bce10a9a4b09b27bd0581dfd3488
msgid "Session dictionary keys that begin with an underscore are reserved for internal use by Django."
msgstr ""

#: ../../topics/http/sessions.txt:273
# 6b65e5796976408c9cc39ea82f481b58
msgid "Don't override ``request.session`` with a new object, and don't access or set its attributes. Use it like a Python dictionary."
msgstr ""

#: ../../topics/http/sessions.txt:279
# 4694bd8769634ffebfa69aede69cec17
msgid "This simplistic view sets a ``has_commented`` variable to ``True`` after a user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

#: ../../topics/http/sessions.txt:290
# ae872ba4019f49e18fcac4a994b619f3
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

#: ../../topics/http/sessions.txt:300
# 45cafbb6211c45f59ddc35a89134ab55
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

#: ../../topics/http/sessions.txt:309
# 9dcc3e26ed3f4c6e98cdfbf0e2ffba44
msgid "The standard :meth:`django.contrib.auth.logout` function actually does a bit more than this to prevent inadvertent data leakage. It calls the :meth:`~backends.base.SessionBase.flush` method of ``request.session``. We are using this example as a demonstration of how to work with session objects, not as a full ``logout()`` implementation."
msgstr ""

#: ../../topics/http/sessions.txt:316
# f3c6def186d246b6b238db1ff9bfe916
msgid "Setting test cookies"
msgstr ""

#: ../../topics/http/sessions.txt:318
# 15c62020eb324649ab663fdbcb8ae8c8
msgid "As a convenience, Django provides an easy way to test whether the user's browser accepts cookies. Just call the :meth:`~backends.base.SessionBase.set_test_cookie` method of ``request.session`` in a view, and call :meth:`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not in the same view call."
msgstr ""

#: ../../topics/http/sessions.txt:325
# a6232ddf1dee4edc86bde3741245e39a
msgid "This awkward split between ``set_test_cookie()`` and ``test_cookie_worked()`` is necessary due to the way cookies work. When you set a cookie, you can't actually tell whether a browser accepted it until the browser's next request."
msgstr ""

#: ../../topics/http/sessions.txt:329
# eaf2f86c4dea46b599770b5d323a3b1e
msgid "It's good practice to use :meth:`~backends.base.SessionBase.delete_test_cookie()` to clean up after yourself. Do this after you've verified that the test cookie worked."
msgstr ""

#: ../../topics/http/sessions.txt:333
# c79b06435c11456c808300d534c72838
msgid "Here's a typical usage example::"
msgstr ""

#: ../../topics/http/sessions.txt:346
# 8d476052e1314400bce5a624eebba7b8
msgid "Using sessions out of views"
msgstr ""

#: ../../topics/http/sessions.txt:348
# 6acd7e47cf514ccfb1f32c6a8070adf1
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

#: ../../topics/http/sessions.txt:358
# 7d60362dcdf3434db86bf4d2e1c9edd5
msgid "If ``session_key`` isn't provided, one will be generated automatically::"
msgstr ""

#: ../../topics/http/sessions.txt:366
# 5cbe31aa8a9647e6ae7d9512886f85ec
msgid "If you're using the ``django.contrib.sessions.backends.db`` backend, each session is just a normal Django model. The ``Session`` model is defined in ``django/contrib/sessions/models.py``. Because it's a normal model, you can access sessions using the normal Django database API::"
msgstr ""

#: ../../topics/http/sessions.txt:376
# fa8f747c9c46401fb33101bde2aa5d9e
msgid "Note that you'll need to call ``get_decoded()`` to get the session dictionary. This is necessary because the dictionary is stored in an encoded format::"
msgstr ""

#: ../../topics/http/sessions.txt:385
# c24b58044f2f4266aaf9337cd43348b6
msgid "When sessions are saved"
msgstr ""

#: ../../topics/http/sessions.txt:387
# 1cb45d94f1f54d10b545dbf88f4e5f27
msgid "By default, Django only saves to the session database when the session has been modified -- that is if any of its dictionary values have been assigned or deleted::"
msgstr ""

#: ../../topics/http/sessions.txt:404
# 763529924e23459aa133c3bea79da84c
msgid "In the last case of the above example, we can tell the session object explicitly that it has been modified by setting the ``modified`` attribute on the session object::"
msgstr ""

#: ../../topics/http/sessions.txt:410
# f69d146736ce45acb029f6d0e6b98ec3
msgid "To change this default behavior, set the :setting:`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, Django will save the session to the database on every single request."
msgstr ""

#: ../../topics/http/sessions.txt:414
# b49cd722bd5a4cff914086f02a6c66f7
msgid "Note that the session cookie is only sent when a session has been created or modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session cookie will be sent on every request."
msgstr ""

#: ../../topics/http/sessions.txt:418
# 039f5f9d7e1f484d9ac0882b5b75e395
msgid "Similarly, the ``expires`` part of a session cookie is updated each time the session cookie is sent."
msgstr ""

#: ../../topics/http/sessions.txt:422
# c30c031fd1704c9eade8a2ae87e84658
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

#: ../../topics/http/sessions.txt:424
# 17034dd324234aa684e4dd60ca66b6ce
msgid "You can control whether the session framework uses browser-length sessions vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting."
msgstr ""

#: ../../topics/http/sessions.txt:428
# b2b84342b6624230aaef1ff7022f16f5
msgid "By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, which means session cookies will be stored in users' browsers for as long as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have to log in every time they open a browser."
msgstr ""

#: ../../topics/http/sessions.txt:433
# 3f34f1abdd0e4c60bd6fcde4c3c7cc0a
msgid "If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django will use browser-length cookies -- cookies that expire as soon as the user closes his or her browser. Use this if you want people to have to log in every time they open a browser."
msgstr ""

#: ../../topics/http/sessions.txt:438
# 906021f86c094ca880ef71cee2530a36
msgid "This setting is a global default and can be overwritten at a per-session level by explicitly calling the :meth:`~backends.base.SessionBase.set_expiry` method of ``request.session`` as described above in `using sessions in views`_."
msgstr ""

#: ../../topics/http/sessions.txt:443
# e9c3bfccb867469eb1b5432f0a97ba0f
msgid "Clearing the session table"
msgstr ""

#: ../../topics/http/sessions.txt:445
# 7a936653e38847cbb5467d93c36ed6ef
msgid "If you're using the database backend, note that session data can accumulate in the ``django_session`` database table and Django does *not* provide automatic purging. Therefore, it's your job to purge expired sessions on a regular basis."
msgstr ""

#: ../../topics/http/sessions.txt:449
# 2e80293b4c0346c8ab8483dce5543d4d
msgid "To understand this problem, consider what happens when a user uses a session. When a user logs in, Django adds a row to the ``django_session`` database table. Django updates this row each time the session data changes. If the user logs out manually, Django deletes the row. But if the user does *not* log out, the row never gets deleted."
msgstr ""

#: ../../topics/http/sessions.txt:455
# b55ecfbd23c14f66ab9b00cdf58ce8b6
msgid "Django provides a sample clean-up script: ``django-admin.py cleanup``. That script deletes any session in the session table whose ``expire_date`` is in the past -- but your application may have different requirements."
msgstr ""

#: ../../topics/http/sessions.txt:460
# f882d7cb3af34148b4e8fa6396eb8268
msgid "Settings"
msgstr ""

#: ../../topics/http/sessions.txt:462
# 53a6320a0cfe4ee1baf19aa8a90df27f
msgid "A few :doc:`Django settings </ref/settings>` give you control over session behavior:"
msgstr ""

#: ../../topics/http/sessions.txt:466
# a126220b5de042eaadc50018c8a17bca
msgid "SESSION_ENGINE"
msgstr ""

#: ../../topics/http/sessions.txt:468
# 878c9ae90b364586a765e79379be708d
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../topics/http/sessions.txt:470
# 2e28a3bd260e44c1875fbcf0581e675b
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

#: ../../topics/http/sessions.txt:472
# abd064e6ebc54eba84cf59dc05e0aca9
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../topics/http/sessions.txt:473
# 50301e802e434a4ab6eee2ef83845a39
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../topics/http/sessions.txt:474
# 10854195684d4f9388e75bcc1fe78ed5
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../topics/http/sessions.txt:475
# 76a20408a4f348b2bd1ac0d39599a9d9
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../topics/http/sessions.txt:476
# e65c19fc4ce246219707dfaef54f8f25
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../topics/http/sessions.txt:478
# 1f490c5b4100442d88d483ffc1436c3d
msgid "See `configuring the session engine`_ for more details."
msgstr ""

#: ../../topics/http/sessions.txt:481
# d630b0b12344456198dbaca2680c66d0
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../topics/http/sessions.txt:483
# a833d0ae9b8e4e61a71c1417dd709dcc
msgid "Default: ``/tmp/``"
msgstr ""

#: ../../topics/http/sessions.txt:485
# cadf255c62a64289866bdb0a3742c8a0
msgid "If you're using file-based session storage, this sets the directory in which Django will store session data."
msgstr ""

#: ../../topics/http/sessions.txt:489
# 76626f5458c04e94935d4bf6e10c0afc
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../topics/http/sessions.txt:491
# 06937b43f07449eca66dc341e795a4c7
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../topics/http/sessions.txt:493
# ab3fd3c2bab248c6ae5f32177d0979a7
msgid "The age of session cookies, in seconds."
msgstr ""

#: ../../topics/http/sessions.txt:496
# d07a7a421ef64ef686e74119c571d6fd
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../topics/http/sessions.txt:498
# 63feea6c00a8436cbc838cccef50618b
msgid "Default: ``None``"
msgstr ""

#: ../../topics/http/sessions.txt:500
# 09fac9ec06284370b1f7f2289656a33b
msgid "The domain to use for session cookies. Set this to a string such as ``\".lawrence.com\"`` (note the leading dot!) for cross-domain cookies, or use ``None`` for a standard domain cookie."
msgstr ""

#: ../../topics/http/sessions.txt:505
# 4417240934414816bb230e92f8da11d7
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../topics/http/sessions.txt:507
# 344ae3d89ad44738a6149cd2b872ac84
msgid "Default: ``True``"
msgstr ""

#: ../../topics/http/sessions.txt:509
# 8a6ef7e7a44e46c5a63df76b12dd2bc1
msgid "Whether to use HTTPOnly flag on the session cookie. If this is set to ``True``, client-side JavaScript will not to be able to access the session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:513
# db3d27f74c164ebfaffea8ea9f4fdd62
msgid "HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not part of the :rfc:`2109` standard for cookies, and it isn't honored consistently by all browsers. However, when it is honored, it can be a useful way to mitigate the risk of client side script accessing the protected cookie data."
msgstr ""

#: ../../topics/http/sessions.txt:522
# a7156caff04b461a9215e7ef05c92097
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../topics/http/sessions.txt:524
# a4ba1bace3154f94b9741f85d5686cfd
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../topics/http/sessions.txt:526
# 6a57e5bd45be4ab1bb74e1450d084b44
msgid "The name of the cookie to use for sessions. This can be whatever you want."
msgstr ""

#: ../../topics/http/sessions.txt:529
# f99ebe2180374e98872ee4f84adc6fc6
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../topics/http/sessions.txt:531
# 6fc9e8bff8d241d7b1b9696ea4bb8004
msgid "Default: ``'/'``"
msgstr ""

#: ../../topics/http/sessions.txt:533
# 01a9f242e847451489dbb365a3699510
msgid "The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path."
msgstr ""

#: ../../topics/http/sessions.txt:536
# e5b03f3766aa471d8bd0bc3d51b27ab2
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:541
# 75f913d2537b431abdfec97299d90992
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../topics/http/sessions.txt:545
# acbaa807af1d4c6b9bf420e288aa03a7
msgid "Whether to use a secure cookie for the session cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../topics/http/sessions.txt:550
# d715e32e8eb64157a029e38fa996e7ea
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../topics/http/sessions.txt:554
# 4cdc787b31e14fc39fce51263377588e
msgid "Whether to expire the session when the user closes his or her browser. See \"Browser-length sessions vs. persistent sessions\" above."
msgstr ""

#: ../../topics/http/sessions.txt:558
# 3da737b33129480f83c44f4861967d07
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../topics/http/sessions.txt:562
# f0f79e79db07427cb098ba50456c8dfc
msgid "Whether to save the session data on every request. If this is ``False`` (default), then the session data will only be saved if it has been modified -- that is, if any of its dictionary values have been assigned or deleted."
msgstr ""

#: ../../topics/http/sessions.txt:569
# 8e2d49e9780a4c8bb4531e71bdd526ff
msgid "Technical details"
msgstr ""

#: ../../topics/http/sessions.txt:571
# eee5fa7548164db5bd0aaf1eb0eea709
msgid "The session dictionary should accept any pickleable Python object. See the :mod:`pickle` module for more information."
msgstr ""

#: ../../topics/http/sessions.txt:574
# 25b77d27f3e64e09a84ff31b3cd8478a
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

#: ../../topics/http/sessions.txt:576
# 6d98da8069dc466fadd6273f21ad2d39
msgid "Django only sends a cookie if it needs to. If you don't set any session data, it won't send a session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:580
# 77a255d10c0849bb9ef6f5d84d10228e
msgid "Session IDs in URLs"
msgstr ""

#: ../../topics/http/sessions.txt:582
# 43aac23703a3491888ccff8a8b4cd3df
msgid "The Django sessions framework is entirely, and solely, cookie-based. It does not fall back to putting session IDs in URLs as a last resort, as PHP does. This is an intentional design decision. Not only does that behavior make URLs ugly, it makes your site vulnerable to session-ID theft via the \"Referer\" header."
msgstr ""

#: ../../topics/http/shortcuts.txt:3
# 68204304238f4d3da5bfc4acdadba695
msgid "Django shortcut functions"
msgstr ""

#: ../../topics/http/shortcuts.txt:11
# a780e1de320945e69f95707296ebe7d3
msgid "The package ``django.shortcuts`` collects helper functions and classes that \"span\" multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience's sake."
msgstr ""

#: ../../topics/http/shortcuts.txt:16
# b9cad1e4b82f4d08a701d41e1ba64545
msgid "``render``"
msgstr ""

#: ../../topics/http/shortcuts.txt:22
# 23907f8d3a9e4b3c9b1dfaae78a2f1cd
msgid "Combines a given template with a given context dictionary and returns an :class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

#: ../../topics/http/shortcuts.txt:25
# 2c4e32ce9cb24551b79870cfd898df8b
msgid ":func:`render()` is the same as a call to :func:`render_to_response()` with a `context_instance` argument that forces the use of a :class:`~django.template.RequestContext`."
msgstr ""

#: ../../topics/http/shortcuts.txt:30
#: ../../topics/http/shortcuts.txt:98
#: ../../topics/http/shortcuts.txt:228
#: ../../topics/http/shortcuts.txt:274
#: ../../topics/pagination.txt:141
# a6dc2d2ae9cf49f79dc4d21b3450feb1
# 4d7d4493f4714101926c381a6f2fbeea
# 98e7fd33fe4e41a7bbc37355686d9bdb
# 689ebb0da9a049cb9b7a9bd766a19a50
# 5815c0bb7c1b458b9f49cdc1fc42e149
msgid "Required arguments"
msgstr ""

#: ../../topics/http/shortcuts.txt:33
# f321dd26f5a64de2986ae964a8249bfe
msgid "The request object used to generate this response."
msgstr ""

#: ../../topics/http/shortcuts.txt:36
# b1c5251d08e9494caafd122d570a9886
msgid "The full name of a template to use or sequence of template names."
msgstr ""

#: ../../topics/http/shortcuts.txt:39
#: ../../topics/http/shortcuts.txt:107
#: ../../topics/pagination.txt:152
# 4665747dc1cb4edab01bfb9720209796
# 0aa18cb473f84a3c9da3508316500823
# cc2964ff553e4060891b0773617c0b25
msgid "Optional arguments"
msgstr ""

#: ../../topics/http/shortcuts.txt:42
#: ../../topics/http/shortcuts.txt:110
# a3f0de4bb8174507a59f1aed6b3547cc
# 5f839a764f9d4e50876ff31acadbd915
msgid "A dictionary of values to add to the template context. By default, this is an empty dictionary. If a value in the dictionary is callable, the view will call it just before rendering the template."
msgstr ""

#: ../../topics/http/shortcuts.txt:47
# d4e79570f9f4491f9541296711886ed1
msgid "The context instance to render the template with. By default, the template will be rendered with a ``RequestContext`` instance (filled with values from ``request`` and ``dictionary``)."
msgstr ""

#: ../../topics/http/shortcuts.txt:52
#: ../../topics/http/shortcuts.txt:127
# 477c4b7f0ef046fc9cf0507e84c1933f
# 8c2783ee847944e1b019a6071a7c4969
msgid "The MIME type to use for the resulting document. Defaults to the value of the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

#: ../../topics/http/shortcuts.txt:56
# 6350047ae1a24748b0308bf50e335039
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

#: ../../topics/http/shortcuts.txt:59
# c8c8dcf7bb194f04a3dc32022db897c5
msgid "A hint indicating which application contains the current view. See the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` for more information."
msgstr ""

#: ../../topics/http/shortcuts.txt:64
#: ../../topics/http/shortcuts.txt:131
#: ../../topics/http/shortcuts.txt:240
#: ../../topics/http/shortcuts.txt:286
#: ../../topics/http/urls.txt:67
#: ../../topics/pagination.txt:13
#: ../../topics/testing.txt:1011
#: ../../topics/testing.txt:1064
# 253d5477109e4c39b140919da4c79062
# f7230298b3db4293ad63dc6381686793
# 02f244adceac4f0280ad09237e388510
# a4b5e6ddf4004f7e918e65364224ce4b
# faf429d802604829922708cf31acfc6e
# fd0209c2489346d4815b1b5879110f0d
# fef868bfe6cb441fbc8025a6ad7b7b95
# fceeaa4cb5da42b0a9c1dcc953e45c58
msgid "Example"
msgstr ""

#: ../../topics/http/shortcuts.txt:66
#: ../../topics/http/shortcuts.txt:133
# 86497cb4d3414fd7a351eb75e37e205a
# 6bdcf3aad3324d169c0b0e520e544c48
msgid "The following example renders the template ``myapp/index.html`` with the MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

#: ../../topics/http/shortcuts.txt:76
#: ../../topics/http/shortcuts.txt:143
#: ../../topics/http/shortcuts.txt:250
#: ../../topics/http/shortcuts.txt:295
# a1b80eefe9d84ed5a5c488f900ac4721
# 0b78ec3d4a984a1eab186a7e77c35c24
# cd0d933d9ddb483ba2bfdada0763f320
# bc191252c8a44832836473b1ba97e341
msgid "This example is equivalent to::"
msgstr ""

#: ../../topics/http/shortcuts.txt:90
# b0eba1c913e245a0a83ec664b7033180
msgid "``render_to_response``"
msgstr ""

#: ../../topics/http/shortcuts.txt:94
# 23b0ec2d272248099cd96b7fedf95e39
msgid "Renders a given template with a given context dictionary and returns an :class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

#: ../../topics/http/shortcuts.txt:101
# 72955336cfe649a69393b6423292c25d
msgid "The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used. See the :ref:`template loader documentation <ref-templates-api-the-python-api>` for more information on how templates are found."
msgstr ""

#: ../../topics/http/shortcuts.txt:115
# 644f0a07dfca402091efe465a4a30341
msgid "The context instance to render the template with. By default, the template will be rendered with a :class:`~django.template.Context` instance (filled with values from ``dictionary``). If you need to use :ref:`context processors <subclassing-context-requestcontext>`, render the template with a :class:`~django.template.RequestContext` instance instead. Your code might look something like this::"
msgstr ""

#: ../../topics/http/shortcuts.txt:156
# 4360993de3aa48dbb1fe33109f084498
msgid "``redirect``"
msgstr ""

#: ../../topics/http/shortcuts.txt:160
# 02dc6bbff3734e5d9146285244ecf72f
msgid "Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL for the arguments passed."
msgstr ""

#: ../../topics/http/shortcuts.txt:163
# 437f6840451442bda56b148f5af729c5
msgid "The arguments could be:"
msgstr ""

#: ../../topics/http/shortcuts.txt:165
# bcd98b9e25604fb08fea35ca8d696b20
msgid "A model: the model's `get_absolute_url()` function will be called."
msgstr ""

#: ../../topics/http/shortcuts.txt:167
# 9840b92b0e3f492cbe163531581556e6
msgid "A view name, possibly with arguments: `urlresolvers.reverse()` will be used to reverse-resolve the name."
msgstr ""

#: ../../topics/http/shortcuts.txt:170
# c82a0e5630494603bd01b7e2eb8a24df
msgid "A URL, which will be used as-is for the redirect location."
msgstr ""

#: ../../topics/http/shortcuts.txt:172
# 1db9ce7a3f534f8bae83a06e8a76c6d0
msgid "By default issues a temporary redirect; pass ``permanent=True`` to issue a permanent redirect"
msgstr ""

#: ../../topics/http/shortcuts.txt:178
# 012d8ed8ef7543858b14474d3d0ba6f7
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

#: ../../topics/http/shortcuts.txt:180
# 7e6b213521184e9db13da6ff7940c92c
msgid "By passing some object; that object's :meth:`~django.db.models.Model.get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

#: ../../topics/http/shortcuts.txt:189
# 786b927282c6486b821d412de2d5759c
msgid "By passing the name of a view and optionally some positional or keyword arguments; the URL will be reverse resolved using the :func:`~django.core.urlresolvers.reverse` method::"
msgstr ""

#: ../../topics/http/shortcuts.txt:197
# 99f2e570e0734ceeb1b8b9a98f908785
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

#: ../../topics/http/shortcuts.txt:203
# 77f7c398264d4deba99535413d51ffbf
msgid "This also works with full URLs::"
msgstr ""

#: ../../topics/http/shortcuts.txt:209
# 994a8a3a8a3c4f6b9b51f5b9c51e30b4
msgid "By default, :func:`redirect` returns a temporary redirect. All of the above forms accept a ``permanent`` argument; if set to ``True`` a permanent redirect will be returned::"
msgstr ""

#: ../../topics/http/shortcuts.txt:219
# 379be01087ef46579cd114b79d413411
msgid "``get_object_or_404``"
msgstr ""

#: ../../topics/http/shortcuts.txt:223
# 7d56e05ef28744c6ade5b36b5dda4f4a
msgid "Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model manager, but it raises :class:`~django.http.Http404` instead of the model's :class:`~django.core.exceptions.DoesNotExist` exception."
msgstr ""

#: ../../topics/http/shortcuts.txt:231
# b3a7a292ded14169af10dd44abb6e194
msgid "A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :class:`~django.db.models.query.QuerySet` instance from which to get the object."
msgstr ""

#: ../../topics/http/shortcuts.txt:236
#: ../../topics/http/shortcuts.txt:282
# 571d4fd9177a4db8af670c0be94a4470
# 9db2c64dcafc4ab8ac961937de36d893
msgid "Lookup parameters, which should be in the format accepted by ``get()`` and ``filter()``."
msgstr ""

#: ../../topics/http/shortcuts.txt:242
# ee63ad4f84884af1acbaf2e99ef39bb2
msgid "The following example gets the object with the primary key of 1 from ``MyModel``::"
msgstr ""

#: ../../topics/http/shortcuts.txt:260
# a681680610e74d30a8ee39b80ffdb2a2
msgid "Note: As with ``get()``, a :class:`~django.core.exceptions.MultipleObjectsReturned` exception will be raised if more than one object is found."
msgstr ""

#: ../../topics/http/shortcuts.txt:265
# 7a3680fbdb3f4a4f8dbb2742c7fe7db2
msgid "``get_list_or_404``"
msgstr ""

#: ../../topics/http/shortcuts.txt:269
# 19df6588b8e14e9b9e202179735cad67
msgid "Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a given model manager, raising :class:`~django.http.Http404` if the resulting list is empty."
msgstr ""

#: ../../topics/http/shortcuts.txt:277
# 5338968f916849a8bb191574ec6afbbe
msgid "A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

#: ../../topics/http/shortcuts.txt:288
# 48e0e98229f0493fb1f8334f0fe8f45f
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

#: ../../topics/http/urls.txt:3
# e5b3042fb5904593b59596dade703ce3
msgid "URL dispatcher"
msgstr ""

#: ../../topics/http/urls.txt:7
# dec19ea5f5a9455faf8f7d06d51ff75b
msgid "A clean, elegant URL scheme is an important detail in a high-quality Web application. Django lets you design URLs however you want, with no framework limitations."
msgstr ""

#: ../../topics/http/urls.txt:11
# 12fabc873c7648a1bf193af06fc81c6c
msgid "There's no ``.php`` or ``.cgi`` required, and certainly none of that ``0,2097,1-1-1928,00`` nonsense."
msgstr ""

#: ../../topics/http/urls.txt:14
# 15be1ca9b9924b02a08224b820351389
msgid "See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, for excellent arguments on why URLs should be clean and usable."
msgstr ""

#: ../../topics/http/urls.txt:22
# cb8d767dcc3a40cd9ba109374a985d1a
msgid "To design URLs for an app, you create a Python module informally called a **URLconf** (URL configuration). This module is pure Python code and is a simple mapping between URL patterns (as simple regular expressions) to Python callback functions (your views)."
msgstr ""

#: ../../topics/http/urls.txt:27
# d4614c991fb143daa04aa1155878e9fe
msgid "This mapping can be as short or as long as needed. It can reference other mappings. And, because it's pure Python code, it can be constructed dynamically."
msgstr ""

#: ../../topics/http/urls.txt:39
# f270e99914ef416a805a5ca30dd5b5b8
msgid "How Django processes a request"
msgstr ""

#: ../../topics/http/urls.txt:41
# 273860e0615945e5a1c7fdbf341ffc6c
msgid "When a user requests a page from your Django-powered site, this is the algorithm the system follows to determine which Python code to execute:"
msgstr ""

#: ../../topics/http/urls.txt:44
# 1eea1189bf374c93a9947ddfdc49480c
msgid "Django determines the root URLconf module to use. Ordinarily, this is the value of the :setting:`ROOT_URLCONF` setting, but if the incoming ``HttpRequest`` object has an attribute called ``urlconf`` (set by middleware :ref:`request processing <request-middleware>`), its value will be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../topics/http/urls.txt:50
# 1aa7d7e4b6c24320b6a0dbdbc3f22189
msgid "Django loads that Python module and looks for the variable ``urlpatterns``. This should be a Python list, in the format returned by the function :func:`django.conf.urls.patterns`."
msgstr ""

#: ../../topics/http/urls.txt:54
# bf240e1dda754694b662d4ef8d18fda5
msgid "Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL."
msgstr ""

#: ../../topics/http/urls.txt:57
# 07dece01e2ea4786a70044f5a75fcd43
msgid "Once one of the regexes matches, Django imports and calls the given view, which is a simple Python function. The view gets passed an :class:`~django.http.HttpRequest` as its first argument and any values captured in the regex as remaining arguments."
msgstr ""

#: ../../topics/http/urls.txt:62
# 20ca5449e3944052b4b9c1f19e3ce8dd
msgid "If no regex matches, or if an exception is raised during any point in this process, Django invokes an appropriate error-handling view. See `Error handling`_ below."
msgstr ""

#: ../../topics/http/urls.txt:69
# 5d8d924b22fb4231b98adeb50346dc8e
msgid "Here's a sample URLconf::"
msgstr ""

#: ../../topics/http/urls.txt:80
#: ../../topics/i18n/translation.txt:1413
# 5ce810df747e45668981db7c7cfaf387
# 7392ba09e89541ccaac1cf9bc3e69625
msgid "Notes:"
msgstr ""

#: ../../topics/http/urls.txt:82
# ac194fe744634368830f684b00f3e081
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

#: ../../topics/http/urls.txt:84
# 7b3bf903f9654ae78002dc8d0174f530
msgid "There's no need to add a leading slash, because every URL has that. For example, it's ``^articles``, not ``^/articles``."
msgstr ""

#: ../../topics/http/urls.txt:87
# 6bc643c6a98842c1a5808b5b41887e0d
msgid "The ``'r'`` in front of each regular expression string is optional but recommended. It tells Python that a string is \"raw\" -- that nothing in the string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

#: ../../topics/http/urls.txt:91
# 17877d48924544e0af1bf60f5545dc45
msgid "Example requests:"
msgstr ""

#: ../../topics/http/urls.txt:93
# 06c6756c008f48d29ff6cf74dd04d40b
msgid "A request to ``/articles/2005/03/`` would match the third entry in the list. Django would call the function ``news.views.month_archive(request, '2005', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:97
# 38d88165ab854a58bfcc7be6e2acfa5d
msgid "``/articles/2005/3/`` would not match any URL patterns, because the third entry in the list requires two digits for the month."
msgstr ""

#: ../../topics/http/urls.txt:100
# ba1123c81a0c4f2696e8af2a3e96ad44
msgid "``/articles/2003/`` would match the first pattern in the list, not the second one, because the patterns are tested in order, and the first one is the first test to pass. Feel free to exploit the ordering to insert special cases like this."
msgstr ""

#: ../../topics/http/urls.txt:105
# 7b2d116f74a84e8c85e8b512f3cce50b
msgid "``/articles/2003`` would not match any of these patterns, because each pattern requires that the URL end with a slash."
msgstr ""

#: ../../topics/http/urls.txt:108
# f546df248867448ba028bc10f7cb4e05
msgid "``/articles/2003/03/03/`` would match the final pattern. Django would call the function ``news.views.article_detail(request, '2003', '03', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:114
# e93c011dcab1491bab3e86f85e9aaf22
msgid "Named groups"
msgstr ""

#: ../../topics/http/urls.txt:116
# dda9669c5ccd426ebc56542e3ef07f77
msgid "The above example used simple, *non-named* regular-expression groups (via parenthesis) to capture bits of the URL and pass them as *positional* arguments to a view. In more advanced usage, it's possible to use *named* regular-expression groups to capture URL bits and pass them as *keyword* arguments to a view."
msgstr ""

#: ../../topics/http/urls.txt:122
# 533ff66fdb9d4de58dcb5ee14e87adc0
msgid "In Python regular expressions, the syntax for named regular-expression groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and ``pattern`` is some pattern to match."
msgstr ""

#: ../../topics/http/urls.txt:126
# bf9de22ea037446283bf5d139e51e3a5
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

#: ../../topics/http/urls.txt:135
# a90092ea32074a33b58c6696bebc4595
msgid "This accomplishes exactly the same thing as the previous example, with one subtle difference: The captured values are passed to view functions as keyword arguments rather than positional arguments. For example:"
msgstr ""

#: ../../topics/http/urls.txt:139
# 6ecfe841915444deb1c8fcea5196b6d7
msgid "A request to ``/articles/2005/03/`` would call the function ``news.views.month_archive(request, year='2005', month='03')``, instead of ``news.views.month_archive(request, '2005', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:143
# 715ad95b82fc47519b787ce1c53337f3
msgid "A request to ``/articles/2003/03/03/`` would call the function ``news.views.article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

#: ../../topics/http/urls.txt:146
# f2c31d0740c342189852cd97f98a0be5
msgid "In practice, this means your URLconfs are slightly more explicit and less prone to argument-order bugs -- and you can reorder the arguments in your views' function definitions. Of course, these benefits come at the cost of brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

#: ../../topics/http/urls.txt:152
# 4d52cfbd58ea4b238f9ed3a4ec59c744
msgid "The matching/grouping algorithm"
msgstr ""

#: ../../topics/http/urls.txt:154
# 4c5ec72310a94b72a4311fb538f6d80f
msgid "Here's the algorithm the URLconf parser follows, with respect to named groups vs. non-named groups in a regular expression:"
msgstr ""

#: ../../topics/http/urls.txt:157
# 0c3cecd9e0914cfcb60b7609b4209d0d
msgid "If there are any named arguments, it will use those, ignoring non-named arguments. Otherwise, it will pass all non-named arguments as positional arguments."
msgstr ""

#: ../../topics/http/urls.txt:160
# 9aaa0239186b4829b246ce1ab5130ba2
msgid "In both cases, it will pass any extra keyword arguments as keyword arguments. See \"Passing extra options to view functions\" below."
msgstr ""

#: ../../topics/http/urls.txt:164
# f7f2c62842d14ac4a9a3fb70e07a7078
msgid "What the URLconf searches against"
msgstr ""

#: ../../topics/http/urls.txt:166
# cb839458e4434e7ea970e332dbbf2b9e
msgid "The URLconf searches against the requested URL, as a normal Python string. This does not include GET or POST parameters, or the domain name."
msgstr ""

#: ../../topics/http/urls.txt:169
# b532e51581f64b27af50fc76f7cf300d
msgid "For example, in a request to ``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``."
msgstr ""

#: ../../topics/http/urls.txt:172
# b6ed7d42185440aab4be2689f8858c55
msgid "In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will look for ``myapp/``."
msgstr ""

#: ../../topics/http/urls.txt:175
# efb2a2c42e7c46069411ba0ed39ea60b
msgid "The URLconf doesn't look at the request method. In other words, all request methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same function for the same URL."
msgstr ""

#: ../../topics/http/urls.txt:180
# 3184df2c936c4831bb760e1e2e147be3
msgid "Syntax of the urlpatterns variable"
msgstr ""

#: ../../topics/http/urls.txt:182
# 2cc306e6c7894a7e9150bc303baef19e
msgid "``urlpatterns`` should be a Python list, in the format returned by the function :func:`django.conf.urls.patterns`. Always use ``patterns()`` to create the ``urlpatterns`` variable."
msgstr ""

#: ../../topics/http/urls.txt:187
# c9b4fa71112e4899812715993ae459a3
msgid "``django.conf.urls`` utility functions"
msgstr ""

#: ../../topics/http/urls.txt:196
# 750832ce0ae144aa91ae85bd294035f9
msgid "Until Django 1.3 they were located in ``django.conf.urls.defaults``. You still can import them from there but it will be removed in Django 1.6."
msgstr ""

#: ../../topics/http/urls.txt:200
# 96e3dd79217e4d5b99ad5d594c95627c
msgid "patterns"
msgstr ""

#: ../../topics/http/urls.txt:204
# e12ed3e59bb147b8ad257299a5640099
msgid "A function that takes a prefix, and an arbitrary number of URL patterns, and returns a list of URL patterns in the format Django needs."
msgstr ""

#: ../../topics/http/urls.txt:207
# 213b227388ae47e8ad223bb24176c14d
msgid "The first argument to ``patterns()`` is a string ``prefix``. See `The view prefix`_ below."
msgstr ""

#: ../../topics/http/urls.txt:210
# 2331ee27e2d14f46806c23b0cbeffa44
msgid "The remaining arguments should be tuples in this format::"
msgstr ""

#: ../../topics/http/urls.txt:214
# a05b84f5359046269848a70c86aa8401
msgid "...where ``optional dictionary`` and ``optional name`` are optional. (See `Passing extra options to view functions`_ below.)"
msgstr ""

#: ../../topics/http/urls.txt:218
# 736cfe4253e840839e25ceb0413cd7f4
msgid "Because `patterns()` is a function call, it accepts a maximum of 255 arguments (URL patterns, in this case). This is a limit for all Python function calls. This is rarely a problem in practice, because you'll typically structure your URL patterns modularly by using `include()` sections. However, on the off-chance you do hit the 255-argument limit, realize that `patterns()` returns a Python list, so you can split up the construction of the list."
msgstr ""

#: ../../topics/http/urls.txt:235
# 7c8ea22c7e87470397d16c2eb1d50cfa
msgid "Python lists have unlimited size, so there's no limit to how many URL patterns you can construct. The only limit is that you can only create 254 at a time (the 255th argument is the initial prefix argument)."
msgstr ""

#: ../../topics/http/urls.txt:240
# 9c346617e5e3466b95a292f3ebcf321f
msgid "url"
msgstr ""

#: ../../topics/http/urls.txt:244
# 2d7a5d13698942828e40565b78b73082
msgid "You can use the ``url()`` function, instead of a tuple, as an argument to ``patterns()``. This is convenient if you want to specify a name without the optional extra arguments dictionary. For example::"
msgstr ""

#: ../../topics/http/urls.txt:253
# 7ce7ee69f3764d8683c82a0838514b50
msgid "This function takes five arguments, most of which are optional::"
msgstr ""

#: ../../topics/http/urls.txt:257
# 0e4513d771594f8ca6d56f284f9d16f0
msgid "See `Naming URL patterns`_ for why the ``name`` parameter is useful."
msgstr ""

#: ../../topics/http/urls.txt:259
# f882e8cecd4147438387f6b72daa6c1c
msgid "The ``prefix`` parameter has the same meaning as the first argument to ``patterns()`` and is only relevant when you're passing a string as the ``view`` parameter."
msgstr ""

#: ../../topics/http/urls.txt:264
# ce3900e72d67477292b6ce5951cdff05
msgid "include"
msgstr ""

#: ../../topics/http/urls.txt:268
# 32c4d1a80d2c46519ddf2df7263e324e
msgid "A function that takes a full Python import path to another URLconf module that should be \"included\" in this place."
msgstr ""

#: ../../topics/http/urls.txt:271
# 755b6ecdd0c54cc38e3ab17c204db0a2
msgid ":func:`include` also accepts as an argument an iterable that returns URL patterns."
msgstr ""

#: ../../topics/http/urls.txt:274
# e986f0bcb5134deeaa5660706028241c
msgid "See `Including other URLconfs`_ below."
msgstr ""

#: ../../topics/http/urls.txt:277
# 3601e82081d64945bbeab5c2fe814635
msgid "Error handling"
msgstr ""

#: ../../topics/http/urls.txt:279
# 3586984abc1947fda4275cc2be6d468c
msgid "When Django can't find a regex matching the requested URL, or when an exception is raised, Django will invoke an error-handling view. The views to use for these cases are specified by three variables which can be set in your root URLconf. Setting these variables in any other URLconf will have no effect."
msgstr ""

#: ../../topics/http/urls.txt:285
# 4d526e3a868c47c8892db5e45f415d56
msgid "See the documentation on :ref:`customizing error views <customizing-error-views>` for more details."
msgstr ""

#: ../../topics/http/urls.txt:289
# 0af848cd28dd4f308084f3eff53d92ea
msgid "handler403"
msgstr ""

#: ../../topics/http/urls.txt:293
# 641d9f0e69a8442e8d7b138ab194b558
msgid "A callable, or a string representing the full Python import path to the view that should be called if the user doesn't have the permissions required to access a resource."
msgstr ""

#: ../../topics/http/urls.txt:297
# f548ba4484b54d34820382cf7dc5c093
msgid "By default, this is ``'django.views.defaults.permission_denied'``. That default value should suffice."
msgstr ""

#: ../../topics/http/urls.txt:300
# 509a290432a54c00a316fe1394afc3d5
msgid "See the documentation about :ref:`the 403 (HTTP Forbidden) view <http_forbidden_view>` for more information."
msgstr ""

#: ../../topics/http/urls.txt:307
# f593fbac6f534c65b3875f2a29c1ea3e
msgid "handler404"
msgstr ""

#: ../../topics/http/urls.txt:311
# 08dd56a52cc34c99a5b7982a1c5a9c4e
msgid "A callable, or a string representing the full Python import path to the view that should be called if none of the URL patterns match."
msgstr ""

#: ../../topics/http/urls.txt:314
# 04e2a5b866124761b9832022d6abbb6e
msgid "By default, this is ``'django.views.defaults.page_not_found'``. That default value should suffice."
msgstr ""

#: ../../topics/http/urls.txt:321
# 1df3d8fea3e54d9f9d285803cf7b6542
msgid "handler500"
msgstr ""

#: ../../topics/http/urls.txt:325
# 88bc9e344cbd4366996d0a145254b336
msgid "A callable, or a string representing the full Python import path to the view that should be called in case of server errors. Server errors happen when you have runtime errors in view code."
msgstr ""

#: ../../topics/http/urls.txt:329
# 9b7291fea79e42b79d956f58bee3696f
msgid "By default, this is ``'django.views.defaults.server_error'``. That default value should suffice."
msgstr ""

#: ../../topics/http/urls.txt:336
# fb119e8c5c8346bfb22134e5e7b0f909
msgid "Notes on capturing text in URLs"
msgstr ""

#: ../../topics/http/urls.txt:338
# d74ef0aac8574698866030b9dd16c494
msgid "Each captured argument is sent to the view as a plain Python string, regardless of what sort of match the regular expression makes. For example, in this URLconf line::"
msgstr ""

#: ../../topics/http/urls.txt:344
# 273a253cc2384fef9a89f8eccfd1f5f9
msgid "...the ``year`` argument to ``news.views.year_archive()`` will be a string, not an integer, even though the ``\\d{4}`` will only match integer strings."
msgstr ""

#: ../../topics/http/urls.txt:347
# e37a3063c0984441acd4482ab7041885
msgid "A convenient trick is to specify default parameters for your views' arguments. Here's an example URLconf and view::"
msgstr ""

#: ../../topics/http/urls.txt:360
# 68089e1eaf4b46ad89d25725927338b7
msgid "In the above example, both URL patterns point to the same view -- ``blog.views.page`` -- but the first pattern doesn't capture anything from the URL. If the first pattern matches, the ``page()`` function will use its default argument for ``num``, ``\"1\"``. If the second pattern matches, ``page()`` will use whatever ``num`` value was captured by the regex."
msgstr ""

#: ../../topics/http/urls.txt:367
# 0bf3f85d0d9b4251ad76f6dd04a795e5
msgid "Performance"
msgstr ""

#: ../../topics/http/urls.txt:369
# dee967c7c71a460da9c5b3a71abdce7a
msgid "Each regular expression in a ``urlpatterns`` is compiled the first time it's accessed. This makes the system blazingly fast."
msgstr ""

#: ../../topics/http/urls.txt:373
# f4221746f32e48348b2beb6fa168001c
msgid "The view prefix"
msgstr ""

#: ../../topics/http/urls.txt:375
# c8f5b122532d419f8bf30a3b8448c8d1
msgid "You can specify a common prefix in your ``patterns()`` call, to cut down on code duplication."
msgstr ""

#: ../../topics/http/urls.txt:378
# 9b5514135e014d07b68c94f7cf2f7bfc
msgid "Here's the example URLconf from the :doc:`Django overview </intro/overview>`::"
msgstr ""

#: ../../topics/http/urls.txt:388
# 39844151a1c34a208c390f567d049eb0
msgid "In this example, each view has a common prefix -- ``'news.views'``. Instead of typing that out for each entry in ``urlpatterns``, you can use the first argument to the ``patterns()`` function to specify a prefix to apply to each view function."
msgstr ""

#: ../../topics/http/urls.txt:393
# 655153f0a5984ca19ccd48bb651a7526
msgid "With this in mind, the above example can be written more concisely as::"
msgstr ""

#: ../../topics/http/urls.txt:403
# 1cb1dff1e6b34978bcac24be200fc89e
msgid "Note that you don't put a trailing dot (``\".\"``) in the prefix. Django puts that in automatically."
msgstr ""

#: ../../topics/http/urls.txt:407
# 432afb0dc7714517a5ab0796bea4c10c
msgid "Multiple view prefixes"
msgstr ""

#: ../../topics/http/urls.txt:409
# 6c31141eb58f408885c2712e8bd81df9
msgid "In practice, you'll probably end up mixing and matching views to the point where the views in your ``urlpatterns`` won't have a common prefix. However, you can still take advantage of the view prefix shortcut to remove duplication. Just add multiple ``patterns()`` objects together, like this:"
msgstr ""

#: ../../topics/http/urls.txt:414
# d3d058cb8ebb454c91cf79e893bbaf11
msgid "Old::"
msgstr ""

#: ../../topics/http/urls.txt:424
# 9d9927ed7e024175b3d282444137c13e
msgid "New::"
msgstr ""

#: ../../topics/http/urls.txt:438
# 38dc2a05564247ba8c8550fcbba9519b
msgid "Including other URLconfs"
msgstr ""

#: ../../topics/http/urls.txt:440
# 8c08781e01c6416e9ebd457dfa8733d8
msgid "At any point, your ``urlpatterns`` can \"include\" other URLconf modules. This essentially \"roots\" a set of URLs below other ones."
msgstr ""

#: ../../topics/http/urls.txt:443
# b71f0903055546ca9a85aa9bfe12c8c5
msgid "For example, here's an excerpt of the URLconf for the `Django Web site`_ itself. It includes a number of other URLconfs::"
msgstr ""

#: ../../topics/http/urls.txt:457
# 1ab4954fcc4c408d8c8c50646ffbc206
msgid "Note that the regular expressions in this example don't have a ``$`` (end-of-string match character) but do include a trailing slash. Whenever Django encounters ``include()``, it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing."
msgstr ""

#: ../../topics/http/urls.txt:463
# 9627a6e7d63645d49f8335a2a2e9994b
msgid "Another possibility is to include additional URL patterns not by specifying the URLconf Python module defining them as the `include`_ argument but by using directly the pattern list as returned by `patterns`_ instead. For example::"
msgstr ""

#: ../../topics/http/urls.txt:480
# a4e462dddb4e4d5a93316131a6976fc7
msgid "This approach can be seen in use when you deploy an instance of the Django Admin application. The Django Admin is deployed as instances of a :class:`~django.contrib.admin.AdminSite`; each :class:`~django.contrib.admin.AdminSite` instance has an attribute ``urls`` that returns the url patterns available to that instance. It is this attribute that you ``include()`` into your projects ``urlpatterns`` when you deploy the admin instance."
msgstr ""

#: ../../topics/http/urls.txt:491
# 01ade3c4f7834a2c933831bc8d09c66a
msgid "Captured parameters"
msgstr ""

#: ../../topics/http/urls.txt:493
# be8069bdc4db4447848226ff2971c250
msgid "An included URLconf receives any captured parameters from parent URLconfs, so the following example is valid::"
msgstr ""

#: ../../topics/http/urls.txt:507
# f26fb30dbba54ae1a08f72e27e1bc143
msgid "In the above example, the captured ``\"username\"`` variable is passed to the included URLconf, as expected."
msgstr ""

#: ../../topics/http/urls.txt:513
# 3b3756d050e84cb68b305decde106065
msgid "Defining URL namespaces"
msgstr ""

#: ../../topics/http/urls.txt:515
# 943bdf936513487eb4a85363b7d46b67
msgid "When you need to deploy multiple instances of a single application, it can be helpful to be able to differentiate between instances. This is especially important when using :ref:`named URL patterns <naming-url-patterns>`, since multiple instances of a single application will share named URLs. Namespaces provide a way to tell these named URLs apart."
msgstr ""

#: ../../topics/http/urls.txt:521
# 43e9d97ee23243229de6e1051be202ce
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

#: ../../topics/http/urls.txt:523
# 4d7db3228b3a4cd8b6c144533064dd7a
msgid "An **application namespace**. This describes the name of the application that is being deployed. Every instance of a single application will have the same application namespace. For example, Django's admin application has the somewhat predictable application namespace of ``admin``."
msgstr ""

#: ../../topics/http/urls.txt:528
# a00cc7412e374925bef35665572b3462
msgid "An **instance namespace**. This identifies a specific instance of an application. Instance namespaces should be unique across your entire project. However, an instance namespace can be the same as the application namespace. This is used to specify a default instance of an application. For example, the default Django Admin instance has an instance namespace of ``admin``."
msgstr ""

#: ../../topics/http/urls.txt:535
# c36bc6a265b34b5986a77fd30977ef0e
msgid "URL Namespaces can be specified in two ways."
msgstr ""

#: ../../topics/http/urls.txt:537
# e4dd644c737b41878b1b22c760542f5a
msgid "Firstly, you can provide the application and instance namespace as arguments to ``include()`` when you construct your URL patterns. For example,::"
msgstr ""

#: ../../topics/http/urls.txt:542
# 5c3e149524ea4b17924733098de37052
msgid "This will include the URLs defined in ``apps.help.urls`` into the application namespace ``bar``, with the instance namespace ``foo``."
msgstr ""

#: ../../topics/http/urls.txt:545
# 322d8d23ce1e412e8d9d0d2e05ca0732
msgid "Secondly, you can include an object that contains embedded namespace data. If you ``include()`` a ``patterns`` object, that object will be added to the global namespace. However, you can also ``include()`` an object that contains a 3-tuple containing::"
msgstr ""

#: ../../topics/http/urls.txt:552
# 1b7b3ce8f4e14e7e967b848e28d88db9
msgid "This will include the nominated URL patterns into the given application and instance namespace. For example, the ``urls`` attribute of Django's :class:`~django.contrib.admin.AdminSite` object returns a 3-tuple that contains all the patterns in an admin site, plus the name of the admin instance, and the application namespace ``admin``."
msgstr ""

#: ../../topics/http/urls.txt:558
# 2c7ecbd2f12746ffab9c5515e1cf6e87
msgid "Once you have defined namespaced URLs, you can reverse them. For details on reversing namespaced urls, see the documentation on :ref:`reversing namespaced URLs <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../topics/http/urls.txt:563
# c450802067954e4a9eb5cde26236a618
msgid "Passing extra options to view functions"
msgstr ""

#: ../../topics/http/urls.txt:565
# b401dd5d10c34d938aa10d191419f6f6
msgid "URLconfs have a hook that lets you pass extra arguments to your view functions, as a Python dictionary."
msgstr ""

#: ../../topics/http/urls.txt:568
# 1d5b7ebc9fe841369f1933083da82d0a
msgid "Any URLconf tuple can have an optional third element, which should be a dictionary of extra keyword arguments to pass to the view function."
msgstr ""

#: ../../topics/http/urls.txt:577
# 60e61bcef67d4064abfb6c42d427b059
msgid "In this example, for a request to ``/blog/2005/``, Django will call the ``blog.views.year_archive()`` view, passing it these keyword arguments::"
msgstr ""

#: ../../topics/http/urls.txt:582
# 12cf50d123d641e6a8cbdb07102b33a5
msgid "This technique is used in :doc:`generic views </ref/generic-views>` and in the :doc:`syndication framework </ref/contrib/syndication>` to pass metadata and options to views."
msgstr ""

#: ../../topics/http/urls.txt:588
# 22e0f18165c64f8ebaa2121dfd5e04f5
msgid "It's possible to have a URL pattern which captures named keyword arguments, and also passes arguments with the same names in its dictionary of extra arguments. When this happens, the arguments in the dictionary will be used instead of the arguments captured in the URL."
msgstr ""

#: ../../topics/http/urls.txt:594
# ed885e79b8c34cdaa4cc86bc2df9ecfe
msgid "Passing extra options to ``include()``"
msgstr ""

#: ../../topics/http/urls.txt:596
# d73f8025d35b4fb680414df94f2522c8
msgid "Similarly, you can pass extra options to ``include()``. When you pass extra options to ``include()``, *each* line in the included URLconf will be passed the extra options."
msgstr ""

#: ../../topics/http/urls.txt:600
# b9cccce12a6a43579af2f1f1e2aa0b3a
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

#: ../../topics/http/urls.txt:602
# 4a12ac591ff04698a406517dca848ee4
msgid "Set one::"
msgstr ""

#: ../../topics/http/urls.txt:615
# c2c04c7138e34f8ca8b68dbf9691caf9
msgid "Set two::"
msgstr ""

#: ../../topics/http/urls.txt:628
# 80cfb78897664477be6808ba5b977bc2
msgid "Note that extra options will *always* be passed to *every* line in the included URLconf, regardless of whether the line's view actually accepts those options as valid. For this reason, this technique is only useful if you're certain that every view in the included URLconf accepts the extra options you're passing."
msgstr ""

#: ../../topics/http/urls.txt:634
# af3c4cd8afd442338d578a480819f8c2
msgid "Passing callable objects instead of strings"
msgstr ""

#: ../../topics/http/urls.txt:636
# a1180d9782744b14adbee0591ae9b4af
msgid "Some developers find it more natural to pass the actual Python function object rather than a string containing the path to its module. This alternative is supported -- you can pass any callable object as the view."
msgstr ""

#: ../../topics/http/urls.txt:640
# f80bdb12353f41a2bd7eeb35c2becb39
msgid "For example, given this URLconf in \"string\" notation::"
msgstr ""

#: ../../topics/http/urls.txt:648
# 730243ee694b4823b2b8f6dfb9001fc2
msgid "You can accomplish the same thing by passing objects rather than strings. Just be sure to import the objects::"
msgstr ""

#: ../../topics/http/urls.txt:659
# 2b6b42b8e67b448ca4d68e8d6fddc4a5
msgid "The following example is functionally identical. It's just a bit more compact because it imports the module that contains the views, rather than importing each view individually::"
msgstr ""

#: ../../topics/http/urls.txt:671
# 95e8c22c94a4450a824d77f668027bfb
msgid "The style you use is up to you."
msgstr ""

#: ../../topics/http/urls.txt:673
# 8f8bb4b834ca42f98a9b8a47eba44588
msgid "Note that if you use this technique -- passing objects rather than strings -- the view prefix (as explained in \"The view prefix\" above) will have no effect."
msgstr ""

#: ../../topics/http/urls.txt:679
# 1b4c528bdd6e4743b7e1abb8d7e78814
msgid "Naming URL patterns"
msgstr ""

#: ../../topics/http/urls.txt:681
# abd7c81844634b5b81ed50987b45cc74
msgid "It's fairly common to use the same view function in multiple URL patterns in your URLconf. For example, these two URL patterns both point to the ``archive`` view::"
msgstr ""

#: ../../topics/http/urls.txt:690
# 9a014ab793d04736a6bcd592e1a1a1b8
msgid "This is completely valid, but it leads to problems when you try to do reverse URL matching (through the ``permalink()`` decorator or the :ttag:`url` template tag). Continuing this example, if you wanted to retrieve the URL for the ``archive`` view, Django's reverse URL matcher would get confused, because *two* URL patterns point at that view."
msgstr ""

#: ../../topics/http/urls.txt:696
# 3b3590f5242d4e9ca399feb76703e9b9
msgid "To solve this problem, Django supports **named URL patterns**. That is, you can give a name to a URL pattern in order to distinguish it from other patterns using the same view and parameters. Then, you can use this name in reverse URL matching."
msgstr ""

#: ../../topics/http/urls.txt:701
# 95ee01c369d044b4bca6bd8c14b30b9f
msgid "Here's the above example, rewritten to use named URL patterns::"
msgstr ""

#: ../../topics/http/urls.txt:708
# 935346b9c2ca4acaa6aa416c548923f3
msgid "With these names in place (``full-archive`` and ``arch-summary``), you can target each pattern individually by using its name:"
msgstr ""

#: ../../topics/http/urls.txt:716
# bb8ca95c25a04151851c63f64ef03dd2
msgid "Even though both URL patterns refer to the ``archive`` view here, using the ``name`` parameter to ``url()`` allows you to tell them apart in templates."
msgstr ""

#: ../../topics/http/urls.txt:719
# 3bdfaf60d2a347aab4ee6f5d890733a7
msgid "The string used for the URL name can contain any characters you like. You are not restricted to valid Python names."
msgstr ""

#: ../../topics/http/urls.txt:724
# dc737b070a8e4e859a59d897fd2e54d8
msgid "When you name your URL patterns, make sure you use names that are unlikely to clash with any other application's choice of names. If you call your URL pattern ``comment``, and another application does the same thing, there's no guarantee which URL will be inserted into your template when you use this name."
msgstr ""

#: ../../topics/http/urls.txt:730
# bc83830ad6b7487eb7b1eb4ed0e92382
msgid "Putting a prefix on your URL names, perhaps derived from the application name, will decrease the chances of collision. We recommend something like ``myapp-comment`` instead of ``comment``."
msgstr ""

#: ../../topics/http/urls.txt:737
# 631160a63fbc4bc8b3a037fde978e63e
msgid "URL namespaces"
msgstr ""

#: ../../topics/http/urls.txt:739
# d8140d293f2f401f8949d70764e5f9b5
msgid "Namespaced URLs are specified using the ``:`` operator. For example, the main index page of the admin application is referenced using ``admin:index``. This indicates a namespace of ``admin``, and a named URL of ``index``."
msgstr ""

#: ../../topics/http/urls.txt:743
# 1d9a10679bac4254b310ece1bfedd593
msgid "Namespaces can also be nested. The named URL ``foo:bar:whiz`` would look for a pattern named ``whiz`` in the namespace ``bar`` that is itself defined within the top-level namespace ``foo``."
msgstr ""

#: ../../topics/http/urls.txt:747
# 246bb76ee5fb432489cee4f9791818d6
msgid "When given a namespaced URL (e.g. ``myapp:index``) to resolve, Django splits the fully qualified name into parts, and then tries the following lookup:"
msgstr ""

#: ../../topics/http/urls.txt:750
# ec73294591a948ca9caee5a0117342e8
msgid "First, Django looks for a matching application namespace (in this example, ``myapp``). This will yield a list of instances of that application."
msgstr ""

#: ../../topics/http/urls.txt:754
# 72acdf7c38fa475f8c0c3d6dd8e2a8e5
msgid "If there is a *current* application defined, Django finds and returns the URL resolver for that instance. The *current* application can be specified as an attribute on the template context - applications that expect to have multiple deployments should set the ``current_app`` attribute on any ``Context`` or ``RequestContext`` that is used to render a template."
msgstr ""

#: ../../topics/http/urls.txt:761
# 7ba812d8632a4bd186e0c3f03b0569aa
msgid "The current application can also be specified manually as an argument to the :func:`reverse()` function."
msgstr ""

#: ../../topics/http/urls.txt:764
# f077212d4ecd4d42bf2185af15e6ece3
msgid "If there is no current application. Django looks for a default application instance. The default application instance is the instance that has an instance namespace matching the application namespace (in this example, an instance of the ``myapp`` called ``myapp``)."
msgstr ""

#: ../../topics/http/urls.txt:769
# 8b3f55ad4f3141e5a153e073e16542ad
msgid "If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be."
msgstr ""

#: ../../topics/http/urls.txt:772
# ed46e2bfaeb946c7a74771b5a5e4820b
msgid "If the provided namespace doesn't match an application namespace in step 1, Django will attempt a direct lookup of the namespace as an instance namespace."
msgstr ""

#: ../../topics/http/urls.txt:776
# 25a511c4810f43ae9bbb60abdbe62748
msgid "If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found."
msgstr ""

#: ../../topics/http/urls.txt:780
# e89e5ba6d7e94269a3a9514aabd1ffff
msgid "To show this resolution strategy in action, consider an example of two instances of ``myapp``: one called ``foo``, and one called ``bar``. ``myapp`` has a main index page with a URL named `index`. Using this setup, the following lookups are possible:"
msgstr ""

#: ../../topics/http/urls.txt:785
#: ../../topics/http/urls.txt:801
# f2d73c074dc94f9ba1d180c7b1aa95b2
# 830828b465844cf790a23103997fae8f
msgid "If one of the instances is current - say, if we were rendering a utility page in the instance ``bar`` - ``myapp:index`` will resolve to the index page of the instance ``bar``."
msgstr ""

#: ../../topics/http/urls.txt:789
# 248c0f4dc62f44fdba1caefc8934ecb6
msgid "If there is no current instance - say, if we were rendering a page somewhere else on the site - ``myapp:index`` will resolve to the last registered instance of ``myapp``. Since there is no default instance, the last instance of ``myapp`` that is registered will be used. This could be ``foo`` or ``bar``, depending on the order they are introduced into the urlpatterns of the project."
msgstr ""

#: ../../topics/http/urls.txt:796
# f3aab0df59514ca8860d9f6119c560f4
msgid "``foo:index`` will always resolve to the index page of the instance ``foo``."
msgstr ""

#: ../../topics/http/urls.txt:798
# badd288b6be84d8d801134f3ad420169
msgid "If there was also a default instance - i.e., an instance named `myapp` - the following would happen:"
msgstr ""

#: ../../topics/http/urls.txt:805
# c083db9b50804cccb7bd1224b39de15d
msgid "If there is no current instance - say, if we were rendering a page somewhere else on the site - ``myapp:index`` will resolve to the index page of the default instance."
msgstr ""

#: ../../topics/http/urls.txt:809
# c1e72e9a4ae242cc9a1cca0a190c48b8
msgid "``foo:index`` will again resolve to the index page of the instance ``foo``."
msgstr ""

#: ../../topics/http/urls.txt:813
# 4692bf8c6aca40aabacc9dc9274e94f5
msgid "``django.core.urlresolvers`` utility functions"
msgstr ""

#: ../../topics/http/urls.txt:818
# 2b599e2b42af4c2990b9f1d700368d80
msgid "reverse()"
msgstr ""

#: ../../topics/http/urls.txt:820
# b167fc5d3cc94c6286125cc8822d5894
msgid "If you need to use something similar to the :ttag:`url` template tag in your code, Django provides the following function (in the :mod:`django.core.urlresolvers` module):"
msgstr ""

#: ../../topics/http/urls.txt:826
# 16f562f8bd3d41a9ac83e048977438e0
msgid "``viewname`` is either the function name (either a function reference, or the string version of the name, if you used that form in ``urlpatterns``) or the `URL pattern name`_.  Normally, you won't need to worry about the ``urlconf`` parameter and will only pass in the positional and keyword arguments to use in the URL matching. For example::"
msgstr ""

#: ../../topics/http/urls.txt:839
# b8f807c59b994efb9f42a8e70d7ff57b
msgid "The ``reverse()`` function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (``\"|\"``) character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns."
msgstr ""

#: ../../topics/http/urls.txt:846
# 65bfbb5255a0467d8f97d15a6acba57f
msgid "The ``current_app`` argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This ``current_app`` argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../topics/http/urls.txt:852
# b923337ec7674e8cb1dda3fe87e9378c
msgid "You can use ``kwargs`` instead of ``args``. For example::"
msgstr ""

#: ../../topics/http/urls.txt:857
# 86d4288998f94748a1e48f3f8e9aae65
msgid "``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr ""

#: ../../topics/http/urls.txt:861
# d9158fa4e5b849bdbed27bb858a70b98
msgid "As part of working out which URL names map to which patterns, the ``reverse()`` function has to import all of your URLconf files and examine the name of each view. This involves importing each view function. If there are *any* errors whilst importing any of your view functions, it will cause ``reverse()`` to raise an error, even if that view function is not the one you are trying to reverse."
msgstr ""

#: ../../topics/http/urls.txt:868
# 9d27886c292d49dba06d7e73b80c928d
msgid "Make sure that any views you reference in your URLconf files exist and can be imported correctly. Do not include lines that reference views you haven't written yet, because those views will not be importable."
msgstr ""

#: ../../topics/http/urls.txt:874
# 82ef9033a3cd4089b85c68d9e9d264d5
msgid "The string returned by :meth:`~django.core.urlresolvers.reverse` is already :ref:`urlquoted <uri-and-iri-handling>`. For example::"
msgstr ""

#: ../../topics/http/urls.txt:880
# dcc41284de9f4e0d82fb315dc992a362
msgid "Applying further encoding (such as :meth:`~django.utils.http.urlquote` or ``urllib.quote``) to the output of :meth:`~django.core.urlresolvers.reverse` may produce undesirable results."
msgstr ""

#: ../../topics/http/urls.txt:885
# 01c6b80208bc4e1f811b003cc1312ef9
msgid "reverse_lazy()"
msgstr ""

#: ../../topics/http/urls.txt:889
# 5bb172bad2ea4805b4939a71720570cc
msgid "A lazily evaluated version of `reverse()`_."
msgstr ""

#: ../../topics/http/urls.txt:893
# 986e0b651a7a4df3b6ead3c64cda80fe
msgid "It is useful for when you need to use a URL reversal before your project's URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""

#: ../../topics/http/urls.txt:896
# 09054a359b84494997b1a27f863c5483
msgid "providing a reversed URL as the ``url`` attribute of a generic class-based view."
msgstr ""

#: ../../topics/http/urls.txt:899
# 64ace7b124ad4acca3662a2efe5d7259
msgid "providing a reversed URL to a decorator (such as the ``login_url`` argument for the :func:`django.contrib.auth.decorators.permission_required` decorator)."
msgstr ""

#: ../../topics/http/urls.txt:903
# e358ffce3b024db2b4c993167323a402
msgid "providing a reversed URL as a default value for a parameter in a function's signature."
msgstr ""

#: ../../topics/http/urls.txt:907
# 8b81c0233b444f1883bd56269e99cb57
msgid "resolve()"
msgstr ""

#: ../../topics/http/urls.txt:909
# abf7bbd9296842c483ec9c79f4cae0ea
msgid "The :func:`django.core.urlresolvers.resolve` function can be used for resolving URL paths to the corresponding view functions. It has the following signature:"
msgstr ""

#: ../../topics/http/urls.txt:915
# a757a66240684df9948aca57d056e44f
msgid "``path`` is the URL path you want to resolve. As with :func:`~django.core.urlresolvers.reverse`, you don't need to worry about the ``urlconf`` parameter. The function returns a :class:`ResolverMatch` object that allows you to access various meta-data about the resolved URL."
msgstr ""

#: ../../topics/http/urls.txt:921
# 38184453555d4dc88aa673112cb6d56a
msgid "If the URL does not resolve, the function raises an :class:`~django.http.Http404` exception."
msgstr ""

#: ../../topics/http/urls.txt:928
# 5a77a10986904b13aeda2cbca47fbe19
msgid "The view function that would be used to serve the URL"
msgstr ""

#: ../../topics/http/urls.txt:932
# 75f842a9ea194934b87ccfbdb2fdc08c
msgid "The arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

#: ../../topics/http/urls.txt:937
# 1f017d05349b47df8d6360c96d6512e8
msgid "The keyword arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

#: ../../topics/http/urls.txt:942
# 67d1c558e9c6459fa126cf40dbf972c0
msgid "The name of the URL pattern that matches the URL."
msgstr ""

#: ../../topics/http/urls.txt:946
# b80c75cda5e348e5957328a34f609819
msgid "The application namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../topics/http/urls.txt:951
# 3a2b8415c8fb442195c235d72e7572a6
msgid "The instance namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../topics/http/urls.txt:956
# 1c3222f2bf4947129b574bbd00fddc1b
msgid "The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is ``foo:bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""

#: ../../topics/http/urls.txt:961
# e63414ca98b6419992777e5d9d2a617d
msgid "A :class:`ResolverMatch` object can then be interrogated to provide information about the URL pattern that matches a URL::"
msgstr ""

#: ../../topics/http/urls.txt:969
# 2a777b63566a4ab6b228d81371381c50
msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""

#: ../../topics/http/urls.txt:980
# ae49bbd46c484f86848d7a7fb138c7e5
msgid "One possible use of :func:`~django.core.urlresolvers.resolve` would be to test whether a view would raise a ``Http404`` error before redirecting to it::"
msgstr ""

#: ../../topics/http/urls.txt:1004
# f7345f82edc44127851280d026d01ac4
msgid "permalink()"
msgstr ""

#: ../../topics/http/urls.txt:1006
# a2a441ffcb9b4caca3fb84da37fc0d16
msgid "The :func:`django.db.models.permalink` decorator is useful for writing short methods that return a full URL path. For example, a model's ``get_absolute_url()`` method. See :func:`django.db.models.permalink` for more."
msgstr ""

#: ../../topics/http/urls.txt:1011
# 0b8dfedcf50045528aa054e72ed11e21
msgid "get_script_prefix()"
msgstr ""

#: ../../topics/http/urls.txt:1015
# d0a7449097e444ae9dec6be9c8b0ff30
msgid "Normally, you should always use :func:`~django.core.urlresolvers.reverse` or :func:`~django.db.models.permalink` to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, :func:`~django.core.urlresolvers.reverse` takes care of this for you). In that case, you can call ``get_script_prefix()``, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its Web server, this is always ``\"/\"``, but it can be changed, for instance  by using ``django.root`` (see :doc:`How to use Django with Apache and mod_python </howto/deployment/modpython>`)."
msgstr ""

#: ../../topics/http/views.txt:3
# 0d88158557264d50b126ee36fbad368c
msgid "Writing views"
msgstr ""

#: ../../topics/http/views.txt:5
# e8e9c85e53e9429fab2643233ae34811
msgid "A view function, or *view* for short, is simply a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image . . . or anything, really. The view itself contains whatever arbitrary logic is necessary to return that response. This code can live anywhere you want, as long as it's on your Python path. There's no other requirement--no \"magic,\" so to speak. For the sake of putting the code *somewhere*, the convention is to put views in a file called ``views.py``, placed in your project or application directory."
msgstr ""

#: ../../topics/http/views.txt:16
# 61d375f6bf8548cfa8d49c9e2b8f4414
msgid "A simple view"
msgstr ""

#: ../../topics/http/views.txt:18
# 3b93268fdd4241049168c10c4454d446
msgid "Here's a view that returns the current date and time, as an HTML document:"
msgstr ""

#: ../../topics/http/views.txt:30
# 8b8f38574f3a4dcc8b5db93aad23cacf
msgid "Let's step through this code one line at a time:"
msgstr ""

#: ../../topics/http/views.txt:32
# 30a81c18f65c46b2ac15ee6742a920b8
msgid "First, we import the class :class:`~django.http.HttpResponse` from the :mod:`django.http` module, along with Python's ``datetime`` library."
msgstr ""

#: ../../topics/http/views.txt:35
# d3fd7207b5a747c2b96d9708cd533f34
msgid "Next, we define a function called ``current_datetime``. This is the view function. Each view function takes an :class:`~django.http.HttpRequest` object as its first parameter, which is typically named ``request``."
msgstr ""

#: ../../topics/http/views.txt:39
# c584c36e1d504f1c8973d40145152c1e
msgid "Note that the name of the view function doesn't matter; it doesn't have to be named in a certain way in order for Django to recognize it. We're calling it ``current_datetime`` here, because that name clearly indicates what it does."
msgstr ""

#: ../../topics/http/views.txt:44
# 4ce7b71c90e2419ea1bc907efb99b1ad
msgid "The view returns an :class:`~django.http.HttpResponse` object that contains the generated response. Each view function is responsible for returning an :class:`~django.http.HttpResponse` object. (There are exceptions, but we'll get to those later.)"
msgstr ""

#: ../../topics/http/views.txt:51
# f1dbbd80972541189804d2b45d96ba84
msgid "Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/Chicago``. This probably isn't where you live, so you might want to change it in your settings file."
msgstr ""

#: ../../topics/http/views.txt:56
# 21f40ecc86d64c56a86533bf17d38adc
msgid "Mapping URLs to views"
msgstr ""

#: ../../topics/http/views.txt:58
# 595e3e48a8bd4461afb324e6d10b5cef
msgid "So, to recap, this view function returns an HTML page that includes the current date and time. To display this view at a particular URL, you'll need to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

#: ../../topics/http/views.txt:63
# c26a02ff11f842ba961a490c7bb14bb0
msgid "Returning errors"
msgstr ""

#: ../../topics/http/views.txt:65
# f7edaa2ca3a841228fa00ed8f8f247c5
msgid "Returning HTTP error codes in Django is easy. There are subclasses of :class:`~django.http.HttpResponse` for a number of common HTTP status codes other than 200 (which means *\"OK\"*). You can find the full list of available subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` documentation.  Just return an instance of one of those subclasses instead of a normal :class:`~django.http.HttpResponse` in order to signify an error. For example::"
msgstr ""

#: ../../topics/http/views.txt:80
# 8efca1bd0636474eaed86ef0cedfb20c
msgid "There isn't a specialized subclass for every possible HTTP response code, since many of them aren't going to be that common. However, as documented in the :class:`~django.http.HttpResponse` documentation, you can also pass the HTTP status code into the constructor for :class:`~django.http.HttpResponse` to create a return class for any status code you like. For example::"
msgstr ""

#: ../../topics/http/views.txt:92
# bd5d77b1bc3e4140a2e6f774b4919d6e
msgid "Because 404 errors are by far the most common HTTP error, there's an easier way to handle those errors."
msgstr ""

#: ../../topics/http/views.txt:96
# 4eaf4d7a934a47798fa83909c8cf622d
msgid "The Http404 exception"
msgstr ""

#: ../../topics/http/views.txt:100
# aaf16dbd980d453bb995eae2733828a4
msgid "When you return an error such as :class:`~django.http.HttpResponseNotFound`, you're responsible for defining the HTML of the resulting error page::"
msgstr ""

#: ../../topics/http/views.txt:105
# 70ce93bee1ab41f48a6a094361a418a5
msgid "For convenience, and because it's a good idea to have a consistent 404 error page across your site, Django provides an ``Http404`` exception. If you raise ``Http404`` at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404."
msgstr ""

#: ../../topics/http/views.txt:110
# 3f0d2fe26dff4599869785f26a6c33c0
msgid "Example usage::"
msgstr ""

#: ../../topics/http/views.txt:121
# e6db7ce8d11b43ee84d7e0e2dc76e266
msgid "In order to use the ``Http404`` exception to its fullest, you should create a template that is displayed when a 404 error is raised. This template should be called ``404.html`` and located in the top level of your template tree."
msgstr ""

#: ../../topics/http/views.txt:128
# 0cb3e805020a42388c46a69478e3b886
msgid "Customizing error views"
msgstr ""

#: ../../topics/http/views.txt:131
# 25a0523ec79a49d7be8007015e1d7695
msgid "The 404 (page not found) view"
msgstr ""

#: ../../topics/http/views.txt:133
# fa4ceee6cffd4c83a821dcc954acc787
msgid "When you raise an ``Http404`` exception, Django loads a special view devoted to handling 404 errors. By default, it's the view ``django.views.defaults.page_not_found``, which loads and renders the template ``404.html``."
msgstr ""

#: ../../topics/http/views.txt:138
# 00d45af078714cebb3aa3c27c59ad907
msgid "This means you need to define a ``404.html`` template in your root template directory. This template will be used for all 404 errors. The default 404 view will pass one variable to the template: ``request_path``, which is the URL that resulted in the error."
msgstr ""

#: ../../topics/http/views.txt:143
# 96d0a33789fa4c1193024f9717427503
msgid "The ``page_not_found`` view should suffice for 99% of Web applications, but if you want to override it, you can specify ``handler404`` in your URLconf, like so::"
msgstr ""

#: ../../topics/http/views.txt:149
# 899ddb34fa3548059273f3af599799b0
msgid "Behind the scenes, Django determines the 404 view by looking for ``handler404`` in your root URLconf, and falling back to ``django.views.defaults.page_not_found`` if you did not define one."
msgstr ""

#: ../../topics/http/views.txt:153
# 0df74e91082b4e61b1cd88ee50e7d33c
msgid "Four things to note about 404 views:"
msgstr ""

#: ../../topics/http/views.txt:155
# 5b9b4bf6df1e496db517f87fa74d6d63
msgid "The 404 view is also called if Django doesn't find a match after checking every regular expression in the URLconf."
msgstr ""

#: ../../topics/http/views.txt:158
# 57fd745291c14ba2ad6e6cd4433c170a
msgid "If you don't define your own 404 view — and simply use the default, which is recommended — you still have one obligation: you must create a ``404.html`` template in the root of your template directory."
msgstr ""

#: ../../topics/http/views.txt:162
# ddf95fa1e8f74d58a2b92ae38e779ea3
msgid "The 404 view is passed a :class:`~django.template.RequestContext` and will have access to variables supplied by your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
msgstr ""

#: ../../topics/http/views.txt:166
# f3219f467d454971af2aa02f656d4a60
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information."
msgstr ""

#: ../../topics/http/views.txt:171
# 505ac3c2e6b5472580e439fa2cda9c4c
msgid "The 500 (server error) view"
msgstr ""

#: ../../topics/http/views.txt:173
# 57518e2620894fc4abfce2ef930ea19b
msgid "Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view ``django.views.defaults.server_error``, which loads and renders the template ``500.html``."
msgstr ""

#: ../../topics/http/views.txt:178
# b979db4019e5412690e18b0532288054
msgid "This means you need to define a ``500.html`` template in your root template directory. This template will be used for all server errors. The default 500 view passes no variables to this template and is rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""

#: ../../topics/http/views.txt:183
# 993c572a276149d09f799103f426fde3
msgid "This ``server_error`` view should suffice for 99% of Web applications, but if you want to override the view, you can specify ``handler500`` in your URLconf, like so::"
msgstr ""

#: ../../topics/http/views.txt:189
# 303cb14444304eea8e7e6c3a94bd35dd
msgid "Behind the scenes, Django determines the 500 view by looking for ``handler500`` in your root URLconf, and falling back to ``django.views.defaults.server_error`` if you did not define one."
msgstr ""

#: ../../topics/http/views.txt:193
# 8fc7a7d215414304b455ae416aa6fe3f
msgid "Two things to note about 500 views:"
msgstr ""

#: ../../topics/http/views.txt:195
# b5be177c73684057a7fb15bd2593bc4d
msgid "If you don't define your own 500 view — and simply use the default, which is recommended — you still have one obligation: you must create a ``500.html`` template in the root of your template directory."
msgstr ""

#: ../../topics/http/views.txt:199
# 6cc7f10752284119af1c1d8ef967eca4
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information."
msgstr ""

#: ../../topics/http/views.txt:206
# db85e0f74bc347af8e5024d13aba2769
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

#: ../../topics/http/views.txt:210
# 076263ddace04d389542141e6923859f
msgid "In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

#: ../../topics/http/views.txt:214
# 61da24ca3c8f4f708832cf4f424c706b
msgid "This view loads and renders the template ``403.html`` in your root template directory, or if this file does not exist, instead serves the text \"403 Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

#: ../../topics/http/views.txt:218
# ff7566ca9dae4a89982de280e51e8d7d
msgid "It is possible to override ``django.views.defaults.permission_denied`` in the same way you can for the 404 and 500 views by specifying a ``handler403`` in your URLconf::"
msgstr ""

#: ../../topics/i18n/formatting.txt:5
# 45c9daf59b7d44f7b4cc8fedad1d981f
msgid "Format localization"
msgstr ""

#: ../../topics/i18n/formatting.txt:12
# f1c59549b0234f98a7caa8501f2ed720
msgid "Django's formatting system is capable to display dates, times and numbers in templates using the format specified for the current :term:`locale <locale name>`. It also handles localized input in forms."
msgstr ""

#: ../../topics/i18n/formatting.txt:15
# 1919b403b354483eb4a97587b5ebe977
msgid "When it's enabled, two users accessing the same content may see dates, times and numbers formatted in different ways, depending on the formats for their current locale."
msgstr ""

#: ../../topics/i18n/formatting.txt:19
# f71d8eaa9cac4910bf9c717f841d6c42
msgid "The formatting system is disabled by default. To enable it, it's necessary to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

#: ../../topics/i18n/formatting.txt:24
# 121d3f43382e4a2cbf70c986ea2c25fd
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` for convenience."
msgstr ""

#: ../../topics/i18n/formatting.txt:30
# 901b0a11294b4e2f91b4a92f6cca66c5
msgid "There is also an independent but related :setting:`USE_I18N` setting that controls if Django should activate translation. See :doc:`/topics/i18n/translation` for more details."
msgstr ""

#: ../../topics/i18n/formatting.txt:35
# 86d2d81edddd445fb5aad0625e44a05b
msgid "Locale aware input in forms"
msgstr ""

#: ../../topics/i18n/formatting.txt:37
# e596f4ab6d00414da2cc01cb44a6c3a2
msgid "When formatting is enabled, Django can use localized formats when parsing dates, times and numbers in forms. That means it tries different formats for different locales when guessing the format used by the user when inputting data on forms."
msgstr ""

#: ../../topics/i18n/formatting.txt:42
# 44218e8d87c34fa68ce2c1a10ddd17ed
msgid "Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can't use the ``%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` (abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

#: ../../topics/i18n/formatting.txt:48
# 0933ee8f23e84d31a0fbed798ab18dd7
msgid "To enable a form field to localize input and output data simply use its ``localize`` argument::"
msgstr ""

#: ../../topics/i18n/formatting.txt:58
# 65006d4cf5bc49fb9a9c5faceb693449
msgid "Controlling localization in templates"
msgstr ""

#: ../../topics/i18n/formatting.txt:60
# 700a3d03e3fc4e2b934a09d52aa1f2f1
msgid "When you have enabled formatting with :setting:`USE_L10N`, Django will try to use a locale specific format whenever it outputs a value in a template."
msgstr ""

#: ../../topics/i18n/formatting.txt:64
# a29e327404834a66a0055e3c996ce502
msgid "However, it may not always be appropriate to use localized values -- for example, if you're outputting Javascript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere."
msgstr ""

#: ../../topics/i18n/formatting.txt:70
# 96f746cbbcfa412488a1cbccd9f39048
msgid "To allow for fine control over the use of localization, Django provides the ``l10n`` template library that contains the following tags and filters."
msgstr ""

#: ../../topics/i18n/formatting.txt:75
#: ../../topics/i18n/timezones.txt:259
# 7f2e37545c5a488489cfe99ea69cb2da
# 17844a3393ad43f9a541058d85d34fbe
msgid "Template tags"
msgstr ""

#: ../../topics/i18n/formatting.txt:80
#: ../../topics/i18n/formatting.txt:116
# 41ecbc62c7a64786bfdd01ea75a28117
# 709e5753092544c9ac0fd0af68a900ea
msgid "localize"
msgstr ""

#: ../../topics/i18n/formatting.txt:84
# 86f7801f813d416a81a15caeafa06447
msgid "Enables or disables localization of template variables in the contained block."
msgstr ""

#: ../../topics/i18n/formatting.txt:87
# 3960e05e425d4c8aab8a41e6e32739fb
msgid "This tag allows a more fine grained control of localization than :setting:`USE_L10N`."
msgstr ""

#: ../../topics/i18n/formatting.txt:90
# 3bf351cb71f94f73be2a360eddad93b8
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

#: ../../topics/i18n/formatting.txt:104
# 32247bfbd6f548c2b377a5cee6ada64a
msgid "The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}`` block."
msgstr ""

#: ../../topics/i18n/formatting.txt:107
# f53fcd2451e046ed9fede82ec5427f09
msgid "See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that will do the same job on a per-variable basis."
msgstr ""

#: ../../topics/i18n/formatting.txt:111
#: ../../topics/i18n/timezones.txt:332
# bcf23bf065114cf49ea4e74048d452ae
# 5c992abf65264b10a0ac9e0931212b70
msgid "Template filters"
msgstr ""

#: ../../topics/i18n/formatting.txt:120
# ddc6937f19d0475a9650b8f00e31a8e4
msgid "Forces localization of a single value."
msgstr ""

#: ../../topics/i18n/formatting.txt:128
# b3c06e8ecfa04814b3b7c28f9b3b9217
msgid "To disable localization on a single value, use :tfilter:`unlocalize`. To control localization over a large section of a template, use the :ttag:`localize` template tag."
msgstr ""

#: ../../topics/i18n/formatting.txt:136
# 98d1dd3b1b0345ddbd2267e4a90fc123
msgid "unlocalize"
msgstr ""

#: ../../topics/i18n/formatting.txt:140
# 65d7b95da3da4673a0910af72cb7f441
msgid "Forces a single value to be printed without localization."
msgstr ""

#: ../../topics/i18n/formatting.txt:148
# e897a06146df43778d9bf8beca156438
msgid "To force localization of a single value, use :tfilter:`localize`. To control localization over a large section of a template, use the :ttag:`localize` template tag."
msgstr ""

#: ../../topics/i18n/formatting.txt:155
# fd9464404e394c6b82bec5ebb4d9feed
msgid "Creating custom format files"
msgstr ""

#: ../../topics/i18n/formatting.txt:157
# a6bd1adb0e884409a50ad1cd48183c57
msgid "Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn't exist for your locale, or because you want to overwrite some of the values."
msgstr ""

#: ../../topics/i18n/formatting.txt:161
# 8ec6251e8728480db503ac3e5345803d
msgid "To use custom formats, specify the path where you'll place format files first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to the package where format files will exist, for instance::"
msgstr ""

#: ../../topics/i18n/formatting.txt:167
# 0abf67981c8040cb9ba3d56b7c68ff6e
msgid "Files are not placed directly in this directory, but in a directory named as the locale, and must be named ``formats.py``."
msgstr ""

#: ../../topics/i18n/formatting.txt:170
# 7d689980c7a047a6b5ec2d432dc8593a
msgid "To customize the English formats, a structure like this would be needed::"
msgstr ""

#: ../../topics/i18n/formatting.txt:179
# 29c7400a892648e39cc0ad2a2396baa4
msgid "where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

#: ../../topics/i18n/formatting.txt:183
# 134f150e6ed84948ab17d9f362f73490
msgid "to use a non-breaking space (Unicode ``00A0``) as a thousand separator, instead of the default for English, a comma."
msgstr ""

#: ../../topics/i18n/formatting.txt:187
# 99462028ff3145ddb1249095f758a4e6
msgid "Limitations of the provided locale formats"
msgstr ""

#: ../../topics/i18n/formatting.txt:189
# dad2e3965d3a41b9a44b941bcfc8d506
msgid "Some locales use context-sensitive formats for numbers, which Django's localization system cannot handle automatically."
msgstr ""

#: ../../topics/i18n/formatting.txt:193
# 1ae0df833e0a4e839d3aec0934085fba
msgid "Switzerland (German)"
msgstr ""

#: ../../topics/i18n/formatting.txt:195
# 8516d641799a4c949bce10e638c0b96a
msgid "The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators."
msgstr ""

#: ../../topics/i18n/index.txt:3
# 649a5ecb212c48c5a72736dab78a2513
msgid "Internationalization and localization"
msgstr ""

#: ../../topics/i18n/index.txt:16
# f2b1e9258176476596219512f28b33de
msgid "The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience."
msgstr ""

#: ../../topics/i18n/index.txt:20
# 4c2074efe0824cc089402bf5399dea37
msgid "Django has full support for :doc:`translation of text </topics/i18n/translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

#: ../../topics/i18n/index.txt:24
# 643320eec721458f98de47a075c7c672
msgid "Essentially, Django does two things:"
msgstr ""

#: ../../topics/i18n/index.txt:26
# ff880ca7d15d4e6fae53f2e394e2b823
msgid "It allows developers and template authors to specify which parts of their apps should be translated or formatted for local languages and cultures."
msgstr ""

#: ../../topics/i18n/index.txt:28
# 2656c3bfde964b84b3ac1d8fb2983bbe
msgid "It uses these hooks to localize Web apps for particular users according to their preferences."
msgstr ""

#: ../../topics/i18n/index.txt:31
# 4c91716402834c6c9f91f3b61631e4ca
msgid "Obviously, translation depends on the target language, and formatting usually depends on the target country. These informations are provided by browsers in the ``Accept-Language`` header. However, the time zone isn't readily available."
msgstr ""

#: ../../topics/i18n/index.txt:36
# 63de76091b7545798e102efb79437cfd
msgid "Definitions"
msgstr ""

#: ../../topics/i18n/index.txt:38
# 9958d370d3ee4a8e958a3de98bc64f39
msgid "The words \"internationalization\" and \"localization\" often cause confusion; here's a simplified definition:"
msgstr ""

#: ../../topics/i18n/index.txt:44
# 517fe65d40c948f9a5b5145db48aa213
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

#: ../../topics/i18n/index.txt:47
# bc620506f3b4480780fa4461be5e64d8
msgid "Writing the translations and local formats. Usually done by translators."
msgstr ""

#: ../../topics/i18n/index.txt:49
# 14ee6acb518c4bddb244f62a1483e917
msgid "More details can be found in the `W3C Web Internationalization FAQ`_, the `Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

#: ../../topics/i18n/index.txt:57
# 6904017251e049f59c84bbd9c37b5b85
msgid "Translation and formatting are controlled by :setting:`USE_I18N` and :setting:`USE_L10N` settings respectively. However, both features involve internationalization and localization. The names of the settings are an unfortunate result of Django's history."
msgstr ""

#: ../../topics/i18n/index.txt:62
# b2bff163c0094cc886ccd644a9b316ac
msgid "Here are some other terms that will help us to handle a common language:"
msgstr ""

#: ../../topics/i18n/index.txt:67
# a0cdf4e6e78e4b0795bf97f5762622a8
msgid "A locale name, either a language specification of the form ``ll`` or a combined language and country specification of the form ``ll_CC``. Examples: ``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always is lower case and the country part in upper case. The separator is an underscore."
msgstr ""

#: ../../topics/i18n/index.txt:74
# 510760b70b1f4fb6bb32d5ca5853aebd
msgid "Represents the name of a language. Browsers send the names of the languages they accept in the ``Accept-Language`` HTTP header using this format. Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Both the language and the country parts are in lower case. The separator is a dash."
msgstr ""

#: ../../topics/i18n/index.txt:80
# a2a95899a7eb462faddf55f7d8a822c7
msgid "A message file is a plain-text file, representing a single language, that contains all available :term:`translation strings <translation string>` and how they should be represented in the given language. Message files have a ``.po`` file extension."
msgstr ""

#: ../../topics/i18n/index.txt:86
# f3e228a3337e4bcb85376c438f0ceeee
msgid "A literal that can be translated."
msgstr ""

#: ../../topics/i18n/index.txt:89
# a542ea85d6524fedad3469b81bd64fee
msgid "A format file is a Python module that defines the data formats for a given locale."
msgstr ""

#: ../../topics/i18n/timezones.txt:5
# 3702610ec0ab41dbbf72138ba25f25c4
msgid "Time zones"
msgstr ""

#: ../../topics/i18n/timezones.txt:14
# 0f6f6c31b37a4dc6acaacb200a06b680
msgid "When support for time zones is enabled, Django stores date and time information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../topics/i18n/timezones.txt:19
# fd1df575b2584ce5950b33be8180dd74
msgid "This is handy if your users live in more than one time zone and you want to display date and time information according to each user's wall clock."
msgstr ""

#: ../../topics/i18n/timezones.txt:22
# 58bfd52ef69942a787fc10b90790f209
msgid "Even if your Web site is available in only one time zone, it's still good practice to store data in UTC in your database. One main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you're working in local time, you're likely to encounter errors twice a year, when the transitions happen. (The pytz_ documentation discusses `these issues`_ in greater detail.) This probably doesn't matter for your blog, but it's a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users."
msgstr ""

#: ../../topics/i18n/timezones.txt:33
# 8666064307f54024bfe71ad2854b530c
msgid "Time zone support is disabled by default. To enable it, set :setting:`USE_TZ = True <USE_TZ>` in your settings file. Installing pytz_ is highly recommended, but not mandatory. It's as simple as:"
msgstr ""

#: ../../topics/i18n/timezones.txt:43
# 76c6822461bf4ab2bcd21668e8f5bb09
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for convenience."
msgstr ""

#: ../../topics/i18n/timezones.txt:49
# 45fd764ca0984ba7ba1c9a49adad4bcd
msgid "There is also an independent but related :setting:`USE_L10N` setting that controls whether Django should activate format localization. See :doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../topics/i18n/timezones.txt:53
# af90b3e6842c4069b406d1471f3769af
msgid "If you're wrestling with a particular problem, start with the :ref:`time zone FAQ <time-zones-faq>`."
msgstr ""

#: ../../topics/i18n/timezones.txt:57
# 8be19caf97e94466a02265d8418228ce
msgid "Concepts"
msgstr ""

#: ../../topics/i18n/timezones.txt:60
# f05d8f4f81964185bc594caecc2e2939
msgid "Naive and aware datetime objects"
msgstr ""

#: ../../topics/i18n/timezones.txt:62
# b09ca16ac9834d5e884e99f6cb872657
msgid "Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that can be used to store time zone information, represented as an instance of a subclass of :class:`datetime.tzinfo`. When this attribute is set and describes an offset, a datetime object is **aware**. Otherwise, it's **naive**."
msgstr ""

#: ../../topics/i18n/timezones.txt:67
# 181ec9dfb50f4ee795c982bfe430aaa9
msgid "You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils.timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

#: ../../topics/i18n/timezones.txt:71
# ff828ef9d6c0453faef721b51dbb1efa
msgid "When time zone support is disabled, Django uses naive datetime objects in local time. This is simple and sufficient for many use cases. In this mode, to obtain the current time, you would write::"
msgstr ""

#: ../../topics/i18n/timezones.txt:79
# 6b39abe345ed4620aed0c3807654ea4a
msgid "When time zone support is enabled, Django uses time-zone-aware datetime objects. If your code creates datetime objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

#: ../../topics/i18n/timezones.txt:90
# 76d3d5c185cf4c8ebc68f98954d37e45
msgid ":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` function that returns a naive or aware datetime object according to the value of :setting:`USE_TZ`."
msgstr ""

#: ../../topics/i18n/timezones.txt:96
# 7f98ff6b0e134a239e3baf821cf07a6c
msgid "Dealing with aware datetime objects isn't always intuitive. For instance, the ``tzinfo`` argument of the standard datetime constructor doesn't work reliably for time zones with DST. Using UTC is generally safe; if you're using other time zones, you should review the `pytz`_ documentation carefully."
msgstr ""

#: ../../topics/i18n/timezones.txt:104
# 3ca771e7e8844e57a95c6ddeefbc7129
msgid "Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, and PostgreSQL has a matching ``time with time zone`` type. However, as PostgreSQL's docs put it, this type \"exhibits properties which lead to questionable usefulness\"."
msgstr ""

#: ../../topics/i18n/timezones.txt:109
# bd781500a00845e083e8ad70a9eaf5d3
msgid "Django only supports naive time objects and will raise an exception if you attempt to save an aware time object."
msgstr ""

#: ../../topics/i18n/timezones.txt:115
# 5deb614d72dd4944b4bca2fe20f27202
msgid "Interpretation of naive datetime objects"
msgstr ""

#: ../../topics/i18n/timezones.txt:117
# badaefbcd3874395badd515352e66fd9
msgid "When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime objects, in order to preserve backwards-compatibility. When the database layer receives one, it attempts to make it aware by interpreting it in the :ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

#: ../../topics/i18n/timezones.txt:122
# c9b0b6bd10b34a299007ac472528f77a
msgid "Unfortunately, during DST transitions, some datetimes don't exist or are ambiguous. In such situations, pytz_ raises an exception. Other :class:`~datetime.tzinfo` implementations, such as the local time zone used as a fallback when pytz_ isn't installed, may raise an exception or return inaccurate results. That's why you should always create aware datetime objects when time zone support is enabled."
msgstr ""

#: ../../topics/i18n/timezones.txt:129
# 96662ffcbc174e5fb279194bbc6abc13
msgid "In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through :class:`~datetime.timedelta` arithmetic. The only datetime that's often created in application code is the current time, and :func:`timezone.now() <django.utils.timezone.now>` automatically does the right thing."
msgstr ""

#: ../../topics/i18n/timezones.txt:139
# 0d82c41357034446884bb9aa94cbbafe
msgid "Default time zone and current time zone"
msgstr ""

#: ../../topics/i18n/timezones.txt:141
# 4a08a36afa7a47749a62255c7817b559
msgid "The **default time zone** is the time zone defined by the :setting:`TIME_ZONE` setting."
msgstr ""

#: ../../topics/i18n/timezones.txt:144
# 07889cfafe0847908ed655fe2c081059
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

#: ../../topics/i18n/timezones.txt:146
# a52203715f8242aa90f5fd5bdc7bbfd7
msgid "You should set the current time zone to the end user's actual time zone with :func:`~django.utils.timezone.activate`. Otherwise, the default time zone is used."
msgstr ""

#: ../../topics/i18n/timezones.txt:152
# 4c65776865c2427ea9f830ce37573730
msgid "As explained in the documentation of :setting:`TIME_ZONE`, Django sets environment variables so that its process runs in the default time zone. This happens regardless of the value of :setting:`USE_TZ` and of the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:157
# d5b6d17bb7b24b888cc4d8d6f1cdd2c3
msgid "When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-compatibility with applications that still rely on local time. However, :ref:`as explained above <naive-datetime-objects>`, this isn't entirely reliable, and you should always work with aware datetimes in UTC in your own code. For instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :data:`~django.utils.timezone.utc`."
msgstr ""

#: ../../topics/i18n/timezones.txt:167
# 420091d12c854f13a8250d686d24e14b
msgid "Selecting the current time zone"
msgstr ""

#: ../../topics/i18n/timezones.txt:169
# 4ad7b8c083ed4cd5a8fd8e47d6ceca7e
msgid "The current time zone is the equivalent of the current :term:`locale <locale name>` for translations. However, there's no equivalent of the ``Accept-Language`` HTTP header that Django could use to determine the user's time zone automatically. Instead, Django provides :ref:`time zone selection functions <time-zone-selection-functions>`. Use them to build the time zone selection logic that makes sense for you."
msgstr ""

#: ../../topics/i18n/timezones.txt:176
# b5e44c911881445ba4774b3f82640e53
msgid "Most Web sites that care about time zones just ask users in which time zone they live and store this information in the user's profile. For anonymous users, they use the time zone of their primary audience or UTC. pytz_ provides helpers_, like a list of time zones per country, that you can use to pre-select the most likely choices."
msgstr ""

#: ../../topics/i18n/timezones.txt:182
# 9045ac220b174f99be0e6bec47a26bbf
msgid "Here's an example that stores the current timezone in the session. (It skips error handling entirely for the sake of simplicity.)"
msgstr ""

#: ../../topics/i18n/timezones.txt:185
# 5a830aae14df404e8467bf801edda5f1
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../topics/i18n/timezones.txt:195
# 13757638ef6145e7b6f098f9142f7bef
msgid "Create a view that can set the current timezone::"
msgstr ""

#: ../../topics/i18n/timezones.txt:207
# 013aed767e074e12bec11c941d8bd71c
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

#: ../../topics/i18n/timezones.txt:226
# 046c3a6570514555a1db6b3ed01a79e3
msgid "Time zone aware input in forms"
msgstr ""

#: ../../topics/i18n/timezones.txt:228
# eee4302ee355498ead609d952b76982e
msgid "When you enable time zone support, Django interprets datetimes entered in forms in the :ref:`current time zone <default-current-time-zone>` and returns aware datetime objects in ``cleaned_data``."
msgstr ""

#: ../../topics/i18n/timezones.txt:232
# b23146f050b8482392cbe7b152fbeb14
msgid "If the current time zone raises an exception for datetimes that don't exist or are ambiguous because they fall in a DST transition (the timezones provided by pytz_ do this), such datetimes will be reported as invalid values."
msgstr ""

#: ../../topics/i18n/timezones.txt:239
# afcc49e2e3644557b65b0534533dc92a
msgid "Time zone aware output in templates"
msgstr ""

#: ../../topics/i18n/timezones.txt:241
# 6f013c1d0ab94c52aff0823146837dc8
msgid "When you enable time zone support, Django converts aware datetime objects to the :ref:`current time zone <default-current-time-zone>` when they're rendered in templates. This behaves very much like :doc:`format localization </topics/i18n/formatting>`."
msgstr ""

#: ../../topics/i18n/timezones.txt:248
# 1c6c397192344310b6a6a3f71118f0c9
msgid "Django doesn't convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below."
msgstr ""

#: ../../topics/i18n/timezones.txt:253
# 55b6c855a5b74f8da4eb8ed85a9991af
msgid "Conversion to local time isn't always appropriate -- you may be generating output for computers rather than for humans. The following filters and tags, provided by the ``tz`` template tag library, allow you to control the time zone conversions."
msgstr ""

#: ../../topics/i18n/timezones.txt:264
#: ../../topics/i18n/timezones.txt:341
# 7eab17ac790d40e5a95ca68fddfebaa1
# b3be7354cee542f8946795779bb28f65
msgid "localtime"
msgstr ""

#: ../../topics/i18n/timezones.txt:266
# cb8b161171ba4a06900a4201817a653f
msgid "Enables or disables conversion of aware datetime objects to the current time zone in the contained block."
msgstr ""

#: ../../topics/i18n/timezones.txt:269
# 8a778ffb20fb47f283b66ba0271bc5ae
msgid "This tag has exactly the same effects as the :setting:`USE_TZ` setting as far as the template engine is concerned. It allows a more fine grained control of conversion."
msgstr ""

#: ../../topics/i18n/timezones.txt:273
# de318b6ef941430e8e06bbf79fd62ba7
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

#: ../../topics/i18n/timezones.txt:287
# f06b0f90adcd4f85b8325b7067ecc175
msgid "The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}`` block."
msgstr ""

#: ../../topics/i18n/timezones.txt:293
#: ../../topics/i18n/timezones.txt:367
# ee6ecd4d7fa649e5845649c0765fb0e0
# b0665c1808644b71bff296704300bb0f
msgid "timezone"
msgstr ""

#: ../../topics/i18n/timezones.txt:295
# 31415e86a0954f0a8a0d331c7e904b71
msgid "Sets or unsets the current time zone in the contained block. When the current time zone is unset, the default time zone applies."
msgstr ""

#: ../../topics/i18n/timezones.txt:312
# 86275661718a4b0b8f30760f12476a64
msgid "In the second block, ``None`` resolves to the Python object ``None`` because it isn't defined in the template context, not because it's the string ``None``."
msgstr ""

#: ../../topics/i18n/timezones.txt:319
# 3bd96a2aa15c40779f72e2210a46d466
msgid "get_current_timezone"
msgstr ""

#: ../../topics/i18n/timezones.txt:321
# cf9a667e3bdb42fc891e36c2830a6e3a
msgid "When the :func:`django.core.context_processors.tz` context processor is enabled -- by default, it is -- each :class:`~django.template.RequestContext` contains a ``TIME_ZONE`` variable that provides the name of the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:326
# 6ad5d04fbe8a41d2850e1f81b3476b32
msgid "If you don't use a :class:`~django.template.RequestContext`, you can obtain this value with the ``get_current_timezone`` tag::"
msgstr ""

#: ../../topics/i18n/timezones.txt:334
# 0264ccdf43a445e5bf2cd7fc3cfd1003
msgid "These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes."
msgstr ""

#: ../../topics/i18n/timezones.txt:343
# cc853e90cde242339bfef4864714d6c8
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:354
# 6102f44c7f784ede8c468af27d1c8c7c
msgid "utc"
msgstr ""

#: ../../topics/i18n/timezones.txt:356
# 581933098ce94b89a983fa4eb1c10f6e
msgid "Forces conversion of a single value to UTC."
msgstr ""

#: ../../topics/i18n/timezones.txt:369
# 6af81296cbba4937958626044d12f473
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

#: ../../topics/i18n/timezones.txt:371
# bbd1dada6bc14e6593b94f1939991b5b
msgid "The argument must be an instance of a :class:`~datetime.tzinfo` subclass or a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

#: ../../topics/i18n/timezones.txt:383
# 21bba9b23e9a416795d5f1273cc451ae
msgid "Migration guide"
msgstr ""

#: ../../topics/i18n/timezones.txt:385
# 4f9478d5bcd14703a68b64a7da1e88d6
msgid "Here's how to migrate a project that was started before Django supported time zones."
msgstr ""

#: ../../topics/i18n/timezones.txt:389
# 8dc155a206a142fc80e3b53d5f36c2c9
msgid "Database"
msgstr ""

#: ../../topics/i18n/timezones.txt:392
# 37d1a80be35842319dcdea6667ab9baa
msgid "PostgreSQL"
msgstr ""

#: ../../topics/i18n/timezones.txt:394
# f24f7e627e3946888ba53d6335dda050
msgid "The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In practice, this means it converts datetimes from the connection's time zone to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

#: ../../topics/i18n/timezones.txt:398
# 4edcb30a098048cdba577cdebcad260e
msgid "As a consequence, if you're using PostgreSQL, you can switch between ``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so that Django obtains correct datetimes in all cases. You don't need to perform any data conversions."
msgstr ""

#: ../../topics/i18n/timezones.txt:405
# 969717bfef8045d1821113c21f5c6093
msgid "Other databases"
msgstr ""

#: ../../topics/i18n/timezones.txt:407
# 5fdcb5fa943640738d2fe55e73705442
msgid "Other backends store datetimes without time zone information. If you switch from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data from local time to UTC -- which isn't deterministic if your local time has DST."
msgstr ""

#: ../../topics/i18n/timezones.txt:412
# 69b4a4432f784124b3986b3b0a0b2b79
msgid "Code"
msgstr ""

#: ../../topics/i18n/timezones.txt:414
# f32b73f4436143db81130fafbd2809b6
msgid "The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings file and install pytz_ (if possible). At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary."
msgstr ""

#: ../../topics/i18n/timezones.txt:419
# 078f4c8a8d824ecab21d26a016f1881b
msgid "However, these conversions may fail around DST transitions, which means you aren't getting the full benefits of time zone support yet. Also, you're likely to run into a few problems because it's impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you'll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you've created in your code."
msgstr ""

#: ../../topics/i18n/timezones.txt:426
# 861cddebfe744d5c81bc556fea3586c9
msgid "So the second step is to refactor your code wherever you instantiate datetime objects to make them aware. This can be done incrementally. :mod:`django.utils.timezone` defines some handy helpers for compatibility code: :func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone.make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

#: ../../topics/i18n/timezones.txt:435
# 3c73b21453784226b94f07f6bb45ef7c
msgid "Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

#: ../../topics/i18n/timezones.txt:440
# 1010c04a3eb64ebeb1d851ed20673052
msgid "During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file::"
msgstr ""

#: ../../topics/i18n/timezones.txt:449
# 25fd85ee51134a288f9a2118c1581623
msgid "Fixtures"
msgstr ""

#: ../../topics/i18n/timezones.txt:451
# db4aea0dc9104ecdb68b4e68a3283d2f
msgid "When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

#: ../../topics/i18n/timezones.txt:455
# 0b0d554ef380418e963b982e2c813692
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

#: ../../topics/i18n/timezones.txt:459
# 339b5e660d0d47e1ba15eca565c35813
msgid "For models with :class:`~django.db.models.DateTimeField`\\ s, this difference makes it impossible to write a fixture that works both with and without time zone support."
msgstr ""

#: ../../topics/i18n/timezones.txt:463
# 5a3edd5006b14f36b2691731439ac2c7
msgid "Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the \"naive\" format. If your project contains such fixtures, after you enable time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. To get rid of the warnings, you must convert your fixtures to the \"aware\" format."
msgstr ""

#: ../../topics/i18n/timezones.txt:468
# 2b4e5f1070914419890c0d0be38130f6
msgid "You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:`dumpdata`. Or, if they're small enough, you can simply edit them to add the UTC offset that matches your :setting:`TIME_ZONE` to each serialized datetime."
msgstr ""

#: ../../topics/i18n/timezones.txt:475
# 8c85ff9ac041450b9c23cddc6c80e744
msgid "FAQ"
msgstr ""

#: ../../topics/i18n/timezones.txt:478
# a1ccaee76bd245e1820010c4329cc59b
msgid "Setup"
msgstr ""

#: ../../topics/i18n/timezones.txt:480
# 54f3ab38291e4969bcb2a5da5950e5ba
msgid "**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:482
# 0908df362d6d4a05a988890137142e45
msgid "Yes. When time zone support is enabled, Django uses a more accurate model of local time. This shields you from subtle and unreproducible bugs around Daylight Saving Time (DST) transitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:486
# 2bcb28dec8f340108e20cfd637b6da25
msgid "In this regard, time zones are comparable to ``unicode`` in Python. At first it's hard. You get encoding and decoding errors. Then you learn the rules. And some problems disappear -- you never get mangled output again when your application receives non-ASCII input."
msgstr ""

#: ../../topics/i18n/timezones.txt:491
# 0336a7a80ce04acaba5fe1d4f178d21d
msgid "When you enable time zone support, you'll encounter some errors because you're using naive datetimes where Django expects aware datetimes. Such errors show up when running tests and they're easy to fix. You'll quickly learn how to avoid invalid operations."
msgstr ""

#: ../../topics/i18n/timezones.txt:496
# b13140a8c59847e0868d57d729fcdef5
msgid "On the other hand, bugs caused by the lack of time zone support are much harder to prevent, diagnose and fix. Anything that involves scheduled tasks or datetime arithmetic is a candidate for subtle bugs that will bite you only once or twice a year."
msgstr ""

#: ../../topics/i18n/timezones.txt:501
# e33df0d70ec54cf9862b40dbc58bf833
msgid "For these reasons, time zone support is enabled by default in new projects, and you should keep it unless you have a very good reason not to."
msgstr ""

#: ../../topics/i18n/timezones.txt:504
# edd2a23b7aca4bea97217360786640c7
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:506
# 7160099e55e24b3f8d0aa62104446e80
msgid "Maybe. You're better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa."
msgstr ""

#: ../../topics/i18n/timezones.txt:510
# 90e1b51158404f34bf2da141a4faccba
msgid "If your application connects to other systems -- for instance, if it queries a Web service -- make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!)."
msgstr ""

#: ../../topics/i18n/timezones.txt:515
# 6161f2cd79804c16a9998f26a7da3ce3
msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

#: ../../topics/i18n/timezones.txt:527
# 9b3025fa803948b49ce1409f7bd51518
msgid "(To implement this function, you must decide whether 2012-02-29 minus one year is 2011-02-28 or 2011-03-01, which depends on your business requirements.)"
msgstr ""

#: ../../topics/i18n/timezones.txt:531
# 41896bddc8174ca38a19f7f9bca46366
msgid "**Should I install pytz?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:533
# b97a73b6e9f64dbea7c56b0f01b7aa94
msgid "Yes. Django has a policy of not requiring external dependencies, and for this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

#: ../../topics/i18n/timezones.txt:536
# 7f4be7ed962c4a40825d9e08ac94dbe4
msgid "As soon as you activate time zone support, Django needs a definition of the default time zone. When pytz is available, Django loads this definition from the `tz database`_. This is the most accurate solution. Otherwise, it relies on the difference between local time and UTC, as reported by the operating system, to compute conversions. This is less reliable, especially around DST transitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:543
# 40fa39408d0c4a6a86eba1ff2107390b
msgid "Furthermore, if you want to support users in more than one time zone, pytz is the reference for time zone definitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:547
# 1df0a86ab0444d638256799fc66694da
msgid "Troubleshooting"
msgstr ""

#: ../../topics/i18n/timezones.txt:549
# cb9d4f89730843928c2ec041c28023ba
msgid "**My application crashes with** ``TypeError: can't compare offset-naive`` ``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:552
# 80cb5ac82f9c437480d57f33fc4032e2
msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

#: ../../topics/i18n/timezones.txt:563
# 95376188a12a46188f457dffb9c7027f
msgid "If you encounter this error, most likely your code is comparing these two things:"
msgstr ""

#: ../../topics/i18n/timezones.txt:566
# 8515e950243841b19af036662f093088
msgid "a datetime provided by Django -- for instance, a value read from a form or a model field. Since you enabled time zone support, it's aware."
msgstr ""

#: ../../topics/i18n/timezones.txt:568
# 6a06870a3bb840dab0a97ff00f392dd0
msgid "a datetime generated by your code, which is naive (or you wouldn't be reading this)."
msgstr ""

#: ../../topics/i18n/timezones.txt:571
# 92e4cc2f912d41c9a28f8a6d7e572f3d
msgid "Generally, the correct solution is to change your code to use an aware datetime instead."
msgstr ""

#: ../../topics/i18n/timezones.txt:574
# 080d4fa076ff4d719a8c5a4a52b50f09
msgid "If you're writing a pluggable application that's expected to work independently of the value of :setting:`USE_TZ`, you may find :func:`django.utils.timezone.now` useful. This function returns the current date and time as a naive datetime when ``USE_TZ = False`` and as an aware datetime when ``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as needed."
msgstr ""

#: ../../topics/i18n/timezones.txt:581
# c7ab0e3af76544d189e246029b431c43
msgid "**I see lots of** ``RuntimeWarning: DateTimeField received a naive datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` **-- is that bad?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:585
# 5d5c206f98f8488fb4ba5286b284a708
msgid "When time zone support is enabled, the database layer expects to receive only aware datetimes from your code. This warning occurs when it receives a naive datetime. This indicates that you haven't finished porting your code for time zone support. Please refer to the :ref:`migration guide <time-zones-migration-guide>` for tips on this process."
msgstr ""

#: ../../topics/i18n/timezones.txt:591
# 870261773d704a069ec49749f50d331e
msgid "In the meantime, for backwards compatibility, the datetime is considered to be in the default time zone, which is generally what you expect."
msgstr ""

#: ../../topics/i18n/timezones.txt:594
# 1166525e16ad4488b45fb3ba8eef1ae3
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

#: ../../topics/i18n/timezones.txt:596
# f4f5d7783b6d454aabf674cd2d540c5c
msgid "If you've always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its :meth:`~datetime.datetime.date` method. You also consider that a :class:`~datetime.date` is a lot like a :class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

#: ../../topics/i18n/timezones.txt:601
# 70c16b6e8d554b5a9d5539297936e67e
msgid "None of this is true in a time zone aware environment::"
msgstr ""

#: ../../topics/i18n/timezones.txt:619
# 0a9445e25b644a279580826d28d114c7
msgid "As this example shows, the same datetime has a different date, depending on the time zone in which it is represented. But the real problem is more fundamental."
msgstr ""

#: ../../topics/i18n/timezones.txt:623
# df49b306b6ea4c528c4614a59a65e48a
msgid "A datetime represents a **point in time**. It's absolute: it doesn't depend on anything. On the contrary, a date is a **calendaring concept**. It's a period of time whose bounds depend on the time zone in which the date is considered. As you can see, these two concepts are fundamentally different, and converting a datetime to a date isn't a deterministic operation."
msgstr ""

#: ../../topics/i18n/timezones.txt:629
# c1e4f83637b64cada9ae66f76a7ac45d
msgid "What does this mean in practice?"
msgstr ""

#: ../../topics/i18n/timezones.txt:631
# 9bcb1bae8ae44ddfb3833353918a6d93
msgid "Generally, you should avoid converting a :class:`~datetime.datetime` to :class:`~datetime.date`. For instance, you can use the :tfilter:`date` template filter to only show the date part of a datetime. This filter will convert the datetime into the current time zone before formatting it, ensuring the results appear correctly."
msgstr ""

#: ../../topics/i18n/timezones.txt:637
# 5cd2c83fcf6d40c0b24405006afb1233
msgid "If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone::"
msgstr ""

#: ../../topics/i18n/timezones.txt:654
# c1b93c3d5f9d4968b91e50a38448a3a5
msgid "Usage"
msgstr ""

#: ../../topics/i18n/timezones.txt:656
# 96fd13f1cf1a4911b223f67b89baa9b3
msgid "**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:660
# c3a751bd64344e8b8f0e2e7f5bf14a50
msgid "This is exactly what pytz_ is for."
msgstr ""

#: ../../topics/i18n/timezones.txt:668
# c29ed9318ef64338a78ccd7559cd259e
msgid "Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` API. Also, you may want to catch :exc:`~pytz.InvalidTimeError`. The documentation of pytz contains `more examples`_. You should review it before attempting to manipulate aware datetimes."
msgstr ""

#: ../../topics/i18n/timezones.txt:673
# e2dfe33225e046b79df3de624ae04f58
msgid "**How can I obtain the current time in the local time zone?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:675
# c1a47a2052464f53b35fcfafe1135b33
msgid "Well, the first question is, do you really need to?"
msgstr ""

#: ../../topics/i18n/timezones.txt:677
# 0660a9f4c15e4885951179cb268d06b2
msgid "You should only use local time when you're interacting with humans, and the template layer provides :ref:`filters and tags <time-zones-in-templates>` to convert datetimes to the time zone of your choice."
msgstr ""

#: ../../topics/i18n/timezones.txt:681
# 2fb75a841ecf45e59a83393047183761
msgid "Furthermore, Python knows how to compare aware datetimes, taking into account UTC offsets when necessary. It's much easier (and possibly faster) to write all your model and view code in UTC. So, in most circumstances, the datetime in UTC returned by :func:`django.utils.timezone.now` will be sufficient."
msgstr ""

#: ../../topics/i18n/timezones.txt:687
# 1ea667b03fc04b01b31eed0b3ba61c7a
msgid "For the sake of completeness, though, if you really wanted the current time in the local time zone, here's how you would obtain it::"
msgstr ""

#: ../../topics/i18n/timezones.txt:695
# e29168c83cc94f1cb8a29ab5bbbb4bc0
msgid "In this example, pytz_ is installed and :setting:`TIME_ZONE` is ``\"Europe/Paris\"``."
msgstr ""

#: ../../topics/i18n/timezones.txt:698
# a1ede9c5e8714e1e864513f8815556a8
msgid "**How can I see all available time zones?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:700
# e13b834b11184c6f962a585744784afe
msgid "pytz_ provides helpers_, including a list of current time zones and a list of all available time zones -- some of which are only of historical interest."
msgstr ""

#: ../../topics/i18n/translation.txt:3
# 0522113b410e4a46a75a2dad9ba60705
msgid "Translation"
msgstr ""

#: ../../topics/i18n/translation.txt:10
# 6f49be0f67e443c9bf56efc4d1c38b41
msgid "In order to make a Django project translatable, you have to add a minimal amount of hooks to your Python code and templates. These hooks are called :term:`translation strings <translation string>`. They tell Django: \"This text should be translated into the end user's language, if a translation for this text is available in that language.\" It's your responsibility to mark translatable strings; the system can only translate strings it knows about."
msgstr ""

#: ../../topics/i18n/translation.txt:17
# eca2d30f65a2415a8dfe12e66cffeb57
msgid "Django then provides utilities to extract the translation strings into a :term:`message file`. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset."
msgstr ""

#: ../../topics/i18n/translation.txt:23
# 415f13e92b7b41ac91e867cf3c0a4907
msgid "Once this is done, Django takes care of translating Web apps on the fly in each available language, according to users' language preferences."
msgstr ""

#: ../../topics/i18n/translation.txt:26
# 3ef1a7fb0b214d75b1a6b9289fe136b4
msgid "Django's internationalization hooks are on by default, and that means there's a bit of i18n-related overhead in certain places of the framework. If you don't use internationalization, you should take the two seconds to set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery. You'll probably also want to remove ``'django.core.context_processors.i18n'`` from your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:36
# 321d73d75df34c3cb95ba28f4f37bfa3
msgid "There is also an independent but related :setting:`USE_L10N` setting that controls if Django should implement format localization. See :doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:41
# 7a0bc5ba6b1947388e7d2e5ab868068d
msgid "Internationalization: in Python code"
msgstr ""

#: ../../topics/i18n/translation.txt:44
# 639141e158524ad9bb91181a22b127e2
msgid "Standard translation"
msgstr ""

#: ../../topics/i18n/translation.txt:46
# bd31a95a5d234ea48011df4c15d40e21
msgid "Specify a translation string by using the function :func:`~django.utils.translation.ugettext`. It's convention to import this as a shorter alias, ``_``, to save typing."
msgstr ""

#: ../../topics/i18n/translation.txt:51
# 52b8020c12b245fe8634faed6e6ac847
msgid "Python's standard library ``gettext`` module installs ``_()`` into the global namespace, as an alias for ``gettext()``. In Django, we have chosen not to follow this practice, for a couple of reasons:"
msgstr ""

#: ../../topics/i18n/translation.txt:55
# c5678f7697a540ffab522d73b065c3a1
msgid "For international character set (Unicode) support, :func:`~django.utils.translation.ugettext` is more useful than ``gettext()``. Sometimes, you should be using :func:`~django.utils.translation.ugettext_lazy` as the default translation method for a particular file. Without ``_()`` in the global namespace, the developer has to think about which is the most appropriate translation function."
msgstr ""

#: ../../topics/i18n/translation.txt:63
# e70cb4232bc7423ba6a3a427be59eb4c
msgid "The underscore character (``_``) is used to represent \"the previous result\" in Python's interactive shell and doctest tests. Installing a global ``_()`` function causes interference. Explicitly importing ``ugettext()`` as ``_()`` avoids this problem."
msgstr ""

#: ../../topics/i18n/translation.txt:70
# 7bd41ad8b0024eb8ac76579f0acb2e98
msgid "In this example, the text ``\"Welcome to my site.\"`` is marked as a translation string::"
msgstr ""

#: ../../topics/i18n/translation.txt:79
# 3523dc7b965948a58c284ec84b14d88d
msgid "Obviously, you could code this without using the alias. This example is identical to the previous one::"
msgstr ""

#: ../../topics/i18n/translation.txt:88
# 79cdc03f36d0482a9b544b49f06dad0c
msgid "Translation works on computed values. This example is identical to the previous two::"
msgstr ""

#: ../../topics/i18n/translation.txt:96
# 4b17dabfb3a74496a334c8c8e42e38ff
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

#: ../../topics/i18n/translation.txt:103
# 75536bb993ba4c4090c3f45c32745840
msgid "(The caveat with using variables or computed values, as in the previous two examples, is that Django's translation-string-detecting utility, :djadmin:`django-admin.py makemessages <makemessages>`, won't be able to find these strings. More on :djadmin:`makemessages` later.)"
msgstr ""

#: ../../topics/i18n/translation.txt:108
# 9878caaae0064985b938d0d5ad0a7ae5
msgid "The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:115
# e074f02854574e6a9c5dc5d160a32066
msgid "This technique lets language-specific translations reorder the placeholder text. For example, an English translation may be ``\"Today is November 26.\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- with the the month and the day placeholders swapped."
msgstr ""

#: ../../topics/i18n/translation.txt:120
# 0e200905e20c4b69b51599dcb3528586
msgid "For this reason, you should use named-string interpolation (e.g., ``%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) whenever you have more than a single parameter. If you used positional interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

#: ../../topics/i18n/translation.txt:128
# dbfc69d07a05480e94bac51bb3b1fcbc
msgid "Comments for translators"
msgstr ""

#: ../../topics/i18n/translation.txt:132
# 1ddba168ad784a948d13e28a8c0432f7
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../topics/i18n/translation.txt:140
# a5bca79a84a64958860048752a2e07c0
msgid "This also works in templates with the :ttag:`comment` tag:"
msgstr ""

#: ../../topics/i18n/translation.txt:146
# 23452ae688994396936248cece284413
msgid "The comment will then appear in the resulting ``.po`` file and should also be displayed by most translation tools."
msgstr ""

#: ../../topics/i18n/translation.txt:150
# a2174097c10d4005beee7788b2a1e809
msgid "Marking strings as no-op"
msgstr ""

#: ../../topics/i18n/translation.txt:152
# b6432dcd774540b9b33491d257de0f22
msgid "Use the function :func:`django.utils.translation.ugettext_noop()` to mark a string as a translation string without translating it. The string is later translated from a variable."
msgstr ""

#: ../../topics/i18n/translation.txt:156
# 3976feec81ff43509cf8f02a58438fd7
msgid "Use this if you have constant strings that should be stored in the source language because they are exchanged over systems or users -- such as strings in a database -- but should be translated at the last possible point in time, such as when the string is presented to the user."
msgstr ""

#: ../../topics/i18n/translation.txt:162
# 5fa126c4b81646d3a07d25ea905f73ca
msgid "Pluralization"
msgstr ""

#: ../../topics/i18n/translation.txt:164
# 8533dbcd76c246af8bb79012b8bf8c02
msgid "Use the function :func:`django.utils.translation.ungettext()` to specify pluralized messages."
msgstr ""

#: ../../topics/i18n/translation.txt:167
# ed59e0528fad414f8744ca9a2d272b08
msgid "``ungettext`` takes three arguments: the singular translation string, the plural translation string and the number of objects."
msgstr ""

#: ../../topics/i18n/translation.txt:170
# 03f881a94c8c4bd296117d14f4864847
msgid "This function is useful when you need your Django application to be localizable to languages where the number and complexity of `plural forms <http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is greater than the two forms used in English ('object' for the singular and 'objects' for all the cases where ``count`` is different from one, irrespective of its value.)"
msgstr ""

#: ../../topics/i18n/translation.txt:190
# afd4a34261ba44898ca91aa4752d3930
msgid "In this example the number of objects is passed to the translation languages as the ``count`` variable."
msgstr ""

#: ../../topics/i18n/translation.txt:193
# b22a8f93ac3543c8aec270a351fe5fb9
msgid "Lets see a slightly more complex usage example::"
msgstr ""

#: ../../topics/i18n/translation.txt:212
# 03629bb877fa4a338ed236febdde307c
msgid "Here we reuse localizable, hopefully already translated literals (contained in the ``verbose_name`` and ``verbose_name_plural`` model ``Meta`` options) for other parts of the sentence so all of it is consistently based on the cardinality of the elements at play."
msgstr ""

#: ../../topics/i18n/translation.txt:221
# e8b8d71295f8409eb08d3b73e9170b09
msgid "When using this technique, make sure you use a single name for every extrapolated variable included in the literal. In the example above note how we used the ``name`` Python variable in both translation strings. This example would fail::"
msgstr ""

#: ../../topics/i18n/translation.txt:241
# 3a2b6d752f4649b184b88d281f791748
msgid "You would get an error when running :djadmin:`django-admin.py compilemessages <compilemessages>`::"
msgstr ""

#: ../../topics/i18n/translation.txt:249
# 2efc61e01bb54d9081a4e673ddd811bf
msgid "Contextual markers"
msgstr ""

#: ../../topics/i18n/translation.txt:253
# cf4f8cdb98df40cf8d00864f8651f01f
msgid "Sometimes words have several meanings, such as ``\"May\"`` in English, which refers to a month name and to a verb. To enable translators to translate these words correctly in different contexts, you can use the :func:`django.utils.translation.pgettext()` function, or the :func:`django.utils.translation.npgettext()` function if the string needs pluralization. Both take a context string as the first variable."
msgstr ""

#: ../../topics/i18n/translation.txt:260
# 91e7012912b14c008f99d4209fa2c894
msgid "In the resulting ``.po`` file, the string will then appear as often as there are different contextual markers for the same string (the context will appear on the ``msgctxt`` line), allowing the translator to give a different translation for each of them."
msgstr ""

#: ../../topics/i18n/translation.txt:271
# 4c591fe1fda04d96a499cf48e6679e7f
msgid "or::"
msgstr ""

#: ../../topics/i18n/translation.txt:279
# 9f790c6065944c8c8be6f2153bf077d2
msgid "will appear in the ``.po`` file as:"
msgstr ""

#: ../../topics/i18n/translation.txt:289
# 2f55f638cd64415682cb56c6b51de938
msgid "Contextual markers are also supported by the :ttag:`trans` and :ttag:`blocktrans` template tags."
msgstr ""

#: ../../topics/i18n/translation.txt:295
# cb3e30ad7ee444599ab4bdb35e69f97f
msgid "Lazy translation"
msgstr ""

#: ../../topics/i18n/translation.txt:297
# f9230202862b4f7d8b1b038ecfabd4ab
msgid "Use the lazy versions of translation functions in :mod:`django.utils.translation` (easily recognizable by the ``lazy`` suffix in their names) to translate strings lazily -- when the value is accessed rather than when they're called."
msgstr ""

#: ../../topics/i18n/translation.txt:302
# 379c41a5ccd34ddcb4853b49f104d473
msgid "These functions store a lazy reference to the string -- not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering."
msgstr ""

#: ../../topics/i18n/translation.txt:306
# 53d1d44db7fd4b61bdcfdc7bfd57f8bc
msgid "This is essential when calls to these functions are located in code paths that are executed at module load time."
msgstr ""

#: ../../topics/i18n/translation.txt:309
# e1759563489342b593bc68a6a87cb20e
msgid "This is something that can easily happen when defining models, forms and model forms, because Django implements these such that their fields are actually class-level attributes. For that reason, make sure to use lazy translations in the following cases:"
msgstr ""

#: ../../topics/i18n/translation.txt:315
# 4c41ed82d61b4141893651aed31386cf
msgid "Model fields and relationships ``verbose_name`` and ``help_text`` option values"
msgstr ""

#: ../../topics/i18n/translation.txt:317
# 454522f387ce472990b584ec1480ba29
msgid "For example, to translate the help text of the *name* field in the following model, do the following::"
msgstr ""

#: ../../topics/i18n/translation.txt:325
# 6138b1a290464495b66b9832dae68732
msgid "You can mark names of ``ForeignKey``, ``ManyTomanyField`` or ``OneToOneField`` relationship as translatable by using their ``verbose_name`` options::"
msgstr ""

#: ../../topics/i18n/translation.txt:334
# 36f8e178367b4e559115a8dbb10f1c00
msgid "Just like you would do in :attr:`~django.db.models.Options.verbose_name` you should provide a lowercase verbose name text for the relation as Django will automatically titlecase it when required."
msgstr ""

#: ../../topics/i18n/translation.txt:339
# 5d36594b1e5a43cf8806a6b83e374274
msgid "Model verbose names values"
msgstr ""

#: ../../topics/i18n/translation.txt:341
# 43c55d8e9a8541268abdb6ce509ee1b7
msgid "It is recommended to always provide explicit :attr:`~django.db.models.Options.verbose_name` and :attr:`~django.db.models.Options.verbose_name_plural` options rather than relying on the fallback English-centric and somewhat naïve determination of verbose names Django performs bu looking at the model's class name::"
msgstr ""

#: ../../topics/i18n/translation.txt:357
# 697ad4e8ae75475982f4c2fa0dfdee32
msgid "Model methods ``short_description`` attribute values"
msgstr ""

#: ../../topics/i18n/translation.txt:359
# 7fa64f7d91e1422a923a8d1a95f123ca
msgid "For model methods, you can provide translations to Django and the admin site with the ``short_description`` attribute::"
msgstr ""

#: ../../topics/i18n/translation.txt:373
# 82d592cc1db64e379d5c2211b7d0c13f
msgid "Working with lazy translation objects"
msgstr ""

#: ../../topics/i18n/translation.txt:375
# ae40ae4c8020429ca2673fadd447180f
msgid "The result of a ``ugettext_lazy()`` call can be used wherever you would use a unicode string (an object with type ``unicode``) in Python. If you try to use it where a bytestring (a ``str`` object) is expected, things will not work as expected, since a ``ugettext_lazy()`` object doesn't know how to convert itself to a bytestring. You can't use a unicode string inside a bytestring, either, so this is consistent with normal Python behavior. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:389
# a6fe64bf6b104212b7f15b090f2914a4
msgid "If you ever see output that looks like ``\"hello <django.utils.functional...>\"``, you have tried to insert the result of ``ugettext_lazy()`` into a bytestring. That's a bug in your code."
msgstr ""

#: ../../topics/i18n/translation.txt:393
# c0721730338b4e93a4dd5d938a262d54
msgid "If you don't like the long ``ugettext_lazy`` name, you can just alias it as ``_`` (underscore), like so::"
msgstr ""

#: ../../topics/i18n/translation.txt:401
# 3987b86fca8749e788be5c292071d67f
msgid "Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models and utility functions is a common operation. When you're working with these objects elsewhere in your code, you should ensure that you don't accidentally convert them to strings, because they should be converted as late as possible (so that the correct locale is in effect). This necessitates the use of the helper function described next."
msgstr ""

#: ../../topics/i18n/translation.txt:409
# 58ef499f820e491bafe1030484812e80
msgid "Joining strings: string_concat()"
msgstr ""

#: ../../topics/i18n/translation.txt:411
# ae4a968312dd41d8b66cbb39bd3c6208
msgid "Standard Python string joins (``''.join([...])``) will not work on lists containing lazy translation objects. Instead, you can use :func:`django.utils.translation.string_concat()`, which creates a lazy object that concatenates its contents *and* converts them to strings only when the result is included in a string. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:423
# e521f2cd61ac44e7b8d08fdd2a5c03b2
msgid "In this case, the lazy translations in ``result`` will only be converted to strings when ``result`` itself is used in a string (usually at template rendering time)."
msgstr ""

#: ../../topics/i18n/translation.txt:428
# 13dac522224b462fa9ada4e926c67f98
msgid "Localized names of languages"
msgstr ""

#: ../../topics/i18n/translation.txt:434
# 319e9b2b763e45c584f546fdabb32799
msgid "The ``get_language_info()`` function provides detailed information about languages::"
msgstr ""

#: ../../topics/i18n/translation.txt:442
# 2926b9ca5f124afdb4b88ec49cc43cab
msgid "The ``name`` and ``name_local`` attributes of the dictionary contain the name of the language in English and in the language itself, respectively.  The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

#: ../../topics/i18n/translation.txt:446
# e353f74ebc424ad1b1a445dde688c6c5
msgid "The source of the language information is the ``django.conf.locale`` module. Similar access to this information is available for template code. See below."
msgstr ""

#: ../../topics/i18n/translation.txt:452
# 809b2205d6bc434cb8adeebcfd1631c2
msgid "Internationalization: in template code"
msgstr ""

#: ../../topics/i18n/translation.txt:456
# 8f03f62ac87f4d98af9449ae8e2e9765
msgid "Translations in :doc:`Django templates </topics/templates>` uses two template tags and a slightly different syntax than in Python code. To give your template access to these tags, put ``{% load i18n %}`` toward the top of your template."
msgstr ""

#: ../../topics/i18n/translation.txt:463
# 4667064a711c469bb209801f15a05e0b
msgid "``trans`` template tag"
msgstr ""

#: ../../topics/i18n/translation.txt:465
# c068e9914f87426fa1e9692ea58e50e3
msgid "The ``{% trans %}`` template tag translates either a constant string (enclosed in single or double quotes) or variable content::"
msgstr ""

#: ../../topics/i18n/translation.txt:471
# 7ccc06fdd5184be2945873136c2e3272
msgid "If the ``noop`` option is present, variable lookup still takes place but the translation is skipped. This is useful when \"stubbing out\" content that will require translation in the future::"
msgstr ""

#: ../../topics/i18n/translation.txt:477
# 87714a3ad301407e9424d5240cf7a65b
msgid "Internally, inline translations use an :func:`~django.utils.translation.ugettext` call."
msgstr ""

#: ../../topics/i18n/translation.txt:480
# 8a311f19156e4891a69e00f81231b082
msgid "In case a template var (``myvar`` above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs."
msgstr ""

#: ../../topics/i18n/translation.txt:484
# 055dc314e27e4596904a74598f1799d6
msgid "It's not possible to mix a template variable inside a string within ``{% trans %}``. If your translations require strings with variables (placeholders), use ``{% blocktrans %}`` instead."
msgstr ""

#: ../../topics/i18n/translation.txt:490
# 2c1095a8abd14aed86f529428ca93357
msgid "If you'd like to retrieve a translated string without displaying it, you can use the following syntax::"
msgstr ""

#: ../../topics/i18n/translation.txt:498
# 561673735be848c6b3962a3230de263e
msgid "In practice you'll use this to get strings that are used in multiple places or should be used as arguments for other template tags or filters::"
msgstr ""

#: ../../topics/i18n/translation.txt:516
# 8ccd9878be0f40f38dbf30fdc33639d0
msgid "``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` using the ``context`` keyword:"
msgstr ""

#: ../../topics/i18n/translation.txt:526
# 42f56511998e4f36976dc6b30a368bc0
msgid "``blocktrans`` template tag"
msgstr ""

#: ../../topics/i18n/translation.txt:531
# 41ee89b1628f4ea1852d7afe475b01b8
msgid "Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to mark complex sentences consisting of literals and variable content for translation by making use of placeholders::"
msgstr ""

#: ../../topics/i18n/translation.txt:537
# 4379caaa0ea04379bc1944484cd429e8
msgid "To translate a template expression -- say, accessing object attributes or using template filters -- you need to bind the expression to a local variable for use within the translation block. Examples::"
msgstr ""

#: ../../topics/i18n/translation.txt:549
# eab7db5374864ed683735ae0bf737941
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

#: ../../topics/i18n/translation.txt:555
# ac7cc3e8cfdf4a5bb0bf63d00f36319c
msgid "The previous more verbose format is still supported: ``{% blocktrans with book|title as book_t and author|title as author_t %}``"
msgstr ""

#: ../../topics/i18n/translation.txt:560
# fc6dddb01bf744f89abead0f53ebe669
msgid "If resolving one of the block arguments fails, blocktrans will fall back to the default language by deactivating the currently active language temporarily with the :func:`~django.utils.translation.deactivate_all` function."
msgstr ""

#: ../../topics/i18n/translation.txt:565
# 2186ef1d5cfa431db8d4921d0ff04dca
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

#: ../../topics/i18n/translation.txt:567
# 4e9900242a8d428cb02cd666d02da619
msgid "Designate and bind a counter value with the name ``count``. This value will be the one used to select the right plural form."
msgstr ""

#: ../../topics/i18n/translation.txt:570
# 70114d4688b74b3cb873f73903a13bf2
msgid "Specify both the singular and plural forms separating them with the ``{% plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` tags."
msgstr ""

#: ../../topics/i18n/translation.txt:582
# 6698850b40d346d4919e6115b2eaa8e6
msgid "A more complex example::"
msgstr ""

#: ../../topics/i18n/translation.txt:590
# 425023a598bc4bd6a61b747616d0e3c1
msgid "When you use both the pluralization feature and bind values to local variables in addition to the counter value, keep in mind that the ``blocktrans`` construct is internally converted to an ``ungettext`` call. This means the same :ref:`notes regarding ungettext variables <pluralization-var-notes>` apply."
msgstr ""

#: ../../topics/i18n/translation.txt:596
# 7868c22cf1054936aafd58e9babfbe12
msgid "Reverse URL lookups cannot be carried out within the ``blocktrans`` and should be retrieved (and stored) beforehand::"
msgstr ""

#: ../../topics/i18n/translation.txt:606
# a260e82a233940e8a5dec50f449b69a5
msgid "``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-markers>` using the ``context`` keyword:"
msgstr ""

#: ../../topics/i18n/translation.txt:616
# 323be8ab1e3b4f48807b6ddd630c2e94
msgid "Other tags"
msgstr ""

#: ../../topics/i18n/translation.txt:618
# 65f8c938dde244ddb9ea3f63da3b22fc
msgid "Each ``RequestContext`` has access to three translation-specific variables:"
msgstr ""

#: ../../topics/i18n/translation.txt:620
# f76a9d50515b46b48e0bc22cb2394c8b
msgid "``LANGUAGES`` is a list of tuples in which the first element is the :term:`language code` and the second is the language name (translated into the currently active locale)."
msgstr ""

#: ../../topics/i18n/translation.txt:624
# e92d46d7f96b4a66aa4765cce0039aab
msgid "``LANGUAGE_CODE`` is the current user's preferred language, as a string. Example: ``en-us``. (See :ref:`how-django-discovers-language-preference`.)"
msgstr ""

#: ../../topics/i18n/translation.txt:627
# 8bf0267d329448d696445d883ff7fd98
msgid "``LANGUAGE_BIDI`` is the current locale's direction. If True, it's a right-to-left language, e.g.: Hebrew, Arabic. If False it's a left-to-right language, e.g.: English, French, German etc."
msgstr ""

#: ../../topics/i18n/translation.txt:631
# 62c5b45fa29045708128119ca3f1206f
msgid "If you don't use the ``RequestContext`` extension, you can get those values with three tags::"
msgstr ""

#: ../../topics/i18n/translation.txt:638
# 6f92ba4d7ae24aff911f0d9576f2671d
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

#: ../../topics/i18n/translation.txt:640
# 802a5bb8711b4d9983a7e3bbeadf2c34
msgid "Translation hooks are also available within any template block tag that accepts constant strings. In those cases, just use ``_()`` syntax to specify a translation string::"
msgstr ""

#: ../../topics/i18n/translation.txt:646
# 34414fe964e64c6eaa32615ca30f2a7a
msgid "In this case, both the tag and the filter will see the already-translated string, so they don't need to be aware of translations."
msgstr ""

#: ../../topics/i18n/translation.txt:650
# a8c3dd2a2d944e3590a2214868efd938
msgid "In this example, the translation infrastructure will be passed the string ``\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The translated string will need to contain the comma so that the filter parsing code knows how to split up the arguments. For example, a German translator might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the comma intact)."
msgstr ""

#: ../../topics/i18n/translation.txt:659
# db5c78aa296948938d56f7a288b23518
msgid "You can also retrieve information about any of the available languages using provided template tags and filters. To get information about a single language, use the ``{% get_language_info %}`` tag::"
msgstr ""

#: ../../topics/i18n/translation.txt:666
# 9299210e59ee4bcb9a10c4b4f4e5c531
msgid "You can then access the information::"
msgstr ""

#: ../../topics/i18n/translation.txt:673
# 6b52f29a43ad44e1b4b87257f9cf2834
msgid "You can also use the ``{% get_language_info_list %}`` template tag to retrieve information for a list of languages (e.g. active languages as specified in :setting:`LANGUAGES`). See :ref:`the section about the set_language redirect view <set_language-redirect-view>` for an example of how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

#: ../../topics/i18n/translation.txt:679
# 05ded58e0ec5448892d0c825cbcd40d4
msgid "In addition to :setting:`LANGUAGES` style nested tuples, ``{% get_language_info_list %}`` supports simple lists of language codes. If you do this in your view:"
msgstr ""

#: ../../topics/i18n/translation.txt:689
# 41f2667498784295b3807d093d4143f7
msgid "you can iterate over those languages in the template::"
msgstr ""

#: ../../topics/i18n/translation.txt:694
# 848513e4fabf4e5793d0eb64f95375cb
msgid "There are also simple filters available for convenience:"
msgstr ""

#: ../../topics/i18n/translation.txt:696
# 2a8edb653f834d6b82bbe0924f20b83f
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

#: ../../topics/i18n/translation.txt:697
# ec05fb1342764afbaaed668088f85a6b
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

#: ../../topics/i18n/translation.txt:698
# fc755111735a4065bc9b0566adef297a
msgid "``{{ LANGUAGE_CODE|bidi }}`` (False)"
msgstr ""

#: ../../topics/i18n/translation.txt:703
# 0e30611f0adf4357a66cd26b2aec91ae
msgid "Internationalization: in JavaScript code"
msgstr ""

#: ../../topics/i18n/translation.txt:707
# f155db8343e94ed18571f5327c458131
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

#: ../../topics/i18n/translation.txt:709
# 219732b30d574851b35b2e22286e6e94
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

#: ../../topics/i18n/translation.txt:711
# a4b71e8fea03441c86af367bec0282e8
msgid "JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need to be delivered by the server."
msgstr ""

#: ../../topics/i18n/translation.txt:714
# afd55c1b04044ed58923bf14b924cf35
msgid "The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

#: ../../topics/i18n/translation.txt:717
# 42e59842f1144abd9e87ab6729d55849
msgid "Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call ``gettext``, etc., from within JavaScript."
msgstr ""

#: ../../topics/i18n/translation.txt:724
# b1cf763751c84e348ba431f7043dcd5d
msgid "The ``javascript_catalog`` view"
msgstr ""

#: ../../topics/i18n/translation.txt:730
# f70f9af196d141919587122980a89806
msgid "The main solution to these problems is the :meth:`django.views.i18n.javascript_catalog` view, which sends out a JavaScript code library with functions that mimic the ``gettext`` interface, plus an array of translation strings. Those translation strings are taken from applications or Django core, according to what you specify in either the ``info_dict`` or the URL. Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""

#: ../../topics/i18n/translation.txt:737
# 14c532d25d714ae59106b1c05a9ba00e
msgid "You hook it up like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:747
# 40a649103b2e433c8750d14346b284ec
msgid "Each string in ``packages`` should be in Python dotted-package syntax (the same format as the strings in :setting:`INSTALLED_APPS`) and should refer to a package that contains a ``locale`` directory. If you specify multiple packages, all those catalogs are merged into one catalog. This is useful if you have JavaScript that uses strings from different applications."
msgstr ""

#: ../../topics/i18n/translation.txt:753
# ac9b9469acbe4f2d8b668a18895a56e7
msgid "The precedence of translations is such that the packages appearing later in the ``packages`` argument have higher precedence than the ones appearing at the beginning, this is important in the case of clashing translations for the same literal."
msgstr ""

#: ../../topics/i18n/translation.txt:758
# 5902124389474efbbc661fbc33132b5a
msgid "By default, the view uses the ``djangojs`` gettext domain. This can be changed by altering the ``domain`` argument."
msgstr ""

#: ../../topics/i18n/translation.txt:761
# 35dec5a515fb409e8c1d37289b089720
msgid "You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

#: ../../topics/i18n/translation.txt:767
# 91a9c667c0db4195bce68ffc2e6eda33
msgid "With this, you specify the packages as a list of package names delimited by '+' signs in the URL. This is especially useful if your pages use code from different apps and this changes often and you don't want to pull in one big catalog file. As a security measure, these values can only be either ``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:773
# b8f95fcf85f54db3bc203ae9f12e5a20
msgid "The JavaScript translations found in the paths listed in the :setting:`LOCALE_PATHS` setting are also always included. To keep consistency with the translations lookup order algorithm used for Python and templates, the directories listed in :setting:`LOCALE_PATHS` have the highest precedence with the ones appearing first having higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:785
# 7b88ec0c1dce4f6491836e036e1eead4
msgid "Using the JavaScript translation catalog"
msgstr ""

#: ../../topics/i18n/translation.txt:789
# 2b84ea993d824d59b094a305babd06bf
msgid "To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

#: ../../topics/i18n/translation.txt:795
# 4f00ce983b92440a9fd9cc96fb74ccbe
msgid "This uses reverse URL lookup to find the URL of the JavaScript catalog view. When the catalog is loaded, your JavaScript code can use the standard ``gettext`` interface to access it::"
msgstr ""

#: ../../topics/i18n/translation.txt:801
# 65341ced52814e4c859103e6a93a0c7d
msgid "There is also an ``ngettext`` interface::"
msgstr ""

#: ../../topics/i18n/translation.txt:807
# 1a53064d45b7481ebd4a15856f6e686e
msgid "and even a string interpolation function::"
msgstr ""

#: ../../topics/i18n/translation.txt:811
# 374fac90e5254bad8bcf6025f499134d
msgid "The interpolation syntax is borrowed from Python, so the ``interpolate`` function supports both positional and named interpolation:"
msgstr ""

#: ../../topics/i18n/translation.txt:814
# e05dda7cc6614462a6d2c2b5f4ffecdc
msgid "Positional interpolation: ``obj`` contains a JavaScript Array object whose elements values are then sequentially interpolated in their corresponding ``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:824
# 425e54c048dd4b349b401bb48202c33f
msgid "Named interpolation: This mode is selected by passing the optional boolean ``named`` parameter as true. ``obj`` contains a JavaScript object or associative array. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:837
# 7d4c0d0aa46e4899b42e35e63af1e173
msgid "You shouldn't go over the top with string interpolation, though: this is still JavaScript, so the code has to make repeated regular-expression substitutions. This isn't as fast as string interpolation in Python, so keep it to those cases where you really need it (for example, in conjunction with ``ngettext`` to produce proper pluralizations)."
msgstr ""

#: ../../topics/i18n/translation.txt:846
# 75f1f86eddde416a888517368b7c2582
msgid "Internationalization: in URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:852
# b07edf4b422a46fea94aae7721b68a30
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

#: ../../topics/i18n/translation.txt:854
# 41133dbd4c1d4e08965c3f04a7ff9ead
msgid "Adding the language prefix to the root of the URL patterns to make it possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect the language to activate from the requested URL."
msgstr ""

#: ../../topics/i18n/translation.txt:858
# ae6476e18f1345da8043ce667b9ca0df
msgid "Making URL patterns themselves translatable via the :func:`django.utils.translation.ugettext_lazy()` function."
msgstr ""

#: ../../topics/i18n/translation.txt:863
# d0f5f2a4db3d4d0781976bdd23023225
msgid "Using either one of these features requires that an active language be set for each request; in other words, you need to have :class:`django.middleware.locale.LocaleMiddleware` in your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:869
# 6b93d331b75b4ffcb6130422d3d381d5
msgid "Language prefix in URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:873
# 530c956f056240c482831b417a27d12e
msgid "This function can be used in your root URLconf as a replacement for the normal :func:`django.conf.urls.patterns` function. Django will automatically prepend the current active language code to all url patterns defined within :func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

#: ../../topics/i18n/translation.txt:897
# 2a470af5327a4af5aacdfa8e3b20aa58
msgid "After defining these URL patterns, Django will automatically add the language prefix to the URL patterns that were added by the ``i18n_patterns`` function. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:916
# e15b1293b7a34bea8e5b2baab2173761
msgid ":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root URLconf. Using it within an included URLconf will throw an :exc:`ImproperlyConfigured` exception."
msgstr ""

#: ../../topics/i18n/translation.txt:922
# 9a2b9fa5a7ae478686c4a5b4469e3e59
msgid "Ensure that you don't have non-prefixed URL patterns that might collide with an automatically-added language prefix."
msgstr ""

#: ../../topics/i18n/translation.txt:927
# ccc0a215752446cbb2ee8ff4750ec6c3
msgid "Translating URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:929
# b3ce4cb72d9941809413aa77b3cb8f56
msgid "URL patterns can also be marked translatable using the :func:`~django.utils.translation.ugettext_lazy` function. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:952
# cdd3e663626748f393e8ed92fac6570a
msgid "After you've created the translations, the :func:`~django.core.urlresolvers.reverse` function will return the URL in the active language. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:969
# 7faac31178094d1cacbe0b3ea0ae298c
msgid "In most cases, it's best to use translated URLs only within a language-code-prefixed block of patterns (using :func:`~django.conf.urls.i18n.i18n_patterns`), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern."
msgstr ""

#: ../../topics/i18n/translation.txt:980
# 47de1160132f4a36aa062c1a93ab8f65
msgid "Reversing in templates"
msgstr ""

#: ../../topics/i18n/translation.txt:982
# 73661fa0247e4f1bb72fbc5a4ba6f23f
msgid "If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the ``language`` template tag. It enables the given language in the enclosed template section:"
msgstr ""

#: ../../topics/i18n/translation.txt:999
# 78b8be217ffe445c86bea1596aeb277f
msgid "The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

#: ../../topics/i18n/translation.txt:1004
# 19d55b2c88d64aca9e0f8e5ce85f26f6
msgid "Localization: how to create language files"
msgstr ""

#: ../../topics/i18n/translation.txt:1006
# 6ac6deb186e14151b1c84e018669302c
msgid "Once the string literals of an application have been tagged for later translation, the translation themselves need to be written (or obtained). Here's how that works."
msgstr ""

#: ../../topics/i18n/translation.txt:1014
# ce44beddf1a1403eaf850de09f54ae17
msgid "Django does not support localizing your application into a locale for which Django itself has not been translated. In this case, it will ignore your translation files. If you were to try this and Django supported it, you would inevitably see a mixture of translated strings (from your application) and English strings (from Django itself). If you want to support a locale for your application that is not already part of Django, you'll need to make at least a minimal translation of the Django core."
msgstr ""

#: ../../topics/i18n/translation.txt:1022
# 74ec74e24f6545bca61b21431f4ab66b
msgid "A good starting point is to copy the Django English ``.po`` file and to translate at least some :term:`translation strings <translation string>`."
msgstr ""

#: ../../topics/i18n/translation.txt:1026
# bec50cfb716a49a890f486b97e001502
msgid "Message files"
msgstr ""

#: ../../topics/i18n/translation.txt:1028
# 5675143455924a748a5cdf21f8e16002
msgid "The first step is to create a :term:`message file` for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a ``.po`` file extension."
msgstr ""

#: ../../topics/i18n/translation.txt:1033
# ae5bebf80b7c4f86bb530317ca15b6af
msgid "Django comes with a tool, :djadmin:`django-admin.py makemessages <makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

#: ../../topics/i18n/translation.txt:1038
# 2598cb1081364002a15a0d2e7a220834
msgid "The ``makemessages`` command (and ``compilemessages`` discussed later) use commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, ``msgmerge`` and ``msguniq``."
msgstr ""

#: ../../topics/i18n/translation.txt:1044
# d4449e834fe641819bf7ed9669650b9a
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

#: ../../topics/i18n/translation.txt:1046
# c1267888351f442d9bd2b53d4252777a
msgid "To create or update a message file, run this command::"
msgstr ""

#: ../../topics/i18n/translation.txt:1050
# a5f6ce61aa6e435e81d3856db9029646
msgid "...where ``de`` is the language code for the message file you want to create. The language code, in this case, is in :term:`locale format<locale name>`. For example, it's ``pt_BR`` for Brazilian Portuguese and ``de_AT`` for Austrian German."
msgstr ""

#: ../../topics/i18n/translation.txt:1055
# 561aed355c5741029e50b4126e934101
msgid "The script should be run from one of two places:"
msgstr ""

#: ../../topics/i18n/translation.txt:1057
# 34f92919676946d6bab4ec298397e076
msgid "The root directory of your Django project."
msgstr ""

#: ../../topics/i18n/translation.txt:1058
# d72703a0c9eb4654afc89f388d344fb5
msgid "The root directory of your Django app."
msgstr ""

#: ../../topics/i18n/translation.txt:1060
# 0aac102e20eb4963a5120dbb207c5646
msgid "The script runs over your project source tree or your application source tree and pulls out all strings marked for translation. It creates (or updates) a message file in the directory ``locale/LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/LC_MESSAGES/django.po``."
msgstr ""

#: ../../topics/i18n/translation.txt:1065
# bfd9e9d10895419693801af91d954a22
msgid "By default :djadmin:`django-admin.py makemessages <makemessages>` examines every file that has the ``.html`` or ``.txt`` file extension. In case you want to override that default, use the ``--extension`` or ``-e`` option to specify the file extensions to examine::"
msgstr ""

#: ../../topics/i18n/translation.txt:1072
# 7c556487413747c19a64237c5de333fc
msgid "Separate multiple extensions with commas and/or use ``-e`` or ``--extension`` multiple times::"
msgstr ""

#: ../../topics/i18n/translation.txt:1079
# 5b7a222a6e554df08cbd974c5aae37f7
msgid "When :ref:`creating message files from JavaScript source code <creating-message-files-from-js-code>` you need to use the special 'djangojs' domain, **not** ``-e js``."
msgstr ""

#: ../../topics/i18n/translation.txt:1085
# 16e3f65f156d43e2a270a7780286da02
msgid "If you don't have the ``gettext`` utilities installed, :djadmin:`makemessages` will create empty files. If that's the case, either install the ``gettext`` utilities or just copy the English message file (``locale/en/LC_MESSAGES/django.po``) if available and use it as a starting point; it's just an empty translation file."
msgstr ""

#: ../../topics/i18n/translation.txt:1093
# c6103fa6154c40a6b31792b35dfed1c3
msgid "If you're using Windows and need to install the GNU gettext utilities so :djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more information."
msgstr ""

#: ../../topics/i18n/translation.txt:1097
# 6da81d1895f24712be30583f50fef4f6
msgid "The format of ``.po`` files is straightforward. Each ``.po`` file contains a small bit of metadata, such as the translation maintainer's contact information, but the bulk of the file is a list of **messages** -- simple mappings between translation strings and the actual translated text for the particular language."
msgstr ""

#: ../../topics/i18n/translation.txt:1103
# 85c70d32f413460e91edc027a18c710a
msgid "For example, if your Django app contained a translation string for the text ``\"Welcome to my site.\"``, like so::"
msgstr ""

#: ../../topics/i18n/translation.txt:1108
# 30782c5ed1b04586a90eaad867e13188
msgid "...then :djadmin:`django-admin.py makemessages <makemessages>` will have created a ``.po`` file containing the following snippet -- a message::"
msgstr ""

#: ../../topics/i18n/translation.txt:1115
# 9c3cd3d90fa2459ca49482059beb70fd
msgid "A quick explanation:"
msgstr ""

#: ../../topics/i18n/translation.txt:1117
# 5905bc3279094bfa91664dbf71ef9690
msgid "``msgid`` is the translation string, which appears in the source. Don't change it."
msgstr ""

#: ../../topics/i18n/translation.txt:1119
# 21edb123326843149c0061ac895ddcd2
msgid "``msgstr`` is where you put the language-specific translation. It starts out empty, so it's your responsibility to change it. Make sure you keep the quotes around your translation."
msgstr ""

#: ../../topics/i18n/translation.txt:1122
# d58c770b18e84bd7b6cebc6b120b0f3d
msgid "As a convenience, each message includes, in the form of a comment line prefixed with ``#`` and located above the ``msgid`` line, the filename and line number from which the translation string was gleaned."
msgstr ""

#: ../../topics/i18n/translation.txt:1126
# 862fed866afe4c2681600dd1d4b41b74
msgid "Long messages are a special case. There, the first string directly after the ``msgstr`` (or ``msgid``) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don't forget trailing spaces within the strings; otherwise, they'll be tacked together without whitespace!"
msgstr ""

#: ../../topics/i18n/translation.txt:1134
# f3fd61db516e460ead68282f3d80ab42
msgid "When creating a PO file with your favorite text editor, first edit the charset line (search for ``\"CHARSET\"``) and set it to the charset you'll be using to edit the content. Due to the way the ``gettext`` tools work internally and because we want to allow non-ASCII source strings in Django's core and your applications, you **must** use UTF-8 as the encoding for your PO file. This means that everybody will be using the same encoding, which is important when Django processes the PO files."
msgstr ""

#: ../../topics/i18n/translation.txt:1142
# db845a83a28f455dbc8c7c349f800949
msgid "To reexamine all source code and templates for new translation strings and update all message files for **all** languages, run this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1148
# 21895d9dfb7c418eb33f1c1e534e392a
msgid "Compiling message files"
msgstr ""

#: ../../topics/i18n/translation.txt:1150
# 70c2e5c1e0ef4faa86a85fa304625557
msgid "After you create your message file -- and each time you make changes to it -- you'll need to compile it into a more efficient form, for use by ``gettext``. Do this with the :djadmin:`django-admin.py compilemessages <compilemessages>` utility."
msgstr ""

#: ../../topics/i18n/translation.txt:1155
# 3c016084a14a46fe9bcf86e442d11b50
msgid "This tool runs over all available ``.po`` files and creates ``.mo`` files, which are binary files optimized for use by ``gettext``. In the same directory from which you ran :djadmin:`django-admin.py makemessages <makemessages>`, run :djadmin:`django-admin.py compilemessages <compilemessages>` like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1161
# ac2b3ab563794d48b6362675ed97814d
msgid "That's it. Your translations are ready for use."
msgstr ""

#: ../../topics/i18n/translation.txt:1165
# d21cab3378ea4c6f845d34bf6a54c6da
msgid "If you're using Windows and need to install the GNU gettext utilities so :djadmin:`django-admin.py compilemessages <compilemessages>` works see :ref:`gettext_on_windows` for more information."
msgstr ""

#: ../../topics/i18n/translation.txt:1171
# 92037293b2b24a23b62d82505d1e2efe
msgid "Django only supports ``.po`` files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it."
msgstr ""

#: ../../topics/i18n/translation.txt:1178
# 9e708a5bcc9a440baae138a49bb0c571
msgid "Creating message files from JavaScript source code"
msgstr ""

#: ../../topics/i18n/translation.txt:1180
# 282c3be145ed4d2a86c7829049ec1513
msgid "You create and update the message files the same way as the other Django message files -- with the :djadmin:`django-admin.py makemessages <makemessages>` tool. The only difference is you need to explicitly specify what in gettext parlance is known as a domain in this case the ``djangojs`` domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1188
# 56d43e3c976847b8b4375e67fd49b606
msgid "This would create or update the message file for JavaScript for German. After updating message files, just run :djadmin:`django-admin.py compilemessages <compilemessages>` the same way as you do with normal Django message files."
msgstr ""

#: ../../topics/i18n/translation.txt:1195
# e08521c67d2748fc8e6b7f4d79a7cfc1
msgid "``gettext`` on Windows"
msgstr ""

#: ../../topics/i18n/translation.txt:1197
# fb0bcf48e9734dfc8f07e1a443043e74
msgid "This is only needed for people who either want to extract message IDs or compile message files (``.po``). Translation work itself just involves editing existing files of this type, but if you want to create your own message files, or want to test or compile a changed message file, you will need the ``gettext`` utilities:"
msgstr ""

#: ../../topics/i18n/translation.txt:1202
# e185ee6b7f2a427bbdf6cd119e5d36af
msgid "Download the following zip files from the GNOME servers http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/ or from one of its mirrors_"
msgstr ""

#: ../../topics/i18n/translation.txt:1206
# 280fbceafe8c42ebbec69c31b3f7af7b
msgid "``gettext-runtime-X.zip``"
msgstr ""

#: ../../topics/i18n/translation.txt:1207
# 01c263fdbf094dbdb3477fbcc1486c12
msgid "``gettext-tools-X.zip``"
msgstr ""

#: ../../topics/i18n/translation.txt:1209
# 25be9638bee746088e2c857c97f2fedf
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

#: ../../topics/i18n/translation.txt:1211
# 57c1ccc0651d4ce89f2136798cec428b
msgid "Extract the contents of the ``bin\\`` directories in both files to the same folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

#: ../../topics/i18n/translation.txt:1214
# ca0630f7ecbb48fbb604c5f52db969fe
msgid "Update the system PATH:"
msgstr ""

#: ../../topics/i18n/translation.txt:1216
# 50cee1378b5548bab14a1f866e599ee5
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

#: ../../topics/i18n/translation.txt:1217
# 5f51462fbd994de280a1f79215bec7ed
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

#: ../../topics/i18n/translation.txt:1218
# e442eadf0f6748d9a8ff84152e175ed3
msgid "Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable value`` field."
msgstr ""

#: ../../topics/i18n/translation.txt:1223
# 15574c7518924e5780706df854e2263e
msgid "You may also use ``gettext`` binaries you have obtained elsewhere, so long as the ``xgettext --version`` command works properly. Do not attempt to use Django translation utilities with a ``gettext`` package if the command ``xgettext --version`` entered at a Windows command prompt causes a popup window saying \"xgettext.exe has generated errors and will be closed by Windows\"."
msgstr ""

#: ../../topics/i18n/translation.txt:1231
# 98d70a3bb52c4455b930f53573f877c5
msgid "Miscellaneous"
msgstr ""

#: ../../topics/i18n/translation.txt:1236
# bb8324c24d1c44f2972d2b0485075714
msgid "The ``set_language`` redirect view"
msgstr ""

#: ../../topics/i18n/translation.txt:1242
# 2c134c33d6a2456e9e6dee666e901f2c
msgid "As a convenience, Django comes with a view, :func:`django.views.i18n.set_language`, that sets a user's language preference and redirects to a given URL or, by default, back to the previous page."
msgstr ""

#: ../../topics/i18n/translation.txt:1246
# 4078d444ee8e43ac858cfc7c7aac252b
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

#: ../../topics/i18n/translation.txt:1250
# cdd8c5b756d94f4cb726ea6a6326a247
msgid "(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1252
# 8d56ac72faa64d29b5cbcaa8c49a1dfd
msgid "The view expects to be called via the ``POST`` method, with a ``language`` parameter set in request. If session support is enabled, the view saves the language choice in the user's session. Otherwise, it saves the language choice in a cookie that is by default named ``django_language``. (The name can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1258
# ddff66463bd54941895ab4b1b3734b59
msgid "After setting the language choice, Django redirects the user, following this algorithm:"
msgstr ""

#: ../../topics/i18n/translation.txt:1261
# b6ed25341ffa4ceeaf6a10e6da071e25
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

#: ../../topics/i18n/translation.txt:1262
# c0eb458beb4e4a44bec4b39874634ae1
msgid "If that doesn't exist, or is empty, Django tries the URL in the ``Referrer`` header."
msgstr ""

#: ../../topics/i18n/translation.txt:1264
# 9501820d2ec842cb94a6f4caac328aa5
msgid "If that's empty -- say, if a user's browser suppresses that header -- then the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

#: ../../topics/i18n/translation.txt:1267
# 7b8932fa4c754b92a16645ef44a737f6
msgid "Here's example HTML template code:"
msgstr ""

#: ../../topics/i18n/translation.txt:1283
# d9cd2e618c97425ab8b953ff3a26567d
msgid "In this example, Django looks up the URL of the page to which the user will be redirected in the ``redirect_to`` context variable."
msgstr ""

#: ../../topics/i18n/translation.txt:1287
# 2b3f1ec2681d44c0a885f120b8bd5a8c
msgid "Using translations outside views and templates"
msgstr ""

#: ../../topics/i18n/translation.txt:1289
# a566757aae334cfda96e4b44409e1b98
msgid "While Django provides a rich set of i18n tools for use in views and templates, it does not restrict the usage to Django-specific code. The Django translation mechanisms can be used to translate arbitrary texts to any language that is supported by Django (as long as an appropriate translation catalog exists, of course). You can load a translation catalog, activate it and translate text to language of your choice, but remember to switch back to original language, as activating a translation catalog is done on per-thread basis and such change will affect code running in the same thread."
msgstr ""

#: ../../topics/i18n/translation.txt:1310
# a9dfea87db524bf7b3d10037afcf645d
msgid "Calling this function with the value 'de' will give you ``\"Willkommen\"``, regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

#: ../../topics/i18n/translation.txt:1313
# 68b6f8c1e49b46ed927d791ce84dcf9b
msgid "Functions of particular interest are ``django.utils.translation.get_language()`` which returns the language used in the current thread, ``django.utils.translation.activate()`` which activates a translation catalog for the current thread, and ``django.utils.translation.check_for_language()`` which checks if the given language is supported by Django."
msgstr ""

#: ../../topics/i18n/translation.txt:1320
# 2d50579a9c5b4ab89f06b4bfd7a8bb29
msgid "Implementation notes"
msgstr ""

#: ../../topics/i18n/translation.txt:1325
# c1bd909ac290462db5670529fcab96e4
msgid "Specialties of Django translation"
msgstr ""

#: ../../topics/i18n/translation.txt:1327
# 69cb5e157890409e9cdbad9f9ffb7207
msgid "Django's translation machinery uses the standard ``gettext`` module that comes with Python. If you know ``gettext``, you might note these specialties in the way Django does translation:"
msgstr ""

#: ../../topics/i18n/translation.txt:1331
# d61801ff32034a3c833fe50d1f26046e
msgid "The string domain is ``django`` or ``djangojs``. This string domain is used to differentiate between different programs that store their data in a common message-file library (usually ``/usr/share/locale/``). The ``django`` domain is used for python and template translation strings and is loaded into the global translation catalogs. The ``djangojs`` domain is only used for JavaScript translation catalogs to make sure that those are as small as possible."
msgstr ""

#: ../../topics/i18n/translation.txt:1338
# 8be89298cc764e88ad21998b726e215e
msgid "Django doesn't use ``xgettext`` alone. It uses Python wrappers around ``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

#: ../../topics/i18n/translation.txt:1344
# 246d71a2b0aa4d26a216e2d5501b5c61
msgid "How Django discovers language preference"
msgstr ""

#: ../../topics/i18n/translation.txt:1346
# 20d92a52bd7440d3b04d69639fcaaed7
msgid "Once you've prepared your translations -- or, if you just want to use the translations that come with Django -- you'll just need to activate translation for your app."
msgstr ""

#: ../../topics/i18n/translation.txt:1350
# cb38f84cb9184bdaa541cfc936bb3928
msgid "Behind the scenes, Django has a very flexible model of deciding which language should be used -- installation-wide, for a particular user, or both."
msgstr ""

#: ../../topics/i18n/translation.txt:1353
# 1e8af2244e474dc893c1b6fe9642e48c
msgid "To set an installation-wide language preference, set :setting:`LANGUAGE_CODE`. Django uses this language as the default translation -- the final attempt if no other translator finds a translation."
msgstr ""

#: ../../topics/i18n/translation.txt:1357
# fd9d63ec5e94404d89723704632a4c9f
msgid "If all you want to do is run Django with your native language, and a language file is available for it, all you need to do is set :setting:`LANGUAGE_CODE`."
msgstr ""

#: ../../topics/i18n/translation.txt:1360
# 0f13b96bdd494851ad1d718c6ab093dc
msgid "If you want to let each individual user specify which language he or she prefers, use ``LocaleMiddleware``. ``LocaleMiddleware`` enables language selection based on data from the request. It customizes content for each user."
msgstr ""

#: ../../topics/i18n/translation.txt:1364
# beb6e6aee6254901b5acb82969a9fda2
msgid "To use ``LocaleMiddleware``, add ``'django.middleware.locale.LocaleMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting. Because middleware order matters, you should follow these guidelines:"
msgstr ""

#: ../../topics/i18n/translation.txt:1368
# a471e0828553486d8ff7d1a7f2f50bf5
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

#: ../../topics/i18n/translation.txt:1369
# 63a76f3369a648b6aed9c9b2352eca40
msgid "It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` makes use of session data. And it should come before ``CommonMiddleware`` because ``CommonMiddleware`` needs an activated language in order to resolve the requested URL."
msgstr ""

#: ../../topics/i18n/translation.txt:1373
# bb2ae05f27584589b7d32b6ce60fb9bf
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

#: ../../topics/i18n/translation.txt:1375
# 6ff7edaf330d4864a4441bd5e83b5ad7
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1383
# ce2956bcc5814ad6ace7edc1ad58d967
msgid "(For more on middleware, see the :doc:`middleware documentation </topics/http/middleware>`.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1386
# b12e5d2572144bd0be078a4ef661e74b
msgid "``LocaleMiddleware`` tries to determine the user's language preference by following this algorithm:"
msgstr ""

#: ../../topics/i18n/translation.txt:1391
# 0d03bf7165c744838c63e57f59f3a68e
msgid "First, it looks for the language prefix in the requested URL.  This is only performed when you are using the ``i18n_patterns`` function in your root URLconf. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../topics/i18n/translation.txt:1396
# 2b0aa3c3b8ea4aaaac0ffc0b9d0f347d
msgid "Failing that, it looks for a ``django_language`` key in the current user's session."
msgstr ""

#: ../../topics/i18n/translation.txt:1399
# af5c47b05d274e4b97117ed685badd98
msgid "Failing that, it looks for a cookie."
msgstr ""

#: ../../topics/i18n/translation.txt:1401
# d6e67521fd5e4c4bade56161f0e2728e
msgid "The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` setting. (The default name is ``django_language``.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1404
# d83553ba88674d88837a1033f1591a97
msgid "Failing that, it looks at the ``Accept-Language`` HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations."
msgstr ""

#: ../../topics/i18n/translation.txt:1409
# 027fd7702de54d5a80c9d995b78ef146
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:1415
# 429fd7319ea34354bbd732de0506e618
msgid "In each of these places, the language preference is expected to be in the standard :term:`language format<language code>`, as a string. For example, Brazilian Portuguese is ``pt-br``."
msgstr ""

#: ../../topics/i18n/translation.txt:1419
# 4383a2cbe8664f398adfe4d643a20e3b
msgid "If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies ``de-at`` (Austrian German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

#: ../../topics/i18n/translation.txt:1424
# 9c87abf4335a47868d49f464506ee0b9
msgid "Only languages listed in the :setting:`LANGUAGES` setting can be selected. If you want to restrict the language selection to a subset of provided languages (because your application doesn't provide all those languages), set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1434
# bc27dd8431ff4866a17adf947aa0f16c
msgid "This example restricts languages that are available for automatic selection to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

#: ../../topics/i18n/translation.txt:1438
# 7de6044b2a584860a6f30146d46f429b
msgid "If you define a custom :setting:`LANGUAGES` setting, as explained in the previous bullet, it's OK to mark the languages as translation strings -- but use a \"dummy\" ``ugettext()`` function, not the one in ``django.utils.translation``. You should *never* import ``django.utils.translation`` from within your settings file, because that module in itself depends on the settings, and that would cause a circular import."
msgstr ""

#: ../../topics/i18n/translation.txt:1446
# 5f7ed21acb6341f19f1e711a0f8e1ac4
msgid "The solution is to use a \"dummy\" ``ugettext()`` function. Here's a sample settings file::"
msgstr ""

#: ../../topics/i18n/translation.txt:1456
# 8d1bcddd86864157a3eb0f622a3fdd06
msgid "With this arrangement, :djadmin:`django-admin.py makemessages <makemessages>` will still find and mark these strings for translation, but the translation won't happen at runtime -- so you'll have to remember to wrap the languages in the *real* ``ugettext()`` in any code that uses :setting:`LANGUAGES` at runtime."
msgstr ""

#: ../../topics/i18n/translation.txt:1462
# f03636d7e82d4f57ba67db78f553b07a
msgid "The ``LocaleMiddleware`` can only select languages for which there is a Django-provided base translation. If you want to provide translations for your application that aren't already in the set of translations in Django's source tree, you'll want to provide at least a basic one as described in the :ref:`Locale restrictions<locale-restrictions>` note."
msgstr ""

#: ../../topics/i18n/translation.txt:1469
# 0f3056e78e504128bd59af6befac8d7a
msgid "Once ``LocaleMiddleware`` determines the user's preference, it makes this preference available as ``request.LANGUAGE_CODE`` for each :class:`~django.http.HttpRequest`. Feel free to read this value in your view code. Here's a simple example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1480
# f33da79a961740d7abb6be967ad98ae6
msgid "Note that, with static (middleware-less) translation, the language is in ``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, it's in ``request.LANGUAGE_CODE``."
msgstr ""

#: ../../topics/i18n/translation.txt:1492
# 88374c3946634a2a932d3a9572166321
msgid "How Django discovers translations"
msgstr ""

#: ../../topics/i18n/translation.txt:1494
# 812688a3685848a9a345ebc1ecde0092
msgid "At runtime, Django builds an in-memory unified catalog of literals-translations. To achieve this it looks for translations by following this algorithm regarding the order in which it examines the different file paths to load the compiled :term:`message files <message file>` (``.mo``) and the precedence of multiple translations for the same literal:"
msgstr ""

#: ../../topics/i18n/translation.txt:1500
# b0f8a41c71ce4a7b9d65407850fd8c32
msgid "The directories listed in :setting:`LOCALE_PATHS` have the highest precedence, with the ones appearing first having higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:1503
# d7b3662325b74d1baee618c2c8367167
msgid "Then, it looks for and uses if it exists a ``locale`` directory in each of the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing first have higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:1506
# 655868918ca3435fa6f7408d743225a1
msgid "Then, it looks for a ``locale`` directory in the project directory, or more accurately, in the directory containing your settings file."
msgstr ""

#: ../../topics/i18n/translation.txt:1508
# 8d3028dd25fe4d348a9c9e69e7a9540f
msgid "Finally, the Django-provided base translation in ``django/conf/locale`` is used as a fallback."
msgstr ""

#: ../../topics/i18n/translation.txt:1520
# 82d704c98e5744a5a63dac6c187b3b6a
msgid "The translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See the :ref:`javascript_catalog view documentation <javascript_catalog-view>` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:1525
# e916f3272c814b9cb953f3f9529f981c
msgid "In all cases the name of the directory containing the translation is expected to be named using :term:`locale name` notation. E.g. ``de``, ``pt_BR``, ``es_AR``, etc."
msgstr ""

#: ../../topics/i18n/translation.txt:1529
# 993cd2836c384d169056e86930bcc3b6
msgid "This way, you can write applications that include their own translations, and you can override base translations in your project path. Or, you can just build a big project out of several apps and put all translations into one big common message file specific to the project you are composing. The choice is yours."
msgstr ""

#: ../../topics/i18n/translation.txt:1536
# 6da029501f994a1d987609ecc5769014
msgid "If you're using manually configured settings, as described in :ref:`settings-without-django-settings-module`, the ``locale`` directory in the project directory will not be examined, since Django loses the ability to work out the location of the project directory. (Django normally uses the location of the settings file to determine this, and a settings file doesn't exist if you're manually configuring your settings.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1543
# 0765c5890af04e4788685829776dc623
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

#: ../../topics/i18n/translation.txt:1545
# 7e4dadb420b24e0e8e4366953bbcc4b5
msgid "All paths listed in :setting:`LOCALE_PATHS` in your settings file are searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1547
# 38f4beb2ba9e4c5498b30bf0d00ac230
msgid "``$PROJECTPATH/locale/<language>/LC_MESSAGES/django.(po|mo)`` -- deprecated, see above."
msgstr ""

#: ../../topics/i18n/translation.txt:1549
# 755831e9ef714403bbfbf9c0b5d35af4
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1550
# 3fb033867159497cb0e2db1c00e77995
msgid "``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1552
# 13965b510c8a4157b7b0e1c22380c804
msgid "To create message files, you use the :djadmin:`django-admin.py makemessages <makemessages>` tool. You only need to be in the same directory where the ``locale/`` directory is located. And you use :djadmin:`django-admin.py compilemessages <compilemessages>` to produce the binary ``.mo`` files that are used by ``gettext``."
msgstr ""

#: ../../topics/i18n/translation.txt:1557
# 2787037c2c534f9eae8a197dd8b23c91
msgid "You can also run :djadmin:`django-admin.py compilemessages --settings=path.to.settings <compilemessages>` to make the compiler process all the directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:1561
# e7df0e38454646d5b4d45e7f651c8505
msgid "Finally, you should give some thought to the structure of your translation files. If your applications need to be delivered to other users and will be used in other projects, you might want to use app-specific translations. But using app-specific translations and project-specific translations could produce weird problems with :djadmin:`makemessages`: it will traverse all directories below the current path and so might put message IDs into a unified, common message file for the current project that are already in application message files."
msgstr ""

#: ../../topics/i18n/translation.txt:1569
# 202aa5933906441284e52d3843f6f591
msgid "The easiest way out is to store applications that are not part of the project (and so carry their own translations) outside the project tree. That way, :djadmin:`django-admin.py makemessages <makemessages>`, when ran on a project level will only extract strings that are connected to your explicit project and not strings that are distributed independently."
msgstr ""

#: ../../topics/index.txt:2
# f8a76eeba69641a78beaa42ffe6eb84a
msgid "Using Django"
msgstr ""

#: ../../topics/index.txt:4
# c7a6ab0599f74fd99cc8bad3bc8423ec
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

#: ../../topics/index.txt:32
# 808d6dfac6004daba6747edf29c9ee7b
msgid "Deprecated features"
msgstr ""

#: ../../topics/install.txt:3
# e26980270daf41e5a9bdf25654173474
msgid "How to install Django"
msgstr ""

#: ../../topics/install.txt:5
# 7a2bbd39b3014897ae60121034493ce8
msgid "This document will get you up and running with Django."
msgstr ""

#: ../../topics/install.txt:8
# 93c2ceaf97154ff7818f69b5dcad53f9
msgid "Install Python"
msgstr ""

#: ../../topics/install.txt:10
# ae8d539ae3ad40b998176b514f78c8a7
msgid "Being a Python Web framework, Django requires Python."
msgstr ""

#: ../../topics/install.txt:12
# 0e1ee387961e4a1ba49ba647ec64ab6f
msgid "It works with any Python version from 2.5 to 2.7 (due to backwards incompatibilities in Python 3.0, Django does not currently work with Python 3.0; see :doc:`the Django FAQ </faq/install>` for more information on supported Python versions and the 3.0 transition)."
msgstr ""

#: ../../topics/install.txt:17
# b8a33b4ce0d24966b8fcea4567e5612d
msgid "Get Python at http://www.python.org. If you're running Linux or Mac OS X, you probably already have it installed."
msgstr ""

#: ../../topics/install.txt:22
# 144085c7da944057a828b1a57b96935f
msgid "If you use Jython_ (a Python implementation for the Java platform), you'll need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

#: ../../topics/install.txt:29
# 958c0461979f4fc3bac4a7107a7abc4f
msgid "On Windows, you might need to adjust your ``PATH`` environment variable to include paths to Python executable and additional scripts. For example, if your Python is installed in ``C:\\Python27\\``, the following paths need to be added to ``PATH``::"
msgstr ""

#: ../../topics/install.txt:37
# 4fa9a89550c74b5a9774a9589c627560
msgid "Install Apache and mod_wsgi"
msgstr ""

#: ../../topics/install.txt:39
# 83dfb6a01f9f4268b62afb764c44a371
msgid "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won't need to set up Apache until you're ready to deploy Django in production."
msgstr ""

#: ../../topics/install.txt:44
# f4005ae5576b416ea70ee53c14a8ad39
msgid "If you want to use Django on a production site, use `Apache`_ with `mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security, and the daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed, with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi."
msgstr ""

#: ../../topics/install.txt:60
# 68a46b1a78f24d3998a0e552a40c452d
msgid "See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` for information on how to configure mod_wsgi once you have it installed."
msgstr ""

#: ../../topics/install.txt:64
# ca3bcfd4857643639ac828c2eaf42eb0
msgid "If you can't use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is :doc:`uWSGI </howto/deployment/fastcgi>`; it works very well with `nginx`_. Another is :doc:`FastCGI </howto/deployment/fastcgi>`, perfect for using Django with servers other than Apache. Additionally, Django follows the WSGI spec (:pep:`3333`), which allows it to run on a variety of server platforms. See the `server-arrangements wiki page`_ for specific installation instructions for each platform."
msgstr ""

#: ../../topics/install.txt:80
# d0efa19ba7ef49919b8e347b2b4d4c9c
msgid "Get your database running"
msgstr ""

#: ../../topics/install.txt:82
# 76a099a8a62e4de68f97ddbf806a058c
msgid "If you plan to use Django's database API functionality, you'll need to make sure a database server is running. Django supports many different database servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and SQLite_ (although SQLite doesn't require a separate server to be running)."
msgstr ""

#: ../../topics/install.txt:87
# 9121a7fd832342b19a5417f77acddc53
msgid "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../topics/install.txt:90
# 6e26318c378c4b918f4553a07ff09eb2
msgid "`Sybase SQL Anywhere`_"
msgstr ""

#: ../../topics/install.txt:91
# 948a3dbfc5424e2cae93d77e6d6cf308
msgid "`IBM DB2`_"
msgstr ""

#: ../../topics/install.txt:92
# ad49fa290b204a598d0bcc20b4a11768
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

#: ../../topics/install.txt:93
# 7ff30d4de9b14a08b00cddc7a3610e40
msgid "Firebird_"
msgstr ""

#: ../../topics/install.txt:94
# 1e866238333249a48bf47fd78ca16967
msgid "ODBC_"
msgstr ""

#: ../../topics/install.txt:96
# 0fb8a0de028e4ba1873ebb6f9e92eca5
msgid "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."
msgstr ""

#: ../../topics/install.txt:101
# 6e76ba89cfe44918ab4e69ac5f6c154f
msgid "In addition to a database backend, you'll need to make sure your Python database bindings are installed."
msgstr ""

#: ../../topics/install.txt:104
# 05ec370251c840fc936b084353592eb3
msgid "If you're using PostgreSQL, you'll need the ``postgresql_psycopg2`` package. You might want to refer to our :ref:`PostgreSQL notes <postgresql-notes>` for further technical details specific to this database."
msgstr ""

#: ../../topics/install.txt:108
# 08bab0bc46074c77811d7675c382d1c3
msgid "If you're on Windows, check out the unofficial `compiled Windows version`_."
msgstr ""

#: ../../topics/install.txt:110
# 18d37c5981a34a61880a1207c33e0ecf
msgid "If you're using MySQL, you'll need MySQLdb_, version 1.2.1p2 or higher. You will also want to read the database-specific :ref:`notes for the MySQL backend <mysql-notes>`."
msgstr ""

#: ../../topics/install.txt:114
# 41ef743120b943209fb4bb75abeffd02
msgid "If you're using Oracle, you'll need a copy of cx_Oracle_, but please read the database-specific :ref:`notes for the Oracle backend <oracle-notes>` for important information regarding supported versions of both Oracle and ``cx_Oracle``."
msgstr ""

#: ../../topics/install.txt:119
# 69907dab39a44db09afbe71ae9e491b4
msgid "If you're using an unofficial 3rd party backend, please consult the documentation provided for any additional requirements."
msgstr ""

#: ../../topics/install.txt:122
# f69bc36682d04437bc1d57d5738d40fe
msgid "If you plan to use Django's ``manage.py syncdb`` command to automatically create database tables for your models, you'll need to ensure that Django has permission to create and alter tables in the database you're using; if you plan to manually create the tables, you can simply grant Django ``SELECT``, ``INSERT``, ``UPDATE`` and ``DELETE`` permissions. On some databases, Django will need ``ALTER TABLE`` privileges during ``syncdb`` but won't issue ``ALTER TABLE`` statements on a table once ``syncdb`` has created it."
msgstr ""

#: ../../topics/install.txt:131
# a833603f9d0b43e697abb933862bde3a
msgid "If you're using Django's :doc:`testing framework</topics/testing>` to test database queries, Django will need permission to create a test database."
msgstr ""

#: ../../topics/install.txt:151
# 97b411f0dd574253a4cecbd54608844e
msgid "Remove any old versions of Django"
msgstr ""

#: ../../topics/install.txt:153
# f1f8c5d47a254b66b0cf935f8d3f4e5b
msgid "If you are upgrading your installation of Django from a previous version, you will need to uninstall the old Django version before installing the new version."
msgstr ""

#: ../../topics/install.txt:157
# 34d11864c4964bd2830c275aed0eb7e7
msgid "If you installed Django using ``setup.py install``, uninstalling is as simple as deleting the ``django`` directory from your Python ``site-packages``."
msgstr ""

#: ../../topics/install.txt:161
# 031234a1acdb43319d6c22b0e1e241f1
msgid "If you installed Django from a Python egg, remove the Django ``.egg`` file, and remove the reference to the egg in the file named ``easy-install.pth``. This file should also be located in your ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:169
# b46a51d4f23b475484693b430a91e021
msgid "The location of the ``site-packages`` directory depends on the operating system, and the location in which Python was installed. To find out your system's ``site-packages`` location, execute the following:"
msgstr ""

#: ../../topics/install.txt:177
# 4fdb614382304545b304248c2ef31f8e
msgid "(Note that this should be run from a shell prompt, not a Python interactive prompt.)"
msgstr ""

#: ../../topics/install.txt:180
# 70da3efeeb404a9088712d12b5275784
msgid "Some Debian-based Linux distributions have separate ``site-packages`` directories for user-installed packages, such as when installing Django from a downloaded tarball. The command  listed above will give you the system's ``site-packages``, the user's directory can be found in ``/usr/local/lib/`` instead of ``/usr/lib/``."
msgstr ""

#: ../../topics/install.txt:189
# 3ce844a3138c4408af3fadb3713399f0
msgid "Install the Django code"
msgstr ""

#: ../../topics/install.txt:191
# 763362f01bb64f39bcacd61d7997a293
msgid "Installation instructions are slightly different depending on whether you're installing a distribution-specific package, downloading the latest official release, or fetching the latest development version."
msgstr ""

#: ../../topics/install.txt:195
# 334e634ae9e5451ba337d11776f89e19
msgid "It's easy, no matter which way you choose."
msgstr ""

#: ../../topics/install.txt:198
# 8a01467933754c5199e3b7ef41129859
msgid "Installing a distribution-specific package"
msgstr ""

#: ../../topics/install.txt:200
# 568a99ca943045c9a44d9b100fead372
msgid "Check the :doc:`distribution specific notes </misc/distributions>` to see if your platform/distribution provides official Django packages/installers. Distribution-provided packages will typically allow for automatic installation of dependencies and easy upgrade paths."
msgstr ""

#: ../../topics/install.txt:208
# 85a171d1b4cd4c9abfeafbbf4fff4f25
msgid "Installing an official release with ``pip``"
msgstr ""

#: ../../topics/install.txt:210
# 02ec7ff34faf443e86a6a5cd2c6d32b4
msgid "This is the recommended way to install Django."
msgstr ""

#: ../../topics/install.txt:212
# be5d2c75afaa47dba7f35c44902849de
msgid "Install pip_. The easiest is to use the `standalone pip installer`_. If your distribution already has ``pip`` installed, you might need to update it if it's outdated. (If it's outdated, you'll know because installation won't work.)"
msgstr ""

#: ../../topics/install.txt:217
# 34caaa10fdf543589f4ed70083454d74
msgid "(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. It's up to you to decide if you want to learn and use them."
msgstr ""

#: ../../topics/install.txt:223
# f1453a0aee184ed184ce6396bcb723c8
msgid "If you're using Linux, Mac OS X or some other flavor of Unix, enter the command ``sudo pip install Django`` at the shell prompt. If you're using Windows, start a command shell with administrator privileges and run the command ``pip install Django``. This will install Django in your Python installation's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:229
# 145c55ff9fc348b6be64d8c20c176b7e
msgid "If you're using a virtualenv, you don't need ``sudo`` or administrator privileges, and this will install Django in the virtualenv's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:239
# 43def36b801c43058848ba3d70bf2b0e
msgid "Installing an official release manually"
msgstr ""

#: ../../topics/install.txt:241
# a216a2a4775941fdaaae3b07592ddd44
msgid "Download the latest release from our `download page`_."
msgstr ""

#: ../../topics/install.txt:243
# b4bc30ebbae74026b8d22040486d8e91
msgid "Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where ``X.Y`` is the version number of the latest release). If you're using Windows, you can download the command-line tool bsdtar_ to do this, or you can use a GUI-based tool such as 7-zip_."
msgstr ""

#: ../../topics/install.txt:248
# 745e13df8b59499585399030483af49e
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

#: ../../topics/install.txt:250
# bbbe588dede94871982df7dc4e507ada
msgid "If you're using Linux, Mac OS X or some other flavor of Unix, enter the command ``sudo python setup.py install`` at the shell prompt. If you're using Windows, start a command shell with administrator privileges and run the command ``python setup.py install``. This will install Django in your Python installation's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:263
# fa5b3d729f8e47ffa05de7fc7ea703e7
msgid "Installing the development version"
msgstr ""

#: ../../topics/install.txt:267
# d583c0af1e1541109e4e55f554bbb553
msgid "If you decide to use the latest development version of Django, you'll want to pay close attention to `the development timeline`_, and you'll want to keep an eye on `the list of backwards-incompatible changes`_. This will help you stay on top of any new features you might want to use, as well as any changes you'll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)"
msgstr ""

#: ../../topics/install.txt:279
# 658e18e3cf174114a287a3ed7b462885
msgid "If you'd like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:"
msgstr ""

#: ../../topics/install.txt:282
# 2ccc87998c144870914abe8e8c51d377
msgid "Make sure that you have Subversion_, Git_, or Mercurial_ installed, and that you can run its commands from a shell. (Enter ``svn help``, ``git help``, or ``hg help`` at a shell prompt to test this.) Note that the Subversion repository is the canonical source for the official Git and Mercurial repositories and as such will always be the most up-to-date."
msgstr ""

#: ../../topics/install.txt:288
# 313e78a3b4b04e92be57c00d387554f5
msgid "Check out Django's main development branch (the 'trunk') like so:"
msgstr ""

#: ../../topics/install.txt:295
# 2399879d830c47e19acadb612d5282c6
msgid "Mirrors of the Subversion repository can be obtained like so:"
msgstr ""

#: ../../topics/install.txt:309
# ec05a9687dda4771980d21f84d8a63f2
msgid "These mirrors should be updated every 5 minutes but aren't guaranteed to be up-to-date since they are hosted on external services."
msgstr ""

#: ../../topics/install.txt:312
# ce9c3207fdf4458e99201354c207b2fe
msgid "Next, make sure that the Python interpreter can load Django's code. The most convenient way to do this is to `modify Python's search path`_. Add a ``.pth`` file containing the full path to the ``django-trunk`` directory to your system's ``site-packages`` directory. For example, on a Unix-like system:"
msgstr ""

#: ../../topics/install.txt:321
# 5a70ae37e03d4a5e8106964fa6e0da11
msgid "(In the above line, change ``SITE-PACKAGES-DIR`` to match the location of your system's ``site-packages`` directory, as explained in the :ref:`Where are my site-packages stored? <finding-site-packages>` section above. Change ``WORKING-DIR/django-trunk`` to match the full path to your new ``django-trunk`` directory.)"
msgstr ""

#: ../../topics/install.txt:327
# ab050e5bdabd4f538e933852961f521d
msgid "On Unix-like systems, create a symbolic link to the file ``django-trunk/django/bin/django-admin.py`` in a directory on your system path, such as ``/usr/local/bin``. For example:"
msgstr ""

#: ../../topics/install.txt:335
# 0b2703f4581f4c50b823bab176bbc159
msgid "(In the above line, change WORKING-DIR to match the full path to your new ``django-trunk`` directory.)"
msgstr ""

#: ../../topics/install.txt:338
# 1acf6cd5eb184ff5989256865f8ab467
msgid "This simply lets you type ``django-admin.py`` from within any directory, rather than having to qualify the command with the full path to the file."
msgstr ""

#: ../../topics/install.txt:341
# 45db45c559f74610bf226c010c993d30
msgid "On Windows systems, the same result can be achieved by copying the file ``django-trunk/django/bin/django-admin.py`` to somewhere on your system path, for example ``C:\\Python27\\Scripts``."
msgstr ""

#: ../../topics/install.txt:347
# 5608442634184e42804b296745ab188a
msgid "Don't run ``sudo python setup.py install``, because you've already carried out the equivalent actions in steps 3 and 4. Furthermore, this is known to cause problems when updating to a more recent version of Django."
msgstr ""

#: ../../topics/install.txt:351
# e7ca31eb669a470e8ccf80b57d2856e4
msgid "When you want to update your copy of the Django source code, just run the command ``svn update`` from within the ``django-trunk`` directory. When you do this, Subversion will automatically download any changes. The equivalent command for Git is ``git pull``, and for Mercurial ``hg pull --update``."
msgstr ""

#: ../../topics/logging.txt:3
# 3bc8f486606346918bb7bf8404ebbea5
msgid "Logging"
msgstr ""

#: ../../topics/logging.txt:11
# f1dad83f830249739b3665d49ebb41f8
msgid "A quick logging primer"
msgstr ""

#: ../../topics/logging.txt:13
# e85b2e484d8c461eaa4ea88f741e9c88
msgid "Django uses Python's builtin :mod:`logging` module to perform system logging. The usage of this module is discussed in detail in Python's own documentation. However, if you've never used Python's logging framework (or even if you have), here's a quick primer."
msgstr ""

#: ../../topics/logging.txt:19
# c6b893b8a6db4c34aec38327102742fc
msgid "The cast of players"
msgstr ""

#: ../../topics/logging.txt:21
# ec9a33e5362449f3994f9651fe9df80f
msgid "A Python logging configuration consists of four parts:"
msgstr ""

#: ../../topics/logging.txt:23
# cbea5b06c57444c09dcb0298f669d75f
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

#: ../../topics/logging.txt:24
# fe13c1b99ad544b4b10a7f63c87dc166
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

#: ../../topics/logging.txt:25
# 67a0d7f7231f49fab1f4a84a051724c4
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

#: ../../topics/logging.txt:26
# 669ccdaf8811422d97a3099f25c69647
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

#: ../../topics/logging.txt:31
#: ../../topics/logging.txt:416
# a4b7d57b9a6144fe96f8891a41ba9bbc
# 25ee4c2445a746c48b7f47bf65ccfeed
msgid "Loggers"
msgstr ""

#: ../../topics/logging.txt:33
# 7e341859ef0144bd9697a883ebf5c82e
msgid "A logger is the entry point into the logging system. Each logger is a named bucket to which messages can be written for processing."
msgstr ""

#: ../../topics/logging.txt:36
# 1558e1fff68843cabb35466ea59d1ab7
msgid "A logger is configured to have a *log level*. This log level describes the severity of the messages that the logger will handle. Python defines the following log levels:"
msgstr ""

#: ../../topics/logging.txt:40
# fc67c7a42d0c4bfdad8e931716d3a92c
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

#: ../../topics/logging.txt:42
# 5a8c6b1828434cb685a30a1b594b6ca8
msgid "``INFO``: General system information"
msgstr ""

#: ../../topics/logging.txt:44
# 35785c258443441383870e2df33aeaec
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:47
# c6504ec6daf341058ef7b0a17881d53d
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:50
# 16c3d92931eb481abd0f4c3eea08d621
msgid "``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:53
# f02589d047a04534a8d6119291ac77ae
msgid "Each message that is written to the logger is a *Log Record*. Each log record also has a *log level* indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code."
msgstr ""

#: ../../topics/logging.txt:59
# 0d95548e3f0240e3bd2bac562fea6866
msgid "When a message is given to the logger, the log level of the message is compared to the log level of the logger. If the log level of the message meets or exceeds the log level of the logger itself, the message will undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

#: ../../topics/logging.txt:65
# a5057b0cc56344f9b90426cb16e48c2f
msgid "Once a logger has determined that a message needs to be processed, it is passed to a *Handler*."
msgstr ""

#: ../../topics/logging.txt:71
#: ../../topics/logging.txt:459
# 01ce4f3c90d1400a9324dfac2fd6c9a7
# adece72470e44a0fafa4325232f54813
msgid "Handlers"
msgstr ""

#: ../../topics/logging.txt:73
# 875e0a748a0747ddbdf4594a11633961
msgid "The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket."
msgstr ""

#: ../../topics/logging.txt:77
# 841fbdfe958b43abaa266044fe388439
msgid "Like loggers, handlers also have a log level. If the log level of a log record doesn't meet or exceed the level of the handler, the handler will ignore the message."
msgstr ""

#: ../../topics/logging.txt:81
# cb44e377861d45708f3edfffa1272407
msgid "A logger can have multiple handlers, and each handler can have a different log level. In this way, it is possible to provide different forms of notification depending on the importance of a message. For example, you could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages to a paging service, while a second handler logs all messages (including ``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

#: ../../topics/logging.txt:92
#: ../../topics/logging.txt:504
#: ../../topics/templates.txt:108
# 99fb69c941bf4a74983e606722b86347
# f0d4ddd934d84b95a6479763cbef0c3e
# 94d5b803fe334357aaad0275cc8a7895
msgid "Filters"
msgstr ""

#: ../../topics/logging.txt:94
# e841a24b4f4f45e0889ae2bcf413a699
msgid "A filter is used to provide additional control over which log records are passed from logger to handler."
msgstr ""

#: ../../topics/logging.txt:97
# 94fc89f5504e470b823d457171543877
msgid "By default, any log message that meets log level requirements will be handled. However, by installing a filter, you can place additional criteria on the logging process. For example, you could install a filter that only allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

#: ../../topics/logging.txt:103
# 47bbb9ae4af1410e89f3eb2e06cff006
msgid "Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades ``ERROR`` log records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

#: ../../topics/logging.txt:108
# 7507b63e214c434babe78725c30b4ba0
msgid "Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions."
msgstr ""

#: ../../topics/logging.txt:114
# 9364584afd6046809478f392ff1d8a6b
msgid "Formatters"
msgstr ""

#: ../../topics/logging.txt:116
# f7eba10547b04c66a849e03444b8c266
msgid "Ultimately, a log record needs to be rendered as text. Formatters describe the exact format of that text. A formatter usually consists of a Python formatting string; however, you can also write custom formatters to implement specific formatting behavior."
msgstr ""

#: ../../topics/logging.txt:122
# fde968782fc94b7c98d348e12be6449c
msgid "Using logging"
msgstr ""

#: ../../topics/logging.txt:124
# a254273cb8a04788b5c6a5d9675968aa
msgid "Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework is very simple. Here's an example::"
msgstr ""

#: ../../topics/logging.txt:140
# f12aed1fbc09459c8d6dffba2886357b
msgid "And that's it! Every time the ``bad_mojo`` condition is activated, an error log record will be written."
msgstr ""

#: ../../topics/logging.txt:144
# 8c4889b7b510483988fe67d83e26ae63
msgid "Naming loggers"
msgstr ""

#: ../../topics/logging.txt:146
# 02a3438e12ef4149a31fa99d017413d1
msgid "The call to :meth:`logging.getLogger()` obtains (creating, if necessary) an instance of a logger. The logger instance is identified by a name. This name is used to identify the logger for configuration purposes."
msgstr ""

#: ../../topics/logging.txt:151
# eb4625e9bafe4d49b0e2c0e660fabb43
msgid "By convention, the logger name is usually ``__name__``, the name of the python module that contains the logger. This allows you to filter and handle logging calls on a per-module basis. However, if you have some other way of organizing your logging messages, you can provide any dot-separated name to identify your logger::"
msgstr ""

#: ../../topics/logging.txt:160
# d16a6ba9f4ce4bf5879b97e4a2b3a73a
msgid "The dotted paths of logger names define a hierarchy. The ``project.interesting`` logger is considered to be a parent of the ``project.interesting.stuff`` logger; the ``project`` logger is a parent of the ``project.interesting`` logger."
msgstr ""

#: ../../topics/logging.txt:165
# 5adc5fd00f0d414cbf3e5c7c2afeb005
msgid "Why is the hierarchy important? Well, because loggers can be set to *propagate* their logging calls to their parents. In this way, you can define a single set of handlers at the root of a logger tree, and capture all logging calls in the subtree of loggers. A logging handler defined in the ``project`` namespace will catch all logging messages issued on the ``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

#: ../../topics/logging.txt:173
# 84eadb548f6d46389215620e9e64f5cd
msgid "This propagation can be controlled on a per-logger basis. If you don't want a particular logger to propagate to it's parents, you can turn off this behavior."
msgstr ""

#: ../../topics/logging.txt:178
# e12a35bf62ec4a548d927224135e6e75
msgid "Making logging calls"
msgstr ""

#: ../../topics/logging.txt:180
# 13b9f4f246e040f6a372c15cd84bab35
msgid "The logger instance contains an entry method for each of the default log levels:"
msgstr ""

#: ../../topics/logging.txt:183
# 8ac31cf7c4654409a2f6444751b81d44
msgid "``logger.critical()``"
msgstr ""

#: ../../topics/logging.txt:184
# 2eb7948e647a454096d7f2300afdb139
msgid "``logger.error()``"
msgstr ""

#: ../../topics/logging.txt:185
# 1e0bd0998c2e411f970fd3d7bb860ab6
msgid "``logger.warning()``"
msgstr ""

#: ../../topics/logging.txt:186
# 62909911042e432ab0c4df3f25bae1d5
msgid "``logger.info()``"
msgstr ""

#: ../../topics/logging.txt:187
# 1d072838f80d47f1934bb9dce8d84e78
msgid "``logger.debug()``"
msgstr ""

#: ../../topics/logging.txt:189
# 97c8320029384d9195503959ed18c031
msgid "There are two other logging calls available:"
msgstr ""

#: ../../topics/logging.txt:191
# 2850e053d23b4c0c93a1e49d738bc907
msgid "``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

#: ../../topics/logging.txt:194
# c05a1955a7f649518c84a1cf63110dcc
msgid "``logger.exception()``: Creates an ``ERROR`` level logging message wrapping the current exception stack frame."
msgstr ""

#: ../../topics/logging.txt:198
# e333840ad74e4b1f9cc3939c88c5a80d
msgid "Configuring logging"
msgstr ""

#: ../../topics/logging.txt:200
# cd16cb3288fe4a40b6890ea0ab6a25c2
msgid "Of course, it isn't enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters and formatters to ensure that logging output is output in a useful way."
msgstr ""

#: ../../topics/logging.txt:204
# 44a6dfbe870d486c8394231b9d8b09b4
msgid "Python's logging library provides several techniques to configure logging, ranging from a programmatic interface to configuration files. By default, Django uses the `dictConfig format`_."
msgstr ""

#: ../../topics/logging.txt:209
# cd5e2905f77a40408d4456001ea25e67
msgid "``logging.dictConfig`` is a builtin library in Python 2.7. In order to make this library available for users of earlier Python versions, Django includes a copy as part of ``django.utils.log``. If you have Python 2.7, the system native library will be used; if you have Python 2.6 or earlier, Django's copy will be used."
msgstr ""

#: ../../topics/logging.txt:215
# 99e2b2fd89664661b117474c3981d1ea
msgid "In order to configure logging, you use :setting:`LOGGING` to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have."
msgstr ""

#: ../../topics/logging.txt:221
# b3c54accdfed4e8cb260bff5de0966b2
msgid "Logging is configured immediately after settings have been loaded. Since the loading of settings is one of the first things that Django does, you can be certain that loggers are always ready for use in your project code."
msgstr ""

#: ../../topics/logging.txt:233
# 5c69d3b7bbe846ed9f1153032fa4fb53
msgid "The full documentation for `dictConfig format`_ is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here is an example of a fairly complex logging setup, configured using :meth:`logging.dictConfig`::"
msgstr ""

#: ../../topics/logging.txt:290
# 8ddbd68c0e2a41408f74b764d633141c
msgid "This logging configuration does the following things:"
msgstr ""

#: ../../topics/logging.txt:292
# 43c3f8602e824b538a845e96fcd14c88
msgid "Identifies the configuration as being in 'dictConfig version 1' format. At present, this is the only dictConfig format version."
msgstr ""

#: ../../topics/logging.txt:295
# 13d875f3ae16409e9c18e40aa451003e
msgid "Disables all existing logging configurations."
msgstr ""

#: ../../topics/logging.txt:297
# 1b95279f489f44a9b6339eda74a933dd
msgid "Defines two formatters:"
msgstr ""

#: ../../topics/logging.txt:299
# e9797dee194b4eeba1658e121b4c21c4
msgid "``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the log message."
msgstr ""

#: ../../topics/logging.txt:302
# 8d3d55bd2f39499d8f3b3c7187b3e77f
msgid "The `format` string is a normal Python formatting string describing the details that are to be output on each logging line. The full list of detail that can be output can be found in the `formatter documentation`_."
msgstr ""

#: ../../topics/logging.txt:307
# f430097ee2264eb3b8ef2872ea84a3d0
msgid "``verbose``, that outputs the log level name, the log message, plus the time, process, thread and module that generate the log message."
msgstr ""

#: ../../topics/logging.txt:311
# 2d563b347818409eb4926698bcb0ce59
msgid "Defines one filter -- :class:`project.logging.SpecialFilter`, using the alias ``special``. If this filter required additional arguments at time of construction, they can be provided as additional keys in the filter configuration dictionary. In this case, the argument ``foo`` will be given a value of ``bar`` when instantiating the :class:`SpecialFilter`."
msgstr ""

#: ../../topics/logging.txt:318
# 6e49e95e7dc0463a8f5e8ade45f3eea0
msgid "Defines three handlers:"
msgstr ""

#: ../../topics/logging.txt:320
# ac90ce388fac42c0ba1b3aac6a0d3207
msgid "``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message to ``/dev/null``."
msgstr ""

#: ../../topics/logging.txt:323
# bde1136e0c7c46b294362fc2af480d91
msgid "``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) message to stderr. This handler uses the `simple` output format."
msgstr ""

#: ../../topics/logging.txt:327
# e0e7a9a73a1c4a6dbb830c590eced026
msgid "``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

#: ../../topics/logging.txt:331
# 11a9a83840e34a59b4ee6adcf8e52037
msgid "Configures three loggers:"
msgstr ""

#: ../../topics/logging.txt:333
# dc0f3c30bf3d464dba8834a61d6d5da3
msgid "``django``, which passes all messages at ``INFO`` or higher to the ``null`` handler."
msgstr ""

#: ../../topics/logging.txt:336
# 79346b4964d549faa934bf335c2da057
msgid "``django.request``, which passes all ``ERROR`` messages to the ``mail_admins`` handler. In addition, this logger is marked to *not* propagate messages. This means that log messages written to ``django.request`` will not be handled by the ``django`` logger."
msgstr ""

#: ../../topics/logging.txt:342
# 4b1fc5ceb44d4c39a18d5e5a76bf2172
msgid "``myproject.custom``, which passes all messages at ``INFO`` or higher that also pass the ``special`` filter to two handlers -- the ``console``, and ``mail_admins``. This means that all ``INFO`` level messages (or higher) will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will also be output via email."
msgstr ""

#: ../../topics/logging.txt:351
# 20198589562f4262bd861787d6e344b7
msgid "If your ``settings.py`` specifies a custom handler class and the file defining that class also imports ``settings.py`` a circular import will occur."
msgstr ""

#: ../../topics/logging.txt:355
# 04e2497f246146fdb10464b406906ffa
msgid "For example, if ``settings.py`` contains the following config for :setting:`LOGGING`::"
msgstr ""

#: ../../topics/logging.txt:368
# 8236d3d1374c46be8af718b11efec82b
msgid "and ``myproject/logconfig.py`` has the following line before the ``MyHandler`` definition::"
msgstr ""

#: ../../topics/logging.txt:373
# 3c5d676509f14ebd8e1f4c2df7eb01df
msgid "then the ``dictconfig`` module will raise an exception like the following::"
msgstr ""

#: ../../topics/logging.txt:382
# dbfbc46bd1c9491aae3c68420ccef9e4
msgid "Custom logging configuration"
msgstr ""

#: ../../topics/logging.txt:384
# 54b409f986684d4587911bd1d56710ce
msgid "If you don't want to use Python's dictConfig format to configure your logger, you can specify your own configuration scheme."
msgstr ""

#: ../../topics/logging.txt:387
# 98db3b3f2c3049c38afcf2e91edc0a47
msgid "The :setting:`LOGGING_CONFIG` setting defines the callable that will be used to configure Django's loggers. By default, it points at Python's :meth:`logging.dictConfig()` method. However, if you want to use a different configuration process, you can use any other callable that takes a single argument. The contents of :setting:`LOGGING` will be provided as the value of that argument when logging is configured."
msgstr ""

#: ../../topics/logging.txt:395
# 3cb1159fbcd4414881d607ebfb420d15
msgid "Disabling logging configuration"
msgstr ""

#: ../../topics/logging.txt:397
# bb559227349341aaa9511bdc4104fc9e
msgid "If you don't want to configure logging at all (or you want to manually configure logging using your own approach), you can set :setting:`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

#: ../../topics/logging.txt:403
# c9b1ec04181a41f7891fc420f1c4d1b8
msgid "Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the configuration process is disabled, not logging itself. If you disable the configuration process, Django will still make logging calls, falling back to whatever default logging behavior is defined."
msgstr ""

#: ../../topics/logging.txt:410
# 69d931b232b14d0a92320573e0e68109
msgid "Django's logging extensions"
msgstr ""

#: ../../topics/logging.txt:412
# 19eea63357d545d2a4bcff38a2c63528
msgid "Django provides a number of utilities to handle the unique requirements of logging in Web server environment."
msgstr ""

#: ../../topics/logging.txt:418
# 89265553928347e68ec78bc4c1cb84c1
msgid "Django provides three built-in loggers."
msgstr ""

#: ../../topics/logging.txt:421
# b896716305ed45a9aa680be4fb36cd54
msgid "``django``"
msgstr ""

#: ../../topics/logging.txt:423
# 7f537b9246464941ab3987ee5943e4e7
msgid "``django`` is the catch-all logger. No messages are posted directly to this logger."
msgstr ""

#: ../../topics/logging.txt:427
# 120088ad1bdb4e4eae6d0a6629dc6b25
msgid "``django.request``"
msgstr ""

#: ../../topics/logging.txt:429
# 2bcb264f37a64bde8327215f218a12a3
msgid "Log messages related to the handling of requests. 5XX responses are raised as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

#: ../../topics/logging.txt:433
#: ../../topics/logging.txt:448
# bb28e93746ca426883a29411cb006ab6
# 3966c6229f0943a88d588dd64a532a50
msgid "Messages to this logger have the following extra context:"
msgstr ""

#: ../../topics/logging.txt:435
# 9188893c9bfc45ae8a1a52a32fbfddf9
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

#: ../../topics/logging.txt:438
# e7e4b0dbb5644e17940093ca893d27e9
msgid "``request``: The request object that generated the logging message."
msgstr ""

#: ../../topics/logging.txt:442
# f8b79664d4be464996d190de1423a00c
msgid "``django.db.backends``"
msgstr ""

#: ../../topics/logging.txt:444
# 605443ab3ca643a3a74a17cc3853e645
msgid "Messages relating to the interaction of code with the database. For example, every SQL statement executed by a request is logged at the ``DEBUG`` level to this logger."
msgstr ""

#: ../../topics/logging.txt:450
# cc9258c3edb34e2f9379ad0651851ade
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

#: ../../topics/logging.txt:451
# 3ecc644d0abd4177a033d300b9193a70
msgid "``sql``: The SQL statement that was executed."
msgstr ""

#: ../../topics/logging.txt:452
# 17f6626d38a144cf8cf2e0d140559c1e
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

#: ../../topics/logging.txt:454
# 012a1bc392e54411a032550a14d802f4
msgid "For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` is set to ``True``, regardless of the logging level or handlers that are installed."
msgstr ""

#: ../../topics/logging.txt:461
# 540d717dee134f37b86f155b9dadc135
msgid "Django provides one log handler in addition to those provided by the Python logging module."
msgstr ""

#: ../../topics/logging.txt:466
# 1ac083677ec74a5abbd504cc6ecdd303
msgid "This handler sends an email to the site admins for each log message it receives."
msgstr ""

#: ../../topics/logging.txt:469
# b4666cba0c6b49a099f37425b591ed10
msgid "If the log record contains a ``request`` attribute, the full details of the request will be included in the email."
msgstr ""

#: ../../topics/logging.txt:472
# 42ba0e9b96d441e68cbfa7d730d60daa
msgid "If the log record contains stack trace information, that stack trace will be included in the email."
msgstr ""

#: ../../topics/logging.txt:475
# 5cdbd4b5738f4c22b87c536428cf672b
msgid "The ``include_html`` argument of ``AdminEmailHandler`` is used to control whether the traceback email includes an HTML attachment containing the full content of the debug Web page that would have been produced if :setting:`DEBUG` were ``True``. To set this value in your configuration, include it in the handler definition for ``django.utils.log.AdminEmailHandler``, like this::"
msgstr ""

#: ../../topics/logging.txt:490
# d9e9d40958244933accb5c9be109b4cf
msgid "Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as `django-sentry`_ to get the best of both worlds -- the rich information of full tracebacks plus the security of *not* sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports -- learn more on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../topics/logging.txt:506
# 70c6bd8e34e14d76950a8ea6225a446d
msgid "Django provides two log filters in addition to those provided by the Python logging module."
msgstr ""

#: ../../topics/logging.txt:513
# 955138fa1bfd4162a60ebe45fab44395
msgid "This filter accepts a callback function (which should accept a single argument, the record to be logged), and calls it for each record that passes through the filter. Handling of that record will not proceed if the callback returns False."
msgstr ""

#: ../../topics/logging.txt:522
# fb9503326ba44671b3eff2d79f60c303
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

#: ../../topics/logging.txt:524
# 48e216bf3d674ef9a2d41d812d4061c7
msgid "This filter is used as follows in the default :setting:`LOGGING` configuration to ensure that the :class:`AdminEmailHandler` only sends error emails to admins when :setting:`DEBUG` is `False`::"
msgstr ""

#: ../../topics/pagination.txt:3
# dce3380d508f4d11939743561d8c0fdc
msgid "Pagination"
msgstr ""

#: ../../topics/pagination.txt:8
# 3e9f4e3d0ce74e2a9fd65a05cc18ac7d
msgid "Django provides a few classes that help you manage paginated data -- that is, data that's split across several pages, with \"Previous/Next\" links. These classes live in :file:`django/core/paginator.py`."
msgstr ""

#: ../../topics/pagination.txt:15
# 9077fd67767046c495573c54f467afa7
msgid "Give :class:`Paginator` a list of objects, plus the number of items you'd like to have on each page, and it gives you methods for accessing the items for each page::"
msgstr ""

#: ../../topics/pagination.txt:65
# b455c3218e2a405aa845e8cdd3cc8216
msgid "Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or any other object with a ``count()`` or ``__len__()`` method. When determining the number of objects contained in the passed object, ``Paginator`` will first try calling ``count()``, then fallback to using ``len()`` if the passed object has no ``count()`` method. This allows objects such as Django's ``QuerySet`` to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../topics/pagination.txt:75
# 65902c08255842cabdfb2789847c037b
msgid "Using ``Paginator`` in a view"
msgstr ""

#: ../../topics/pagination.txt:77
# 223c34dde9864211acc354a05b827b57
msgid "Here's a slightly more complex example using :class:`Paginator` in a view to paginate a queryset. We give both the view and the accompanying template to show how you can display the results. This example assumes you have a ``Contacts`` model that has already been imported."
msgstr ""

#: ../../topics/pagination.txt:82
# 19060107d3e640baab3222a07ead75e7
msgid "The view function looks like this::"
msgstr ""

#: ../../topics/pagination.txt:102
# d64b143fe2ce4c6880a67f642660c648
msgid "In the template :file:`list.html`, you'll want to include navigation between pages along with any interesting information from the objects themselves::"
msgstr ""

#: ../../topics/pagination.txt:134
# 286acc91281945ee8ca88874a5865e8b
msgid "``Paginator`` objects"
msgstr ""

#: ../../topics/pagination.txt:136
# 114f860903124549b1f854a02a46ea04
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

#: ../../topics/pagination.txt:144
# af24ab024f594178a364a5215cb5f38a
msgid "A list, tuple, Django ``QuerySet``, or other sliceable object with a ``count()`` or ``__len__()`` method."
msgstr ""

#: ../../topics/pagination.txt:148
# 05ae97c3cd1b41c7b1a6038454d0013f
msgid "The maximum number of items to include on a page, not including orphans (see the ``orphans`` optional argument below)."
msgstr ""

#: ../../topics/pagination.txt:155
# c6d7fa505c264766b6d31ad127fdd4b4
msgid "The minimum number of items allowed on the last page, defaults to zero. Use this when you don't want to have a last page with very few items. If the last page would normally have a number of items less than or equal to ``orphans``, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will be two pages; the first page with 10 items and the  second (and last) page with 13 items."
msgstr ""

#: ../../topics/pagination.txt:165
# 830326e4d516405d8f2af3da712e8393
msgid "Whether or not the first page is allowed to be empty.  If ``False`` and ``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

#: ../../topics/pagination.txt:173
# fa0fea4d1f0b49a583221c14092e37a2
msgid "Returns a :class:`Page` object with the given 1-based index. Raises :exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:177
#: ../../topics/pagination.txt:279
#: ../../topics/testing.txt:2067
# 01f56d2a39734e56a43c82615a7bcb24
# 20ca225f3ca042ddab5f4fd266358ba4
# df0b0534c111471db6f15504914d8a9d
msgid "Attributes"
msgstr ""

#: ../../topics/pagination.txt:181
# 3c3e4d69f092441a9e4908eb98eee9b6
msgid "The total number of objects, across all pages."
msgstr ""

#: ../../topics/pagination.txt:185
# d768c5d6670541119cee8b33a20e4772
msgid "When determining the number of objects contained in ``object_list``, ``Paginator`` will first try calling ``object_list.count()``. If ``object_list`` has no ``count()`` method, then ``Paginator`` will fallback to using ``len(object_list)``. This allows objects, such as Django's ``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../topics/pagination.txt:194
# 7660638aded4444195a0ac0ccd8c75df
msgid "The total number of pages."
msgstr ""

#: ../../topics/pagination.txt:198
# c81991dc480c4e3b932ef2073adf2c76
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

#: ../../topics/pagination.txt:202
# b1a57dce74114e29a838881426bf22d5
msgid "``InvalidPage`` exceptions"
msgstr ""

#: ../../topics/pagination.txt:206
# e096ef5a470c4b41a46f5cf11d27bfbb
msgid "A base class for exceptions raised when a paginator is passed an invalid page number."
msgstr ""

#: ../../topics/pagination.txt:209
# d32671ee6ce64b5ab704fa15fde6a631
msgid "The :meth:`Paginator.page` method raises an exception if the requested page is invalid (i.e., not an integer) or contains no objects. Generally, it's enough to trap the ``InvalidPage`` exception, but if you'd like more granularity, you can trap either of the following exceptions:"
msgstr ""

#: ../../topics/pagination.txt:216
# 1b265e02066d4cdaba86447af64ec3a4
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

#: ../../topics/pagination.txt:220
# 73ba168bcc1342d0861ed575136d89b6
msgid "Raised when ``page()`` is given a valid value but no objects exist on that page."
msgstr ""

#: ../../topics/pagination.txt:223
# 5067769690dd4d21820d93ca245d59c0
msgid "Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can handle them both with a simple ``except InvalidPage``."
msgstr ""

#: ../../topics/pagination.txt:228
# 1b97f6991b9f4814a9312a99d9282b5d
msgid "``Page`` objects"
msgstr ""

#: ../../topics/pagination.txt:230
# 232f8e73c82a43ffbd25b68eec6de743
msgid "You usually won't construct ``Page`` objects by hand -- you'll get them using :meth:`Paginator.page`."
msgstr ""

#: ../../topics/pagination.txt:244
# 6d051dd6cd7a4628a78d420acf9f7feb
msgid "Returns ``True`` if there's a next page."
msgstr ""

#: ../../topics/pagination.txt:248
# 0df0741256dd45b8be9b3f023ca88fb0
msgid "Returns ``True`` if there's a previous page."
msgstr ""

#: ../../topics/pagination.txt:252
# 0c21e78f4b874642be2f16c4ed78c688
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

#: ../../topics/pagination.txt:256
# 480ac092a2924ff6994cf4829eb92b6c
msgid "Returns the next page number. Note that this is \"dumb\" and will return the next page number regardless of whether a subsequent page exists."
msgstr ""

#: ../../topics/pagination.txt:261
# 08bce83127ab41ba8306df1c6948933d
msgid "Returns the previous page number. Note that this is \"dumb\" and will return the previous page number regardless of whether a previous page exists."
msgstr ""

#: ../../topics/pagination.txt:266
# 5766ec1e7967487ebe3d66448ff3f0e5
msgid "Returns the 1-based index of the first object on the page, relative to all of the objects in the paginator's list. For example, when paginating a list of 5 objects with 2 objects per page, the second page's :meth:`~Page.start_index` would return ``3``."
msgstr ""

#: ../../topics/pagination.txt:273
# 3c2cf2049bff4f2faf9b6b06cbc78940
msgid "Returns the 1-based index of the last object on the page, relative to all of the objects in the paginator's list. For example, when paginating a list of 5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` would return ``4``."
msgstr ""

#: ../../topics/pagination.txt:283
# f26fb8971dea4fed8d902da84b24a22e
msgid "The list of objects on this page."
msgstr ""

#: ../../topics/pagination.txt:287
# f495021825ae46eea90650c7fc08b021
msgid "The 1-based page number for this page."
msgstr ""

#: ../../topics/pagination.txt:291
# f74ced719ba34a2385f7729abb5ffdbb
msgid "The associated :class:`Paginator` object."
msgstr ""

#: ../../topics/security.txt:3
# 070cd0f8d1b445e7947d6abfe7c81f36
msgid "Security in Django"
msgstr ""

#: ../../topics/security.txt:5
# 78c0f648d0d4440eb6e4e08df2d34ce5
msgid "This document is an overview of Django's security features. It includes advice on securing a Django-powered site."
msgstr ""

#: ../../topics/security.txt:11
# b2edbbc914294bf29351feeddf0bae1e
msgid "Cross site scripting (XSS) protection"
msgstr ""

#: ../../topics/security.txt:15
# 6fd55faba8e34fd4b40a23a05b51e07a
msgid "XSS attacks allow a user to inject client side scripts into the browsers of other users. This is usually achieved by storing the malicious scripts in the database where it will be retrieved and displayed to other users, or by getting users to click a link which will cause the attacker's JavaScript to be executed by the user's browser. However, XSS attacks can originate from any untrusted source of data, such as cookies or Web services, whenever the data is not sufficiently sanitized before including in a page."
msgstr ""

#: ../../topics/security.txt:23
# 8f737118ac404f8c9318ab08f20d7883
msgid "Using Django templates protects you against the majority of XSS attacks. However, it is important to understand what protections it provides and its limitations."
msgstr ""

#: ../../topics/security.txt:27
# 82a794f2985e45c48424d09a48cfed7b
msgid "Django templates :ref:`escape specific characters <automatic-html-escaping>` which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:"
msgstr ""

#: ../../topics/security.txt:36
# f9462819a7bb409fa733506c85abd4fd
msgid "If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML."
msgstr ""

#: ../../topics/security.txt:40
# bc3a0536890a4317b2295432cf0bb937
msgid "It is also important to be particularly careful when using ``is_safe`` with custom template tags, the :ttag:`safe` template tag, :mod:`mark_safe <django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

#: ../../topics/security.txt:44
# b843088f98f04e588b26534afbb765be
msgid "In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping."
msgstr ""

#: ../../topics/security.txt:48
# c556093185434fb8a4f5b812e645016e
msgid "You should also be very careful when storing HTML in the database, especially when that HTML is retrieved and displayed."
msgstr ""

#: ../../topics/security.txt:52
# 3260c4a55cf14dc9a7dba68526cb8f25
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

#: ../../topics/security.txt:54
# 612dcb9176b24c6c8d6b6eba423eb5f1
msgid "CSRF attacks allow a malicious user to execute actions using the credentials of another user without that user's knowledge or consent."
msgstr ""

#: ../../topics/security.txt:57
# a7fa47f9be3646599ef421a980189ad1
msgid "Django has built-in protection against most types of CSRF attacks, providing you have :ref:`enabled and used it <using-csrf>` where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other :ref:`limitations <csrf-limitations>` if your site has subdomains that are outside of your control."
msgstr ""

#: ../../topics/security.txt:65
# 725f5567b48d46fab76b84837615282c
msgid ":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in each POST request. This ensures that a malicious user cannot simply \"replay\" a form POST to your Web site and have another logged in user unwittingly submit that form. The malicious user would have to know the nonce, which is user specific (using a cookie)."
msgstr ""

#: ../../topics/security.txt:71
# d17e42870e5f4ee6aec4d7951ebca6cb
msgid "Be very careful with marking views with the ``csrf_exempt`` decorator unless it is absolutely necessary."
msgstr ""

#: ../../topics/security.txt:75
# e6f7b767ea124327bc8d824dfd6951e3
msgid "SQL injection protection"
msgstr ""

#: ../../topics/security.txt:77
# 76eb8d17374f49d7851b2cd90ed42025
msgid "SQL injection is a type of attack where a malicious user is able to execute arbitrary SQL code on a database. This can result in records being deleted or data leakage."
msgstr ""

#: ../../topics/security.txt:81
# 668d7eecf7524d99bd6110014abbff49
msgid "By using Django's querysets, the resulting SQL will be properly escaped by the underlying database driver. However, Django also gives developers power to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom sql <executing-custom-sql>`. These capabilities should be used sparingly and you should always be careful to properly escape any parameters that the user can control. In addition, you should exercise caution when using :meth:`extra() <django.db.models.query.QuerySet.extra>`."
msgstr ""

#: ../../topics/security.txt:90
# b1048b008a9545b7a7a1cf6824e18aed
msgid "Clickjacking protection"
msgstr ""

#: ../../topics/security.txt:92
# c44148938957404a9a34dfe1f7baf91b
msgid "Clickjacking is a type of attack where a malicious site wraps another site in a frame. This attack can result in an unsuspecting user being tricked into performing unintended actions on the target site."
msgstr ""

#: ../../topics/security.txt:96
# 29dbee27f004440d81386252c69e2477
msgid "Django contains :ref:`clickjacking protection <clickjacking-prevention>` in the form of the :mod:`X-Frame-Options middleware <django.middleware.clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can prevent a site from being rendered inside a frame. It is possible to disable the protection on a per view basis or to configure the exact header value sent."
msgstr ""

#: ../../topics/security.txt:103
# e921fbbaa4ec4d8ba3b4137b041d168d
msgid "The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site."
msgstr ""

#: ../../topics/security.txt:108
# 244d8eba75554edf9182ba13b4f64a8a
msgid "SSL/HTTPS"
msgstr ""

#: ../../topics/security.txt:110
# f139483919e641f78eda3c1b0075b3c8
msgid "It is always better for security, though not always practical in all cases, to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases -- **active** network attackers -- to alter data that is sent in either direction."
msgstr ""

#: ../../topics/security.txt:116
# 4152d95e062e47618ec7dad864184a0e
msgid "If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps to consider to ensure that sensitive information is not leaked:"
msgstr ""

#: ../../topics/security.txt:120
# 31365581418c464aba56179c524d8f61
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

#: ../../topics/security.txt:122
# 688b10bec995404e99ff925c6c88d468
msgid "It is possible to do this with a piece of Django middleware. However, this has problems for the common case of a Django app running behind a reverse proxy. Often, reverse proxies are configured to set the ``X-Forwarded-SSL`` header (or equivalent) if the incoming connection was HTTPS, and the absence of this header could be used to detect a request that was not HTTPS. However, this method usually cannot be relied on, as a client, or a malicious active network attacker, could also set this header."
msgstr ""

#: ../../topics/security.txt:130
# 4d4d14b7c1614666a10057aec95df579
msgid "So, for the case of a reverse proxy, it is recommended that the main Web server should be configured to do the redirect to HTTPS, or configured to send HTTP requests to an app that unconditionally redirects to HTTPS."
msgstr ""

#: ../../topics/security.txt:134
# 7f0f2eb880634b38865816aef8233d91
msgid "Use 'secure' cookies."
msgstr ""

#: ../../topics/security.txt:136
# 913ccdf7756a447d837d514c4d09cfd2
msgid "If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS)."
msgstr ""

#: ../../topics/security.txt:148
# a9d8dab9088b41f193922938cb09d80b
msgid "Host headers and virtual hosting"
msgstr ""

#: ../../topics/security.txt:150
# f50c9b61fac148708b3f15f05567f323
msgid "Django uses the ``Host`` header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, they can be used for Cross-Site Request Forgery and cache poisoning attacks in some circumstances. We recommend you ensure your Web server is configured such that:"
msgstr ""

#: ../../topics/security.txt:156
# 7bffc0963a1743c89c0cfcf1d1a5cc31
msgid "It always validates incoming HTTP ``Host`` headers against the expected host name."
msgstr ""

#: ../../topics/security.txt:158
# 0750361631364105b73948068e428eea
msgid "Disallows requests with no ``Host`` header."
msgstr ""

#: ../../topics/security.txt:159
# 352cd531c61643c4bdbed2d8496dca2b
msgid "Is *not* configured with a catch-all virtual host that forwards requests to a Django application."
msgstr ""

#: ../../topics/security.txt:162
# 2c35f4270a3e4c99918aa5bc1549cfe7
msgid "Additionally, as of 1.3.1, Django requires you to explicitly enable support for the ``X-Forwarded-Host`` header if your configuration requires it."
msgstr ""

#: ../../topics/security.txt:166
# 2b51596603f54afe8b3852a762f6da9a
msgid "Additional security topics"
msgstr ""

#: ../../topics/security.txt:168
# e1a47dd0dddd41c19a4b7408160dbd6f
msgid "While Django provides good security protection out of the box, it is still important to properly deploy your application and take advantage of the security protection of the Web server, operating system and other components."
msgstr ""

#: ../../topics/security.txt:172
# 486597932fde49d080bf9e26bb2d4020
msgid "Make sure that your Python code is outside of the Web server's root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed)."
msgstr ""

#: ../../topics/security.txt:175
# a33e3bca41704af6b84c07926b1920e4
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

#: ../../topics/security.txt:176
# df0ace3a61004ff3943297f8edd2b1f0
msgid "Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

#: ../../topics/security.txt:179
# e5509e23c7e44a6ea1ed302be8670be6
msgid "If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the LimitRequestBody_ directive."
msgstr ""

#: ../../topics/security.txt:183
# 47395656b8524d9f818f1913a3f09e31
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

#: ../../topics/security.txt:184
# 78027d347f7446c8bb44bede52e32823
msgid "It is a good idea to limit the accessibility of your caching system and database using a firewall."
msgstr ""

#: ../../topics/serialization.txt:3
# fad13100edb944439f5bdf45b18d427c
msgid "Serializing Django objects"
msgstr ""

#: ../../topics/serialization.txt:5
# d08114d4ebd343e686723378aa49fdd7
msgid "Django's serialization framework provides a mechanism for \"translating\" Django objects into other formats. Usually these other formats will be text-based and used for sending Django objects over a wire, but it's possible for a serializer to handle any format (text-based or not)."
msgstr ""

#: ../../topics/serialization.txt:12
# e686ed8172eb4c809dc4bf9f6dc8f03c
msgid "If you just want to get some data from your tables into a serialized form, you could use the :djadmin:`dumpdata` management command."
msgstr ""

#: ../../topics/serialization.txt:16
# 2b157cd296124e2bab5ffe78945fe3e7
msgid "Serializing data"
msgstr ""

#: ../../topics/serialization.txt:18
# 38f8dd5cc99e41fbb996bf4e45e28cd2
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

#: ../../topics/serialization.txt:23
# c7a0f1f778c0477cb3b073b38fe88c66
msgid "The arguments to the ``serialize`` function are the format to serialize the data to (see `Serialization formats`_) and a :class:`~django.db.models.query.QuerySet` to serialize. (Actually, the second argument can be any iterator that yields Django objects, but it'll almost always be a QuerySet)."
msgstr ""

#: ../../topics/serialization.txt:29
# 0c0f820a219b4b909da8596f3b059716
msgid "You can also use a serializer object directly::"
msgstr ""

#: ../../topics/serialization.txt:36
# 22ad4d04787b43598964d113d59548cf
msgid "This is useful if you want to serialize data directly to a file-like object (which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

#: ../../topics/serialization.txt:44
# bbe35036a75546dbb8a852da83840e0d
msgid "Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:`format <serialization-formats>` will raise a :class:`~django.core.serializers.SerializerDoesNotExist` exception."
msgstr ""

#: ../../topics/serialization.txt:49
# 1124ac5fcf9c45c9b0043e571b801c9e
msgid "Subset of fields"
msgstr ""

#: ../../topics/serialization.txt:51
# ae741f54347b4e9fa2aebdb3cfd11161
msgid "If you only want a subset of fields to be serialized, you can specify a ``fields`` argument to the serializer::"
msgstr ""

#: ../../topics/serialization.txt:57
# 434810da81c5470191425127d02f5c79
msgid "In this example, only the ``name`` and ``size`` attributes of each model will be serialized."
msgstr ""

#: ../../topics/serialization.txt:62
# 44348b85ce47467682313d088a6871e1
msgid "Depending on your model, you may find that it is not possible to deserialize a model that only serializes a subset of its fields. If a serialized object doesn't specify all the fields that are required by a model, the deserializer will not be able to save deserialized instances."
msgstr ""

#: ../../topics/serialization.txt:68
# f6216bbdc1394e3cb67ad35da1f9dc3a
msgid "Inherited Models"
msgstr ""

#: ../../topics/serialization.txt:70
# 4b1f57c73e244fcea965fd8af61a2c8e
msgid "If you have a model that is defined using an :ref:`abstract base class <abstract-base-classes>`, you don't have to do anything special to serialize that model. Just call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object."
msgstr ""

#: ../../topics/serialization.txt:76
# 9d9180183ccd48feb035d9d8e7b087e8
msgid "However, if you have a model that uses :ref:`multi-table inheritance <multi-table-inheritance>`, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models::"
msgstr ""

#: ../../topics/serialization.txt:87
# 5694862aae4e4db8abb39cd5caf5a248
msgid "If you only serialize the Restaurant model::"
msgstr ""

#: ../../topics/serialization.txt:91
# 701a21fdfb7847f2a6888eff848da8ad
msgid "the fields on the serialized output will only contain the `serves_hot_dogs` attribute. The `name` attribute of the base class will be ignored."
msgstr ""

#: ../../topics/serialization.txt:94
# 4930d6ec2d0b4ccba98d79642779a4df
msgid "In order to fully serialize your Restaurant instances, you will need to serialize the Place models as well::"
msgstr ""

#: ../../topics/serialization.txt:101
# c2931c6c41b342d59768c8812635a746
msgid "Deserializing data"
msgstr ""

#: ../../topics/serialization.txt:103
# 88e0c295c82448d6b3b19af8f2e54fb4
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

#: ../../topics/serialization.txt:108
# 4f6b710b9fa644f8b7d83cb2dd528699
msgid "As you can see, the ``deserialize`` function takes the same format argument as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

#: ../../topics/serialization.txt:111
# 1a1e1cf9d527482b911e5912f866d0c6
msgid "However, here it gets slightly complicated. The objects returned by the ``deserialize`` iterator *aren't* simple Django objects. Instead, they are special ``DeserializedObject`` instances that wrap a created -- but unsaved -- object and any associated relationship data."
msgstr ""

#: ../../topics/serialization.txt:116
# acb2caefda0e47fd949a199b58b7352c
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

#: ../../topics/serialization.txt:118
# 6e2db417e08a40df98b4cf6db04e17cd
msgid "This ensures that deserializing is a non-destructive operation even if the data in your serialized representation doesn't match what's currently in the database. Usually, working with these ``DeserializedObject`` instances looks something like::"
msgstr ""

#: ../../topics/serialization.txt:127
# d0632394ac6f4971b58bdb72578cd3a8
msgid "In other words, the usual use is to examine the deserialized objects to make sure that they are \"appropriate\" for saving before doing so.  Of course, if you trust your data source you could just save the object and move on."
msgstr ""

#: ../../topics/serialization.txt:131
# 58dc12a10a1d4ab282f745198ee6c510
msgid "The Django object itself can be inspected as ``deserialized_object.object``."
msgstr ""

#: ../../topics/serialization.txt:136
# 6574d93eaad143159cde1243101c99a3
msgid "Serialization formats"
msgstr ""

#: ../../topics/serialization.txt:138
# b0ebae50362c4419be6a95790f89c601
msgid "Django supports a number of serialization formats, some of which require you to install third-party Python modules:"
msgstr ""

#: ../../topics/serialization.txt:142
# 8be8c7e4b5ee415dbe9ba703dc9b24b5
msgid "Identifier"
msgstr ""

#: ../../topics/serialization.txt:142
# 06a87f320c04487ba8305d0f5b5e8979
msgid "Information"
msgstr ""

#: ../../topics/serialization.txt:144
# 2d5bc909369c4f1bae191a4b96e7883f
msgid "``xml``"
msgstr ""

#: ../../topics/serialization.txt:144
# d5e4e0b77a6044ab9534e9b646ec87e7
msgid "Serializes to and from a simple XML dialect."
msgstr ""

#: ../../topics/serialization.txt:146
# be0e7e92473f4f2fbfcf322a7f4ba98d
msgid "``json``"
msgstr ""

#: ../../topics/serialization.txt:146
# b61f37cfaa294a18b8a6a028da75391f
msgid "Serializes to and from JSON_ (using a version of simplejson_ bundled with Django)."
msgstr ""

#: ../../topics/serialization.txt:149
# 799a15d205f2404b9ef9cd8f9ff77280
msgid "``yaml``"
msgstr ""

#: ../../topics/serialization.txt:149
# f70b3a884b694fb8ba6b832a46602d8b
msgid "Serializes to YAML (YAML Ain't a Markup Language). This serializer is only available if PyYAML_ is installed."
msgstr ""

#: ../../topics/serialization.txt:158
# e828c7b4ffa04e4dba04b904cb78a59d
msgid "Notes for specific serialization formats"
msgstr ""

#: ../../topics/serialization.txt:161
# d133e54bae8e4a0ea585d9372249dc63
msgid "json"
msgstr ""

#: ../../topics/serialization.txt:163
# e388a4d1113f443fabe72c4b25df760e
msgid "If you're using UTF-8 (or any other non-ASCII encoding) data with the JSON serializer, you must pass ``ensure_ascii=False`` as a parameter to the ``serialize()`` call. Otherwise, the output won't be encoded correctly."
msgstr ""

#: ../../topics/serialization.txt:172
# 80f0d270af2b414983b80c97511bf030
msgid "The Django source code includes the simplejson_ module. However, if you're using Python 2.6 or later (which includes a builtin version of the module), Django will use the builtin ``json`` module automatically. If you have a system installed version that includes the C-based speedup extension, or your system version is more recent than the version shipped with Django (currently, 2.0.7), the system version will be used instead of the version included with Django."
msgstr ""

#: ../../topics/serialization.txt:179
# ee2717a4f0ff420fa4cdedb10fe5cc4b
msgid "Be aware that if you're serializing using that module directly, not all Django output can be passed unmodified to simplejson. In particular, :ref:`lazy translation objects <lazy-translations>` need a `special encoder`_ written for them. Something like this will work::"
msgstr ""

#: ../../topics/serialization.txt:198
# 1cfb8f4a0d934fd48fe41c24329c4c2e
msgid "Natural keys"
msgstr ""

#: ../../topics/serialization.txt:205
# fafd2b91d04f41d58c61b76751955220
msgid "The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances."
msgstr ""

#: ../../topics/serialization.txt:210
# a4be8d4ac3b547fd8fa5c8731da3e808
msgid "Consider the case of a list of objects that have a foreign key referencing :class:`~django.contrib.conttenttypes.models.ContentType`. If you're going to serialize an object that refers to a content type, then you need to have a way to refer to that content type to begin with. Since ``ContentType`` objects are automatically created by Django during the database synchronization process, the primary key of a given content type isn't easy to predict; it will depend on how and when :djadmin:`syncdb` was executed. This is true for all models which automatically generate objects, notably including :class:`~django.contrib.auth.models.Permission`, :class:`~django.contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/serialization.txt:224
# 65ef5a27460d4b709c33a387885babd0
msgid "You should never include automatically generated objects in a fixture or other serialized data. By chance, the primary keys in the fixture may match those in the database and loading the fixture will have no effect. In the more likely case that they don't match, the fixture loading will fail with an :class:`~django.db.IntegrityError`."
msgstr ""

#: ../../topics/serialization.txt:230
# af6112e244e94ab096ead651ef2b908c
msgid "There is also the matter of convenience. An integer id isn't always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful."
msgstr ""

#: ../../topics/serialization.txt:234
# c5e052efe7734a9aa4927ce1106771cf
msgid "It is for these reasons that Django provides *natural keys*. A natural key is a tuple of values that can be used to uniquely identify an object instance without using the primary key value."
msgstr ""

#: ../../topics/serialization.txt:239
# e65650bdc9e34ab48f2ab69b6620e1c9
msgid "Deserialization of natural keys"
msgstr ""

#: ../../topics/serialization.txt:241
# 6f8043e0f2e047f68a0909ce9636dea9
msgid "Consider the following two models::"
msgstr ""

#: ../../topics/serialization.txt:258
# 581a237843ca442d806b1ca5263b3277
msgid "Ordinarily, serialized data for ``Book`` would use an integer to refer to the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

#: ../../topics/serialization.txt:272
# c723f032e82f46139e3bcad482f0e6b2
msgid "This isn't a particularly natural way to refer to an author. It requires that you know the primary key value for the author; it also requires that this primary key value is stable and predictable."
msgstr ""

#: ../../topics/serialization.txt:276
# e12945ee031d48b6a88ae5d3cf1484ec
msgid "However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a ``get_by_natural_key()`` method. In the case of a Person, a good natural key might be the pair of first and last name::"
msgstr ""

#: ../../topics/serialization.txt:299
# c491022abfb24ccaab9dc0ff35794973
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

#: ../../topics/serialization.txt:312
# 2c8fe2e5c1aa4de69c44f220e7a25163
msgid "When you try to load this serialized data, Django will use the ``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into the primary key of an actual ``Person`` object."
msgstr ""

#: ../../topics/serialization.txt:318
# 133bdec31570446aa022866baeb3df1e
msgid "Whatever fields you use for a natural key must be able to uniquely identify an object. This will usually mean that your model will have a uniqueness clause (either unique=True on a single field, or ``unique_together`` over multiple fields) for the field or fields in your natural key. However, uniqueness doesn't need to be enforced at the database level. If you are certain that a set of fields will be effectively unique, you can still use those fields as a natural key."
msgstr ""

#: ../../topics/serialization.txt:328
# e8e7fb39ea0a47a5992a3fb1eb68870a
msgid "Serialization of natural keys"
msgstr ""

#: ../../topics/serialization.txt:330
# 835787f5cdae4d948f67976ed3ab4154
msgid "So how do you get Django to emit a natural key when serializing an object? Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

#: ../../topics/serialization.txt:347
# 115b9c33ce994afa86ab96896feab9cf
msgid "That method should always return a natural key tuple -- in this example, ``(first name, last name)``. Then, when you call ``serializers.serialize()``, you provide a ``use_natural_keys=True`` argument::"
msgstr ""

#: ../../topics/serialization.txt:354
# 66fad7947a654cc2a0c2fdaf00863ec6
msgid "When ``use_natural_keys=True`` is specified, Django will use the ``natural_key()`` method to serialize any reference to objects of the type that defines the method."
msgstr ""

#: ../../topics/serialization.txt:358
# 33c4474570cd40879b6b1e0ad716b74a
msgid "If you are using :djadmin:`dumpdata` to generate serialized data, you use the `--natural` command line flag to generate natural keys."
msgstr ""

#: ../../topics/serialization.txt:363
# 67448001047a4e9f832a47ae5dc9bc0a
msgid "You don't need to define both ``natural_key()`` and ``get_by_natural_key()``. If you don't want Django to output natural keys during serialization, but you want to retain the ability to load natural keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

#: ../../topics/serialization.txt:369
# c4a47f53c276434d9987c8a9dac30c32
msgid "Conversely, if (for some strange reason) you want Django to output natural keys during serialization, but *not* be able to load those key values, just don't define the ``get_by_natural_key()`` method."
msgstr ""

#: ../../topics/serialization.txt:374
# 195597e6fd0d451a9035a7cbe699038d
msgid "Dependencies during serialization"
msgstr ""

#: ../../topics/serialization.txt:376
# 36f07887120441cd81308c4e0b1f290b
msgid "Since natural keys rely on database lookups to resolve references, it is important that the data exists before it is referenced. You can't make a `forward reference` with natural keys -- the data you're referencing must exist before you include a natural key reference to that data."
msgstr ""

#: ../../topics/serialization.txt:381
# 96c0ede5a5c843dba717dcada6a8ce44
msgid "To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :djadminopt:`--natural` option will serialize any model with a ``natural_key()`` method before serializing standard primary key objects."
msgstr ""

#: ../../topics/serialization.txt:385
# d13da762184d477eb40c00d8f8475229
msgid "However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them."
msgstr ""

#: ../../topics/serialization.txt:391
# 97ead2e327e249f5919a17990a4ba6e8
msgid "To control this ordering, you can define dependencies on your ``natural_key()`` methods. You do this by setting a ``dependencies`` attribute on the ``natural_key()`` method itself."
msgstr ""

#: ../../topics/serialization.txt:395
# ede12523e86846988bcbf8339e8eca22
msgid "For example, let's add a natural key to the ``Book`` model from the example above::"
msgstr ""

#: ../../topics/serialization.txt:405
# ceb23d5f5c2e42dd8fe7ec63ad9d7ab1
msgid "The natural key for a ``Book`` is a combination of its name and its author. This means that ``Person`` must be serialized before ``Book``. To define this dependency, we add one extra line::"
msgstr ""

#: ../../topics/serialization.txt:413
# f5ec840fd5e64e54bd01e52b793f4553
msgid "This definition ensures that all ``Person`` objects are serialized before any ``Book`` objects. In turn, any object referencing ``Book`` will be serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

#: ../../topics/settings.txt:3
# 2d66e39a6437452783e4585aabbeff77
msgid "Django settings"
msgstr ""

#: ../../topics/settings.txt:5
# d28013c57720432ea97e597dc6501996
msgid "A Django settings file contains all the configuration of your Django installation. This document explains how settings work and which settings are available."
msgstr ""

#: ../../topics/settings.txt:10
# 86a8b9f3690d4101898b5b032c84b3f3
msgid "The basics"
msgstr ""

#: ../../topics/settings.txt:12
# 4b3e746e48ac4b0cb735791d9a7bc99f
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

#: ../../topics/settings.txt:14
# 41e4bd6b984840b58534c5449c3ce2c1
msgid "Here are a couple of example settings::"
msgstr ""

#: ../../topics/settings.txt:20
# abcc2688f349429bb7f767f0804c8798
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

#: ../../topics/settings.txt:22
# 36d171fa73cc4b3fbd34d117b2d30cfe
msgid "It doesn't allow for Python syntax errors."
msgstr ""

#: ../../topics/settings.txt:23
# a6ea09daccd14a97a7f1fc4f0d04d2f5
msgid "It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

#: ../../topics/settings.txt:28
# c1c62de485284a6497999cde5abd58f9
msgid "It can import values from other settings files."
msgstr ""

#: ../../topics/settings.txt:33
# 89b41427a6c54f17a284171224e98c0e
msgid "Designating the settings"
msgstr ""

#: ../../topics/settings.txt:35
# 6b78a74d8fdf455f8af765cf07ac4700
msgid "When you use Django, you have to tell it which settings you're using. Do this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../topics/settings.txt:38
# 68ce41aef3cf4ddc805f11d8ccfbafe5
msgid "The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e.g. ``mysite.settings``. Note that the settings module should be on the Python `import search path`_."
msgstr ""

#: ../../topics/settings.txt:45
# eb0f86ef00474b53b58f8bd1c37d6a42
msgid "The django-admin.py utility"
msgstr ""

#: ../../topics/settings.txt:47
# 27cd2606d1864835a28ee454b52b3a3d
msgid "When using :doc:`django-admin.py </ref/django-admin>`, you can either set the environment variable once, or explicitly pass in the settings module each time you run the utility."
msgstr ""

#: ../../topics/settings.txt:51
# 2cf8c16e5caa4b0384b573338453b625
msgid "Example (Unix Bash shell)::"
msgstr ""

#: ../../topics/settings.txt:56
# 6a24e88bfd924bcb81a2699073e38311
msgid "Example (Windows shell)::"
msgstr ""

#: ../../topics/settings.txt:61
# ebd01819684948ce906b7d29143051ed
msgid "Use the ``--settings`` command-line argument to specify the settings manually::"
msgstr ""

#: ../../topics/settings.txt:68
# 66a7aa07cca04af990bc9f2f749cc95e
msgid "On the server (mod_wsgi)"
msgstr ""

#: ../../topics/settings.txt:70
# 5ccd3c5b1cae4a1ab115b277217e90a9
msgid "In your live server environment, you'll need to tell your WSGI application what settings file to use. Do that with ``os.environ``::"
msgstr ""

#: ../../topics/settings.txt:77
# f41dbe448abf4f05b3b1c6ba9a760302
msgid "Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/modwsgi>` for more information and other common elements to a Django WSGI application."
msgstr ""

#: ../../topics/settings.txt:82
# e5b09597b34f4d20a62a435f8739cb84
msgid "Default settings"
msgstr ""

#: ../../topics/settings.txt:84
# 838f7e3a24134a0a87977d908beaf1d8
msgid "A Django settings file doesn't have to define any settings if it doesn't need to. Each setting has a sensible default value. These defaults live in the module :file:`django/conf/global_settings.py`."
msgstr ""

#: ../../topics/settings.txt:88
# cab331f4f576490c8496d673dc8c454f
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

#: ../../topics/settings.txt:90
# 66d2e7943f3c4cd6a1c4dff6f6af28dc
msgid "Load settings from ``global_settings.py``."
msgstr ""

#: ../../topics/settings.txt:91
# 811514a2944b4d64a803e4b647865de1
msgid "Load settings from the specified settings file, overriding the global settings as necessary."
msgstr ""

#: ../../topics/settings.txt:94
# 15321acc9a0446c89944cd57f58f7861
msgid "Note that a settings file should *not* import from ``global_settings``, because that's redundant."
msgstr ""

#: ../../topics/settings.txt:98
# 077711001d0b4293931fb613e074383e
msgid "Seeing which settings you've changed"
msgstr ""

#: ../../topics/settings.txt:100
# 9f82bc2f72db426fb7cce00c6a5c10ae
msgid "There's an easy way to view which of your settings deviate from the default settings. The command ``python manage.py diffsettings`` displays differences between the current settings file and Django's default settings."
msgstr ""

#: ../../topics/settings.txt:104
# 98f19ef4eaca43158303780bc2225ab5
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

#: ../../topics/settings.txt:107
# ff4aa151b18f486ebf7de69c8bdbaf63
msgid "Using settings in Python code"
msgstr ""

#: ../../topics/settings.txt:109
# fdb28daa3e184232b4d1c7c4c181f319
msgid "In your Django apps, use settings by importing the object ``django.conf.settings``. Example::"
msgstr ""

#: ../../topics/settings.txt:117
# 637047e1118e4728a53c059fbccf2e2a
msgid "Note that ``django.conf.settings`` isn't a module -- it's an object. So importing individual settings is not possible::"
msgstr ""

#: ../../topics/settings.txt:122
# d9de3e65e61c47af9641f4c05e38637f
msgid "Also note that your code should *not* import from either ``global_settings`` or your own settings file. ``django.conf.settings`` abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings."
msgstr ""

#: ../../topics/settings.txt:129
# 7a8e427623d441719f0d7c9d6ad088e3
msgid "Altering settings at runtime"
msgstr ""

#: ../../topics/settings.txt:131
# b8e7313c455742348d34352fcf7f42ad
msgid "You shouldn't alter settings in your applications at runtime. For example, don't do this in a view::"
msgstr ""

#: ../../topics/settings.txt:138
# 30ea8a5169994a65af15cb2b6a36c5fe
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

#: ../../topics/settings.txt:141
# 5cdb090c3562444494b9e17997b61495
msgid "Security"
msgstr ""

#: ../../topics/settings.txt:143
# 69b18b5f608e4a64a23d1ea28714e64e
msgid "Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your Web server's user can read it. This is especially important in a shared-hosting environment."
msgstr ""

#: ../../topics/settings.txt:149
# 0beecb440f864c8fa9392b706e41cb6b
msgid "Available settings"
msgstr ""

#: ../../topics/settings.txt:151
# 8c6a9d98f24e42c881cdabd21b55be45
msgid "For a full list of available settings, see the :doc:`settings reference </ref/settings>`."
msgstr ""

#: ../../topics/settings.txt:154
# a7bd79e248af40f5905fa56d0c1185b6
msgid "Creating your own settings"
msgstr ""

#: ../../topics/settings.txt:156
# 98b42858ebed474cad1551ee17e2f7de
msgid "There's nothing stopping you from creating your own settings, for your own Django apps. Just follow these conventions:"
msgstr ""

#: ../../topics/settings.txt:159
# 5c279443eeda40388d9b2c5103404b61
msgid "Setting names are in all uppercase."
msgstr ""

#: ../../topics/settings.txt:160
# cde44de195d04f33b58a03e65f4aba29
msgid "Don't reinvent an already-existing setting."
msgstr ""

#: ../../topics/settings.txt:162
# f0632a6f38744ca5ab49f7e7664883cf
msgid "For settings that are sequences, Django itself uses tuples, rather than lists, but this is only a convention."
msgstr ""

#: ../../topics/settings.txt:168
# 1a33bfd0ded945879b52ccbb45922345
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

#: ../../topics/settings.txt:170
# c71e6fc99aa64762b99f1a3c308e93c5
msgid "In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` environment variable. For example, if you're using the template system by itself, you likely don't want to have to set up an environment variable pointing to a settings module."
msgstr ""

#: ../../topics/settings.txt:175
# 4b5052a7dab84f9584260a53ca7a797e
msgid "In these cases, you can configure Django's settings manually. Do this by calling:"
msgstr ""

#: ../../topics/settings.txt:187
# 3c21afd2e4fc4e20a9f36e86f83f1e8f
msgid "Pass ``configure()`` as many keyword arguments as you'd like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to ``configure()`` and is needed at some later point, Django will use the default setting value."
msgstr ""

#: ../../topics/settings.txt:193
# 803d3e0fc36044fd8ea22e856c96723e
msgid "Configuring Django in this fashion is mostly necessary -- and, indeed, recommended -- when you're using a piece of the framework inside a larger application."
msgstr ""

#: ../../topics/settings.txt:197
# e4e16bfe07f145569852a5b3e76f33a7
msgid "Consequently, when configured via ``settings.configure()``, Django will not make any modifications to the process environment variables (see the documentation of :setting:`TIME_ZONE` for why this would normally occur). It's assumed that you're already in full control of your environment in these cases."
msgstr ""

#: ../../topics/settings.txt:204
# e4e665eebfc44987aa555b23aac0e760
msgid "Custom default settings"
msgstr ""

#: ../../topics/settings.txt:206
# 781ee4ceecae4aecac5e5f86bb8e26fc
msgid "If you'd like default values to come from somewhere other than ``django.conf.global_settings``, you can pass in a module or class that provides the default settings as the ``default_settings`` argument (or as the first positional argument) in the call to ``configure()``."
msgstr ""

#: ../../topics/settings.txt:211
# 97f9f90379964312ba71bec1e7c3a398
msgid "In this example, default settings are taken from ``myapp_defaults``, and the :setting:`DEBUG` setting is set to ``True``, regardless of its value in ``myapp_defaults``::"
msgstr ""

#: ../../topics/settings.txt:220
# 383987a84f464dacb3627be8e3a29bef
msgid "The following example, which uses ``myapp_defaults`` as a positional argument, is equivalent::"
msgstr ""

#: ../../topics/settings.txt:225
# 51f140e929304bef8791133178f238f2
msgid "Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely *replaces* the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in ``django.conf.settings.global_settings`` for the full list."
msgstr ""

#: ../../topics/settings.txt:233
# 841186b7ed994d6cb6f69c93937f1994
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

#: ../../topics/settings.txt:235
# 84a35d1d9ec24b398359814af6a41bbc
msgid "If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, you *must* call ``configure()`` at some point before using any code that reads settings."
msgstr ""

#: ../../topics/settings.txt:239
# d62c0acaef4b4330908d4e7f9669e4e6
msgid "If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, Django will raise an ``ImportError`` exception the first time a setting is accessed."
msgstr ""

#: ../../topics/settings.txt:243
# 32786613e621403487ff94eba54819c6
msgid "If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, *then* call ``configure()``, Django will raise a ``RuntimeError`` indicating that settings have already been configured."
msgstr ""

#: ../../topics/settings.txt:247
# 09de3e8b00dc4fafaae53170646c5ffa
msgid "Also, it's an error to call ``configure()`` more than once, or to call ``configure()`` after any setting has been accessed."
msgstr ""

#: ../../topics/settings.txt:250
# 2c316598a3fd4d88b66e12b50fa6855b
msgid "It boils down to this: Use exactly one of either ``configure()`` or ``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

#: ../../topics/signals.txt:3
# 49696022b8684c2c946b11020c8e9266
msgid "Signals"
msgstr ""

#: ../../topics/signals.txt:8
# 0b4e1495b0e7408b99d8ad0028b73e7d
msgid "Django includes a \"signal dispatcher\" which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain *senders* to notify a set of *receivers* that some action has taken place. They're especially useful when many pieces of code may be interested in the same events."
msgstr ""

#: ../../topics/signals.txt:14
# 59dcb96c88d0455c8a2f004a44378164
msgid "Django provides a :doc:`set of built-in signals </ref/signals>` that let user code get notified by Django itself of certain actions. These include some useful notifications:"
msgstr ""

#: ../../topics/signals.txt:18
# aba146ba9f384b47aeb73eea74826edd
msgid ":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals.post_save`"
msgstr ""

#: ../../topics/signals.txt:21
# 1a857ea7ce8648eb812a04d5af0baf30
msgid "Sent before or after a model's :meth:`~django.db.models.Model.save` method is called."
msgstr ""

#: ../../topics/signals.txt:24
# 6c6e5e3cb18b47c38df3f0c608241b9d
msgid ":data:`django.db.models.signals.pre_delete` & :data:`django.db.models.signals.post_delete`"
msgstr ""

#: ../../topics/signals.txt:27
# 255a51ecfbe74f24ba6e6a447277e839
msgid "Sent before or after a model's :meth:`~django.db.models.Model.delete` method or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is called."
msgstr ""

#: ../../topics/signals.txt:31
# 90638541b1bf4c5e8685ab68de58cb48
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

#: ../../topics/signals.txt:33
# a9b3a9b8eced40f2a6364fe6178252bd
msgid "Sent when a :class:`ManyToManyField` on a model is changed."
msgstr ""

#: ../../topics/signals.txt:35
# ebf76f758cd1491fa959de4c05bd0e0c
msgid ":data:`django.core.signals.request_started` & :data:`django.core.signals.request_finished`"
msgstr ""

#: ../../topics/signals.txt:38
# 901114c056f64853a7727bcd94f398c4
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

#: ../../topics/signals.txt:40
# a16975b23f7648a58197c8b35ad83906
msgid "See the :doc:`built-in signal documentation </ref/signals>` for a complete list, and a complete explanation of each signal."
msgstr ""

#: ../../topics/signals.txt:43
# 9ec10b75d0654f4ca146d978f3255ba8
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

#: ../../topics/signals.txt:48
# 4e2050a03fb34a158fa02bace1d610a8
msgid "Listening to signals"
msgstr ""

#: ../../topics/signals.txt:50
# 30c2276fc3524cf7977381e1b368661e
msgid "To receive a signal, you need to register a *receiver* function that gets called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr ""

#: ../../topics/signals.txt:71
# e44fa9a119704be2b924b6180b15cda7
msgid "Let's see how this works by registering a signal that gets called after each HTTP request is finished. We'll be connecting to the :data:`~django.core.signals.request_finished` signal."
msgstr ""

#: ../../topics/signals.txt:78
# 6bb7e6110be943cd91694e0696ffca5b
msgid "Receiver functions"
msgstr ""

#: ../../topics/signals.txt:80
# 77a5a8f3960b4081b61cf76409017573
msgid "First, we need to define a receiver function. A receiver can be any Python function or method:"
msgstr ""

#: ../../topics/signals.txt:88
# eb35a6fb9f074ee2af379b48ab8f9c9e
msgid "Notice that the function takes a ``sender`` argument, along with wildcard keyword arguments (``**kwargs``); all signal handlers must take these arguments."
msgstr ""

#: ../../topics/signals.txt:91
# ae3abef382f74eacb85c6915f9ded7dd
msgid "We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of :data:`~django.core.signals.request_finished`, it's documented as sending no arguments, which means we might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

#: ../../topics/signals.txt:100
# 9116a9fcc55f430485f15788edef069f
msgid "This would be wrong -- in fact, Django will throw an error if you do so. That's because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments."
msgstr ""

#: ../../topics/signals.txt:107
# 68ce7822912d4b8c9983086346582223
msgid "Connecting receiver functions"
msgstr ""

#: ../../topics/signals.txt:109
# fd9a711e6f394838ab082a49ab797120
msgid "There are two ways you can connect a receiver to a signal. You can take the manual connect route:"
msgstr ""

#: ../../topics/signals.txt:118
# 86022945d52f4f6ba1166d59f3659df4
msgid "Alternatively, you can use a ``receiver`` decorator when you define your receiver:"
msgstr ""

#: ../../topics/signals.txt:130
# 73f064d25a2a48b1b3c9d3aeef5b28be
msgid "Now, our ``my_callback`` function will be called each time a request finishes."
msgstr ""

#: ../../topics/signals.txt:134
# 8643b01112074fba8e804b981dcf2682
msgid "The ``receiver`` decorator was added in Django 1.3."
msgstr ""

#: ../../topics/signals.txt:138
# a3766c6486ff4272b2ecd2f067673822
msgid "You can put signal handling and registration code anywhere you like. However, you'll need to make sure that the module it's in gets imported early on so that the signal handling gets registered before any signals need to be sent. This makes your app's ``models.py`` a good place to put registration of signal handlers."
msgstr ""

#: ../../topics/signals.txt:147
# ad97e5fd65c94aa9bc2f98de58b46de2
msgid "Connecting to signals sent by specific senders"
msgstr ""

#: ../../topics/signals.txt:149
# 1179cd33193b4450864b33b3dd496619
msgid "Some signals get sent many times, but you'll only be interested in receiving a certain subset of those signals. For example, consider the :data:`django.db.models.signals.pre_save` signal sent before a model gets saved. Most of the time, you don't need to know when *any* model gets saved -- just when one *specific* model is saved."
msgstr ""

#: ../../topics/signals.txt:155
# 191e302fcfe741028851fb85acbc91ab
msgid "In these cases, you can register to receive signals sent only by particular senders. In the case of :data:`django.db.models.signals.pre_save`, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:"
msgstr ""

#: ../../topics/signals.txt:170
# 8fceade47e2342e49edbb76941a9829d
msgid "The ``my_handler`` function will only be called when an instance of ``MyModel`` is saved."
msgstr ""

#: ../../topics/signals.txt:173
# fe82ed9fe2f5403a99925b4621d8172c
msgid "Different signals use different objects as their senders; you'll need to consult the :doc:`built-in signal documentation </ref/signals>` for details of each particular signal."
msgstr ""

#: ../../topics/signals.txt:180
# 57c1ffffc00e4da0a35244691cb07a05
msgid "Preventing duplicate signals"
msgstr ""

#: ../../topics/signals.txt:182
# d221f0975b9c4d658650ccea793b064d
msgid "In some circumstances, the module in which you are connecting signals may be imported multiple times. This can cause your receiver function to be registered more than once, and thus called multiples times for a single signal event."
msgstr ""

#: ../../topics/signals.txt:187
# fef40fbf1eb24526aaab273264a73e2f
msgid "If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique ``dispatch_uid`` value."
msgstr ""

#: ../../topics/signals.txt:201
# c76b95eb642349b19367dd4609c3160f
msgid "Defining and sending signals"
msgstr ""

#: ../../topics/signals.txt:203
# d37054a8a0054d13a4ae12b976117260
msgid "Your applications can take advantage of the signal infrastructure and provide its own signals."
msgstr ""

#: ../../topics/signals.txt:207
# e92b216fee72462b93700bab92e942f5
msgid "Defining signals"
msgstr ""

#: ../../topics/signals.txt:211
# 0ebfca38331241089c19642dd05a2717
msgid "All signals are :class:`django.dispatch.Signal` instances. The ``providing_args`` is a list of the names of arguments the signal will provide to listeners."
msgstr ""

#: ../../topics/signals.txt:215
# f0f65e5865f34020879eb12e93f431dd
msgid "For example:"
msgstr ""

#: ../../topics/signals.txt:223
# 7edebb58213448828a527ee8c9c5c4db
msgid "This declares a ``pizza_done`` signal that will provide receivers with ``toppings`` and ``size`` arguments."
msgstr ""

#: ../../topics/signals.txt:226
# 35038e28e24141fa9d65d06c626426d6
msgid "Remember that you're allowed to change this list of arguments at any time, so getting the API right on the first try isn't necessary."
msgstr ""

#: ../../topics/signals.txt:229
# 1f59ec862a9846e08c52c49cfd455118
msgid "Sending signals"
msgstr ""

#: ../../topics/signals.txt:231
# c4a55553f2704894bc5ae91a2f6f197c
msgid "There are two ways to send send signals in Django."
msgstr ""

#: ../../topics/signals.txt:236
# 089284611ce745d8a024d53ba8ffb9a6
msgid "To send a signal, call either :meth:`Signal.send` or :meth:`Signal.send_robust`. You must provide the ``sender`` argument, and may provide as many other keyword arguments as you like."
msgstr ""

#: ../../topics/signals.txt:240
# 93856ea6b89f4074ac1eda59327b9255
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr ""

#: ../../topics/signals.txt:251
# baf910eb630c45a0ad3bccbd56c717b0
msgid "Both ``send()`` and ``send_robust()`` return a list of tuple pairs ``[(receiver, response), ... ]``, representing the list of called receiver functions and their response values."
msgstr ""

#: ../../topics/signals.txt:255
# 191d6e8fb7104cbe956312b0f3ef142e
msgid "``send()`` differs from ``send_robust()`` in how exceptions raised by receiver functions are handled. ``send()`` does *not* catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error."
msgstr ""

#: ../../topics/signals.txt:260
# 2315fffd299248feb55160b37f16364e
msgid "``send_robust()`` catches all errors derived from Python's ``Exception`` class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error."
msgstr ""

#: ../../topics/signals.txt:265
# 2841df98fcab4ca880fc6750a8e84c4a
msgid "Disconnecting signals"
msgstr ""

#: ../../topics/signals.txt:269
# e0226dc194a84916913bf5e55ac87aa7
msgid "To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The arguments are as described in :meth:`.Signal.connect`."
msgstr ""

#: ../../topics/signals.txt:272
# 731a60252cd34cd999ea853b21c3fcda
msgid "The *receiver* argument indicates the registered receiver to disconnect. It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

#: ../../topics/signing.txt:3
# e21d2551853c44ec858a84f273378dba
msgid "Cryptographic signing"
msgstr ""

#: ../../topics/signing.txt:10
# 602ec5aec22342a8a2835b1b58a19902
msgid "The golden rule of Web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

#: ../../topics/signing.txt:15
# 9c60549a1281490e9900aa7147cf06f2
msgid "Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../topics/signing.txt:19
# 7ea5dbfaa7ed47bfa91f5c0912093697
msgid "You may also find signing useful for the following:"
msgstr ""

#: ../../topics/signing.txt:21
# 71d64788c6424c188872f599c13bde4b
msgid "Generating \"recover my account\" URLs for sending to users who have lost their password."
msgstr ""

#: ../../topics/signing.txt:24
# 0210af3aa3d64dc68b2217764124ed3e
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

#: ../../topics/signing.txt:26
# dc79f49156d247d4ab9e523fe6706cb3
msgid "Generating one-time secret URLs for allowing temporary access to a protected resource, for example a downloadable file that a user has paid for."
msgstr ""

#: ../../topics/signing.txt:31
# 171f3de692fd4537b6d96ace9f88ae51
msgid "Protecting the SECRET_KEY"
msgstr ""

#: ../../topics/signing.txt:33
# 762eb1c2c9c3442cb5f281fbefe9d6d0
msgid "When you create a new Django project using :djadmin:`startproject`, the ``settings.py`` file is generated automatically and gets a random :setting:`SECRET_KEY` value. This value is the key to securing signed data -- it is vital you keep this secure, or attackers could use it to generate their own signed values."
msgstr ""

#: ../../topics/signing.txt:40
# cd8dd8a587d74d05a9ed76463a14fdb9
msgid "Using the low-level API"
msgstr ""

#: ../../topics/signing.txt:44
# 809a38321adb4435b3eab56e81d29527
msgid "Django's signing methods live in the ``django.core.signing`` module. To sign a value, first instantiate a ``Signer`` instance::"
msgstr ""

#: ../../topics/signing.txt:53
# 155367f521aa40ce8302ced72962a0d5
msgid "The signature is appended to the end of the string, following the colon. You can retrieve the original value using the ``unsign`` method::"
msgstr ""

#: ../../topics/signing.txt:60
# e7ec566efb0048a883fd8d24bb882ba8
msgid "If the signature or value have been altered in any way, a ``django.core.signing.BadSignature`` exception will be raised::"
msgstr ""

#: ../../topics/signing.txt:69
# a7cddaf59f0142729608e3d5287057f4
msgid "By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to generate signatures. You can use a different secret by passing it to the ``Signer`` constructor::"
msgstr ""

#: ../../topics/signing.txt:79
# a4a852e9cecd4a45beb3deb142e84ad2
msgid "Using the salt argument"
msgstr ""

#: ../../topics/signing.txt:81
# 4bf0fe59c0a94a3db5c8a456ca9cbb1b
msgid "If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional ``salt`` argument to the ``Signer`` class. Using a salt will seed the signing hash function with both the salt and your :setting:`SECRET_KEY`::"
msgstr ""

#: ../../topics/signing.txt:95
# 2987d49982ea4cb6b5c08ccfe1356805
msgid "Using salt in this way puts the different signatures into different namespaces.  A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt."
msgstr ""

#: ../../topics/signing.txt:103
# ce18ffe6d57b459cae32771ded0f085a
msgid "Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay secret."
msgstr ""

#: ../../topics/signing.txt:107
# 0de47582a05e4e52a2c7434f007e5e36
msgid "Verifying timestamped values"
msgstr ""

#: ../../topics/signing.txt:111
# ede705afea36479cb88432d59d6d600f
msgid "``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed timestamp to the value. This allows you to confirm that a signed value was created within a specified period of time::"
msgstr ""

#: ../../topics/signing.txt:129
# 9972a62306554fdfbed586a2e2ad7d9a
msgid "Protecting complex data structures"
msgstr ""

#: ../../topics/signing.txt:131
# 07bf717a90544c148dedfde43cb40293
msgid "If you wish to protect a list, tuple or dictionary you can do so using the signing module's ``dumps`` and ``loads`` functions. These imitate Python's pickle module, but use JSON serialization under the hood. JSON ensures that even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

#: ../../topics/signing.txt:146
# 621d05ef6acc41d2b432c9c98ec2e65d
msgid "Returns URL-safe, sha1 signed base64 compressed JSON string."
msgstr ""

#: ../../topics/signing.txt:150
# 6687e59715c5440cb20858fb4f09cc4c
msgid "Reverse of dumps(), raises ``BadSignature`` if signature fails."
msgstr ""

#: ../../topics/templates.txt:3
# 164d0165db0743bb861c69b1fb48045d
msgid "The Django template language"
msgstr ""

#: ../../topics/templates.txt:7
# 235468eb753c45978ae8ec1808442591
msgid "This document explains the language syntax of the Django template system. If you're looking for a more technical perspective on how it works and how to extend it, see :doc:`/ref/templates/api`."
msgstr ""

#: ../../topics/templates.txt:11
# a2ce0cf4ca7d44e2bc97b60601d390fa
msgid "Django's template language is designed to strike a balance between power and ease. It's designed to feel comfortable to those used to working with HTML. If you have any exposure to other text-based template languages, such as Smarty_ or CheetahTemplate_, you should feel right at home with Django's templates."
msgstr ""

#: ../../topics/templates.txt:18
# 49eccb45c4534cfe90e9e84a39562377
msgid "If you have a background in programming, or if you're used to languages like PHP which mix programming code directly into HTML, you'll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic."
msgstr ""

#: ../../topics/templates.txt:24
# 933d28bc550e4e7285cba23c0107004b
msgid "The Django template system provides tags which function similarly to some programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` tag for looping, etc. -- but these are not simply executed as the corresponding Python code, and the template system will not execute arbitrary Python expressions. Only the tags, filters and syntax listed below are supported by default (although you can add :doc:`your own extensions </howto/custom-template-tags>` to the template language as needed)."
msgstr ""

#: ../../topics/templates.txt:37
# b13fceaa06fe4c9c871119419c472d42
msgid "Templates"
msgstr ""

#: ../../topics/templates.txt:41
# 0f93c2eb192047de8d42fb04535c4c40
msgid "A template is simply a text file. It can generate any text-based format (HTML, XML, CSV, etc.)."
msgstr ""

#: ../../topics/templates.txt:44
# 658b8bbe536c42b29e47bb846d3324a3
msgid "A template contains **variables**, which get replaced with values when the template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

#: ../../topics/templates.txt:47
# 67468f1490de4ae4b0890f282e74a041
msgid "Below is a minimal template that illustrates a few basics. Each element will be explained later in this document.::"
msgstr ""

#: ../../topics/templates.txt:69
# 9f4d5c1bc78f4663abb839789cadae0b
msgid "Why use a text-based template instead of an XML-based one (like Zope's TAL)? We wanted Django's template language to be usable for more than just XML/HTML templates. At World Online, we use it for emails, JavaScript and CSV. You can use the template language for any text-based format."
msgstr ""

#: ../../topics/templates.txt:75
# e49f3d9026584c848e7446cf5a6bccb5
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

#: ../../topics/templates.txt:78
# b48601b2412b45708b11bbd4e0a68552
msgid "Variables"
msgstr ""

#: ../../topics/templates.txt:80
# 8b95b53a5c75464ebf6c9544494d759b
msgid "Variables look like this: ``{{ variable }}``. When the template engine encounters a variable, it evaluates that variable and replaces it with the result. Variable names consist of any combination of alphanumeric characters and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable sections, although that has a special meaning, as indicated below. Importantly, *you cannot have spaces or punctuation characters in variable names.*"
msgstr ""

#: ../../topics/templates.txt:88
# 95c1fd741ff648679931bf0e4982ba8b
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

#: ../../topics/templates.txt:92
# 96ec344b57c449418d8d44bc84e004c9
msgid "Technically, when the template system encounters a dot, it tries the following lookups, in this order:"
msgstr ""

#: ../../topics/templates.txt:95
# 1aa414d76ad04d0e9c088f1f12c809fc
msgid "Dictionary lookup"
msgstr ""

#: ../../topics/templates.txt:96
# 0727cc17add4413e80d171102bb1dea0
msgid "Attribute lookup"
msgstr ""

#: ../../topics/templates.txt:97
# f668239231534e8e83d630c299c5afe5
msgid "Method call"
msgstr ""

#: ../../topics/templates.txt:98
# bd68a930266c477194bf326816a5008b
msgid "List-index lookup"
msgstr ""

#: ../../topics/templates.txt:100
# a6ad70a1077d462b93dcb373515476e9
msgid "In the above example, ``{{ section.title }}`` will be replaced with the ``title`` attribute of the ``section`` object."
msgstr ""

#: ../../topics/templates.txt:103
# 6bc7017c93ba4e83be71ba3896120be6
msgid "If you use a variable that doesn't exist, the template system will insert the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to ``''`` (the empty string) by default."
msgstr ""

#: ../../topics/templates.txt:110
# 6b2f220fabc44f4bbf5409cc739a930c
msgid "You can modify variables for display by using **filters**."
msgstr ""

#: ../../topics/templates.txt:112
# ffa9872191fc488ab120cea730222deb
msgid "Filters look like this: ``{{ name|lower }}``. This displays the value of the ``{{ name }}`` variable after being filtered through the :tfilter:`lower` filter, which converts text to lowercase. Use a pipe (``|``) to apply a filter."
msgstr ""

#: ../../topics/templates.txt:116
# ed0052b6268046398db6fe0f0f4ffb77
msgid "Filters can be \"chained.\" The output of one filter is applied to the next. ``{{ text|escape|linebreaks }}`` is a common idiom for escaping text contents, then converting line breaks to ``<p>`` tags."
msgstr ""

#: ../../topics/templates.txt:120
# 698a55ae87eb488f82d1f289e21cbb84
msgid "Some filters take arguments. A filter argument looks like this: ``{{ bio|truncatewords:30 }}``. This will display the first 30 words of the ``bio`` variable."
msgstr ""

#: ../../topics/templates.txt:124
# ab3883023e084cb594d90c5270c67206
msgid "Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

#: ../../topics/templates.txt:127
# a446631d191a421b9bbbff85e5533b2a
msgid "Django provides about thirty built-in template filters. You can read all about them in the :ref:`built-in filter reference <ref-templates-builtins-filters>`. To give you a taste of what's available, here are some of the more commonly used template filters:"
msgstr ""

#: ../../topics/templates.txt:133
# f5a0ffa8c6704027a7788219a150a6cc
msgid "If a variable is false or empty, use given default. Otherwise, use the value of the variable"
msgstr ""

#: ../../topics/templates.txt:140
# cd167034e4ca443aa68b7beb37ffccb8
msgid "If ``value`` isn't provided or is empty, the above will display \"``nothing``\"."
msgstr ""

#: ../../topics/templates.txt:144
# be9a0678554e43488149d150b83ffe7b
msgid "Returns the length of the value. This works for both strings and lists; for example::"
msgstr ""

#: ../../topics/templates.txt:149
# 07c6497485d2464fb74bbcec413af1b2
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../topics/templates.txt:152
# f0ff62b9f1ea41809288007c07278063
msgid "Strips all [X]HTML tags. For example::"
msgstr ""

#: ../../topics/templates.txt:156
# 91dc14a1d4634d0eb29ba63a89641d6d
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../topics/templates.txt:159
# 30e459501fd14448b8b2517636f882b8
msgid "Again, these are just a few examples; see the :ref:`built-in filter reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

#: ../../topics/templates.txt:162
# b0828e7fd2224db1a5a5938339bbbf35
msgid "You can also create your own custom template filters; see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../topics/templates.txt:167
#: ../../topics/templates.txt:229
# 26eba2820a974d19884c90e751db823e
# 4be6ad063aef4dacaead18033886353f
msgid "Django's admin interface can include a complete reference of all template tags and filters available for a given site. See :doc:`/ref/contrib/admin/admindocs`."
msgstr ""

#: ../../topics/templates.txt:172
# 08aada0f88954db8b62b771f0ab42bea
msgid "Tags"
msgstr ""

#: ../../topics/templates.txt:174
# 122f1f9155784b13ae16b1e9a30150b7
msgid "Tags look like this: ``{% tag %}``. Tags are more complex than variables: Some create text in the output, some control flow by performing loops or logic, and some load external information into the template to be used by later variables."
msgstr ""

#: ../../topics/templates.txt:178
# c2671610dfa748ac81357987ac9019c3
msgid "Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag contents ... {% endtag %}``)."
msgstr ""

#: ../../topics/templates.txt:181
# 7081a4d388684f9c8bc07ae4855ec3bd
msgid "Django ships with about two dozen built-in template tags. You can read all about them in the :ref:`built-in tag reference <ref-templates-builtins-tags>`. To give you a taste of what's available, here are some of the more commonly used tags:"
msgstr ""

#: ../../topics/templates.txt:187
# baacf156896a402b8e36e102365f0346
msgid "Loop over each item in an array.  For example, to display a list of athletes provided in ``athlete_list``::"
msgstr ""

#: ../../topics/templates.txt:197
# ffc16f36812d44f4bffbf6e4d2f29408
msgid "Evaluates a variable, and if that variable is \"true\" the contents of the block are displayed::"
msgstr ""

#: ../../topics/templates.txt:206
# a205c936b3884d7696f64cd6a7932c76
msgid "In the above, if ``athlete_list`` is not empty, the number of athletes will be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../topics/templates.txt:209
# 024e7609549741c0b68f50cfc6f73a6b
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

#: ../../topics/templates.txt:218
# d60895c173274ea5b7f48f5ce9f8ed05
msgid "Set up `template inheritance`_ (see below), a powerful way of cutting down on \"boilerplate\" in templates."
msgstr ""

#: ../../topics/templates.txt:221
# 12915796528941bd8b300d4b87ce78e0
msgid "Again, the above is only a selection of the whole list; see the :ref:`built-in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

#: ../../topics/templates.txt:224
# a69c94ef37be40deb76cf36e67727125
msgid "You can also create your own custom template tags; see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../topics/templates.txt:234
# a063c9ead6834992bcf9546e973d214e
msgid "Comments"
msgstr ""

#: ../../topics/templates.txt:236
# b718638875d845ec9853eab4321b302f
msgid "To comment-out part of a line in a template, use the comment syntax: ``{# #}``."
msgstr ""

#: ../../topics/templates.txt:238
# 97ce4eac1b0449c3904b3953c86b5ddc
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

#: ../../topics/templates.txt:242
# d860fa0f9f1a4bcdbf1c4d6762264d59
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

#: ../../topics/templates.txt:246
# 0b22c0fed1a747f1a8535d136b677c35
msgid "This syntax can only be used for single-line comments (no newlines are permitted between the ``{#`` and ``#}`` delimiters). If you need to comment out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

#: ../../topics/templates.txt:253
# ce88dd5f3543415e836fae4288a57e6a
msgid "Template inheritance"
msgstr ""

#: ../../topics/templates.txt:255
# 9e6e72938bfa4916a547317a6d81cb63
msgid "The most powerful -- and thus the most complex -- part of Django's template engine is template inheritance. Template inheritance allows you to build a base \"skeleton\" template that contains all the common elements of your site and defines **blocks** that child templates can override."
msgstr ""

#: ../../topics/templates.txt:260
# bdc8edc826384af7a3c90f915591a519
msgid "It's easiest to understand template inheritance by starting with an example::"
msgstr ""

#: ../../topics/templates.txt:285
# 1311e38821da4275b675370f3146552b
msgid "This template, which we'll call ``base.html``, defines a simple HTML skeleton document that you might use for a simple two-column page. It's the job of \"child\" templates to fill the empty blocks with content."
msgstr ""

#: ../../topics/templates.txt:289
# 25c0d8cd7a8048f397b782b4abd3ee77
msgid "In this example, the :ttag:`block` tag defines three blocks that child templates can fill in. All the :ttag:`block` tag does is to tell the template engine that a child template may override those portions of the template."
msgstr ""

#: ../../topics/templates.txt:293
# c038232302ea4f2daa73cdb4c1f152fd
msgid "A child template might look like this::"
msgstr ""

#: ../../topics/templates.txt:306
# 2bf5f7ea41f64d079d10521d63b5cb69
msgid "The :ttag:`extends` tag is the key here. It tells the template engine that this template \"extends\" another template. When the template system evaluates this template, first it locates the parent -- in this case, \"base.html\"."
msgstr ""

#: ../../topics/templates.txt:310
# 5801fb06f2ef45f5959cf85b327f5ebd
msgid "At that point, the template engine will notice the three :ttag:`block` tags in ``base.html`` and replace those blocks with the contents of the child template. Depending on the value of ``blog_entries``, the output might look like::"
msgstr ""

#: ../../topics/templates.txt:340
# dc0164f380c145c3b704f59b25a6fb2d
msgid "Note that since the child template didn't define the ``sidebar`` block, the value from the parent template is used instead. Content within a ``{% block %}`` tag in a parent template is always used as a fallback."
msgstr ""

#: ../../topics/templates.txt:344
# 918e99575d1a4b98b7bd5609985b4594
msgid "You can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach:"
msgstr ""

#: ../../topics/templates.txt:347
# 36636f4c02144b58a834d739fc591a16
msgid "Create a ``base.html`` template that holds the main look-and-feel of your site."
msgstr ""

#: ../../topics/templates.txt:349
# f26e35ed40464a50aa9c556d7e3d03a6
msgid "Create a ``base_SECTIONNAME.html`` template for each \"section\" of your site. For example, ``base_news.html``, ``base_sports.html``. These templates all extend ``base.html`` and include section-specific styles/design."
msgstr ""

#: ../../topics/templates.txt:353
# 4e4cce4f1e1a490f85ccab04abd76921
msgid "Create individual templates for each type of page, such as a news article or blog entry. These templates extend the appropriate section template."
msgstr ""

#: ../../topics/templates.txt:357
# 91e005cf9e5c4b8bb691858bfda01bfd
msgid "This approach maximizes code reuse and makes it easy to add items to shared content areas, such as section-wide navigation."
msgstr ""

#: ../../topics/templates.txt:360
# ca62359025574eefb3f4757c5ca67ec4
msgid "Here are some tips for working with inheritance:"
msgstr ""

#: ../../topics/templates.txt:362
# cbed8b7fea3f4ff9a2b90e1fd0dd6e32
msgid "If you use :ttag:`{% extends %}<extends>` in a template, it must be the first template tag in that template. Template inheritance won't work, otherwise."
msgstr ""

#: ../../topics/templates.txt:365
# 293d1b7ea69f4b2291975d1ba61ddc01
msgid "More :ttag:`{% block %}<block>` tags in your base templates are better. Remember, child templates don't have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It's better to have more hooks than fewer hooks."
msgstr ""

#: ../../topics/templates.txt:370
# 898f66d2f3cb4827b84f569073342bb6
msgid "If you find yourself duplicating content in a number of templates, it probably means you should move that content to a ``{% block %}`` in a parent template."
msgstr ""

#: ../../topics/templates.txt:374
# 258f298aa16a43f2be4f72db809d786b
msgid "If you need to get the content of the block from the parent template, the ``{{ block.super }}`` variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using ``{{ block.super }}`` will not be automatically escaped (see the `next section`_), since it was already escaped, if necessary, in the parent template."
msgstr ""

#: ../../topics/templates.txt:381
# 28990fdb129d46bf9fe1694941fd9563
msgid "For extra readability, you can optionally give a *name* to your ``{% endblock %}`` tag. For example::"
msgstr ""

#: ../../topics/templates.txt:388
# 479c57da6c54462d8d6ace591902e628
msgid "In larger templates, this technique helps you see which ``{% block %}`` tags are being closed."
msgstr ""

#: ../../topics/templates.txt:391
# 9b4019ebb1dd479b97ee2b8a069a19b0
msgid "Finally, note that you can't define multiple :ttag:`block` tags with the same name in the same template. This limitation exists because a block tag works in \"both\" directions. That is, a block tag doesn't just provide a hole to fill -- it also defines the content that fills the hole in the *parent*. If there were two similarly-named :ttag:`block` tags in a template, that template's parent wouldn't know which one of the blocks' content to use."
msgstr ""

#: ../../topics/templates.txt:402
# ce1475fd891c43d79b658df5400af0d8
msgid "Automatic HTML escaping"
msgstr ""

#: ../../topics/templates.txt:404
# a937f25804244176bf8181607da34d15
msgid "When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. For example, consider this template fragment::"
msgstr ""

#: ../../topics/templates.txt:410
# 279d26fc158c4160a2f68ef604a6eb83
msgid "At first, this seems like a harmless way to display a user's name, but consider what would happen if the user entered his name as this::"
msgstr ""

#: ../../topics/templates.txt:415
# e2c1c43dd95e4a409fb2433d0a58eb92
msgid "With this name value, the template would be rendered as::"
msgstr ""

#: ../../topics/templates.txt:419
# d282e3e5b052447f96a041bc37542549
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

#: ../../topics/templates.txt:421
# c9ecdcd8bdac4282b8a4d20aa7215284
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

#: ../../topics/templates.txt:427
# 347e58bf6fc7470991ea22da0be8ece0
msgid "That would result in a rendered template like this::"
msgstr ""

#: ../../topics/templates.txt:431
# c53a7da982494d69a19d5e87fe408d0e
msgid "...which, in turn, would result in the remainder of the Web page being bolded!"
msgstr ""

#: ../../topics/templates.txt:433
# ec6dbadb9fc14f7696ce784b8a500700
msgid "Clearly, user-submitted data shouldn't be trusted blindly and inserted directly into your Web pages, because a malicious user could use this kind of hole to do potentially bad things. This type of security exploit is called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

#: ../../topics/templates.txt:438
# 1374d4fd82494fdaa608af33fcd65d3c
msgid "To avoid this problem, you have two options:"
msgstr ""

#: ../../topics/templates.txt:440
# 0d059e77287f40eeb1b4bc372db63467
msgid "One, you can make sure to run each untrusted variable through the :tfilter:`escape` filter (documented below), which converts potentially harmful HTML characters to unharmful ones. This was the default solution in Django for its first few years, but the problem is that it puts the onus on *you*, the developer / template author, to ensure you're escaping everything. It's easy to forget to escape data."
msgstr ""

#: ../../topics/templates.txt:447
# e074941f18e940728d45bbc8a7767f1f
msgid "Two, you can take advantage of Django's automatic HTML escaping. The remainder of this section describes how auto-escaping works."
msgstr ""

#: ../../topics/templates.txt:450
# 44f6a13e1dcf4f8ba06f4e7a1c9677a2
msgid "By default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:"
msgstr ""

#: ../../topics/templates.txt:454
# 08901e63a7bd4835a4bcb9110e743251
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../topics/templates.txt:455
# 4230816f947f496bb2139e939a58f4ab
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../topics/templates.txt:456
# d8e7fc96426c4012934103b054cd5785
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../topics/templates.txt:457
# 4c7377b27ee043889f6994bba432bcdc
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../topics/templates.txt:458
# 26576a02beab42f98915ab69ad8c0124
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../topics/templates.txt:460
# 3db56242035d40e88d024dee4037f2fe
msgid "Again, we stress that this behavior is on by default. If you're using Django's template system, you're protected."
msgstr ""

#: ../../topics/templates.txt:466
# 4129a52d380a4441b93a0d698b76758f
msgid "How to turn it off"
msgstr ""

#: ../../topics/templates.txt:468
# 3bab3993762748e0ae4ca900f89d3881
msgid "If you don't want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways."
msgstr ""

#: ../../topics/templates.txt:471
# daa68bf506914e19b869c472c0937f81
msgid "Why would you want to turn it off? Because sometimes, template variables contain data that you *intend* to be rendered as raw HTML, in which case you don't want their contents to be escaped. For example, you might store a blob of HTML in your database and want to embed that directly into your template. Or, you might be using Django's template system to produce text that is *not* HTML -- like an email message, for instance."
msgstr ""

#: ../../topics/templates.txt:479
# 21449122c9fb4418a07d21b171a33c1d
msgid "For individual variables"
msgstr ""

#: ../../topics/templates.txt:481
# 834763c7941d41de98dc6ee00c61de6d
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter::"
msgstr ""

#: ../../topics/templates.txt:487
# a307e38f09b94ef6bc186216151849f6
msgid "Think of *safe* as shorthand for *safe from further escaping* or *can be safely interpreted as HTML*. In this example, if ``data`` contains ``'<b>'``, the output will be::"
msgstr ""

#: ../../topics/templates.txt:495
# 3b017978ac3b43c18a3b1e573bd51dc2
msgid "For template blocks"
msgstr ""

#: ../../topics/templates.txt:497
# f073a91f40e847069af27babb65b667b
msgid "To control auto-escaping for a template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

#: ../../topics/templates.txt:504
# eaeab01df01d4e84b5dbe8fa3989f2f9
msgid "The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template::"
msgstr ""

#: ../../topics/templates.txt:519
# f448d5f170694bd28435bbfe771cf5bd
msgid "The auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the :ttag:`include` tag, just like all block tags. For example::"
msgstr ""

#: ../../topics/templates.txt:538
# 08f291faadb94f268ba6226034375ad7
msgid "Because auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

#: ../../topics/templates.txt:546
# a44e9f5ecfae4ddcb8eed723886eec0b
msgid "Notes"
msgstr ""

#: ../../topics/templates.txt:548
# b6f9ee152c6f4a9a9a441447e574807d
msgid "Generally, template authors don't need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn't be escaped, and mark data appropriately, so things Just Work in the template."
msgstr ""

#: ../../topics/templates.txt:553
# 203e6a897f2748a7a532bdcf3a1b9f9e
msgid "If you're creating a template that might be used in situations where you're not sure whether auto-escaping is enabled, then add an :tfilter:`escape` filter to any variable that needs escaping. When auto-escaping is on, there's no danger of the :tfilter:`escape` filter *double-escaping* data -- the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

#: ../../topics/templates.txt:562
# f128a66cc31541c5a5afc94130711970
msgid "String literals and automatic escaping"
msgstr ""

#: ../../topics/templates.txt:564
# e572c1ad39744264addc1be9e4546468
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

#: ../../topics/templates.txt:568
# 062570c6c7874014a67dd6421401fcf4
msgid "All string literals are inserted **without** any automatic escaping into the template -- they act as if they were all passed through the :tfilter:`safe` filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written."
msgstr ""

#: ../../topics/templates.txt:574
# 2d1e58b4021446e4860707b214d7385f
msgid "This means you would write ::"
msgstr ""

#: ../../topics/templates.txt:578
# c146aa5c413b4c36850b3381b9874884
msgid "...rather than ::"
msgstr ""

#: ../../topics/templates.txt:582
# 516413ac45a24b7aaa2e5801e1598a96
msgid "This doesn't affect what happens to data coming from the variable itself. The variable's contents are still automatically escaped, if necessary, because they're beyond the control of the template author."
msgstr ""

#: ../../topics/templates.txt:589
# 5488b060121c45a090afabc64aabb01d
msgid "Accessing method calls"
msgstr ""

#: ../../topics/templates.txt:591
# c40dcab864454fb393016338776dde99
msgid "Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-related>` syntax for finding a collection of objects related on a foreign key. Therefore, given a model called \"comment\" with a foreign key relationship to a model called \"task\" you can loop through all comments attached to a given task like this::"
msgstr ""

#: ../../topics/templates.txt:603
# aa7afe4a56b54309a9fa90b938c6fadd
msgid "Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` method to count the number of objects they contain. Therefore, you can obtain a count of all comments related to the current task with::"
msgstr ""

#: ../../topics/templates.txt:609
# 97216a105d4b4bc884dc169d6b440801
msgid "And of course you can easily access methods you've explicitly defined on your own models::"
msgstr ""

#: ../../topics/templates.txt:620
# d5334262060c4e5e97b27c576be9393f
msgid "Because Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display."
msgstr ""

#: ../../topics/templates.txt:628
# 8f792b57a5884faeae3b9d8bf060eec5
msgid "Custom tag and filter libraries"
msgstr ""

#: ../../topics/templates.txt:630
# ca5765a2d9064205b7f35402688b5f1f
msgid "Certain applications provide custom tag and filter libraries. To access them in a template, use the :ttag:`load` tag::"
msgstr ""

#: ../../topics/templates.txt:637
# ba7f8adc107b4a2a8e93053a15c46af9
msgid "In the above, the :ttag:`load` tag loads the ``comments`` tag library, which then makes the ``comment_form`` tag available for use. Consult the documentation area in your admin to find the list of custom libraries in your installation."
msgstr ""

#: ../../topics/templates.txt:641
# 5ac83498d5654795bd0e1eecf35118b5
msgid "The :ttag:`load` tag can take multiple library names, separated by spaces. Example::"
msgstr ""

#: ../../topics/templates.txt:646
# 1c00740f616041fc83d4a58e86b8ab1e
msgid "See :doc:`/howto/custom-template-tags` for information on writing your own custom template libraries."
msgstr ""

#: ../../topics/templates.txt:650
# 109cc3114fe74d35bbb6161055539ba9
msgid "Custom libraries and template inheritance"
msgstr ""

#: ../../topics/templates.txt:652
# ac687822e32b4bb8aeebef1b827a2469
msgid "When you load a custom tag or filter library, the tags/filters are only made available to the current template -- not any parent or child templates along the template-inheritance path."
msgstr ""

#: ../../topics/templates.txt:656
# 8b7a43223e93472c99879a75ce2e81a5
msgid "For example, if a template ``foo.html`` has ``{% load comments %}``, a child template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have access to the comments template tags and filters. The child template is responsible for its own ``{% load comments %}``."
msgstr ""

#: ../../topics/templates.txt:661
# b502efbdb6624727aff097feeb65840c
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

#: ../../topics/testing.txt:3
# 11c95bfa25804a78933bf0b46dcb5fc8
msgid "Testing Django applications"
msgstr ""

#: ../../topics/testing.txt:8
# b41e2b6a132e4c5b8bc6db8aa9cdfbbf
msgid "Automated testing is an extremely useful bug-killing tool for the modern Web developer. You can use a collection of tests -- a **test suite** -- to solve, or avoid, a number of problems:"
msgstr ""

#: ../../topics/testing.txt:12
# c9308fec7c1444a7869e3a034fe8368a
msgid "When you're writing new code, you can use tests to validate your code works as expected."
msgstr ""

#: ../../topics/testing.txt:15
# cbb50dc8aa614b5aab680a5735f0f2ca
msgid "When you're refactoring or modifying old code, you can use tests to ensure your changes haven't affected your application's behavior unexpectedly."
msgstr ""

#: ../../topics/testing.txt:19
# fd20121ead064b768f6129a815f0e9e8
msgid "Testing a Web application is a complex task, because a Web application is made of several layers of logic -- from HTTP-level request handling, to form validation and processing, to template rendering. With Django's test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application's output and generally verify your code is doing what it should be doing."
msgstr ""

#: ../../topics/testing.txt:26
# f401affbdcdb4bee9e6a34522ea99052
msgid "The best part is, it's really easy."
msgstr ""

#: ../../topics/testing.txt:28
# 0753d8fe5c864d9db5091184516098e2
msgid "This document is split into two primary sections. First, we explain how to write tests with Django. Then, we explain how to run them."
msgstr ""

#: ../../topics/testing.txt:32
# d3791f97747043eb9e0a2c5e58e3203f
msgid "Writing tests"
msgstr ""

#: ../../topics/testing.txt:34
# d2010f7b3a9f435e819679410d1e443c
msgid "There are two primary ways to write tests with Django, corresponding to the two test frameworks that ship in the Python standard library. The two frameworks are:"
msgstr ""

#: ../../topics/testing.txt:38
# 4a0653436bd84f1f9c55fe3ecb2e0de6
msgid "**Unit tests** -- tests that are expressed as methods on a Python class that subclasses :class:`unittest.TestCase` or Django's customized :class:`TestCase`. For example::"
msgstr ""

#: ../../topics/testing.txt:50
# e568d54acaaa4d3e8bec7d5ece491faa
msgid "**Doctests** -- tests that are embedded in your functions' docstrings and are written in a way that emulates a session of the Python interactive interpreter. For example::"
msgstr ""

#: ../../topics/testing.txt:64
# b0142cf7ad9345a1ab0345c4ec320dfe
msgid "We'll discuss choosing the appropriate test framework later, however, most experienced developers prefer unit tests. You can also use any *other* Python test framework, as we'll explain in a bit."
msgstr ""

#: ../../topics/testing.txt:69
# 66c09dd633de413ab7b913f0261a1e5e
msgid "Writing unit tests"
msgstr ""

#: ../../topics/testing.txt:71
# 1669fd7823b64a4e946b6b47029e599c
msgid "Django's unit tests use a Python standard library module: :mod:`unittest`. This module defines tests in class-based approach."
msgstr ""

#: ../../topics/testing.txt:78
# 530e172fa7024bfb844311787d7f7dc9
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.5 compatibility."
msgstr ""

#: ../../topics/testing.txt:84
# e41e2cae87764d528729d716f04d9b81
msgid "To access this library, Django provides the :mod:`django.utils.unittest` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../topics/testing.txt:90
# b138d139870e46e186b9e499cd06dd74
msgid "To use this alias, simply use::"
msgstr ""

#: ../../topics/testing.txt:94
# 0e97fed29a344c1583e7f3ef8de304d4
msgid "wherever you would have historically used::"
msgstr ""

#: ../../topics/testing.txt:98
# 1faac9f4aa034455be24cb94d984d7f7
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../topics/testing.txt:103
# a5dd7ca2d43d435084939ee48f0da257
msgid "For a given Django application, the test runner looks for unit tests in two places:"
msgstr ""

#: ../../topics/testing.txt:106
# 1e7c2fda780645d0aa4013409be6bbe4
msgid "The ``models.py`` file. The test runner looks for any subclass of :class:`unittest.TestCase` in this module."
msgstr ""

#: ../../topics/testing.txt:109
# f53d437b8aad40778ef2a512a8479ac1
msgid "A file called ``tests.py`` in the application directory -- i.e., the directory that holds ``models.py``. Again, the test runner looks for any subclass of :class:`unittest.TestCase` in this module."
msgstr ""

#: ../../topics/testing.txt:113
# 94216dd5e78541b19d80962be344f7ed
msgid "Here is an example :class:`unittest.TestCase` subclass::"
msgstr ""

#: ../../topics/testing.txt:128
# 3f66dd853cdf4bdcb078d562ca8e6ba7
msgid "When you :ref:`run your tests <running-tests>`, the default behavior of the test utility is to find all the test cases (that is, subclasses of :class:`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build a test suite out of those test cases, and run that suite."
msgstr ""

#: ../../topics/testing.txt:133
# ad9ac9c65b994041b09e8a3b55b390d2
msgid "There is a second way to define the test suite for a module: if you define a function called ``suite()`` in either ``models.py`` or ``tests.py``, the Django test runner will use that function to construct the test suite for that module. This follows the `suggested organization`_ for unit tests. See the Python documentation for more details on how to construct a complex test suite."
msgstr ""

#: ../../topics/testing.txt:140
# 125e40fd8b7f48e2995d302e5d409194
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

#: ../../topics/testing.txt:145
# eccdef17ec7f46f4888177b0d967eb34
msgid "Writing doctests"
msgstr ""

#: ../../topics/testing.txt:147
# e7cf8f2b24bb468a81137da5261820a6
msgid "Doctests use Python's standard :mod:`doctest` module, which searches your docstrings for statements that resemble a session of the Python interactive interpreter. A full explanation of how :mod:`doctest` works is out of the scope of this document; read Python's official documentation for the details."
msgstr ""

#: ../../topics/testing.txt:154
# 4487d6af958147d7b5fe6c28f7b93405
msgid "A good explanation of docstrings (and some guidelines for using them effectively) can be found in :pep:`257`:"
msgstr ""

#: ../../topics/testing.txt:157
# 368fd75be01f41ee81b6020fd68d9ffd
msgid "A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition.  Such a docstring becomes the ``__doc__`` special attribute of that object."
msgstr ""

#: ../../topics/testing.txt:161
# 93df504ae7e7404c98645e919d1de3d9
msgid "For example, this function has a docstring that describes what it does::"
msgstr ""

#: ../../topics/testing.txt:167
# 068e4b1db9aa4e1d86db3b0e1124e62c
msgid "Because tests often make great documentation, putting tests directly in your docstrings is an effective way to document *and* test your code."
msgstr ""

#: ../../topics/testing.txt:170
# 2052cf0233a14aa4ae900b404651f8c4
msgid "As with unit tests, for a given Django application, the test runner looks for doctests in two places:"
msgstr ""

#: ../../topics/testing.txt:173
# 681067a83c444f73b82643d2333438f4
msgid "The ``models.py`` file. You can define module-level doctests and/or a doctest for individual models. It's common practice to put application-level doctests in the module docstring and model-level doctests in the model docstrings."
msgstr ""

#: ../../topics/testing.txt:178
# f16c61706e014d19b503321f36685532
msgid "A file called ``tests.py`` in the application directory -- i.e., the directory that holds ``models.py``. This file is a hook for any and all doctests you want to write that aren't necessarily related to models."
msgstr ""

#: ../../topics/testing.txt:182
# fce28e33f92d4ac39c9ab5f20a6e9fc8
msgid "This example doctest is equivalent to the example given in the unittest section above::"
msgstr ""

#: ../../topics/testing.txt:209
# 10f3fe086c4b4fe18d57c4a13cacd48e
msgid "When you :ref:`run your tests <running-tests>`, the test runner will find this docstring, notice that portions of it look like an interactive Python session, and execute those lines while checking that the results match."
msgstr ""

#: ../../topics/testing.txt:213
# 0efa0ca4f8ad41f49c1531d938c65365
msgid "In the case of model tests, note that the test runner takes care of creating its own test database. That is, any test that accesses a database -- by creating and saving model instances, for example -- will not affect your production database. However, the database is not refreshed between doctests, so if your doctest requires a certain state you should consider flushing the database or loading a fixture. (See the section on fixtures, below, for more on this.) Note that to use this feature, the database user Django is connecting as must have ``CREATE DATABASE`` rights."
msgstr ""

#: ../../topics/testing.txt:222
# f0ba880017144545ae484a0080d8dfb9
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""

#: ../../topics/testing.txt:225
# 7a783472e29549d3956fe2c74626fc9d
msgid "Which should I use?"
msgstr ""

#: ../../topics/testing.txt:227
# 6e478994218a43149298b54e447ea105
msgid "Because Django supports both of the standard Python test frameworks, it's up to you and your tastes to decide which one to use. You can even decide to use *both*."
msgstr ""

#: ../../topics/testing.txt:231
# b95ea7e495a244a094d7248200aab855
msgid "For developers new to testing, however, this choice can seem confusing. Here, then, are a few key differences to help you decide which approach is right for you:"
msgstr ""

#: ../../topics/testing.txt:235
# 832d46bab0dc4a6d9b4ad423d660c055
msgid "If you've been using Python for a while, :mod:`doctest` will probably feel more \"pythonic\". It's designed to make writing tests as easy as possible, so it requires no overhead of writing classes or methods. You simply put tests in docstrings. This has the added advantage of serving as documentation (and correct documentation, at that!). However, while doctests are good for some simple example code, they are not very good if you want to produce either high quality, comprehensive tests or high quality documentation. Test failures are often difficult to debug as it can be unclear exactly why the test failed. Thus, doctests should generally be avoided and used primarily for documentation examples only."
msgstr ""

#: ../../topics/testing.txt:246
# 894994dec83143e49cfd13e849026225
msgid "The :mod:`unittest` framework will probably feel very familiar to developers coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll feel at home with this method if you've used JUnit or any test framework inspired by JUnit."
msgstr ""

#: ../../topics/testing.txt:251
# 650161e15bb84d3f898dbb9573531360
msgid "If you need to write a bunch of tests that share similar code, then you'll appreciate the :mod:`unittest` framework's organization around classes and methods. This makes it easy to abstract common tasks into common methods. The framework also supports explicit setup and/or cleanup routines, which give you a high level of control over the environment in which your test cases are run."
msgstr ""

#: ../../topics/testing.txt:258
# 5e6422d2f3b64f02901c97efaf4bf192
msgid "If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""

#: ../../topics/testing.txt:263
# 09302b9434354937afadda1d8fc7e834
msgid "Running tests"
msgstr ""

#: ../../topics/testing.txt:265
# 94c13fa2221e41b996e77a09a1aa781f
msgid "Once you've written tests, run them using the :djadmin:`test` command of your project's ``manage.py`` utility::"
msgstr ""

#: ../../topics/testing.txt:270
# 267eb9bcf1844ce9b6946e1bdfdba0c0
msgid "By default, this will run every test in every application in :setting:`INSTALLED_APPS`. If you only want to run tests for a particular application, add the application name to the command line. For example, if your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and ``'myproject.animals'``, you can run the ``myproject.animals`` unit tests alone with this command::"
msgstr ""

#: ../../topics/testing.txt:279
# 6be6b06eda834a73abe8c4d3a92991aa
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""

#: ../../topics/testing.txt:281
# 7c802569ec974f30996f28c3a1a1c637
msgid "You can be even *more* specific by naming an individual test case. To run a single test case in an application (for example, the ``AnimalTestCase`` described in the \"Writing unit tests\" section), add the name of the test case to the label on the command line::"
msgstr ""

#: ../../topics/testing.txt:288
# 7b6fbfac6274466f9221d727aec7f9ea
msgid "And it gets even more granular than that! To run a *single* test method inside a test case, add the name of the test method to the label::"
msgstr ""

#: ../../topics/testing.txt:297
# 1260990a3b7a4902bd93781cc91bf221
msgid "You can use the same rules if you're using doctests. Django will use the test label as a path to the test method or class that you want to run. If your ``models.py`` or ``tests.py`` has a function with a doctest, or class with a class-level doctest, you can invoke that test by appending the name of the test method or class to the label::"
msgstr ""

#: ../../topics/testing.txt:305
# 11cc5ea07d324a5b8617366465fccd86
msgid "If you want to run the doctest for a specific method in a class, add the name of the method to the label::"
msgstr ""

#: ../../topics/testing.txt:310
# e7f734b99a0342d092432284cc5670f7
msgid "If you're using a ``__test__`` dictionary to specify doctests for a module, Django will use the label as a key in the ``__test__`` dictionary for defined in ``models.py`` and ``tests.py``."
msgstr ""

#: ../../topics/testing.txt:317
# d31ff9a905d3482eae2620b597a975d8
msgid "If you press ``Ctrl-C`` while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing ``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--failfast` option, notice that some tests are unexpectedly failing, and want to get details on the failures without waiting for the full test run to complete."
msgstr ""

#: ../../topics/testing.txt:326
# e512d301d1664efdbf798e995c0057db
msgid "If you do not want to wait for the currently running test to finish, you can press ``Ctrl-C`` a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed."
msgstr ""

#: ../../topics/testing.txt:333
# 724c9d82349b48e594c90817e91f1776
msgid "It's a good idea to run your tests with Python warnings enabled: ``python -Wall manage.py test``. The ``-Wall`` flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren't strictly wrong but could benefit from a better implementation."
msgstr ""

#: ../../topics/testing.txt:341
# 1720e9c66af147b9af8d74bd9085e3b8
msgid "Running tests outside the test runner"
msgstr ""

#: ../../topics/testing.txt:343
# 7c895d76eeb448ee8e546b1c13250c5a
msgid "If you want to run tests outside of ``./manage.py test`` -- for example, from a shell prompt -- you will need to set up the test environment first. Django provides a convenience method to do this::"
msgstr ""

#: ../../topics/testing.txt:350
# 83698824505e450c945e28b6788c924d
msgid "This convenience method sets up the test database, and puts other Django features into modes that allow for repeatable testing."
msgstr ""

#: ../../topics/testing.txt:353
# c755f55892854329b9af334746c5358b
msgid "The call to :meth:`~django.test.utils.setup_test_environment` is made automatically as part of the setup of `./manage.py test`. You only need to manually invoke this method if you're not using running your tests via Django's test runner."
msgstr ""

#: ../../topics/testing.txt:359
# 3d7d629008c1471c8abe545037c27b13
msgid "The test database"
msgstr ""

#: ../../topics/testing.txt:361
# 42e546abc4b74471830d229352a5e5e7
msgid "Tests that require a database (namely, model tests) will not use your \"real\" (production) database. Separate, blank databases are created for the tests."
msgstr ""

#: ../../topics/testing.txt:364
# a9c0f4b4c4a44017a61a9cfb88b21f99
msgid "Regardless of whether the tests pass or fail, the test databases are destroyed when all the tests have been executed."
msgstr ""

#: ../../topics/testing.txt:367
# 936aa3e201f14d3ea6b940ad153417b1
msgid "By default the test databases get their names by prepending ``test_`` to the value of the :setting:`NAME` settings for the databases defined in :setting:`DATABASES`. When using the SQLite database engine the tests will by default use an in-memory database (i.e., the database will be created in memory, bypassing the filesystem entirely!). If you want to use a different database name, specify :setting:`TEST_NAME` in the dictionary for any given database in :setting:`DATABASES`."
msgstr ""

#: ../../topics/testing.txt:376
# ae5d1454341d45e08902951d5e995ee4
msgid "Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: :setting:`ENGINE`, :setting:`USER`, :setting:`HOST`, etc. The test database is created by the user specified by :setting:`USER`, so you'll need to make sure that the given user account has sufficient privileges to create a new database on the system."
msgstr ""

#: ../../topics/testing.txt:383
# 85056c1f510545faa9d4a0532b307030
msgid "For fine-grained control over the character encoding of your test database, use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also use the :setting:`TEST_COLLATION` option to control the particular collation used by the test database. See the :doc:`settings documentation </ref/settings>` for details of these advanced settings."
msgstr ""

#: ../../topics/testing.txt:393
# cc7d1e85b08e4ef2be26dd516b25596d
msgid "Testing master/slave configurations"
msgstr ""

#: ../../topics/testing.txt:397
# 68c025571c854ad79ae601b191ebcf54
msgid "If you're testing a multiple database configuration with master/slave replication, this strategy of creating test databases poses a problem. When the test databases are created, there won't be any replication, and as a result, data created on the master won't be seen on the slave."
msgstr ""

#: ../../topics/testing.txt:403
# 34577f80c2914d9ba7cc5d5712e3f42b
msgid "To compensate for this, Django allows you to define that a database is a *test mirror*. Consider the following (simplified) example database configuration::"
msgstr ""

#: ../../topics/testing.txt:423
# b819b788331a452d89b3aed6deb3ea1d
msgid "In this setup, we have two database servers: ``dbmaster``, described by the database alias ``default``, and ``dbslave`` described by the alias ``slave``. As you might expect, ``dbslave`` has been configured by the database administrator as a read slave of ``dbmaster``, so in normal activity, any write to ``default`` will appear on ``slave``."
msgstr ""

#: ../../topics/testing.txt:429
# 10982121ce8c4060a4ee1b73298b8826
msgid "If Django created two independent test databases, this would break any tests that expected replication to occur. However, the ``slave`` database has been configured as a test mirror (using the :setting:`TEST_MIRROR` setting), indicating that under testing, ``slave`` should be treated as a mirror of ``default``."
msgstr ""

#: ../../topics/testing.txt:435
# 4659bf67fc3f4a50917c2db900446395
msgid "When the test environment is configured, a test version of ``slave`` will *not* be created. Instead the connection to ``slave`` will be redirected to point at ``default``. As a result, writes to ``default`` will appear on ``slave`` -- but because they are actually the same database, not because there is data replication between the two databases."
msgstr ""

#: ../../topics/testing.txt:445
# ce83529a1dc14f0f8b3753b0daa1aaf4
msgid "Controlling creation order for test databases"
msgstr ""

#: ../../topics/testing.txt:449
# 329352008e72488388d01d1f35511191
msgid "By default, Django will always create the ``default`` database first. However, no guarantees are made on the creation order of any other databases in your test setup."
msgstr ""

#: ../../topics/testing.txt:453
# 0ace53b8df51475488f75388d967a6fe
msgid "If your database configuration requires a specific creation order, you can specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` setting. Consider the following (simplified) example database configuration::"
msgstr ""

#: ../../topics/testing.txt:480
# 44643460d0154c88ad85f3bea910c542
msgid "Under this configuration, the ``diamonds`` database will be created first, as it is the only database alias without dependencies. The ``default`` and ``clubs`` alias will be created next (although the order of creation of this pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

#: ../../topics/testing.txt:485
# 741d8e319ec341d9b05ee182e24351c7
msgid "If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

#: ../../topics/testing.txt:490
# 029455d4a4694d9abf805c687d561e5b
msgid "Other test conditions"
msgstr ""

#: ../../topics/testing.txt:492
# 4d5db97091ca4f1b846c43d77641403a
msgid "Regardless of the value of the :setting:`DEBUG` setting in your configuration file, all Django tests run with :setting:`DEBUG`\\=False. This is to ensure that the observed output of your code matches what will be seen in a production setting."
msgstr ""

#: ../../topics/testing.txt:498
# a69cefe8de4d454aadb943a1b388520b
msgid "Understanding the test output"
msgstr ""

#: ../../topics/testing.txt:500
# 97064689360e4225b5128a973e6d23a0
msgid "When you run your tests, you'll see a number of messages as the test runner prepares itself. You can control the level of detail of these messages with the ``verbosity`` option on the command line::"
msgstr ""

#: ../../topics/testing.txt:510
# fc4a20173bb04cd9877436430efba7c1
msgid "This tells you that the test runner is creating a test database, as described in the previous section."
msgstr ""

#: ../../topics/testing.txt:513
# 856f1e45589b4f35b2796f1f97298738
msgid "Once the test database has been created, Django will run your tests. If everything goes well, you'll see something like this::"
msgstr ""

#: ../../topics/testing.txt:521
# b6e38fefc7654a30be4a6e60bcf36103
msgid "If there are test failures, however, you'll see full details about which tests failed::"
msgstr ""

#: ../../topics/testing.txt:547
# 2eb597af4f7b42409bf0223b55b7550e
msgid "A full explanation of this error output is beyond the scope of this document, but it's pretty intuitive. You can consult the documentation of Python's :mod:`unittest` library for details."
msgstr ""

#: ../../topics/testing.txt:551
# 2493a67acd0f4db09e982cdc7dc4c14c
msgid "Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you're using the test-runner script in a shell script and need to test for success or failure at that level."
msgstr ""

#: ../../topics/testing.txt:557
# fbc2c6d631584737b6b47626fc94a731
msgid "Testing tools"
msgstr ""

#: ../../topics/testing.txt:559
# 77ec343431c641d2bc6ddee5af9ef986
msgid "Django provides a small set of tools that come in handy when writing tests."
msgstr ""

#: ../../topics/testing.txt:564
# 1c30414e3c23448993b6d4f68a628c2b
msgid "The test client"
msgstr ""

#: ../../topics/testing.txt:569
# ce23146838234c20af4b7376b340b16e
msgid "The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically."
msgstr ""

#: ../../topics/testing.txt:573
# 774c734148b74eaf9656310fb5e1ed49
msgid "Some of the things you can do with the test client are:"
msgstr ""

#: ../../topics/testing.txt:575
# 440776582e5b4f3fbea80b3ab49ebf8a
msgid "Simulate GET and POST requests on a URL and observe the response -- everything from low-level HTTP (result headers and status codes) to page content."
msgstr ""

#: ../../topics/testing.txt:579
# 16a7c5d2d3bf49ed8e40879ed20fa361
msgid "Test that the correct view is executed for a given URL."
msgstr ""

#: ../../topics/testing.txt:581
# 64c731d8c9034e61a50de0b4309a5bff
msgid "Test that a given request is rendered by a given Django template, with a template context that contains certain values."
msgstr ""

#: ../../topics/testing.txt:584
# 206fe0332112415cb1a64d0d9560b9b5
msgid "Note that the test client is not intended to be a replacement for Selenium_ or other \"in-browser\" frameworks. Django's test client has a different focus. In short:"
msgstr ""

#: ../../topics/testing.txt:588
# 392b1f5bb4f448d6863a1b8bdf926eca
msgid "Use Django's test client to establish that the correct view is being called and that the view is collecting the correct context data."
msgstr ""

#: ../../topics/testing.txt:591
# 27f222cfd4c64b67a8035f8658d95ea9
msgid "Use in-browser frameworks like Selenium_ to test *rendered* HTML and the *behavior* of Web pages, namely JavaScript functionality. Django also provides special support for those frameworks; see the section on :class:`~django.test.LiveServerTestCase` for more details."
msgstr ""

#: ../../topics/testing.txt:596
# 7bfd39ad932a40e49834ff82432ef0e9
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

#: ../../topics/testing.txt:599
# c14e7c183d0c4190a357e9ad332d4ea5
msgid "Overview and a quick example"
msgstr ""

#: ../../topics/testing.txt:601
# 216c676215b84c3d9233206801911e4f
msgid "To use the test client, instantiate ``django.test.client.Client`` and retrieve Web pages::"
msgstr ""

#: ../../topics/testing.txt:613
# 96fd015227974be98232988e9a8faad4
msgid "As this example suggests, you can instantiate ``Client`` from within a session of the Python interactive interpreter."
msgstr ""

#: ../../topics/testing.txt:616
# 90a5499e5b7f4ceaac0e325ea869543b
msgid "Note a few important things about how the test client works:"
msgstr ""

#: ../../topics/testing.txt:618
# 524ef9961fd44f1cb8caeba62056a62d
msgid "The test client does *not* require the Web server to be running. In fact, it will run just fine with no Web server running at all! That's because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly."
msgstr ""

#: ../../topics/testing.txt:623
# e25fcd1ac55342328e8f2a50f91cdc7f
msgid "When retrieving pages, remember to specify the *path* of the URL, not the whole domain. For example, this is correct::"
msgstr ""

#: ../../topics/testing.txt:628
# 299a51356c3c4cd4aaeb63efc18f4d8b
msgid "This is incorrect::"
msgstr ""

#: ../../topics/testing.txt:632
# d36acea81d8748d29767d936d9f10aa9
msgid "The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

#: ../../topics/testing.txt:637
# a3fb70e2a8a94ec4b2416101bc18783e
msgid "To resolve URLs, the test client uses whatever URLconf is pointed-to by your :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../topics/testing.txt:640
# 1803afd5e60449d1a1d3bab211cee0d6
msgid "Although the above example would work in the Python interactive interpreter, some of the test client's functionality, notably the template-related functionality, is only available *while tests are running*."
msgstr ""

#: ../../topics/testing.txt:645
# 1f81c2e535444e8289dad503b9e4ba49
msgid "The reason for this is that Django's test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django's template system in memory) only happens during test running."
msgstr ""

#: ../../topics/testing.txt:650
# 81310b54da2540329f6d6b2a4894fcf8
msgid "By default, the test client will disable any CSRF checks performed by your site."
msgstr ""

#: ../../topics/testing.txt:655
# 8b8d201686824a56a096d2ffb10d1720
msgid "If, for some reason, you *want* the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the ``enforce_csrf_checks`` argument when you construct your client::"
msgstr ""

#: ../../topics/testing.txt:665
# ac43767bed9546b5badfec2a647ecde5
msgid "Making requests"
msgstr ""

#: ../../topics/testing.txt:667
# f9d2d400f9fb43989e072e45579a16d3
msgid "Use the ``django.test.client.Client`` class to make requests. It requires no arguments at time of construction:"
msgstr ""

#: ../../topics/testing.txt:672
# c7c412c4ec424afea0a6698272b1b162
msgid "Once you have a ``Client`` instance, you can call any of the following methods:"
msgstr ""

#: ../../topics/testing.txt:678
# de4526fc49464fc38d60d98b54e40d81
msgid "Makes a GET request on the provided ``path`` and returns a ``Response`` object, which is documented below."
msgstr ""

#: ../../topics/testing.txt:681
# deb78545200d434eab986ebbe3c5062e
msgid "The key-value pairs in the ``data`` dictionary are used to create a GET data payload. For example::"
msgstr ""

#: ../../topics/testing.txt:687
# 2787dd1c2f814c86907b8c123fe4b50c
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

#: ../../topics/testing.txt:691
# bc576f023c794fcda858003cca77dde8
msgid "The ``extra`` keyword arguments parameter can be used to specify headers to be sent in the request. For example::"
msgstr ""

#: ../../topics/testing.txt:698
# d420815ae8f4488f96b6f52cc3f6e6c2
msgid "...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, which is a good way to test code paths that use the :meth:`django.http.HttpRequest.is_ajax()` method."
msgstr ""

#: ../../topics/testing.txt:704
# 28d9894f2fc44aff832fd17c0b2cc325
msgid "The headers sent via ``**extra`` should follow CGI_ specification. For example, emulating a different \"Host\" header as sent in the HTTP request from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

#: ../../topics/testing.txt:711
# f2d758bdb30b4fdcb560f1e913d4973c
msgid "If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as::"
msgstr ""

#: ../../topics/testing.txt:718
# ee66e78e7d0b4fd4b5127665bd5af40a
msgid "If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence."
msgstr ""

#: ../../topics/testing.txt:721
#: ../../topics/testing.txt:803
#: ../../topics/testing.txt:813
#: ../../topics/testing.txt:822
#: ../../topics/testing.txt:834
#: ../../topics/testing.txt:843
# 6bc64cf4d4e74abfa0a96cc82a4ae488
# 67dd89282e2740218dd95cf5ddc84df0
# 5ef2092f387d46d8852101cbf117c2b3
# de73deb9921242ad90a17ee93e673606
# cdec04e4502a48fca9a9e325b43091e1
# 0c067e41d4c9422098457f42bd88db3c
msgid "If you set ``follow`` to ``True`` the client will follow any redirects and a ``redirect_chain`` attribute will be set in the response object containing tuples of the intermediate urls and status codes."
msgstr ""

#: ../../topics/testing.txt:725
# 0c4da12daea34290a751ca78a794e237
msgid "If you had an url ``/redirect_me/`` that redirected to ``/next/``, that redirected to ``/final/``, this is what you'd see::"
msgstr ""

#: ../../topics/testing.txt:734
# f276effb9fd042d09edc1721213470fa
msgid "Makes a POST request on the provided ``path`` and returns a ``Response`` object, which is documented below."
msgstr ""

#: ../../topics/testing.txt:737
# 3e0e6575c7164a789df9c72c97aefdaf
msgid "The key-value pairs in the ``data`` dictionary are used to submit POST data. For example::"
msgstr ""

#: ../../topics/testing.txt:743
# 1c76a4f73f474a99a285f3817f3ea927
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

#: ../../topics/testing.txt:747
# 5f0bb370ed76456a9d7c82d4ff163e41
msgid "...with this POST data::"
msgstr ""

#: ../../topics/testing.txt:751
# 0a8517591cf443f0ba96195e228067e8
msgid "If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML payload), the contents of ``data`` will be sent as-is in the POST request, using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

#: ../../topics/testing.txt:755
# 5a341295f1fd45829f58d0dcca0f6f9b
msgid "If you don't provide a value for ``content_type``, the values in ``data`` will be transmitted with a content type of :mimetype:`multipart/form-data`. In this case, the key-value pairs in ``data`` will be encoded as a multipart message and used to create the POST data payload."
msgstr ""

#: ../../topics/testing.txt:761
# 2cf70e4cd907410f962820405e662d84
msgid "To submit multiple values for a given key -- for example, to specify the selections for a ``<select multiple>`` -- provide the values as a list or tuple for the required key. For example, this value of ``data`` would submit three selected values for the field named ``choices``::"
msgstr ""

#: ../../topics/testing.txt:768
# de3fc830e7ac4ccca7adf2f713c725c0
msgid "Submitting files is a special case. To POST a file, you need only provide the file field name as a key, and a file handle to the file you wish to upload as a value. For example::"
msgstr ""

#: ../../topics/testing.txt:777
# 6c2783b4fa0949ad94f764ba22a72ae1
msgid "(The name ``attachment`` here is not relevant; use whatever name your file-processing code expects.)"
msgstr ""

#: ../../topics/testing.txt:780
# b117433bf5444b978914a1564d754e2d
msgid "Note that if you wish to use the same file handle for multiple ``post()`` calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to ``post()``, as demonstrated above."
msgstr ""

#: ../../topics/testing.txt:786
# 0c15443603a14ebdb7a5a58a02153fad
msgid "You should also ensure that the file is opened in a way that allows the data to be read. If your file contains binary data such as an image, this means you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

#: ../../topics/testing.txt:791
#: ../../topics/testing.txt:826
#: ../../topics/testing.txt:847
# a38f2a0eab234f5dbf20129833a40c15
# bebb333781494ac7aa4c7427c897ee1d
# 59478f29795c4240be3b7bbdc541af06
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

#: ../../topics/testing.txt:793
# dd47f0430bd2400797c98a937d3f9a96
msgid "If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request::"
msgstr ""

#: ../../topics/testing.txt:799
# 33c180a48a654d03a8a5f5cf5bef3b91
msgid "... the view handling this request could interrogate request.POST to retrieve the username and password, and could interrogate request.GET to determine if the user was a visitor."
msgstr ""

#: ../../topics/testing.txt:809
# 20b1822607ce4debb391d0ec741840da
msgid "Makes a HEAD request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces. Acts just like :meth:`Client.get` except it does not return a message body."
msgstr ""

#: ../../topics/testing.txt:819
# 104488dd8f2a4669ac5919a7504f0f5c
msgid "Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing.txt:830
# 4bb947bdb0844b5ca56efd51059d4946
msgid "Makes a PUT request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces. Acts just like :meth:`Client.post` except with the PUT request method."
msgstr ""

#: ../../topics/testing.txt:840
# 37ebac047724464aa62e5249f92b3562
msgid "Makes an DELETE request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing.txt:851
# d6cf3c83521f4c29913bcaabc7c13399
msgid "If your site uses Django's :doc:`authentication system</topics/auth>` and you deal with logging in users, you can use the test client's ``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

#: ../../topics/testing.txt:856
# 35c99297fc3f43cfa591a99cc6256b53
msgid "After you call this method, the test client will have all the cookies and session data required to pass any login-based tests that may form part of a view."
msgstr ""

#: ../../topics/testing.txt:860
# 19806a7140fa44b5bdc10287a68a3ff3
msgid "The format of the ``credentials`` argument depends on which :ref:`authentication backend <authentication-backends>` you're using (which is configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're using the standard authentication backend provided by Django (``ModelBackend``), ``credentials`` should be the user's username and password, provided as keyword arguments::"
msgstr ""

#: ../../topics/testing.txt:872
# ba0bea8ab28243be966c81ab0e93a4cc
msgid "If you're using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend's ``authenticate()`` method."
msgstr ""

#: ../../topics/testing.txt:876
# f4f6bdaf47f74d519f7da42e1296a5f7
msgid "``login()`` returns ``True`` if it the credentials were accepted and login was successful."
msgstr ""

#: ../../topics/testing.txt:879
# b069e01c67f64769bc0200832ce15000
msgid "Finally, you'll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You'll need to create users as part of the test suite -- either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can't set the user's password by setting the password attribute directly -- you must use the :meth:`~django.contrib.auth.models.User.set_password()` function to store a correctly hashed password. Alternatively, you can use the :meth:`~django.contrib.auth.models.UserManager.create_user` helper method to create a new user with a correctly hashed password."
msgstr ""

#: ../../topics/testing.txt:895
# abe973cc84af4c628b9689c3997265a9
msgid "If your site uses Django's :doc:`authentication system</topics/auth>`, the ``logout()`` method can be used to simulate the effect of a user logging out of your site."
msgstr ""

#: ../../topics/testing.txt:899
# 9d15f9cb733746c0aa08f0afb0284926
msgid "After you call this method, the test client will have all the cookies and session data cleared to defaults. Subsequent requests will appear to come from an AnonymousUser."
msgstr ""

#: ../../topics/testing.txt:904
# b2c6dbbc47a542359759f6f2811d93a5
msgid "Testing responses"
msgstr ""

#: ../../topics/testing.txt:906
# 31f7926a99324a1ea78263fb15177ea6
msgid "The ``get()`` and ``post()`` methods both return a ``Response`` object. This ``Response`` object is *not* the same as the ``HttpResponse`` object returned Django views; the test response object has some additional data useful for test code to verify."
msgstr ""

#: ../../topics/testing.txt:911
# 73ffa14326824eb8b2d07c4c560c7a8f
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

#: ../../topics/testing.txt:917
# 5350de36bfac495c9622fa57945d062d
msgid "The test client that was used to make the request that resulted in the response."
msgstr ""

#: ../../topics/testing.txt:922
# f3d0b0def4cd4f56a7ff1aef252f4626
msgid "The body of the response, as a string. This is the final page content as rendered by the view, or any error message."
msgstr ""

#: ../../topics/testing.txt:927
# 5b5b5cb67a1f49a4aac56a2de20320cb
msgid "The template ``Context`` instance that was used to render the template that produced the response content."
msgstr ""

#: ../../topics/testing.txt:930
# a90a23cad3d34b78a2cdbdd66edf6671
msgid "If the rendered page used multiple templates, then ``context`` will be a list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

#: ../../topics/testing.txt:933
# 40f9c9642e3545609ab9fb5453051976
msgid "Regardless of the number of templates used during rendering, you can retrieve context values using the ``[]`` operator. For example, the context variable ``name`` could be retrieved using::"
msgstr ""

#: ../../topics/testing.txt:943
# 45f682c5915e46418dcab58511a69821
msgid "The request data that stimulated the response."
msgstr ""

#: ../../topics/testing.txt:947
# b1c91aac78434edba5c36c57b82a907e
msgid "The HTTP status of the response, as an integer. See :rfc:`2616#section-10` for a full list of HTTP status codes."
msgstr ""

#: ../../topics/testing.txt:954
# 3870576c5bb64ee498fb5c58354b7a59
msgid "A list of ``Template`` instances used to render the final content, in the order they were rendered. For each template in the list, use ``template.name`` to get the template's file name, if the template was loaded from a file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

#: ../../topics/testing.txt:960
# 97c663060dfb44658a072b2820848f7b
msgid "You can also use dictionary syntax on the response object to query the value of any settings in the HTTP headers. For example, you could determine the content type of a response using ``response['Content-Type']``."
msgstr ""

#: ../../topics/testing.txt:965
# 24461e628a6d440383db3ba478668d28
msgid "Exceptions"
msgstr ""

#: ../../topics/testing.txt:967
# dd8b78cfd52649c89af1e7e7a4557a83
msgid "If you point the test client at a view that raises an exception, that exception will be visible in the test case. You can then use a standard ``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test for exceptions."
msgstr ""

#: ../../topics/testing.txt:971
# c6170d0183ff4f3c8ef14eccbecc161a
msgid "The only exceptions that are not visible to the test client are ``Http404``, ``PermissionDenied`` and ``SystemExit``. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check ``response.status_code`` in your test."
msgstr ""

#: ../../topics/testing.txt:977
# 825a77e352d44dfc942d61846a7a2be7
msgid "Persistent state"
msgstr ""

#: ../../topics/testing.txt:979
# 5428dedac49b41ca89b0d2e6c6fb5eac
msgid "The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent ``get()`` and ``post()`` requests."
msgstr ""

#: ../../topics/testing.txt:983
# e4883ae722a941608b8366c41b1d593f
msgid "Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new ``Client`` instance (which will effectively delete all cookies)."
msgstr ""

#: ../../topics/testing.txt:987
# fd56b29b791c44618e8b7605e7089200
msgid "A test client has two attributes that store persistent state information. You can access these properties as part of a test condition."
msgstr ""

#: ../../topics/testing.txt:992
# 5e95825c3afd4c9095081191ba187ea4
msgid "A Python :class:`~Cookie.SimpleCookie` object, containing the current values of all the client cookies. See the documentation of the :mod:`Cookie` module for more."
msgstr ""

#: ../../topics/testing.txt:998
# c8d9c53293574a2cae82752d8603d8aa
msgid "A dictionary-like object containing session information. See the :doc:`session documentation</topics/http/sessions>` for full details."
msgstr ""

#: ../../topics/testing.txt:1001
# e1a78dad10b2429a99432079278b0cc2
msgid "To modify the session and then save it, it must be stored in a variable first (because a new ``SessionStore`` is created every time this property is accessed)::"
msgstr ""

#: ../../topics/testing.txt:1013
# 11d11142efb544a68970416855f20908
msgid "The following is a simple unit test using the test client::"
msgstr ""

#: ../../topics/testing.txt:1034
# 05a9dca69da143278dc973880b797b64
msgid "The request factory"
msgstr ""

#: ../../topics/testing.txt:1040
# b0b05daf82bb4f228fae4ea6ab4c8eb2
msgid "The :class:`~django.test.client.RequestFactory` shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function -- as a black box, with exactly known inputs, testing for specific outputs."
msgstr ""

#: ../../topics/testing.txt:1047
# f710f3ad0a9e4477bc03ecb3f38d3a6b
msgid "The API for the :class:`~django.test.client.RequestFactory` is a slightly restricted subset of the test client API:"
msgstr ""

#: ../../topics/testing.txt:1050
# fe7578bb80144177923e1b58b455fd87
msgid "It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client.post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client.head()` and :meth:`~Client.options()`."
msgstr ""

#: ../../topics/testing.txt:1055
# d68715c0471a4f40b5f0aabf6df1f865
msgid "These methods accept all the same arguments *except* for ``follows``. Since this is just a factory for producing requests, it's up to you to handle the response."
msgstr ""

#: ../../topics/testing.txt:1059
# b0b72e39ddb243eca7c70bfed7fe6328
msgid "It does not support middleware. Session and authentication attributes must be supplied by the test itself if required for the view to function properly."
msgstr ""

#: ../../topics/testing.txt:1066
# c65d9a18da2f426c93a008598b318786
msgid "The following is a simple unit test using the request factory::"
msgstr ""

#: ../../topics/testing.txt:1085
# f02691c3f9e74a6380654a4d76359e69
msgid "TestCase"
msgstr ""

#: ../../topics/testing.txt:1089
# ac502b43cda6453cb5547fb2778d1b5b
msgid "Normal Python unit test classes extend a base class of :class:`unittest.TestCase`. Django provides a few extensions of this base class:"
msgstr ""

#: ../../topics/testing.txt:1101
# e9b7228ebc3d406baebbc54e3fb7e89f
msgid "This class provides some additional capabilities that can be useful for testing Web sites."
msgstr ""

#: ../../topics/testing.txt:1104
# 61d3d99333ca49c0b82de31424e836d1
msgid "Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` is easy: just change the base class of your test from :class:`unittest.TestCase` to :class:`django.test.TestCase`. All of the standard Python unit test functionality will continue to be available, but it will be augmented with some useful additions, including:"
msgstr ""

#: ../../topics/testing.txt:1110
# 9d6cdf7ee3a34ab29094f0b679a4b9e0
msgid "Automatic loading of fixtures."
msgstr ""

#: ../../topics/testing.txt:1112
# 3200c42bf16a443099fd56c970749adf
msgid "Wraps each test in a transaction."
msgstr ""

#: ../../topics/testing.txt:1114
# b2a8e428776d4fd9bc68ff9a3c0837f5
msgid "Creates a TestClient instance."
msgstr ""

#: ../../topics/testing.txt:1116
# e0ad9b8a9352485bbc5bdf4b7f7b0744
msgid "Django-specific assertions for testing for things like redirection and form errors."
msgstr ""

#: ../../topics/testing.txt:1119
# 2e8a0ce1bdd7440980aee80f4df13bb6
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../topics/testing.txt:1123
# 84a825af25154224a42aad8e953e7cd0
msgid "Django ``TestCase`` classes make use of database transaction facilities, if available, to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that the effects of transaction commit and rollback cannot be tested by a Django ``TestCase`` class. If your test requires testing of such transactional behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

#: ../../topics/testing.txt:1130
# 83d45ae8aef44d36bd5e51e27f5b6c4d
msgid "``TransactionTestCase`` and ``TestCase`` are identical except for the manner in which the database is reset to a known state and the ability for test code to test the effects of commit and rollback. A ``TransactionTestCase`` resets the database before the test runs by truncating all tables and reloading initial data. A ``TransactionTestCase`` may call commit and rollback and observe the effects of these calls on the database."
msgstr ""

#: ../../topics/testing.txt:1137
# 2ebca82ef8094209aabe22868037002b
msgid "A ``TestCase``, on the other hand, does not truncate tables and reload initial data at the beginning of a test. Instead, it encloses the test code in a database transaction that is rolled back at the end of the test.  It also prevents the code under test from issuing any commit or rollback operations on the database, to ensure that the rollback at the end of the test restores the database to its initial state. In order to guarantee that all ``TestCase`` code starts with a clean database, the Django test runner runs all ``TestCase`` tests first, before any other tests (e.g. doctests) that may alter the database without restoring it to its original state."
msgstr ""

#: ../../topics/testing.txt:1147
# 5d592059a95245d7b62be62aa584f9dd
msgid "When running on a database that does not support rollback (e.g. MySQL with the MyISAM storage engine), ``TestCase`` falls back to initializing the database by truncating tables and reloading initial data."
msgstr ""

#: ../../topics/testing.txt:1151
# de67e6369ba349e0a66cbc230d6888a1
msgid "``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

#: ../../topics/testing.txt:1154
# ffb9cf0c30ba419da2e66229af929ff7
msgid "The ``TestCase`` use of rollback to un-do the effects of the test code may reveal previously-undetected errors in test code.  For example, test code that assumes primary keys values will be assigned starting at one may find that assumption no longer holds true when rollbacks instead of table truncation are being used to reset the database.  Similarly, the reordering of tests so that all ``TestCase`` classes run first may reveal unexpected dependencies on test case ordering.  In such cases a quick fix is to switch the ``TestCase`` to a ``TransactionTestCase``. A better long-term fix, that allows the test to take advantage of the speed benefit of ``TestCase``, is to fix the underlying test problem."
msgstr ""

#: ../../topics/testing.txt:1169
# 9a1f4502e7274ca2b00aab736e8b19c7
msgid "A very thin subclass of :class:`unittest.TestCase`, it extends it with some basic functionality like:"
msgstr ""

#: ../../topics/testing.txt:1172
# 9f23c3dc04644235aef6708f53634534
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

#: ../../topics/testing.txt:1173
# 7e541efccbe44528bb2a4b6811307ab1
msgid "Checking that a callable :meth:`raises a certain exception <SimpleTestCase.assertRaisesMessage>`."
msgstr ""

#: ../../topics/testing.txt:1174
# 1cf447768e4e455bb491d5ceae42bc30
msgid ":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

#: ../../topics/testing.txt:1175
# fbe4a7910fc045ab8056d7aebe935412
msgid "Testing server :ref:`HTML responses for the presence/lack of a given fragment <assertions>`."
msgstr ""

#: ../../topics/testing.txt:1176
# 8a685541ec0b48df832baf43b2b785d1
msgid "The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

#: ../../topics/testing.txt:1178
# fd3031535c9b4070b1f537765e85c596
msgid "If you need any of the other more complex and heavyweight Django-specific features like:"
msgstr ""

#: ../../topics/testing.txt:1181
# 13d8d0973e074cdcbad8bcc4518f009b
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

#: ../../topics/testing.txt:1182
# 8dd4c726b0f341edb08837ad49bc7b5e
msgid "Testing or using the ORM."
msgstr ""

#: ../../topics/testing.txt:1183
# ba598664d7dc416696c1106d8bce3a6e
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

#: ../../topics/testing.txt:1184
# 57289b705cae47758de8fc668c44b2a4
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

#: ../../topics/testing.txt:1185
# e27b842a43404164b6a0a5cceb64375a
msgid "Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

#: ../../topics/testing.txt:1186
# 3e8003bdf2b943b6891d94a03bcd5f1c
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

#: ../../topics/testing.txt:1188
# e0c4fed86c024d84be648acc68542914
msgid "then you should use :class:`~django.test.TransactionTestCase` or :class:`~django.test.TestCase` instead."
msgstr ""

#: ../../topics/testing.txt:1191
# 9f1198bd17e74d11a93b9e45b3b17c6b
msgid "``SimpleTestCase`` inherits from :class:`django.utils.unittest.TestCase`."
msgstr ""

#: ../../topics/testing.txt:1194
# 686b5043191a4816954aaef614a4e27f
msgid "Default test client"
msgstr ""

#: ../../topics/testing.txt:1198
# 50b412a861d941cfbb6aba4ad949bcf0
msgid "Every test case in a ``django.test.TestCase`` instance has access to an instance of a Django test client. This client can be accessed as ``self.client``. This client is recreated for each test, so you don't have to worry about state (such as cookies) carrying over from one test to another."
msgstr ""

#: ../../topics/testing.txt:1203
# 335b800616b247859d06e7bc0d7e6d86
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

#: ../../topics/testing.txt:1219
# 60a92cef25364420bdc1b04d9b0aa3eb
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

#: ../../topics/testing.txt:1233
# a08b204e139a4390af92d8dff1cf21bb
msgid "Customizing the test client"
msgstr ""

#: ../../topics/testing.txt:1239
# 092e721fcbac42cfa59dac5c9722df8d
msgid "If you want to use a different ``Client`` class (for example, a subclass with customized behavior), use the :attr:`~TestCase.client_class` class attribute::"
msgstr ""

#: ../../topics/testing.txt:1258
# 4035a68264b44051bb03fa64de59942b
msgid "Fixture loading"
msgstr ""

#: ../../topics/testing.txt:1262
# 76e20b25cdac494290452b9dd018e8c8
msgid "A test case for a database-backed Web site isn't much use if there isn't any data in the database. To make it easy to put test data into the database, Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

#: ../../topics/testing.txt:1266
# b2c8593f15504ed08f6d22fcf462c7da
msgid "A fixture is a collection of data that Django knows how to import into a database. For example, if your site has user accounts, you might set up a fixture of fake user accounts in order to populate your database during tests."
msgstr ""

#: ../../topics/testing.txt:1270
# 5a6c7df628814477ab7ebcfa91fd5497
msgid "The most straightforward way of creating a fixture is to use the :djadmin:`manage.py dumpdata <dumpdata>` command. This assumes you already have some data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` for more details."
msgstr ""

#: ../../topics/testing.txt:1277
# 17ae8ed3f8184da0a0ac3b1f287b6696
msgid "If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used a fixture without even knowing it! When you call :djadmin:`syncdb` in the database for the first time, Django installs a fixture called ``initial_data``. This gives you a way of populating a new database with any initial data, such as a default set of categories."
msgstr ""

#: ../../topics/testing.txt:1284
# a91f418bb79c46788ad009bf69cbbcb1
msgid "Fixtures with other names can always be installed manually using the :djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

#: ../../topics/testing.txt:1289
# 4b27edc2bb034a08926d2333184cc1a1
msgid "Django provides a second way to insert initial data into models -- the :ref:`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to provide initial data for testing purposes. Django's test framework flushes the contents of the test database after each test; as a result, any data added using the custom SQL hook will be lost."
msgstr ""

#: ../../topics/testing.txt:1296
# 672dcebe91154308af7bd679a3982d7e
msgid "Once you've created a fixture and placed it in a ``fixtures`` directory in one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by specifying a ``fixtures`` class attribute on your :class:`django.test.TestCase` subclass::"
msgstr ""

#: ../../topics/testing.txt:1315
# ea49231e35fa44ef88d28478be7791de
msgid "Here's specifically what will happen:"
msgstr ""

#: ../../topics/testing.txt:1317
# c2e6117f558b4a36ad8c52759266acf3
msgid "At the start of each test case, before ``setUp()`` is run, Django will flush the database, returning the database to the state it was in directly after :djadmin:`syncdb` was called."
msgstr ""

#: ../../topics/testing.txt:1321
# 8645b4c659e54abc928e37e5ef3ed10a
msgid "Then, all the named fixtures are installed. In this example, Django will install any JSON fixture named ``mammals``, followed by any fixture named ``birds``. See the :djadmin:`loaddata` documentation for more details on defining and installing fixtures."
msgstr ""

#: ../../topics/testing.txt:1326
# 77d34b1c21434928a4f44e7c5f0f692f
msgid "This flush/load procedure is repeated for each test in the test case, so you can be certain that the outcome of a test will not be affected by another test, or by the order of test execution."
msgstr ""

#: ../../topics/testing.txt:1331
# eba65f98141a481990a7b296e4b459f5
msgid "URLconf configuration"
msgstr ""

#: ../../topics/testing.txt:1335
# 68e80cf3740b4e528d05748f6a5c11ae
msgid "If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can't rely upon the fact that your views will be available at a particular URL."
msgstr ""

#: ../../topics/testing.txt:1341
# a85465e5a4b94ca28a0cdcea5a9f1789
msgid "In order to provide a reliable URL space for your test, ``django.test.TestCase`` provides the ability to customize the URLconf configuration for the duration of the execution of a test suite. If your ``TestCase`` instance defines an ``urls`` attribute, the ``TestCase`` will use the value of that attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

#: ../../topics/testing.txt:1359
# 581134e8fb1a41a991f937560ea5bb77
msgid "This test case will use the contents of ``myapp.test_urls`` as the URLconf for the duration of the test case."
msgstr ""

#: ../../topics/testing.txt:1365
# 6def00866b3d4ad5ac04f30150c1354f
msgid "Multi-database support"
msgstr ""

#: ../../topics/testing.txt:1371
# 1c036f7d49d747048578623c44ea020d
msgid "Django sets up a test database corresponding to every database that is defined in the :setting:`DATABASES` definition in your settings file. However, a big part of the time taken to run a Django TestCase is consumed by the call to ``flush`` that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity -- especially if your tests don't need to test multi-database activity."
msgstr ""

#: ../../topics/testing.txt:1380
# 524d585a4a294a57850f4f81531ed533
msgid "As an optimization, Django only flushes the ``default`` database at the start of each test run. If your setup contains multiple databases, and you have a test that requires every database to be clean, you can use the ``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

#: ../../topics/testing.txt:1394
# c45da484f14947cfa4f2af3ab1ce9e05
msgid "This test case will flush *all* the test databases before running ``testIndexPageView``."
msgstr ""

#: ../../topics/testing.txt:1400
# abe8e2c197df40ddb196b7b22306bd74
msgid "Overriding settings"
msgstr ""

#: ../../topics/testing.txt:1406
# 32171e95c67e47908aa738de5081079e
msgid "For testing purposes it's often useful to change a setting temporarily and revert to the original value after running the testing code. For this use case Django provides a standard Python context manager (see :pep:`343`) :meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

#: ../../topics/testing.txt:1426
# 0c46e130f62e4258900b7e87f9dfebd3
msgid "This example will override the :setting:`LOGIN_URL` setting for the code in the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

#: ../../topics/testing.txt:1433
# fc187a2aa7b24aae818ea64c06598da9
msgid "In case you want to override a setting for just one test method or even the whole :class:`TestCase` class, Django provides the :func:`~django.test.utils.override_settings` decorator (see :pep:`318`). It's used like this::"
msgstr ""

#: ../../topics/testing.txt:1448
# dcca87235f444f7bb7e56856e33b3260
msgid "The decorator can also be applied to test case classes::"
msgstr ""

#: ../../topics/testing.txt:1463
# d9553b873f764dfe97cb83d28748fa60
msgid "When given a class, the decorator modifies the class directly and returns it; it doesn't create and return a modified copy of it.  So if you try to tweak the above example to assign the return value to a different name than ``LoginTestCase``, you may be surprised to find that the original ``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

#: ../../topics/testing.txt:1470
# 34b276b038cd435ca224bc3c079cc35d
msgid "On Python 2.6 and higher you can also use the well known decorator syntax to decorate the class::"
msgstr ""

#: ../../topics/testing.txt:1485
# ed5f7f50816c4915bf9d5ea0f9e0ff43
msgid "When overriding settings, make sure to handle the cases in which your app's code uses a cache or similar feature that retains state even if the setting is changed. Django provides the :data:`django.test.signals.setting_changed` signal that lets you register callbacks to clean up and otherwise reset state when settings are changed. Note that this signal isn't currently used by Django itself, so changing built-in settings may not yield the results you expect."
msgstr ""

#: ../../topics/testing.txt:1494
# 35e874b9db874d9c91bbef7abc59f8c4
msgid "Emptying the test outbox"
msgstr ""

#: ../../topics/testing.txt:1496
# 7acc8a6c6888418bb1adcd61b7e986a3
msgid "If you use Django's custom ``TestCase`` class, the test runner will clear the contents of the test email outbox at the start of each test case."
msgstr ""

#: ../../topics/testing.txt:1499
# 4f7ec31996164fc8b2f3ecebdf79cbc0
msgid "For more detail on email services during tests, see `Email services`_."
msgstr ""

#: ../../topics/testing.txt:1504
# 2e84c8470fe44b6ba99e8462449e2cdc
msgid "Assertions"
msgstr ""

#: ../../topics/testing.txt:1511
# 36111f381bd842818c7dac0571cf41f4
msgid "As Python's normal :class:`unittest.TestCase` class implements assertion methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest.TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a number of custom assertion methods that are useful for testing Web applications:"
msgstr ""

#: ../../topics/testing.txt:1517
# ec20adb66943447f87b466f4be81357f
msgid "The failure messages given by most of these assertion methods can be customized with the ``msg_prefix`` argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of an failure in your test suite."
msgstr ""

#: ../../topics/testing.txt:1527
# 1fe242f596c6475da5a2ad291fb798c7
msgid "Asserts that execution of callable ``callable_obj`` raised the ``expected_exception`` exception and that such exception has an ``expected_message`` representation. Any other outcome is reported as a failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

#: ../../topics/testing.txt:1537
# c9a03ed5168c44028f4169edffa6db41
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

#: ../../topics/testing.txt:1548
# fa7cab2b76264e0ba8fad85707dd8e15
msgid "For example, the following code tests that an ``EmailField`` accepts \"a@a.com\" as a valid email address, but rejects \"aaa\" with a reasonable error message::"
msgstr ""

#: ../../topics/testing.txt:1557
# be11856a0590424d8bc7cc95d3450752
msgid "Asserts that a ``Response`` instance produced the given ``status_code`` and that ``text`` appears in the content of the response. If ``count`` is provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

#: ../../topics/testing.txt:1563
#: ../../topics/testing.txt:1576
# 8692b19005e44d3ebd71f4bf1fadb5ee
# c18fe42cfba04ce6895ddb719e8e7697
msgid "Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the response content will be based on HTML semantics instead of character-by-character equality. Whitespace is ignored in most cases, attribute ordering is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more details."
msgstr ""

#: ../../topics/testing.txt:1571
# 9615ce5f61674292952e5a5e8936506e
msgid "Asserts that a ``Response`` instance produced the given ``status_code`` and that ``text`` does not appears in the content of the response."
msgstr ""

#: ../../topics/testing.txt:1584
# cfc9a586ca5b4f02b3a0a370b76f0095
msgid "Asserts that a field on a form raises the provided list of errors when rendered on the form."
msgstr ""

#: ../../topics/testing.txt:1587
# c41bf9baa9864914898b8d6e7a95aed0
msgid "``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

#: ../../topics/testing.txt:1590
# ecdd2cc24a0f466bbbf265a4981e49a5
msgid "``field`` is the name of the field on the form to check. If ``field`` has a value of ``None``, non-field errors (errors you can access via ``form.non_field_errors()``) will be checked."
msgstr ""

#: ../../topics/testing.txt:1594
# bea7f5e182cc4a48ad686bb0f1e6e2e9
msgid "``errors`` is an error string, or a list of error strings, that are expected as a result of form validation."
msgstr ""

#: ../../topics/testing.txt:1599
# 43b3fabff26241beb2755f61def86c04
msgid "Asserts that the template with the given name was used in rendering the response."
msgstr ""

#: ../../topics/testing.txt:1602
# 0a4060fdac6c4d3597af5fa5dc34bb69
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

#: ../../topics/testing.txt:1606
# 3efdc42b44824c48bd9ba5d995977f66
msgid "You can use this as a context manager, like this::"
msgstr ""

#: ../../topics/testing.txt:1619
# 3d094bd3a1b148e8be01223fe0658660
msgid "Asserts that the template with the given name was *not* used in rendering the response."
msgstr ""

#: ../../topics/testing.txt:1624
# 7e680b96ca884266aa05c5499444fc9c
msgid "You can use this as a context manager in the same way as :meth:`~TestCase.assertTemplateUsed`."
msgstr ""

#: ../../topics/testing.txt:1629
# a696ccb2c09a4b08a302a8ed08af43f7
msgid "Asserts that the response return a ``status_code`` redirect status, it redirected to ``expected_url`` (including any GET data), and the final page was received with ``target_status_code``."
msgstr ""

#: ../../topics/testing.txt:1633
# 572f5379277645148f9e67fdb81dfe3d
msgid "If your request used the ``follow`` argument, the ``expected_url`` and ``target_status_code`` will be the url and status code for the final point of the redirect chain."
msgstr ""

#: ../../topics/testing.txt:1641
# 6d87b40a46a7435087bac614490ca7b9
msgid "Asserts that a queryset ``qs`` returns a particular list of values ``values``."
msgstr ""

#: ../../topics/testing.txt:1643
# cec5f0522b734583a8d3795386bce554
msgid "The comparison of the contents of ``qs`` and ``values`` is performed using the function ``transform``; by default, this means that the ``repr()`` of each value is compared. Any other callable can be used if ``repr()`` doesn't provide a unique or helpful comparison."
msgstr ""

#: ../../topics/testing.txt:1648
# 4f05c715657d45739e106fb32309b2dc
msgid "By default, the comparison is also ordering dependent. If ``qs`` doesn't provide an implicit ordering, you can set the ``ordered`` parameter to ``False``, which turns the comparison into a Python set comparison."
msgstr ""

#: ../../topics/testing.txt:1663
# 2ac553be353742eea5bc1fd89a988adc
msgid "Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that ``num`` database queries are executed."
msgstr ""

#: ../../topics/testing.txt:1666
# f6d6026998b2435dbf744dd634955ef9
msgid "If a ``\"using\"`` key is present in ``kwargs`` it is used as the database alias for which to check the number of queries.  If you wish to call a function with a ``using`` parameter you can do it by wrapping the call with a ``lambda`` to add an extra parameter::"
msgstr ""

#: ../../topics/testing.txt:1673
# 28e9938f30a14320b60045d2f9fa304c
msgid "If you're using Python 2.5 or greater you can also use this as a context manager::"
msgstr ""

#: ../../topics/testing.txt:1688
# 3ca9ada3ad8d4ab7a23c018160042642
msgid "Asserts that the strings ``html1`` and ``html2`` are equal. The comparison is based on HTML semantics. The comparison takes following things into account:"
msgstr ""

#: ../../topics/testing.txt:1692
# 10e981524c23492680470b67f3780d10
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

#: ../../topics/testing.txt:1693
# 615278cbd1fe465fb2f602902335f96f
msgid "All types of whitespace are considered equivalent."
msgstr ""

#: ../../topics/testing.txt:1694
# 78e9979147eb4cb99998cae51169137f
msgid "All open tags are closed implicitly, e.g. when a surrounding tag is closed or the HTML document ends."
msgstr ""

#: ../../topics/testing.txt:1696
# 9d1844339be44fe6926633c594755479
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

#: ../../topics/testing.txt:1697
# 3dec601ba6fb4c71b66f3e483b8a9203
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

#: ../../topics/testing.txt:1698
# ed27605df0e54913bfb2c19f059fce6c
msgid "Attributes without an argument are equal to attributes that equal in name and value (see the examples)."
msgstr ""

#: ../../topics/testing.txt:1701
# 22170d03c6e040e397ad9fc9d91ec239
msgid "The following examples are valid tests and don't raise any ``AssertionError``::"
msgstr ""

#: ../../topics/testing.txt:1712
#: ../../topics/testing.txt:1723
# 0f66be971acb481db9532eb4f54668e9
# 210a373cf58e435ab561225b879beff2
msgid "``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be raised if one of them cannot be parsed."
msgstr ""

#: ../../topics/testing.txt:1719
# 5b735ad96faa45a6bf0b26a4542b65da
msgid "Asserts that the strings ``html1`` and ``html2`` are *not* equal. The comparison is based on HTML semantics. See :meth:`~SimpleTestCase.assertHTMLEqual` for details."
msgstr ""

#: ../../topics/testing.txt:1729
# dad53adf5a334b6a835b508c75ce6fbe
msgid "Email services"
msgstr ""

#: ../../topics/testing.txt:1731
# b492885de5bc494da4caea612a159fb6
msgid "If any of your Django views send email using :doc:`Django's email functionality </topics/email>`, you probably don't want to send email each time you run a test using that view. For this reason, Django's test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email -- from the number of messages sent to the contents of each message -- without actually sending the messages."
msgstr ""

#: ../../topics/testing.txt:1738
# 3ceb1f24ceea4f57ab73285095c4eabe
msgid "The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don't worry -- this has no effect on any other email senders outside of Django, such as your machine's mail server, if you're running one.)"
msgstr ""

#: ../../topics/testing.txt:1747
# 8b821bebe1834e23835552c53e110366
msgid "During test running, each outgoing email is saved in ``django.core.mail.outbox``. This is a simple list of all :class:`~django.core.mail.EmailMessage` instances that have been sent. The ``outbox`` attribute is a special attribute that is created *only* when the ``locmem`` email backend is used. It doesn't normally exist as part of the :mod:`django.core.mail` module and you can't import it directly. The code below shows how to access this attribute correctly."
msgstr ""

#: ../../topics/testing.txt:1755
# d1a27c8c4d5149c88b842f8361542d32
msgid "Here's an example test that examines ``django.core.mail.outbox`` for length and contents::"
msgstr ""

#: ../../topics/testing.txt:1774
# 2b37e038b22f4dccb53e39ed413c072a
msgid "As noted :ref:`previously <emptying-test-outbox>`, the test outbox is emptied at the start of every test in a Django ``TestCase``. To empty the outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

#: ../../topics/testing.txt:1786
# 8deb7562a9294f5a88e5ba34eb15d350
msgid "Skipping tests"
msgstr ""

#: ../../topics/testing.txt:1792
# d32de5d9b3eb4c0fa33ab686c1325538
msgid "The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions."
msgstr ""

#: ../../topics/testing.txt:1797
# 424103aabad8412c88529410cbe58e89
msgid "For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with :func:`@skipIf <unittest.skipIf>`. Then, the test runner will report that the test wasn't executed and why, instead of failing the test or omitting the test altogether."
msgstr ""

#: ../../topics/testing.txt:1802
# cd60a752a91b4c29ac0c9ce188154896
msgid "To supplement these test skipping behaviors, Django provides two additional skip decorators. Instead of testing a generic boolean, these decorators check the capabilities of the database, and skip the test if the database doesn't support a specific named feature."
msgstr ""

#: ../../topics/testing.txt:1807
# 0ad49d4d6cbc43f799710775a86dbd63
msgid "The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See :class:`~django.db.backends.BaseDatabaseFeatures` class for a full list of database features that can be used as a basis for skipping tests."
msgstr ""

#: ../../topics/testing.txt:1815
# cf37e857580c49f9ab35c7537ed11f8f
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

#: ../../topics/testing.txt:1817
# 0817661810ef4b8a9f4496c964708917
msgid "For example, the following test will not be executed if the database supports transactions (e.g., it would *not* run under PostgreSQL, but it would under MySQL with MyISAM tables)::"
msgstr ""

#: ../../topics/testing.txt:1828
# 82f7329ea0994c54aaaab9e9e753192a
msgid "Skip the decorated test if the named database feature is *not* supported."
msgstr ""

#: ../../topics/testing.txt:1831
# d5ccd63cb83649399a056a1597b05a34
msgid "For example, the following test will only be executed if the database supports transactions (e.g., it would run under PostgreSQL, but *not* under MySQL with MyISAM tables)::"
msgstr ""

#: ../../topics/testing.txt:1841
# 3591b3c61fdc472aa5221f6d23268843
msgid "Live test server"
msgstr ""

#: ../../topics/testing.txt:1849
# f8bca80748de49179c3e12a91e92471b
msgid "``LiveServerTestCase`` does basically the same as :class:`~django.test.TransactionTestCase` with one extra feature: it launches a live Django server in the background on setup, and shuts it down on teardown. This allows the use of automated test clients other than the :ref:`Django dummy client <test-client>` such as, for example, the Selenium_ client, to execute a series of functional tests inside a browser and simulate a real user's actions."
msgstr ""

#: ../../topics/testing.txt:1857
# 11e6e28b93f1435b91fcabbf0316239d
msgid "By default the live server's address is `'localhost:8081'` and the full URL can be accessed during the tests with ``self.live_server_url``. If you'd like to change the default address (in the case, for example, where the 8081 port is already taken) then you may pass a different one to the :djadmin:`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

#: ../../topics/testing.txt:1867
# 84816ddf6298409886d7ba2b0522c826
msgid "Another way of changing the default server address is by setting the `DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your code (for example, in a :ref:`custom test runner<topics-testing-test_runner>`):"
msgstr ""

#: ../../topics/testing.txt:1876
# 5bc21df7a1c8482fb9dd1fc1773fb870
msgid "In the case where the tests are run by multiple processes in parallel (for example, in the context of several simultaneous `continuous integration`_ builds), the processes will compete for the same address, and therefore your tests might randomly fail with an \"Address already in use\" error. To avoid this problem, you can pass a comma-separated list of ports or ranges of ports (at least as many as the number of potential parallel processes). For example:"
msgstr ""

#: ../../topics/testing.txt:1887
# 059a2804118743df8b9dde98f5f29ddf
msgid "Then, during test execution, each new live test server will try every specified port until it finds one that is free and takes it."
msgstr ""

#: ../../topics/testing.txt:1892
# 238e8a4f2e15499faaed0a90b8d55fd9
msgid "To demonstrate how to use ``LiveServerTestCase``, let's write a simple Selenium test. First of all, you need to install the `selenium package`_ into your Python path:"
msgstr ""

#: ../../topics/testing.txt:1900
# 8b817bb569ac436fbafa7e5b3ea45871
msgid "Then, add a ``LiveServerTestCase``-based test to your app's tests module (for example: ``myapp/tests.py``). The code for this test may look as follows:"
msgstr ""

#: ../../topics/testing.txt:1929
# 984d2ebc9f7d4df9b0f7b29b817fa9e4
msgid "Finally, you may run the test as follows:"
msgstr ""

#: ../../topics/testing.txt:1935
# ac2ca0768c3f4cbe8c9e0523c10abc18
msgid "This example will automatically open Firefox then go to the login page, enter the credentials and press the \"Log in\" button. Selenium offers other drivers in case you do not have Firefox installed or wish to use another browser. The example above is just a tiny fraction of what the Selenium client can do; check out the `full reference`_ for more details."
msgstr ""

#: ../../topics/testing.txt:1948
# da0bb55066904b81a0107a1609d6ee39
msgid "``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </howto/static-files>` so you'll need to have your project configured accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

#: ../../topics/testing.txt:1954
# e927e54d17c34dc7aa5d1b82b691aa2f
msgid "When using an in-memory SQLite database to run the tests, the same database connection will be shared by two threads in parallel: the thread in which the live server is run and the thread in which the test case is run. It's important to prevent simultaneous database queries via this shared connection by the two threads, as that may sometimes randomly cause the tests to fail. So you need to ensure that the two threads don't access the database at the same time. In particular, this means that in some cases (for example, just after clicking a link or submitting a form), you might need to check that a response is received by Selenium and that the next page is loaded before proceeding with further test execution. Do this, for example, by making Selenium wait until the `<body>` HTML tag is found in the response (requires Selenium > 2.13):"
msgstr ""

#: ../../topics/testing.txt:1977
# 84743285abc94f5ab8f48b6270603ac6
msgid "The tricky thing here is that there's really no such thing as a \"page load,\" especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, simply checking for the presence of `<body>` in the response might not necessarily be appropriate for all use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for more information."
msgstr ""

#: ../../topics/testing.txt:1988
# 4bca7b025e094b79ac9aac5244970bf6
msgid "Using different testing frameworks"
msgstr ""

#: ../../topics/testing.txt:1990
# 1eb000464b8043d89d1b881fe2c19a8e
msgid "Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing frameworks. While Django doesn't provide explicit support for alternative frameworks, it does provide a way to invoke tests constructed for an alternative framework as if they were normal Django tests."
msgstr ""

#: ../../topics/testing.txt:1995
# 9b8d3ba75ad04aa393e895bd735df5c4
msgid "When you run ``./manage.py test``, Django looks at the :setting:`TEST_RUNNER` setting to determine what to do. By default, :setting:`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This class defines the default Django testing behavior. This behavior involves:"
msgstr ""

#: ../../topics/testing.txt:2000
# 4ed637b80f374044ab1e65f061e28eea
msgid "Performing global pre-test setup."
msgstr ""

#: ../../topics/testing.txt:2002
# ae2199f4729d44be96239f008e6c05a2
msgid "Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` files in each installed application."
msgstr ""

#: ../../topics/testing.txt:2005
# b55888a122c440128f858da75ecaca9a
msgid "Creating the test databases."
msgstr ""

#: ../../topics/testing.txt:2007
# 90a5fca87705487dab25fe11c4c9b0b3
msgid "Running ``syncdb`` to install models and initial data into the test databases."
msgstr ""

#: ../../topics/testing.txt:2010
# 6727eaafda6a46ffbcd138ce89e4c252
msgid "Running the unit tests and doctests that are found."
msgstr ""

#: ../../topics/testing.txt:2012
# f4c6596ef65c4e0ea978c60c4d54e13d
msgid "Destroying the test databases."
msgstr ""

#: ../../topics/testing.txt:2014
# d6ed0b878f9a4bd4b37d6e9f7b7b56e1
msgid "Performing global post-test teardown."
msgstr ""

#: ../../topics/testing.txt:2016
# 0060e85c43fb47a9af28737e7e5494b4
msgid "If you define your own test runner class and point :setting:`TEST_RUNNER` at that class, Django will execute your test runner whenever you run ``./manage.py test``. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have."
msgstr ""

#: ../../topics/testing.txt:2025
# f5fe0df91e474aa0a963f6eec0402ab0
msgid "Defining a test runner"
msgstr ""

#: ../../topics/testing.txt:2032
# 455c0e0737014aecb437332331c225c3
msgid "A test runner is a class defining a ``run_tests()`` method. Django ships with a ``DjangoTestSuiteRunner`` class that defines the default Django testing behavior. This class defines the ``run_tests()`` entry point, plus a selection of other methods that are used to by ``run_tests()`` to set up, execute and tear down the test suite."
msgstr ""

#: ../../topics/testing.txt:2040
# 86f52e6506f04286969e14006c3a0c68
msgid "``verbosity`` determines the amount of notification and debug information that will be printed to the console; ``0`` is no output, ``1`` is normal output, and ``2`` is verbose output."
msgstr ""

#: ../../topics/testing.txt:2044
# 484b70d442b4401ea533f1e58a09d9d8
msgid "If ``interactive`` is ``True``, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If ``interactive`` is ``False``, the test suite must be able to run without any manual intervention."
msgstr ""

#: ../../topics/testing.txt:2050
# 7d783f848d504c8fa5b61445a88236e0
msgid "If ``failfast`` is ``True``, the test suite will stop running after the first test failure is detected."
msgstr ""

#: ../../topics/testing.txt:2053
# fd1388a9b312483693188a367b70336d
msgid "Django will, from time to time, extend the capabilities of the test runner by adding new arguments. The ``**kwargs`` declaration allows for this expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

#: ../../topics/testing.txt:2061
# 2bdb9daaa3ef4a248ea59d4903809844
msgid "Your test runner may also define additional command-line options. If you add an ``option_list`` attribute to a subclassed test runner, those options will be added to the list of command-line options that the :djadmin:`test` command can use."
msgstr ""

#: ../../topics/testing.txt:2073
# a409db246ce84949be5a42c5fa62f780
msgid "This is the tuple of ``optparse`` options which will be fed into the management command's ``OptionParser`` for parsing arguments. See the documentation for Python's ``optparse`` module for more details."
msgstr ""

#: ../../topics/testing.txt:2082
# 89d1527cc73e45c28e16036631b991d9
msgid "Run the test suite."
msgstr ""

#: ../../topics/testing.txt:2084
#: ../../topics/testing.txt:2109
# ac11ab467e8c4455835bb5942f19e34c
# 434d76b7a3f54f9793df1493fd34baf2
msgid "``test_labels`` is a list of strings describing the tests to be run. A test label can take one of three forms:"
msgstr ""

#: ../../topics/testing.txt:2087
#: ../../topics/testing.txt:2112
# ff92183ffe264bbd94adefde603ab671
# 6d3e1221497747a3bab7e449ae72080c
msgid "``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

#: ../../topics/testing.txt:2089
#: ../../topics/testing.txt:2114
# e69c5ddcf1a441f7a26dda8282e55a03
# 7aab94c1c2ed440b8df3f761ba37f6b5
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

#: ../../topics/testing.txt:2090
#: ../../topics/testing.txt:2115
# e1a52bddc0f748a3ab1e04228ef4302b
# ef9b5b8675f341c793c3d2e5e29b9aa2
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

#: ../../topics/testing.txt:2092
#: ../../topics/testing.txt:2117
# 5fafdfe23ef144a7b81f1a398aea6776
# 177fbb18630d4fd4b3d1ab12bb26301b
msgid "If ``test_labels`` has a value of ``None``, the test runner should run search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../topics/testing.txt:2095
#: ../../topics/testing.txt:2120
# 4a87b9d76d4843629ad035b5c562f52a
# a65bbc6b849748b09ed5f071273b6c83
msgid "``extra_tests`` is a list of extra ``TestCase`` instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

#: ../../topics/testing.txt:2099
# 8120d180c38048909e7ead9047abad59
msgid "This method should return the number of tests that failed."
msgstr ""

#: ../../topics/testing.txt:2103
# 7ff32e1eb1e44e91946e9fad99ad54ca
msgid "Sets up the test environment ready for testing."
msgstr ""

#: ../../topics/testing.txt:2107
# bbe2c23fac8743429058ee7883b53871
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

#: ../../topics/testing.txt:2124
# 1ac6a76a31d0403a8e8adc4db6206794
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

#: ../../topics/testing.txt:2128
# 64e28e57be1b44d5891c1192911bc0a6
msgid "Creates the test databases."
msgstr ""

#: ../../topics/testing.txt:2130
# a6a235f2b7404ce889599144a357d5ea
msgid "Returns a data structure that provides enough detail to undo the changes that have been made. This data will be provided to the ``teardown_databases()`` function at the conclusion of testing."
msgstr ""

#: ../../topics/testing.txt:2136
# e2fecb43ed224cd88335ddfd7843a660
msgid "Runs the test suite."
msgstr ""

#: ../../topics/testing.txt:2138
# 20a68d8c5fb84b259ff781c61c8814dd
msgid "Returns the result produced by the running the test suite."
msgstr ""

#: ../../topics/testing.txt:2142
# 2b21604c230b43678025147871214992
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

#: ../../topics/testing.txt:2144
# 8caadd3aea8740958ad865a66d96c7f7
msgid "``old_config`` is a data structure defining the changes in the database configuration that need to be reversed. It is the return value of the ``setup_databases()`` method."
msgstr ""

#: ../../topics/testing.txt:2150
# 5f96b7de4c0a42578f473cffc9185a98
msgid "Restores the pre-test environment."
msgstr ""

#: ../../topics/testing.txt:2154
# 2d78c9c337db4d2e8c9fe4fd3da39d92
msgid "Computes and returns a return code based on a test suite, and the result from that test suite."
msgstr ""

#: ../../topics/testing.txt:2159
# e5cdf7617cbd45ed9c2bd5372be0258c
msgid "Testing utilities"
msgstr ""

#: ../../topics/testing.txt:2164
# 7af3a184c0c24697b4b62d99db6a4f67
msgid "To assist in the creation of your own test runner, Django provides a number of utility methods in the ``django.test.utils`` module."
msgstr ""

#: ../../topics/testing.txt:2169
# aae248bed69348b1b62a7736ad619d95
msgid "Performs any global pre-test setup, such as the installing the instrumentation of the template rendering system and setting up the dummy ``SMTPConnection``."
msgstr ""

#: ../../topics/testing.txt:2175
# a255f50a2a7a446eb7f1dedd4348f7f8
msgid "Performs any global post-test teardown, such as removing the black magic hooks into the template system and restoring normal email services."
msgstr ""

#: ../../topics/testing.txt:2181
# a4d26b91854b4d1daee190e8c80f236c
msgid "The creation module of the database backend (``connection.creation``) also provides some utilities that can be useful during testing."
msgstr ""

#: ../../topics/testing.txt:2186
# f775d4624a8c4921b615024f4897c8a4
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

#: ../../topics/testing.txt:2188
# 8bcdcdb4f7e44cd8a2c05684a3654fe2
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

#: ../../topics/testing.txt:2190
# e1792d4271e1460191923372fecd6db7
msgid "``autoclobber`` describes the behavior that will occur if a database with the same name as the test database is discovered:"
msgstr ""

#: ../../topics/testing.txt:2193
# 9615f881ac154c07ab82a903b9f13763
msgid "If ``autoclobber`` is ``False``, the user will be asked to approve destroying the existing database. ``sys.exit`` is called if the user does not approve."
msgstr ""

#: ../../topics/testing.txt:2197
# b7220c6e60c64573b479337b7ea1ddb0
msgid "If autoclobber is ``True``, the database will be destroyed without consulting the user."
msgstr ""

#: ../../topics/testing.txt:2200
# 963888124f3c4c2e8e8a9a24a7751f2d
msgid "Returns the name of the test database that it created."
msgstr ""

#: ../../topics/testing.txt:2202
# d047a8f1e2c9446e9c89f0d8299508e8
msgid "``create_test_db()`` has the side effect of modifying the value of :setting:`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

#: ../../topics/testing.txt:2208
# 9ab901102dfb40f6b741634c265aba76
msgid "Destroys the database whose name is the value of :setting:`NAME` in :setting:`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

#: ../../topics/testing.txt:2212
# 381b0d3142594a01bf36688c1bba1fea
msgid "The ``verbosity`` argument has the same behavior as for :class:`~django.test.simple.DjangoTestSuiteRunner`."
msgstr ""

