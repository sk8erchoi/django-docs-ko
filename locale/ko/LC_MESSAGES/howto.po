# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-29 22:44\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../howto/apache-auth.txt:3
# e0ac033be9814b5aa9b1da59e8d0039f
msgid "Authenticating against Django's user database from Apache"
msgstr ""

#: ../../howto/apache-auth.txt:7
# 4a78693236824dcab3e263eb4468bdc0
msgid "Support for mod_python has been deprecated within Django. At that time, this method of authentication will no longer be provided by Django. The community is welcome to offer its own alternate solutions using WSGI middleware or other approaches."
msgstr ""

#: ../../howto/apache-auth.txt:12
# 740c2be0356a4ab4a7cb4124d84fcce7
msgid "Since keeping multiple authentication databases in sync is a common problem when dealing with Apache, you can configuring Apache to authenticate against Django's :doc:`authentication system </topics/auth>` directly. For example, you could:"
msgstr ""

#: ../../howto/apache-auth.txt:17
# 075834969aeb4271833ff59cbe79f79b
msgid "Serve static/media files directly from Apache only to authenticated users."
msgstr ""

#: ../../howto/apache-auth.txt:19
# 69dee6c43634432186c1a70b3ac48bbb
msgid "Authenticate access to a Subversion_ repository against Django users with a certain permission."
msgstr ""

#: ../../howto/apache-auth.txt:22
# b4b4482f046e4f308d3becdb0b6d9262
msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

#: ../../howto/apache-auth.txt:28
# cded991ef2a24edc9c6b0155dcc2e18f
msgid "Configuring Apache"
msgstr ""

#: ../../howto/apache-auth.txt:30
# 9655a8e5dd7b4514b8a0de1749fbafd2
msgid "To check against Django's authorization database from a Apache configuration file, you'll need to use mod_python's ``PythonAuthenHandler`` directive along with the standard ``Auth*`` and ``Require`` directives:"
msgstr ""

#: ../../howto/apache-auth.txt:47
# 82bc84c5c67e4ef5bf45f3bf8319f2a8
msgid "If you're using Apache 2.2, you'll need to take a couple extra steps."
msgstr ""

#: ../../howto/apache-auth.txt:49
# 2ede58d2875c49d6b05c48051bcab8b7
msgid "You'll need to ensure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded. These might be compiled statically into Apache, or you might need to use ``LoadModule`` to load them dynamically (as shown in the example at the bottom of this note)."
msgstr ""

#: ../../howto/apache-auth.txt:54
# a92ed20fad5d48a5b950caacf3c70275
msgid "You'll also need to insert configuration directives that prevent Apache from trying to use other authentication modules, as well as specifying the ``AuthUserFile`` directive and pointing it to ``/dev/null``. Depending on which other authentication modules you have loaded, you might need one or more of the following directives:"
msgstr ""

#: ../../howto/apache-auth.txt:71
# c5b051b7fa2f49ce954a0caf97c44721
msgid "A complete configuration, with differences between Apache 2.0 and Apache 2.2 marked in bold, would look something like:"
msgstr ""

#: ../../howto/apache-auth.txt:92
# d0304cb0e25142e2878c16ae9bfcae5c
msgid "By default, the authentication handler will limit access to the ``/example/`` location to users marked as staff members.  You can use a set of ``PythonOption`` directives to modify this behavior:"
msgstr ""

#: ../../howto/apache-auth.txt:97
# 61102089273847f48d5ca4c2fbf53157
msgid "``PythonOption``"
msgstr ""

#: ../../howto/apache-auth.txt:97
# cdfd3283315a4af5a58c9784fba74d8f
msgid "Explanation"
msgstr ""

#: ../../howto/apache-auth.txt:99
# 3776d5fc539541bbac43596add037505
msgid "``DjangoRequireStaffStatus``"
msgstr ""

#: ../../howto/apache-auth.txt:99
# e91bc314111c44b194d8ed395801912a
msgid "If set to ``on`` only \"staff\" users (i.e. those with the ``is_staff`` flag set) will be allowed."
msgstr ""

#: ../../howto/apache-auth.txt:103
# b51a01e7d7b246f8bf733ae00b60c6f0
msgid "Defaults to ``on``."
msgstr ""

#: ../../howto/apache-auth.txt:105
# 0d8d0324c1744e0eafd7a09374335ee6
msgid "``DjangoRequireSuperuserStatus``"
msgstr ""

#: ../../howto/apache-auth.txt:105
# 9282e3c1a672491e97e1b00568335f47
msgid "If set to ``on`` only superusers (i.e. those with the ``is_superuser`` flag set) will be allowed."
msgstr ""

#: ../../howto/apache-auth.txt:109
# 157c736a17ac4f7fbab617dbee476bcc
msgid "Defaults to ``off``."
msgstr ""

#: ../../howto/apache-auth.txt:111
# 65b33f101f0b434daccd994377990082
msgid "``DjangoPermissionName``"
msgstr ""

#: ../../howto/apache-auth.txt:111
# 6630ade723f54f04b497dbc871bac0dd
msgid "The name of a permission to require for access. See :ref:`custom permissions <custom-permissions>` for more information."
msgstr ""

#: ../../howto/apache-auth.txt:116
# 1132442b5cdd4cf6a8e772d22b3feae1
msgid "By default no specific permission will be required."
msgstr ""

#: ../../howto/apache-auth.txt:120
# c2e46e2ebdba46599fb06fb34640fdc9
msgid "Note that sometimes ``SetEnv`` doesn't play well in this mod_python configuration, for reasons unknown. If you're having problems getting mod_python to recognize your ``DJANGO_SETTINGS_MODULE``, you can set it using ``PythonOption`` instead of ``SetEnv``. Therefore, these two Apache directives are equivalent::"
msgstr ""

#: ../../howto/auth-remote-user.txt:3
# 3d7770562ffd4a038785110f89a8e951
msgid "Authentication using ``REMOTE_USER``"
msgstr ""

#: ../../howto/auth-remote-user.txt:7
# 567005d107be4dc7865c0471df771dcc
msgid "This document describes how to make use of external authentication sources (where the Web server sets the ``REMOTE_USER`` environment variable) in your Django applications.  This type of authentication solution is typically seen on intranet sites, with single sign-on solutions such as IIS and Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

#: ../../howto/auth-remote-user.txt:20
# 1ef59defb6a6488d8aa0f6bdf220b508
msgid "When the Web server takes care of authentication it typically sets the ``REMOTE_USER`` environment variable for use in the underlying application.  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META <django.http.HttpRequest.META>` attribute.  Django can be configured to make use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and ``RemoteUserBackend`` classes found in :mod:`django.contrib.auth`."
msgstr ""

#: ../../howto/auth-remote-user.txt:28
# c0c5907d105240c78db747b9374889d8
msgid "Configuration"
msgstr ""

#: ../../howto/auth-remote-user.txt:30
# 2f5029778a9c4c9aafe913604481763a
msgid "First, you must add the :class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the :setting:`MIDDLEWARE_CLASSES` setting **after** the :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

#: ../../howto/auth-remote-user.txt:42
# 4cebfe1595b94682847ea2255efb7db6
msgid "Next, you must replace the :class:`~django.contrib.auth.backends.ModelBackend` with ``RemoteUserBackend`` in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

#: ../../howto/auth-remote-user.txt:49
# 333b723149134ccf8822ea12624b6f33
msgid "With this setup, ``RemoteUserMiddleware`` will detect the username in ``request.META['REMOTE_USER']`` and will authenticate and auto-login that user using the ``RemoteUserBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:54
# c342dda3b1324c30911bd186e92c51fb
msgid "Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will still have all of the same permissions checking that is implemented in ``ModelBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:58
# 79f1c47b7d2047f8ac57d3ee3b2f72cd
msgid "If your authentication mechanism uses a custom HTTP header and not ``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the ``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

#: ../../howto/auth-remote-user.txt:69
# 76d52df4aff34886bcf2341b9448257a
msgid "``RemoteUserBackend``"
msgstr ""

#: ../../howto/auth-remote-user.txt:73
# 8bbfc5f5eb9840d9b5be141b7285ad2d
msgid "If you need more control, you can create your own authentication backend that inherits from ``RemoteUserBackend`` and overrides certain parts:"
msgstr ""

#: ../../howto/auth-remote-user.txt:77
#: ../../howto/custom-management-commands.txt:169
# 566bf672bfd6484b8c4fe76bb9417610
# 317437f0f5524d15a1d4a1ca8d986add
msgid "Attributes"
msgstr ""

#: ../../howto/auth-remote-user.txt:81
# e215b4ad7da34ee4a1b9e992edfa9288
msgid "``True`` or ``False``.  Determines whether or not a :class:`~django.contrib.auth.models.User` object is created if not already in the database.  Defaults to ``True``."
msgstr ""

#: ../../howto/auth-remote-user.txt:86
#: ../../howto/custom-management-commands.txt:215
# c883a91832774a758ca82084c378c283
# ad344b2ac94d45c6b4700c95baa0a20f
msgid "Methods"
msgstr ""

#: ../../howto/auth-remote-user.txt:90
# 88a576ade9844de6bf0a573af8fcd5db
msgid "Performs any cleaning on the ``username`` (e.g. stripping LDAP DN information) prior to using it to get or create a :class:`~django.contrib.auth.models.User` object.  Returns the cleaned username."
msgstr ""

#: ../../howto/auth-remote-user.txt:97
# 81c7a1bbfb4e459b8adf83a49e50d310
msgid "Configures a newly created user.  This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user's groups based on attributes in an LDAP directory. Returns the user object."
msgstr ""

#: ../../howto/custom-file-storage.txt:2
# 8149f2d9997e484b99909754cc48363f
msgid "Writing a custom storage system"
msgstr ""

#: ../../howto/custom-file-storage.txt:6
# 8ff6dc96b03e4c9aaafd38abb1ab9cfe
msgid "If you need to provide custom file storage -- a common example is storing files on some remote system -- you can do so by defining a custom storage class. You'll need to follow these steps:"
msgstr ""

#: ../../howto/custom-file-storage.txt:10
# 5cd1ff066cca4bae8a171175e060f205
msgid "Your custom storage system must be a subclass of ``django.core.files.storage.Storage``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:18
# c14fd88f1e8f4091a9419914ef9eddeb
msgid "Django must be able to instantiate your storage system without any arguments. This means that any settings should be taken from ``django.conf.settings``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:30
# cca3c3e88db54668be7be09de0df458e
msgid "Your storage class must implement the ``_open()`` and ``_save()`` methods, along with any other methods appropriate to your storage class. See below for more on these methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:34
# 971e6fdad0c44473b8f00810ebaeea56
msgid "In addition, if your class provides local file storage, it must override the ``path()`` method."
msgstr ""

#: ../../howto/custom-file-storage.txt:37
# 4f673ba787de438989928833ccfb49fd
msgid "Your custom storage system may override any of the storage methods explained in :doc:`/ref/files/storage`, but you **must** implement the following methods:"
msgstr ""

#: ../../howto/custom-file-storage.txt:40
# fc3c6c94ea354839b2dd1b3409f4a141
msgid ":meth:`Storage.delete`"
msgstr ""

#: ../../howto/custom-file-storage.txt:41
# 9622973981a041e9ac6436aec1afa48e
msgid ":meth:`Storage.exists`"
msgstr ""

#: ../../howto/custom-file-storage.txt:42
# e29b8c1a6fe041f5a90162eb6a203ee2
msgid ":meth:`Storage.listdir`"
msgstr ""

#: ../../howto/custom-file-storage.txt:43
# bb67b99fe73a40469ae992daeae34c5f
msgid ":meth:`Storage.size`"
msgstr ""

#: ../../howto/custom-file-storage.txt:44
# ca844d345fd749259da21a9956f08bcf
msgid ":meth:`Storage.url`"
msgstr ""

#: ../../howto/custom-file-storage.txt:46
# 7a98b75148d64b109e232cd76f737601
msgid "You'll also usually want to use hooks specifically designed for custom storage objects. These are:"
msgstr ""

#: ../../howto/custom-file-storage.txt:50
# 3551db3a674a43738b5266142df6add8
msgid "``_open(name, mode='rb')``"
msgstr ""

#: ../../howto/custom-file-storage.txt:52
# 1769ff0c5c554b5684f67d4b66d0827d
msgid "**Required**."
msgstr ""

#: ../../howto/custom-file-storage.txt:54
# 6f85e407c98941e8bfc09c49f5855241
msgid "Called by ``Storage.open()``, this is the actual mechanism the storage class uses to open the file. This must return a ``File`` object, though in most cases, you'll want to return some subclass here that implements logic specific to the backend storage system."
msgstr ""

#: ../../howto/custom-file-storage.txt:60
# 84f1539e39a9457fa57f4ec307d4a85a
msgid "``_save(name, content)``"
msgstr ""

#: ../../howto/custom-file-storage.txt:62
# 6b0aea9cf51748d68ab0e6b5d69a0283
msgid "Called by ``Storage.save()``. The ``name`` will already have gone through ``get_valid_name()`` and ``get_available_name()``, and the ``content`` will be a ``File`` object itself."
msgstr ""

#: ../../howto/custom-file-storage.txt:66
# 5bd2199831d6491085671b20fa2e0fb7
msgid "Should return the actual name of name of the file saved (usually the ``name`` passed in, but if the storage needs to change the file name return the new name instead)."
msgstr ""

#: ../../howto/custom-file-storage.txt:71
# bc193906b5af41df825648394d52ef23
msgid "``get_valid_name(name)``"
msgstr ""

#: ../../howto/custom-file-storage.txt:73
# d7125c27b9314367b3a1501fdd42436a
msgid "Returns a filename suitable for use with the underlying storage system. The ``name`` argument passed to this method is the original filename sent to the server, after having any path information removed. Override this to customize how non-standard characters are converted to safe filenames."
msgstr ""

#: ../../howto/custom-file-storage.txt:78
# 0bea9ee389154e80ab450cde1c5d939e
msgid "The code provided on ``Storage`` retains only alpha-numeric characters, periods and underscores from the original filename, removing everything else."
msgstr ""

#: ../../howto/custom-file-storage.txt:82
# 2cd68e4a77cf4a8bac6a72e01d71ed7f
msgid "``get_available_name(name)``"
msgstr ""

#: ../../howto/custom-file-storage.txt:84
# 3c6cc2a11ed24d54be0f1e06034014a1
msgid "Returns a filename that is available in the storage mechanism, possibly taking the provided filename into account. The ``name`` argument passed to this method will have already cleaned to a filename valid for the storage system, according to the ``get_valid_name()`` method described above."
msgstr ""

#: ../../howto/custom-file-storage.txt:89
# f599941972ed40c18b41f1637a724947
msgid "The code provided on ``Storage`` simply appends ``\"_1\"``, ``\"_2\"``, etc. to the filename until it finds one that's available in the destination directory."
msgstr ""

#: ../../howto/custom-management-commands.txt:3
# a17e8ed140bf424691c9c931f88b7b82
msgid "Writing custom django-admin commands"
msgstr ""

#: ../../howto/custom-management-commands.txt:5
# e589fc3d386745f1b81bda0ec2f2c449
msgid "Applications can register their own actions with ``manage.py``. For example, you might want to add a ``manage.py`` action for a Django app that you're distributing. In this document, we will be building a custom ``closepoll`` command for the ``polls`` application from the :doc:`tutorial</intro/tutorial01>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:11
# 6e8660ab2a0042e7b90df4a802b31b70
msgid "To do this, just add a ``management/commands`` directory to the application. Django will register a ``manage.py`` command for each Python module in that directory whose name doesn't begin with an underscore. For example::"
msgstr ""

#: ../../howto/custom-management-commands.txt:27
# 1dcc4107a4d5462c84b2e06e45aa390a
msgid "In this example, the ``closepoll`` command will be made available to any project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/custom-management-commands.txt:30
# 4e04f2f15c0e4c4883b1ed67a5bcc319
msgid "The ``_private.py`` module will not be available as a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:32
# ef8b61764d1f44adafb1a0cdf0c0e0c6
msgid "The ``closepoll.py`` module has only one requirement -- it must define a class ``Command`` that extends :class:`BaseCommand` or one of its :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:38
# 9930c6f57ca14a6e9949521ac7a54ef0
msgid "Custom management commands are especially useful for running standalone scripts or for scripts that are periodically executed from the UNIX crontab or from Windows scheduled tasks control panel."
msgstr ""

#: ../../howto/custom-management-commands.txt:42
# 5171ead29d5b4db58b21bb6bdbf0a915
msgid "To implement the command, edit ``polls/management/commands/closepoll.py`` to look like this:"
msgstr ""

#: ../../howto/custom-management-commands.txt:67
# e1d58f14eec54794a09fd5ae1e447a2c
msgid "When you are using management commands and wish to provide console output, you should write to ``self.stdout`` and ``self.stderr``, instead of printing to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes much easier to test your custom command."
msgstr ""

#: ../../howto/custom-management-commands.txt:73
# 7ce6d114411145b2b18a11ad13bed9b6
msgid "The new custom command can be called using ``python manage.py closepoll <poll_id>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:76
# 000fc5ea33c44346a3d8abd6231f4f6c
msgid "The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll.opened`` to ``False`` for each one. If the user referenced any nonexistent polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls.models.Poll`` for this example."
msgstr ""

#: ../../howto/custom-management-commands.txt:82
# 287723d84c5648728bfd072f5f4b0fcd
msgid "The same ``closepoll`` could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

#: ../../howto/custom-management-commands.txt:100
# 9596276af88e4b5ebec53c6981b7f341
msgid "In addition to being able to add custom command line options, all :doc:`management commands</ref/django-admin>` can accept some default options such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

#: ../../howto/custom-management-commands.txt:106
# a139ebc8e3cc47ab9dfb4932b8ba847d
msgid "The :meth:`BaseCommand.execute` method sets the hardcoded ``en-us`` locale because the commands shipped with Django perform several tasks (for example, user-facing content rendering and database population) that require a system-neutral string language (for which we use ``en-us``)."
msgstr ""

#: ../../howto/custom-management-commands.txt:111
# ab249aca036049218cc1022a044b47f9
msgid "If your custom management command uses another locale, you should manually activate and deactivate it in your :meth:`~BaseCommand.handle` or :meth:`~NoArgsCommand.handle_noargs` method using the functions provided by the I18N support code:"
msgstr ""

#: ../../howto/custom-management-commands.txt:141
# 4b2870c12ab0482eb6d92a11f0f64cd7
msgid "Take into account though, that system management commands typically have to be very careful about running in non-uniform locales, so:"
msgstr ""

#: ../../howto/custom-management-commands.txt:144
# a0f86af7091d4a58a644541fceed8a3f
msgid "Make sure the :setting:`USE_I18N` setting is always ``True`` when running the command (this is one good example of the potential problems stemming from a dynamic runtime environment that Django commands avoid offhand by always using a fixed locale)."
msgstr ""

#: ../../howto/custom-management-commands.txt:149
# 5791efa05f69498686abb440f5859470
msgid "Review the code of your command and the code it calls for behavioral differences when locales are changed and evaluate its impact on predictable behavior of your command."
msgstr ""

#: ../../howto/custom-management-commands.txt:154
# a686db12bf134ba5b1eec191df0d484a
msgid "Command objects"
msgstr ""

#: ../../howto/custom-management-commands.txt:158
# 05d3e33545024b7c9a8af1f360f674c8
msgid "The base class from which all management commands ultimately derive."
msgstr ""

#: ../../howto/custom-management-commands.txt:160
# 2952e7ac5fba4fcfb7c61afc8031f52f
msgid "Use this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don't need to change any of that behavior, consider using one of its :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:165
# 8b6af6089ab449c69162e8650d99ab7f
msgid "Subclassing the :class:`BaseCommand` class requires that you implement the :meth:`~BaseCommand.handle` method."
msgstr ""

#: ../../howto/custom-management-commands.txt:171
# a07a5162395e447494e3d7e1ec5f9940
msgid "All attributes can be set in your derived class and can be used in :class:`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:176
# 5342938a9ffe4b29996cf97bd6001ad6
msgid "A string listing the arguments accepted by the command, suitable for use in help messages; e.g., a command which takes a list of application names might set this to '<appname appname ...>'."
msgstr ""

#: ../../howto/custom-management-commands.txt:183
# ce848bb277f54fa3a96c0aeda83bf291
msgid "A boolean indicating whether the command needs to be able to import Django settings; if ``True``, ``execute()`` will verify that this is possible before proceeding. Default value is ``True``."
msgstr ""

#: ../../howto/custom-management-commands.txt:190
# e34cf5b6ee0f421ca14079e1b20b2fb9
msgid "A short description of the command, which will be printed in the help message when the user runs the command ``python manage.py help <command>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:196
# 61865d37bd0b4a24a03ee0d1d5b2ec32
msgid "This is the list of ``optparse`` options which will be fed into the command's ``OptionParser`` for parsing arguments."
msgstr ""

#: ../../howto/custom-management-commands.txt:201
# 000b2aa6dd594248840170d79059cedc
msgid "A boolean indicating whether the command outputs SQL statements; if ``True``, the output will automatically be wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:208
# 51d0708185c84b7a88704c8f08de1bb5
msgid "A boolean; if ``True``, validation of installed models will be performed prior to executing the command. Default value is ``True``. To validate an individual application's models rather than all applications' models, call :meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

#: ../../howto/custom-management-commands.txt:217
# f41cc73d576b4085bc70feda862f2dc5
msgid ":class:`BaseCommand` has a few methods that can be overridden but only the :meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

#: ../../howto/custom-management-commands.txt:222
# 6e5427191c904d4e898b16e54704c5f2
msgid "If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

#: ../../howto/custom-management-commands.txt:234
# 0099d5b6ee5d4024ad0284832b052073
msgid "Return the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version."
msgstr ""

#: ../../howto/custom-management-commands.txt:240
# 21d42c9bcf104e74ade409c431e84b13
msgid "Try to execute this command, performing model validation if needed (as controlled by the attribute :attr:`requires_model_validation`). If the command raises a :class:`CommandError`, intercept it and print it sensibly to stderr."
msgstr ""

#: ../../howto/custom-management-commands.txt:248
# 9941b3c531454b41a74801613d8d2196
msgid "``execute()`` should not be called directly from your code to execute a command. Use :ref:`call_command <call-command>` instead."
msgstr ""

#: ../../howto/custom-management-commands.txt:253
# 8e67f5a206474b2d91c94a20e7a3fecf
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""

#: ../../howto/custom-management-commands.txt:258
# 3f15f57bf9c04c169e0e4ac7b4d5bb9c
msgid "BaseCommand subclasses"
msgstr ""

#: ../../howto/custom-management-commands.txt:262
# 276e8b4f8dbf424d91863640a180b435
msgid "A management command which takes one or more installed application names as arguments, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:265
# f27c18467d8f46db9c281d0a2d9ef49a
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~AppCommand.handle_app`, which will be called once for each application."
msgstr ""

#: ../../howto/custom-management-commands.txt:270
# 13be394cd65a4a778a418e777c988695
msgid "Perform the command's actions for ``app``, which will be the Python module corresponding to an application name given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:276
# c7a2f6f8d7c14a08a1d3c098f3960cb5
msgid "A management command which takes one or more arbitrary arguments (labels) on the command line, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:280
# 375b7ac0106d44739f4b7bbd8d3d282f
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~LabelCommand.handle_label`, which will be called once for each label."
msgstr ""

#: ../../howto/custom-management-commands.txt:285
# f703db9f7dc541f4b36abe41af2cfbf7
msgid "Perform the command's actions for ``label``, which will be the string as given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:290
# f7c66562600645629c59ae73e8dfd170
msgid "A command which takes no arguments on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:292
# c8b532225236404fac7d70dd3c085f39
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` itself is overridden to ensure no arguments are passed to the command."
msgstr ""

#: ../../howto/custom-management-commands.txt:298
# 7934af93e09e42de8f5496e8c7b7800e
msgid "Perform this command's actions"
msgstr ""

#: ../../howto/custom-management-commands.txt:303
# 5aa4f9d2145a4985a687220abe299687
msgid "Command exceptions"
msgstr ""

#: ../../howto/custom-management-commands.txt:307
# 7a0743fed9d14ad2ad64aebd51413364
msgid "Exception class indicating a problem while executing a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:310
# 11d3807d059a4dc68a66e02cfc9f09f5
msgid "If this exception is raised during the execution of a management command, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command."
msgstr ""

#: ../../howto/custom-model-fields.txt:3
# 9388e1bef8fd4927abb0561cb25cc6f2
msgid "Writing custom model fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:8
# ff23a9a9f6e148629b2eced4100a3bbd
msgid "Introduction"
msgstr ""

#: ../../howto/custom-model-fields.txt:10
# 9ec83cce367b4814ae1643763870a097
msgid "The :doc:`model reference </topics/db/models>` documentation explains how to use Django's standard field classes -- :class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, those classes are all you'll need. Sometimes, though, the Django version won't meet your precise requirements, or you'll want to use a field that is entirely different from those shipped with Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:17
# 6385d0622ac14eb19e2e4c5b4dcebb93
msgid "Django's built-in field types don't cover every possible database column type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more obscure column types, such as geographic polygons or even user-created types such as `PostgreSQL custom types`_, you can define your own Django ``Field`` subclasses."
msgstr ""

#: ../../howto/custom-model-fields.txt:24
# d829e85728b84f62a839441c46938ea9
msgid "Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a ``Field`` subclass will help you use your object with your models."
msgstr ""

#: ../../howto/custom-model-fields.txt:29
# 99b50df52db942d1b7ea7e72c206c326
msgid "Our example object"
msgstr ""

#: ../../howto/custom-model-fields.txt:31
# babf754cec8e4d6ca116b8a2e5a7244e
msgid "Creating custom fields requires a bit of attention to detail. To make things easier to follow, we'll use a consistent example throughout this document: wrapping a Python object representing the deal of cards in a hand of Bridge_. Don't worry, you don't have know how to play Bridge to follow this example. You only need to know that 52 cards are dealt out equally to four players, who are traditionally called *north*, *east*, *south* and *west*.  Our class looks something like this::"
msgstr ""

#: ../../howto/custom-model-fields.txt:53
# faa198fb715a4b43aaf534b201811df7
msgid "This is just an ordinary Python class, with nothing Django-specific about it. We'd like to be able to do things like this in our models (we assume the ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

#: ../../howto/custom-model-fields.txt:64
# 8870d2005448498daf2fcb8db4755332
msgid "We assign to and retrieve from the ``hand`` attribute in our model just like any other Python class. The trick is to tell Django how to handle saving and loading such an object."
msgstr ""

#: ../../howto/custom-model-fields.txt:68
# 6b5f39a347644ca19eafb3af4b84444d
msgid "In order to use the ``Hand`` class in our models, we **do not** have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code."
msgstr ""

#: ../../howto/custom-model-fields.txt:73
# 9596c2fe9e9743dda2555c84525e8eb1
msgid "You might only be wanting to take advantage of custom database column types and deal with the data as standard Python types in your models; strings, or floats, for example. This case is similar to our ``Hand`` example and we'll note any differences as we go along."
msgstr ""

#: ../../howto/custom-model-fields.txt:79
# bea7eaba30314d0c8b0c3b1c9ec1b426
msgid "Background theory"
msgstr ""

#: ../../howto/custom-model-fields.txt:82
# 20161deafacc4d5fbc4c2a802d8d63bb
msgid "Database storage"
msgstr ""

#: ../../howto/custom-model-fields.txt:84
# 8e836f795b9c4258891ef46683d441b7
msgid "The simplest way to think of a model field is that it provides a way to take a normal Python object -- string, boolean, ``datetime``, or something more complex like ``Hand`` -- and convert it to and from a format that is useful when dealing with the database (and serialization, but, as we'll see later, that falls out fairly naturally once you have the database side under control)."
msgstr ""

#: ../../howto/custom-model-fields.txt:90
# e1143611edfa44a998c35df3bccb9d4d
msgid "Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types."
msgstr ""

#: ../../howto/custom-model-fields.txt:96
# 13bf76510e2d48da916ae0c4375d8af2
msgid "Normally, you're either writing a Django field to match a particular database column type, or there's a fairly straightforward way to convert your data to, say, a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:100
# dbfb33cfa889462d86e4d0e98271121e
msgid "For our ``Hand`` example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a pre-determined order -- say, all the *north* cards first, then the *east*, *south* and *west* cards. So ``Hand`` objects can be saved to text or character columns in the database."
msgstr ""

#: ../../howto/custom-model-fields.txt:106
# ab20409f2813465992be748313c4cee3
msgid "What does a field class do?"
msgstr ""

#: ../../howto/custom-model-fields.txt:110
# 5a62b61007304d50ac7d5833761d8970
msgid "All of Django's fields (and when we say *fields* in this document, we always mean model fields and not :doc:`form fields </ref/forms/fields>`) are subclasses of :class:`django.db.models.Field`. Most of the information that Django records about a field is common to all fields -- name, help text, uniqueness and so forth. Storing all that information is handled by ``Field``. We'll get into the precise details of what ``Field`` can do later on; for now, suffice it to say that everything descends from ``Field`` and then customizes key pieces of the class behavior."
msgstr ""

#: ../../howto/custom-model-fields.txt:119
# 78ec04c4871241bd83b44d8bde28dec2
msgid "It's important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the ``Meta`` class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren't necessary when you're just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the :doc:`serializer </topics/serialization>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:128
# 40fb9b7d4f9c4fc39f0a34d36d88e59f
msgid "Keep this in mind when creating your own custom fields. The Django ``Field`` subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don't worry -- it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:"
msgstr ""

#: ../../howto/custom-model-fields.txt:136
# 9f70d5130d634a55b52a4d907ce05082
msgid "The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

#: ../../howto/custom-model-fields.txt:141
# ae56420651b347bbb772ebcaed257ae0
msgid "The second class is the ``Field`` subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form."
msgstr ""

#: ../../howto/custom-model-fields.txt:146
# 1c307675586b4a85ae7880bf7494a4d1
msgid "Writing a field subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:148
# 5f44ee8269044135af0e38278593a181
msgid "When planning your :class:`~django.db.models.Field` subclass, first give some thought to which existing :class:`~django.db.models.Field` class your new field is most similar to. Can you subclass an existing Django field and save yourself some work? If not, you should subclass the :class:`~django.db.models.Field` class, from which everything is descended."
msgstr ""

#: ../../howto/custom-model-fields.txt:154
# 5c9d493b44fe45bcbee185773c6b1d69
msgid "Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the :meth:`~django.db.models.Field.__init__` method of :class:`~django.db.models.Field` (or your parent class)."
msgstr ""

#: ../../howto/custom-model-fields.txt:159
# 3b6d6d412c374534a0e5f3b184cb2e1a
msgid "In our example, we'll call our field ``HandField``. (It's a good idea to call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It doesn't behave like any existing field, so we'll subclass directly from :class:`~django.db.models.Field`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:175
# 6b1abe7fa0b34f779560cccdefb8faa7
msgid "Our ``HandField`` accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total."
msgstr ""

#: ../../howto/custom-model-fields.txt:181
# d9b74d403e8f490bbff6181a514868e8
msgid "Many of Django's model fields accept options that they don't do anything with. For example, you can pass both :attr:`~django.db.models.Field.editable` and :attr:`~django.db.models.Field.auto_now` to a :class:`django.db.models.DateField` and it will simply ignore the :attr:`~django.db.models.Field.editable` parameter (:attr:`~django.db.models.Field.auto_now` being set implies ``editable=False``). No error is raised in this case."
msgstr ""

#: ../../howto/custom-model-fields.txt:190
# 7c5226aaed6c4374acbe548e1ed02f7e
msgid "This behavior simplifies the field classes, because they don't need to check for options that aren't necessary. They just pass all the options to the parent class and then don't use them later on. It's up to you whether you want your fields to be more strict about the options they select, or to use the simpler, more permissive behavior of the current fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:198
# 08e4ab95d19641808382cefe5cdec6d9
msgid "The :meth:`~django.db.models.Field.__init__` method takes the following parameters:"
msgstr ""

#: ../../howto/custom-model-fields.txt:201
# 6bcc97aad6c444f99c2f88c1c8aed70d
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

#: ../../howto/custom-model-fields.txt:202
# f7d0a8fbbaea426e97144290938f3cc8
msgid ":attr:`~django.db.models.Field.name`"
msgstr ""

#: ../../howto/custom-model-fields.txt:203
# 6c838d7fd5514c6d966007fc51081d6d
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

#: ../../howto/custom-model-fields.txt:204
# 07bc4c4667fe47d791591ccb0c26a820
msgid ":attr:`~django.db.models.Field.max_length`"
msgstr ""

#: ../../howto/custom-model-fields.txt:205
# 196aa95de7cc4368adc60a26e90cb0b0
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

#: ../../howto/custom-model-fields.txt:206
# 1167ac0eb157464ab0fd1801e6468c34
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

#: ../../howto/custom-model-fields.txt:207
# c4ec7f93823e4160870cdae528552b6a
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

#: ../../howto/custom-model-fields.txt:208
# 9f72a17812154258a415ce9930ae84b2
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

#: ../../howto/custom-model-fields.txt:209
# db33c5535da24674b8fd9cc22137ca3b
msgid ":attr:`~django.db.models.Field.rel`: Used for related fields (like :class:`ForeignKey`). For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:211
# 0c521e0474e04e2f8b72f70fd0c70082
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

#: ../../howto/custom-model-fields.txt:212
# ee02b11156254422879e0830f09e5bed
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

#: ../../howto/custom-model-fields.txt:213
# 6bb874450a004934ab098ab7f08dcfff
msgid ":attr:`~django.db.models.Field.serialize`: If ``False``, the field will not be serialized when the model is passed to Django's :doc:`serializers </topics/serialization>`. Defaults to ``True``."
msgstr ""

#: ../../howto/custom-model-fields.txt:216
# e16bbd778ead4980bb02770bf973f6aa
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

#: ../../howto/custom-model-fields.txt:217
# 29ebfa67b29e4e89a145975525a29119
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

#: ../../howto/custom-model-fields.txt:218
# 7e30e839dfc64a45be9193c9f8995356
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

#: ../../howto/custom-model-fields.txt:219
# a51fcf0f32324a5499477f8b9f66e869
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

#: ../../howto/custom-model-fields.txt:220
# a24c3c6b48f547ad89322f2e2b5ec238
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

#: ../../howto/custom-model-fields.txt:221
# b7ac2f0e4d5e4b8e8783f1a64cfb7f16
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

#: ../../howto/custom-model-fields.txt:222
# 8261721933314f2e81f20cf0f71c28bd
msgid ":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can usually ignore this option."
msgstr ""

#: ../../howto/custom-model-fields.txt:225
# 69b3eaee2b9044b9a9d508528a55223f
msgid ":attr:`~django.db.models.Field.auto_created`: True if the field was automatically created, as for the `OneToOneField` used by model inheritance. For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:229
# e972aece685641e9bc486ff0cf3fc9e9
msgid "All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the :doc:`field documentation </ref/models/fields>` for examples and details."
msgstr ""

#: ../../howto/custom-model-fields.txt:234
# bc95880b9a39494d9f7a50da858b323e
msgid "The ``SubfieldBase`` metaclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:238
# 838013669e084974b9ca5ade52fa0758
msgid "As we indicated in the introduction_, field subclasses are often needed for two reasons: either to take advantage of a custom database column type, or to handle complex Python types. Obviously, a combination of the two is also possible. If you're only working with custom database column types and your model fields appear in Python as standard Python types direct from the database backend, you don't need to worry about this section."
msgstr ""

#: ../../howto/custom-model-fields.txt:245
# 7626b1542c2848079e2dc52c732bcd7c
msgid "If you're handling custom Python types, such as our ``Hand`` class, we need to make sure that when Django initializes an instance of our model and assigns a database value to our custom field attribute, we convert that value into the appropriate Python object. The details of how this happens internally are a little complex, but the code you need to write in your ``Field`` class is simple: make sure your field subclass uses a special metaclass:"
msgstr ""

#: ../../howto/custom-model-fields.txt:252
#: ../../howto/custom-model-fields.txt:346
#: ../../howto/custom-model-fields.txt:470
#: ../../howto/custom-model-fields.txt:653
# e6bf29ec4fcb492da98fca1027e3e15a
# a598b0f84aa4453a82532c201db7711c
# 7f01599122c54fdcb660d5a9680a7a5d
# 5b34cb92c30143feae1ee95e98415164
msgid "For example::"
msgstr ""

#: ../../howto/custom-model-fields.txt:263
# c32f4512b7f341a885cc456dcf83eb51
msgid "This ensures that the :meth:`.to_python` method, documented below, will always be called when the attribute is initialized."
msgstr ""

#: ../../howto/custom-model-fields.txt:267
# d624981c9c7749e388fde7ef044eee74
msgid "ModelForms and custom fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:269
# 5935f5079817492099ada814cd753284
msgid "If you use :class:`~django.db.models.SubfieldBase`, :meth:`.to_python` will be called every time an instance of the field is assigned a value. This means that whenever a value may be assigned to the field, you need to ensure that it will be of the correct datatype, or that you handle any exceptions."
msgstr ""

#: ../../howto/custom-model-fields.txt:275
# 80b2abe834e740479794fad27b5b61bf
msgid "This is especially important if you use :doc:`ModelForms </topics/forms/modelforms>`. When saving a ModelForm, Django will use form values to instantiate model instances. However, if the cleaned form data can't be used as valid input to the field, the normal form validation process will break."
msgstr ""

#: ../../howto/custom-model-fields.txt:281
# c897c6f500ba41fc9cb5e39e9340bf88
msgid "Therefore, you must ensure that the form field used to represent your custom field performs whatever input validation and data cleaning is necessary to convert user-provided form input into a `to_python()`-compatible model field value. This may require writing a custom form field, and/or implementing the :meth:`.formfield` method on your field to return a form field class whose `to_python()` returns the correct datatype."
msgstr ""

#: ../../howto/custom-model-fields.txt:290
# e7c59e5a419e47489fa47553aab08a0e
msgid "Documenting your custom field"
msgstr ""

#: ../../howto/custom-model-fields.txt:294
# 79666ae6f329428abe4a5bc14b6c1cb1
msgid "As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the :doc:`django.contrib.admindocs </ref/contrib/admin/admindocs>` application. To do this simply provide descriptive text in a ``description`` class attribute of your custom field. In the above example, the description displayed by the ``admindocs`` application for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

#: ../../howto/custom-model-fields.txt:304
# 1acee84ab28f480aa748567acc66233c
msgid "Useful methods"
msgstr ""

#: ../../howto/custom-model-fields.txt:306
# a662596dd52d4ab79091ab7737e1ffc5
msgid "Once you've created your :class:`~django.db.models.Field` subclass and set up the ``__metaclass__``, you might consider overriding a few standard methods, depending on your field's behavior. The list of methods below is in approximately decreasing order of importance, so start from the top."
msgstr ""

#: ../../howto/custom-model-fields.txt:312
# cd2333b5638845f09e27f1ad5eb5c3e4
msgid "Custom database types"
msgstr ""

#: ../../howto/custom-model-fields.txt:319
# c1dbc303a6584506bd14962f88f14ece
msgid "Returns the database column data type for the :class:`~django.db.models.Field`, taking into account the connection object, and the settings associated with it."
msgstr ""

#: ../../howto/custom-model-fields.txt:322
# 3329623444ee4f4e88cf184e830ef58f
msgid "Say you've created a PostgreSQL custom type called ``mytype``. You can use this field with Django by subclassing ``Field`` and implementing the :meth:`.db_type` method, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:332
# 46cc8720c5954705bb18f5c2f9f6a504
msgid "Once you have ``MytypeField``, you can use it in any model, just like any other ``Field`` type::"
msgstr ""

#: ../../howto/custom-model-fields.txt:340
# f792f2b0f98a4fcf9ac635eb31b2083e
msgid "If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called ``timestamp``, while the same column in MySQL is called ``datetime``. The simplest way to handle this in a :meth:`.db_type` method is to check the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

#: ../../howto/custom-model-fields.txt:355
# 91e06903133a40e2b7bd5731ace4d2ff
msgid "The :meth:`.db_type` method is only called by Django when the framework constructs the ``CREATE TABLE`` statements for your application -- that is, when you first create your tables. It's not called at any other time, so it can afford to execute slightly complex code, such as the ``connection.settings_dict`` check in the above example."
msgstr ""

#: ../../howto/custom-model-fields.txt:361
# e63e2aa02c44434aa1819f9e3d0b88a7
msgid "Some database column types accept parameters, such as ``CHAR(25)``, where the parameter ``25`` represents the maximum column length. In cases like these, it's more flexible if the parameter is specified in the model rather than being hard-coded in the ``db_type()`` method. For example, it wouldn't make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

#: ../../howto/custom-model-fields.txt:377
# 66f846d467544a2c9daee375ca26c081
msgid "The better way of doing this would be to make the parameter specifiable at run time -- i.e., when the class is instantiated. To do that, just implement :meth:`django.db.models.Field.__init__`, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:395
# 097c5ef7466e4b3ea1a7f9ed3b03d63b
msgid "Finally, if your column requires truly complex SQL setup, return ``None`` from :meth:`.db_type`. This will cause Django's SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way."
msgstr ""

#: ../../howto/custom-model-fields.txt:402
# 3b729bc18fa34360ba6e3e8b3c7facc1
msgid "Converting database values to Python objects"
msgstr ""

#: ../../howto/custom-model-fields.txt:406
# 44eaadd40baa453ca0631bed54479c31
msgid "Converts a value as returned by your database (or a serializer) to a Python object."
msgstr ""

#: ../../howto/custom-model-fields.txt:409
# be5eb34d9d4543f0a5a084b07a7baabf
msgid "The default implementation simply returns ``value``, for the common case in which the database backend already returns data in the correct format (as a Python string, for example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:413
# 1b72a2eb0b9244d6ae37240ed088c16b
msgid "If your custom :class:`~django.db.models.Field` class deals with data structures that are more complex than strings, dates, integers or floats, then you'll need to override this method. As a general rule, the method should deal gracefully with any of the following arguments:"
msgstr ""

#: ../../howto/custom-model-fields.txt:418
# c94f92d97a0e40f9a7ac16a9a0de021c
msgid "An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:420
# 73dbf76d287949a58051919a6beb0210
msgid "A string (e.g., from a deserializer)."
msgstr ""

#: ../../howto/custom-model-fields.txt:422
# 562887acada34151a6d5f41e7afb4fc1
msgid "Whatever the database returns for the column type you're using."
msgstr ""

#: ../../howto/custom-model-fields.txt:424
# b608bae3acf5432bb95a8db7a4b56c6b
msgid "In our ``HandField`` class, we're storing the data as a VARCHAR field in the database, so we need to be able to process strings and ``Hand`` instances in :meth:`.to_python`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:443
# ff18053cfe7e4caeb422300a764044b0
msgid "Notice that we always return a ``Hand`` instance from this method. That's the Python object type we want to store in the model's attribute."
msgstr ""

#: ../../howto/custom-model-fields.txt:446
# 272d42c9987d4649a1b4dec131495f4c
msgid "**Remember:** If your custom field needs the :meth:`to_python` method to be called when it is created, you should be using `The SubfieldBase metaclass`_ mentioned earlier. Otherwise :meth:`.to_python` won't be called automatically."
msgstr ""

#: ../../howto/custom-model-fields.txt:452
# 47429e2b9eb04d28bc88b477d8dc3a75
msgid "Converting Python objects to query values"
msgstr ""

#: ../../howto/custom-model-fields.txt:459
# 146015a089ee45d6afd138433eb9021b
msgid "This is the reverse of :meth:`.to_python` when working with the database backends (as opposed to serialization). The ``value`` parameter is the current value of the model's attribute (a field has no reference to its containing model, so it cannot retrieve the value itself), and the method should return data in a format that has been prepared for use as a parameter in a query."
msgstr ""

#: ../../howto/custom-model-fields.txt:466
# 4cb43261b20a4a9f9faf99443667cfaa
msgid "This conversion should *not* include any database-specific conversions. If database-specific conversions are required, they should be made in the call to :meth:`.get_db_prep_value`."
msgstr ""

#: ../../howto/custom-model-fields.txt:480
# f1e39f90687e44f0a5295e94939a5328
msgid "Converting query values to database values"
msgstr ""

#: ../../howto/custom-model-fields.txt:487
# 08d9d6b5ec214b8797be7939a457868f
msgid "Some data types (for example, dates) need to be in a specific format before they can be used by a database backend. :meth:`.get_db_prep_value` is the method where those conversions should be made. The specific connection that will be used for the query is passed as the ``connection`` parameter. This allows you to use backend-specific conversion logic if it is required."
msgstr ""

#: ../../howto/custom-model-fields.txt:494
# bf85706d29874b31b66898b7d9602cde
msgid "The ``prepared`` argument describes whether or not the value has already been passed through :meth:`.get_prep_value` conversions. When ``prepared`` is False, the default implementation of :meth:`.get_db_prep_value` will call :meth:`.get_prep_value` to do initial data conversions before performing any database-specific processing."
msgstr ""

#: ../../howto/custom-model-fields.txt:506
# 7ab11d61de5d4be4ae03379ec8bb387a
msgid "Same as the above, but called when the Field value must be *saved* to the database. As the default implementation just calls :meth:`.get_db_prep_value`, you shouldn't need to implement this method unless your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters (which is implemented by :meth:`.get_db_prep_value`)."
msgstr ""

#: ../../howto/custom-model-fields.txt:514
# cb07d2faf5ef40d59747df04a1de1faa
msgid "Preprocessing values before saving"
msgstr ""

#: ../../howto/custom-model-fields.txt:518
# ca6f1c2efd2f4e4e8cd563b9b475e2c6
msgid "This method is called just prior to :meth:`.get_db_prep_save` and should return the value of the appropriate attribute from ``model_instance`` for this field. The attribute name is in ``self.attname`` (this is set up by :class:`~django.db.models.Field`). If the model is being saved to the database for the first time, the ``add`` parameter will be ``True``, otherwise it will be ``False``."
msgstr ""

#: ../../howto/custom-model-fields.txt:525
# c879c9a83bb64567b52cc26afd1f8329
msgid "You only need to override this method if you want to preprocess the value somehow, just before saving. For example, Django's :class:`~django.db.models.DateTimeField` uses this method to set the attribute correctly in the case of :attr:`~django.db.models.Field.auto_now` or :attr:`~django.db.models.Field.auto_now_add`."
msgstr ""

#: ../../howto/custom-model-fields.txt:531
# cf5f3d1377174cc28199af932b4a5c9f
msgid "If you do override this method, you must return the value of the attribute at the end. You should also update the model's attribute if you make any changes to the value so that code holding references to the model will always see the correct value."
msgstr ""

#: ../../howto/custom-model-fields.txt:537
# bb9e883f3a834a11a1f2ee2cab74c6f6
msgid "Preparing values for use in database lookups"
msgstr ""

#: ../../howto/custom-model-fields.txt:539
# 3092f46becf0409495619c7e7d14ec6d
msgid "As with value conversions, preparing a value for database lookups is a two phase process."
msgstr ""

#: ../../howto/custom-model-fields.txt:547
# f3193fb799974a3fa1d01d3f9c5ae1f5
msgid ":meth:`.get_prep_lookup` performs the first phase of lookup preparation, performing generic data validity checks"
msgstr ""

#: ../../howto/custom-model-fields.txt:550
# fad48bd511f045d085dd7f7456ff221d
msgid "Prepares the ``value`` for passing to the database when used in a lookup (a ``WHERE`` constraint in SQL). The ``lookup_type`` will be one of the valid Django filter lookups: ``exact``, ``iexact``, ``contains``, ``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, ``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

#: ../../howto/custom-model-fields.txt:557
# 50505d8410304287ba4d9c708a543e99
msgid "Your method must be prepared to handle all of these ``lookup_type`` values and should raise either a ``ValueError`` if the ``value`` is of the wrong sort (a list when you were expecting an object, for example) or a ``TypeError`` if your field does not support that type of lookup. For many fields, you can get by with handling the lookup types that need special handling for your field and pass the rest to the :meth:`.get_db_prep_lookup` method of the parent class."
msgstr ""

#: ../../howto/custom-model-fields.txt:564
# 0a92a86f437d4409824863ccfc23ff5c
msgid "If you needed to implement ``get_db_prep_save()``, you will usually need to implement ``get_prep_lookup()``. If you don't, ``get_prep_value`` will be called by the default implementation, to manage ``exact``, ``gt``, ``gte``, ``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

#: ../../howto/custom-model-fields.txt:569
# d643b5af8a2940aa849c5dd3e81e6cad
msgid "You may also want to implement this method to limit the lookup types that could be used with your custom field type."
msgstr ""

#: ../../howto/custom-model-fields.txt:572
# ed035e0a6a604d818dbb83737e4a50b3
msgid "Note that, for ``range`` and ``in`` lookups, ``get_prep_lookup`` will receive a list of objects (presumably of the right type) and will need to convert them to a list of things of the right type for passing to the database. Most of the time, you can reuse ``get_prep_value()``, or at least factor out some common pieces."
msgstr ""

#: ../../howto/custom-model-fields.txt:578
# 889f1d855b9f48bfbe39387d1f7cfc5b
msgid "For example, the following code implements ``get_prep_lookup`` to limit the accepted lookup types to ``exact`` and ``in``::"
msgstr ""

#: ../../howto/custom-model-fields.txt:598
# 92be2c41650a457e9e556722d9550424
msgid "Performs any database-specific data conversions required by a lookup. As with :meth:`.get_db_prep_value`, the specific connection that will be used for the query is passed as the ``connection`` parameter. The ``prepared`` argument describes whether the value has already been prepared with :meth:`.get_prep_lookup`."
msgstr ""

#: ../../howto/custom-model-fields.txt:605
# 32fbb85c0cc843b8a6e3669d3f95fd9a
msgid "Specifying the form field for a model field"
msgstr ""

#: ../../howto/custom-model-fields.txt:609
# 7680597fb5ef4e479f05b08dea55ab5c
msgid "Returns the default form field to use when this field is displayed in a model. This method is called by the :class:`~django.forms.ModelForm` helper."
msgstr ""

#: ../../howto/custom-model-fields.txt:612
# 9ee3295773b748f7a513ea5cb3d9439f
msgid "All of the ``kwargs`` dictionary is passed directly to the form field's :meth:`~django.forms.Field__init__` method. Normally, all you need to do is set up a good default for the ``form_class`` argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the :doc:`forms documentation </topics/forms/index>` for information about this, and take a look at the code in :mod:`django.contrib.localflavor` for some examples of custom widgets."
msgstr ""

#: ../../howto/custom-model-fields.txt:620
# 29027b01c6c1460584b97140f1b58f7d
msgid "Continuing our ongoing example, we can write the :meth:`.formfield` method as::"
msgstr ""

#: ../../howto/custom-model-fields.txt:632
# 7c2d1b6f09174ff4baa9f20115438c85
msgid "This assumes we've imported a ``MyFormField`` field class (which has its own default widget). This document doesn't cover the details of writing custom form fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:640
# 9c61469363044bac99d4c6ce7c9fbe1f
msgid "Emulating built-in field types"
msgstr ""

#: ../../howto/custom-model-fields.txt:644
# b58e7c7cb1ad461caa7325532301b85a
msgid "Returns a string giving the name of the :class:`~django.db.models.Field` subclass we are emulating at the database level. This is used to determine the type of database column for simple cases."
msgstr ""

#: ../../howto/custom-model-fields.txt:648
# 55af59d7c1a8451bb07978d15828eeb2
msgid "If you have created a :meth:`.db_type` method, you don't need to worry about :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field's logic to create the right column."
msgstr ""

#: ../../howto/custom-model-fields.txt:661
# 5171651e4db94f5fbda07013eb4f0c4a
msgid "No matter which database backend we are using, this will mean that ``syncdb`` and other SQL commands create the right column type for storing a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:664
# 384413ebb4334c3594c1ea8fb2cbb989
msgid "If :meth:`.get_internal_type` returns a string that is not known to Django for the database backend you are using -- that is, it doesn't appear in ``django.db.backends.<db_name>.creation.DATA_TYPES`` -- the string will still be used by the serializer, but the default :meth:`.db_type` method will return ``None``. See the documentation of :meth:`.db_type` for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you're ever going to be using the serializer output in some other place, outside of Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:674
# 0f74a1c0b8884a3caa6cdc113e552d1b
msgid "Converting field data for serialization"
msgstr ""

#: ../../howto/custom-model-fields.txt:678
# 7f733449ac444fb7aceb5f9a3c4d75b6
msgid "This method is used by the serializers to convert the field into a string for output. Calling :meth:`Field._get_val_from_obj(obj)` is the best way to get the value to serialize. For example, since our ``HandField`` uses strings for its data storage anyway, we can reuse some existing conversion code::"
msgstr ""

#: ../../howto/custom-model-fields.txt:691
# e50c2d92231348228af04e71c3b88092
msgid "Some general advice"
msgstr ""

#: ../../howto/custom-model-fields.txt:693
# 534e8a84f6974f94958ccf895dc6e108
msgid "Writing a custom field can be a tricky process, particularly if you're doing complex conversions between your Python types and your database and serialization formats. Here are a couple of tips to make things go more smoothly:"
msgstr ""

#: ../../howto/custom-model-fields.txt:698
# 0b36f6a81b564b7e97cf5c8ed44967ef
msgid "Look at the existing Django fields (in :file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a field that's similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch."
msgstr ""

#: ../../howto/custom-model-fields.txt:703
# 8d33508f6f854241b2b0122b9b247702
msgid "Put a :meth:`__str__` or :meth:`__unicode__` method on the class you're wrapping up as a field. There are a lot of places where the default behavior of the field code is to call :func:`~django.utils.encoding.force_unicode` on the value. (In our examples in this document, ``value`` would be a ``Hand`` instance, not a ``HandField``). So if your :meth:`__unicode__` method automatically converts to the string form of your Python object, you can save yourself a lot of work."
msgstr ""

#: ../../howto/custom-model-fields.txt:714
# 0d5417a29d6d406ea45cac51259f2c6d
msgid "Writing a ``FileField`` subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:716
# 92c2a9f4297a46b98d18e61769efe265
msgid "In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by ``FileField``, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file."
msgstr ""

#: ../../howto/custom-model-fields.txt:722
# 28ce02c8a2cb4968a7375041f8572583
msgid "Django provides a ``File`` class, which is used as a proxy to the file's contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at ``django.db.models.fields.files``, and its default behavior is explained in the :doc:`file documentation </ref/files/file>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:728
# 2354e95733d54bcd9093659e90a6fa4d
msgid "Once a subclass of ``File`` is created, the new ``FileField`` subclass must be told to use it. To do so, simply assign the new ``File`` subclass to the special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

#: ../../howto/custom-model-fields.txt:733
# ca989f07a6af402693b3262538ae0813
msgid "A few suggestions"
msgstr ""

#: ../../howto/custom-model-fields.txt:735
# 30e5fc746d53414cb897c430318e9b07
msgid "In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field's code."
msgstr ""

#: ../../howto/custom-model-fields.txt:738
# 31fb910d35c546348ca61ee42477c247
msgid "The source for Django's own ``ImageField`` (in ``django/db/models/fields/files.py``) is a great example of how to subclass ``FileField`` to support a particular type of file, as it incorporates all of the techniques described above."
msgstr ""

#: ../../howto/custom-model-fields.txt:743
# f832af1c7226415c8f5c273ea470b725
msgid "Cache file attributes wherever possible. Since files may be stored in remote storage systems, retrieving them may cost extra time, or even money, that isn't always necessary. Once a file is retrieved to obtain some data about its content, cache as much of that data as possible to reduce the number of times the file must be retrieved on subsequent calls for that information."
msgstr ""

#: ../../howto/custom-template-tags.txt:3
# aa157c538daa434daa1f51d5235e72fc
msgid "Custom template tags and filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:5
# e9385dbd5fd24804a1e7b100be697c9f
msgid "Django's template system comes with a wide variety of :doc:`built-in tags and filters </ref/templates/builtins>` designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:14
# 991cc6e961b4404c86721efd5124bc30
msgid "Code layout"
msgstr ""

#: ../../howto/custom-template-tags.txt:16
# 1a9aae0e3f1742cea97a5551ce23e292
msgid "Custom template tags and filters must live inside a Django app. If they relate to an existing app it makes sense to bundle them there; otherwise, you should create a new app to hold them."
msgstr ""

#: ../../howto/custom-template-tags.txt:20
# 966d2154e19c40a089249e1bcf69ac4d
msgid "The app should contain a ``templatetags`` directory, at the same level as ``models.py``, ``views.py``, etc. If this doesn't already exist, create it - don't forget the ``__init__.py`` file to ensure the directory is treated as a Python package."
msgstr ""

#: ../../howto/custom-template-tags.txt:25
# 5eb05186717f436a95febd87b47e5642
msgid "Your custom tags and filters will live in a module inside the ``templatetags`` directory. The name of the module file is the name you'll use to load the tags later, so be careful to pick a name that won't clash with custom tags and filters in another app."
msgstr ""

#: ../../howto/custom-template-tags.txt:30
# 8fc44b40c14043a291f7db7319172cbf
msgid "For example, if your custom tags/filters are in a file called ``poll_extras.py``, your app layout might look like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:40
# c6441a4360db4ce1b77ce7f1c15968e9
msgid "And in your template you would use the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:46
# 0a121111173f493aa2da1ec93bbe6590
msgid "The app that contains the custom tags must be in :setting:`INSTALLED_APPS` in order for the :ttag:`{% load %}<load>` tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation."
msgstr ""

#: ../../howto/custom-template-tags.txt:51
# 9e9ba814ecee41cd9ee2dc4a63a57cea
msgid "There's no limit on how many modules you put in the ``templatetags`` package. Just keep in mind that a :ttag:`{% load %}<load>` statement will load tags/filters for the given Python module name, not the name of the app."
msgstr ""

#: ../../howto/custom-template-tags.txt:55
# 64197fbd3cf04952bae6175b6b7a4ca0
msgid "To be a valid tag library, the module must contain a module-level variable named ``register`` that is a ``template.Library`` instance, in which all the tags and filters are registered. So, near the top of your module, put the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:69
# 8602e288d57f44ea992c99cc9bd4eaa7
msgid "For a ton of examples, read the source code for Django's default filters and tags. They're in ``django/template/defaultfilters.py`` and ``django/template/defaulttags.py``, respectively."
msgstr ""

#: ../../howto/custom-template-tags.txt:73
# 78d7929ed6d04d7791b63d34bae1b470
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

#: ../../howto/custom-template-tags.txt:76
# ee98a068036b42c39e32426c24baa73a
msgid "Writing custom template filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:78
# 24d1c139dbe34af185e466373b4c3e19
msgid "Custom filters are just Python functions that take one or two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:80
# 17c66e5b3f6a4fa691430584cd6c2670
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:81
# 5decf6b6f8e44a39babbf7d73fb74a6d
msgid "The value of the argument -- this can have a default value, or be left out altogether."
msgstr ""

#: ../../howto/custom-template-tags.txt:84
# 4add8d9c9b6b43f3a4d5b63199f4f605
msgid "For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

#: ../../howto/custom-template-tags.txt:87
# 2bc042ec7a5c4bfea738f6493b769efc
msgid "Filter functions should always return something. They shouldn't raise exceptions. They should fail silently. In case of error, they should return either the original input or an empty string -- whichever makes more sense."
msgstr ""

#: ../../howto/custom-template-tags.txt:91
# 171d001046cc49a98052023a8c32204e
msgid "Here's an example filter definition:"
msgstr ""

#: ../../howto/custom-template-tags.txt:99
# d9ac5369426c4d6bba25622954434c3e
msgid "And here's an example of how that filter would be used:"
msgstr ""

#: ../../howto/custom-template-tags.txt:105
# f927f87f7bd04286a28b01a91f611b2b
msgid "Most filters don't take arguments. In this case, just leave the argument out of your function. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:115
# 7f94e4d1ceb04e0f9d8e17388610f98b
msgid "Registering custom filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:117
# 4a4c365c4ca84212b8a04be6e898c7b8
msgid "Once you've written your filter definition, you need to register it with your ``Library`` instance, to make it available to Django's template language:"
msgstr ""

#: ../../howto/custom-template-tags.txt:125
# 40cf2717d1984613bf292e6dc4be9547
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:127
# 65b056d3ec0e4cff87e14d501f7db105
msgid "The name of the filter -- a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:128
#: ../../howto/custom-template-tags.txt:637
# f273393babdf49e7a2494efb709ee242
# 6712989aad364726a8d38f404fa8f324
msgid "The compilation function -- a Python function (not the name of the function as a string)."
msgstr ""

#: ../../howto/custom-template-tags.txt:131
# 0b35e13c25894753963de4adfda5d286
msgid "You can use ``register.filter()`` as a decorator instead:"
msgstr ""

#: ../../howto/custom-template-tags.txt:143
# bf19d75594dc47548cb64b011988aed9
msgid "If you leave off the ``name`` argument, as in the second example above, Django will use the function's name as the filter name."
msgstr ""

#: ../../howto/custom-template-tags.txt:146
# af26644476b848e39f1aa6acbbfaa2a2
msgid "Finally, ``register.filter()`` also accepts two keyword arguments, ``is_safe`` and ``needs_autoescape``, described in :ref:`filters and auto-escaping <filters-auto-escaping>` below."
msgstr ""

#: ../../howto/custom-template-tags.txt:151
# 88f7f328327644c8a4e171e6b4c54f9d
msgid "Template filters that expect strings"
msgstr ""

#: ../../howto/custom-template-tags.txt:153
# 156829aa278c4d4faa6047506d391c08
msgid "If you're writing a template filter that only expects a string as the first argument, you should use the decorator ``stringfilter``. This will convert an object to its string value before being passed to your function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:169
# e5cb78b625034ec985fe5c054be000ab
msgid "This way, you'll be able to pass, say, an integer to this filter, and it won't cause an ``AttributeError`` (because integers don't have ``lower()`` methods)."
msgstr ""

#: ../../howto/custom-template-tags.txt:176
# 0b9ee7268f6b4215b43817bc3829b92c
msgid "Filters and auto-escaping"
msgstr ""

#: ../../howto/custom-template-tags.txt:178
# 01772afde3134900a5d6c92922c8378a
msgid "When writing a custom filter, give some thought to how the filter will interact with Django's auto-escaping behavior. Note that three types of strings can be passed around inside the template code:"
msgstr ""

#: ../../howto/custom-template-tags.txt:182
# 7d4635b116144b80a16eee31b754de25
msgid "**Raw strings** are the native Python ``str`` or ``unicode`` types. On output, they're escaped if auto-escaping is in effect and presented unchanged, otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:186
# f9a7a863873f4a61b6c84a8ae097683b
msgid "**Safe strings** are strings that have been marked safe from further escaping at output time. Any necessary escaping has already been done. They're commonly used for output that contains raw HTML that is intended to be interpreted as-is on the client side."
msgstr ""

#: ../../howto/custom-template-tags.txt:191
# 5da63c3bc89043eabf3493ce14e78534
msgid "Internally, these strings are of type ``SafeString`` or ``SafeUnicode``. They share a common base class of ``SafeData``, so you can test for them using code like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:201
# 8973bf9411ff4cd597caa021005e59b7
msgid "**Strings marked as \"needing escaping\"** are *always* escaped on output, regardless of whether they are in an :ttag:`autoescape` block or not. These strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

#: ../../howto/custom-template-tags.txt:206
# 7616da62f3184066b04c1fae413a7e3d
msgid "Internally, these strings are of type ``EscapeString`` or ``EscapeUnicode``. Generally you don't have to worry about these; they exist for the implementation of the :tfilter:`escape` filter."
msgstr ""

#: ../../howto/custom-template-tags.txt:210
# ddd436076ae441298bb703c2ef089853
msgid "Template filter code falls into one of two situations:"
msgstr ""

#: ../../howto/custom-template-tags.txt:212
# 750e78057574419d94b23b5b2205b91b
msgid "Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, ``'``, ``\"`` or ``&``) into the result that were not already present. In this case, you can let Django take care of all the auto-escaping handling for you. All you need to do is set the ``is_safe`` flag to ``True`` when you register your filter function, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:224
# 35b2df31ed46429f8a37321e73ed87f7
msgid "This flag tells Django that if a \"safe\" string is passed into your filter, the result will still be \"safe\" and if a non-safe string is passed in, Django will automatically escape it, if necessary."
msgstr ""

#: ../../howto/custom-template-tags.txt:228
# 34a7562ef514400f86dc3ac6764bebf2
msgid "You can think of this as meaning \"this filter is safe -- it doesn't introduce any possibility of unsafe HTML.\""
msgstr ""

#: ../../howto/custom-template-tags.txt:231
# aa06566558964a4bbb4230af3f0c1c9b
msgid "The reason ``is_safe`` is necessary is because there are plenty of normal string operations that will turn a ``SafeData`` object back into a normal ``str`` or ``unicode`` object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed."
msgstr ""

#: ../../howto/custom-template-tags.txt:237
# 61147e6e1a004fd4bc24017529df9fc9
msgid "For example, suppose you have a filter that adds the string ``xx`` to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with ``is_safe``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:248
# c557a4e87b654e6f81f3bee8b50e5db2
msgid "When this filter is used in a template where auto-escaping is enabled, Django will escape the output whenever the input is not already marked as \"safe\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:252
# 834814e72f54483aaf87eabbe3f35807
msgid "By default, ``is_safe`` is ``False``, and you can omit it from any filters where it isn't required."
msgstr ""

#: ../../howto/custom-template-tags.txt:255
# 732bd0011a274484ba4333a6615c8f19
msgid "Be careful when deciding if your filter really does leave safe strings as safe. If you're *removing* characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a ``>`` from the input might turn ``<a>`` into ``<a``, which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity and thus needs further escaping. Most cases won't be nearly this tricky, but keep an eye out for any problems like that when reviewing your code."
msgstr ""

#: ../../howto/custom-template-tags.txt:265
# 90342cca98904004b090dd5348c54580
msgid "Marking a filter ``is_safe`` will coerce the filter's return value to a string.  If your filter should return a boolean or other non-string value, marking it ``is_safe`` will probably have unintended consequences (such as converting a boolean False to the string 'False')."
msgstr ""

#: ../../howto/custom-template-tags.txt:271
# d47399ca75f4460d942d9fd165dc38cd
msgid "Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you're introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn't escaped further, so you'll need to handle the input yourself."
msgstr ""

#: ../../howto/custom-template-tags.txt:277
# 7f0836f7be884f3cafd1626d8144af84
msgid "To mark the output as a safe string, use :func:`django.utils.safestring.mark_safe`."
msgstr ""

#: ../../howto/custom-template-tags.txt:280
# 29edcc4c4d964d8baedb4f9534329a99
msgid "Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really *is* safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters than can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors."
msgstr ""

#: ../../howto/custom-template-tags.txt:286
# 0e7495825d9e4e6e9690634f11a14e8d
msgid "In order for your filter to know the current auto-escaping state, set the ``needs_autoescape`` flag to ``True`` when you register your filter function. (If you don't specify this flag, it defaults to ``False``). This flag tells Django that your filter function wants to be passed an extra keyword argument, called ``autoescape``, that is ``True`` if auto-escaping is in effect and ``False`` otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:293
# e1bdaef87fcd4460903b4c52ac9e8882
msgid "For example, let's write a filter that emphasizes the first character of a string:"
msgstr ""

#: ../../howto/custom-template-tags.txt:311
# c96b834fb6f04d7bb46b510bb6356e20
msgid "The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use ``autoescape`` to decide whether the input data needs to be passed through ``django.utils.html.conditional_escape`` or not. (In the latter case, we just use the identity function as the \"escape\" function.) The ``conditional_escape()`` function is like ``escape()`` except it only escapes input that is **not** a ``SafeData`` instance. If a ``SafeData`` instance is passed to ``conditional_escape()``, the data is returned unchanged."
msgstr ""

#: ../../howto/custom-template-tags.txt:321
# 1fc065af907b42a6a333d29acab1a55d
msgid "Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping."
msgstr ""

#: ../../howto/custom-template-tags.txt:325
# 34ad2b081e0c47fb885f3cccf1dbf161
msgid "There's no need to worry about the ``is_safe`` flag in this case (although including it wouldn't hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the ``is_safe`` flag won't change anything either way."
msgstr ""

#: ../../howto/custom-template-tags.txt:332
# e1c293c6459d425ca4c3a6215f73ff70
msgid "``is_safe`` and ``needs_autoescape`` used to be attributes of the filter function; this syntax is deprecated."
msgstr ""

#: ../../howto/custom-template-tags.txt:353
# 787dbbdcb2094ea4ac44f2267d2363a7
msgid "Filters and time zones"
msgstr ""

#: ../../howto/custom-template-tags.txt:357
# afdb72464e704c759cf38434fe844fea
msgid "If you write a custom filter that operates on :class:`~datetime.datetime` objects, you'll usually register it with the ``expects_localtime`` flag set to ``True``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:370
# bc64373e95d140cca14b2c5b6e789f76
msgid "When this flag is set, if the first argument to your filter is a time zone aware datetime, Django will convert it to the current time zone before passing to your filter when appropriate, according to :ref:`rules for time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:376
# 107756b26f40415aae0f8846724210cd
msgid "Writing custom template tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:378
# 6897396f95c14b10bf2223ce17e2f998
msgid "Tags are more complex than filters, because tags can do anything."
msgstr ""

#: ../../howto/custom-template-tags.txt:381
# 66953f08ace6443290d3d8ee43f9da44
msgid "A quick overview"
msgstr ""

#: ../../howto/custom-template-tags.txt:383
# fec45c8d5b014cb885f8e4abdec1ba73
msgid "Above, this document explained that the template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works."
msgstr ""

#: ../../howto/custom-template-tags.txt:387
# ba9a6bea0ad14342ad0a1990c7f45d52
msgid "When Django compiles a template, it splits the raw template text into ''nodes''. Each node is an instance of ``django.template.Node`` and has a ``render()`` method. A compiled template is, simply, a list of ``Node`` objects. When you call ``render()`` on a compiled template object, the template calls ``render()`` on each ``Node`` in its node list, with the given context. The results are all concatenated together to form the output of the template."
msgstr ""

#: ../../howto/custom-template-tags.txt:394
# 3b78bc06003641b09bf9cddef6c46734
msgid "Thus, to define a custom template tag, you specify how the raw template tag is converted into a ``Node`` (the compilation function), and what the node's ``render()`` method does."
msgstr ""

#: ../../howto/custom-template-tags.txt:399
# a299f31254f045ea86f49c5b71253ef2
msgid "Writing the compilation function"
msgstr ""

#: ../../howto/custom-template-tags.txt:401
# 63dc3c1d243f40f29e1a39e4b1a613c4
msgid "For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a ``Node`` instance based on the contents of the tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:405
# a6a6e07bdf5a4f49bc6c41f850072ee7
msgid "For example, let's write a template tag, ``{% current_time %}``, that displays the current date/time, formatted according to a parameter given in the tag, in :func:`~time.strftime` syntax. It's a good idea to decide the tag syntax before anything else. In our case, let's say the tag should be used like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:414
# 93840079332240968109feb51c6750da
msgid "The parser for this function should grab the parameter and create a ``Node`` object:"
msgstr ""

#: ../../howto/custom-template-tags.txt:430
#: ../../howto/custom-template-tags.txt:482
# e67c979e661a4b24a9e6bd2436a2f2bf
# 3cf92c16d5384daca311664b28d33da5
msgid "Notes:"
msgstr ""

#: ../../howto/custom-template-tags.txt:432
# e23e2577ed3b42ab8730a798eedd9e8f
msgid "``parser`` is the template parser object. We don't need it in this example."
msgstr ""

#: ../../howto/custom-template-tags.txt:435
# 9a9b10889f7d4e0f9b8883a0bc6f890d
msgid "``token.contents`` is a string of the raw contents of the tag. In our example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

#: ../../howto/custom-template-tags.txt:438
# f5cf42adf30d45c88b0e35a30c11e0ab
msgid "The ``token.split_contents()`` method separates the arguments on spaces while keeping quoted strings together. The more straightforward ``token.contents.split()`` wouldn't be as robust, as it would naively split on *all* spaces, including those within quoted strings. It's a good idea to always use ``token.split_contents()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:444
# f265f8e2b94746c7863e2ef233e4c460
msgid "This function is responsible for raising ``django.template.TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

#: ../../howto/custom-template-tags.txt:448
# 15de33bf77c749c0a54a33ebc47621b9
msgid "The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't hard-code the tag's name in your error messages, because that couples the tag's name to your function. ``token.contents.split()[0]`` will ''always'' be the name of your tag -- even when the tag has no arguments."
msgstr ""

#: ../../howto/custom-template-tags.txt:454
# 3b27dfeae05545aebb9a5c532e2760a0
msgid "The function returns a ``CurrentTimeNode`` with everything the node needs to know about this tag. In this case, it just passes the argument -- ``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template tag are removed in ``format_string[1:-1]``."
msgstr ""

#: ../../howto/custom-template-tags.txt:459
# c249bf0744c14f5f8b63bc48f76d2d81
msgid "The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It's low-level because that's fastest."
msgstr ""

#: ../../howto/custom-template-tags.txt:465
# 88ed4034938547658cc57edf2cc2d32f
msgid "Writing the renderer"
msgstr ""

#: ../../howto/custom-template-tags.txt:467
# aaaa9f16f7114ca4bb74afe71b15aa73
msgid "The second step in writing custom tags is to define a ``Node`` subclass that has a ``render()`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:470
# a5757b2b9a2a41e1b81332d1e91264e8
msgid "Continuing the above example, we need to define ``CurrentTimeNode``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:484
# 3d20d2ea49cb4bc9b2395192a97ab64f
msgid "``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:488
# 01bcc6e766154f9cadfc6e2f92ce1663
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

#: ../../howto/custom-template-tags.txt:490
# 409c82397f1f465fa74940e490a89f21
msgid "``render()`` should never raise ``TemplateSyntaxError`` or any other exception. It should fail silently, just as template filters should."
msgstr ""

#: ../../howto/custom-template-tags.txt:493
# dd8d733362014b398cd3ad026e9b4b93
msgid "Ultimately, this decoupling of compilation and rendering results in an efficient template system, because a template can render multiple contexts without having to be parsed multiple times."
msgstr ""

#: ../../howto/custom-template-tags.txt:498
# 0746de18c7ae4933b3c37bb8348588f6
msgid "Auto-escaping considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:500
# 88de7a069e98413089d9a3417042d11b
msgid "The output from template tags is **not** automatically run through the auto-escaping filters. However, there are still a couple of things you should keep in mind when writing a template tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:504
# fafd93d44f684975b79305986891ba54
msgid "If the ``render()`` function of your template stores the result in a context variable (rather than returning the result in a string), it should take care to call ``mark_safe()`` if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such."
msgstr ""

#: ../../howto/custom-template-tags.txt:511
# 6f3e24ea245b46718d83672f2a826342
msgid "Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context's value. The ``__init__`` method for the ``Context`` class takes a parameter called ``autoescape`` that you can use for this purpose. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:523
# d8ec5f0203df43278052ff8b9fa5894d
msgid "This is not a very common situation, but it's useful if you're rendering a template yourself. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:532
# a3be389c4f5240a3a68df2ab4b3e630b
msgid "If we had neglected to pass in the current ``context.autoescape`` value to our new ``Context`` in this example, the results would have *always* been automatically escaped, which may not be the desired behavior if the template tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

#: ../../howto/custom-template-tags.txt:540
# a824325656cf4ad6878b92a8a9fa20a2
msgid "Thread-safety considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:544
# 2529ef219a044ad8a94028b666831709
msgid "Once a node is parsed, its ``render`` method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it's important to make sure your template tags are thread safe."
msgstr ""

#: ../../howto/custom-template-tags.txt:550
# 9054af19dff74c348596a1c03e22da49
msgid "To make sure your template tags are thread safe, you should never store state information on the node itself. For example, Django provides a builtin :ttag:`cycle` template tag that cycles among a list of given strings each time it's rendered:"
msgstr ""

#: ../../howto/custom-template-tags.txt:563
# 92e4f351dbec4d769d106d8dd099ac46
msgid "A naive implementation of ``CycleNode`` might look something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:573
# 8d534c9364e44131b42d21e1ffe1968c
msgid "But, suppose we have two templates rendering the template snippet from above at the same time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:576
# d382df43aae741c59f87461c78a1a85b
msgid "Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns 'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:578
# e88508b36d36469ab77125df718fe1a9
msgid "Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns 'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:580
# 513250f43fa148199acbf0ec8c07f6a3
msgid "Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns 'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:582
# 71f530d61f154f158047a47abd43f0ad
msgid "Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns 'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:585
# 51d846d9e13544b38ca14157aff12705
msgid "The CycleNode is iterating, but it's iterating globally. As far as Thread 1 and Thread 2 are concerned, it's always returning the same value. This is obviously not what we want!"
msgstr ""

#: ../../howto/custom-template-tags.txt:589
# 48f6b49f401a48b0be8a20b7b1831676
msgid "To address this problem, Django provides a ``render_context`` that's associated with the ``context`` of the template that is currently being rendered. The ``render_context`` behaves like a Python dictionary, and should be used to store ``Node`` state between invocations of the ``render`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:594
# eb854fbf34724e37844d58ce1dc72605
msgid "Let's refactor our ``CycleNode`` implementation to use the ``render_context``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:607
# 766ade7c5dfc4d3aad3fd7444b70cd48
msgid "Note that it's perfectly safe to store global information that will not change throughout the life of the ``Node`` as an attribute. In the case of ``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` is instantiated, so we don't need to put it in the ``render_context``. But state information that is specific to the template that is currently being rendered, like the current iteration of the ``CycleNode``, should be stored in the ``render_context``."
msgstr ""

#: ../../howto/custom-template-tags.txt:616
# 17d6b932be774b9b843cf7f5c7b52a96
msgid "Notice how we used ``self`` to scope the ``CycleNode`` specific information within the ``render_context``. There may be multiple ``CycleNodes`` in a given template, so we need to be careful not to clobber another node's state information. The easiest way to do this is to always use ``self`` as the key into ``render_context``. If you're keeping track of several state variables, make ``render_context[self]`` a dictionary."
msgstr ""

#: ../../howto/custom-template-tags.txt:624
# 35029e838be94e04b20060f0f4a6ab5d
msgid "Registering the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:626
# 580e387af687469eb73d9ec67188bcab
msgid "Finally, register the tag with your module's ``Library`` instance, as explained in \"Writing custom template filters\" above. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:633
# e0325802bda440cead85b09525b89580
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:635
# 50f5753f45ce4f8ab5c4d36a60dbdd50
msgid "The name of the template tag -- a string. If this is left out, the name of the compilation function will be used."
msgstr ""

#: ../../howto/custom-template-tags.txt:640
# 246fe7d7c90e448192f929fa2a3b4a2d
msgid "As with filter registration, it is also possible to use this as a decorator:"
msgstr ""

#: ../../howto/custom-template-tags.txt:652
# b95f5f6854d640809ac8625e438022f1
msgid "If you leave off the ``name`` argument, as in the second example above, Django will use the function's name as the tag name."
msgstr ""

#: ../../howto/custom-template-tags.txt:656
# bc6eb1f00c3741b7b15c73a267abba9b
msgid "Passing template variables to the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:658
# 844b6ed0324f47878dba003a1d1eb7db
msgid "Although you can pass any number of arguments to a template tag using ``token.split_contents()``, the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument."
msgstr ""

#: ../../howto/custom-template-tags.txt:663
# 7005f204fd2a4b2f915d86591e76af9c
msgid "While the previous examples have formatted the current time into a string and returned the string, suppose you wanted to pass in a :class:`~django.db.models.DateTimeField` from an object and have the template tag format that date-time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:672
# 0a59d26918444f59ae510ae61b71fc7b
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

#: ../../howto/custom-template-tags.txt:674
# b360d53660434c5aa570dcdd15e064f6
msgid "The tag name ``format_time``."
msgstr ""

#: ../../howto/custom-template-tags.txt:675
# 67c1f67eb0724a4a94f3101e2d1190fa
msgid "The string ``\"blog_entry.date_updated\"`` (without the surrounding quotes)."
msgstr ""

#: ../../howto/custom-template-tags.txt:677
# f47cd753861d4ddbb36db34fcc39bba2
msgid "The formatting string ``\"%Y-%m-%d %I:%M %p\"``. The return value from ``split_contents()`` will include the leading and trailing quotes for string literals like this."
msgstr ""

#: ../../howto/custom-template-tags.txt:681
# be32bc630b2a44918215526d57940671
msgid "Now your tag should begin to look like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:696
# aca219dfcb0f40eea42b352f75993bf9
msgid "You also have to change the renderer to retrieve the actual contents of the ``date_updated`` property of the ``blog_entry`` object.  This can be accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

#: ../../howto/custom-template-tags.txt:700
# 051bd154cd8348a2b02e9de05d621014
msgid "To use the ``Variable`` class, simply instantiate it with the name of the variable to be resolved, and then call ``variable.resolve(context)``. So, for example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:718
# 882c4460d82a47ffa7f695585bc76a4a
msgid "Variable resolution will throw a ``VariableDoesNotExist`` exception if it cannot resolve the string passed to it in the current context of the page."
msgstr ""

#: ../../howto/custom-template-tags.txt:724
# 04ede7201c254dafb0ca6499e3084c00
msgid "Simple tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:726
# 5a2d0538578648e5bb21cd9a4ada77d0
msgid "Many template tags take a number of arguments -- strings or template variables -- and return a string after doing some processing based solely on the input arguments and some external information. For example, the ``current_time`` tag we wrote above is of this variety: we give it a format string, it returns the time as a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:732
# b67eac10ce42426cb6eea0b51cf08f0b
msgid "To ease the creation of these types of tags, Django provides a helper function, ``simple_tag``. This function, which is a method of ``django.template.Library``, takes a function that accepts any number of arguments, wraps it in a ``render`` function and the other necessary bits mentioned above and registers it with the template system."
msgstr ""

#: ../../howto/custom-template-tags.txt:738
#: ../../howto/custom-template-tags.txt:1080
# 5a88150f7ea947ad9946d968b245bcb8
# 430b974e591f4a0db540e54d78ad13cc
msgid "Our earlier ``current_time`` function could thus be written like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:747
#: ../../howto/custom-template-tags.txt:1089
# b4db995f116b4f27a757771387ac59d6
# 738c5c7f01c84a049ffbdb4694801c4c
msgid "The decorator syntax also works:"
msgstr ""

#: ../../howto/custom-template-tags.txt:755
# 2b70cad43d284bb18b823b43610503f6
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:757
# aa45c0da17c34f868202cfc4fe0e9c3c
msgid "Checking for the required number of arguments, etc., has already been done by the time our function is called, so we don't need to do that."
msgstr ""

#: ../../howto/custom-template-tags.txt:759
# 3c9e87cf9a184ca7a25f82c0c1118e9a
msgid "The quotes around the argument (if any) have already been stripped away, so we just receive a plain string."
msgstr ""

#: ../../howto/custom-template-tags.txt:761
# e217da21f60f48208e3d6052d713c964
msgid "If the argument was a template variable, our function is passed the current value of the variable, not the variable itself."
msgstr ""

#: ../../howto/custom-template-tags.txt:766
#: ../../howto/custom-template-tags.txt:1105
# 23e5b618232d4382b42b0d3042bdac08
# 3f5253a96de64b93babdf91f4e5747a1
msgid "If your template tag needs to access the current context, you can use the ``takes_context`` argument when registering your tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:778
#: ../../howto/custom-template-tags.txt:1117
# c49a2ccc0e434863a13687047009584a
# 19a6176bfeac471b83d1a5f8141c76df
msgid "Or, using decorator syntax:"
msgstr ""

#: ../../howto/custom-template-tags.txt:787
#: ../../howto/custom-template-tags.txt:1126
# 6ab584cc6c4c4eae9c2c7362b076118a
# f1a9da98844144ed85779599fd60089d
msgid "For more information on how the ``takes_context`` option works, see the section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:792
# 866af8e25aa641d686531ea764952579
msgid "If you need to rename your tag, you can provide a custom name for it:"
msgstr ""

#: ../../howto/custom-template-tags.txt:804
# 6ab8fb43a7444ade8356a9056481bcdb
msgid "``simple_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:816
#: ../../howto/custom-template-tags.txt:972
#: ../../howto/custom-template-tags.txt:1141
# 5f22abf0ee6441069af5c7d9e6bef5d4
# 64e1f0db02274da1a77837a7ac15acd5
# b8d15549673047efb60528ec0b6f312d
msgid "Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (\"``=``\") and must be provided after the positional arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:828
# 55e6468e6a1543c0ad5d90473c7c6128
msgid "Inclusion tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:830
# 43d8d490a0fa4df79493b81f6a09d6a1
msgid "Another common type of template tag is the type that displays some data by rendering *another* template. For example, Django's admin interface uses custom template tags to display the buttons along the bottom of the \"add/change\" form pages. Those buttons always look the same, but the link targets change depending on the object being edited -- so they're a perfect case for using a small template that is filled with details from the current object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:838
# 308d258661a149e9b2e0f8a378ac86b5
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:840
# c952040a943b4c58a4f40735cef17895
msgid "Writing inclusion tags is probably best demonstrated by example. Let's write a tag that outputs a list of choices for a given ``Poll`` object, such as was created in the :ref:`tutorials <creating-models>`. We'll use the tag like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:848
# 45380611e6bf4bdd8855154ada4eaaf7
msgid "...and the output will be something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:858
# f58e744c0e5d463b8fd817c36df3ad10
msgid "First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:869
# a68a69ab9d5349f286d8035197c9b839
msgid "Next, create the template used to render the tag's output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very simple:"
msgstr ""

#: ../../howto/custom-template-tags.txt:881
# 81d6c185bf7240cf86262b779a152baf
msgid "Now, create and register the inclusion tag by calling the ``inclusion_tag()`` method on a ``Library`` object. Following our example, if the above template is in a file called ``results.html`` in a directory that's searched by the template loader, we'd register the tag like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:902
# 32a9f4ed33224db8b706fb08e5f4706c
msgid "As always, decorator syntax works as well, so we could have written:"
msgstr ""

#: ../../howto/custom-template-tags.txt:910
# 78fd72b2a78147f79a44869b0647c498
msgid "...when first creating the function."
msgstr ""

#: ../../howto/custom-template-tags.txt:912
# e5d97766774e4ff39c91988e2e65f0ce
msgid "Sometimes, your inclusion tags might require a large number of arguments, making it a pain for template authors to pass in all the arguments and remember their order. To solve this, Django provides a ``takes_context`` option for inclusion tags. If you specify ``takes_context`` in creating a template tag, the tag will have no required arguments, and the underlying Python function will have one argument -- the template context as of when the tag was called."
msgstr ""

#: ../../howto/custom-template-tags.txt:919
# a4b5c00cea094722b0c6ec868c28a005
msgid "For example, say you're writing an inclusion tag that will always be used in a context that contains ``home_link`` and ``home_title`` variables that point back to the main page. Here's what the Python function would look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:934
# 50cd60be3acc410d936e2613674968cf
msgid "(Note that the first parameter to the function *must* be called ``context``.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:936
# 85d9b84604964814a7b5cac7a35c5fca
msgid "In that ``register.inclusion_tag()`` line, we specified ``takes_context=True`` and the name of the template. Here's what the template ``link.html`` might look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:944
# 461942257259421888a8981c0f6aedd5
msgid "Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:951
# 68ffd2aad1144942ae13d44204163e3b
msgid "Note that when you're using ``takes_context=True``, there's no need to pass arguments to the template tag. It automatically gets access to the context."
msgstr ""

#: ../../howto/custom-template-tags.txt:954
# abbc5df076114814af988ade2fad958a
msgid "The ``takes_context`` parameter defaults to ``False``. When it's set to ``True``, the tag is passed the context object, as in this example. That's the only difference between this case and the previous ``inclusion_tag`` example."
msgstr ""

#: ../../howto/custom-template-tags.txt:960
# f4da34e2e5fc44d78181c5a0430e90ed
msgid "``inclusion_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:982
# 252c7217be0a4bff89a5762a67859a12
msgid "Setting a variable in the context"
msgstr ""

#: ../../howto/custom-template-tags.txt:984
# d80ba0b86c3a463bab37f29170838a48
msgid "The above examples simply output a value. Generally, it's more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create."
msgstr ""

#: ../../howto/custom-template-tags.txt:988
# 4a6976abebb84e58a923799b1865ccf5
msgid "To set a variable in the context, just use dictionary assignment on the context object in the ``render()`` method. Here's an updated version of ``CurrentTimeNode`` that sets a template variable ``current_time`` instead of outputting it:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1002
# dfc6fa9c45114ac48fc4d3647ec75171
msgid "Note that ``render()`` returns the empty string. ``render()`` should always return string output. If all the template tag does is set a variable, ``render()`` should return the empty string."
msgstr ""

#: ../../howto/custom-template-tags.txt:1006
# c0356a06bb6249fe8409d8b6104b15af
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1014
# 66a0b629e55a4454a744db4d908c0747
msgid "Any variable set in the context will only be available in the same ``block`` of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don't conflict with context in other blocks."
msgstr ""

#: ../../howto/custom-template-tags.txt:1019
# 8384770d8bc24f1bb7e449796f7d76b9
msgid "But, there's a problem with ``CurrentTimeNode2``: The variable name ``current_time`` is hard-coded. This means you'll need to make sure your template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% current_time %}`` will blindly overwrite that variable's value. A cleaner solution is to make the template tag specify the name of the output variable, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1031
# 7e2b97d54b454d92b09e78cf1cc71eba
msgid "To do that, you'll need to refactor both the compilation function and ``Node`` class, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1060
# 7471e262930e43dbaa70c41aff6cc02c
msgid "The difference here is that ``do_current_time()`` grabs the format string and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1063
# 02d9f5fdebac43dea6e381fa0b18fd08
msgid "Finally, if you only need to have a simple syntax for your custom context-updating template tag, you might want to consider using an :ref:`assignment tag <howto-custom-template-tags-assignment-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:1070
# 7f18896c2bc24934bc6491d8d2aa5e50
msgid "Assignment tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:1074
# efe62987e24e472bb792c40c769656c4
msgid "To ease the creation of tags setting a variable in the context, Django provides a helper function, ``assignment_tag``. This function works the same way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except that it stores the tag's result in a specified context variable instead of directly outputting it."
msgstr ""

#: ../../howto/custom-template-tags.txt:1097
# b0253e04e57445589e4ff2f4667b87b0
msgid "You may then store the result in a template variable using the ``as`` argument followed by the variable name, and output it yourself where you see fit:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1129
# e8151342da084bf89fc68f847f65e632
msgid "``assignment_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1151
# 488f04546c5d4625938df5a38f92bed0
msgid "Parsing until another block tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:1153
# c5d4846147e045ab945e30bf6a1ec3b0
msgid "Template tags can work in tandem. For instance, the standard :ttag:`{% comment %}<comment>` tag hides everything until ``{% endcomment %}``. To create a template tag such as this, use ``parser.parse()`` in your compilation function."
msgstr ""

#: ../../howto/custom-template-tags.txt:1158
# d0de22357ec84b8cbeb6bd2f602a748d
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1172
# 9fc0041b9d7c47a6b970b1d0702606c4
msgid "The actual implementation of :ttag:`{% comment %}<comment>` is slightly different in that it allows broken template tags to appear between ``{% comment %}`` and ``{% endcomment %}``. It does so by calling ``parser.skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` followed by ``parser.delete_first_token()``, thus avoiding the generation of a node list."
msgstr ""

#: ../../howto/custom-template-tags.txt:1179
# 092c8be791e54b658b79275dbcafec68
msgid "``parser.parse()`` takes a tuple of names of block tags ''to parse until''. It returns an instance of ``django.template.NodeList``, which is a list of all ``Node`` objects that the parser encountered ''before'' it encountered any of the tags named in the tuple."
msgstr ""

#: ../../howto/custom-template-tags.txt:1184
# 3bf1931ebcf147cf92bd9e47b2ec2317
msgid "In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, ``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` themselves."
msgstr ""

#: ../../howto/custom-template-tags.txt:1189
# 2561693b773c46eca6364dc1abf2af9f
msgid "After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the ``{% endcomment %}`` tag, so the code needs to explicitly call ``parser.delete_first_token()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1193
# c5180bb03b844705a98ae723e5920f76
msgid "``CommentNode.render()`` simply returns an empty string. Anything between ``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

#: ../../howto/custom-template-tags.txt:1197
# 81857f65452e4df3b7f1051f48fd3c86
msgid "Parsing until another block tag, and saving contents"
msgstr ""

#: ../../howto/custom-template-tags.txt:1199
# 6c9853ed8d37458fbb2a0ec65d8b32fb
msgid "In the previous example, ``do_comment()`` discarded everything between ``{% comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible to do something with the code between block tags."
msgstr ""

#: ../../howto/custom-template-tags.txt:1203
# d083567c90964b00af8ee9a63e5ffd20
msgid "For example, here's a custom template tag, ``{% upper %}``, that capitalizes everything between itself and ``{% endupper %}``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1206
# 25448cef963f47fbb5c72e5f32a5e02d
msgid "Usage:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1212
# a02478aba77e45c4a96c6c6c0aff1a24
msgid "As in the previous example, we'll use ``parser.parse()``. But this time, we pass the resulting ``nodelist`` to the ``Node``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1229
# ec8148934dd74d7fa69e96049830cc4a
msgid "The only new concept here is the ``self.nodelist.render(context)`` in ``UpperNode.render()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1232
# 6f13bcb17e3c41b782a1132e72d524e1
msgid "For more examples of complex rendering, see the source code for :ttag:`{% if %}<if>`, :ttag:`{% for %}<for>`, :ttag:`{% ifequal %}<ifequal>` or :ttag:`{% ifchanged %}<ifchanged>`. They live in ``django/template/defaulttags.py``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:3
# 17241e6913044def83fec3cc9f7afb0e
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:7
# 90e3c1c8f31b4afc956130677530ee55
msgid "Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred deployment platform for Django, many people use shared hosting, on which protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:13
# e75ce0c23c524606b621c9ba7e5383ab
msgid "This document primarily focuses on FastCGI. Other protocols, such as SCGI and AJP, are also supported, through the ``flup`` Python package. See the Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:17
# ad0a310fe7ac495eac7eb1de1f9243f0
msgid "Essentially, FastCGI is an efficient way of letting an external application serve pages to a Web server. The Web server delegates the incoming Web requests (via a socket) to FastCGI, which executes the code and passes the response back to the Web server, which, in turn, passes it back to the client's Web browser."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:22
# 37d389b4c3814ae5970145238d6e890b
msgid "Like WSGI, FastCGI allows code to stay in memory, allowing requests to be served with no startup time. While e.g. :doc:`mod_wsgi</howto/deployment/wsgi/modwsgi>` can either be configured embedded in the Apache Web server process or as a separate daemon process, a FastCGI process never runs inside the Web server process, always in a separate, persistent process."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:33
# b66ae00c3774407b9e660692f4be418b
msgid "The traditional ``mod_*`` arrangements in Apache embed various scripting languages (most notably PHP, Python and Perl) inside the process space of your Web server. Although this lowers startup time -- because code doesn't have to be read off disk for every request -- it comes at the cost of memory use."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:39
# 7001c6c114ef4ee09a070b2266f6224a
msgid "Due to the nature of FastCGI, it's even possible to have processes that run under a different user account than the Web server process. That's a nice security benefit on shared systems, because it means you can secure your code from other users."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:45
# 59f67df595f24628bac6a69f08bd1dac
msgid "Prerequisite: flup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:47
# 191e1a378c78411d8842f96c1d7ca4fe
msgid "Before you can start using FastCGI with Django, you'll need to install flup_, a Python library for dealing with FastCGI. Version 0.5 or newer should work fine."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:53
# e7b84137ad5d4cbbb9efa7426725ab25
msgid "Starting your FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:55
# d7fd4eec926b457eabf9cd09ccfb9be6
msgid "FastCGI operates on a client-server model, and in most cases you'll be starting the FastCGI process on your own. Your Web server (be it Apache, lighttpd, or otherwise) only contacts your Django-FastCGI process when the server needs a dynamic page to be loaded. Because the daemon is already running with the code in memory, it's able to serve the response very quickly."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:63
# f65d91a2c354463994cf11176b7045ef
msgid "If you're on a shared hosting system, you'll probably be forced to use Web server-managed FastCGI processes. See the section below on running Django with Web server-managed processes for more information."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:67
# 3305803aaeca4045800e545568da4ec3
msgid "A Web server can connect to a FastCGI server in one of two ways: It can use either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can use a TCP socket. What you choose is a manner of preference; a TCP socket is usually easier due to permissions issues."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:72
# ee143b6b53304ed08423b2652e8a8ffc
msgid "To start your server, first change into the directory of your project (wherever your :doc:`manage.py </ref/django-admin>` is), and then run the :djadmin:`runfcgi` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:78
# d9bd72ce47cc4a7d9fe88f2943385ea9
msgid "If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll display a list of all the available options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:81
# d1728b1ee6d243e0b568c35f56211963
msgid "You'll need to specify either a :djadminopt:`socket`, a :djadminopt:`protocol` or both :djadminopt:`host` and :djadminopt:`port`. Then, when you set up your Web server, you'll just need to point it at the host/port or socket you specified when starting the FastCGI server. See the examples_, below."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:87
# 747f1a5a393745518057af8fc7383aa3
msgid "Protocols"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:89
# 7592b5782e41478c97ea064062ce5450
msgid "Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> <protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>`` may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:103
# dc83800c27b54723a5150f95bee002ba
msgid "Examples"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:105
# 36b2ef1c47494ce0a246e3f3e28ea89c
msgid "Running a threaded server on a TCP port::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:109
# 4ae236cbab474e269a9da2cd45137f4d
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:115
# be4212455c5645eeb81b7aba216dfe89
msgid "Django's default umask requires that the webserver and the Django fastcgi process be run with the same group **and** user. For increased security, you can run them under the same group but as different users. If you do this, you will need to set the umask to 0002 using the ``umask`` argument to ``runfcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:121
# 285d6805c64a4f9294101c76230de6ac
msgid "Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:126
# 5cc1f2b958af4462a6cb88a71e6b7350
msgid "Stopping the FastCGI daemon"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:128
# 61c80c6f7cc54ba68ccc433859a6c819
msgid "If you have the process running in the foreground, it's easy enough to stop it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. However, when you're dealing with background processes, you'll need to resort to the Unix ``kill`` command."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:133
# e1608e0806074720a9af8eece24e07f6
msgid "If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you can kill the running FastCGI daemon like this::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:138
# b26c18bf11f5463dae1e5efc65e97025
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:140
# 7ca0e921b30f4069ba0d2b2ff4ca1287
msgid "To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:160
# 0d5eabb2bc6348a88a9ee8cc7fecd6f1
msgid "Apache setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:162
# c883bd62fabd46fe8a40d3957263a26e
msgid "To use Django with Apache and FastCGI, you'll need Apache installed and configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache documentation for instructions."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:166
# e03d9a1caac44492a82ab22004b0685d
msgid "Once you've got that set up, point Apache at your Django FastCGI instance by editing the ``httpd.conf`` (Apache configuration) file. You'll need to do two things:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:170
# 20afb3bc6d45460fb6405d06d9703a95
msgid "Use the ``FastCGIExternalServer`` directive to specify the location of your FastCGI server."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:172
# 32881105bee846308d8b890872883624
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:177
# f51903843c65406aa9b321a9318fa3c8
msgid "Specifying the location of the FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:179
# 35997a30fabd4cc3bd5b7cf43464fe28
msgid "The ``FastCGIExternalServer`` directive tells Apache how to find your FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:191
# c0998f9318944dcfb1acd22cb9899f0c
msgid "In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't actually have to exist. It's just a URL used by the Web server internally -- a hook for signifying which requests at a URL should be handled by FastCGI. (More on this in the next section.)"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:199
# d462c25ca76b42e180242f497bdab03f
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:201
# 5212a949438f4fc3a95b2d4ba45bfa56
msgid "The second step is telling Apache to use FastCGI for URLs that match a certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs to ``mysite.fcgi`` (or whatever you specified in the ``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:206
# 9f3c9554c8364519b51ca51d609407c9
msgid "In this example, we tell Apache to use FastCGI to handle any request that doesn't represent a file on the filesystem and doesn't start with ``/media/``. This is probably the most common case, if you're using Django's admin site:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:224
# 41776f78c59f4df8b615074055768b40
msgid "Django will automatically use the pre-rewrite version of the URL when constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar methods)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:229
# dca5e13d5baa4ff08b60beea9837f095
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:231
# 09f10fafa43a48c88be5ae7c89aeb94b
msgid "Another way to serve applications through FastCGI is by using Apache's `mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI applications differently in that it manages the spawning of worker processes by itself and doesn't offer something like ``FastCGIExternalServer``. This means that the configuration looks slightly different."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:237
# 1f314176930a4cf3ac6ce9f79eb5dda2
msgid "In effect, you have to go the way of adding a script handler similar to what is described later on regarding running Django in a :ref:`shared-hosting environment <apache_shared_hosting>`. For further details please refer to the `mod_fcgid reference`_"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:246
# ab1f25cd57af4c7abdebac65a28ed6e6
msgid "lighttpd setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:248
# 8664a25a2232493e84af4f22400e3894
msgid "lighttpd_ is a lightweight Web server commonly used for serving static files. It supports FastCGI natively and, thus, is a good choice for serving both static and dynamic pages, if your site doesn't have any Apache-specific needs."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:254
# 25fa42258c4242e8aaaf19742d7ed875
msgid "Make sure ``mod_fastcgi`` is in your modules list, somewhere after ``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:258
# 205bc7c2acc942e8994b7d71a5e48b51
msgid "Add the following to your lighttpd config file:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:285
# ec447b7b367f4fa1a31cbc4bb17f62b8
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:287
# 053fbe779e994f139492d60e3949272d
msgid "lighttpd lets you use \"conditional configuration\" to allow configuration to be customized per host. To specify multiple FastCGI sites, just add a conditional block around your FastCGI config for each site::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:309
# fba052ec0cc14d4982d1a47aef171f81
msgid "You can also run multiple Django installations on the same site simply by specifying multiple entries in the ``fastcgi.server`` directive. Add one FastCGI host for each."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:314
# 9b5c20392a024bd5a29e5eed3dd1bb2c
msgid "Cherokee setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:316
# 0b4cec3ec4564ec2b28694453b26e507
msgid "Cherokee is a very fast, flexible and easy to configure Web Server. It supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI, TLS and SSL encrypted connections, Virtual hosts, Authentication, on the fly encoding, Load Balancing, Apache compatible log files, Data Base Balancer, Reverse HTTP Proxy and much more."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:322
# de2f84299cc64973b1e43d09924f5d36
msgid "The Cherokee project provides a documentation to `setting up Django`_ with Cherokee."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:329
# 2fbc232656b4451dad1e1a10a76fe120
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:331
# 687d913c96ad434aa646b6d8523d2974
msgid "Many shared-hosting providers don't allow you to run your own server daemons or edit the ``httpd.conf`` file. In these cases, it's still possible to run Django using Web server-spawned processes."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:337
# 9e14d885f05a43fc8ad153ed9e28866c
msgid "If you're using Web server-spawned processes, as explained in this section, there's no need for you to start the FastCGI server on your own. Apache will spawn a number of processes, scaling as it needs to."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:341
# c2ae816b83524f1f950aa7936bee4c12
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:350
# 75ec7b66f6234a6a896e5746399a927d
msgid "Then, create a small script that tells Apache how to spawn your FastCGI program. Create a file ``mysite.fcgi`` and place it in your Web directory, and be sure to make it executable:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:371
# 0d08bfa5f0b54a32b864c76dc390ba87
msgid "This works if your server uses mod_fastcgi. If, on the other hand, you are using mod_fcgid the setup is mostly the same except for a slight change in the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have to add a fcgid-handler:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:384
# 4853c41bec7d4ba5b26e1d6492b5b73f
msgid "Restarting the spawned server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:386
# 6640cb03ad724cfb9db81e4fa0d97619
msgid "If you change any Python code on your site, you'll need to tell FastCGI the code has changed. But there's no need to restart Apache in this case. Rather, just reupload ``mysite.fcgi``, or edit the file, so that the timestamp on the file will change. When Apache sees the file has been updated, it will restart your Django application for you."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:392
# e5241710a106460da553982f11e14def
msgid "If you have access to a command shell on a Unix system, you can accomplish this easily by using the ``touch`` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:398
# 5d914573243444a3a4b5375c00a9b04c
msgid "Serving admin media files"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:400
# f833b9bb229b4a3da1eed2222db3caf3
msgid "Regardless of the server and configuration you eventually decide to use, you will also need to give some thought to how to serve the admin media files. The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` documentation is also applicable in the setups detailed above."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:406
# 23ba82c74e074dd9bc97be84ac151092
msgid "Forcing the URL prefix to a particular value"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:408
# 5fc2c5ff34b844d5b665339d839abac0
msgid "Because many of these fastcgi-based solutions require rewriting the URL at some point inside the Web server, the path information that Django sees may not resemble the original URL that was passed in. This is a problem if the Django application is being served from under a particular prefix and you want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, rather than the rewritten version, which might contain, for example, ``mysite.fcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:415
# 28f4746d00134488824789ea84fcde55
msgid "Django makes a good attempt to work out what the real script name prefix should be. In particular, if the Web server sets the ``SCRIPT_URL`` (specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few servers, including Apache + mod_rewrite in some situations), Django will work out the original prefix automatically."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:421
# 36976d61b0944359ae73b0342c39a7c5
msgid "In the cases where Django cannot work out the prefix correctly and where you want the original value to be used in URLs, you can set the :setting:`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This sets the script name uniformly for every URL served via that settings file. Thus you'll need to use different settings files if you want different sets of URLs to have different script names in this case, but that is a rare situation."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:428
# 3198611150544d18abccd9c3a01de262
msgid "As an example of how to use it, if your Django configuration is serving all of the URLs under ``'/'`` and you wanted to use this setting, you would set ``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

#: ../../howto/deployment/index.txt:2
# 5c7350f786e94e82b2ecd9f88a51e0cb
msgid "Deploying Django"
msgstr ""

#: ../../howto/deployment/index.txt:4
# 4bfd52da336e4148bd0681d3c8cd1109
msgid "Django's chock-full of shortcuts to make Web developer's lives easier, but all those tools are of no use if you can't easily deploy your sites. Since Django's inception, ease of deployment has been a major goal. There's a number of good ways to easily deploy Django:"
msgstr ""

#: ../../howto/deployment/index.txt:16
# 3010a732860d47e69d87a67b2e8100d4
msgid "If you're new to deploying Django and/or Python, we'd recommend you try :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll be the easiest, fastest, and most stable deployment choice."
msgstr ""

#: ../../howto/deployment/index.txt:22
# cff13b4442844d0fb1bb4ebd2b070da9
msgid "`Chapter 12 of the Django Book (second edition)`_ discusses deployment and especially scaling in more detail. However, note that this edition was written against Django version 1.1 and has not been updated since :doc:`mod_python </howto/deployment/modpython>` was deprecated."
msgstr ""

#: ../../howto/deployment/modpython.txt:3
# 4bc49e52dfd245f492093e85f0a0364d
msgid "How to use Django with Apache and mod_python"
msgstr ""

#: ../../howto/deployment/modpython.txt:7
# 3b6aebcb0c8e472b9720235c2607d70b
msgid "Support for mod_python has been deprecated, and will be removed in Django 1.5. If you are configuring a new deployment, you are strongly encouraged to consider using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` or any of the other :doc:`supported servers </howto/deployment/index>`."
msgstr ""

#: ../../howto/deployment/modpython.txt:15
# 488e68064beb49eeace7b10af5a0b0e3
msgid "The `mod_python`_ module for Apache_ can be used to deploy Django to a production server, although it has been mostly superseded by the simpler :doc:`mod_wsgi deployment option </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../howto/deployment/modpython.txt:19
# c5301331f10c4b3682b079127835a446
msgid "mod_python is similar to (and inspired by) `mod_perl`_ : It embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements."
msgstr ""

#: ../../howto/deployment/modpython.txt:24
# 5bc2e62717c24a03baf8cde29f4c8cec
msgid "Django requires Apache 2.x and mod_python 3.x, and you should use Apache's `prefork MPM`_, as opposed to the `worker MPM`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:29
# be26fdf3412d4b5b99662f9063f4d87b
msgid "Apache is a big, complex animal, and this document only scratches the surface of what Apache can do. If you need more advanced information about Apache, there's no better source than `Apache's own official documentation`_"
msgstr ""

#: ../../howto/deployment/modpython.txt:34
# bc3fde45001449cab6b30c381f054fca
msgid "You may also be interested in :doc:`How to use Django with FastCGI, SCGI, or AJP </howto/deployment/fastcgi>`."
msgstr ""

#: ../../howto/deployment/modpython.txt:45
#: ../../howto/deployment/wsgi/modwsgi.txt:25
# 49c97881e1b1489b9cc45536cab6b9b2
# 3435e38fbdfc4946a5d3dda982efe555
msgid "Basic configuration"
msgstr ""

#: ../../howto/deployment/modpython.txt:47
# a38cc1a2df4845a0baffe0170cfbd295
msgid "To configure Django with mod_python, first make sure you have Apache installed, with the mod_python module activated."
msgstr ""

#: ../../howto/deployment/modpython.txt:50
# f334ae326dfe40178ad65c205e60a393
msgid "Then edit your ``httpd.conf`` file and add the following::"
msgstr ""

#: ../../howto/deployment/modpython.txt:60
# 2aaffab48d87419ba9ec0bf00e94da72
msgid "...and replace ``mysite.settings`` with the Python import path to your Django project's settings file."
msgstr ""

#: ../../howto/deployment/modpython.txt:63
# 92df7576464d4227bc388ee87beed07b
msgid "This tells Apache: \"Use mod_python for any URL at or under '/mysite/', using the Django mod_python handler.\" It passes the value of :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` so mod_python knows which settings to use."
msgstr ""

#: ../../howto/deployment/modpython.txt:67
# 5c660ba29546480d8e5e518bcb5ccd9e
msgid "Because mod_python does not know we are serving this site from underneath the ``/mysite/`` prefix, this value needs to be passed through to the mod_python handler in Django, via the ``PythonOption django.root ...`` line. The value set on that line (the last item) should match the string given in the ``<Location ...>`` directive. The effect of this is that Django will automatically strip the ``/mysite`` string from the front of any URLs before matching them against your URLconf patterns. If you later move your site to live under ``/mysite2``, you will not have to change anything except the ``django.root`` option in the config file."
msgstr ""

#: ../../howto/deployment/modpython.txt:77
# 0563adfa636440e6bc44dac3e0245999
msgid "When using ``django.root`` you should make sure that what's left, after the prefix has been removed, begins with a slash. Your URLconf patterns that are expecting an initial slash will then work correctly. In the above example, since we want to send things like ``/mysite/admin/`` to ``/admin/``, we need to remove the string ``/mysite`` from the beginning, so that is the ``django.root`` value. It would be an error to use ``/mysite/`` (with a trailing slash) in this case."
msgstr ""

#: ../../howto/deployment/modpython.txt:85
# c745e8b9e68c4a72848c74425fc7482c
msgid "Note that we're using the ``<Location>`` directive, not the ``<Directory>`` directive. The latter is used for pointing at places on your filesystem, whereas ``<Location>`` points at places in the URL structure of a Web site. ``<Directory>`` would be meaningless here."
msgstr ""

#: ../../howto/deployment/modpython.txt:90
# f7856cd6eb2e4dbe8277d85593882d48
msgid "Also, if your Django project is not on the default ``PYTHONPATH`` for your computer, you'll have to tell mod_python where your project can be found:"
msgstr ""

#: ../../howto/deployment/modpython.txt:104
# b626fba1b51f4dc09d7590a5eb167ed4
msgid "The value you use for ``PythonPath`` should include the parent directories of all the modules you are going to import in your application. It should also include the parent directory of the :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` location. This is exactly the same situation as setting the Python path for interactive usage. Whenever you try to import something, Python will run through all the directories in ``sys.path`` in turn, from first to last, and try to import from each directory until one succeeds."
msgstr ""

#: ../../howto/deployment/modpython.txt:112
# 636a7e251bde46e69214ceffe3dc47ca
msgid "Make sure that your Python source files' permissions are set such that the Apache user (usually named ``apache`` or ``httpd`` on most systems) will have read access to the files."
msgstr ""

#: ../../howto/deployment/modpython.txt:116
# 08f6518d7d0d4d228d38c4f379cb3358
msgid "An example might make this clearer. Suppose you have some applications under ``/usr/local/django-apps/`` (for example, ``/usr/local/django-apps/weblog/`` and so forth), your settings file is at ``/var/www/mysite/settings.py`` and you have specified :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` as in the above example. In this case, you would need to write your ``PythonPath`` directive as::"
msgstr ""

#: ../../howto/deployment/modpython.txt:125
# 407d29ec367f4712b8fb1bdbf0e3369a
msgid "With this path, ``import weblog`` and ``import mysite.settings`` will both work. If you had ``import blogroll`` in your code somewhere and ``blogroll`` lived under the ``weblog/`` directory, you would *also* need to add ``/usr/local/django-apps/weblog/`` to your ``PythonPath``. Remember: the **parent directories** of anything you import directly must be on the Python path."
msgstr ""

#: ../../howto/deployment/modpython.txt:134
# 872e29f9726b4718a15e0fcb4a955fa2
msgid "If you're using Windows, we still recommended that you use forward slashes in the pathnames, even though Windows normally uses the backslash character as its native separator. Apache knows how to convert from the forward slash format to the native format, so this approach is portable and easier to read. (It avoids tricky problems with having to double-escape backslashes.)"
msgstr ""

#: ../../howto/deployment/modpython.txt:141
# d6d659fc6d604fb9b4b4d439149a7508
msgid "This is valid even on a Windows system::"
msgstr ""

#: ../../howto/deployment/modpython.txt:145
# 6e95fac56587483ca1913ce7845f57a7
msgid "You can also add directives such as ``PythonAutoReload Off`` for performance. See the `mod_python documentation`_ for a full list of options."
msgstr ""

#: ../../howto/deployment/modpython.txt:148
# 37785d3e3fbc410d8a27d1418b322b0f
msgid "Note that you should set ``PythonDebug Off`` on a production server. If you leave ``PythonDebug On``, your users would see ugly (and revealing) Python tracebacks if something goes wrong within mod_python."
msgstr ""

#: ../../howto/deployment/modpython.txt:152
# 341ef4bef01f4544a33206719a675cd2
msgid "Restart Apache, and any request to ``/mysite/`` or below will be served by Django. Note that Django's URLconfs won't trim the \"/mysite/\" -- they get passed the full URL."
msgstr ""

#: ../../howto/deployment/modpython.txt:156
# 98016d419dd54eca9ab13488129fdddc
msgid "When deploying Django sites on mod_python, you'll need to restart Apache each time you make changes to your Python code."
msgstr ""

#: ../../howto/deployment/modpython.txt:162
# cb572fd63fe94f6ea6876c184f5c0a2a
msgid "Multiple Django installations on the same Apache"
msgstr ""

#: ../../howto/deployment/modpython.txt:164
# 9fafd297a2db4f9fa21465a55ce97800
msgid "It's entirely possible to run multiple Django installations on the same Apache instance. Just use ``VirtualHost`` for that, like so::"
msgstr ""

#: ../../howto/deployment/modpython.txt:181
# ca3ee7278db34d0c8f9107d7c7574108
msgid "If you need to put two Django installations within the same ``VirtualHost`` (or in different ``VirtualHost`` blocks that share the same server name), you'll need to take a special precaution to ensure mod_python's cache doesn't mess things up. Use the ``PythonInterpreter`` directive to give different ``<Location>`` directives separate interpreters::"
msgstr ""

#: ../../howto/deployment/modpython.txt:201
# a9d064863f2c4ddfba02728ee4c997eb
msgid "The values of ``PythonInterpreter`` don't really matter, as long as they're different between the two ``Location`` blocks."
msgstr ""

#: ../../howto/deployment/modpython.txt:205
# 39acc6eb26d14c0db0f107c723d2c206
msgid "Running a development server with mod_python"
msgstr ""

#: ../../howto/deployment/modpython.txt:207
# 56847b5f23e5444d88595781126b85bf
msgid "If you use mod_python for your development server, you can avoid the hassle of having to restart the server each time you make code changes. Just set ``MaxRequestsPerChild 1`` in your ``httpd.conf`` file to force Apache to reload everything for each request. But don't do that on a production server, or we'll revoke your Django privileges."
msgstr ""

#: ../../howto/deployment/modpython.txt:213
# 85436edd1a6041219d2248914781f10b
msgid "If you're the type of programmer who debugs using scattered ``print`` statements, note that output to ``stdout`` will not appear in the Apache log and can even `cause response errors`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:219
# 52abf813b64c4ebfbf0510a4d02a4313
msgid "If you have the need to print debugging information in a mod_python setup, you have a few options. You can print to ``stderr`` explicitly, like so::"
msgstr ""

#: ../../howto/deployment/modpython.txt:225
# 4713de294d10404db32fb95f7c4fec72
msgid "(note that ``stderr`` is buffered, so calling ``flush`` is necessary if you wish debugging information to be displayed promptly.)"
msgstr ""

#: ../../howto/deployment/modpython.txt:228
# 5cd440bd68ff432ea496d10e53ccb29d
msgid "A more compact approach is to use an assertion::"
msgstr ""

#: ../../howto/deployment/modpython.txt:232
# 3404f3ae0b144a9cbb40c3fbd3efdc0d
msgid "Another alternative is to add debugging information to the template of your page."
msgstr ""

#: ../../howto/deployment/modpython.txt:235
# 72b87011dca24628a1b2d0d63d35117f
msgid "Serving media files"
msgstr ""

#: ../../howto/deployment/modpython.txt:237
# 858fa7b004fb4ea3b2154a13978edb05
msgid "Django doesn't serve media files itself; it leaves that job to whichever Web server you choose."
msgstr ""

#: ../../howto/deployment/modpython.txt:240
#: ../../howto/deployment/wsgi/modwsgi.txt:93
# c200dd0b03db4a43a2d50af562c3bc32
# 67dd7b71567c40b3a5428d6b6eac5f12
msgid "We recommend using a separate Web server -- i.e., one that's not also running Django -- for serving media. Here are some good choices:"
msgstr ""

#: ../../howto/deployment/modpython.txt:243
#: ../../howto/deployment/wsgi/modwsgi.txt:96
#: ../../howto/static-files.txt:389
# 06e586de1d914f6e953fd72fa06590a2
# e772c09c30ae48759ba8471d8d1bb2b7
# 02e3bd261068475eb36105cae3ab3a44
msgid "lighttpd_"
msgstr ""

#: ../../howto/deployment/modpython.txt:244
#: ../../howto/deployment/wsgi/modwsgi.txt:97
#: ../../howto/static-files.txt:390
# 56363ae910964dc6a0997808c18bc78c
# 0f06aa84654a4fe6b79204c0ecaf5ac0
# df2b97495a8c4fa1b82372ad1c865b40
msgid "Nginx_"
msgstr ""

#: ../../howto/deployment/modpython.txt:245
#: ../../howto/deployment/wsgi/modwsgi.txt:98
#: ../../howto/static-files.txt:391
# f9385ee11232471e9537e22672ad71d6
# 36a014b6a9c349539a259bb09404e7db
# 54b170c6df384a39979299781897a367
msgid "TUX_"
msgstr ""

#: ../../howto/deployment/modpython.txt:246
#: ../../howto/deployment/wsgi/modwsgi.txt:99
#: ../../howto/static-files.txt:393
# 03cf28b7f45d4335a121c2956f59a2e9
# a76c6d2ca226418093a9ed246bf116ab
# 6db864965d7a42f9a54901246cf1cc0d
msgid "A stripped-down version of Apache_"
msgstr ""

#: ../../howto/deployment/modpython.txt:247
#: ../../howto/deployment/wsgi/modwsgi.txt:100
#: ../../howto/static-files.txt:392
# 7f9c71c4e11849d7a6252b7fd7f5c358
# d018bd027d15481da960eaa22906b8ed
# d6ed6ee46b7b474681b261c03c9675f5
msgid "Cherokee_"
msgstr ""

#: ../../howto/deployment/modpython.txt:249
# 11ef51b3b5934323871f8233d57f2fa9
msgid "If, however, you have no option but to serve media or static files on the same Apache ``VirtualHost`` as Django, here's how you can turn off mod_python for a particular part of the site::"
msgstr ""

#: ../../howto/deployment/modpython.txt:257
# 82baf7fc0fa843988a21947ee667be8b
msgid "Just change ``Location`` to the root URL of your media files. You can also use ``<LocationMatch>`` to match a regular expression."
msgstr ""

#: ../../howto/deployment/modpython.txt:260
# 04da28ea63334b77983490eee9c79187
msgid "This example sets up Django at the site root but explicitly disables Django for the ``media`` and ``static`` subdirectories and any URL that ends with ``.jpg``, ``.gif`` or ``.png``::"
msgstr ""

#: ../../howto/deployment/modpython.txt:289
#: ../../howto/deployment/wsgi/modwsgi.txt:152
# 51bb8e5ad6504584adcb7a2825054003
# f287dbb83774467695e0eeaf2866576d
msgid "Serving the admin files"
msgstr ""

#: ../../howto/deployment/modpython.txt:291
# 916fe9cbb00d4a32aa9b1920264a0905
msgid "Note that the Django development server automagically serves the static files of the admin app, but this is not the case when you use any other server arrangement. You're responsible for setting up Apache, or whichever media server you're using, to serve the admin files."
msgstr ""

#: ../../howto/deployment/modpython.txt:296
#: ../../howto/deployment/wsgi/modwsgi.txt:159
# 2e02aa241b584331a4b580d6f9bd5cb0
# 8284658b30e84a7683b430c65a0aa39a
msgid "The admin files live in (:file:`django/contrib/admin/static/admin`) of the Django distribution."
msgstr ""

#: ../../howto/deployment/modpython.txt:299
# e84b42d507d64cbe91f96e4824af072a
msgid "We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle the admin files (this means using the :djadmin:`collectstatic` management command to collect the static files in :setting:`STATIC_ROOT`, and then configuring your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), but here are two other approaches:"
msgstr ""

#: ../../howto/deployment/modpython.txt:305
# 49ec3ca2a8044c8899338500f70a666d
msgid "Create a symbolic link to the admin static files from within your document root."
msgstr ""

#: ../../howto/deployment/modpython.txt:308
# 56d1b2546f884c7996134d43587b9305
msgid "Or, copy the admin static files so that they live within your Apache document root."
msgstr ""

#: ../../howto/deployment/modpython.txt:312
# 559016f9d9e14b72b5c111f2fa2b3087
msgid "Using \"eggs\" with mod_python"
msgstr ""

#: ../../howto/deployment/modpython.txt:314
# 626feaf911474f6a8845be63501babca
msgid "If you installed Django from a Python egg_ or are using eggs in your Django project, some extra configuration is required. Create an extra file in your project (or somewhere else) that contains something like the following:"
msgstr ""

#: ../../howto/deployment/modpython.txt:323
# 7072c6977a1b452d91fcc9b8b6f5948d
msgid "Here, ``/some/directory`` is a directory that the Apache Web server process can write to. It will be used as the location for any unpacking of code the eggs need to do."
msgstr ""

#: ../../howto/deployment/modpython.txt:327
# e856bc3767c34dbda55eeb8323b0635e
msgid "Then you have to tell mod_python to import this file before doing anything else. This is done using the PythonImport_ directive to mod_python. You need to ensure that you have specified the ``PythonInterpreter`` directive to mod_python as described above__ (you need to do this even if you aren't serving multiple installations in this case). Then add the ``PythonImport`` line in the main server configuration (i.e., outside the ``Location`` or ``VirtualHost`` sections). For example::"
msgstr ""

#: ../../howto/deployment/modpython.txt:338
# 81fe6052c72b49ffb49b1ebfb6ca88da
msgid "Note that you can use an absolute path here (or a normal dotted import path), as described in the `mod_python manual`_. We use an absolute path in the above example because if any Python path modifications are required to access your project, they will not have been done at the time the ``PythonImport`` line is processed."
msgstr ""

#: ../../howto/deployment/modpython.txt:350
# f273c21b3b5a459ebcf886b9043f32c3
msgid "Error handling"
msgstr ""

#: ../../howto/deployment/modpython.txt:352
# d9ff2b113cea4d5fa31d9754a1941a2b
msgid "When you use Apache/mod_python, errors will be caught by Django -- in other words, they won't propagate to the Apache level and won't appear in the Apache ``error_log``."
msgstr ""

#: ../../howto/deployment/modpython.txt:356
# 52ac2dd8aa0f43308f33f30d3130b204
msgid "The exception for this is if something is really wonky in your Django setup. In that case, you'll see an \"Internal Server Error\" page in your browser and the full Python traceback in your Apache ``error_log`` file. The ``error_log`` traceback is spread over multiple lines. (Yes, this is ugly and rather hard to read, but it's how mod_python does things.)"
msgstr ""

#: ../../howto/deployment/modpython.txt:363
# c28a0929924d43c9a97586cba601df4b
msgid "If you get a segmentation fault"
msgstr ""

#: ../../howto/deployment/modpython.txt:365
# a0359d76732646bb8d1a9d431d39f957
msgid "If Apache causes a segmentation fault, there are two probable causes, neither of which has to do with Django itself."
msgstr ""

#: ../../howto/deployment/modpython.txt:368
# 8d6eb833d5f44773912f8dee673e5e39
msgid "It may be because your Python code is importing the \"pyexpat\" module, which may conflict with the version embedded in Apache. For full information, see `Expat Causing Apache Crash`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:372
# 518553f06e0445eda8b6ee359dc41d0c
msgid "It may be because you're running mod_python and mod_php in the same Apache instance, with MySQL as your database backend. In some cases, this causes a known mod_python issue due to version conflicts in PHP and the Python MySQL backend. There's full information in the `mod_python FAQ entry`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:378
# 7c4030ca74b6431c8e9abc10fbd141cf
msgid "If you continue to have problems setting up mod_python, a good thing to do is get a barebones mod_python site working, without the Django framework. This is an easy way to isolate mod_python-specific problems. `Getting mod_python Working`_ details this procedure."
msgstr ""

#: ../../howto/deployment/modpython.txt:383
# db5267e2ea43430c845b3cb4a5c82f29
msgid "The next step should be to edit your test code and add an import of any Django-specific code you're using -- your views, your models, your URLconf, your RSS configuration, etc. Put these imports in your test handler function and access your test URL in a browser. If this causes a crash, you've confirmed it's the importing of Django code that causes the problem. Gradually reduce the set of imports until it stops crashing, so as to find the specific module that causes the problem. Drop down further into modules and look into their imports, as necessary."
msgstr ""

#: ../../howto/deployment/modpython.txt:397
# 5b83419a6bcf476bb4f61ab3a2484798
msgid "If you get a UnicodeEncodeError"
msgstr ""

#: ../../howto/deployment/modpython.txt:399
# 680f2da4cfee4ffc8753dca31d477eff
msgid "If you're taking advantage of the internationalization features of Django (see :doc:`/topics/i18n/index`) and you intend to allow users to upload files, you must ensure that the environment used to start Apache is configured to accept non-ASCII file names. If your environment is not correctly configured, you will trigger ``UnicodeEncodeError`` exceptions when calling functions like ``os.path()`` on filenames that contain non-ASCII characters."
msgstr ""

#: ../../howto/deployment/modpython.txt:406
# 65c9229accea4c89a40df1a3bee845ac
msgid "To avoid these problems, the environment used to start Apache should contain settings analogous to the following::"
msgstr ""

#: ../../howto/deployment/modpython.txt:412
# c88cc5268852405a8c1afcfe307d8094
msgid "Consult the documentation for your operating system for the appropriate syntax and location to put these configuration items; ``/etc/apache2/envvars`` is a common location on Unix platforms. Once you have added these statements to your environment, restart Apache."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:3
# 2813813d04fd4ccab529fdda44ac694e
msgid "How to use Django with Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:7
# 02c6e8a8deb047a3a70bd34b314aa505
msgid "Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no dependencies and is easy to install and use."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:12
# 07314a1e1b9544a58bca31e62c9fa6fa
msgid "There are two ways to use Gunicorn with Django. One is to have Gunicorn treat Django as just another WSGI application. The second is to use Gunicorn's special `integration with Django`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:19
# 8f56b217f0264ce08818c9f3e5ce6cbd
msgid "Installing Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:21
# 59bc3f59d96e4c198f6dc35d2737b801
msgid "Installing gunicorn is as easy as ``sudo pip install gunicorn``. For more details, see the `gunicorn documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:27
# 1f53152861fb4fdbb332ec8cfd5c0505
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:29
# 7f53b08d6bf740c3af2a0b6c50daab72
msgid "When Gunicorn is installed, a ``gunicorn`` command is available which starts the Gunicorn server process. At its simplest, gunicorn just needs to be called with a the location of a WSGI application object.::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:35
# 05685b7512b442e396e24fa15793ad6c
msgid "Where ``APP_MODULE`` is of the pattern ``MODULE_NAME:VARIABLE_NAME``. The module name should be a full dotted path. The variable name refers to a WSGI callable that should be found in the specified module."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:39
# b7d9a8ab50cb409db2c64e35e771ea62
msgid "So for a typical Django project, invoking gunicorn would look like::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:43
# 7761049ebeae4ba09fb7285f9209e97e
msgid "(This requires that your project be on the Python path; the simplest way to ensure that is to run this command from the same directory as your ``manage.py`` file.)"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:49
# 6955c503efbe4122b8a8fe742f1064ce
msgid "Using Gunicorn's Django integration"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:51
# 82ca107758df445798d94f8a94095ef6
msgid "To use Gunicorn's built-in Django integration, first add ``\"gunicorn\"`` to :setting:`INSTALLED_APPS`. Then run ``python manage.py run_gunicorn``."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:54
# 48bf035be03d45e9a4ea9cf940eb9441
msgid "This provides a few Django-specific niceties:"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:56
# 75d9f4879bd7458c863857428247636a
msgid "sets the gunicorn process name to be that of the project"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:58
# 88533b83e4024dfdbbac154786193eed
msgid "validates installed models"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:60
# 1b01350a55464cc990fa8f6b36baa4cb
msgid "allows an ``--adminmedia`` option for passing in the location of the admin media files, mimicing the behavior of runserver."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:63
# 66fea51deb3a4b65b3fcb98492a2aaac
msgid "See Gunicorn's `deployment documentation`_ for additional tips on starting and maintaining the Gunicorn server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:3
# 342c3565020c47c087274ed73251226a
msgid "How to deploy with WSGI"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:5
# dd587d69b800480fb1f9dfd060f41542
msgid "Django's primary deployment platform is WSGI_, the Python standard for web servers and applications."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:10
# 25fb34f349904681adb4fb961de88453
msgid "Django's :djadmin:`startproject` management command sets up a simple default WSGI configuration for you, which you can tweak as needed for your project, and direct any WSGI-compliant webserver to use. Django includes getting-started documentation for the following WSGI servers:"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:23
# 62eb1724e77d438c94a5e77925ce6ca0
msgid "The ``application`` object"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:25
# 37cfc3685d0a47fa8c87485bf7379bfd
msgid "One key concept of deploying with WSGI is to specify a central ``application`` callable object which the webserver uses to communicate with your code. This is commonly specified as an object named ``application`` in a Python module accessible to the server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:32
# ccec4bc3bd2c403da7a51891fd120cb1
msgid "The :djadmin:`startproject` command creates a :file:`projectname/wsgi.py` that contains such an application callable."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:37
# 9ad920f746e743b39b0d6e117e782cde
msgid "Upgrading from a previous release of Django and don't have a :file:`wsgi.py` file in your project? You can simply add one to your project's top-level Python package (probably next to :file:`settings.py` and :file:`urls.py`) with the contents below. If you want :djadmin:`runserver` to also make use of this WSGI file, you can also add ``WSGI_APPLICATION = \"mysite.wsgi.application\"`` in your settings (replacing ``mysite`` with the name of your project)."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:45
# 0407e1b505f24b5ba2f35c11155e0326
msgid "Initially this file contains::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:56
# 5ca5ff6eb19d49d0bbc162b4478bc33d
msgid "The ``os.environ.setdefault`` line just sets the default settings module to use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. You'll need to edit this line to replace ``mysite`` with the name of your project package, so the path to your settings module is correct."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:62
# ae306a2456f942b38ab4a4bfe3949ca6
msgid "To apply `WSGI middleware`_ you can simply wrap the application object in the same file::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:68
# d8b4bac8c7ec412790ddf437f2350325
msgid "You could also replace the Django WSGI application with a custom WSGI application that later delegates to the Django WSGI application, if you want to combine a Django application with a WSGI application of another framework."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:3
# 5f963ad56a8c457ba11f374ff2981d15
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:5
# b239caf5231d4aecae7c1e9eea0759c8
msgid "Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to get Django into production."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:11
# 9f20dbac23ac464496b71fb5392b77c7
msgid "mod_wsgi is an Apache module which can host any Python WSGI_ application, including Django. Django will work with any version of Apache which supports mod_wsgi."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:17
# 14e2f17283e049de996fe20392f8d9e7
msgid "The `official mod_wsgi documentation`_ is fantastic; it's your source for all the details about how to use mod_wsgi. You'll probably want to start with the `installation and configuration documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:27
# 59aa61e85e334b2caaf3aef5e456e715
msgid "Once you've got mod_wsgi installed and activated, edit your Apache server's ``httpd.conf`` file and add::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:40
# b698129e0cb14d939ca29d599afb3466
msgid "The first bit in the ``WSGIScriptAlias`` line is the base URL path you want to serve your application at (``/`` indicates the root url), and the second is the location of a \"WSGI file\" -- see below -- on your system, usually inside of your project package (``mysite`` in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:47
# 45fad0f5db49483f9cb3a6f1b04f12b7
msgid "The ``WSGIPythonPath`` line ensures that your project package is available for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:50
# b63fcb5eaada4a0cacc14fd69b5f684c
msgid "The ``<Directory>`` piece just ensures that Apache can access your :file:`wsgi.py` file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:53
# d4e7422b201b41e8b35b7e29c0ab3736
msgid "Next we'll need to ensure this :file:`wsgi.py` with a WSGI application object exists. As of Django version 1.4, :djadmin:`startproject` will have created one for you; otherwise, you'll need to create it. See the :doc:`WSGI overview documentation</howto/deployment/wsgi/index>` for the default contents you should put in this file, and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:60
# 383b6cb167304b6fb236aa1fae4dfef3
msgid "Using a virtualenv"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:62
# 0ea3b3321f1f4ca1a04de826a6a42dfb
msgid "If you install your project's Python dependencies inside a `virtualenv`_, you'll need to add the path to this virtualenv's ``site-packages`` directory to your Python path as well. To do this, you can add another line to your Apache configuration::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:69
# 548246be359a41b3889423203fb39b1f
msgid "Make sure you give the correct path to your virtualenv, and replace ``python2.X`` with the correct Python version (e.g. ``python2.7``)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:75
# 2602cc83aea24315938114290b2b0780
msgid "Using mod_wsgi daemon mode"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:77
# a1afd5815c59478da628ffd0d84bc03e
msgid "\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows platforms). See the `official mod_wsgi documentation`_ for details on setting up daemon mode. The only change required to the above configuration if you use daemon mode is that you can't use ``WSGIPythonPath``; instead you should use the ``python-path`` option to ``WSGIDaemonProcess``, for example::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:88
# 571efb3d5f1a422ca3f5be075b968af4
msgid "Serving files"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:90
# 1dd91d5a4ee74a0180e8771a6050962f
msgid "Django doesn't serve files itself; it leaves that job to whichever Web server you choose."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:102
# cea894f4bd4d4bc0939a94a08c32d8e5
msgid "If, however, you have no option but to serve media files on the same Apache ``VirtualHost`` as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:106
# 47d226bae77149e78026fb56c2266fab
msgid "This example sets up Django at the site root, but explicitly serves ``robots.txt``, ``favicon.ico``, any CSS file, and anything in the ``/static/`` and ``/media/`` URL space as a static file. All other URLs will be served using mod_wsgi::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:154
# 10fe5254016e4ac6b88991eeb2938b37
msgid "Note that the Django development server automatically serves the static files of the admin app (and any other installed apps), but this is not the case when you use any other server arrangement. You're responsible for setting up Apache, or whichever media server you're using, to serve the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:162
# 3d62b7ec3194490e8a3aaa3d443dda80
msgid "We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle the admin files (along with a Web server as outlined in the previous section; this means using the :djadmin:`collectstatic` management command to collect the static files in :setting:`STATIC_ROOT`, and then configuring your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), but here are three other approaches:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:169
# 07a0e30aabc246e583a1d0624edb4127
msgid "Create a symbolic link to the admin static files from within your document root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:173
# 79b82d649c3048f9a41cbcc3df9b3aa7
msgid "Use an ``Alias`` directive, as demonstrated above, to alias the appropriate URL (probably :setting:`STATIC_URL` + `admin/`) to the actual location of the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:177
# b8e0dfda634d492ebf91aa5288755a35
msgid "Copy the admin static files so that they live within your Apache document root."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:3
# 6e5b4b397d2b42288ff822890d9685a8
msgid "How to use Django with uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:7
# 4f0a39da119e4aa7ad052c4831ef85bc
msgid "uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application container server coded in pure C."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:13
# 19f6c4859e7b43b28503b03b654cf2c6
msgid "Prerequisite: uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:15
# 7b6f1eaab4fa4ffbb7ab69a8499ef823
msgid "The uWSGI wiki describes several `installation procedures`_. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:30
# 6e7653a7eec14b81ba20f9d60024cfe2
msgid "uWSGI model"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:32
# f225775729ac4f2e9829da9f11fe50ea
msgid "uWSGI operates on a client-server model. Your Web server (e.g., nginx, Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:39
# cc14030af0ae40c4be7566a470f3ea43
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:41
# 079775ca4c454332aa06f1ff571f3fda
msgid "uWSGI supports multiple ways to configure the process. See uWSGI's `configuration documentation`_ and `examples`_"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:47
# 7dc3281b273c46c09ec6121be58de612
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:63
# a070d3fbb1644022b80f9e37f649c9ec
msgid "This assumes you have a top-level project package named ``mysite``, and within it a module :file:`mysite/wsgi.py` that contains a WSGI ``application`` object. This is the layout you'll have if you ran ``django-admin.py startproject mysite`` (using your own project name in place of ``mysite``) with a recent version of Django. If this file doesn't exist, you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` documentation for the default contents you should put in this file and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:71
# 33c26234e4cf442a9c68fa4cb6b97abd
msgid "The Django-specific options here are:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:73
# 200f8560ed35409982d9d009e6ab39c4
msgid "``chdir``: The path to the directory that needs to be on Python's import path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:75
# b4b83958b9d54f3e8c57acb7f4332cff
msgid "``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module that :djadmin:`startproject` creates."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:77
# e4da88b84a804254be3bf4ff6a9e55ce
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:78
# e1ce09d5e4b6423e952347e4d24109ac
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:80
# ae9010c4abda4fcaa63d42bbc92fd908
msgid "Example ini configuration file::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:91
# 4dbfd5421291431aa07ebdd3ff4d388f
msgid "Example ini configuration file usage::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:95
# 3996e375c2cb4de4a5530e926b705b21
msgid "See the uWSGI docs on `managing the uWSGI process`_ for information on starting, stoping and reloading the uWSGI workers."
msgstr ""

#: ../../howto/error-reporting.txt:2
# dd89e02337524c328bd2befb542ff808
msgid "Error reporting"
msgstr ""

#: ../../howto/error-reporting.txt:4
# bb5f6a49de724fc6a2089c9b465699c9
msgid "When you're running a public site you should always turn off the :setting:`DEBUG` setting. That will make your server run much faster, and will also prevent malicious users from seeing details of your application that can be revealed by the error pages."
msgstr ""

#: ../../howto/error-reporting.txt:9
# 7ec1bc5ef6924f5ba2a83285e0496167
msgid "However, running with :setting:`DEBUG` set to ``False`` means you'll never see errors generated by your site -- everyone will just see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to create reports with details about those errors."
msgstr ""

#: ../../howto/error-reporting.txt:15
# 38b76208e3b749fdace9b434f6bba8a1
msgid "Email reports"
msgstr ""

#: ../../howto/error-reporting.txt:18
# a6a50d87e9d048549f9f51f95eb059ab
msgid "Server errors"
msgstr ""

#: ../../howto/error-reporting.txt:20
# 82db0a9eec014a8da55f66f1b87bfe9f
msgid "When :setting:`DEBUG` is ``False``, Django will email the users listed in the :setting:`ADMINS` setting whenever your code raises an unhandled exception and results in an internal server error (HTTP status code 500). This gives the administrators immediate notification of any errors. The :setting:`ADMINS` will get a description of the error, a complete Python traceback, and details about the HTTP request that caused the error."
msgstr ""

#: ../../howto/error-reporting.txt:29
# 7535a3e01b7c48ddade7bac2535e0f9d
msgid "In order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you'll need to specify :setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required depending on your mail server's configuration. Consult :doc:`the Django settings documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

#: ../../howto/error-reporting.txt:38
# 7285536588ea4a5087eb63fd35654a4f
msgid "By default, Django will send email from root@localhost. However, some mail providers reject all email from this address. To use a different sender address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../howto/error-reporting.txt:42
# 8bd3a756bc274e1aa3ddb8101944cf44
msgid "To disable this behavior, just remove all entries from the :setting:`ADMINS` setting."
msgstr ""

#: ../../howto/error-reporting.txt:49
# 57521373dc02489ca4a28c1ff68e6775
msgid "Server error emails are sent using the logging framework, so you can customize this behavior by :doc:`customizing your logging configuration </topics/logging>`."
msgstr ""

#: ../../howto/error-reporting.txt:54
# 033a5d51fd1b48d2acdc3b5b76745371
msgid "404 errors"
msgstr ""

#: ../../howto/error-reporting.txt:56
# 178a089743f74d099e9bbd1a3894dd01
msgid "Django can also be configured to email errors about broken links (404 \"page not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

#: ../../howto/error-reporting.txt:59
# 1be1495377ca475588ffb91879916708
msgid ":setting:`DEBUG` is ``False``"
msgstr ""

#: ../../howto/error-reporting.txt:61
# b3d6cb388b904af08a20b4959c16dd36
msgid ":setting:`SEND_BROKEN_LINK_EMAILS` is ``True``"
msgstr ""

#: ../../howto/error-reporting.txt:63
# 01d299364b9a4f8dae87018c1c0a5e17
msgid "Your :setting:`MIDDLEWARE_CLASSES` setting includes ``CommonMiddleware`` (which it does by default)."
msgstr ""

#: ../../howto/error-reporting.txt:66
# 937a1cafbced46378ddb355c2ae33263
msgid "If those conditions are met, Django will email the users listed in the :setting:`MANAGERS` setting whenever your code raises a 404 and the request has a referer. (It doesn't bother to email for 404s that don't have a referer -- those are usually just people typing in broken URLs or broken Web 'bots)."
msgstr ""

#: ../../howto/error-reporting.txt:71
# 9e2431510f8b4346a96aa1298befe531
msgid "You can tell Django to stop reporting particular 404s by tweaking the :setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled regular expression objects. For example::"
msgstr ""

#: ../../howto/error-reporting.txt:81
# 0e781e93ccd546e084612cbde04e55c9
msgid "In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will *not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

#: ../../howto/error-reporting.txt:84
# dd0df46e14fa4812b0c014327e335727
msgid "The following example shows how to exclude some conventional URLs that browsers and crawlers often request::"
msgstr ""

#: ../../howto/error-reporting.txt:94
# b3705fd88edc4c8f8be0f80a1d783f25
msgid "(Note that these are regular expressions, so we put a backslash in front of periods to escape them.)"
msgstr ""

#: ../../howto/error-reporting.txt:97
# 5710fdf287894bffab01bab12b994481
msgid "The best way to disable this behavior is to set :setting:`SEND_BROKEN_LINK_EMAILS` to ``False``."
msgstr ""

#: ../../howto/error-reporting.txt:104
# e1511d8961b447cf978263205bd6baab
msgid "404 errors are logged using the logging framework. By default, these log records are ignored, but you can use them for error reporting by writing a handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

#: ../../howto/error-reporting.txt:112
# 9b3e27ecafbb4434949116a17502463d
msgid "Previously, two settings were used to control which URLs not to report: :setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS`. They were replaced by :setting:`IGNORABLE_404_URLS`."
msgstr ""

#: ../../howto/error-reporting.txt:119
# c0e856f7145142c1a7e90dafa50bd183
msgid "Filtering error reports"
msgstr ""

#: ../../howto/error-reporting.txt:124
# 7526601810364a918a9575245ba53a7f
msgid "Filtering sensitive information"
msgstr ""

#: ../../howto/error-reporting.txt:126
# de16c5d5e0684a309f51615d6be50e15
msgid "Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the `full traceback`_ for the exception raised, each `traceback frame`_'s local variables, and the :class:`HttpRequest`'s :ref:`attributes<httprequest-attributes>`."
msgstr ""

#: ../../howto/error-reporting.txt:132
# c7851864f7ff4d4a95eb5ee962e423db
msgid "However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user's password or credit card number. So Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where :setting:`DEBUG` is set to ``False``): :func:`sensitive_variables` and :func:`sensitive_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:144
# 4d593a3efed544b09c59250c3e3ef62c
msgid "If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:158
# c9aee16d832247458c5caf53ef7d17fe
msgid "In the above example, the values for the ``user``, ``pw`` and ``cc`` variables will be hidden and replaced with stars (`**********`) in the error reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:163
# 274ba00d794749498d2094e547477c3c
msgid "To systematically hide all local variables of a function from error logs, do not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:172
# 972450dd6bc84e90ab57d0f94c6bee31
msgid "If one of your views receives an :class:`HttpRequest` object with :attr:`POST parameters<HttpRequest.POST>` susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:188
# 98ae898b09d44287b58376dbbfa6c9b8
msgid "In the above example, the values for the ``pass_word`` and ``credit_card_number`` POST parameters will be hidden and replaced with stars (`**********`) in the request's representation inside the error reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:193
# d20f67073057492f974799b25f3edbb3
msgid "To systematically hide all POST parameters of a request in error reports, do not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:204
# d96685087e184df4816f287b3932f564
msgid "Since version 1.4, all POST parameters are systematically filtered out of error reports for certain :mod:`contrib.views.auth` views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` and ``user_change_password`` in the ``auth`` admin) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../howto/error-reporting.txt:213
# e5986ff78205415182e85fb845f95871
msgid "Custom error reports"
msgstr ""

#: ../../howto/error-reporting.txt:215
# 471cd2f321884cf491ebd6137de7bdbf
msgid "All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, respectively, annotate the decorated function with the names of sensitive variables and annotate the ``HttpRequest`` object with the names of sensitive POST parameters, so that this sensitive information can later be filtered out of reports when an error occurs. The actual filtering is done by Django's default error reporter filter: :class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses the decorators' annotations to replace the corresponding values with stars (`**********`) when the error reports are produced. If you wish to override or customize this default behavior for your entire site, you need to define your own filter class and tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

#: ../../howto/error-reporting.txt:230
# 85239c478c754fdbb238ef51d3ffe7e5
msgid "You may also control in a more granular way which filter to use within any given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` attribute::"
msgstr ""

#: ../../howto/error-reporting.txt:239
# d11340d0f4064d8fac6e37b7de41b35d
msgid "Your custom filter class needs to inherit from :class:`django.views.debug.SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

#: ../../howto/error-reporting.txt:247
# 351b1fbf2339401b8be0278397787498
msgid "Returns ``True`` to activate the filtering operated in the other methods. By default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/error-reporting.txt:252
# fbc68e625ea7461faa917d9894f2b9e9
msgid "Returns the representation string of the request object, that is, the value that would be returned by ``repr(request)``, except it uses the filtered dictionary of POST parameters as determined by :meth:`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:259
# 3b68e2bcca6a4443a9a1123df25ba31a
msgid "Returns the filtered dictionary of POST parameters. By default it replaces the values of sensitive parameters with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:264
# ee3333e28ecd40a28dd87876c24ccb3b
msgid "Returns the filtered dictionary of local variables for the given traceback frame. By default it replaces the values of sensitive variables with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:270
# e282cc35226447a8b46b95ade3b33e42
msgid "You can also set up custom error reporting by writing a custom piece of :ref:`exception middleware <exception-middleware>`. If you do write custom error handling, it's a good idea to emulate Django's built-in error handling and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/index.txt:2
# 350a7d74f5ca4b53b151c4be71a6cabd
msgid "\"How-to\" guides"
msgstr ""

#: ../../howto/index.txt:4
# 79d6aa161ecf46d887b2a1790496b6c2
msgid "Here you'll find short answers to \"How do I....?\" types of questions. These how-to guides don't cover topics in depth -- you'll find that material in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides will help you quickly accomplish common tasks."
msgstr ""

#: ../../howto/index.txt:29
# f4e0a6167d4b4ca5a10c822d6493092e
msgid "The `Django community aggregator`_, where we aggregate content from the global Django community. Many writers in the aggregator write this sort of how-to material."
msgstr ""

#: ../../howto/initial-data.txt:3
# fb990628ccdb448cb1a1a273b5e9a67f
msgid "Providing initial data for models"
msgstr ""

#: ../../howto/initial-data.txt:5
# af237eede7d14d3db556ad48cbb028be
msgid "It's sometimes useful to pre-populate your database with hard-coded data when you're first setting up an app. There's a couple of ways you can have Django automatically create this data: you can provide `initial data via fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

#: ../../howto/initial-data.txt:10
# 8a38c4278ef245da9164e5fc354a061e
msgid "In general, using a fixture is a cleaner method since it's database-agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

#: ../../howto/initial-data.txt:19
# fea6804ac996413fb82a7196739d60e9
msgid "Providing initial data with fixtures"
msgstr ""

#: ../../howto/initial-data.txt:21
# af90dc6d6c5c47b5957c1e38097790be
msgid "A fixture is a collection of data that Django knows how to import into a database. The most straightforward way of creating a fixture if you've already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` command. Or, you can write fixtures by hand; fixtures can be written as XML, YAML, or JSON documents. The :doc:`serialization documentation </topics/serialization>` has more details about each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""

#: ../../howto/initial-data.txt:29
# f30723c1921f4c60a977c585d0cbbae9
msgid "As an example, though, here's what a fixture for a simple ``Person`` model might look like in JSON:"
msgstr ""

#: ../../howto/initial-data.txt:53
# 19a86984210b42eb83945283f5301362
msgid "And here's that same fixture as YAML:"
msgstr ""

#: ../../howto/initial-data.txt:68
# a47b10a873224d6ea3bb282b6e15a41e
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

#: ../../howto/initial-data.txt:70
# 86482e3c06c3414d8126eeeccf30a7e3
msgid "Loading data is easy: just call :djadmin:`manage.py loaddata <fixturename> <loaddata>`, where ``<fixturename>`` is the name of the fixture file you've created. Each time you run :djadmin:`loaddata`, the data will be read from the fixture and re-loaded into the database. Note this means that if you change one of the rows created by a fixture and then run :djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

#: ../../howto/initial-data.txt:78
# af4696318dc84df29a9e48a06f9f6a60
msgid "Automatically loading initial data fixtures"
msgstr ""

#: ../../howto/initial-data.txt:80
# f4982204f7a54f6788470abae643f8de
msgid "If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture will be loaded every time you run :djadmin:`syncdb`. This is extremely convenient, but be careful: remember that the data will be refreshed *every time* you run :djadmin:`syncdb`. So don't use ``initial_data`` for data you'll want to edit."
msgstr ""

#: ../../howto/initial-data.txt:86
# 3fa417d4c98c48fc8048ee980c07a3ae
msgid "Where Django finds fixture files"
msgstr ""

#: ../../howto/initial-data.txt:88
# dd4856cd907e417f8c5438a0e19253cb
msgid "By default, Django looks in the ``fixtures`` directory inside each app for fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of additional directories where Django should look."
msgstr ""

#: ../../howto/initial-data.txt:92
# ac260fa2544b4d3d886139854cce9381
msgid "When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify an absolute path to a fixture file, which overrides searching the usual directories."
msgstr ""

#: ../../howto/initial-data.txt:98
# 32f8c784fd9345a1967a20109dd86273
msgid "Fixtures are also used by the :ref:`testing framework <topics-testing-fixtures>` to help set up a consistent test environment."
msgstr ""

#: ../../howto/initial-data.txt:104
# fab5513bcad64ac298288fea83082d0f
msgid "Providing initial SQL data"
msgstr ""

#: ../../howto/initial-data.txt:106
# c74486efcc074c6295f23ab5f2c12730
msgid "Django provides a hook for passing the database arbitrary SQL that's executed just after the CREATE TABLE statements when you run :djadmin:`syncdb`. You can use this hook to populate default records, or you could also create SQL functions, views, triggers, etc."
msgstr ""

#: ../../howto/initial-data.txt:111
# 535eba9fd9584e55b7dd1a4de1b39fa9
msgid "The hook is simple: Django just looks for a file called ``sql/<modelname>.sql``, in your app directory, where ``<modelname>`` is the model's name in lowercase."
msgstr ""

#: ../../howto/initial-data.txt:114
# 5e284eb5d17a446b9710ef087167a80c
msgid "So, if you had a ``Person`` model in an app called ``myapp``, you could add arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` directory. Here's an example of what the file might contain:"
msgstr ""

#: ../../howto/initial-data.txt:123
# 96e216092283432eb2be227a66eacbb2
msgid "Each SQL file, if given, is expected to contain valid SQL statements which will insert the desired data (e.g., properly-formatted ``INSERT`` statements separated by semicolons)."
msgstr ""

#: ../../howto/initial-data.txt:127
# 7f8502ae2def4b989b847690daf8e53d
msgid "The SQL files are read by the :djadmin:`sqlcustom`, :djadmin:`sqlreset`, :djadmin:`sqlall` and :djadmin:`reset` commands in :doc:`manage.py </ref/django-admin>`. Refer to the :doc:`manage.py documentation </ref/django-admin>` for more information."
msgstr ""

#: ../../howto/initial-data.txt:132
# a45aa04113e740ceb2bcdbcb9aadf619
msgid "Note that if you have multiple SQL data files, there's no guarantee of the order in which they're executed. The only thing you can assume is that, by the time your custom data files are executed, all the database tables already will have been created."
msgstr ""

#: ../../howto/initial-data.txt:139
# b6c6a286816341ee92034bdfc8ef5dc3
msgid "This technique *cannot* be used to provide initial data for testing purposes. Django's test framework flushes the contents of the test database after each test; as a result, any data added using the custom SQL hook will be lost."
msgstr ""

#: ../../howto/initial-data.txt:144
# 39b9b1cb95b24cd894c897df3f6c8a77
msgid "If you require data for a test case, you should add it using either a :ref:`test fixture <topics-testing-fixtures>`, or programatically add it during the ``setUp()`` of your test case."
msgstr ""

#: ../../howto/initial-data.txt:149
# 3c3ef4d34ac846ccaa9d755f8c5617c7
msgid "Database-backend-specific SQL data"
msgstr ""

#: ../../howto/initial-data.txt:151
# d816de9cd70c494c87f00fbd4b45a8fa
msgid "There's also a hook for backend-specific SQL data. For example, you can have separate initial-data files for PostgreSQL and SQLite. For each app, Django looks for a file called ``<appname>/sql/<modelname>.<backend>.sql``, where ``<appname>`` is your app directory, ``<modelname>`` is the model's name in lowercase and ``<backend>`` is the last part of the module name provided for the :setting:`ENGINE` in your settings file (e.g., if you have defined a database with an :setting:`ENGINE` value of ``django.db.backends.sqlite3``, Django will look for ``<appname>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

#: ../../howto/initial-data.txt:162
# ad8f4ca9b77045d8aa0325a8909f3332
msgid "Backend-specific SQL data is executed before non-backend-specific SQL data. For example, if your app contains the files ``sql/person.sql`` and ``sql/person.sqlite3.sql`` and you're installing the app on SQLite, Django will execute the contents of ``sql/person.sqlite.sql`` first, then ``sql/person.sql``."
msgstr ""

#: ../../howto/jython.txt:3
# 9d4e789d726245f887ef1fcceb36f282
msgid "Running Django on Jython"
msgstr ""

#: ../../howto/jython.txt:7
# ae2fc4dc7ee84a86a7def0653f63f7e1
msgid "Jython_ is an implementation of Python that runs on the Java platform (JVM). Django runs cleanly on Jython version 2.5 or later, which means you can deploy Django on any Java platform."
msgstr ""

#: ../../howto/jython.txt:11
# eedc55933a2440229849d04da6bb486f
msgid "This document will get you up and running with Django on top of Jython."
msgstr ""

#: ../../howto/jython.txt:16
# 8db2406952f24de08428ba92463088ef
msgid "Installing Jython"
msgstr ""

#: ../../howto/jython.txt:18
# 936dd282196740f49223fafe4e8ec74f
msgid "Django works with Jython versions 2.5b3 and higher. Download Jython at http://www.jython.org/."
msgstr ""

#: ../../howto/jython.txt:22
# 90bdc5409ed34721827673e15ac613cc
msgid "Creating a servlet container"
msgstr ""

#: ../../howto/jython.txt:24
# c42df91825a04b0bbd9728295d194963
msgid "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight Web server you can use for testing, so you won't need to set up anything else until you're ready to deploy Django in production."
msgstr ""

#: ../../howto/jython.txt:28
# 66881419abf445d6891e4742bd8ffcca
msgid "If you want to use Django on a production site, use a Java servlet container, such as `Apache Tomcat`_. Full JavaEE applications servers such as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they include."
msgstr ""

#: ../../howto/jython.txt:37
# 10fd886d954247cba838cfc6f32954b5
msgid "Installing Django"
msgstr ""

#: ../../howto/jython.txt:39
# e127b5050dae406d95bd8788eaafcf81
msgid "The next step is to install Django itself. This is exactly the same as installing Django on standard Python, so see :ref:`removing-old-versions-of-django` and :ref:`install-django-code` for instructions."
msgstr ""

#: ../../howto/jython.txt:45
# b49de8434309448482b17cb11936a8d2
msgid "Installing Jython platform support libraries"
msgstr ""

#: ../../howto/jython.txt:47
# b76da7ba0bb541bcb710dafe992e7818
msgid "The `django-jython`_ project contains database backends and management commands for Django/Jython development. Note that the builtin Django backends won't work on top of Jython."
msgstr ""

#: ../../howto/jython.txt:53
# 932b1174e1a84f2eae85e25db1f5091b
msgid "To install it, follow the `installation instructions`_ detailed on the project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

#: ../../howto/jython.txt:60
# 228e7395c2d3408292de32489aa39873
msgid "Differences with Django on Jython"
msgstr ""

#: ../../howto/jython.txt:64
# 20d52cb7fa8c41ef8e3bd948e866d14d
msgid "At this point, Django on Jython should behave nearly identically to Django running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

#: ../../howto/jython.txt:67
# f48d7076d03c4cb69ff69b71bdd4b776
msgid "Remember to use the ``jython`` command instead of ``python``. The documentation uses ``python`` for consistency, but if you're using Jython you'll want to mentally replace ``python`` with ``jython`` every time it occurs."
msgstr ""

#: ../../howto/jython.txt:72
# f5e059f290444cfd8b5db5904624cb3d
msgid "Similarly, you'll need to use the ``JYTHONPATH`` environment variable instead of ``PYTHONPATH``."
msgstr ""

#: ../../howto/legacy-databases.txt:3
# e56f6ed6e63f40828fdf18f658f7a87c
msgid "Integrating Django with a legacy database"
msgstr ""

#: ../../howto/legacy-databases.txt:5
# d7b75bb4f5e9483191891595c4a4471f
msgid "While Django is best suited for developing new applications, it's quite possible to integrate it into legacy databases. Django includes a couple of utilities to automate as much of this process as possible."
msgstr ""

#: ../../howto/legacy-databases.txt:9
# 6996c92895634fbdb0fa9c0c7b567c30
msgid "This document assumes you know the Django basics, as covered in the :doc:`tutorial </intro/tutorial01>`."
msgstr ""

#: ../../howto/legacy-databases.txt:12
# 9ed9b0f648d84e99a3e839ba205c5153
msgid "Once you've got Django set up, you'll follow this general process to integrate with an existing database."
msgstr ""

#: ../../howto/legacy-databases.txt:16
# bd6a4a07dbe0406fbf773d8bcf5ae0de
msgid "Give Django your database parameters"
msgstr ""

#: ../../howto/legacy-databases.txt:18
# 73583de6f9714e4ba7cc05356b93daf4
msgid "You'll need to tell Django what your database connection parameters are, and what the name of the database is. Do that by editing the :setting:`DATABASES` setting and assigning values to the following keys for the ``'default'`` connection:"
msgstr ""

#: ../../howto/legacy-databases.txt:23
# a5d9b5ff358f44cebcfe9325e18b7a14
msgid ":setting:`NAME`"
msgstr ""

#: ../../howto/legacy-databases.txt:24
# 2408302998aa44b18bfb7025bc476341
msgid ":setting:`ENGINE`"
msgstr ""

#: ../../howto/legacy-databases.txt:25
# 4e59b5d2c93b4741af7c4f945579eb27
msgid ":setting:`USER`"
msgstr ""

#: ../../howto/legacy-databases.txt:26
# ee504ced5c6442b89a4c009be01f8604
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../howto/legacy-databases.txt:27
# 5fc657fd3a614c1b9092bbb26a90e3aa
msgid ":setting:`HOST`"
msgstr ""

#: ../../howto/legacy-databases.txt:28
# 6e44bafa56cc4a928ce4500c641e2f00
msgid ":setting:`PORT`"
msgstr ""

#: ../../howto/legacy-databases.txt:31
# 643d5bef5d2c4516b73ac6ea427074ac
msgid "Auto-generate the models"
msgstr ""

#: ../../howto/legacy-databases.txt:35
# 6a37dd407d4a44f4bef18db83012bdc6
msgid "Django comes with a utility called :djadmin:`inspectdb` that can create models by introspecting an existing database. You can view the output by running this command::"
msgstr ""

#: ../../howto/legacy-databases.txt:41
# c2e93d59bbb1404e9403f35952614ba6
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

#: ../../howto/legacy-databases.txt:45
# 1752cdec133b4f56b2319b8388b179d0
msgid "This feature is meant as a shortcut, not as definitive model generation. See the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

#: ../../howto/legacy-databases.txt:48
# 5e4f0de9b8c34b82b3c2bc4a12aa3284
msgid "Once you've cleaned up your models, name the file ``models.py`` and put it in the Python package that holds your app. Then add the app to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../howto/legacy-databases.txt:53
# d2114c32e3744164b0b2f9fa3b314e6b
msgid "Install the core Django tables"
msgstr ""

#: ../../howto/legacy-databases.txt:55
# 26b3a217a61f4decac4f6bb715aa33d6
msgid "Next, run the :djadmin:`syncdb` command to install any extra needed database records such as admin permissions and content types::"
msgstr ""

#: ../../howto/legacy-databases.txt:61
# c2aed0bf549547198b7fc8d4edc90e46
msgid "Test and tweak"
msgstr ""

#: ../../howto/legacy-databases.txt:63
# 63b6bd03471e4913ad53166861d897a3
msgid "Those are the basic steps -- from here you'll want to tweak the models Django generated until they work the way you'd like. Try accessing your data via the Django database API, and try editing objects via Django's admin site, and edit the models file accordingly."
msgstr ""

#: ../../howto/outputting-csv.txt:3
# 57151da820e740cb959056c31c477a6c
msgid "Outputting CSV with Django"
msgstr ""

#: ../../howto/outputting-csv.txt:5
# ca0588f67d7047d3967145fbc3952893
msgid "This document explains how to output CSV (Comma Separated Values) dynamically using Django views. To do this, you can either use the Python CSV library or the Django template system."
msgstr ""

#: ../../howto/outputting-csv.txt:10
# 0af54d88eb2c47e5a45e53806529ff46
msgid "Using the Python CSV library"
msgstr ""

#: ../../howto/outputting-csv.txt:12
# ab2aeb6a104c41f58dc0e1dae0b3508a
msgid "Python comes with a CSV library, :mod:`csv`. The key to using it with Django is that the :mod:`csv` module's CSV-creation capability acts on file-like objects, and Django's :class:`~django.http.HttpResponse` objects are file-like objects."
msgstr ""

#: ../../howto/outputting-csv.txt:16
# 17eea49cd2714b0280e56ebdd8f9a095
msgid "Here's an example::"
msgstr ""

#: ../../howto/outputting-csv.txt:32
#: ../../howto/outputting-pdf.txt:63
# 7ab53ea413074ae395c2f5213c643555
# 9f4dab34df674110a39bd17128a7c4b7
msgid "The code and comments should be self-explanatory, but a few things deserve a mention:"
msgstr ""

#: ../../howto/outputting-csv.txt:35
# b82c58f0ccfc4cdcbd6699d74ade1fb9
msgid "The response gets a special MIME type, :mimetype:`text/csv`. This tells browsers that the document is a CSV file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which will result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-csv.txt:40
# 4411f443d1944fd5b90a11e2ed768d4d
msgid "The response gets an additional ``Content-Disposition`` header, which contains the name of the CSV file. This filename is arbitrary; call it whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, etc."
msgstr ""

#: ../../howto/outputting-csv.txt:45
# 4d655f9d6046439dab417cf15d3bc2f1
msgid "Hooking into the CSV-generation API is easy: Just pass ``response`` as the first argument to ``csv.writer``. The ``csv.writer`` function expects a file-like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-csv.txt:50
# 5c380fb39ee04b56a5f88b04cf1b7dc0
msgid "For each row in your CSV file, call ``writer.writerow``, passing it an iterable object such as a list or tuple."
msgstr ""

#: ../../howto/outputting-csv.txt:53
# e15f737f5d274f2d8d612b147f7dcfe0
msgid "The CSV module takes care of quoting for you, so you don't have to worry about escaping strings with quotes or commas in them. Just pass ``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

#: ../../howto/outputting-csv.txt:58
# 06df92bf7e534f76af96cbbd794f9df5
msgid "Handling Unicode"
msgstr ""

#: ../../howto/outputting-csv.txt:60
# d9c92fabaf5a4d0db4c881f66b753191
msgid "Python's :mod:`csv` module does not support Unicode input. Since Django uses Unicode internally this means strings read from sources such as :class:`~django.http.HttpRequest` are potentially problematic. There are a few options for handling this:"
msgstr ""

#: ../../howto/outputting-csv.txt:65
# a4fe25996e164b779ccd87d2888724c9
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

#: ../../howto/outputting-csv.txt:67
# ce72b621ea114b99b1d97780e4636df3
msgid "Use the ``UnicodeWriter`` class provided in the `csv module's examples section`_."
msgstr ""

#: ../../howto/outputting-csv.txt:70
# d2fcf5a6f90d4a129159330347b5a3f8
msgid "Use the `python-unicodecsv module`_, which aims to be a drop-in replacement for :mod:`csv` that gracefully handles Unicode."
msgstr ""

#: ../../howto/outputting-csv.txt:73
# c6d8d0b8ba934600aa45fa90af268c78
msgid "For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

#: ../../howto/outputting-csv.txt:79
# 88ef392549c3449887f6478e97714597
msgid "Using the template system"
msgstr ""

#: ../../howto/outputting-csv.txt:81
# 8da222cdcfb04fa29e86d98afee21687
msgid "Alternatively, you can use the :doc:`Django template system </topics/templates>` to generate CSV. This is lower-level than using the convenient Python :mod:`csv` module, but the solution is presented here for completeness."
msgstr ""

#: ../../howto/outputting-csv.txt:85
# f8e38a6c0444423583c7b5e307d15b14
msgid "The idea here is to pass a list of items to your template, and have the template output the commas in a :ttag:`for` loop."
msgstr ""

#: ../../howto/outputting-csv.txt:88
# f5ba65ce7c604f7685944b58c5c02ef4
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

#: ../../howto/outputting-csv.txt:112
# 9f034a2a43d34aba9206557a59dc843e
msgid "The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code -- such as the ``mimetype='text/csv'`` -- is the same."
msgstr ""

#: ../../howto/outputting-csv.txt:116
# 55ce0e97e4f744c686b9e4e3f53f4387
msgid "Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

#: ../../howto/outputting-csv.txt:123
# de016fcc212b4a7a807c0f009ace3ed8
msgid "This template is quite basic. It just iterates over the given data and displays a line of CSV for each row. It uses the :tfilter:`addslashes` template filter to ensure there aren't any problems with quotes."
msgstr ""

#: ../../howto/outputting-csv.txt:128
# 2a4f1c18964a44e8960cca319ed325a0
msgid "Other text-based formats"
msgstr ""

#: ../../howto/outputting-csv.txt:130
# 3129b678766e47579ffcd52c40532e29
msgid "Notice that there isn't very much specific to CSV here -- just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an example."
msgstr ""

#: ../../howto/outputting-pdf.txt:3
# 85d61b3988bd4c3f8b5589fce22a4f04
msgid "Outputting PDFs with Django"
msgstr ""

#: ../../howto/outputting-pdf.txt:5
# f813d03d92d84e81b825fb172a18cfe0
msgid "This document explains how to output PDF files dynamically using Django views. This is made possible by the excellent, open-source ReportLab_ Python PDF library."
msgstr ""

#: ../../howto/outputting-pdf.txt:9
# e05a32a7787b46f88df57f5deaa79d3a
msgid "The advantage of generating PDF files dynamically is that you can create customized PDFs for different purposes -- say, for different users or different pieces of content."
msgstr ""

#: ../../howto/outputting-pdf.txt:13
# 0d5a7a041996488faddd41a233fcc80e
msgid "For example, Django was used at kusports.com_ to generate customized, printer-friendly NCAA tournament brackets, as PDF files, for people participating in a March Madness contest."
msgstr ""

#: ../../howto/outputting-pdf.txt:21
# 1696a0692f2947ee92f8d44df9633aab
msgid "Install ReportLab"
msgstr ""

#: ../../howto/outputting-pdf.txt:23
# ac9d785bd4a04a7bbbf62253f241d36a
msgid "Download and install the ReportLab library from http://www.reportlab.org/oss/rl-toolkit/download/. The `user guide`_ (not coincidentally, a PDF file) explains how to install it."
msgstr ""

#: ../../howto/outputting-pdf.txt:26
# a9d7fad0aaec4b55985c3315b26f2305
msgid "Test your installation by importing it in the Python interactive interpreter::"
msgstr ""

#: ../../howto/outputting-pdf.txt:30
# 083ceef00a1c46b99c21b5cd489bb41b
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

#: ../../howto/outputting-pdf.txt:35
# 9c1cdccee23b45de89d958b0ffd7115b
msgid "Write your view"
msgstr ""

#: ../../howto/outputting-pdf.txt:37
# 651e8592952544218135a690d9aacad7
msgid "The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django's :class:`~django.http.HttpResponse` objects are file-like objects."
msgstr ""

#: ../../howto/outputting-pdf.txt:41
# 79f3bef6bb374d54bc52cd527f1138a2
msgid "Here's a \"Hello World\" example::"
msgstr ""

#: ../../howto/outputting-pdf.txt:66
# f51ae1dfa98d42778c90365c0919e7a8
msgid "The response gets a special MIME type, :mimetype:`application/pdf`. This tells browsers that the document is a PDF file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-pdf.txt:72
# 63dbd49e9db5458aa9e10cb813a32066
msgid "The response gets an additional ``Content-Disposition`` header, which contains the name of the PDF file. This filename is arbitrary: Call it whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, etc."
msgstr ""

#: ../../howto/outputting-pdf.txt:77
# 825a8c41678a4543ac8d0cec0f6bdddc
msgid "The ``Content-Disposition`` header starts with ``'attachment; '`` in this example. This forces Web browsers to pop-up a dialog box prompting/confirming how to handle the document even if a default is set on the machine. If you leave off ``'attachment;'``, browsers will handle the PDF using whatever program/plugin they've been configured to use for PDFs. Here's what that code would look like::"
msgstr ""

#: ../../howto/outputting-pdf.txt:86
# e8799398e7c9468188c70ea8824a21b0
msgid "Hooking into the ReportLab API is easy: Just pass ``response`` as the first argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-pdf.txt:91
# 3eab80fe3f0f49858538a91c554b0e87
msgid "Note that all subsequent PDF-generation methods are called on the PDF object (in this case, ``p``) -- not on ``response``."
msgstr ""

#: ../../howto/outputting-pdf.txt:94
# 893ab39b7f7e438c99abb505c8558386
msgid "Finally, it's important to call ``showPage()`` and ``save()`` on the PDF file."
msgstr ""

#: ../../howto/outputting-pdf.txt:98
# 37fff0fa91d74ef7906c04767aa758c3
msgid "Complex PDFs"
msgstr ""

#: ../../howto/outputting-pdf.txt:100
# d982bb65bb244dacbfbd94fb903c6f04
msgid "If you're creating a complex PDF document with ReportLab, consider using the :mod:`cStringIO` library as a temporary holding place for your PDF file. This library provides a file-like object interface that is particularly efficient. Here's the above \"Hello World\" example rewritten to use :mod:`cStringIO`::"
msgstr ""

#: ../../howto/outputting-pdf.txt:138
# b169650e9ae74067b85fbb7e835d16c5
msgid "Further resources"
msgstr ""

#: ../../howto/outputting-pdf.txt:140
# d10824809cc040de9b8c0df1a4bcb90e
msgid "PDFlib_ is another PDF-generation library that has Python bindings. To use it with Django, just use the same concepts explained in this article."
msgstr ""

#: ../../howto/outputting-pdf.txt:142
# 2e23509d88f948aba7870a12ef63a9b1
msgid "`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an example of how to integrate Pisa with Django."
msgstr ""

#: ../../howto/outputting-pdf.txt:144
# 6f1ad08023044626ba2bf4b7a4833008
msgid "HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't have a Python interface, but you can escape out to the shell using ``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

#: ../../howto/outputting-pdf.txt:153
# b2b36abdca3a4658afc32a33a25675ca
msgid "Other formats"
msgstr ""

#: ../../howto/outputting-pdf.txt:155
# b439948c0c9b48169a02f553db7db00c
msgid "Notice that there isn't a lot in these examples that's PDF-specific -- just the bits using ``reportlab``. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see :doc:`/howto/outputting-csv` for another example and some techniques you can use when generated text-based formats."
msgstr ""

#: ../../howto/static-files.txt:3
# 8dae35a8f7c24308b103960ec972a0bf
msgid "Managing static files"
msgstr ""

#: ../../howto/static-files.txt:7
# 849902197a7d4b3f8598746c6486672c
msgid "Django developers mostly concern themselves with the dynamic parts of web applications -- the views and templates that render anew for each request. But web applications have other parts: the static files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../howto/static-files.txt:12
# 3be2e962b84f4587bb8f22765cbedbe4
msgid "For small projects, this isn't a big deal, because you can just keep the static files somewhere your web server can find it. However, in bigger projects -- especially those comprised of multiple apps -- dealing with the multiple sets of static files provided by each application starts to get tricky."
msgstr ""

#: ../../howto/static-files.txt:18
# e2948426e07f4a17b5eee8c659f028ac
msgid "That's what ``django.contrib.staticfiles`` is for: it collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production."
msgstr ""

#: ../../howto/static-files.txt:24
# 1061e047133a4504a72ff6e5cf8919f1
msgid "If you've used the `django-staticfiles`_ third-party app before, then ``django.contrib.staticfiles`` will look very familiar. That's because they're essentially the same code: ``django.contrib.staticfiles`` started its life as `django-staticfiles`_ and was merged into Django 1.3."
msgstr ""

#: ../../howto/static-files.txt:29
# 86685eb3ac1f4676a7c7fcff4a75eef6
msgid "If you're upgrading from ``django-staticfiles``, please see `Upgrading from django-staticfiles`_, below, for a few minor changes you'll need to make."
msgstr ""

#: ../../howto/static-files.txt:35
# 98b1e09022f649d89522e12fa06d2cef
msgid "Using ``django.contrib.staticfiles``"
msgstr ""

#: ../../howto/static-files.txt:38
# 4c5478a43ced44b6b9732ad215ceb739
msgid "Basic usage"
msgstr ""

#: ../../howto/static-files.txt:40
# 298f58befffa45b7b28c99103d053296
msgid "Put your static files somewhere that ``staticfiles`` will find them."
msgstr ""

#: ../../howto/static-files.txt:42
# 4a4ae5ba48f34d43a7b3ed214df27e31
msgid "By default, this means within ``static/`` subdirectories of apps in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/static-files.txt:45
# f6bcebec720f47f793fd38e9f6a8aa6a
msgid "Your project will probably also have static assets that aren't tied to a particular app. The :setting:`STATICFILES_DIRS` setting is a tuple of filesystem directories to check when loading static files. It's a search path that is by default empty. See the :setting:`STATICFILES_DIRS` docs how to extend this list of additional paths."
msgstr ""

#: ../../howto/static-files.txt:51
# 314c11880e43409d8931957ff96158bc
msgid "Additionally, see the documentation for the :setting:`STATICFILES_FINDERS` setting for details on how ``staticfiles`` finds your files."
msgstr ""

#: ../../howto/static-files.txt:54
# 4313aaf9177947cd96a8cda6f1853f0d
msgid "Make sure that ``django.contrib.staticfiles`` is included in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/static-files.txt:57
# 2442f34b181e4ca89ad8431f93e7662b
msgid "For :ref:`local development<staticfiles-development>`, if you are using :ref:`runserver<staticfiles-runserver>` or adding :ref:`staticfiles_urlpatterns<staticfiles-development>` to your URLconf, you're done with the setup -- your static files will automatically be served at the default (for :djadmin:`newly created<startproject>` projects) :setting:`STATIC_URL` of ``/static/``."
msgstr ""

#: ../../howto/static-files.txt:65
# d48238f162864976949a15b2a8aaa719
msgid "You'll probably need to refer to these files in your templates. The easiest method is to use the included context processor which allows template code like:"
msgstr ""

#: ../../howto/static-files.txt:73
# f1ff568ef12143148da028acbac83bab
msgid "See :ref:`staticfiles-in-templates` for more details, **including** an alternate method using a template tag."
msgstr ""

#: ../../howto/static-files.txt:77
# 6e9e7be478374d729a96cd7973ff2a1c
msgid "Deploying static files in a nutshell"
msgstr ""

#: ../../howto/static-files.txt:79
# c1161c57a799489c9ef4bc351f6935e9
msgid "When you're ready to move out of local development and deploy your project:"
msgstr ""

#: ../../howto/static-files.txt:81
# 4b1597c776ba4703b706a562438cb5ca
msgid "Set the :setting:`STATIC_URL` setting to the public URL for your static files (in most cases, the default value of ``/static/`` is just fine)."
msgstr ""

#: ../../howto/static-files.txt:84
# ea6405a907af439182cf316bb44f4a1a
msgid "Set the :setting:`STATIC_ROOT` setting to point to the filesystem path you'd like your static files collected to when you use the :djadmin:`collectstatic` management command. For example::"
msgstr ""

#: ../../howto/static-files.txt:90
# e432a279eeea4fdc887a784b2099cace
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

#: ../../howto/static-files.txt:94
# 40a19784c2f94f078f8efe9edc552533
msgid "This'll churn through your static file storage and copy them into the directory given by :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files.txt:97
# 011ea8fbf1ec44729b1d4b80bb270f54
msgid "Deploy those files by configuring your webserver of choice to serve the files in :setting:`STATIC_ROOT` at :setting:`STATIC_URL`."
msgstr ""

#: ../../howto/static-files.txt:100
# ad024f73f4274c4290aaeb8b4e28ec7a
msgid ":ref:`staticfiles-production` covers some common deployment strategies for static files."
msgstr ""

#: ../../howto/static-files.txt:103
# 16d558a54e6f44c68413961592d53dde
msgid "Those are the **basics**. For more details on common configuration options, read on; for a detailed reference of the settings, commands, and other bits included with the framework see :doc:`the staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

#: ../../howto/static-files.txt:110
# d700dad8d7a4453e80139a42a356e700
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files."
msgstr ""

#: ../../howto/static-files.txt:116
# f87837232c5c41fd85ef12ec21898309
msgid "For this reason, you need to make your :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` different from your :setting:`STATIC_ROOT` and :setting:`STATIC_URL`. You will need to arrange for serving of files in :setting:`MEDIA_ROOT` yourself; ``staticfiles`` does not deal with user-uploaded files at all. You can, however, use :func:`django.views.static.serve` view for serving :setting:`MEDIA_ROOT` in development; see :ref:`staticfiles-other-directories`."
msgstr ""

#: ../../howto/static-files.txt:127
# aba9381aabbe42e3b0e94288ad98d123
msgid "Referring to static files in templates"
msgstr ""

#: ../../howto/static-files.txt:129
# 515a25440e83424f88fd5fd72b019c9d
msgid "At some point, you'll probably need to link to static files in your templates. You could, of course, simply hardcode the path to you assets in the templates:"
msgstr ""

#: ../../howto/static-files.txt:136
# 30767ab8b5df4f31a9b8654faefd79f0
msgid "Of course, there are some serious problems with this: it doesn't work well in development, and it makes it *very* hard to change where you've deployed your static files. If, for example, you wanted to switch to using a content delivery network (CDN), then you'd need to change more or less every single template."
msgstr ""

#: ../../howto/static-files.txt:142
# 45db96922a0c4d44a6e7664c7f0fe75c
msgid "A far better way is to use the value of the :setting:`STATIC_URL` setting directly in your templates. This means that a switch of static files servers only requires changing that single value. Much better!"
msgstr ""

#: ../../howto/static-files.txt:146
# 7876edd0ef31464eb1c79e8ab7cb955f
msgid "Django includes multiple built-in ways of using this setting in your templates: a context processor and a template tag."
msgstr ""

#: ../../howto/static-files.txt:150
# 5b87100bf68b476b8fee79b47c1cf8d0
msgid "With a context processor"
msgstr ""

#: ../../howto/static-files.txt:152
# e4dc133659194777b7e9d161d74dafa9
msgid "The included context processor is the easy way. Simply make sure ``'django.core.context_processors.static'`` is in your :setting:`TEMPLATE_CONTEXT_PROCESSORS`. It's there by default, and if you're editing that setting by hand it should look something like::"
msgstr ""

#: ../../howto/static-files.txt:166
# deba81ec1b624c3da4f666926798721e
msgid "Once that's done, you can refer to :setting:`STATIC_URL` in your templates:"
msgstr ""

#: ../../howto/static-files.txt:172
# 59fd8fcd48654b48834f4af334e6fe67
msgid "If ``{{ STATIC_URL }}`` isn't working in your template, you're probably not using :class:`~django.template.RequestContext` when rendering the template."
msgstr ""

#: ../../howto/static-files.txt:175
# 273b4b61a43049b0ae2765afd555d527
msgid "As a brief refresher, context processors add variables into the contexts of every template. However, context processors require that you use :class:`~django.template.RequestContext` when rendering templates. This happens automatically if you're using a :doc:`generic view </ref/class-based-views>`, but in views written by hand you'll need to explicitly use ``RequestContext`` To see how that works, and to read more details, check out :ref:`subclassing-context-requestcontext`."
msgstr ""

#: ../../howto/static-files.txt:183
# d7c6377509844615b96025f72b538a1c
msgid "Another option is the :ttag:`get_static_prefix` template tag that is part of Django's core."
msgstr ""

#: ../../howto/static-files.txt:187
# 94dedafe289a42edaf127624e1ec02b9
msgid "With a template tag"
msgstr ""

#: ../../howto/static-files.txt:189
# 6281e41b93c744229e70bf2f7e77b2f2
msgid "The more powerful tool is the :ttag:`static<staticfiles-static>` template tag. It builds the URL for the given relative path by using the configured :setting:`STATICFILES_STORAGE` storage."
msgstr ""

#: ../../howto/static-files.txt:198
# 2e1222ed0ee64ff1a2bd1ea47a332505
msgid "It is also able to consume standard context variables, e.g. assuming a ``user_stylesheet`` variable is passed to the template:"
msgstr ""

#: ../../howto/static-files.txt:208
# 4916fd3dd5c74a22b05b41f77dfe5af6
msgid "There is also a template tag named :ttag:`static` in Django's core set of :ref:`built in template tags<ref-templates-builtins-tags>` which has the same argument signature but only uses `urlparse.urljoin()`_ with the :setting:`STATIC_URL` setting and the given path. This has the disadvantage of not being able to easily switch the storage backend without changing the templates, so in doubt use the ``staticfiles`` :ttag:`static<staticfiles-static>` template tag."
msgstr ""

#: ../../howto/static-files.txt:222
# 570a9489ae6b429699e2b8d53fd5e819
msgid "Serving static files in development"
msgstr ""

#: ../../howto/static-files.txt:224
# 25009c680dfd4220b58cc0178bc0be95
msgid "The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the ``staticfiles`` app ships with a **quick and dirty helper view** that you can use to serve files locally in development."
msgstr ""

#: ../../howto/static-files.txt:231
# ec8b8ef7e6ff4338bf3f3ddfe33012e7
msgid "This view is automatically enabled and will serve your static files at :setting:`STATIC_URL` when you use the built-in :ref:`runserver<staticfiles-runserver>` management command."
msgstr ""

#: ../../howto/static-files.txt:235
# b52a71874d844cafb9dc8ad39568e051
msgid "To enable this view if you are using some other server for local development, you'll add a couple of lines to your URLconf. The first line goes at the top of the file, and the last line at the bottom::"
msgstr ""

#: ../../howto/static-files.txt:245
# 32854707072640d48a05b0a2ab486a74
msgid "This will inspect your :setting:`STATIC_URL` setting and wire up the view to serve static files accordingly. Don't forget to set the :setting:`STATICFILES_DIRS` setting appropriately to let ``django.contrib.staticfiles`` know where to look for files additionally to files in app directories."
msgstr ""

#: ../../howto/static-files.txt:253
# f8941e640fa34b8ab6df815123a7df18
msgid "This will only work if :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../howto/static-files.txt:255
# 241324c213ad4077bddba7b0f695f2c8
msgid "That's because this view is **grossly inefficient** and probably **insecure**. This is only intended for local development, and should **never be used in production**."
msgstr ""

#: ../../howto/static-files.txt:259
# 3eeb9aeda2be472bb61ed0ed22b69ff9
msgid "Additionally, when using ``staticfiles_urlpatterns`` your :setting:`STATIC_URL` setting can't be empty or a full URL, such as ``http://static.example.com/``."
msgstr ""

#: ../../howto/static-files.txt:263
# 40be46b8154c454db41f3a2c9870649a
msgid "For a few more details on how the ``staticfiles`` can be used during development, see :ref:`staticfiles-development-view`."
msgstr ""

#: ../../howto/static-files.txt:269
# 391c6cf8b8c44392bdb8e1a502e608ff
msgid "Serving other directories"
msgstr ""

#: ../../howto/static-files.txt:274
# c818efc6ea0c4222869eb1b0c45acb96
msgid "There may be files other than your project's static assets that, for convenience, you'd like to have Django serve for you in local development. The :func:`~django.views.static.serve` view can be used to serve any directory you give it. (Again, this view is **not** hardened for production use, and should be used only as a development aid; you should serve these files in production using a real front-end webserver)."
msgstr ""

#: ../../howto/static-files.txt:281
# 96268aa2f8de4f348f23001a95a45efc
msgid "The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. ``staticfiles`` is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your :setting:`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""

#: ../../howto/static-files.txt:297
# 142a87e8cdf547d4a6ea0cae8e60a196
msgid "Note, the snippet assumes your :setting:`MEDIA_URL` has a value of ``'/media/'``. This will call the :func:`~django.views.static.serve` view, passing in the path from the URLconf and the (required) ``document_root`` parameter."
msgstr ""

#: ../../howto/static-files.txt:305
# 4e311cd6683740cba0ee314b3280da0a
msgid "Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function :func:`~django.conf.urls.static.static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and a dotted path to a view, such as ``'django.views.static.serve'``. Any other function parameter will be transparently passed to the view."
msgstr ""

#: ../../howto/static-files.txt:312
# a1baa9ae67894d85bd3afc7ec3fb8b36
msgid "An example for serving :setting:`MEDIA_URL` (``'/media/'``) during development::"
msgstr ""

#: ../../howto/static-files.txt:324
# a40022e3f272402b81bc4887510d1817
msgid "This helper function will only be operational in debug mode and if the given prefix is local (e.g. ``/static/``) and not a URL (e.g. ``http://static.example.com/``)."
msgstr ""

#: ../../howto/static-files.txt:331
# 30cf72a8353f45cca350cdeee42eb60a
msgid "Serving static files in production"
msgstr ""

#: ../../howto/static-files.txt:333
# 8e86e3c6276143dab2fae420e529e1ae
msgid "The basic outline of putting static files into production is simple: run the :djadmin:`collectstatic` command when static files change, then arrange for the collected static files directory (:setting:`STATIC_ROOT`) to be moved to the static file server and served."
msgstr ""

#: ../../howto/static-files.txt:338
# 59f43b0b7dd9424196a80e37b7f86548
msgid "Of course, as with all deployment tasks, the devil's in the details. Every production setup will be a bit different, so you'll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

#: ../../howto/static-files.txt:343
# bd808f3e39b8424a95081d2dbf3e820b
msgid "Serving the app and your static files from the same server"
msgstr ""

#: ../../howto/static-files.txt:345
# f1383b03cb344ba8b30da70c05090397
msgid "If you want to serve your static files from the same server that's already serving your site, the basic outline gets modified to look something like:"
msgstr ""

#: ../../howto/static-files.txt:348
# 1b9d86ee169342d3b4a6d20ea9230c7c
msgid "Push your code up to the deployment server."
msgstr ""

#: ../../howto/static-files.txt:349
# 04c643d3db484640868ccba66904386d
msgid "On the server, run :djadmin:`collectstatic` to copy all the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files.txt:351
# 0932df7b809342f5ab53f19ffb77d339
msgid "Point your web server at :setting:`STATIC_ROOT`. For example, here's :ref:`how to do this under Apache and mod_wsgi <serving-files>`."
msgstr ""

#: ../../howto/static-files.txt:354
# ed6be84012804ad3b3120e5b719cede6
msgid "You'll probably want to automate this process, especially if you've got multiple web servers. There's any number of ways to do this automation, but one option that many Django developers enjoy is `Fabric`__."
msgstr ""

#: ../../howto/static-files.txt:360
# 48053b65475b4253ae13557b6c5dfd3a
msgid "Below, and in the following sections, we'll show off a few example fabfiles (i.e. Fabric scripts) that automate these file deployment options. The syntax of a fabfile is fairly straightforward but won't be covered here; consult `Fabric's documentation`__, for a complete explanation of the syntax.."
msgstr ""

#: ../../howto/static-files.txt:367
# f7f428422a3d4039a0cfefb8142ac106
msgid "So, a fabfile to deploy static files to a couple of web servers might look something like::"
msgstr ""

#: ../../howto/static-files.txt:383
# f196fb8bf4934f10a6eb48d2d21dfc01
msgid "Serving static files from a dedicated server"
msgstr ""

#: ../../howto/static-files.txt:385
# 0eeeb19631184554987f66140f16cac8
msgid "Most larger Django apps use a separate Web server -- i.e., one that's not also running Django -- for serving static files. This server often runs a different type of web server -- faster but less full-featured. Some good choices are:"
msgstr ""

#: ../../howto/static-files.txt:401
# f50ad17a6dea46e6b82129b5ed1e1fd8
msgid "Configuring these servers is out of scope of this document; check each server's respective documentation for instructions."
msgstr ""

#: ../../howto/static-files.txt:404
# dac225c19fbb43f7904a0d8ff75011d7
msgid "Since your static file server won't be running Django, you'll need to modify the deployment strategy to look something like:"
msgstr ""

#: ../../howto/static-files.txt:407
# 756bdf187a1f460a84f7ada123b87e4f
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

#: ../../howto/static-files.txt:408
# 0b3871b07cae4797af20adfcc00f989e
msgid "Push your local :setting:`STATIC_ROOT` up to the static file server into the directory that's being served. ``rsync`` is a good choice for this step since it only needs to transfer the bits of static files that have changed."
msgstr ""

#: ../../howto/static-files.txt:413
# bd60ce0346de4273902c30ee5c5c4800
msgid "Here's how this might look in a fabfile::"
msgstr ""

#: ../../howto/static-files.txt:436
# ae7c5719d866418aac1bac1239ba10cd
msgid "Serving static files from a cloud service or CDN"
msgstr ""

#: ../../howto/static-files.txt:438
# 8b17cfcda63b4753bd05888cf38d20db
msgid "Another common tactic is to serve static files from a cloud storage provider like Amazon's S3__ and/or a CDN (content delivery network). This lets you ignore the problems of serving static files, and can often make for faster-loading webpages (especially when using a CDN)."
msgstr ""

#: ../../howto/static-files.txt:443
# 07ad265b9f404939b0504c1aee47162e
msgid "When using these services, the basic workflow would look a bit like the above, except that instead of using ``rsync`` to transfer your static files to the server you'd need to transfer the static files to the storage provider or CDN."
msgstr ""

#: ../../howto/static-files.txt:447
# 121ff621f72d461ba5ab2f139ae3400c
msgid "There's any number of ways you might do this, but if the provider has an API a :doc:`custom file storage backend </howto/custom-file-storage>` will make the process incredibly simple. If you've written or are using a 3rd party custom storage backend, you can tell :djadmin:`collectstatic` to use it by setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

#: ../../howto/static-files.txt:453
# d219534ea7b34fd99dcd98c041c9dbb8
msgid "For example, if you've written an S3 storage backend in ``myproject.storage.S3Storage`` you could use it with::"
msgstr ""

#: ../../howto/static-files.txt:458
# c4793054c31146c0a84a3a1a5bc23a48
msgid "Once that's done, all you have to do is run :djadmin:`collectstatic` and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, it could be as simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

#: ../../howto/static-files.txt:463
# 2f3b8e3911ac440ab4f4a2cffc29d211
msgid "For details on how you'd write one of these backends, :doc:`/howto/custom-file-storage`."
msgstr ""

#: ../../howto/static-files.txt:468
# a7218069006f437d8c648f0e4198fdff
msgid "The `django-storages`__ project is a 3rd party app that provides many storage backends for many common file storage APIs (including `S3`__)."
msgstr ""

#: ../../howto/static-files.txt:476
# d0e2b2b24cdc4174b6792c497ced2b54
msgid "Upgrading from ``django-staticfiles``"
msgstr ""

#: ../../howto/static-files.txt:478
# 78b3b7fc856247c8bd9b7039d61f5c8c
msgid "``django.contrib.staticfiles`` began its life as `django-staticfiles`_. If you're upgrading from `django-staticfiles`_ older than 1.0 (e.g. 0.3.4) to ``django.contrib.staticfiles``, you'll need to make a few changes:"
msgstr ""

#: ../../howto/static-files.txt:482
# fdc2f86d1a554332876df260a366ff40
msgid "Application files should now live in a ``static`` directory in each app (`django-staticfiles`_ used the name ``media``, which was slightly confusing)."
msgstr ""

#: ../../howto/static-files.txt:486
# 9559a6d7d7634743a278f0a664f6a981
msgid "The management commands ``build_static`` and ``resolve_static`` are now called :djadmin:`collectstatic` and :djadmin:`findstatic`."
msgstr ""

#: ../../howto/static-files.txt:489
# d7fc95d060b846ea8943d0baf987656d
msgid "The settings ``STATICFILES_PREPEND_LABEL_APPS``, ``STATICFILES_MEDIA_DIRNAMES`` and ``STATICFILES_EXCLUDED_APPS`` were removed."
msgstr ""

#: ../../howto/static-files.txt:493
# 3c64a34a58d0462eb1a14d4b968f6183
msgid "The setting ``STATICFILES_RESOLVERS`` was removed, and replaced by the new :setting:`STATICFILES_FINDERS`."
msgstr ""

#: ../../howto/static-files.txt:496
# db63298ad9604250b7866978a7c7f94e
msgid "The default for :setting:`STATICFILES_STORAGE` was renamed from ``staticfiles.storage.StaticFileStorage`` to ``staticfiles.storage.StaticFilesStorage``"
msgstr ""

#: ../../howto/static-files.txt:500
# b6d2d1e97e594e92b35f45612a7f01b4
msgid "If using :ref:`runserver<staticfiles-runserver>` for local development (and the :setting:`DEBUG` setting is ``True``), you no longer need to add anything to your URLconf for serving static files in development."
msgstr ""

#: ../../howto/static-files.txt:505
# 3a42e488738e4efd9c019995e24665cd
msgid "Learn more"
msgstr ""

#: ../../howto/static-files.txt:507
# 2200c12290b9463d990d1784549a7b0f
msgid "This document has covered the basics and some common usage patterns. For complete details on all the settings, commands, template tags, and other pieces include in ``django.contrib.staticfiles``, see :doc:`the staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

